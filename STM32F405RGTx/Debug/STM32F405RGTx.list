
STM32F405RGTx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004358  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000298  080044e8  080044e8  000144e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004780  08004780  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004780  08004780  00014780  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004788  08004788  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004788  08004788  00014788  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800478c  0800478c  0001478c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004790  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000148  20000070  08004800  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001b8  08004800  000201b8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001242d  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000024e8  00000000  00000000  000324cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fa8  00000000  00000000  000349b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ec0  00000000  00000000  00035960  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020531  00000000  00000000  00036820  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010a30  00000000  00000000  00056d51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c47b7  00000000  00000000  00067781  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0012bf38  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000460c  00000000  00000000  0012bf8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080044d0 	.word	0x080044d0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	080044d0 	.word	0x080044d0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <uart1_print>:
#include "timer_utils.h"
#include "stdint.h"
#include "stdio.h"
#include "string.h"

void uart1_print(char* char_arr) {
 8000578:	b580      	push	{r7, lr}
 800057a:	b082      	sub	sp, #8
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (unsigned char*)(char_arr), strlen(char_arr), 500);
 8000580:	6878      	ldr	r0, [r7, #4]
 8000582:	f7ff fe25 	bl	80001d0 <strlen>
 8000586:	4603      	mov	r3, r0
 8000588:	b29a      	uxth	r2, r3
 800058a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800058e:	6879      	ldr	r1, [r7, #4]
 8000590:	4803      	ldr	r0, [pc, #12]	; (80005a0 <uart1_print+0x28>)
 8000592:	f003 f898 	bl	80036c6 <HAL_UART_Transmit>
}
 8000596:	bf00      	nop
 8000598:	3708      	adds	r7, #8
 800059a:	46bd      	mov	sp, r7
 800059c:	bd80      	pop	{r7, pc}
 800059e:	bf00      	nop
 80005a0:	200000f0 	.word	0x200000f0

080005a4 <bms_entry>:
		GPIOC->ODR ^= (1u << 3);
		delay_us(1);
	}
}

int bms_entry() {	
 80005a4:	b5b0      	push	{r4, r5, r7, lr}
 80005a6:	b0fc      	sub	sp, #496	; 0x1f0
 80005a8:	af16      	add	r7, sp, #88	; 0x58
	uart1_print("start...\n");
 80005aa:	482e      	ldr	r0, [pc, #184]	; (8000664 <bms_entry+0xc0>)
 80005ac:	f7ff ffe4 	bl	8000578 <uart1_print>

	start_timers();
 80005b0:	f000 fe9e 	bl	80012f0 <start_timers>
	// blinky_loop();
	// delay_us_test();

	Ltc6813 slave_device = Ltc6813_init(hspi2, GPIOB, 12);
 80005b4:	1d3d      	adds	r5, r7, #4
 80005b6:	4c2c      	ldr	r4, [pc, #176]	; (8000668 <bms_entry+0xc4>)
 80005b8:	230c      	movs	r3, #12
 80005ba:	9314      	str	r3, [sp, #80]	; 0x50
 80005bc:	4b2b      	ldr	r3, [pc, #172]	; (800066c <bms_entry+0xc8>)
 80005be:	9313      	str	r3, [sp, #76]	; 0x4c
 80005c0:	4668      	mov	r0, sp
 80005c2:	f104 030c 	add.w	r3, r4, #12
 80005c6:	224c      	movs	r2, #76	; 0x4c
 80005c8:	4619      	mov	r1, r3
 80005ca:	f003 fb4b 	bl	8003c64 <memcpy>
 80005ce:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 80005d2:	4628      	mov	r0, r5
 80005d4:	f000 f9a3 	bl	800091e <Ltc6813_init>
	// RDCVA command 
	// Buffer_append(&pkt, 0b000u);
	// Buffer_append(&pkt, 0b00000100u);
	// Buffer_add_pec(&pkt);

	Ltc6813_wakeup_sleep(&slave_device);
 80005d8:	1d3b      	adds	r3, r7, #4
 80005da:	4618      	mov	r0, r3
 80005dc:	f000 fa58 	bl	8000a90 <Ltc6813_wakeup_sleep>
	uint8_t success;
	HAL_Delay(1000);
 80005e0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005e4:	f000 ff44 	bl	8001470 <HAL_Delay>

	while (1) {

		Ltc6813_wakeup_sleep(&slave_device);
 80005e8:	1d3b      	adds	r3, r7, #4
 80005ea:	4618      	mov	r0, r3
 80005ec:	f000 fa50 	bl	8000a90 <Ltc6813_wakeup_sleep>

		uart1_print("CFG A");
 80005f0:	481f      	ldr	r0, [pc, #124]	; (8000670 <bms_entry+0xcc>)
 80005f2:	f7ff ffc1 	bl	8000578 <uart1_print>

		success = Ltc6813_read_cfga(&slave_device);
 80005f6:	1d3b      	adds	r3, r7, #4
 80005f8:	4618      	mov	r0, r3
 80005fa:	f000 fa95 	bl	8000b28 <Ltc6813_read_cfga>
 80005fe:	4603      	mov	r3, r0
 8000600:	f887 3197 	strb.w	r3, [r7, #407]	; 0x197

		if (success) {
 8000604:	f897 3197 	ldrb.w	r3, [r7, #407]	; 0x197
 8000608:	2b00      	cmp	r3, #0
 800060a:	d003      	beq.n	8000614 <bms_entry+0x70>
			uart1_print("PEC SUCCESS");
 800060c:	4819      	ldr	r0, [pc, #100]	; (8000674 <bms_entry+0xd0>)
 800060e:	f7ff ffb3 	bl	8000578 <uart1_print>
 8000612:	e002      	b.n	800061a <bms_entry+0x76>
		} else {
			uart1_print("PEC FAIL");
 8000614:	4818      	ldr	r0, [pc, #96]	; (8000678 <bms_entry+0xd4>)
 8000616:	f7ff ffaf 	bl	8000578 <uart1_print>
		}

		Buffer_print(&(slave_device.cfga_bfr));
 800061a:	1d3b      	adds	r3, r7, #4
 800061c:	33c2      	adds	r3, #194	; 0xc2
 800061e:	4618      	mov	r0, r3
 8000620:	f000 f928 	bl	8000874 <Buffer_print>

		uart1_print("CFG B");
 8000624:	4815      	ldr	r0, [pc, #84]	; (800067c <bms_entry+0xd8>)
 8000626:	f7ff ffa7 	bl	8000578 <uart1_print>

		success = Ltc6813_read_cfgb(&slave_device);
 800062a:	1d3b      	adds	r3, r7, #4
 800062c:	4618      	mov	r0, r3
 800062e:	f000 fab1 	bl	8000b94 <Ltc6813_read_cfgb>
 8000632:	4603      	mov	r3, r0
 8000634:	f887 3197 	strb.w	r3, [r7, #407]	; 0x197

		if (success) {
 8000638:	f897 3197 	ldrb.w	r3, [r7, #407]	; 0x197
 800063c:	2b00      	cmp	r3, #0
 800063e:	d003      	beq.n	8000648 <bms_entry+0xa4>
			uart1_print("PEC SUCCESS");
 8000640:	480c      	ldr	r0, [pc, #48]	; (8000674 <bms_entry+0xd0>)
 8000642:	f7ff ff99 	bl	8000578 <uart1_print>
 8000646:	e002      	b.n	800064e <bms_entry+0xaa>
		} else {
			uart1_print("PEC FAIL");
 8000648:	480b      	ldr	r0, [pc, #44]	; (8000678 <bms_entry+0xd4>)
 800064a:	f7ff ff95 	bl	8000578 <uart1_print>
		}

		Buffer_print(&(slave_device.cfgb_bfr));
 800064e:	1d3b      	adds	r3, r7, #4
 8000650:	f203 1327 	addw	r3, r3, #295	; 0x127
 8000654:	4618      	mov	r0, r3
 8000656:	f000 f90d 	bl	8000874 <Buffer_print>

		HAL_Delay(500);
 800065a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800065e:	f000 ff07 	bl	8001470 <HAL_Delay>
		Ltc6813_wakeup_sleep(&slave_device);
 8000662:	e7c1      	b.n	80005e8 <bms_entry+0x44>
 8000664:	080044e8 	.word	0x080044e8
 8000668:	20000098 	.word	0x20000098
 800066c:	40020400 	.word	0x40020400
 8000670:	080044f4 	.word	0x080044f4
 8000674:	080044fc 	.word	0x080044fc
 8000678:	08004508 	.word	0x08004508
 800067c:	08004514 	.word	0x08004514

08000680 <Buffer_init>:
	0x585a, 0x8ba7, 0x4e3e, 0x450c, 0x8095
};

/////////////////////////////////////////////////////////////////////////////////////////////////////
// Buffer methods
Buffer Buffer_init() {
 8000680:	b580      	push	{r7, lr}
 8000682:	b09c      	sub	sp, #112	; 0x70
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]
	Buffer buffer = {};
 8000688:	f107 0308 	add.w	r3, r7, #8
 800068c:	2265      	movs	r2, #101	; 0x65
 800068e:	2100      	movs	r1, #0
 8000690:	4618      	mov	r0, r3
 8000692:	f003 faf5 	bl	8003c80 <memset>
	buffer.len = 0;
 8000696:	2300      	movs	r3, #0
 8000698:	723b      	strb	r3, [r7, #8]
	return buffer;
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	4618      	mov	r0, r3
 800069e:	f107 0308 	add.w	r3, r7, #8
 80006a2:	2265      	movs	r2, #101	; 0x65
 80006a4:	4619      	mov	r1, r3
 80006a6:	f003 fadd 	bl	8003c64 <memcpy>
}
 80006aa:	6878      	ldr	r0, [r7, #4]
 80006ac:	3770      	adds	r7, #112	; 0x70
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bd80      	pop	{r7, pc}

080006b2 <Buffer_append>:

void Buffer_append(Buffer* self, uint8_t val) {
 80006b2:	b480      	push	{r7}
 80006b4:	b085      	sub	sp, #20
 80006b6:	af00      	add	r7, sp, #0
 80006b8:	6078      	str	r0, [r7, #4]
 80006ba:	460b      	mov	r3, r1
 80006bc:	70fb      	strb	r3, [r7, #3]
	uint8_t indx = self->len;
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	781b      	ldrb	r3, [r3, #0]
 80006c2:	73fb      	strb	r3, [r7, #15]
	self->data[indx] = val;
 80006c4:	7bfb      	ldrb	r3, [r7, #15]
 80006c6:	687a      	ldr	r2, [r7, #4]
 80006c8:	4413      	add	r3, r2
 80006ca:	78fa      	ldrb	r2, [r7, #3]
 80006cc:	705a      	strb	r2, [r3, #1]
	self->len += 1;
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	781b      	ldrb	r3, [r3, #0]
 80006d2:	3301      	adds	r3, #1
 80006d4:	b2da      	uxtb	r2, r3
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	701a      	strb	r2, [r3, #0]
}
 80006da:	bf00      	nop
 80006dc:	3714      	adds	r7, #20
 80006de:	46bd      	mov	sp, r7
 80006e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e4:	4770      	bx	lr

080006e6 <Buffer_index>:

uint8_t Buffer_index(Buffer* self, uint8_t indx) {
 80006e6:	b580      	push	{r7, lr}
 80006e8:	b082      	sub	sp, #8
 80006ea:	af00      	add	r7, sp, #0
 80006ec:	6078      	str	r0, [r7, #4]
 80006ee:	460b      	mov	r3, r1
 80006f0:	70fb      	strb	r3, [r7, #3]
	if (indx >= self->len) { Error_Handler(); }
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	781b      	ldrb	r3, [r3, #0]
 80006f6:	78fa      	ldrb	r2, [r7, #3]
 80006f8:	429a      	cmp	r2, r3
 80006fa:	d301      	bcc.n	8000700 <Buffer_index+0x1a>
 80006fc:	f000 fc60 	bl	8000fc0 <Error_Handler>
	return self->data[indx];
 8000700:	78fb      	ldrb	r3, [r7, #3]
 8000702:	687a      	ldr	r2, [r7, #4]
 8000704:	4413      	add	r3, r2
 8000706:	785b      	ldrb	r3, [r3, #1]
}
 8000708:	4618      	mov	r0, r3
 800070a:	3708      	adds	r7, #8
 800070c:	46bd      	mov	sp, r7
 800070e:	bd80      	pop	{r7, pc}

08000710 <Buffer_set_index>:
void Buffer_set_index(Buffer* self, uint8_t indx, uint8_t val) {
 8000710:	b580      	push	{r7, lr}
 8000712:	b082      	sub	sp, #8
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]
 8000718:	460b      	mov	r3, r1
 800071a:	70fb      	strb	r3, [r7, #3]
 800071c:	4613      	mov	r3, r2
 800071e:	70bb      	strb	r3, [r7, #2]
	if (indx >= self->len) { Error_Handler(); }
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	781b      	ldrb	r3, [r3, #0]
 8000724:	78fa      	ldrb	r2, [r7, #3]
 8000726:	429a      	cmp	r2, r3
 8000728:	d301      	bcc.n	800072e <Buffer_set_index+0x1e>
 800072a:	f000 fc49 	bl	8000fc0 <Error_Handler>
	self->data[indx] = val;
 800072e:	78fb      	ldrb	r3, [r7, #3]
 8000730:	687a      	ldr	r2, [r7, #4]
 8000732:	4413      	add	r3, r2
 8000734:	78ba      	ldrb	r2, [r7, #2]
 8000736:	705a      	strb	r2, [r3, #1]
}
 8000738:	bf00      	nop
 800073a:	3708      	adds	r7, #8
 800073c:	46bd      	mov	sp, r7
 800073e:	bd80      	pop	{r7, pc}

08000740 <Buffer_add_pec>:

void Buffer_add_pec(Buffer* self) {
 8000740:	b590      	push	{r4, r7, lr}
 8000742:	b085      	sub	sp, #20
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
	uint16_t remainder = 16;
 8000748:	2310      	movs	r3, #16
 800074a:	81fb      	strh	r3, [r7, #14]
	uint16_t addr = 0;
 800074c:	2300      	movs	r3, #0
 800074e:	817b      	strh	r3, [r7, #10]
	for (uint8_t i = 0; i < self->len; i++) {
 8000750:	2300      	movs	r3, #0
 8000752:	737b      	strb	r3, [r7, #13]
 8000754:	e01b      	b.n	800078e <Buffer_add_pec+0x4e>
		addr = ( (remainder >> 7)^Buffer_index(self, i) ) & 0xff;
 8000756:	89fb      	ldrh	r3, [r7, #14]
 8000758:	09db      	lsrs	r3, r3, #7
 800075a:	b29c      	uxth	r4, r3
 800075c:	7b7b      	ldrb	r3, [r7, #13]
 800075e:	4619      	mov	r1, r3
 8000760:	6878      	ldr	r0, [r7, #4]
 8000762:	f7ff ffc0 	bl	80006e6 <Buffer_index>
 8000766:	4603      	mov	r3, r0
 8000768:	b29b      	uxth	r3, r3
 800076a:	4063      	eors	r3, r4
 800076c:	b29b      	uxth	r3, r3
 800076e:	b2db      	uxtb	r3, r3
 8000770:	817b      	strh	r3, [r7, #10]
		remainder = (remainder << 8)^_CRC15_LUT[addr];
 8000772:	89fb      	ldrh	r3, [r7, #14]
 8000774:	021b      	lsls	r3, r3, #8
 8000776:	b21a      	sxth	r2, r3
 8000778:	897b      	ldrh	r3, [r7, #10]
 800077a:	4912      	ldr	r1, [pc, #72]	; (80007c4 <Buffer_add_pec+0x84>)
 800077c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000780:	b21b      	sxth	r3, r3
 8000782:	4053      	eors	r3, r2
 8000784:	b21b      	sxth	r3, r3
 8000786:	81fb      	strh	r3, [r7, #14]
	for (uint8_t i = 0; i < self->len; i++) {
 8000788:	7b7b      	ldrb	r3, [r7, #13]
 800078a:	3301      	adds	r3, #1
 800078c:	737b      	strb	r3, [r7, #13]
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	781b      	ldrb	r3, [r3, #0]
 8000792:	7b7a      	ldrb	r2, [r7, #13]
 8000794:	429a      	cmp	r2, r3
 8000796:	d3de      	bcc.n	8000756 <Buffer_add_pec+0x16>
	}
	uint16_t pec = remainder*2;
 8000798:	89fb      	ldrh	r3, [r7, #14]
 800079a:	005b      	lsls	r3, r3, #1
 800079c:	813b      	strh	r3, [r7, #8]
	Buffer_append(self, (pec >> 8) & 0xff);
 800079e:	893b      	ldrh	r3, [r7, #8]
 80007a0:	0a1b      	lsrs	r3, r3, #8
 80007a2:	b29b      	uxth	r3, r3
 80007a4:	b2db      	uxtb	r3, r3
 80007a6:	4619      	mov	r1, r3
 80007a8:	6878      	ldr	r0, [r7, #4]
 80007aa:	f7ff ff82 	bl	80006b2 <Buffer_append>
	Buffer_append(self, pec & 0xff);
 80007ae:	893b      	ldrh	r3, [r7, #8]
 80007b0:	b2db      	uxtb	r3, r3
 80007b2:	4619      	mov	r1, r3
 80007b4:	6878      	ldr	r0, [r7, #4]
 80007b6:	f7ff ff7c 	bl	80006b2 <Buffer_append>
}
 80007ba:	bf00      	nop
 80007bc:	3714      	adds	r7, #20
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd90      	pop	{r4, r7, pc}
 80007c2:	bf00      	nop
 80007c4:	08004534 	.word	0x08004534

080007c8 <Buffer_check_pec>:

uint8_t Buffer_check_pec(Buffer* self) {
 80007c8:	b590      	push	{r4, r7, lr}
 80007ca:	b087      	sub	sp, #28
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
	uint16_t remainder = 16;
 80007d0:	2310      	movs	r3, #16
 80007d2:	82fb      	strh	r3, [r7, #22]
	uint16_t addr = 0;
 80007d4:	2300      	movs	r3, #0
 80007d6:	827b      	strh	r3, [r7, #18]
	for (uint8_t i = 0; i < self->len - 2; i++) {
 80007d8:	2300      	movs	r3, #0
 80007da:	757b      	strb	r3, [r7, #21]
 80007dc:	e01b      	b.n	8000816 <Buffer_check_pec+0x4e>
		addr = ( (remainder >> 7)^Buffer_index(self, i) ) & 0xff;
 80007de:	8afb      	ldrh	r3, [r7, #22]
 80007e0:	09db      	lsrs	r3, r3, #7
 80007e2:	b29c      	uxth	r4, r3
 80007e4:	7d7b      	ldrb	r3, [r7, #21]
 80007e6:	4619      	mov	r1, r3
 80007e8:	6878      	ldr	r0, [r7, #4]
 80007ea:	f7ff ff7c 	bl	80006e6 <Buffer_index>
 80007ee:	4603      	mov	r3, r0
 80007f0:	b29b      	uxth	r3, r3
 80007f2:	4063      	eors	r3, r4
 80007f4:	b29b      	uxth	r3, r3
 80007f6:	b2db      	uxtb	r3, r3
 80007f8:	827b      	strh	r3, [r7, #18]
		remainder = (remainder << 8)^_CRC15_LUT[addr];
 80007fa:	8afb      	ldrh	r3, [r7, #22]
 80007fc:	021b      	lsls	r3, r3, #8
 80007fe:	b21a      	sxth	r2, r3
 8000800:	8a7b      	ldrh	r3, [r7, #18]
 8000802:	491b      	ldr	r1, [pc, #108]	; (8000870 <Buffer_check_pec+0xa8>)
 8000804:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000808:	b21b      	sxth	r3, r3
 800080a:	4053      	eors	r3, r2
 800080c:	b21b      	sxth	r3, r3
 800080e:	82fb      	strh	r3, [r7, #22]
	for (uint8_t i = 0; i < self->len - 2; i++) {
 8000810:	7d7b      	ldrb	r3, [r7, #21]
 8000812:	3301      	adds	r3, #1
 8000814:	757b      	strb	r3, [r7, #21]
 8000816:	7d7a      	ldrb	r2, [r7, #21]
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	781b      	ldrb	r3, [r3, #0]
 800081c:	3b02      	subs	r3, #2
 800081e:	429a      	cmp	r2, r3
 8000820:	dbdd      	blt.n	80007de <Buffer_check_pec+0x16>
	}
	uint16_t calc_pec = remainder*2;
 8000822:	8afb      	ldrh	r3, [r7, #22]
 8000824:	005b      	lsls	r3, r3, #1
 8000826:	823b      	strh	r3, [r7, #16]
	uint16_t act_pec = ((uint16_t)Buffer_index(self, self->len - 2) << 8) | Buffer_index(self, self->len - 1);
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	781b      	ldrb	r3, [r3, #0]
 800082c:	3b02      	subs	r3, #2
 800082e:	b2db      	uxtb	r3, r3
 8000830:	4619      	mov	r1, r3
 8000832:	6878      	ldr	r0, [r7, #4]
 8000834:	f7ff ff57 	bl	80006e6 <Buffer_index>
 8000838:	4603      	mov	r3, r0
 800083a:	021b      	lsls	r3, r3, #8
 800083c:	b21c      	sxth	r4, r3
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	781b      	ldrb	r3, [r3, #0]
 8000842:	3b01      	subs	r3, #1
 8000844:	b2db      	uxtb	r3, r3
 8000846:	4619      	mov	r1, r3
 8000848:	6878      	ldr	r0, [r7, #4]
 800084a:	f7ff ff4c 	bl	80006e6 <Buffer_index>
 800084e:	4603      	mov	r3, r0
 8000850:	b21b      	sxth	r3, r3
 8000852:	4323      	orrs	r3, r4
 8000854:	b21b      	sxth	r3, r3
 8000856:	81fb      	strh	r3, [r7, #14]
	return calc_pec == act_pec;
 8000858:	8a3a      	ldrh	r2, [r7, #16]
 800085a:	89fb      	ldrh	r3, [r7, #14]
 800085c:	429a      	cmp	r2, r3
 800085e:	bf0c      	ite	eq
 8000860:	2301      	moveq	r3, #1
 8000862:	2300      	movne	r3, #0
 8000864:	b2db      	uxtb	r3, r3
}
 8000866:	4618      	mov	r0, r3
 8000868:	371c      	adds	r7, #28
 800086a:	46bd      	mov	sp, r7
 800086c:	bd90      	pop	{r4, r7, pc}
 800086e:	bf00      	nop
 8000870:	08004534 	.word	0x08004534

08000874 <Buffer_print>:

void Buffer_print(Buffer* self) {
 8000874:	b590      	push	{r4, r7, lr}
 8000876:	f5ad 7d01 	sub.w	sp, sp, #516	; 0x204
 800087a:	af00      	add	r7, sp, #0
 800087c:	1d3b      	adds	r3, r7, #4
 800087e:	6018      	str	r0, [r3, #0]
	char str[500];
	for (uint8_t i = 0; i < self->len; i++) {
 8000880:	2300      	movs	r3, #0
 8000882:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
 8000886:	e019      	b.n	80008bc <Buffer_print+0x48>
		sprintf(str, "pkt byte %d: %d\n", i, Buffer_index(self, i));
 8000888:	f897 41ff 	ldrb.w	r4, [r7, #511]	; 0x1ff
 800088c:	f897 21ff 	ldrb.w	r2, [r7, #511]	; 0x1ff
 8000890:	1d3b      	adds	r3, r7, #4
 8000892:	4611      	mov	r1, r2
 8000894:	6818      	ldr	r0, [r3, #0]
 8000896:	f7ff ff26 	bl	80006e6 <Buffer_index>
 800089a:	4603      	mov	r3, r0
 800089c:	f107 0008 	add.w	r0, r7, #8
 80008a0:	4622      	mov	r2, r4
 80008a2:	490e      	ldr	r1, [pc, #56]	; (80008dc <Buffer_print+0x68>)
 80008a4:	f003 f9f4 	bl	8003c90 <siprintf>
		uart1_print(str);
 80008a8:	f107 0308 	add.w	r3, r7, #8
 80008ac:	4618      	mov	r0, r3
 80008ae:	f7ff fe63 	bl	8000578 <uart1_print>
	for (uint8_t i = 0; i < self->len; i++) {
 80008b2:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80008b6:	3301      	adds	r3, #1
 80008b8:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
 80008bc:	1d3b      	adds	r3, r7, #4
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	781b      	ldrb	r3, [r3, #0]
 80008c2:	f897 21ff 	ldrb.w	r2, [r7, #511]	; 0x1ff
 80008c6:	429a      	cmp	r2, r3
 80008c8:	d3de      	bcc.n	8000888 <Buffer_print+0x14>
	}
	uart1_print("\n");
 80008ca:	4805      	ldr	r0, [pc, #20]	; (80008e0 <Buffer_print+0x6c>)
 80008cc:	f7ff fe54 	bl	8000578 <uart1_print>
}
 80008d0:	bf00      	nop
 80008d2:	f507 7701 	add.w	r7, r7, #516	; 0x204
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd90      	pop	{r4, r7, pc}
 80008da:	bf00      	nop
 80008dc:	0800451c 	.word	0x0800451c
 80008e0:	08004530 	.word	0x08004530

080008e4 <Buffer_clear>:

void Buffer_clear(Buffer* self) {
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b082      	sub	sp, #8
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
	while (self->len > 0) {
 80008ec:	e00e      	b.n	800090c <Buffer_clear+0x28>
		Buffer_set_index(self, self->len - 1, 0);
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	781b      	ldrb	r3, [r3, #0]
 80008f2:	3b01      	subs	r3, #1
 80008f4:	b2db      	uxtb	r3, r3
 80008f6:	2200      	movs	r2, #0
 80008f8:	4619      	mov	r1, r3
 80008fa:	6878      	ldr	r0, [r7, #4]
 80008fc:	f7ff ff08 	bl	8000710 <Buffer_set_index>
		self->len = self->len - 1;
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	781b      	ldrb	r3, [r3, #0]
 8000904:	3b01      	subs	r3, #1
 8000906:	b2da      	uxtb	r2, r3
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	701a      	strb	r2, [r3, #0]
	while (self->len > 0) {
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	781b      	ldrb	r3, [r3, #0]
 8000910:	2b00      	cmp	r3, #0
 8000912:	d1ec      	bne.n	80008ee <Buffer_clear+0xa>
	}
}
 8000914:	bf00      	nop
 8000916:	bf00      	nop
 8000918:	3708      	adds	r7, #8
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}

0800091e <Ltc6813_init>:
/////////////////////////////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////////////////////////////
// Ltc6813 methods
Ltc6813 Ltc6813_init(SPI_HandleTypeDef spi, GPIO_TypeDef* cs_gpio_port, uint8_t cs_pin_num) {
 800091e:	b084      	sub	sp, #16
 8000920:	b590      	push	{r4, r7, lr}
 8000922:	f5ad 7d01 	sub.w	sp, sp, #516	; 0x204
 8000926:	af00      	add	r7, sp, #0
 8000928:	f107 046c 	add.w	r4, r7, #108	; 0x6c
 800092c:	6020      	str	r0, [r4, #0]
 800092e:	f507 7005 	add.w	r0, r7, #532	; 0x214
 8000932:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	Ltc6813 slave_device = {};
 8000936:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800093a:	4618      	mov	r0, r3
 800093c:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000940:	461a      	mov	r2, r3
 8000942:	2100      	movs	r1, #0
 8000944:	f003 f99c 	bl	8003c80 <memset>
	slave_device._spi_interface = spi;
 8000948:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800094c:	4618      	mov	r0, r3
 800094e:	f507 7305 	add.w	r3, r7, #532	; 0x214
 8000952:	2258      	movs	r2, #88	; 0x58
 8000954:	4619      	mov	r1, r3
 8000956:	f003 f985 	bl	8003c64 <memcpy>

	// config CS pin as GPIO output
	cs_gpio_port->MODER &= ~(0b11u << (cs_pin_num*2));
 800095a:	f8d7 326c 	ldr.w	r3, [r7, #620]	; 0x26c
 800095e:	681a      	ldr	r2, [r3, #0]
 8000960:	f897 3270 	ldrb.w	r3, [r7, #624]	; 0x270
 8000964:	005b      	lsls	r3, r3, #1
 8000966:	2103      	movs	r1, #3
 8000968:	fa01 f303 	lsl.w	r3, r1, r3
 800096c:	43db      	mvns	r3, r3
 800096e:	401a      	ands	r2, r3
 8000970:	f8d7 326c 	ldr.w	r3, [r7, #620]	; 0x26c
 8000974:	601a      	str	r2, [r3, #0]
	cs_gpio_port->MODER |= (0b01u << (cs_pin_num*2));
 8000976:	f8d7 326c 	ldr.w	r3, [r7, #620]	; 0x26c
 800097a:	681a      	ldr	r2, [r3, #0]
 800097c:	f897 3270 	ldrb.w	r3, [r7, #624]	; 0x270
 8000980:	005b      	lsls	r3, r3, #1
 8000982:	2101      	movs	r1, #1
 8000984:	fa01 f303 	lsl.w	r3, r1, r3
 8000988:	431a      	orrs	r2, r3
 800098a:	f8d7 326c 	ldr.w	r3, [r7, #620]	; 0x26c
 800098e:	601a      	str	r2, [r3, #0]

	slave_device._cs_gpio_port = cs_gpio_port;
 8000990:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000994:	f8d7 226c 	ldr.w	r2, [r7, #620]	; 0x26c
 8000998:	659a      	str	r2, [r3, #88]	; 0x58
	slave_device._cs_pin_num = cs_pin_num;
 800099a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800099e:	f897 2270 	ldrb.w	r2, [r7, #624]	; 0x270
 80009a2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

	slave_device.cmd_bfr = Buffer_init();
 80009a6:	f107 0470 	add.w	r4, r7, #112	; 0x70
 80009aa:	463b      	mov	r3, r7
 80009ac:	4618      	mov	r0, r3
 80009ae:	f7ff fe67 	bl	8000680 <Buffer_init>
 80009b2:	463a      	mov	r2, r7
 80009b4:	f104 035d 	add.w	r3, r4, #93	; 0x5d
 80009b8:	4611      	mov	r1, r2
 80009ba:	2265      	movs	r2, #101	; 0x65
 80009bc:	4618      	mov	r0, r3
 80009be:	f003 f951 	bl	8003c64 <memcpy>

	slave_device.cfga_bfr = Buffer_init();
 80009c2:	f107 0470 	add.w	r4, r7, #112	; 0x70
 80009c6:	463b      	mov	r3, r7
 80009c8:	4618      	mov	r0, r3
 80009ca:	f7ff fe59 	bl	8000680 <Buffer_init>
 80009ce:	463a      	mov	r2, r7
 80009d0:	f104 03c2 	add.w	r3, r4, #194	; 0xc2
 80009d4:	4611      	mov	r1, r2
 80009d6:	2265      	movs	r2, #101	; 0x65
 80009d8:	4618      	mov	r0, r3
 80009da:	f003 f943 	bl	8003c64 <memcpy>
	slave_device.cfgb_bfr = Buffer_init();
 80009de:	f107 0470 	add.w	r4, r7, #112	; 0x70
 80009e2:	463b      	mov	r3, r7
 80009e4:	4618      	mov	r0, r3
 80009e6:	f7ff fe4b 	bl	8000680 <Buffer_init>
 80009ea:	463a      	mov	r2, r7
 80009ec:	f204 1327 	addw	r3, r4, #295	; 0x127
 80009f0:	4611      	mov	r1, r2
 80009f2:	2265      	movs	r2, #101	; 0x65
 80009f4:	4618      	mov	r0, r3
 80009f6:	f003 f935 	bl	8003c64 <memcpy>

	slave_device.timeout = 10000;
 80009fa:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80009fe:	f242 7210 	movw	r2, #10000	; 0x2710
 8000a02:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c

	Ltc6813_cs_high(&slave_device);
 8000a06:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	f000 f82b 	bl	8000a66 <Ltc6813_cs_high>

	return slave_device;
 8000a10:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000a14:	681a      	ldr	r2, [r3, #0]
 8000a16:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000a1a:	4610      	mov	r0, r2
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000a22:	461a      	mov	r2, r3
 8000a24:	f003 f91e 	bl	8003c64 <memcpy>
}
 8000a28:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000a2c:	6818      	ldr	r0, [r3, #0]
 8000a2e:	f507 7701 	add.w	r7, r7, #516	; 0x204
 8000a32:	46bd      	mov	sp, r7
 8000a34:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8000a38:	b004      	add	sp, #16
 8000a3a:	4770      	bx	lr

08000a3c <Ltc6813_cs_low>:

void Ltc6813_cs_low(Ltc6813* self) { HAL_GPIO_WritePin(self->_cs_gpio_port, (1u << self->_cs_pin_num), 0); }
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b082      	sub	sp, #8
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8000a4e:	461a      	mov	r2, r3
 8000a50:	2301      	movs	r3, #1
 8000a52:	4093      	lsls	r3, r2
 8000a54:	b29b      	uxth	r3, r3
 8000a56:	2200      	movs	r2, #0
 8000a58:	4619      	mov	r1, r3
 8000a5a:	f001 f8ab 	bl	8001bb4 <HAL_GPIO_WritePin>
 8000a5e:	bf00      	nop
 8000a60:	3708      	adds	r7, #8
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bd80      	pop	{r7, pc}

08000a66 <Ltc6813_cs_high>:
void Ltc6813_cs_high(Ltc6813* self) { HAL_GPIO_WritePin(self->_cs_gpio_port, (1u << self->_cs_pin_num), 1); }
 8000a66:	b580      	push	{r7, lr}
 8000a68:	b082      	sub	sp, #8
 8000a6a:	af00      	add	r7, sp, #0
 8000a6c:	6078      	str	r0, [r7, #4]
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8000a78:	461a      	mov	r2, r3
 8000a7a:	2301      	movs	r3, #1
 8000a7c:	4093      	lsls	r3, r2
 8000a7e:	b29b      	uxth	r3, r3
 8000a80:	2201      	movs	r2, #1
 8000a82:	4619      	mov	r1, r3
 8000a84:	f001 f896 	bl	8001bb4 <HAL_GPIO_WritePin>
 8000a88:	bf00      	nop
 8000a8a:	3708      	adds	r7, #8
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	bd80      	pop	{r7, pc}

08000a90 <Ltc6813_wakeup_sleep>:

// WAKEUP FUNCTIONS:
// setting CS low will send a long isoSPI pulse (reference: page 18 of LTC6820 datasheet)
void Ltc6813_wakeup_sleep(Ltc6813* self) {
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b082      	sub	sp, #8
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
	Ltc6813_cs_low(self);
 8000a98:	6878      	ldr	r0, [r7, #4]
 8000a9a:	f7ff ffcf 	bl	8000a3c <Ltc6813_cs_low>
	delay_us(410);		// according to datasheet, t_wake = 400us
 8000a9e:	f44f 70cd 	mov.w	r0, #410	; 0x19a
 8000aa2:	f000 fc2f 	bl	8001304 <delay_us>
	Ltc6813_cs_high(self);
 8000aa6:	6878      	ldr	r0, [r7, #4]
 8000aa8:	f7ff ffdd 	bl	8000a66 <Ltc6813_cs_high>
	delay_us(30);
 8000aac:	201e      	movs	r0, #30
 8000aae:	f000 fc29 	bl	8001304 <delay_us>
}
 8000ab2:	bf00      	nop
 8000ab4:	3708      	adds	r7, #8
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}
	...

08000abc <Ltc6813_send_cmd>:
	Ltc6813_cs_high(self);
}

// READ COMMAND FUNCTIONS:
// commands to send read commands and receive data back (page 60 of LTC6813 datasheet)
void Ltc6813_send_cmd(Ltc6813* self, uint16_t cmd) {
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b082      	sub	sp, #8
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
 8000ac4:	460b      	mov	r3, r1
 8000ac6:	807b      	strh	r3, [r7, #2]
	Buffer_clear(&self->cmd_bfr);
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	335d      	adds	r3, #93	; 0x5d
 8000acc:	4618      	mov	r0, r3
 8000ace:	f7ff ff09 	bl	80008e4 <Buffer_clear>

	Buffer_append(&self->cmd_bfr, (cmd >> 8) & 0xff);
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	f103 025d 	add.w	r2, r3, #93	; 0x5d
 8000ad8:	887b      	ldrh	r3, [r7, #2]
 8000ada:	0a1b      	lsrs	r3, r3, #8
 8000adc:	b29b      	uxth	r3, r3
 8000ade:	b2db      	uxtb	r3, r3
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4610      	mov	r0, r2
 8000ae4:	f7ff fde5 	bl	80006b2 <Buffer_append>
	Buffer_append(&self->cmd_bfr, cmd & 0xff);
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	335d      	adds	r3, #93	; 0x5d
 8000aec:	887a      	ldrh	r2, [r7, #2]
 8000aee:	b2d2      	uxtb	r2, r2
 8000af0:	4611      	mov	r1, r2
 8000af2:	4618      	mov	r0, r3
 8000af4:	f7ff fddd 	bl	80006b2 <Buffer_append>

	Buffer_add_pec(&self->cmd_bfr);
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	335d      	adds	r3, #93	; 0x5d
 8000afc:	4618      	mov	r0, r3
 8000afe:	f7ff fe1f 	bl	8000740 <Buffer_add_pec>

	HAL_SPI_Transmit(&hspi2, self->cmd_bfr.data, self->cmd_bfr.len, self->timeout);
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	f103 015e 	add.w	r1, r3, #94	; 0x5e
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8000b0e:	b29a      	uxth	r2, r3
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	f8d3 318c 	ldr.w	r3, [r3, #396]	; 0x18c
 8000b16:	4803      	ldr	r0, [pc, #12]	; (8000b24 <Ltc6813_send_cmd+0x68>)
 8000b18:	f001 fd37 	bl	800258a <HAL_SPI_Transmit>
}
 8000b1c:	bf00      	nop
 8000b1e:	3708      	adds	r7, #8
 8000b20:	46bd      	mov	sp, r7
 8000b22:	bd80      	pop	{r7, pc}
 8000b24:	20000098 	.word	0x20000098

08000b28 <Ltc6813_read_cfga>:

uint8_t Ltc6813_read_cfga(Ltc6813* self) {
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b084      	sub	sp, #16
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
	Buffer_clear(&self->cfga_bfr);
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	33c2      	adds	r3, #194	; 0xc2
 8000b34:	4618      	mov	r0, r3
 8000b36:	f7ff fed5 	bl	80008e4 <Buffer_clear>

	self->cfga_bfr.len = 8;
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	2208      	movs	r2, #8
 8000b3e:	f883 20c2 	strb.w	r2, [r3, #194]	; 0xc2

	Ltc6813_cs_low(self);
 8000b42:	6878      	ldr	r0, [r7, #4]
 8000b44:	f7ff ff7a 	bl	8000a3c <Ltc6813_cs_low>

	Ltc6813_send_cmd(self, RDCFGA);
 8000b48:	2102      	movs	r1, #2
 8000b4a:	6878      	ldr	r0, [r7, #4]
 8000b4c:	f7ff ffb6 	bl	8000abc <Ltc6813_send_cmd>
	HAL_SPI_Receive(&hspi2, self->cfga_bfr.data, self->cfga_bfr.len, self->timeout);
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	f103 01c3 	add.w	r1, r3, #195	; 0xc3
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	f893 30c2 	ldrb.w	r3, [r3, #194]	; 0xc2
 8000b5c:	b29a      	uxth	r2, r3
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	f8d3 318c 	ldr.w	r3, [r3, #396]	; 0x18c
 8000b64:	480a      	ldr	r0, [pc, #40]	; (8000b90 <Ltc6813_read_cfga+0x68>)
 8000b66:	f001 fe4c 	bl	8002802 <HAL_SPI_Receive>

	Ltc6813_cs_high(self);
 8000b6a:	6878      	ldr	r0, [r7, #4]
 8000b6c:	f7ff ff7b 	bl	8000a66 <Ltc6813_cs_high>

	uint8_t pec_success = Buffer_check_pec(&self->cfga_bfr);
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	33c2      	adds	r3, #194	; 0xc2
 8000b74:	4618      	mov	r0, r3
 8000b76:	f7ff fe27 	bl	80007c8 <Buffer_check_pec>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	73fb      	strb	r3, [r7, #15]
	self->cfga_bfr.len = 6;
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	2206      	movs	r2, #6
 8000b82:	f883 20c2 	strb.w	r2, [r3, #194]	; 0xc2

	return pec_success;
 8000b86:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b88:	4618      	mov	r0, r3
 8000b8a:	3710      	adds	r7, #16
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bd80      	pop	{r7, pc}
 8000b90:	20000098 	.word	0x20000098

08000b94 <Ltc6813_read_cfgb>:

uint8_t Ltc6813_read_cfgb(Ltc6813* self) {
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b084      	sub	sp, #16
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
	Buffer_clear(&self->cfgb_bfr);
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	f203 1327 	addw	r3, r3, #295	; 0x127
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	f7ff fe9e 	bl	80008e4 <Buffer_clear>

	self->cfgb_bfr.len = 8;
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	2208      	movs	r2, #8
 8000bac:	f883 2127 	strb.w	r2, [r3, #295]	; 0x127

	Ltc6813_cs_low(self);
 8000bb0:	6878      	ldr	r0, [r7, #4]
 8000bb2:	f7ff ff43 	bl	8000a3c <Ltc6813_cs_low>

	Ltc6813_send_cmd(self, RDCFGB);
 8000bb6:	2126      	movs	r1, #38	; 0x26
 8000bb8:	6878      	ldr	r0, [r7, #4]
 8000bba:	f7ff ff7f 	bl	8000abc <Ltc6813_send_cmd>
	HAL_SPI_Receive(&hspi2, self->cfgb_bfr.data, self->cfgb_bfr.len, self->timeout);
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	f893 3127 	ldrb.w	r3, [r3, #295]	; 0x127
 8000bca:	b29a      	uxth	r2, r3
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	f8d3 318c 	ldr.w	r3, [r3, #396]	; 0x18c
 8000bd2:	480b      	ldr	r0, [pc, #44]	; (8000c00 <Ltc6813_read_cfgb+0x6c>)
 8000bd4:	f001 fe15 	bl	8002802 <HAL_SPI_Receive>

	Ltc6813_cs_high(self);
 8000bd8:	6878      	ldr	r0, [r7, #4]
 8000bda:	f7ff ff44 	bl	8000a66 <Ltc6813_cs_high>

	uint8_t pec_success = Buffer_check_pec(&self->cfgb_bfr);
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	f203 1327 	addw	r3, r3, #295	; 0x127
 8000be4:	4618      	mov	r0, r3
 8000be6:	f7ff fdef 	bl	80007c8 <Buffer_check_pec>
 8000bea:	4603      	mov	r3, r0
 8000bec:	73fb      	strb	r3, [r7, #15]
	self->cfgb_bfr.len = 6;
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	2206      	movs	r2, #6
 8000bf2:	f883 2127 	strb.w	r2, [r3, #295]	; 0x127

	return pec_success;
 8000bf6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	3710      	adds	r7, #16
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bd80      	pop	{r7, pc}
 8000c00:	20000098 	.word	0x20000098

08000c04 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c08:	f000 fbc0 	bl	800138c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c0c:	f000 f810 	bl	8000c30 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c10:	f000 f958 	bl	8000ec4 <MX_GPIO_Init>
  MX_CAN1_Init();
 8000c14:	f000 f876 	bl	8000d04 <MX_CAN1_Init>
  MX_SPI2_Init();
 8000c18:	f000 f8a8 	bl	8000d6c <MX_SPI2_Init>
  MX_USART1_UART_Init();
 8000c1c:	f000 f928 	bl	8000e70 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8000c20:	f000 f8da 	bl	8000dd8 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Infinite loop */
  return bms_entry();
 8000c24:	f7ff fcbe 	bl	80005a4 <bms_entry>
 8000c28:	4603      	mov	r3, r0
}
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	bd80      	pop	{r7, pc}
	...

08000c30 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b094      	sub	sp, #80	; 0x50
 8000c34:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c36:	f107 0320 	add.w	r3, r7, #32
 8000c3a:	2230      	movs	r2, #48	; 0x30
 8000c3c:	2100      	movs	r1, #0
 8000c3e:	4618      	mov	r0, r3
 8000c40:	f003 f81e 	bl	8003c80 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c44:	f107 030c 	add.w	r3, r7, #12
 8000c48:	2200      	movs	r2, #0
 8000c4a:	601a      	str	r2, [r3, #0]
 8000c4c:	605a      	str	r2, [r3, #4]
 8000c4e:	609a      	str	r2, [r3, #8]
 8000c50:	60da      	str	r2, [r3, #12]
 8000c52:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c54:	2300      	movs	r3, #0
 8000c56:	60bb      	str	r3, [r7, #8]
 8000c58:	4b28      	ldr	r3, [pc, #160]	; (8000cfc <SystemClock_Config+0xcc>)
 8000c5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c5c:	4a27      	ldr	r2, [pc, #156]	; (8000cfc <SystemClock_Config+0xcc>)
 8000c5e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c62:	6413      	str	r3, [r2, #64]	; 0x40
 8000c64:	4b25      	ldr	r3, [pc, #148]	; (8000cfc <SystemClock_Config+0xcc>)
 8000c66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c6c:	60bb      	str	r3, [r7, #8]
 8000c6e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c70:	2300      	movs	r3, #0
 8000c72:	607b      	str	r3, [r7, #4]
 8000c74:	4b22      	ldr	r3, [pc, #136]	; (8000d00 <SystemClock_Config+0xd0>)
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	4a21      	ldr	r2, [pc, #132]	; (8000d00 <SystemClock_Config+0xd0>)
 8000c7a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c7e:	6013      	str	r3, [r2, #0]
 8000c80:	4b1f      	ldr	r3, [pc, #124]	; (8000d00 <SystemClock_Config+0xd0>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c88:	607b      	str	r3, [r7, #4]
 8000c8a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c8c:	2302      	movs	r3, #2
 8000c8e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c90:	2301      	movs	r3, #1
 8000c92:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c94:	2310      	movs	r3, #16
 8000c96:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c98:	2302      	movs	r3, #2
 8000c9a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000ca0:	2308      	movs	r3, #8
 8000ca2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 160;
 8000ca4:	23a0      	movs	r3, #160	; 0xa0
 8000ca6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ca8:	2302      	movs	r3, #2
 8000caa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000cac:	2304      	movs	r3, #4
 8000cae:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cb0:	f107 0320 	add.w	r3, r7, #32
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	f000 ff97 	bl	8001be8 <HAL_RCC_OscConfig>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d001      	beq.n	8000cc4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000cc0:	f000 f97e 	bl	8000fc0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cc4:	230f      	movs	r3, #15
 8000cc6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cc8:	2302      	movs	r3, #2
 8000cca:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000cd0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000cd4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000cd6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cda:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000cdc:	f107 030c 	add.w	r3, r7, #12
 8000ce0:	2105      	movs	r1, #5
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	f001 f9f8 	bl	80020d8 <HAL_RCC_ClockConfig>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d001      	beq.n	8000cf2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000cee:	f000 f967 	bl	8000fc0 <Error_Handler>
  }
}
 8000cf2:	bf00      	nop
 8000cf4:	3750      	adds	r7, #80	; 0x50
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	bf00      	nop
 8000cfc:	40023800 	.word	0x40023800
 8000d00:	40007000 	.word	0x40007000

08000d04 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000d08:	4b16      	ldr	r3, [pc, #88]	; (8000d64 <MX_CAN1_Init+0x60>)
 8000d0a:	4a17      	ldr	r2, [pc, #92]	; (8000d68 <MX_CAN1_Init+0x64>)
 8000d0c:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 8000d0e:	4b15      	ldr	r3, [pc, #84]	; (8000d64 <MX_CAN1_Init+0x60>)
 8000d10:	2210      	movs	r2, #16
 8000d12:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000d14:	4b13      	ldr	r3, [pc, #76]	; (8000d64 <MX_CAN1_Init+0x60>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000d1a:	4b12      	ldr	r3, [pc, #72]	; (8000d64 <MX_CAN1_Init+0x60>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 8000d20:	4b10      	ldr	r3, [pc, #64]	; (8000d64 <MX_CAN1_Init+0x60>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000d26:	4b0f      	ldr	r3, [pc, #60]	; (8000d64 <MX_CAN1_Init+0x60>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000d2c:	4b0d      	ldr	r3, [pc, #52]	; (8000d64 <MX_CAN1_Init+0x60>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000d32:	4b0c      	ldr	r3, [pc, #48]	; (8000d64 <MX_CAN1_Init+0x60>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000d38:	4b0a      	ldr	r3, [pc, #40]	; (8000d64 <MX_CAN1_Init+0x60>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000d3e:	4b09      	ldr	r3, [pc, #36]	; (8000d64 <MX_CAN1_Init+0x60>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000d44:	4b07      	ldr	r3, [pc, #28]	; (8000d64 <MX_CAN1_Init+0x60>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000d4a:	4b06      	ldr	r3, [pc, #24]	; (8000d64 <MX_CAN1_Init+0x60>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000d50:	4804      	ldr	r0, [pc, #16]	; (8000d64 <MX_CAN1_Init+0x60>)
 8000d52:	f000 fbb1 	bl	80014b8 <HAL_CAN_Init>
 8000d56:	4603      	mov	r3, r0
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d001      	beq.n	8000d60 <MX_CAN1_Init+0x5c>
  {
    Error_Handler();
 8000d5c:	f000 f930 	bl	8000fc0 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000d60:	bf00      	nop
 8000d62:	bd80      	pop	{r7, pc}
 8000d64:	2000017c 	.word	0x2000017c
 8000d68:	40006400 	.word	0x40006400

08000d6c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000d70:	4b17      	ldr	r3, [pc, #92]	; (8000dd0 <MX_SPI2_Init+0x64>)
 8000d72:	4a18      	ldr	r2, [pc, #96]	; (8000dd4 <MX_SPI2_Init+0x68>)
 8000d74:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000d76:	4b16      	ldr	r3, [pc, #88]	; (8000dd0 <MX_SPI2_Init+0x64>)
 8000d78:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000d7c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000d7e:	4b14      	ldr	r3, [pc, #80]	; (8000dd0 <MX_SPI2_Init+0x64>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000d84:	4b12      	ldr	r3, [pc, #72]	; (8000dd0 <MX_SPI2_Init+0x64>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000d8a:	4b11      	ldr	r3, [pc, #68]	; (8000dd0 <MX_SPI2_Init+0x64>)
 8000d8c:	2202      	movs	r2, #2
 8000d8e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000d90:	4b0f      	ldr	r3, [pc, #60]	; (8000dd0 <MX_SPI2_Init+0x64>)
 8000d92:	2201      	movs	r2, #1
 8000d94:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000d96:	4b0e      	ldr	r3, [pc, #56]	; (8000dd0 <MX_SPI2_Init+0x64>)
 8000d98:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000d9c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8000d9e:	4b0c      	ldr	r3, [pc, #48]	; (8000dd0 <MX_SPI2_Init+0x64>)
 8000da0:	2228      	movs	r2, #40	; 0x28
 8000da2:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000da4:	4b0a      	ldr	r3, [pc, #40]	; (8000dd0 <MX_SPI2_Init+0x64>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000daa:	4b09      	ldr	r3, [pc, #36]	; (8000dd0 <MX_SPI2_Init+0x64>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000db0:	4b07      	ldr	r3, [pc, #28]	; (8000dd0 <MX_SPI2_Init+0x64>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000db6:	4b06      	ldr	r3, [pc, #24]	; (8000dd0 <MX_SPI2_Init+0x64>)
 8000db8:	220a      	movs	r2, #10
 8000dba:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000dbc:	4804      	ldr	r0, [pc, #16]	; (8000dd0 <MX_SPI2_Init+0x64>)
 8000dbe:	f001 fb5b 	bl	8002478 <HAL_SPI_Init>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d001      	beq.n	8000dcc <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000dc8:	f000 f8fa 	bl	8000fc0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000dcc:	bf00      	nop
 8000dce:	bd80      	pop	{r7, pc}
 8000dd0:	20000098 	.word	0x20000098
 8000dd4:	40003800 	.word	0x40003800

08000dd8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b086      	sub	sp, #24
 8000ddc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000dde:	f107 0308 	add.w	r3, r7, #8
 8000de2:	2200      	movs	r2, #0
 8000de4:	601a      	str	r2, [r3, #0]
 8000de6:	605a      	str	r2, [r3, #4]
 8000de8:	609a      	str	r2, [r3, #8]
 8000dea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dec:	463b      	mov	r3, r7
 8000dee:	2200      	movs	r2, #0
 8000df0:	601a      	str	r2, [r3, #0]
 8000df2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000df4:	4b1d      	ldr	r3, [pc, #116]	; (8000e6c <MX_TIM2_Init+0x94>)
 8000df6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000dfa:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 79;
 8000dfc:	4b1b      	ldr	r3, [pc, #108]	; (8000e6c <MX_TIM2_Init+0x94>)
 8000dfe:	224f      	movs	r2, #79	; 0x4f
 8000e00:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e02:	4b1a      	ldr	r3, [pc, #104]	; (8000e6c <MX_TIM2_Init+0x94>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000e08:	4b18      	ldr	r3, [pc, #96]	; (8000e6c <MX_TIM2_Init+0x94>)
 8000e0a:	f04f 32ff 	mov.w	r2, #4294967295
 8000e0e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e10:	4b16      	ldr	r3, [pc, #88]	; (8000e6c <MX_TIM2_Init+0x94>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e16:	4b15      	ldr	r3, [pc, #84]	; (8000e6c <MX_TIM2_Init+0x94>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000e1c:	4813      	ldr	r0, [pc, #76]	; (8000e6c <MX_TIM2_Init+0x94>)
 8000e1e:	f002 f8d3 	bl	8002fc8 <HAL_TIM_Base_Init>
 8000e22:	4603      	mov	r3, r0
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d001      	beq.n	8000e2c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000e28:	f000 f8ca 	bl	8000fc0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e2c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e30:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000e32:	f107 0308 	add.w	r3, r7, #8
 8000e36:	4619      	mov	r1, r3
 8000e38:	480c      	ldr	r0, [pc, #48]	; (8000e6c <MX_TIM2_Init+0x94>)
 8000e3a:	f002 f97d 	bl	8003138 <HAL_TIM_ConfigClockSource>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d001      	beq.n	8000e48 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000e44:	f000 f8bc 	bl	8000fc0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000e50:	463b      	mov	r3, r7
 8000e52:	4619      	mov	r1, r3
 8000e54:	4805      	ldr	r0, [pc, #20]	; (8000e6c <MX_TIM2_Init+0x94>)
 8000e56:	f002 fb6d 	bl	8003534 <HAL_TIMEx_MasterConfigSynchronization>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d001      	beq.n	8000e64 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000e60:	f000 f8ae 	bl	8000fc0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000e64:	bf00      	nop
 8000e66:	3718      	adds	r7, #24
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bd80      	pop	{r7, pc}
 8000e6c:	20000134 	.word	0x20000134

08000e70 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000e74:	4b11      	ldr	r3, [pc, #68]	; (8000ebc <MX_USART1_UART_Init+0x4c>)
 8000e76:	4a12      	ldr	r2, [pc, #72]	; (8000ec0 <MX_USART1_UART_Init+0x50>)
 8000e78:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000e7a:	4b10      	ldr	r3, [pc, #64]	; (8000ebc <MX_USART1_UART_Init+0x4c>)
 8000e7c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e80:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000e82:	4b0e      	ldr	r3, [pc, #56]	; (8000ebc <MX_USART1_UART_Init+0x4c>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000e88:	4b0c      	ldr	r3, [pc, #48]	; (8000ebc <MX_USART1_UART_Init+0x4c>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000e8e:	4b0b      	ldr	r3, [pc, #44]	; (8000ebc <MX_USART1_UART_Init+0x4c>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000e94:	4b09      	ldr	r3, [pc, #36]	; (8000ebc <MX_USART1_UART_Init+0x4c>)
 8000e96:	220c      	movs	r2, #12
 8000e98:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e9a:	4b08      	ldr	r3, [pc, #32]	; (8000ebc <MX_USART1_UART_Init+0x4c>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ea0:	4b06      	ldr	r3, [pc, #24]	; (8000ebc <MX_USART1_UART_Init+0x4c>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000ea6:	4805      	ldr	r0, [pc, #20]	; (8000ebc <MX_USART1_UART_Init+0x4c>)
 8000ea8:	f002 fbc0 	bl	800362c <HAL_UART_Init>
 8000eac:	4603      	mov	r3, r0
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d001      	beq.n	8000eb6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000eb2:	f000 f885 	bl	8000fc0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000eb6:	bf00      	nop
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	200000f0 	.word	0x200000f0
 8000ec0:	40011000 	.word	0x40011000

08000ec4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b088      	sub	sp, #32
 8000ec8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eca:	f107 030c 	add.w	r3, r7, #12
 8000ece:	2200      	movs	r2, #0
 8000ed0:	601a      	str	r2, [r3, #0]
 8000ed2:	605a      	str	r2, [r3, #4]
 8000ed4:	609a      	str	r2, [r3, #8]
 8000ed6:	60da      	str	r2, [r3, #12]
 8000ed8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000eda:	2300      	movs	r3, #0
 8000edc:	60bb      	str	r3, [r7, #8]
 8000ede:	4b34      	ldr	r3, [pc, #208]	; (8000fb0 <MX_GPIO_Init+0xec>)
 8000ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ee2:	4a33      	ldr	r2, [pc, #204]	; (8000fb0 <MX_GPIO_Init+0xec>)
 8000ee4:	f043 0304 	orr.w	r3, r3, #4
 8000ee8:	6313      	str	r3, [r2, #48]	; 0x30
 8000eea:	4b31      	ldr	r3, [pc, #196]	; (8000fb0 <MX_GPIO_Init+0xec>)
 8000eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eee:	f003 0304 	and.w	r3, r3, #4
 8000ef2:	60bb      	str	r3, [r7, #8]
 8000ef4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	607b      	str	r3, [r7, #4]
 8000efa:	4b2d      	ldr	r3, [pc, #180]	; (8000fb0 <MX_GPIO_Init+0xec>)
 8000efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000efe:	4a2c      	ldr	r2, [pc, #176]	; (8000fb0 <MX_GPIO_Init+0xec>)
 8000f00:	f043 0301 	orr.w	r3, r3, #1
 8000f04:	6313      	str	r3, [r2, #48]	; 0x30
 8000f06:	4b2a      	ldr	r3, [pc, #168]	; (8000fb0 <MX_GPIO_Init+0xec>)
 8000f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f0a:	f003 0301 	and.w	r3, r3, #1
 8000f0e:	607b      	str	r3, [r7, #4]
 8000f10:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f12:	2300      	movs	r3, #0
 8000f14:	603b      	str	r3, [r7, #0]
 8000f16:	4b26      	ldr	r3, [pc, #152]	; (8000fb0 <MX_GPIO_Init+0xec>)
 8000f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f1a:	4a25      	ldr	r2, [pc, #148]	; (8000fb0 <MX_GPIO_Init+0xec>)
 8000f1c:	f043 0302 	orr.w	r3, r3, #2
 8000f20:	6313      	str	r3, [r2, #48]	; 0x30
 8000f22:	4b23      	ldr	r3, [pc, #140]	; (8000fb0 <MX_GPIO_Init+0xec>)
 8000f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f26:	f003 0302 	and.w	r3, r3, #2
 8000f2a:	603b      	str	r3, [r7, #0]
 8000f2c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RED_Pin|Contactor_Pin, GPIO_PIN_RESET);
 8000f2e:	2200      	movs	r2, #0
 8000f30:	f240 1101 	movw	r1, #257	; 0x101
 8000f34:	481f      	ldr	r0, [pc, #124]	; (8000fb4 <MX_GPIO_Init+0xf0>)
 8000f36:	f000 fe3d 	bl	8001bb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_CTRL_Pin|BLUE_Pin|GREEN_Pin, GPIO_PIN_RESET);
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	21a1      	movs	r1, #161	; 0xa1
 8000f3e:	481e      	ldr	r0, [pc, #120]	; (8000fb8 <MX_GPIO_Init+0xf4>)
 8000f40:	f000 fe38 	bl	8001bb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Reset_Pin|Charge_Pin|Stop_Pin|Start_Pin, GPIO_PIN_RESET);
 8000f44:	2200      	movs	r2, #0
 8000f46:	f44f 7170 	mov.w	r1, #960	; 0x3c0
 8000f4a:	481c      	ldr	r0, [pc, #112]	; (8000fbc <MX_GPIO_Init+0xf8>)
 8000f4c:	f000 fe32 	bl	8001bb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : RED_Pin Contactor_Pin */
  GPIO_InitStruct.Pin = RED_Pin|Contactor_Pin;
 8000f50:	f240 1301 	movw	r3, #257	; 0x101
 8000f54:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f56:	2301      	movs	r3, #1
 8000f58:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f62:	f107 030c 	add.w	r3, r7, #12
 8000f66:	4619      	mov	r1, r3
 8000f68:	4812      	ldr	r0, [pc, #72]	; (8000fb4 <MX_GPIO_Init+0xf0>)
 8000f6a:	f000 fc87 	bl	800187c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_CTRL_Pin BLUE_Pin GREEN_Pin */
  GPIO_InitStruct.Pin = LED_CTRL_Pin|BLUE_Pin|GREEN_Pin;
 8000f6e:	23a1      	movs	r3, #161	; 0xa1
 8000f70:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f72:	2301      	movs	r3, #1
 8000f74:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f76:	2300      	movs	r3, #0
 8000f78:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f7e:	f107 030c 	add.w	r3, r7, #12
 8000f82:	4619      	mov	r1, r3
 8000f84:	480c      	ldr	r0, [pc, #48]	; (8000fb8 <MX_GPIO_Init+0xf4>)
 8000f86:	f000 fc79 	bl	800187c <HAL_GPIO_Init>

  /*Configure GPIO pins : Reset_Pin Charge_Pin Stop_Pin Start_Pin */
  GPIO_InitStruct.Pin = Reset_Pin|Charge_Pin|Stop_Pin|Start_Pin;
 8000f8a:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8000f8e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f90:	2301      	movs	r3, #1
 8000f92:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f94:	2300      	movs	r3, #0
 8000f96:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f9c:	f107 030c 	add.w	r3, r7, #12
 8000fa0:	4619      	mov	r1, r3
 8000fa2:	4806      	ldr	r0, [pc, #24]	; (8000fbc <MX_GPIO_Init+0xf8>)
 8000fa4:	f000 fc6a 	bl	800187c <HAL_GPIO_Init>

}
 8000fa8:	bf00      	nop
 8000faa:	3720      	adds	r7, #32
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bd80      	pop	{r7, pc}
 8000fb0:	40023800 	.word	0x40023800
 8000fb4:	40020000 	.word	0x40020000
 8000fb8:	40020400 	.word	0x40020400
 8000fbc:	40020800 	.word	0x40020800

08000fc0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fc4:	b672      	cpsid	i
}
 8000fc6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fc8:	e7fe      	b.n	8000fc8 <Error_Handler+0x8>
	...

08000fcc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	b083      	sub	sp, #12
 8000fd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	607b      	str	r3, [r7, #4]
 8000fd6:	4b10      	ldr	r3, [pc, #64]	; (8001018 <HAL_MspInit+0x4c>)
 8000fd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fda:	4a0f      	ldr	r2, [pc, #60]	; (8001018 <HAL_MspInit+0x4c>)
 8000fdc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fe0:	6453      	str	r3, [r2, #68]	; 0x44
 8000fe2:	4b0d      	ldr	r3, [pc, #52]	; (8001018 <HAL_MspInit+0x4c>)
 8000fe4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fe6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fea:	607b      	str	r3, [r7, #4]
 8000fec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fee:	2300      	movs	r3, #0
 8000ff0:	603b      	str	r3, [r7, #0]
 8000ff2:	4b09      	ldr	r3, [pc, #36]	; (8001018 <HAL_MspInit+0x4c>)
 8000ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ff6:	4a08      	ldr	r2, [pc, #32]	; (8001018 <HAL_MspInit+0x4c>)
 8000ff8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ffc:	6413      	str	r3, [r2, #64]	; 0x40
 8000ffe:	4b06      	ldr	r3, [pc, #24]	; (8001018 <HAL_MspInit+0x4c>)
 8001000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001002:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001006:	603b      	str	r3, [r7, #0]
 8001008:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800100a:	bf00      	nop
 800100c:	370c      	adds	r7, #12
 800100e:	46bd      	mov	sp, r7
 8001010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop
 8001018:	40023800 	.word	0x40023800

0800101c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b08a      	sub	sp, #40	; 0x28
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001024:	f107 0314 	add.w	r3, r7, #20
 8001028:	2200      	movs	r2, #0
 800102a:	601a      	str	r2, [r3, #0]
 800102c:	605a      	str	r2, [r3, #4]
 800102e:	609a      	str	r2, [r3, #8]
 8001030:	60da      	str	r2, [r3, #12]
 8001032:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	4a19      	ldr	r2, [pc, #100]	; (80010a0 <HAL_CAN_MspInit+0x84>)
 800103a:	4293      	cmp	r3, r2
 800103c:	d12c      	bne.n	8001098 <HAL_CAN_MspInit+0x7c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800103e:	2300      	movs	r3, #0
 8001040:	613b      	str	r3, [r7, #16]
 8001042:	4b18      	ldr	r3, [pc, #96]	; (80010a4 <HAL_CAN_MspInit+0x88>)
 8001044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001046:	4a17      	ldr	r2, [pc, #92]	; (80010a4 <HAL_CAN_MspInit+0x88>)
 8001048:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800104c:	6413      	str	r3, [r2, #64]	; 0x40
 800104e:	4b15      	ldr	r3, [pc, #84]	; (80010a4 <HAL_CAN_MspInit+0x88>)
 8001050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001052:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001056:	613b      	str	r3, [r7, #16]
 8001058:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800105a:	2300      	movs	r3, #0
 800105c:	60fb      	str	r3, [r7, #12]
 800105e:	4b11      	ldr	r3, [pc, #68]	; (80010a4 <HAL_CAN_MspInit+0x88>)
 8001060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001062:	4a10      	ldr	r2, [pc, #64]	; (80010a4 <HAL_CAN_MspInit+0x88>)
 8001064:	f043 0302 	orr.w	r3, r3, #2
 8001068:	6313      	str	r3, [r2, #48]	; 0x30
 800106a:	4b0e      	ldr	r3, [pc, #56]	; (80010a4 <HAL_CAN_MspInit+0x88>)
 800106c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800106e:	f003 0302 	and.w	r3, r3, #2
 8001072:	60fb      	str	r3, [r7, #12]
 8001074:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001076:	f44f 7340 	mov.w	r3, #768	; 0x300
 800107a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800107c:	2302      	movs	r3, #2
 800107e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001080:	2300      	movs	r3, #0
 8001082:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001084:	2303      	movs	r3, #3
 8001086:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001088:	2309      	movs	r3, #9
 800108a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800108c:	f107 0314 	add.w	r3, r7, #20
 8001090:	4619      	mov	r1, r3
 8001092:	4805      	ldr	r0, [pc, #20]	; (80010a8 <HAL_CAN_MspInit+0x8c>)
 8001094:	f000 fbf2 	bl	800187c <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8001098:	bf00      	nop
 800109a:	3728      	adds	r7, #40	; 0x28
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}
 80010a0:	40006400 	.word	0x40006400
 80010a4:	40023800 	.word	0x40023800
 80010a8:	40020400 	.word	0x40020400

080010ac <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b08a      	sub	sp, #40	; 0x28
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010b4:	f107 0314 	add.w	r3, r7, #20
 80010b8:	2200      	movs	r2, #0
 80010ba:	601a      	str	r2, [r3, #0]
 80010bc:	605a      	str	r2, [r3, #4]
 80010be:	609a      	str	r2, [r3, #8]
 80010c0:	60da      	str	r2, [r3, #12]
 80010c2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	4a19      	ldr	r2, [pc, #100]	; (8001130 <HAL_SPI_MspInit+0x84>)
 80010ca:	4293      	cmp	r3, r2
 80010cc:	d12c      	bne.n	8001128 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80010ce:	2300      	movs	r3, #0
 80010d0:	613b      	str	r3, [r7, #16]
 80010d2:	4b18      	ldr	r3, [pc, #96]	; (8001134 <HAL_SPI_MspInit+0x88>)
 80010d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010d6:	4a17      	ldr	r2, [pc, #92]	; (8001134 <HAL_SPI_MspInit+0x88>)
 80010d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010dc:	6413      	str	r3, [r2, #64]	; 0x40
 80010de:	4b15      	ldr	r3, [pc, #84]	; (8001134 <HAL_SPI_MspInit+0x88>)
 80010e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010e6:	613b      	str	r3, [r7, #16]
 80010e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010ea:	2300      	movs	r3, #0
 80010ec:	60fb      	str	r3, [r7, #12]
 80010ee:	4b11      	ldr	r3, [pc, #68]	; (8001134 <HAL_SPI_MspInit+0x88>)
 80010f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f2:	4a10      	ldr	r2, [pc, #64]	; (8001134 <HAL_SPI_MspInit+0x88>)
 80010f4:	f043 0302 	orr.w	r3, r3, #2
 80010f8:	6313      	str	r3, [r2, #48]	; 0x30
 80010fa:	4b0e      	ldr	r3, [pc, #56]	; (8001134 <HAL_SPI_MspInit+0x88>)
 80010fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010fe:	f003 0302 	and.w	r3, r3, #2
 8001102:	60fb      	str	r3, [r7, #12]
 8001104:	68fb      	ldr	r3, [r7, #12]
    PB12     ------> SPI2_NSS
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001106:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800110a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800110c:	2302      	movs	r3, #2
 800110e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001110:	2300      	movs	r3, #0
 8001112:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001114:	2303      	movs	r3, #3
 8001116:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001118:	2305      	movs	r3, #5
 800111a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800111c:	f107 0314 	add.w	r3, r7, #20
 8001120:	4619      	mov	r1, r3
 8001122:	4805      	ldr	r0, [pc, #20]	; (8001138 <HAL_SPI_MspInit+0x8c>)
 8001124:	f000 fbaa 	bl	800187c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001128:	bf00      	nop
 800112a:	3728      	adds	r7, #40	; 0x28
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}
 8001130:	40003800 	.word	0x40003800
 8001134:	40023800 	.word	0x40023800
 8001138:	40020400 	.word	0x40020400

0800113c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800113c:	b480      	push	{r7}
 800113e:	b085      	sub	sp, #20
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800114c:	d10d      	bne.n	800116a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800114e:	2300      	movs	r3, #0
 8001150:	60fb      	str	r3, [r7, #12]
 8001152:	4b09      	ldr	r3, [pc, #36]	; (8001178 <HAL_TIM_Base_MspInit+0x3c>)
 8001154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001156:	4a08      	ldr	r2, [pc, #32]	; (8001178 <HAL_TIM_Base_MspInit+0x3c>)
 8001158:	f043 0301 	orr.w	r3, r3, #1
 800115c:	6413      	str	r3, [r2, #64]	; 0x40
 800115e:	4b06      	ldr	r3, [pc, #24]	; (8001178 <HAL_TIM_Base_MspInit+0x3c>)
 8001160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001162:	f003 0301 	and.w	r3, r3, #1
 8001166:	60fb      	str	r3, [r7, #12]
 8001168:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800116a:	bf00      	nop
 800116c:	3714      	adds	r7, #20
 800116e:	46bd      	mov	sp, r7
 8001170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001174:	4770      	bx	lr
 8001176:	bf00      	nop
 8001178:	40023800 	.word	0x40023800

0800117c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b08a      	sub	sp, #40	; 0x28
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001184:	f107 0314 	add.w	r3, r7, #20
 8001188:	2200      	movs	r2, #0
 800118a:	601a      	str	r2, [r3, #0]
 800118c:	605a      	str	r2, [r3, #4]
 800118e:	609a      	str	r2, [r3, #8]
 8001190:	60da      	str	r2, [r3, #12]
 8001192:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	4a19      	ldr	r2, [pc, #100]	; (8001200 <HAL_UART_MspInit+0x84>)
 800119a:	4293      	cmp	r3, r2
 800119c:	d12c      	bne.n	80011f8 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800119e:	2300      	movs	r3, #0
 80011a0:	613b      	str	r3, [r7, #16]
 80011a2:	4b18      	ldr	r3, [pc, #96]	; (8001204 <HAL_UART_MspInit+0x88>)
 80011a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011a6:	4a17      	ldr	r2, [pc, #92]	; (8001204 <HAL_UART_MspInit+0x88>)
 80011a8:	f043 0310 	orr.w	r3, r3, #16
 80011ac:	6453      	str	r3, [r2, #68]	; 0x44
 80011ae:	4b15      	ldr	r3, [pc, #84]	; (8001204 <HAL_UART_MspInit+0x88>)
 80011b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011b2:	f003 0310 	and.w	r3, r3, #16
 80011b6:	613b      	str	r3, [r7, #16]
 80011b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ba:	2300      	movs	r3, #0
 80011bc:	60fb      	str	r3, [r7, #12]
 80011be:	4b11      	ldr	r3, [pc, #68]	; (8001204 <HAL_UART_MspInit+0x88>)
 80011c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c2:	4a10      	ldr	r2, [pc, #64]	; (8001204 <HAL_UART_MspInit+0x88>)
 80011c4:	f043 0301 	orr.w	r3, r3, #1
 80011c8:	6313      	str	r3, [r2, #48]	; 0x30
 80011ca:	4b0e      	ldr	r3, [pc, #56]	; (8001204 <HAL_UART_MspInit+0x88>)
 80011cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ce:	f003 0301 	and.w	r3, r3, #1
 80011d2:	60fb      	str	r3, [r7, #12]
 80011d4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80011d6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80011da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011dc:	2302      	movs	r3, #2
 80011de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e0:	2300      	movs	r3, #0
 80011e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011e4:	2303      	movs	r3, #3
 80011e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80011e8:	2307      	movs	r3, #7
 80011ea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011ec:	f107 0314 	add.w	r3, r7, #20
 80011f0:	4619      	mov	r1, r3
 80011f2:	4805      	ldr	r0, [pc, #20]	; (8001208 <HAL_UART_MspInit+0x8c>)
 80011f4:	f000 fb42 	bl	800187c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80011f8:	bf00      	nop
 80011fa:	3728      	adds	r7, #40	; 0x28
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	40011000 	.word	0x40011000
 8001204:	40023800 	.word	0x40023800
 8001208:	40020000 	.word	0x40020000

0800120c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800120c:	b480      	push	{r7}
 800120e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001210:	e7fe      	b.n	8001210 <NMI_Handler+0x4>

08001212 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001212:	b480      	push	{r7}
 8001214:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001216:	e7fe      	b.n	8001216 <HardFault_Handler+0x4>

08001218 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001218:	b480      	push	{r7}
 800121a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800121c:	e7fe      	b.n	800121c <MemManage_Handler+0x4>

0800121e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800121e:	b480      	push	{r7}
 8001220:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001222:	e7fe      	b.n	8001222 <BusFault_Handler+0x4>

08001224 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001224:	b480      	push	{r7}
 8001226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001228:	e7fe      	b.n	8001228 <UsageFault_Handler+0x4>

0800122a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800122a:	b480      	push	{r7}
 800122c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800122e:	bf00      	nop
 8001230:	46bd      	mov	sp, r7
 8001232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001236:	4770      	bx	lr

08001238 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001238:	b480      	push	{r7}
 800123a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800123c:	bf00      	nop
 800123e:	46bd      	mov	sp, r7
 8001240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001244:	4770      	bx	lr

08001246 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001246:	b480      	push	{r7}
 8001248:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800124a:	bf00      	nop
 800124c:	46bd      	mov	sp, r7
 800124e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001252:	4770      	bx	lr

08001254 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001258:	f000 f8ea 	bl	8001430 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800125c:	bf00      	nop
 800125e:	bd80      	pop	{r7, pc}

08001260 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b086      	sub	sp, #24
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001268:	4a14      	ldr	r2, [pc, #80]	; (80012bc <_sbrk+0x5c>)
 800126a:	4b15      	ldr	r3, [pc, #84]	; (80012c0 <_sbrk+0x60>)
 800126c:	1ad3      	subs	r3, r2, r3
 800126e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001270:	697b      	ldr	r3, [r7, #20]
 8001272:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001274:	4b13      	ldr	r3, [pc, #76]	; (80012c4 <_sbrk+0x64>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	2b00      	cmp	r3, #0
 800127a:	d102      	bne.n	8001282 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800127c:	4b11      	ldr	r3, [pc, #68]	; (80012c4 <_sbrk+0x64>)
 800127e:	4a12      	ldr	r2, [pc, #72]	; (80012c8 <_sbrk+0x68>)
 8001280:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001282:	4b10      	ldr	r3, [pc, #64]	; (80012c4 <_sbrk+0x64>)
 8001284:	681a      	ldr	r2, [r3, #0]
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	4413      	add	r3, r2
 800128a:	693a      	ldr	r2, [r7, #16]
 800128c:	429a      	cmp	r2, r3
 800128e:	d207      	bcs.n	80012a0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001290:	f002 fcbe 	bl	8003c10 <__errno>
 8001294:	4603      	mov	r3, r0
 8001296:	220c      	movs	r2, #12
 8001298:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800129a:	f04f 33ff 	mov.w	r3, #4294967295
 800129e:	e009      	b.n	80012b4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80012a0:	4b08      	ldr	r3, [pc, #32]	; (80012c4 <_sbrk+0x64>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80012a6:	4b07      	ldr	r3, [pc, #28]	; (80012c4 <_sbrk+0x64>)
 80012a8:	681a      	ldr	r2, [r3, #0]
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	4413      	add	r3, r2
 80012ae:	4a05      	ldr	r2, [pc, #20]	; (80012c4 <_sbrk+0x64>)
 80012b0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80012b2:	68fb      	ldr	r3, [r7, #12]
}
 80012b4:	4618      	mov	r0, r3
 80012b6:	3718      	adds	r7, #24
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd80      	pop	{r7, pc}
 80012bc:	20020000 	.word	0x20020000
 80012c0:	00000400 	.word	0x00000400
 80012c4:	2000008c 	.word	0x2000008c
 80012c8:	200001b8 	.word	0x200001b8

080012cc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80012cc:	b480      	push	{r7}
 80012ce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80012d0:	4b06      	ldr	r3, [pc, #24]	; (80012ec <SystemInit+0x20>)
 80012d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80012d6:	4a05      	ldr	r2, [pc, #20]	; (80012ec <SystemInit+0x20>)
 80012d8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80012dc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012e0:	bf00      	nop
 80012e2:	46bd      	mov	sp, r7
 80012e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e8:	4770      	bx	lr
 80012ea:	bf00      	nop
 80012ec:	e000ed00 	.word	0xe000ed00

080012f0 <start_timers>:
#include "peripherals.h"
#include "timer_utils.h"
#include "stdint.h"

void start_timers() {
 80012f0:	b580      	push	{r7, lr}
 80012f2:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start(&htim2);
 80012f4:	4802      	ldr	r0, [pc, #8]	; (8001300 <start_timers+0x10>)
 80012f6:	f001 feb7 	bl	8003068 <HAL_TIM_Base_Start>
}
 80012fa:	bf00      	nop
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop
 8001300:	20000134 	.word	0x20000134

08001304 <delay_us>:

void delay_us(uint16_t us) {
 8001304:	b480      	push	{r7}
 8001306:	b083      	sub	sp, #12
 8001308:	af00      	add	r7, sp, #0
 800130a:	4603      	mov	r3, r0
 800130c:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim2, 0);
 800130e:	4b09      	ldr	r3, [pc, #36]	; (8001334 <delay_us+0x30>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	2200      	movs	r2, #0
 8001314:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim2) < us) { asm("NOP"); }
 8001316:	e000      	b.n	800131a <delay_us+0x16>
 8001318:	bf00      	nop
 800131a:	4b06      	ldr	r3, [pc, #24]	; (8001334 <delay_us+0x30>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001320:	88fb      	ldrh	r3, [r7, #6]
 8001322:	429a      	cmp	r2, r3
 8001324:	d3f8      	bcc.n	8001318 <delay_us+0x14>
}
 8001326:	bf00      	nop
 8001328:	bf00      	nop
 800132a:	370c      	adds	r7, #12
 800132c:	46bd      	mov	sp, r7
 800132e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001332:	4770      	bx	lr
 8001334:	20000134 	.word	0x20000134

08001338 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001338:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001370 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800133c:	480d      	ldr	r0, [pc, #52]	; (8001374 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800133e:	490e      	ldr	r1, [pc, #56]	; (8001378 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001340:	4a0e      	ldr	r2, [pc, #56]	; (800137c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001342:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001344:	e002      	b.n	800134c <LoopCopyDataInit>

08001346 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001346:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001348:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800134a:	3304      	adds	r3, #4

0800134c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800134c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800134e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001350:	d3f9      	bcc.n	8001346 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001352:	4a0b      	ldr	r2, [pc, #44]	; (8001380 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001354:	4c0b      	ldr	r4, [pc, #44]	; (8001384 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001356:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001358:	e001      	b.n	800135e <LoopFillZerobss>

0800135a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800135a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800135c:	3204      	adds	r2, #4

0800135e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800135e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001360:	d3fb      	bcc.n	800135a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001362:	f7ff ffb3 	bl	80012cc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001366:	f002 fc59 	bl	8003c1c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800136a:	f7ff fc4b 	bl	8000c04 <main>
  bx  lr    
 800136e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001370:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001374:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001378:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 800137c:	08004790 	.word	0x08004790
  ldr r2, =_sbss
 8001380:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001384:	200001b8 	.word	0x200001b8

08001388 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001388:	e7fe      	b.n	8001388 <ADC_IRQHandler>
	...

0800138c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001390:	4b0e      	ldr	r3, [pc, #56]	; (80013cc <HAL_Init+0x40>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	4a0d      	ldr	r2, [pc, #52]	; (80013cc <HAL_Init+0x40>)
 8001396:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800139a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800139c:	4b0b      	ldr	r3, [pc, #44]	; (80013cc <HAL_Init+0x40>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	4a0a      	ldr	r2, [pc, #40]	; (80013cc <HAL_Init+0x40>)
 80013a2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80013a6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013a8:	4b08      	ldr	r3, [pc, #32]	; (80013cc <HAL_Init+0x40>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	4a07      	ldr	r2, [pc, #28]	; (80013cc <HAL_Init+0x40>)
 80013ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013b2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013b4:	2003      	movs	r0, #3
 80013b6:	f000 fa2d 	bl	8001814 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013ba:	2000      	movs	r0, #0
 80013bc:	f000 f808 	bl	80013d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013c0:	f7ff fe04 	bl	8000fcc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013c4:	2300      	movs	r3, #0
}
 80013c6:	4618      	mov	r0, r3
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	bf00      	nop
 80013cc:	40023c00 	.word	0x40023c00

080013d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b082      	sub	sp, #8
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80013d8:	4b12      	ldr	r3, [pc, #72]	; (8001424 <HAL_InitTick+0x54>)
 80013da:	681a      	ldr	r2, [r3, #0]
 80013dc:	4b12      	ldr	r3, [pc, #72]	; (8001428 <HAL_InitTick+0x58>)
 80013de:	781b      	ldrb	r3, [r3, #0]
 80013e0:	4619      	mov	r1, r3
 80013e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80013ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80013ee:	4618      	mov	r0, r3
 80013f0:	f000 fa37 	bl	8001862 <HAL_SYSTICK_Config>
 80013f4:	4603      	mov	r3, r0
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d001      	beq.n	80013fe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80013fa:	2301      	movs	r3, #1
 80013fc:	e00e      	b.n	800141c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	2b0f      	cmp	r3, #15
 8001402:	d80a      	bhi.n	800141a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001404:	2200      	movs	r2, #0
 8001406:	6879      	ldr	r1, [r7, #4]
 8001408:	f04f 30ff 	mov.w	r0, #4294967295
 800140c:	f000 fa0d 	bl	800182a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001410:	4a06      	ldr	r2, [pc, #24]	; (800142c <HAL_InitTick+0x5c>)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001416:	2300      	movs	r3, #0
 8001418:	e000      	b.n	800141c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800141a:	2301      	movs	r3, #1
}
 800141c:	4618      	mov	r0, r3
 800141e:	3708      	adds	r7, #8
 8001420:	46bd      	mov	sp, r7
 8001422:	bd80      	pop	{r7, pc}
 8001424:	20000000 	.word	0x20000000
 8001428:	20000008 	.word	0x20000008
 800142c:	20000004 	.word	0x20000004

08001430 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001430:	b480      	push	{r7}
 8001432:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001434:	4b06      	ldr	r3, [pc, #24]	; (8001450 <HAL_IncTick+0x20>)
 8001436:	781b      	ldrb	r3, [r3, #0]
 8001438:	461a      	mov	r2, r3
 800143a:	4b06      	ldr	r3, [pc, #24]	; (8001454 <HAL_IncTick+0x24>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	4413      	add	r3, r2
 8001440:	4a04      	ldr	r2, [pc, #16]	; (8001454 <HAL_IncTick+0x24>)
 8001442:	6013      	str	r3, [r2, #0]
}
 8001444:	bf00      	nop
 8001446:	46bd      	mov	sp, r7
 8001448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144c:	4770      	bx	lr
 800144e:	bf00      	nop
 8001450:	20000008 	.word	0x20000008
 8001454:	200001a4 	.word	0x200001a4

08001458 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001458:	b480      	push	{r7}
 800145a:	af00      	add	r7, sp, #0
  return uwTick;
 800145c:	4b03      	ldr	r3, [pc, #12]	; (800146c <HAL_GetTick+0x14>)
 800145e:	681b      	ldr	r3, [r3, #0]
}
 8001460:	4618      	mov	r0, r3
 8001462:	46bd      	mov	sp, r7
 8001464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001468:	4770      	bx	lr
 800146a:	bf00      	nop
 800146c:	200001a4 	.word	0x200001a4

08001470 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b084      	sub	sp, #16
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001478:	f7ff ffee 	bl	8001458 <HAL_GetTick>
 800147c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001488:	d005      	beq.n	8001496 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800148a:	4b0a      	ldr	r3, [pc, #40]	; (80014b4 <HAL_Delay+0x44>)
 800148c:	781b      	ldrb	r3, [r3, #0]
 800148e:	461a      	mov	r2, r3
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	4413      	add	r3, r2
 8001494:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001496:	bf00      	nop
 8001498:	f7ff ffde 	bl	8001458 <HAL_GetTick>
 800149c:	4602      	mov	r2, r0
 800149e:	68bb      	ldr	r3, [r7, #8]
 80014a0:	1ad3      	subs	r3, r2, r3
 80014a2:	68fa      	ldr	r2, [r7, #12]
 80014a4:	429a      	cmp	r2, r3
 80014a6:	d8f7      	bhi.n	8001498 <HAL_Delay+0x28>
  {
  }
}
 80014a8:	bf00      	nop
 80014aa:	bf00      	nop
 80014ac:	3710      	adds	r7, #16
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop
 80014b4:	20000008 	.word	0x20000008

080014b8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b084      	sub	sp, #16
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d101      	bne.n	80014ca <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80014c6:	2301      	movs	r3, #1
 80014c8:	e0ed      	b.n	80016a6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80014d0:	b2db      	uxtb	r3, r3
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d102      	bne.n	80014dc <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80014d6:	6878      	ldr	r0, [r7, #4]
 80014d8:	f7ff fda0 	bl	800101c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	681a      	ldr	r2, [r3, #0]
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f022 0202 	bic.w	r2, r2, #2
 80014ea:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80014ec:	f7ff ffb4 	bl	8001458 <HAL_GetTick>
 80014f0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80014f2:	e012      	b.n	800151a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80014f4:	f7ff ffb0 	bl	8001458 <HAL_GetTick>
 80014f8:	4602      	mov	r2, r0
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	1ad3      	subs	r3, r2, r3
 80014fe:	2b0a      	cmp	r3, #10
 8001500:	d90b      	bls.n	800151a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001506:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	2205      	movs	r2, #5
 8001512:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001516:	2301      	movs	r3, #1
 8001518:	e0c5      	b.n	80016a6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	685b      	ldr	r3, [r3, #4]
 8001520:	f003 0302 	and.w	r3, r3, #2
 8001524:	2b00      	cmp	r3, #0
 8001526:	d1e5      	bne.n	80014f4 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	681a      	ldr	r2, [r3, #0]
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f042 0201 	orr.w	r2, r2, #1
 8001536:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001538:	f7ff ff8e 	bl	8001458 <HAL_GetTick>
 800153c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800153e:	e012      	b.n	8001566 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001540:	f7ff ff8a 	bl	8001458 <HAL_GetTick>
 8001544:	4602      	mov	r2, r0
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	1ad3      	subs	r3, r2, r3
 800154a:	2b0a      	cmp	r3, #10
 800154c:	d90b      	bls.n	8001566 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001552:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	2205      	movs	r2, #5
 800155e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001562:	2301      	movs	r3, #1
 8001564:	e09f      	b.n	80016a6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	685b      	ldr	r3, [r3, #4]
 800156c:	f003 0301 	and.w	r3, r3, #1
 8001570:	2b00      	cmp	r3, #0
 8001572:	d0e5      	beq.n	8001540 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	7e1b      	ldrb	r3, [r3, #24]
 8001578:	2b01      	cmp	r3, #1
 800157a:	d108      	bne.n	800158e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	681a      	ldr	r2, [r3, #0]
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800158a:	601a      	str	r2, [r3, #0]
 800158c:	e007      	b.n	800159e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	681a      	ldr	r2, [r3, #0]
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800159c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	7e5b      	ldrb	r3, [r3, #25]
 80015a2:	2b01      	cmp	r3, #1
 80015a4:	d108      	bne.n	80015b8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	681a      	ldr	r2, [r3, #0]
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80015b4:	601a      	str	r2, [r3, #0]
 80015b6:	e007      	b.n	80015c8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	681a      	ldr	r2, [r3, #0]
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80015c6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	7e9b      	ldrb	r3, [r3, #26]
 80015cc:	2b01      	cmp	r3, #1
 80015ce:	d108      	bne.n	80015e2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	681a      	ldr	r2, [r3, #0]
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f042 0220 	orr.w	r2, r2, #32
 80015de:	601a      	str	r2, [r3, #0]
 80015e0:	e007      	b.n	80015f2 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	681a      	ldr	r2, [r3, #0]
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f022 0220 	bic.w	r2, r2, #32
 80015f0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	7edb      	ldrb	r3, [r3, #27]
 80015f6:	2b01      	cmp	r3, #1
 80015f8:	d108      	bne.n	800160c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	681a      	ldr	r2, [r3, #0]
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f022 0210 	bic.w	r2, r2, #16
 8001608:	601a      	str	r2, [r3, #0]
 800160a:	e007      	b.n	800161c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	681a      	ldr	r2, [r3, #0]
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f042 0210 	orr.w	r2, r2, #16
 800161a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	7f1b      	ldrb	r3, [r3, #28]
 8001620:	2b01      	cmp	r3, #1
 8001622:	d108      	bne.n	8001636 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	681a      	ldr	r2, [r3, #0]
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f042 0208 	orr.w	r2, r2, #8
 8001632:	601a      	str	r2, [r3, #0]
 8001634:	e007      	b.n	8001646 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	681a      	ldr	r2, [r3, #0]
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f022 0208 	bic.w	r2, r2, #8
 8001644:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	7f5b      	ldrb	r3, [r3, #29]
 800164a:	2b01      	cmp	r3, #1
 800164c:	d108      	bne.n	8001660 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	681a      	ldr	r2, [r3, #0]
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f042 0204 	orr.w	r2, r2, #4
 800165c:	601a      	str	r2, [r3, #0]
 800165e:	e007      	b.n	8001670 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	681a      	ldr	r2, [r3, #0]
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f022 0204 	bic.w	r2, r2, #4
 800166e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	689a      	ldr	r2, [r3, #8]
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	68db      	ldr	r3, [r3, #12]
 8001678:	431a      	orrs	r2, r3
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	691b      	ldr	r3, [r3, #16]
 800167e:	431a      	orrs	r2, r3
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	695b      	ldr	r3, [r3, #20]
 8001684:	ea42 0103 	orr.w	r1, r2, r3
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	685b      	ldr	r3, [r3, #4]
 800168c:	1e5a      	subs	r2, r3, #1
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	430a      	orrs	r2, r1
 8001694:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	2200      	movs	r2, #0
 800169a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	2201      	movs	r2, #1
 80016a0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80016a4:	2300      	movs	r3, #0
}
 80016a6:	4618      	mov	r0, r3
 80016a8:	3710      	adds	r7, #16
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}
	...

080016b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016b0:	b480      	push	{r7}
 80016b2:	b085      	sub	sp, #20
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	f003 0307 	and.w	r3, r3, #7
 80016be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016c0:	4b0c      	ldr	r3, [pc, #48]	; (80016f4 <__NVIC_SetPriorityGrouping+0x44>)
 80016c2:	68db      	ldr	r3, [r3, #12]
 80016c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016c6:	68ba      	ldr	r2, [r7, #8]
 80016c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80016cc:	4013      	ands	r3, r2
 80016ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016d4:	68bb      	ldr	r3, [r7, #8]
 80016d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80016dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016e2:	4a04      	ldr	r2, [pc, #16]	; (80016f4 <__NVIC_SetPriorityGrouping+0x44>)
 80016e4:	68bb      	ldr	r3, [r7, #8]
 80016e6:	60d3      	str	r3, [r2, #12]
}
 80016e8:	bf00      	nop
 80016ea:	3714      	adds	r7, #20
 80016ec:	46bd      	mov	sp, r7
 80016ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f2:	4770      	bx	lr
 80016f4:	e000ed00 	.word	0xe000ed00

080016f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016f8:	b480      	push	{r7}
 80016fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016fc:	4b04      	ldr	r3, [pc, #16]	; (8001710 <__NVIC_GetPriorityGrouping+0x18>)
 80016fe:	68db      	ldr	r3, [r3, #12]
 8001700:	0a1b      	lsrs	r3, r3, #8
 8001702:	f003 0307 	and.w	r3, r3, #7
}
 8001706:	4618      	mov	r0, r3
 8001708:	46bd      	mov	sp, r7
 800170a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170e:	4770      	bx	lr
 8001710:	e000ed00 	.word	0xe000ed00

08001714 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001714:	b480      	push	{r7}
 8001716:	b083      	sub	sp, #12
 8001718:	af00      	add	r7, sp, #0
 800171a:	4603      	mov	r3, r0
 800171c:	6039      	str	r1, [r7, #0]
 800171e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001720:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001724:	2b00      	cmp	r3, #0
 8001726:	db0a      	blt.n	800173e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	b2da      	uxtb	r2, r3
 800172c:	490c      	ldr	r1, [pc, #48]	; (8001760 <__NVIC_SetPriority+0x4c>)
 800172e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001732:	0112      	lsls	r2, r2, #4
 8001734:	b2d2      	uxtb	r2, r2
 8001736:	440b      	add	r3, r1
 8001738:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800173c:	e00a      	b.n	8001754 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	b2da      	uxtb	r2, r3
 8001742:	4908      	ldr	r1, [pc, #32]	; (8001764 <__NVIC_SetPriority+0x50>)
 8001744:	79fb      	ldrb	r3, [r7, #7]
 8001746:	f003 030f 	and.w	r3, r3, #15
 800174a:	3b04      	subs	r3, #4
 800174c:	0112      	lsls	r2, r2, #4
 800174e:	b2d2      	uxtb	r2, r2
 8001750:	440b      	add	r3, r1
 8001752:	761a      	strb	r2, [r3, #24]
}
 8001754:	bf00      	nop
 8001756:	370c      	adds	r7, #12
 8001758:	46bd      	mov	sp, r7
 800175a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175e:	4770      	bx	lr
 8001760:	e000e100 	.word	0xe000e100
 8001764:	e000ed00 	.word	0xe000ed00

08001768 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001768:	b480      	push	{r7}
 800176a:	b089      	sub	sp, #36	; 0x24
 800176c:	af00      	add	r7, sp, #0
 800176e:	60f8      	str	r0, [r7, #12]
 8001770:	60b9      	str	r1, [r7, #8]
 8001772:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	f003 0307 	and.w	r3, r3, #7
 800177a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800177c:	69fb      	ldr	r3, [r7, #28]
 800177e:	f1c3 0307 	rsb	r3, r3, #7
 8001782:	2b04      	cmp	r3, #4
 8001784:	bf28      	it	cs
 8001786:	2304      	movcs	r3, #4
 8001788:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800178a:	69fb      	ldr	r3, [r7, #28]
 800178c:	3304      	adds	r3, #4
 800178e:	2b06      	cmp	r3, #6
 8001790:	d902      	bls.n	8001798 <NVIC_EncodePriority+0x30>
 8001792:	69fb      	ldr	r3, [r7, #28]
 8001794:	3b03      	subs	r3, #3
 8001796:	e000      	b.n	800179a <NVIC_EncodePriority+0x32>
 8001798:	2300      	movs	r3, #0
 800179a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800179c:	f04f 32ff 	mov.w	r2, #4294967295
 80017a0:	69bb      	ldr	r3, [r7, #24]
 80017a2:	fa02 f303 	lsl.w	r3, r2, r3
 80017a6:	43da      	mvns	r2, r3
 80017a8:	68bb      	ldr	r3, [r7, #8]
 80017aa:	401a      	ands	r2, r3
 80017ac:	697b      	ldr	r3, [r7, #20]
 80017ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017b0:	f04f 31ff 	mov.w	r1, #4294967295
 80017b4:	697b      	ldr	r3, [r7, #20]
 80017b6:	fa01 f303 	lsl.w	r3, r1, r3
 80017ba:	43d9      	mvns	r1, r3
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017c0:	4313      	orrs	r3, r2
         );
}
 80017c2:	4618      	mov	r0, r3
 80017c4:	3724      	adds	r7, #36	; 0x24
 80017c6:	46bd      	mov	sp, r7
 80017c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017cc:	4770      	bx	lr
	...

080017d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b082      	sub	sp, #8
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	3b01      	subs	r3, #1
 80017dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80017e0:	d301      	bcc.n	80017e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017e2:	2301      	movs	r3, #1
 80017e4:	e00f      	b.n	8001806 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017e6:	4a0a      	ldr	r2, [pc, #40]	; (8001810 <SysTick_Config+0x40>)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	3b01      	subs	r3, #1
 80017ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017ee:	210f      	movs	r1, #15
 80017f0:	f04f 30ff 	mov.w	r0, #4294967295
 80017f4:	f7ff ff8e 	bl	8001714 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017f8:	4b05      	ldr	r3, [pc, #20]	; (8001810 <SysTick_Config+0x40>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017fe:	4b04      	ldr	r3, [pc, #16]	; (8001810 <SysTick_Config+0x40>)
 8001800:	2207      	movs	r2, #7
 8001802:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001804:	2300      	movs	r3, #0
}
 8001806:	4618      	mov	r0, r3
 8001808:	3708      	adds	r7, #8
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}
 800180e:	bf00      	nop
 8001810:	e000e010 	.word	0xe000e010

08001814 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b082      	sub	sp, #8
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800181c:	6878      	ldr	r0, [r7, #4]
 800181e:	f7ff ff47 	bl	80016b0 <__NVIC_SetPriorityGrouping>
}
 8001822:	bf00      	nop
 8001824:	3708      	adds	r7, #8
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}

0800182a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800182a:	b580      	push	{r7, lr}
 800182c:	b086      	sub	sp, #24
 800182e:	af00      	add	r7, sp, #0
 8001830:	4603      	mov	r3, r0
 8001832:	60b9      	str	r1, [r7, #8]
 8001834:	607a      	str	r2, [r7, #4]
 8001836:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001838:	2300      	movs	r3, #0
 800183a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800183c:	f7ff ff5c 	bl	80016f8 <__NVIC_GetPriorityGrouping>
 8001840:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001842:	687a      	ldr	r2, [r7, #4]
 8001844:	68b9      	ldr	r1, [r7, #8]
 8001846:	6978      	ldr	r0, [r7, #20]
 8001848:	f7ff ff8e 	bl	8001768 <NVIC_EncodePriority>
 800184c:	4602      	mov	r2, r0
 800184e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001852:	4611      	mov	r1, r2
 8001854:	4618      	mov	r0, r3
 8001856:	f7ff ff5d 	bl	8001714 <__NVIC_SetPriority>
}
 800185a:	bf00      	nop
 800185c:	3718      	adds	r7, #24
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}

08001862 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001862:	b580      	push	{r7, lr}
 8001864:	b082      	sub	sp, #8
 8001866:	af00      	add	r7, sp, #0
 8001868:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800186a:	6878      	ldr	r0, [r7, #4]
 800186c:	f7ff ffb0 	bl	80017d0 <SysTick_Config>
 8001870:	4603      	mov	r3, r0
}
 8001872:	4618      	mov	r0, r3
 8001874:	3708      	adds	r7, #8
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}
	...

0800187c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800187c:	b480      	push	{r7}
 800187e:	b089      	sub	sp, #36	; 0x24
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
 8001884:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001886:	2300      	movs	r3, #0
 8001888:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800188a:	2300      	movs	r3, #0
 800188c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800188e:	2300      	movs	r3, #0
 8001890:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001892:	2300      	movs	r3, #0
 8001894:	61fb      	str	r3, [r7, #28]
 8001896:	e16b      	b.n	8001b70 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001898:	2201      	movs	r2, #1
 800189a:	69fb      	ldr	r3, [r7, #28]
 800189c:	fa02 f303 	lsl.w	r3, r2, r3
 80018a0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	697a      	ldr	r2, [r7, #20]
 80018a8:	4013      	ands	r3, r2
 80018aa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80018ac:	693a      	ldr	r2, [r7, #16]
 80018ae:	697b      	ldr	r3, [r7, #20]
 80018b0:	429a      	cmp	r2, r3
 80018b2:	f040 815a 	bne.w	8001b6a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	685b      	ldr	r3, [r3, #4]
 80018ba:	f003 0303 	and.w	r3, r3, #3
 80018be:	2b01      	cmp	r3, #1
 80018c0:	d005      	beq.n	80018ce <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	685b      	ldr	r3, [r3, #4]
 80018c6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80018ca:	2b02      	cmp	r3, #2
 80018cc:	d130      	bne.n	8001930 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	689b      	ldr	r3, [r3, #8]
 80018d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80018d4:	69fb      	ldr	r3, [r7, #28]
 80018d6:	005b      	lsls	r3, r3, #1
 80018d8:	2203      	movs	r2, #3
 80018da:	fa02 f303 	lsl.w	r3, r2, r3
 80018de:	43db      	mvns	r3, r3
 80018e0:	69ba      	ldr	r2, [r7, #24]
 80018e2:	4013      	ands	r3, r2
 80018e4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	68da      	ldr	r2, [r3, #12]
 80018ea:	69fb      	ldr	r3, [r7, #28]
 80018ec:	005b      	lsls	r3, r3, #1
 80018ee:	fa02 f303 	lsl.w	r3, r2, r3
 80018f2:	69ba      	ldr	r2, [r7, #24]
 80018f4:	4313      	orrs	r3, r2
 80018f6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	69ba      	ldr	r2, [r7, #24]
 80018fc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	685b      	ldr	r3, [r3, #4]
 8001902:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001904:	2201      	movs	r2, #1
 8001906:	69fb      	ldr	r3, [r7, #28]
 8001908:	fa02 f303 	lsl.w	r3, r2, r3
 800190c:	43db      	mvns	r3, r3
 800190e:	69ba      	ldr	r2, [r7, #24]
 8001910:	4013      	ands	r3, r2
 8001912:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	091b      	lsrs	r3, r3, #4
 800191a:	f003 0201 	and.w	r2, r3, #1
 800191e:	69fb      	ldr	r3, [r7, #28]
 8001920:	fa02 f303 	lsl.w	r3, r2, r3
 8001924:	69ba      	ldr	r2, [r7, #24]
 8001926:	4313      	orrs	r3, r2
 8001928:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	69ba      	ldr	r2, [r7, #24]
 800192e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	f003 0303 	and.w	r3, r3, #3
 8001938:	2b03      	cmp	r3, #3
 800193a:	d017      	beq.n	800196c <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	68db      	ldr	r3, [r3, #12]
 8001940:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001942:	69fb      	ldr	r3, [r7, #28]
 8001944:	005b      	lsls	r3, r3, #1
 8001946:	2203      	movs	r2, #3
 8001948:	fa02 f303 	lsl.w	r3, r2, r3
 800194c:	43db      	mvns	r3, r3
 800194e:	69ba      	ldr	r2, [r7, #24]
 8001950:	4013      	ands	r3, r2
 8001952:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	689a      	ldr	r2, [r3, #8]
 8001958:	69fb      	ldr	r3, [r7, #28]
 800195a:	005b      	lsls	r3, r3, #1
 800195c:	fa02 f303 	lsl.w	r3, r2, r3
 8001960:	69ba      	ldr	r2, [r7, #24]
 8001962:	4313      	orrs	r3, r2
 8001964:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	69ba      	ldr	r2, [r7, #24]
 800196a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	685b      	ldr	r3, [r3, #4]
 8001970:	f003 0303 	and.w	r3, r3, #3
 8001974:	2b02      	cmp	r3, #2
 8001976:	d123      	bne.n	80019c0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001978:	69fb      	ldr	r3, [r7, #28]
 800197a:	08da      	lsrs	r2, r3, #3
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	3208      	adds	r2, #8
 8001980:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001984:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001986:	69fb      	ldr	r3, [r7, #28]
 8001988:	f003 0307 	and.w	r3, r3, #7
 800198c:	009b      	lsls	r3, r3, #2
 800198e:	220f      	movs	r2, #15
 8001990:	fa02 f303 	lsl.w	r3, r2, r3
 8001994:	43db      	mvns	r3, r3
 8001996:	69ba      	ldr	r2, [r7, #24]
 8001998:	4013      	ands	r3, r2
 800199a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	691a      	ldr	r2, [r3, #16]
 80019a0:	69fb      	ldr	r3, [r7, #28]
 80019a2:	f003 0307 	and.w	r3, r3, #7
 80019a6:	009b      	lsls	r3, r3, #2
 80019a8:	fa02 f303 	lsl.w	r3, r2, r3
 80019ac:	69ba      	ldr	r2, [r7, #24]
 80019ae:	4313      	orrs	r3, r2
 80019b0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80019b2:	69fb      	ldr	r3, [r7, #28]
 80019b4:	08da      	lsrs	r2, r3, #3
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	3208      	adds	r2, #8
 80019ba:	69b9      	ldr	r1, [r7, #24]
 80019bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80019c6:	69fb      	ldr	r3, [r7, #28]
 80019c8:	005b      	lsls	r3, r3, #1
 80019ca:	2203      	movs	r2, #3
 80019cc:	fa02 f303 	lsl.w	r3, r2, r3
 80019d0:	43db      	mvns	r3, r3
 80019d2:	69ba      	ldr	r2, [r7, #24]
 80019d4:	4013      	ands	r3, r2
 80019d6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	685b      	ldr	r3, [r3, #4]
 80019dc:	f003 0203 	and.w	r2, r3, #3
 80019e0:	69fb      	ldr	r3, [r7, #28]
 80019e2:	005b      	lsls	r3, r3, #1
 80019e4:	fa02 f303 	lsl.w	r3, r2, r3
 80019e8:	69ba      	ldr	r2, [r7, #24]
 80019ea:	4313      	orrs	r3, r2
 80019ec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	69ba      	ldr	r2, [r7, #24]
 80019f2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	685b      	ldr	r3, [r3, #4]
 80019f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	f000 80b4 	beq.w	8001b6a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a02:	2300      	movs	r3, #0
 8001a04:	60fb      	str	r3, [r7, #12]
 8001a06:	4b60      	ldr	r3, [pc, #384]	; (8001b88 <HAL_GPIO_Init+0x30c>)
 8001a08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a0a:	4a5f      	ldr	r2, [pc, #380]	; (8001b88 <HAL_GPIO_Init+0x30c>)
 8001a0c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a10:	6453      	str	r3, [r2, #68]	; 0x44
 8001a12:	4b5d      	ldr	r3, [pc, #372]	; (8001b88 <HAL_GPIO_Init+0x30c>)
 8001a14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a1a:	60fb      	str	r3, [r7, #12]
 8001a1c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001a1e:	4a5b      	ldr	r2, [pc, #364]	; (8001b8c <HAL_GPIO_Init+0x310>)
 8001a20:	69fb      	ldr	r3, [r7, #28]
 8001a22:	089b      	lsrs	r3, r3, #2
 8001a24:	3302      	adds	r3, #2
 8001a26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001a2c:	69fb      	ldr	r3, [r7, #28]
 8001a2e:	f003 0303 	and.w	r3, r3, #3
 8001a32:	009b      	lsls	r3, r3, #2
 8001a34:	220f      	movs	r2, #15
 8001a36:	fa02 f303 	lsl.w	r3, r2, r3
 8001a3a:	43db      	mvns	r3, r3
 8001a3c:	69ba      	ldr	r2, [r7, #24]
 8001a3e:	4013      	ands	r3, r2
 8001a40:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	4a52      	ldr	r2, [pc, #328]	; (8001b90 <HAL_GPIO_Init+0x314>)
 8001a46:	4293      	cmp	r3, r2
 8001a48:	d02b      	beq.n	8001aa2 <HAL_GPIO_Init+0x226>
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	4a51      	ldr	r2, [pc, #324]	; (8001b94 <HAL_GPIO_Init+0x318>)
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d025      	beq.n	8001a9e <HAL_GPIO_Init+0x222>
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	4a50      	ldr	r2, [pc, #320]	; (8001b98 <HAL_GPIO_Init+0x31c>)
 8001a56:	4293      	cmp	r3, r2
 8001a58:	d01f      	beq.n	8001a9a <HAL_GPIO_Init+0x21e>
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	4a4f      	ldr	r2, [pc, #316]	; (8001b9c <HAL_GPIO_Init+0x320>)
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d019      	beq.n	8001a96 <HAL_GPIO_Init+0x21a>
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	4a4e      	ldr	r2, [pc, #312]	; (8001ba0 <HAL_GPIO_Init+0x324>)
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d013      	beq.n	8001a92 <HAL_GPIO_Init+0x216>
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	4a4d      	ldr	r2, [pc, #308]	; (8001ba4 <HAL_GPIO_Init+0x328>)
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	d00d      	beq.n	8001a8e <HAL_GPIO_Init+0x212>
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	4a4c      	ldr	r2, [pc, #304]	; (8001ba8 <HAL_GPIO_Init+0x32c>)
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d007      	beq.n	8001a8a <HAL_GPIO_Init+0x20e>
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	4a4b      	ldr	r2, [pc, #300]	; (8001bac <HAL_GPIO_Init+0x330>)
 8001a7e:	4293      	cmp	r3, r2
 8001a80:	d101      	bne.n	8001a86 <HAL_GPIO_Init+0x20a>
 8001a82:	2307      	movs	r3, #7
 8001a84:	e00e      	b.n	8001aa4 <HAL_GPIO_Init+0x228>
 8001a86:	2308      	movs	r3, #8
 8001a88:	e00c      	b.n	8001aa4 <HAL_GPIO_Init+0x228>
 8001a8a:	2306      	movs	r3, #6
 8001a8c:	e00a      	b.n	8001aa4 <HAL_GPIO_Init+0x228>
 8001a8e:	2305      	movs	r3, #5
 8001a90:	e008      	b.n	8001aa4 <HAL_GPIO_Init+0x228>
 8001a92:	2304      	movs	r3, #4
 8001a94:	e006      	b.n	8001aa4 <HAL_GPIO_Init+0x228>
 8001a96:	2303      	movs	r3, #3
 8001a98:	e004      	b.n	8001aa4 <HAL_GPIO_Init+0x228>
 8001a9a:	2302      	movs	r3, #2
 8001a9c:	e002      	b.n	8001aa4 <HAL_GPIO_Init+0x228>
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	e000      	b.n	8001aa4 <HAL_GPIO_Init+0x228>
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	69fa      	ldr	r2, [r7, #28]
 8001aa6:	f002 0203 	and.w	r2, r2, #3
 8001aaa:	0092      	lsls	r2, r2, #2
 8001aac:	4093      	lsls	r3, r2
 8001aae:	69ba      	ldr	r2, [r7, #24]
 8001ab0:	4313      	orrs	r3, r2
 8001ab2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001ab4:	4935      	ldr	r1, [pc, #212]	; (8001b8c <HAL_GPIO_Init+0x310>)
 8001ab6:	69fb      	ldr	r3, [r7, #28]
 8001ab8:	089b      	lsrs	r3, r3, #2
 8001aba:	3302      	adds	r3, #2
 8001abc:	69ba      	ldr	r2, [r7, #24]
 8001abe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ac2:	4b3b      	ldr	r3, [pc, #236]	; (8001bb0 <HAL_GPIO_Init+0x334>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ac8:	693b      	ldr	r3, [r7, #16]
 8001aca:	43db      	mvns	r3, r3
 8001acc:	69ba      	ldr	r2, [r7, #24]
 8001ace:	4013      	ands	r3, r2
 8001ad0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	685b      	ldr	r3, [r3, #4]
 8001ad6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d003      	beq.n	8001ae6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001ade:	69ba      	ldr	r2, [r7, #24]
 8001ae0:	693b      	ldr	r3, [r7, #16]
 8001ae2:	4313      	orrs	r3, r2
 8001ae4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ae6:	4a32      	ldr	r2, [pc, #200]	; (8001bb0 <HAL_GPIO_Init+0x334>)
 8001ae8:	69bb      	ldr	r3, [r7, #24]
 8001aea:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001aec:	4b30      	ldr	r3, [pc, #192]	; (8001bb0 <HAL_GPIO_Init+0x334>)
 8001aee:	685b      	ldr	r3, [r3, #4]
 8001af0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001af2:	693b      	ldr	r3, [r7, #16]
 8001af4:	43db      	mvns	r3, r3
 8001af6:	69ba      	ldr	r2, [r7, #24]
 8001af8:	4013      	ands	r3, r2
 8001afa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d003      	beq.n	8001b10 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001b08:	69ba      	ldr	r2, [r7, #24]
 8001b0a:	693b      	ldr	r3, [r7, #16]
 8001b0c:	4313      	orrs	r3, r2
 8001b0e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001b10:	4a27      	ldr	r2, [pc, #156]	; (8001bb0 <HAL_GPIO_Init+0x334>)
 8001b12:	69bb      	ldr	r3, [r7, #24]
 8001b14:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b16:	4b26      	ldr	r3, [pc, #152]	; (8001bb0 <HAL_GPIO_Init+0x334>)
 8001b18:	689b      	ldr	r3, [r3, #8]
 8001b1a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b1c:	693b      	ldr	r3, [r7, #16]
 8001b1e:	43db      	mvns	r3, r3
 8001b20:	69ba      	ldr	r2, [r7, #24]
 8001b22:	4013      	ands	r3, r2
 8001b24:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d003      	beq.n	8001b3a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001b32:	69ba      	ldr	r2, [r7, #24]
 8001b34:	693b      	ldr	r3, [r7, #16]
 8001b36:	4313      	orrs	r3, r2
 8001b38:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001b3a:	4a1d      	ldr	r2, [pc, #116]	; (8001bb0 <HAL_GPIO_Init+0x334>)
 8001b3c:	69bb      	ldr	r3, [r7, #24]
 8001b3e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001b40:	4b1b      	ldr	r3, [pc, #108]	; (8001bb0 <HAL_GPIO_Init+0x334>)
 8001b42:	68db      	ldr	r3, [r3, #12]
 8001b44:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b46:	693b      	ldr	r3, [r7, #16]
 8001b48:	43db      	mvns	r3, r3
 8001b4a:	69ba      	ldr	r2, [r7, #24]
 8001b4c:	4013      	ands	r3, r2
 8001b4e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d003      	beq.n	8001b64 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001b5c:	69ba      	ldr	r2, [r7, #24]
 8001b5e:	693b      	ldr	r3, [r7, #16]
 8001b60:	4313      	orrs	r3, r2
 8001b62:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001b64:	4a12      	ldr	r2, [pc, #72]	; (8001bb0 <HAL_GPIO_Init+0x334>)
 8001b66:	69bb      	ldr	r3, [r7, #24]
 8001b68:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b6a:	69fb      	ldr	r3, [r7, #28]
 8001b6c:	3301      	adds	r3, #1
 8001b6e:	61fb      	str	r3, [r7, #28]
 8001b70:	69fb      	ldr	r3, [r7, #28]
 8001b72:	2b0f      	cmp	r3, #15
 8001b74:	f67f ae90 	bls.w	8001898 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001b78:	bf00      	nop
 8001b7a:	bf00      	nop
 8001b7c:	3724      	adds	r7, #36	; 0x24
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b84:	4770      	bx	lr
 8001b86:	bf00      	nop
 8001b88:	40023800 	.word	0x40023800
 8001b8c:	40013800 	.word	0x40013800
 8001b90:	40020000 	.word	0x40020000
 8001b94:	40020400 	.word	0x40020400
 8001b98:	40020800 	.word	0x40020800
 8001b9c:	40020c00 	.word	0x40020c00
 8001ba0:	40021000 	.word	0x40021000
 8001ba4:	40021400 	.word	0x40021400
 8001ba8:	40021800 	.word	0x40021800
 8001bac:	40021c00 	.word	0x40021c00
 8001bb0:	40013c00 	.word	0x40013c00

08001bb4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	b083      	sub	sp, #12
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
 8001bbc:	460b      	mov	r3, r1
 8001bbe:	807b      	strh	r3, [r7, #2]
 8001bc0:	4613      	mov	r3, r2
 8001bc2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001bc4:	787b      	ldrb	r3, [r7, #1]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d003      	beq.n	8001bd2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001bca:	887a      	ldrh	r2, [r7, #2]
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001bd0:	e003      	b.n	8001bda <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001bd2:	887b      	ldrh	r3, [r7, #2]
 8001bd4:	041a      	lsls	r2, r3, #16
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	619a      	str	r2, [r3, #24]
}
 8001bda:	bf00      	nop
 8001bdc:	370c      	adds	r7, #12
 8001bde:	46bd      	mov	sp, r7
 8001be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be4:	4770      	bx	lr
	...

08001be8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b086      	sub	sp, #24
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d101      	bne.n	8001bfa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	e264      	b.n	80020c4 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f003 0301 	and.w	r3, r3, #1
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d075      	beq.n	8001cf2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001c06:	4ba3      	ldr	r3, [pc, #652]	; (8001e94 <HAL_RCC_OscConfig+0x2ac>)
 8001c08:	689b      	ldr	r3, [r3, #8]
 8001c0a:	f003 030c 	and.w	r3, r3, #12
 8001c0e:	2b04      	cmp	r3, #4
 8001c10:	d00c      	beq.n	8001c2c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c12:	4ba0      	ldr	r3, [pc, #640]	; (8001e94 <HAL_RCC_OscConfig+0x2ac>)
 8001c14:	689b      	ldr	r3, [r3, #8]
 8001c16:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001c1a:	2b08      	cmp	r3, #8
 8001c1c:	d112      	bne.n	8001c44 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c1e:	4b9d      	ldr	r3, [pc, #628]	; (8001e94 <HAL_RCC_OscConfig+0x2ac>)
 8001c20:	685b      	ldr	r3, [r3, #4]
 8001c22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c26:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001c2a:	d10b      	bne.n	8001c44 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c2c:	4b99      	ldr	r3, [pc, #612]	; (8001e94 <HAL_RCC_OscConfig+0x2ac>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d05b      	beq.n	8001cf0 <HAL_RCC_OscConfig+0x108>
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	685b      	ldr	r3, [r3, #4]
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d157      	bne.n	8001cf0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001c40:	2301      	movs	r3, #1
 8001c42:	e23f      	b.n	80020c4 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	685b      	ldr	r3, [r3, #4]
 8001c48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c4c:	d106      	bne.n	8001c5c <HAL_RCC_OscConfig+0x74>
 8001c4e:	4b91      	ldr	r3, [pc, #580]	; (8001e94 <HAL_RCC_OscConfig+0x2ac>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4a90      	ldr	r2, [pc, #576]	; (8001e94 <HAL_RCC_OscConfig+0x2ac>)
 8001c54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c58:	6013      	str	r3, [r2, #0]
 8001c5a:	e01d      	b.n	8001c98 <HAL_RCC_OscConfig+0xb0>
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c64:	d10c      	bne.n	8001c80 <HAL_RCC_OscConfig+0x98>
 8001c66:	4b8b      	ldr	r3, [pc, #556]	; (8001e94 <HAL_RCC_OscConfig+0x2ac>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4a8a      	ldr	r2, [pc, #552]	; (8001e94 <HAL_RCC_OscConfig+0x2ac>)
 8001c6c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c70:	6013      	str	r3, [r2, #0]
 8001c72:	4b88      	ldr	r3, [pc, #544]	; (8001e94 <HAL_RCC_OscConfig+0x2ac>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	4a87      	ldr	r2, [pc, #540]	; (8001e94 <HAL_RCC_OscConfig+0x2ac>)
 8001c78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c7c:	6013      	str	r3, [r2, #0]
 8001c7e:	e00b      	b.n	8001c98 <HAL_RCC_OscConfig+0xb0>
 8001c80:	4b84      	ldr	r3, [pc, #528]	; (8001e94 <HAL_RCC_OscConfig+0x2ac>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4a83      	ldr	r2, [pc, #524]	; (8001e94 <HAL_RCC_OscConfig+0x2ac>)
 8001c86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c8a:	6013      	str	r3, [r2, #0]
 8001c8c:	4b81      	ldr	r3, [pc, #516]	; (8001e94 <HAL_RCC_OscConfig+0x2ac>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	4a80      	ldr	r2, [pc, #512]	; (8001e94 <HAL_RCC_OscConfig+0x2ac>)
 8001c92:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c96:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d013      	beq.n	8001cc8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ca0:	f7ff fbda 	bl	8001458 <HAL_GetTick>
 8001ca4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ca6:	e008      	b.n	8001cba <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ca8:	f7ff fbd6 	bl	8001458 <HAL_GetTick>
 8001cac:	4602      	mov	r2, r0
 8001cae:	693b      	ldr	r3, [r7, #16]
 8001cb0:	1ad3      	subs	r3, r2, r3
 8001cb2:	2b64      	cmp	r3, #100	; 0x64
 8001cb4:	d901      	bls.n	8001cba <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001cb6:	2303      	movs	r3, #3
 8001cb8:	e204      	b.n	80020c4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cba:	4b76      	ldr	r3, [pc, #472]	; (8001e94 <HAL_RCC_OscConfig+0x2ac>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d0f0      	beq.n	8001ca8 <HAL_RCC_OscConfig+0xc0>
 8001cc6:	e014      	b.n	8001cf2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cc8:	f7ff fbc6 	bl	8001458 <HAL_GetTick>
 8001ccc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cce:	e008      	b.n	8001ce2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001cd0:	f7ff fbc2 	bl	8001458 <HAL_GetTick>
 8001cd4:	4602      	mov	r2, r0
 8001cd6:	693b      	ldr	r3, [r7, #16]
 8001cd8:	1ad3      	subs	r3, r2, r3
 8001cda:	2b64      	cmp	r3, #100	; 0x64
 8001cdc:	d901      	bls.n	8001ce2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001cde:	2303      	movs	r3, #3
 8001ce0:	e1f0      	b.n	80020c4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ce2:	4b6c      	ldr	r3, [pc, #432]	; (8001e94 <HAL_RCC_OscConfig+0x2ac>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d1f0      	bne.n	8001cd0 <HAL_RCC_OscConfig+0xe8>
 8001cee:	e000      	b.n	8001cf2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cf0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f003 0302 	and.w	r3, r3, #2
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d063      	beq.n	8001dc6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001cfe:	4b65      	ldr	r3, [pc, #404]	; (8001e94 <HAL_RCC_OscConfig+0x2ac>)
 8001d00:	689b      	ldr	r3, [r3, #8]
 8001d02:	f003 030c 	and.w	r3, r3, #12
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d00b      	beq.n	8001d22 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d0a:	4b62      	ldr	r3, [pc, #392]	; (8001e94 <HAL_RCC_OscConfig+0x2ac>)
 8001d0c:	689b      	ldr	r3, [r3, #8]
 8001d0e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001d12:	2b08      	cmp	r3, #8
 8001d14:	d11c      	bne.n	8001d50 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d16:	4b5f      	ldr	r3, [pc, #380]	; (8001e94 <HAL_RCC_OscConfig+0x2ac>)
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d116      	bne.n	8001d50 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d22:	4b5c      	ldr	r3, [pc, #368]	; (8001e94 <HAL_RCC_OscConfig+0x2ac>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f003 0302 	and.w	r3, r3, #2
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d005      	beq.n	8001d3a <HAL_RCC_OscConfig+0x152>
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	68db      	ldr	r3, [r3, #12]
 8001d32:	2b01      	cmp	r3, #1
 8001d34:	d001      	beq.n	8001d3a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001d36:	2301      	movs	r3, #1
 8001d38:	e1c4      	b.n	80020c4 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d3a:	4b56      	ldr	r3, [pc, #344]	; (8001e94 <HAL_RCC_OscConfig+0x2ac>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	691b      	ldr	r3, [r3, #16]
 8001d46:	00db      	lsls	r3, r3, #3
 8001d48:	4952      	ldr	r1, [pc, #328]	; (8001e94 <HAL_RCC_OscConfig+0x2ac>)
 8001d4a:	4313      	orrs	r3, r2
 8001d4c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d4e:	e03a      	b.n	8001dc6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	68db      	ldr	r3, [r3, #12]
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d020      	beq.n	8001d9a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d58:	4b4f      	ldr	r3, [pc, #316]	; (8001e98 <HAL_RCC_OscConfig+0x2b0>)
 8001d5a:	2201      	movs	r2, #1
 8001d5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d5e:	f7ff fb7b 	bl	8001458 <HAL_GetTick>
 8001d62:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d64:	e008      	b.n	8001d78 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d66:	f7ff fb77 	bl	8001458 <HAL_GetTick>
 8001d6a:	4602      	mov	r2, r0
 8001d6c:	693b      	ldr	r3, [r7, #16]
 8001d6e:	1ad3      	subs	r3, r2, r3
 8001d70:	2b02      	cmp	r3, #2
 8001d72:	d901      	bls.n	8001d78 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001d74:	2303      	movs	r3, #3
 8001d76:	e1a5      	b.n	80020c4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d78:	4b46      	ldr	r3, [pc, #280]	; (8001e94 <HAL_RCC_OscConfig+0x2ac>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f003 0302 	and.w	r3, r3, #2
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d0f0      	beq.n	8001d66 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d84:	4b43      	ldr	r3, [pc, #268]	; (8001e94 <HAL_RCC_OscConfig+0x2ac>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	691b      	ldr	r3, [r3, #16]
 8001d90:	00db      	lsls	r3, r3, #3
 8001d92:	4940      	ldr	r1, [pc, #256]	; (8001e94 <HAL_RCC_OscConfig+0x2ac>)
 8001d94:	4313      	orrs	r3, r2
 8001d96:	600b      	str	r3, [r1, #0]
 8001d98:	e015      	b.n	8001dc6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d9a:	4b3f      	ldr	r3, [pc, #252]	; (8001e98 <HAL_RCC_OscConfig+0x2b0>)
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001da0:	f7ff fb5a 	bl	8001458 <HAL_GetTick>
 8001da4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001da6:	e008      	b.n	8001dba <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001da8:	f7ff fb56 	bl	8001458 <HAL_GetTick>
 8001dac:	4602      	mov	r2, r0
 8001dae:	693b      	ldr	r3, [r7, #16]
 8001db0:	1ad3      	subs	r3, r2, r3
 8001db2:	2b02      	cmp	r3, #2
 8001db4:	d901      	bls.n	8001dba <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001db6:	2303      	movs	r3, #3
 8001db8:	e184      	b.n	80020c4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001dba:	4b36      	ldr	r3, [pc, #216]	; (8001e94 <HAL_RCC_OscConfig+0x2ac>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f003 0302 	and.w	r3, r3, #2
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d1f0      	bne.n	8001da8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f003 0308 	and.w	r3, r3, #8
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d030      	beq.n	8001e34 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	695b      	ldr	r3, [r3, #20]
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d016      	beq.n	8001e08 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001dda:	4b30      	ldr	r3, [pc, #192]	; (8001e9c <HAL_RCC_OscConfig+0x2b4>)
 8001ddc:	2201      	movs	r2, #1
 8001dde:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001de0:	f7ff fb3a 	bl	8001458 <HAL_GetTick>
 8001de4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001de6:	e008      	b.n	8001dfa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001de8:	f7ff fb36 	bl	8001458 <HAL_GetTick>
 8001dec:	4602      	mov	r2, r0
 8001dee:	693b      	ldr	r3, [r7, #16]
 8001df0:	1ad3      	subs	r3, r2, r3
 8001df2:	2b02      	cmp	r3, #2
 8001df4:	d901      	bls.n	8001dfa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001df6:	2303      	movs	r3, #3
 8001df8:	e164      	b.n	80020c4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001dfa:	4b26      	ldr	r3, [pc, #152]	; (8001e94 <HAL_RCC_OscConfig+0x2ac>)
 8001dfc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001dfe:	f003 0302 	and.w	r3, r3, #2
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d0f0      	beq.n	8001de8 <HAL_RCC_OscConfig+0x200>
 8001e06:	e015      	b.n	8001e34 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e08:	4b24      	ldr	r3, [pc, #144]	; (8001e9c <HAL_RCC_OscConfig+0x2b4>)
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e0e:	f7ff fb23 	bl	8001458 <HAL_GetTick>
 8001e12:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e14:	e008      	b.n	8001e28 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e16:	f7ff fb1f 	bl	8001458 <HAL_GetTick>
 8001e1a:	4602      	mov	r2, r0
 8001e1c:	693b      	ldr	r3, [r7, #16]
 8001e1e:	1ad3      	subs	r3, r2, r3
 8001e20:	2b02      	cmp	r3, #2
 8001e22:	d901      	bls.n	8001e28 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001e24:	2303      	movs	r3, #3
 8001e26:	e14d      	b.n	80020c4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e28:	4b1a      	ldr	r3, [pc, #104]	; (8001e94 <HAL_RCC_OscConfig+0x2ac>)
 8001e2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e2c:	f003 0302 	and.w	r3, r3, #2
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d1f0      	bne.n	8001e16 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f003 0304 	and.w	r3, r3, #4
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	f000 80a0 	beq.w	8001f82 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e42:	2300      	movs	r3, #0
 8001e44:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e46:	4b13      	ldr	r3, [pc, #76]	; (8001e94 <HAL_RCC_OscConfig+0x2ac>)
 8001e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d10f      	bne.n	8001e72 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e52:	2300      	movs	r3, #0
 8001e54:	60bb      	str	r3, [r7, #8]
 8001e56:	4b0f      	ldr	r3, [pc, #60]	; (8001e94 <HAL_RCC_OscConfig+0x2ac>)
 8001e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e5a:	4a0e      	ldr	r2, [pc, #56]	; (8001e94 <HAL_RCC_OscConfig+0x2ac>)
 8001e5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e60:	6413      	str	r3, [r2, #64]	; 0x40
 8001e62:	4b0c      	ldr	r3, [pc, #48]	; (8001e94 <HAL_RCC_OscConfig+0x2ac>)
 8001e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e6a:	60bb      	str	r3, [r7, #8]
 8001e6c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e6e:	2301      	movs	r3, #1
 8001e70:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e72:	4b0b      	ldr	r3, [pc, #44]	; (8001ea0 <HAL_RCC_OscConfig+0x2b8>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d121      	bne.n	8001ec2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e7e:	4b08      	ldr	r3, [pc, #32]	; (8001ea0 <HAL_RCC_OscConfig+0x2b8>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	4a07      	ldr	r2, [pc, #28]	; (8001ea0 <HAL_RCC_OscConfig+0x2b8>)
 8001e84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e88:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e8a:	f7ff fae5 	bl	8001458 <HAL_GetTick>
 8001e8e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e90:	e011      	b.n	8001eb6 <HAL_RCC_OscConfig+0x2ce>
 8001e92:	bf00      	nop
 8001e94:	40023800 	.word	0x40023800
 8001e98:	42470000 	.word	0x42470000
 8001e9c:	42470e80 	.word	0x42470e80
 8001ea0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ea4:	f7ff fad8 	bl	8001458 <HAL_GetTick>
 8001ea8:	4602      	mov	r2, r0
 8001eaa:	693b      	ldr	r3, [r7, #16]
 8001eac:	1ad3      	subs	r3, r2, r3
 8001eae:	2b02      	cmp	r3, #2
 8001eb0:	d901      	bls.n	8001eb6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001eb2:	2303      	movs	r3, #3
 8001eb4:	e106      	b.n	80020c4 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001eb6:	4b85      	ldr	r3, [pc, #532]	; (80020cc <HAL_RCC_OscConfig+0x4e4>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d0f0      	beq.n	8001ea4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	689b      	ldr	r3, [r3, #8]
 8001ec6:	2b01      	cmp	r3, #1
 8001ec8:	d106      	bne.n	8001ed8 <HAL_RCC_OscConfig+0x2f0>
 8001eca:	4b81      	ldr	r3, [pc, #516]	; (80020d0 <HAL_RCC_OscConfig+0x4e8>)
 8001ecc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ece:	4a80      	ldr	r2, [pc, #512]	; (80020d0 <HAL_RCC_OscConfig+0x4e8>)
 8001ed0:	f043 0301 	orr.w	r3, r3, #1
 8001ed4:	6713      	str	r3, [r2, #112]	; 0x70
 8001ed6:	e01c      	b.n	8001f12 <HAL_RCC_OscConfig+0x32a>
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	689b      	ldr	r3, [r3, #8]
 8001edc:	2b05      	cmp	r3, #5
 8001ede:	d10c      	bne.n	8001efa <HAL_RCC_OscConfig+0x312>
 8001ee0:	4b7b      	ldr	r3, [pc, #492]	; (80020d0 <HAL_RCC_OscConfig+0x4e8>)
 8001ee2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ee4:	4a7a      	ldr	r2, [pc, #488]	; (80020d0 <HAL_RCC_OscConfig+0x4e8>)
 8001ee6:	f043 0304 	orr.w	r3, r3, #4
 8001eea:	6713      	str	r3, [r2, #112]	; 0x70
 8001eec:	4b78      	ldr	r3, [pc, #480]	; (80020d0 <HAL_RCC_OscConfig+0x4e8>)
 8001eee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ef0:	4a77      	ldr	r2, [pc, #476]	; (80020d0 <HAL_RCC_OscConfig+0x4e8>)
 8001ef2:	f043 0301 	orr.w	r3, r3, #1
 8001ef6:	6713      	str	r3, [r2, #112]	; 0x70
 8001ef8:	e00b      	b.n	8001f12 <HAL_RCC_OscConfig+0x32a>
 8001efa:	4b75      	ldr	r3, [pc, #468]	; (80020d0 <HAL_RCC_OscConfig+0x4e8>)
 8001efc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001efe:	4a74      	ldr	r2, [pc, #464]	; (80020d0 <HAL_RCC_OscConfig+0x4e8>)
 8001f00:	f023 0301 	bic.w	r3, r3, #1
 8001f04:	6713      	str	r3, [r2, #112]	; 0x70
 8001f06:	4b72      	ldr	r3, [pc, #456]	; (80020d0 <HAL_RCC_OscConfig+0x4e8>)
 8001f08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f0a:	4a71      	ldr	r2, [pc, #452]	; (80020d0 <HAL_RCC_OscConfig+0x4e8>)
 8001f0c:	f023 0304 	bic.w	r3, r3, #4
 8001f10:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	689b      	ldr	r3, [r3, #8]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d015      	beq.n	8001f46 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f1a:	f7ff fa9d 	bl	8001458 <HAL_GetTick>
 8001f1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f20:	e00a      	b.n	8001f38 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f22:	f7ff fa99 	bl	8001458 <HAL_GetTick>
 8001f26:	4602      	mov	r2, r0
 8001f28:	693b      	ldr	r3, [r7, #16]
 8001f2a:	1ad3      	subs	r3, r2, r3
 8001f2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f30:	4293      	cmp	r3, r2
 8001f32:	d901      	bls.n	8001f38 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001f34:	2303      	movs	r3, #3
 8001f36:	e0c5      	b.n	80020c4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f38:	4b65      	ldr	r3, [pc, #404]	; (80020d0 <HAL_RCC_OscConfig+0x4e8>)
 8001f3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f3c:	f003 0302 	and.w	r3, r3, #2
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d0ee      	beq.n	8001f22 <HAL_RCC_OscConfig+0x33a>
 8001f44:	e014      	b.n	8001f70 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f46:	f7ff fa87 	bl	8001458 <HAL_GetTick>
 8001f4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f4c:	e00a      	b.n	8001f64 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f4e:	f7ff fa83 	bl	8001458 <HAL_GetTick>
 8001f52:	4602      	mov	r2, r0
 8001f54:	693b      	ldr	r3, [r7, #16]
 8001f56:	1ad3      	subs	r3, r2, r3
 8001f58:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f5c:	4293      	cmp	r3, r2
 8001f5e:	d901      	bls.n	8001f64 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001f60:	2303      	movs	r3, #3
 8001f62:	e0af      	b.n	80020c4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f64:	4b5a      	ldr	r3, [pc, #360]	; (80020d0 <HAL_RCC_OscConfig+0x4e8>)
 8001f66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f68:	f003 0302 	and.w	r3, r3, #2
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d1ee      	bne.n	8001f4e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001f70:	7dfb      	ldrb	r3, [r7, #23]
 8001f72:	2b01      	cmp	r3, #1
 8001f74:	d105      	bne.n	8001f82 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f76:	4b56      	ldr	r3, [pc, #344]	; (80020d0 <HAL_RCC_OscConfig+0x4e8>)
 8001f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f7a:	4a55      	ldr	r2, [pc, #340]	; (80020d0 <HAL_RCC_OscConfig+0x4e8>)
 8001f7c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f80:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	699b      	ldr	r3, [r3, #24]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	f000 809b 	beq.w	80020c2 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001f8c:	4b50      	ldr	r3, [pc, #320]	; (80020d0 <HAL_RCC_OscConfig+0x4e8>)
 8001f8e:	689b      	ldr	r3, [r3, #8]
 8001f90:	f003 030c 	and.w	r3, r3, #12
 8001f94:	2b08      	cmp	r3, #8
 8001f96:	d05c      	beq.n	8002052 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	699b      	ldr	r3, [r3, #24]
 8001f9c:	2b02      	cmp	r3, #2
 8001f9e:	d141      	bne.n	8002024 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fa0:	4b4c      	ldr	r3, [pc, #304]	; (80020d4 <HAL_RCC_OscConfig+0x4ec>)
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fa6:	f7ff fa57 	bl	8001458 <HAL_GetTick>
 8001faa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fac:	e008      	b.n	8001fc0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001fae:	f7ff fa53 	bl	8001458 <HAL_GetTick>
 8001fb2:	4602      	mov	r2, r0
 8001fb4:	693b      	ldr	r3, [r7, #16]
 8001fb6:	1ad3      	subs	r3, r2, r3
 8001fb8:	2b02      	cmp	r3, #2
 8001fba:	d901      	bls.n	8001fc0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001fbc:	2303      	movs	r3, #3
 8001fbe:	e081      	b.n	80020c4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fc0:	4b43      	ldr	r3, [pc, #268]	; (80020d0 <HAL_RCC_OscConfig+0x4e8>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d1f0      	bne.n	8001fae <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	69da      	ldr	r2, [r3, #28]
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	6a1b      	ldr	r3, [r3, #32]
 8001fd4:	431a      	orrs	r2, r3
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fda:	019b      	lsls	r3, r3, #6
 8001fdc:	431a      	orrs	r2, r3
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fe2:	085b      	lsrs	r3, r3, #1
 8001fe4:	3b01      	subs	r3, #1
 8001fe6:	041b      	lsls	r3, r3, #16
 8001fe8:	431a      	orrs	r2, r3
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fee:	061b      	lsls	r3, r3, #24
 8001ff0:	4937      	ldr	r1, [pc, #220]	; (80020d0 <HAL_RCC_OscConfig+0x4e8>)
 8001ff2:	4313      	orrs	r3, r2
 8001ff4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ff6:	4b37      	ldr	r3, [pc, #220]	; (80020d4 <HAL_RCC_OscConfig+0x4ec>)
 8001ff8:	2201      	movs	r2, #1
 8001ffa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ffc:	f7ff fa2c 	bl	8001458 <HAL_GetTick>
 8002000:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002002:	e008      	b.n	8002016 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002004:	f7ff fa28 	bl	8001458 <HAL_GetTick>
 8002008:	4602      	mov	r2, r0
 800200a:	693b      	ldr	r3, [r7, #16]
 800200c:	1ad3      	subs	r3, r2, r3
 800200e:	2b02      	cmp	r3, #2
 8002010:	d901      	bls.n	8002016 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002012:	2303      	movs	r3, #3
 8002014:	e056      	b.n	80020c4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002016:	4b2e      	ldr	r3, [pc, #184]	; (80020d0 <HAL_RCC_OscConfig+0x4e8>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800201e:	2b00      	cmp	r3, #0
 8002020:	d0f0      	beq.n	8002004 <HAL_RCC_OscConfig+0x41c>
 8002022:	e04e      	b.n	80020c2 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002024:	4b2b      	ldr	r3, [pc, #172]	; (80020d4 <HAL_RCC_OscConfig+0x4ec>)
 8002026:	2200      	movs	r2, #0
 8002028:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800202a:	f7ff fa15 	bl	8001458 <HAL_GetTick>
 800202e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002030:	e008      	b.n	8002044 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002032:	f7ff fa11 	bl	8001458 <HAL_GetTick>
 8002036:	4602      	mov	r2, r0
 8002038:	693b      	ldr	r3, [r7, #16]
 800203a:	1ad3      	subs	r3, r2, r3
 800203c:	2b02      	cmp	r3, #2
 800203e:	d901      	bls.n	8002044 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002040:	2303      	movs	r3, #3
 8002042:	e03f      	b.n	80020c4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002044:	4b22      	ldr	r3, [pc, #136]	; (80020d0 <HAL_RCC_OscConfig+0x4e8>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800204c:	2b00      	cmp	r3, #0
 800204e:	d1f0      	bne.n	8002032 <HAL_RCC_OscConfig+0x44a>
 8002050:	e037      	b.n	80020c2 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	699b      	ldr	r3, [r3, #24]
 8002056:	2b01      	cmp	r3, #1
 8002058:	d101      	bne.n	800205e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800205a:	2301      	movs	r3, #1
 800205c:	e032      	b.n	80020c4 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800205e:	4b1c      	ldr	r3, [pc, #112]	; (80020d0 <HAL_RCC_OscConfig+0x4e8>)
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	699b      	ldr	r3, [r3, #24]
 8002068:	2b01      	cmp	r3, #1
 800206a:	d028      	beq.n	80020be <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002076:	429a      	cmp	r2, r3
 8002078:	d121      	bne.n	80020be <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002084:	429a      	cmp	r2, r3
 8002086:	d11a      	bne.n	80020be <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002088:	68fa      	ldr	r2, [r7, #12]
 800208a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800208e:	4013      	ands	r3, r2
 8002090:	687a      	ldr	r2, [r7, #4]
 8002092:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002094:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002096:	4293      	cmp	r3, r2
 8002098:	d111      	bne.n	80020be <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020a4:	085b      	lsrs	r3, r3, #1
 80020a6:	3b01      	subs	r3, #1
 80020a8:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80020aa:	429a      	cmp	r2, r3
 80020ac:	d107      	bne.n	80020be <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020b8:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80020ba:	429a      	cmp	r2, r3
 80020bc:	d001      	beq.n	80020c2 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80020be:	2301      	movs	r3, #1
 80020c0:	e000      	b.n	80020c4 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80020c2:	2300      	movs	r3, #0
}
 80020c4:	4618      	mov	r0, r3
 80020c6:	3718      	adds	r7, #24
 80020c8:	46bd      	mov	sp, r7
 80020ca:	bd80      	pop	{r7, pc}
 80020cc:	40007000 	.word	0x40007000
 80020d0:	40023800 	.word	0x40023800
 80020d4:	42470060 	.word	0x42470060

080020d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b084      	sub	sp, #16
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
 80020e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d101      	bne.n	80020ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80020e8:	2301      	movs	r3, #1
 80020ea:	e0cc      	b.n	8002286 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80020ec:	4b68      	ldr	r3, [pc, #416]	; (8002290 <HAL_RCC_ClockConfig+0x1b8>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f003 0307 	and.w	r3, r3, #7
 80020f4:	683a      	ldr	r2, [r7, #0]
 80020f6:	429a      	cmp	r2, r3
 80020f8:	d90c      	bls.n	8002114 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020fa:	4b65      	ldr	r3, [pc, #404]	; (8002290 <HAL_RCC_ClockConfig+0x1b8>)
 80020fc:	683a      	ldr	r2, [r7, #0]
 80020fe:	b2d2      	uxtb	r2, r2
 8002100:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002102:	4b63      	ldr	r3, [pc, #396]	; (8002290 <HAL_RCC_ClockConfig+0x1b8>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f003 0307 	and.w	r3, r3, #7
 800210a:	683a      	ldr	r2, [r7, #0]
 800210c:	429a      	cmp	r2, r3
 800210e:	d001      	beq.n	8002114 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002110:	2301      	movs	r3, #1
 8002112:	e0b8      	b.n	8002286 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f003 0302 	and.w	r3, r3, #2
 800211c:	2b00      	cmp	r3, #0
 800211e:	d020      	beq.n	8002162 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f003 0304 	and.w	r3, r3, #4
 8002128:	2b00      	cmp	r3, #0
 800212a:	d005      	beq.n	8002138 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800212c:	4b59      	ldr	r3, [pc, #356]	; (8002294 <HAL_RCC_ClockConfig+0x1bc>)
 800212e:	689b      	ldr	r3, [r3, #8]
 8002130:	4a58      	ldr	r2, [pc, #352]	; (8002294 <HAL_RCC_ClockConfig+0x1bc>)
 8002132:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002136:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f003 0308 	and.w	r3, r3, #8
 8002140:	2b00      	cmp	r3, #0
 8002142:	d005      	beq.n	8002150 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002144:	4b53      	ldr	r3, [pc, #332]	; (8002294 <HAL_RCC_ClockConfig+0x1bc>)
 8002146:	689b      	ldr	r3, [r3, #8]
 8002148:	4a52      	ldr	r2, [pc, #328]	; (8002294 <HAL_RCC_ClockConfig+0x1bc>)
 800214a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800214e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002150:	4b50      	ldr	r3, [pc, #320]	; (8002294 <HAL_RCC_ClockConfig+0x1bc>)
 8002152:	689b      	ldr	r3, [r3, #8]
 8002154:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	689b      	ldr	r3, [r3, #8]
 800215c:	494d      	ldr	r1, [pc, #308]	; (8002294 <HAL_RCC_ClockConfig+0x1bc>)
 800215e:	4313      	orrs	r3, r2
 8002160:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f003 0301 	and.w	r3, r3, #1
 800216a:	2b00      	cmp	r3, #0
 800216c:	d044      	beq.n	80021f8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	2b01      	cmp	r3, #1
 8002174:	d107      	bne.n	8002186 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002176:	4b47      	ldr	r3, [pc, #284]	; (8002294 <HAL_RCC_ClockConfig+0x1bc>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800217e:	2b00      	cmp	r3, #0
 8002180:	d119      	bne.n	80021b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002182:	2301      	movs	r3, #1
 8002184:	e07f      	b.n	8002286 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	685b      	ldr	r3, [r3, #4]
 800218a:	2b02      	cmp	r3, #2
 800218c:	d003      	beq.n	8002196 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002192:	2b03      	cmp	r3, #3
 8002194:	d107      	bne.n	80021a6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002196:	4b3f      	ldr	r3, [pc, #252]	; (8002294 <HAL_RCC_ClockConfig+0x1bc>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d109      	bne.n	80021b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021a2:	2301      	movs	r3, #1
 80021a4:	e06f      	b.n	8002286 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021a6:	4b3b      	ldr	r3, [pc, #236]	; (8002294 <HAL_RCC_ClockConfig+0x1bc>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f003 0302 	and.w	r3, r3, #2
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d101      	bne.n	80021b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021b2:	2301      	movs	r3, #1
 80021b4:	e067      	b.n	8002286 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80021b6:	4b37      	ldr	r3, [pc, #220]	; (8002294 <HAL_RCC_ClockConfig+0x1bc>)
 80021b8:	689b      	ldr	r3, [r3, #8]
 80021ba:	f023 0203 	bic.w	r2, r3, #3
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	685b      	ldr	r3, [r3, #4]
 80021c2:	4934      	ldr	r1, [pc, #208]	; (8002294 <HAL_RCC_ClockConfig+0x1bc>)
 80021c4:	4313      	orrs	r3, r2
 80021c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80021c8:	f7ff f946 	bl	8001458 <HAL_GetTick>
 80021cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021ce:	e00a      	b.n	80021e6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021d0:	f7ff f942 	bl	8001458 <HAL_GetTick>
 80021d4:	4602      	mov	r2, r0
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	1ad3      	subs	r3, r2, r3
 80021da:	f241 3288 	movw	r2, #5000	; 0x1388
 80021de:	4293      	cmp	r3, r2
 80021e0:	d901      	bls.n	80021e6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80021e2:	2303      	movs	r3, #3
 80021e4:	e04f      	b.n	8002286 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021e6:	4b2b      	ldr	r3, [pc, #172]	; (8002294 <HAL_RCC_ClockConfig+0x1bc>)
 80021e8:	689b      	ldr	r3, [r3, #8]
 80021ea:	f003 020c 	and.w	r2, r3, #12
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	685b      	ldr	r3, [r3, #4]
 80021f2:	009b      	lsls	r3, r3, #2
 80021f4:	429a      	cmp	r2, r3
 80021f6:	d1eb      	bne.n	80021d0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80021f8:	4b25      	ldr	r3, [pc, #148]	; (8002290 <HAL_RCC_ClockConfig+0x1b8>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f003 0307 	and.w	r3, r3, #7
 8002200:	683a      	ldr	r2, [r7, #0]
 8002202:	429a      	cmp	r2, r3
 8002204:	d20c      	bcs.n	8002220 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002206:	4b22      	ldr	r3, [pc, #136]	; (8002290 <HAL_RCC_ClockConfig+0x1b8>)
 8002208:	683a      	ldr	r2, [r7, #0]
 800220a:	b2d2      	uxtb	r2, r2
 800220c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800220e:	4b20      	ldr	r3, [pc, #128]	; (8002290 <HAL_RCC_ClockConfig+0x1b8>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f003 0307 	and.w	r3, r3, #7
 8002216:	683a      	ldr	r2, [r7, #0]
 8002218:	429a      	cmp	r2, r3
 800221a:	d001      	beq.n	8002220 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800221c:	2301      	movs	r3, #1
 800221e:	e032      	b.n	8002286 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f003 0304 	and.w	r3, r3, #4
 8002228:	2b00      	cmp	r3, #0
 800222a:	d008      	beq.n	800223e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800222c:	4b19      	ldr	r3, [pc, #100]	; (8002294 <HAL_RCC_ClockConfig+0x1bc>)
 800222e:	689b      	ldr	r3, [r3, #8]
 8002230:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	68db      	ldr	r3, [r3, #12]
 8002238:	4916      	ldr	r1, [pc, #88]	; (8002294 <HAL_RCC_ClockConfig+0x1bc>)
 800223a:	4313      	orrs	r3, r2
 800223c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f003 0308 	and.w	r3, r3, #8
 8002246:	2b00      	cmp	r3, #0
 8002248:	d009      	beq.n	800225e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800224a:	4b12      	ldr	r3, [pc, #72]	; (8002294 <HAL_RCC_ClockConfig+0x1bc>)
 800224c:	689b      	ldr	r3, [r3, #8]
 800224e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	691b      	ldr	r3, [r3, #16]
 8002256:	00db      	lsls	r3, r3, #3
 8002258:	490e      	ldr	r1, [pc, #56]	; (8002294 <HAL_RCC_ClockConfig+0x1bc>)
 800225a:	4313      	orrs	r3, r2
 800225c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800225e:	f000 f821 	bl	80022a4 <HAL_RCC_GetSysClockFreq>
 8002262:	4602      	mov	r2, r0
 8002264:	4b0b      	ldr	r3, [pc, #44]	; (8002294 <HAL_RCC_ClockConfig+0x1bc>)
 8002266:	689b      	ldr	r3, [r3, #8]
 8002268:	091b      	lsrs	r3, r3, #4
 800226a:	f003 030f 	and.w	r3, r3, #15
 800226e:	490a      	ldr	r1, [pc, #40]	; (8002298 <HAL_RCC_ClockConfig+0x1c0>)
 8002270:	5ccb      	ldrb	r3, [r1, r3]
 8002272:	fa22 f303 	lsr.w	r3, r2, r3
 8002276:	4a09      	ldr	r2, [pc, #36]	; (800229c <HAL_RCC_ClockConfig+0x1c4>)
 8002278:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800227a:	4b09      	ldr	r3, [pc, #36]	; (80022a0 <HAL_RCC_ClockConfig+0x1c8>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	4618      	mov	r0, r3
 8002280:	f7ff f8a6 	bl	80013d0 <HAL_InitTick>

  return HAL_OK;
 8002284:	2300      	movs	r3, #0
}
 8002286:	4618      	mov	r0, r3
 8002288:	3710      	adds	r7, #16
 800228a:	46bd      	mov	sp, r7
 800228c:	bd80      	pop	{r7, pc}
 800228e:	bf00      	nop
 8002290:	40023c00 	.word	0x40023c00
 8002294:	40023800 	.word	0x40023800
 8002298:	08004734 	.word	0x08004734
 800229c:	20000000 	.word	0x20000000
 80022a0:	20000004 	.word	0x20000004

080022a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80022a4:	b5b0      	push	{r4, r5, r7, lr}
 80022a6:	b084      	sub	sp, #16
 80022a8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80022aa:	2100      	movs	r1, #0
 80022ac:	6079      	str	r1, [r7, #4]
 80022ae:	2100      	movs	r1, #0
 80022b0:	60f9      	str	r1, [r7, #12]
 80022b2:	2100      	movs	r1, #0
 80022b4:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80022b6:	2100      	movs	r1, #0
 80022b8:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80022ba:	4952      	ldr	r1, [pc, #328]	; (8002404 <HAL_RCC_GetSysClockFreq+0x160>)
 80022bc:	6889      	ldr	r1, [r1, #8]
 80022be:	f001 010c 	and.w	r1, r1, #12
 80022c2:	2908      	cmp	r1, #8
 80022c4:	d00d      	beq.n	80022e2 <HAL_RCC_GetSysClockFreq+0x3e>
 80022c6:	2908      	cmp	r1, #8
 80022c8:	f200 8094 	bhi.w	80023f4 <HAL_RCC_GetSysClockFreq+0x150>
 80022cc:	2900      	cmp	r1, #0
 80022ce:	d002      	beq.n	80022d6 <HAL_RCC_GetSysClockFreq+0x32>
 80022d0:	2904      	cmp	r1, #4
 80022d2:	d003      	beq.n	80022dc <HAL_RCC_GetSysClockFreq+0x38>
 80022d4:	e08e      	b.n	80023f4 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80022d6:	4b4c      	ldr	r3, [pc, #304]	; (8002408 <HAL_RCC_GetSysClockFreq+0x164>)
 80022d8:	60bb      	str	r3, [r7, #8]
       break;
 80022da:	e08e      	b.n	80023fa <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80022dc:	4b4b      	ldr	r3, [pc, #300]	; (800240c <HAL_RCC_GetSysClockFreq+0x168>)
 80022de:	60bb      	str	r3, [r7, #8]
      break;
 80022e0:	e08b      	b.n	80023fa <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80022e2:	4948      	ldr	r1, [pc, #288]	; (8002404 <HAL_RCC_GetSysClockFreq+0x160>)
 80022e4:	6849      	ldr	r1, [r1, #4]
 80022e6:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80022ea:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80022ec:	4945      	ldr	r1, [pc, #276]	; (8002404 <HAL_RCC_GetSysClockFreq+0x160>)
 80022ee:	6849      	ldr	r1, [r1, #4]
 80022f0:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80022f4:	2900      	cmp	r1, #0
 80022f6:	d024      	beq.n	8002342 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80022f8:	4942      	ldr	r1, [pc, #264]	; (8002404 <HAL_RCC_GetSysClockFreq+0x160>)
 80022fa:	6849      	ldr	r1, [r1, #4]
 80022fc:	0989      	lsrs	r1, r1, #6
 80022fe:	4608      	mov	r0, r1
 8002300:	f04f 0100 	mov.w	r1, #0
 8002304:	f240 14ff 	movw	r4, #511	; 0x1ff
 8002308:	f04f 0500 	mov.w	r5, #0
 800230c:	ea00 0204 	and.w	r2, r0, r4
 8002310:	ea01 0305 	and.w	r3, r1, r5
 8002314:	493d      	ldr	r1, [pc, #244]	; (800240c <HAL_RCC_GetSysClockFreq+0x168>)
 8002316:	fb01 f003 	mul.w	r0, r1, r3
 800231a:	2100      	movs	r1, #0
 800231c:	fb01 f102 	mul.w	r1, r1, r2
 8002320:	1844      	adds	r4, r0, r1
 8002322:	493a      	ldr	r1, [pc, #232]	; (800240c <HAL_RCC_GetSysClockFreq+0x168>)
 8002324:	fba2 0101 	umull	r0, r1, r2, r1
 8002328:	1863      	adds	r3, r4, r1
 800232a:	4619      	mov	r1, r3
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	461a      	mov	r2, r3
 8002330:	f04f 0300 	mov.w	r3, #0
 8002334:	f7fd ffa4 	bl	8000280 <__aeabi_uldivmod>
 8002338:	4602      	mov	r2, r0
 800233a:	460b      	mov	r3, r1
 800233c:	4613      	mov	r3, r2
 800233e:	60fb      	str	r3, [r7, #12]
 8002340:	e04a      	b.n	80023d8 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002342:	4b30      	ldr	r3, [pc, #192]	; (8002404 <HAL_RCC_GetSysClockFreq+0x160>)
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	099b      	lsrs	r3, r3, #6
 8002348:	461a      	mov	r2, r3
 800234a:	f04f 0300 	mov.w	r3, #0
 800234e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002352:	f04f 0100 	mov.w	r1, #0
 8002356:	ea02 0400 	and.w	r4, r2, r0
 800235a:	ea03 0501 	and.w	r5, r3, r1
 800235e:	4620      	mov	r0, r4
 8002360:	4629      	mov	r1, r5
 8002362:	f04f 0200 	mov.w	r2, #0
 8002366:	f04f 0300 	mov.w	r3, #0
 800236a:	014b      	lsls	r3, r1, #5
 800236c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002370:	0142      	lsls	r2, r0, #5
 8002372:	4610      	mov	r0, r2
 8002374:	4619      	mov	r1, r3
 8002376:	1b00      	subs	r0, r0, r4
 8002378:	eb61 0105 	sbc.w	r1, r1, r5
 800237c:	f04f 0200 	mov.w	r2, #0
 8002380:	f04f 0300 	mov.w	r3, #0
 8002384:	018b      	lsls	r3, r1, #6
 8002386:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800238a:	0182      	lsls	r2, r0, #6
 800238c:	1a12      	subs	r2, r2, r0
 800238e:	eb63 0301 	sbc.w	r3, r3, r1
 8002392:	f04f 0000 	mov.w	r0, #0
 8002396:	f04f 0100 	mov.w	r1, #0
 800239a:	00d9      	lsls	r1, r3, #3
 800239c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80023a0:	00d0      	lsls	r0, r2, #3
 80023a2:	4602      	mov	r2, r0
 80023a4:	460b      	mov	r3, r1
 80023a6:	1912      	adds	r2, r2, r4
 80023a8:	eb45 0303 	adc.w	r3, r5, r3
 80023ac:	f04f 0000 	mov.w	r0, #0
 80023b0:	f04f 0100 	mov.w	r1, #0
 80023b4:	0299      	lsls	r1, r3, #10
 80023b6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80023ba:	0290      	lsls	r0, r2, #10
 80023bc:	4602      	mov	r2, r0
 80023be:	460b      	mov	r3, r1
 80023c0:	4610      	mov	r0, r2
 80023c2:	4619      	mov	r1, r3
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	461a      	mov	r2, r3
 80023c8:	f04f 0300 	mov.w	r3, #0
 80023cc:	f7fd ff58 	bl	8000280 <__aeabi_uldivmod>
 80023d0:	4602      	mov	r2, r0
 80023d2:	460b      	mov	r3, r1
 80023d4:	4613      	mov	r3, r2
 80023d6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80023d8:	4b0a      	ldr	r3, [pc, #40]	; (8002404 <HAL_RCC_GetSysClockFreq+0x160>)
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	0c1b      	lsrs	r3, r3, #16
 80023de:	f003 0303 	and.w	r3, r3, #3
 80023e2:	3301      	adds	r3, #1
 80023e4:	005b      	lsls	r3, r3, #1
 80023e6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80023e8:	68fa      	ldr	r2, [r7, #12]
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80023f0:	60bb      	str	r3, [r7, #8]
      break;
 80023f2:	e002      	b.n	80023fa <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80023f4:	4b04      	ldr	r3, [pc, #16]	; (8002408 <HAL_RCC_GetSysClockFreq+0x164>)
 80023f6:	60bb      	str	r3, [r7, #8]
      break;
 80023f8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80023fa:	68bb      	ldr	r3, [r7, #8]
}
 80023fc:	4618      	mov	r0, r3
 80023fe:	3710      	adds	r7, #16
 8002400:	46bd      	mov	sp, r7
 8002402:	bdb0      	pop	{r4, r5, r7, pc}
 8002404:	40023800 	.word	0x40023800
 8002408:	00f42400 	.word	0x00f42400
 800240c:	017d7840 	.word	0x017d7840

08002410 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002410:	b480      	push	{r7}
 8002412:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002414:	4b03      	ldr	r3, [pc, #12]	; (8002424 <HAL_RCC_GetHCLKFreq+0x14>)
 8002416:	681b      	ldr	r3, [r3, #0]
}
 8002418:	4618      	mov	r0, r3
 800241a:	46bd      	mov	sp, r7
 800241c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002420:	4770      	bx	lr
 8002422:	bf00      	nop
 8002424:	20000000 	.word	0x20000000

08002428 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800242c:	f7ff fff0 	bl	8002410 <HAL_RCC_GetHCLKFreq>
 8002430:	4602      	mov	r2, r0
 8002432:	4b05      	ldr	r3, [pc, #20]	; (8002448 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002434:	689b      	ldr	r3, [r3, #8]
 8002436:	0a9b      	lsrs	r3, r3, #10
 8002438:	f003 0307 	and.w	r3, r3, #7
 800243c:	4903      	ldr	r1, [pc, #12]	; (800244c <HAL_RCC_GetPCLK1Freq+0x24>)
 800243e:	5ccb      	ldrb	r3, [r1, r3]
 8002440:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002444:	4618      	mov	r0, r3
 8002446:	bd80      	pop	{r7, pc}
 8002448:	40023800 	.word	0x40023800
 800244c:	08004744 	.word	0x08004744

08002450 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002454:	f7ff ffdc 	bl	8002410 <HAL_RCC_GetHCLKFreq>
 8002458:	4602      	mov	r2, r0
 800245a:	4b05      	ldr	r3, [pc, #20]	; (8002470 <HAL_RCC_GetPCLK2Freq+0x20>)
 800245c:	689b      	ldr	r3, [r3, #8]
 800245e:	0b5b      	lsrs	r3, r3, #13
 8002460:	f003 0307 	and.w	r3, r3, #7
 8002464:	4903      	ldr	r1, [pc, #12]	; (8002474 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002466:	5ccb      	ldrb	r3, [r1, r3]
 8002468:	fa22 f303 	lsr.w	r3, r2, r3
}
 800246c:	4618      	mov	r0, r3
 800246e:	bd80      	pop	{r7, pc}
 8002470:	40023800 	.word	0x40023800
 8002474:	08004744 	.word	0x08004744

08002478 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b082      	sub	sp, #8
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2b00      	cmp	r3, #0
 8002484:	d101      	bne.n	800248a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002486:	2301      	movs	r3, #1
 8002488:	e07b      	b.n	8002582 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800248e:	2b00      	cmp	r3, #0
 8002490:	d108      	bne.n	80024a4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	685b      	ldr	r3, [r3, #4]
 8002496:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800249a:	d009      	beq.n	80024b0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2200      	movs	r2, #0
 80024a0:	61da      	str	r2, [r3, #28]
 80024a2:	e005      	b.n	80024b0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2200      	movs	r2, #0
 80024a8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	2200      	movs	r2, #0
 80024ae:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2200      	movs	r2, #0
 80024b4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80024bc:	b2db      	uxtb	r3, r3
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d106      	bne.n	80024d0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	2200      	movs	r2, #0
 80024c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80024ca:	6878      	ldr	r0, [r7, #4]
 80024cc:	f7fe fdee 	bl	80010ac <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2202      	movs	r2, #2
 80024d4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	681a      	ldr	r2, [r3, #0]
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80024e6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	689b      	ldr	r3, [r3, #8]
 80024f4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80024f8:	431a      	orrs	r2, r3
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	68db      	ldr	r3, [r3, #12]
 80024fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002502:	431a      	orrs	r2, r3
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	691b      	ldr	r3, [r3, #16]
 8002508:	f003 0302 	and.w	r3, r3, #2
 800250c:	431a      	orrs	r2, r3
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	695b      	ldr	r3, [r3, #20]
 8002512:	f003 0301 	and.w	r3, r3, #1
 8002516:	431a      	orrs	r2, r3
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	699b      	ldr	r3, [r3, #24]
 800251c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002520:	431a      	orrs	r2, r3
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	69db      	ldr	r3, [r3, #28]
 8002526:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800252a:	431a      	orrs	r2, r3
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6a1b      	ldr	r3, [r3, #32]
 8002530:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002534:	ea42 0103 	orr.w	r1, r2, r3
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800253c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	430a      	orrs	r2, r1
 8002546:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	699b      	ldr	r3, [r3, #24]
 800254c:	0c1b      	lsrs	r3, r3, #16
 800254e:	f003 0104 	and.w	r1, r3, #4
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002556:	f003 0210 	and.w	r2, r3, #16
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	430a      	orrs	r2, r1
 8002560:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	69da      	ldr	r2, [r3, #28]
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002570:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	2200      	movs	r2, #0
 8002576:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2201      	movs	r2, #1
 800257c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002580:	2300      	movs	r3, #0
}
 8002582:	4618      	mov	r0, r3
 8002584:	3708      	adds	r7, #8
 8002586:	46bd      	mov	sp, r7
 8002588:	bd80      	pop	{r7, pc}

0800258a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800258a:	b580      	push	{r7, lr}
 800258c:	b088      	sub	sp, #32
 800258e:	af00      	add	r7, sp, #0
 8002590:	60f8      	str	r0, [r7, #12]
 8002592:	60b9      	str	r1, [r7, #8]
 8002594:	603b      	str	r3, [r7, #0]
 8002596:	4613      	mov	r3, r2
 8002598:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800259a:	2300      	movs	r3, #0
 800259c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80025a4:	2b01      	cmp	r3, #1
 80025a6:	d101      	bne.n	80025ac <HAL_SPI_Transmit+0x22>
 80025a8:	2302      	movs	r3, #2
 80025aa:	e126      	b.n	80027fa <HAL_SPI_Transmit+0x270>
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	2201      	movs	r2, #1
 80025b0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80025b4:	f7fe ff50 	bl	8001458 <HAL_GetTick>
 80025b8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80025ba:	88fb      	ldrh	r3, [r7, #6]
 80025bc:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80025c4:	b2db      	uxtb	r3, r3
 80025c6:	2b01      	cmp	r3, #1
 80025c8:	d002      	beq.n	80025d0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80025ca:	2302      	movs	r3, #2
 80025cc:	77fb      	strb	r3, [r7, #31]
    goto error;
 80025ce:	e10b      	b.n	80027e8 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80025d0:	68bb      	ldr	r3, [r7, #8]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d002      	beq.n	80025dc <HAL_SPI_Transmit+0x52>
 80025d6:	88fb      	ldrh	r3, [r7, #6]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d102      	bne.n	80025e2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80025dc:	2301      	movs	r3, #1
 80025de:	77fb      	strb	r3, [r7, #31]
    goto error;
 80025e0:	e102      	b.n	80027e8 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	2203      	movs	r2, #3
 80025e6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	2200      	movs	r2, #0
 80025ee:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	68ba      	ldr	r2, [r7, #8]
 80025f4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	88fa      	ldrh	r2, [r7, #6]
 80025fa:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	88fa      	ldrh	r2, [r7, #6]
 8002600:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	2200      	movs	r2, #0
 8002606:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	2200      	movs	r2, #0
 800260c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	2200      	movs	r2, #0
 8002612:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	2200      	movs	r2, #0
 8002618:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	2200      	movs	r2, #0
 800261e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	689b      	ldr	r3, [r3, #8]
 8002624:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002628:	d10f      	bne.n	800264a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	681a      	ldr	r2, [r3, #0]
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002638:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	681a      	ldr	r2, [r3, #0]
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002648:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002654:	2b40      	cmp	r3, #64	; 0x40
 8002656:	d007      	beq.n	8002668 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	681a      	ldr	r2, [r3, #0]
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002666:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	68db      	ldr	r3, [r3, #12]
 800266c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002670:	d14b      	bne.n	800270a <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	685b      	ldr	r3, [r3, #4]
 8002676:	2b00      	cmp	r3, #0
 8002678:	d002      	beq.n	8002680 <HAL_SPI_Transmit+0xf6>
 800267a:	8afb      	ldrh	r3, [r7, #22]
 800267c:	2b01      	cmp	r3, #1
 800267e:	d13e      	bne.n	80026fe <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002684:	881a      	ldrh	r2, [r3, #0]
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002690:	1c9a      	adds	r2, r3, #2
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800269a:	b29b      	uxth	r3, r3
 800269c:	3b01      	subs	r3, #1
 800269e:	b29a      	uxth	r2, r3
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80026a4:	e02b      	b.n	80026fe <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	689b      	ldr	r3, [r3, #8]
 80026ac:	f003 0302 	and.w	r3, r3, #2
 80026b0:	2b02      	cmp	r3, #2
 80026b2:	d112      	bne.n	80026da <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026b8:	881a      	ldrh	r2, [r3, #0]
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026c4:	1c9a      	adds	r2, r3, #2
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80026ce:	b29b      	uxth	r3, r3
 80026d0:	3b01      	subs	r3, #1
 80026d2:	b29a      	uxth	r2, r3
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	86da      	strh	r2, [r3, #54]	; 0x36
 80026d8:	e011      	b.n	80026fe <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80026da:	f7fe febd 	bl	8001458 <HAL_GetTick>
 80026de:	4602      	mov	r2, r0
 80026e0:	69bb      	ldr	r3, [r7, #24]
 80026e2:	1ad3      	subs	r3, r2, r3
 80026e4:	683a      	ldr	r2, [r7, #0]
 80026e6:	429a      	cmp	r2, r3
 80026e8:	d803      	bhi.n	80026f2 <HAL_SPI_Transmit+0x168>
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026f0:	d102      	bne.n	80026f8 <HAL_SPI_Transmit+0x16e>
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d102      	bne.n	80026fe <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80026f8:	2303      	movs	r3, #3
 80026fa:	77fb      	strb	r3, [r7, #31]
          goto error;
 80026fc:	e074      	b.n	80027e8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002702:	b29b      	uxth	r3, r3
 8002704:	2b00      	cmp	r3, #0
 8002706:	d1ce      	bne.n	80026a6 <HAL_SPI_Transmit+0x11c>
 8002708:	e04c      	b.n	80027a4 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	685b      	ldr	r3, [r3, #4]
 800270e:	2b00      	cmp	r3, #0
 8002710:	d002      	beq.n	8002718 <HAL_SPI_Transmit+0x18e>
 8002712:	8afb      	ldrh	r3, [r7, #22]
 8002714:	2b01      	cmp	r3, #1
 8002716:	d140      	bne.n	800279a <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	330c      	adds	r3, #12
 8002722:	7812      	ldrb	r2, [r2, #0]
 8002724:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800272a:	1c5a      	adds	r2, r3, #1
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002734:	b29b      	uxth	r3, r3
 8002736:	3b01      	subs	r3, #1
 8002738:	b29a      	uxth	r2, r3
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800273e:	e02c      	b.n	800279a <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	689b      	ldr	r3, [r3, #8]
 8002746:	f003 0302 	and.w	r3, r3, #2
 800274a:	2b02      	cmp	r3, #2
 800274c:	d113      	bne.n	8002776 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	330c      	adds	r3, #12
 8002758:	7812      	ldrb	r2, [r2, #0]
 800275a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002760:	1c5a      	adds	r2, r3, #1
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800276a:	b29b      	uxth	r3, r3
 800276c:	3b01      	subs	r3, #1
 800276e:	b29a      	uxth	r2, r3
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	86da      	strh	r2, [r3, #54]	; 0x36
 8002774:	e011      	b.n	800279a <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002776:	f7fe fe6f 	bl	8001458 <HAL_GetTick>
 800277a:	4602      	mov	r2, r0
 800277c:	69bb      	ldr	r3, [r7, #24]
 800277e:	1ad3      	subs	r3, r2, r3
 8002780:	683a      	ldr	r2, [r7, #0]
 8002782:	429a      	cmp	r2, r3
 8002784:	d803      	bhi.n	800278e <HAL_SPI_Transmit+0x204>
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	f1b3 3fff 	cmp.w	r3, #4294967295
 800278c:	d102      	bne.n	8002794 <HAL_SPI_Transmit+0x20a>
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	2b00      	cmp	r3, #0
 8002792:	d102      	bne.n	800279a <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8002794:	2303      	movs	r3, #3
 8002796:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002798:	e026      	b.n	80027e8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800279e:	b29b      	uxth	r3, r3
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d1cd      	bne.n	8002740 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80027a4:	69ba      	ldr	r2, [r7, #24]
 80027a6:	6839      	ldr	r1, [r7, #0]
 80027a8:	68f8      	ldr	r0, [r7, #12]
 80027aa:	f000 fbcb 	bl	8002f44 <SPI_EndRxTxTransaction>
 80027ae:	4603      	mov	r3, r0
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d002      	beq.n	80027ba <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	2220      	movs	r2, #32
 80027b8:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	689b      	ldr	r3, [r3, #8]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d10a      	bne.n	80027d8 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80027c2:	2300      	movs	r3, #0
 80027c4:	613b      	str	r3, [r7, #16]
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	68db      	ldr	r3, [r3, #12]
 80027cc:	613b      	str	r3, [r7, #16]
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	689b      	ldr	r3, [r3, #8]
 80027d4:	613b      	str	r3, [r7, #16]
 80027d6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d002      	beq.n	80027e6 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80027e0:	2301      	movs	r3, #1
 80027e2:	77fb      	strb	r3, [r7, #31]
 80027e4:	e000      	b.n	80027e8 <HAL_SPI_Transmit+0x25e>
  }

error:
 80027e6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	2201      	movs	r2, #1
 80027ec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	2200      	movs	r2, #0
 80027f4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80027f8:	7ffb      	ldrb	r3, [r7, #31]
}
 80027fa:	4618      	mov	r0, r3
 80027fc:	3720      	adds	r7, #32
 80027fe:	46bd      	mov	sp, r7
 8002800:	bd80      	pop	{r7, pc}

08002802 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002802:	b580      	push	{r7, lr}
 8002804:	b088      	sub	sp, #32
 8002806:	af02      	add	r7, sp, #8
 8002808:	60f8      	str	r0, [r7, #12]
 800280a:	60b9      	str	r1, [r7, #8]
 800280c:	603b      	str	r3, [r7, #0]
 800280e:	4613      	mov	r3, r2
 8002810:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002812:	2300      	movs	r3, #0
 8002814:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	685b      	ldr	r3, [r3, #4]
 800281a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800281e:	d112      	bne.n	8002846 <HAL_SPI_Receive+0x44>
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	689b      	ldr	r3, [r3, #8]
 8002824:	2b00      	cmp	r3, #0
 8002826:	d10e      	bne.n	8002846 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	2204      	movs	r2, #4
 800282c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002830:	88fa      	ldrh	r2, [r7, #6]
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	9300      	str	r3, [sp, #0]
 8002836:	4613      	mov	r3, r2
 8002838:	68ba      	ldr	r2, [r7, #8]
 800283a:	68b9      	ldr	r1, [r7, #8]
 800283c:	68f8      	ldr	r0, [r7, #12]
 800283e:	f000 f8f1 	bl	8002a24 <HAL_SPI_TransmitReceive>
 8002842:	4603      	mov	r3, r0
 8002844:	e0ea      	b.n	8002a1c <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800284c:	2b01      	cmp	r3, #1
 800284e:	d101      	bne.n	8002854 <HAL_SPI_Receive+0x52>
 8002850:	2302      	movs	r3, #2
 8002852:	e0e3      	b.n	8002a1c <HAL_SPI_Receive+0x21a>
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	2201      	movs	r2, #1
 8002858:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800285c:	f7fe fdfc 	bl	8001458 <HAL_GetTick>
 8002860:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002868:	b2db      	uxtb	r3, r3
 800286a:	2b01      	cmp	r3, #1
 800286c:	d002      	beq.n	8002874 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800286e:	2302      	movs	r3, #2
 8002870:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002872:	e0ca      	b.n	8002a0a <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8002874:	68bb      	ldr	r3, [r7, #8]
 8002876:	2b00      	cmp	r3, #0
 8002878:	d002      	beq.n	8002880 <HAL_SPI_Receive+0x7e>
 800287a:	88fb      	ldrh	r3, [r7, #6]
 800287c:	2b00      	cmp	r3, #0
 800287e:	d102      	bne.n	8002886 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8002880:	2301      	movs	r3, #1
 8002882:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002884:	e0c1      	b.n	8002a0a <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	2204      	movs	r2, #4
 800288a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	2200      	movs	r2, #0
 8002892:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	68ba      	ldr	r2, [r7, #8]
 8002898:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	88fa      	ldrh	r2, [r7, #6]
 800289e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	88fa      	ldrh	r2, [r7, #6]
 80028a4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	2200      	movs	r2, #0
 80028aa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	2200      	movs	r2, #0
 80028b0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	2200      	movs	r2, #0
 80028b6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	2200      	movs	r2, #0
 80028bc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	2200      	movs	r2, #0
 80028c2:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	689b      	ldr	r3, [r3, #8]
 80028c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80028cc:	d10f      	bne.n	80028ee <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	681a      	ldr	r2, [r3, #0]
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80028dc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	681a      	ldr	r2, [r3, #0]
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80028ec:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028f8:	2b40      	cmp	r3, #64	; 0x40
 80028fa:	d007      	beq.n	800290c <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	681a      	ldr	r2, [r3, #0]
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800290a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	68db      	ldr	r3, [r3, #12]
 8002910:	2b00      	cmp	r3, #0
 8002912:	d162      	bne.n	80029da <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002914:	e02e      	b.n	8002974 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	689b      	ldr	r3, [r3, #8]
 800291c:	f003 0301 	and.w	r3, r3, #1
 8002920:	2b01      	cmp	r3, #1
 8002922:	d115      	bne.n	8002950 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f103 020c 	add.w	r2, r3, #12
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002930:	7812      	ldrb	r2, [r2, #0]
 8002932:	b2d2      	uxtb	r2, r2
 8002934:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800293a:	1c5a      	adds	r2, r3, #1
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002944:	b29b      	uxth	r3, r3
 8002946:	3b01      	subs	r3, #1
 8002948:	b29a      	uxth	r2, r3
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800294e:	e011      	b.n	8002974 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002950:	f7fe fd82 	bl	8001458 <HAL_GetTick>
 8002954:	4602      	mov	r2, r0
 8002956:	693b      	ldr	r3, [r7, #16]
 8002958:	1ad3      	subs	r3, r2, r3
 800295a:	683a      	ldr	r2, [r7, #0]
 800295c:	429a      	cmp	r2, r3
 800295e:	d803      	bhi.n	8002968 <HAL_SPI_Receive+0x166>
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002966:	d102      	bne.n	800296e <HAL_SPI_Receive+0x16c>
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	2b00      	cmp	r3, #0
 800296c:	d102      	bne.n	8002974 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 800296e:	2303      	movs	r3, #3
 8002970:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002972:	e04a      	b.n	8002a0a <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002978:	b29b      	uxth	r3, r3
 800297a:	2b00      	cmp	r3, #0
 800297c:	d1cb      	bne.n	8002916 <HAL_SPI_Receive+0x114>
 800297e:	e031      	b.n	80029e4 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	689b      	ldr	r3, [r3, #8]
 8002986:	f003 0301 	and.w	r3, r3, #1
 800298a:	2b01      	cmp	r3, #1
 800298c:	d113      	bne.n	80029b6 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	68da      	ldr	r2, [r3, #12]
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002998:	b292      	uxth	r2, r2
 800299a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029a0:	1c9a      	adds	r2, r3, #2
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80029aa:	b29b      	uxth	r3, r3
 80029ac:	3b01      	subs	r3, #1
 80029ae:	b29a      	uxth	r2, r3
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80029b4:	e011      	b.n	80029da <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80029b6:	f7fe fd4f 	bl	8001458 <HAL_GetTick>
 80029ba:	4602      	mov	r2, r0
 80029bc:	693b      	ldr	r3, [r7, #16]
 80029be:	1ad3      	subs	r3, r2, r3
 80029c0:	683a      	ldr	r2, [r7, #0]
 80029c2:	429a      	cmp	r2, r3
 80029c4:	d803      	bhi.n	80029ce <HAL_SPI_Receive+0x1cc>
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029cc:	d102      	bne.n	80029d4 <HAL_SPI_Receive+0x1d2>
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d102      	bne.n	80029da <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 80029d4:	2303      	movs	r3, #3
 80029d6:	75fb      	strb	r3, [r7, #23]
          goto error;
 80029d8:	e017      	b.n	8002a0a <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80029de:	b29b      	uxth	r3, r3
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d1cd      	bne.n	8002980 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80029e4:	693a      	ldr	r2, [r7, #16]
 80029e6:	6839      	ldr	r1, [r7, #0]
 80029e8:	68f8      	ldr	r0, [r7, #12]
 80029ea:	f000 fa45 	bl	8002e78 <SPI_EndRxTransaction>
 80029ee:	4603      	mov	r3, r0
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d002      	beq.n	80029fa <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	2220      	movs	r2, #32
 80029f8:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d002      	beq.n	8002a08 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8002a02:	2301      	movs	r3, #1
 8002a04:	75fb      	strb	r3, [r7, #23]
 8002a06:	e000      	b.n	8002a0a <HAL_SPI_Receive+0x208>
  }

error :
 8002a08:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	2201      	movs	r2, #1
 8002a0e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	2200      	movs	r2, #0
 8002a16:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002a1a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	3718      	adds	r7, #24
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bd80      	pop	{r7, pc}

08002a24 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b08c      	sub	sp, #48	; 0x30
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	60f8      	str	r0, [r7, #12]
 8002a2c:	60b9      	str	r1, [r7, #8]
 8002a2e:	607a      	str	r2, [r7, #4]
 8002a30:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002a32:	2301      	movs	r3, #1
 8002a34:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002a36:	2300      	movs	r3, #0
 8002a38:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002a42:	2b01      	cmp	r3, #1
 8002a44:	d101      	bne.n	8002a4a <HAL_SPI_TransmitReceive+0x26>
 8002a46:	2302      	movs	r3, #2
 8002a48:	e18a      	b.n	8002d60 <HAL_SPI_TransmitReceive+0x33c>
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	2201      	movs	r2, #1
 8002a4e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002a52:	f7fe fd01 	bl	8001458 <HAL_GetTick>
 8002a56:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002a5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002a68:	887b      	ldrh	r3, [r7, #2]
 8002a6a:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002a6c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002a70:	2b01      	cmp	r3, #1
 8002a72:	d00f      	beq.n	8002a94 <HAL_SPI_TransmitReceive+0x70>
 8002a74:	69fb      	ldr	r3, [r7, #28]
 8002a76:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002a7a:	d107      	bne.n	8002a8c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	689b      	ldr	r3, [r3, #8]
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d103      	bne.n	8002a8c <HAL_SPI_TransmitReceive+0x68>
 8002a84:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002a88:	2b04      	cmp	r3, #4
 8002a8a:	d003      	beq.n	8002a94 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8002a8c:	2302      	movs	r3, #2
 8002a8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002a92:	e15b      	b.n	8002d4c <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002a94:	68bb      	ldr	r3, [r7, #8]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d005      	beq.n	8002aa6 <HAL_SPI_TransmitReceive+0x82>
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d002      	beq.n	8002aa6 <HAL_SPI_TransmitReceive+0x82>
 8002aa0:	887b      	ldrh	r3, [r7, #2]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d103      	bne.n	8002aae <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002aac:	e14e      	b.n	8002d4c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002ab4:	b2db      	uxtb	r3, r3
 8002ab6:	2b04      	cmp	r3, #4
 8002ab8:	d003      	beq.n	8002ac2 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	2205      	movs	r2, #5
 8002abe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	687a      	ldr	r2, [r7, #4]
 8002acc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	887a      	ldrh	r2, [r7, #2]
 8002ad2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	887a      	ldrh	r2, [r7, #2]
 8002ad8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	68ba      	ldr	r2, [r7, #8]
 8002ade:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	887a      	ldrh	r2, [r7, #2]
 8002ae4:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	887a      	ldrh	r2, [r7, #2]
 8002aea:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	2200      	movs	r2, #0
 8002af0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	2200      	movs	r2, #0
 8002af6:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b02:	2b40      	cmp	r3, #64	; 0x40
 8002b04:	d007      	beq.n	8002b16 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	681a      	ldr	r2, [r3, #0]
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002b14:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	68db      	ldr	r3, [r3, #12]
 8002b1a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002b1e:	d178      	bne.n	8002c12 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	685b      	ldr	r3, [r3, #4]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d002      	beq.n	8002b2e <HAL_SPI_TransmitReceive+0x10a>
 8002b28:	8b7b      	ldrh	r3, [r7, #26]
 8002b2a:	2b01      	cmp	r3, #1
 8002b2c:	d166      	bne.n	8002bfc <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b32:	881a      	ldrh	r2, [r3, #0]
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b3e:	1c9a      	adds	r2, r3, #2
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b48:	b29b      	uxth	r3, r3
 8002b4a:	3b01      	subs	r3, #1
 8002b4c:	b29a      	uxth	r2, r3
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002b52:	e053      	b.n	8002bfc <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	689b      	ldr	r3, [r3, #8]
 8002b5a:	f003 0302 	and.w	r3, r3, #2
 8002b5e:	2b02      	cmp	r3, #2
 8002b60:	d11b      	bne.n	8002b9a <HAL_SPI_TransmitReceive+0x176>
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b66:	b29b      	uxth	r3, r3
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d016      	beq.n	8002b9a <HAL_SPI_TransmitReceive+0x176>
 8002b6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b6e:	2b01      	cmp	r3, #1
 8002b70:	d113      	bne.n	8002b9a <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b76:	881a      	ldrh	r2, [r3, #0]
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b82:	1c9a      	adds	r2, r3, #2
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b8c:	b29b      	uxth	r3, r3
 8002b8e:	3b01      	subs	r3, #1
 8002b90:	b29a      	uxth	r2, r3
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002b96:	2300      	movs	r3, #0
 8002b98:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	689b      	ldr	r3, [r3, #8]
 8002ba0:	f003 0301 	and.w	r3, r3, #1
 8002ba4:	2b01      	cmp	r3, #1
 8002ba6:	d119      	bne.n	8002bdc <HAL_SPI_TransmitReceive+0x1b8>
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002bac:	b29b      	uxth	r3, r3
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d014      	beq.n	8002bdc <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	68da      	ldr	r2, [r3, #12]
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bbc:	b292      	uxth	r2, r2
 8002bbe:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bc4:	1c9a      	adds	r2, r3, #2
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002bce:	b29b      	uxth	r3, r3
 8002bd0:	3b01      	subs	r3, #1
 8002bd2:	b29a      	uxth	r2, r3
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002bd8:	2301      	movs	r3, #1
 8002bda:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002bdc:	f7fe fc3c 	bl	8001458 <HAL_GetTick>
 8002be0:	4602      	mov	r2, r0
 8002be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002be4:	1ad3      	subs	r3, r2, r3
 8002be6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002be8:	429a      	cmp	r2, r3
 8002bea:	d807      	bhi.n	8002bfc <HAL_SPI_TransmitReceive+0x1d8>
 8002bec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bf2:	d003      	beq.n	8002bfc <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8002bf4:	2303      	movs	r3, #3
 8002bf6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002bfa:	e0a7      	b.n	8002d4c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c00:	b29b      	uxth	r3, r3
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d1a6      	bne.n	8002b54 <HAL_SPI_TransmitReceive+0x130>
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c0a:	b29b      	uxth	r3, r3
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d1a1      	bne.n	8002b54 <HAL_SPI_TransmitReceive+0x130>
 8002c10:	e07c      	b.n	8002d0c <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	685b      	ldr	r3, [r3, #4]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d002      	beq.n	8002c20 <HAL_SPI_TransmitReceive+0x1fc>
 8002c1a:	8b7b      	ldrh	r3, [r7, #26]
 8002c1c:	2b01      	cmp	r3, #1
 8002c1e:	d16b      	bne.n	8002cf8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	330c      	adds	r3, #12
 8002c2a:	7812      	ldrb	r2, [r2, #0]
 8002c2c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c32:	1c5a      	adds	r2, r3, #1
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c3c:	b29b      	uxth	r3, r3
 8002c3e:	3b01      	subs	r3, #1
 8002c40:	b29a      	uxth	r2, r3
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002c46:	e057      	b.n	8002cf8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	689b      	ldr	r3, [r3, #8]
 8002c4e:	f003 0302 	and.w	r3, r3, #2
 8002c52:	2b02      	cmp	r3, #2
 8002c54:	d11c      	bne.n	8002c90 <HAL_SPI_TransmitReceive+0x26c>
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c5a:	b29b      	uxth	r3, r3
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d017      	beq.n	8002c90 <HAL_SPI_TransmitReceive+0x26c>
 8002c60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c62:	2b01      	cmp	r3, #1
 8002c64:	d114      	bne.n	8002c90 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	330c      	adds	r3, #12
 8002c70:	7812      	ldrb	r2, [r2, #0]
 8002c72:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c78:	1c5a      	adds	r2, r3, #1
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c82:	b29b      	uxth	r3, r3
 8002c84:	3b01      	subs	r3, #1
 8002c86:	b29a      	uxth	r2, r3
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	689b      	ldr	r3, [r3, #8]
 8002c96:	f003 0301 	and.w	r3, r3, #1
 8002c9a:	2b01      	cmp	r3, #1
 8002c9c:	d119      	bne.n	8002cd2 <HAL_SPI_TransmitReceive+0x2ae>
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ca2:	b29b      	uxth	r3, r3
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d014      	beq.n	8002cd2 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	68da      	ldr	r2, [r3, #12]
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cb2:	b2d2      	uxtb	r2, r2
 8002cb4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cba:	1c5a      	adds	r2, r3, #1
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002cc4:	b29b      	uxth	r3, r3
 8002cc6:	3b01      	subs	r3, #1
 8002cc8:	b29a      	uxth	r2, r3
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002cce:	2301      	movs	r3, #1
 8002cd0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002cd2:	f7fe fbc1 	bl	8001458 <HAL_GetTick>
 8002cd6:	4602      	mov	r2, r0
 8002cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cda:	1ad3      	subs	r3, r2, r3
 8002cdc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002cde:	429a      	cmp	r2, r3
 8002ce0:	d803      	bhi.n	8002cea <HAL_SPI_TransmitReceive+0x2c6>
 8002ce2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ce4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ce8:	d102      	bne.n	8002cf0 <HAL_SPI_TransmitReceive+0x2cc>
 8002cea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d103      	bne.n	8002cf8 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8002cf0:	2303      	movs	r3, #3
 8002cf2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002cf6:	e029      	b.n	8002d4c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002cfc:	b29b      	uxth	r3, r3
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d1a2      	bne.n	8002c48 <HAL_SPI_TransmitReceive+0x224>
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d06:	b29b      	uxth	r3, r3
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d19d      	bne.n	8002c48 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002d0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d0e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002d10:	68f8      	ldr	r0, [r7, #12]
 8002d12:	f000 f917 	bl	8002f44 <SPI_EndRxTxTransaction>
 8002d16:	4603      	mov	r3, r0
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d006      	beq.n	8002d2a <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8002d1c:	2301      	movs	r3, #1
 8002d1e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	2220      	movs	r2, #32
 8002d26:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8002d28:	e010      	b.n	8002d4c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	689b      	ldr	r3, [r3, #8]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d10b      	bne.n	8002d4a <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002d32:	2300      	movs	r3, #0
 8002d34:	617b      	str	r3, [r7, #20]
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	68db      	ldr	r3, [r3, #12]
 8002d3c:	617b      	str	r3, [r7, #20]
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	689b      	ldr	r3, [r3, #8]
 8002d44:	617b      	str	r3, [r7, #20]
 8002d46:	697b      	ldr	r3, [r7, #20]
 8002d48:	e000      	b.n	8002d4c <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8002d4a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	2201      	movs	r2, #1
 8002d50:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	2200      	movs	r2, #0
 8002d58:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002d5c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8002d60:	4618      	mov	r0, r3
 8002d62:	3730      	adds	r7, #48	; 0x30
 8002d64:	46bd      	mov	sp, r7
 8002d66:	bd80      	pop	{r7, pc}

08002d68 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b088      	sub	sp, #32
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	60f8      	str	r0, [r7, #12]
 8002d70:	60b9      	str	r1, [r7, #8]
 8002d72:	603b      	str	r3, [r7, #0]
 8002d74:	4613      	mov	r3, r2
 8002d76:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002d78:	f7fe fb6e 	bl	8001458 <HAL_GetTick>
 8002d7c:	4602      	mov	r2, r0
 8002d7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d80:	1a9b      	subs	r3, r3, r2
 8002d82:	683a      	ldr	r2, [r7, #0]
 8002d84:	4413      	add	r3, r2
 8002d86:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002d88:	f7fe fb66 	bl	8001458 <HAL_GetTick>
 8002d8c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002d8e:	4b39      	ldr	r3, [pc, #228]	; (8002e74 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	015b      	lsls	r3, r3, #5
 8002d94:	0d1b      	lsrs	r3, r3, #20
 8002d96:	69fa      	ldr	r2, [r7, #28]
 8002d98:	fb02 f303 	mul.w	r3, r2, r3
 8002d9c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002d9e:	e054      	b.n	8002e4a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002da6:	d050      	beq.n	8002e4a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002da8:	f7fe fb56 	bl	8001458 <HAL_GetTick>
 8002dac:	4602      	mov	r2, r0
 8002dae:	69bb      	ldr	r3, [r7, #24]
 8002db0:	1ad3      	subs	r3, r2, r3
 8002db2:	69fa      	ldr	r2, [r7, #28]
 8002db4:	429a      	cmp	r2, r3
 8002db6:	d902      	bls.n	8002dbe <SPI_WaitFlagStateUntilTimeout+0x56>
 8002db8:	69fb      	ldr	r3, [r7, #28]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d13d      	bne.n	8002e3a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	685a      	ldr	r2, [r3, #4]
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002dcc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	685b      	ldr	r3, [r3, #4]
 8002dd2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002dd6:	d111      	bne.n	8002dfc <SPI_WaitFlagStateUntilTimeout+0x94>
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	689b      	ldr	r3, [r3, #8]
 8002ddc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002de0:	d004      	beq.n	8002dec <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	689b      	ldr	r3, [r3, #8]
 8002de6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002dea:	d107      	bne.n	8002dfc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	681a      	ldr	r2, [r3, #0]
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002dfa:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e00:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e04:	d10f      	bne.n	8002e26 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	681a      	ldr	r2, [r3, #0]
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002e14:	601a      	str	r2, [r3, #0]
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	681a      	ldr	r2, [r3, #0]
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002e24:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	2201      	movs	r2, #1
 8002e2a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	2200      	movs	r2, #0
 8002e32:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002e36:	2303      	movs	r3, #3
 8002e38:	e017      	b.n	8002e6a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8002e3a:	697b      	ldr	r3, [r7, #20]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d101      	bne.n	8002e44 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002e40:	2300      	movs	r3, #0
 8002e42:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002e44:	697b      	ldr	r3, [r7, #20]
 8002e46:	3b01      	subs	r3, #1
 8002e48:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	689a      	ldr	r2, [r3, #8]
 8002e50:	68bb      	ldr	r3, [r7, #8]
 8002e52:	4013      	ands	r3, r2
 8002e54:	68ba      	ldr	r2, [r7, #8]
 8002e56:	429a      	cmp	r2, r3
 8002e58:	bf0c      	ite	eq
 8002e5a:	2301      	moveq	r3, #1
 8002e5c:	2300      	movne	r3, #0
 8002e5e:	b2db      	uxtb	r3, r3
 8002e60:	461a      	mov	r2, r3
 8002e62:	79fb      	ldrb	r3, [r7, #7]
 8002e64:	429a      	cmp	r2, r3
 8002e66:	d19b      	bne.n	8002da0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002e68:	2300      	movs	r3, #0
}
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	3720      	adds	r7, #32
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	bd80      	pop	{r7, pc}
 8002e72:	bf00      	nop
 8002e74:	20000000 	.word	0x20000000

08002e78 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b086      	sub	sp, #24
 8002e7c:	af02      	add	r7, sp, #8
 8002e7e:	60f8      	str	r0, [r7, #12]
 8002e80:	60b9      	str	r1, [r7, #8]
 8002e82:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002e8c:	d111      	bne.n	8002eb2 <SPI_EndRxTransaction+0x3a>
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	689b      	ldr	r3, [r3, #8]
 8002e92:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e96:	d004      	beq.n	8002ea2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	689b      	ldr	r3, [r3, #8]
 8002e9c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ea0:	d107      	bne.n	8002eb2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	681a      	ldr	r2, [r3, #0]
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002eb0:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	685b      	ldr	r3, [r3, #4]
 8002eb6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002eba:	d12a      	bne.n	8002f12 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	689b      	ldr	r3, [r3, #8]
 8002ec0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ec4:	d012      	beq.n	8002eec <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	9300      	str	r3, [sp, #0]
 8002eca:	68bb      	ldr	r3, [r7, #8]
 8002ecc:	2200      	movs	r2, #0
 8002ece:	2180      	movs	r1, #128	; 0x80
 8002ed0:	68f8      	ldr	r0, [r7, #12]
 8002ed2:	f7ff ff49 	bl	8002d68 <SPI_WaitFlagStateUntilTimeout>
 8002ed6:	4603      	mov	r3, r0
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d02d      	beq.n	8002f38 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ee0:	f043 0220 	orr.w	r2, r3, #32
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8002ee8:	2303      	movs	r3, #3
 8002eea:	e026      	b.n	8002f3a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	9300      	str	r3, [sp, #0]
 8002ef0:	68bb      	ldr	r3, [r7, #8]
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	2101      	movs	r1, #1
 8002ef6:	68f8      	ldr	r0, [r7, #12]
 8002ef8:	f7ff ff36 	bl	8002d68 <SPI_WaitFlagStateUntilTimeout>
 8002efc:	4603      	mov	r3, r0
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d01a      	beq.n	8002f38 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f06:	f043 0220 	orr.w	r2, r3, #32
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8002f0e:	2303      	movs	r3, #3
 8002f10:	e013      	b.n	8002f3a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	9300      	str	r3, [sp, #0]
 8002f16:	68bb      	ldr	r3, [r7, #8]
 8002f18:	2200      	movs	r2, #0
 8002f1a:	2101      	movs	r1, #1
 8002f1c:	68f8      	ldr	r0, [r7, #12]
 8002f1e:	f7ff ff23 	bl	8002d68 <SPI_WaitFlagStateUntilTimeout>
 8002f22:	4603      	mov	r3, r0
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d007      	beq.n	8002f38 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f2c:	f043 0220 	orr.w	r2, r3, #32
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002f34:	2303      	movs	r3, #3
 8002f36:	e000      	b.n	8002f3a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8002f38:	2300      	movs	r3, #0
}
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	3710      	adds	r7, #16
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	bd80      	pop	{r7, pc}
	...

08002f44 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b088      	sub	sp, #32
 8002f48:	af02      	add	r7, sp, #8
 8002f4a:	60f8      	str	r0, [r7, #12]
 8002f4c:	60b9      	str	r1, [r7, #8]
 8002f4e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002f50:	4b1b      	ldr	r3, [pc, #108]	; (8002fc0 <SPI_EndRxTxTransaction+0x7c>)
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4a1b      	ldr	r2, [pc, #108]	; (8002fc4 <SPI_EndRxTxTransaction+0x80>)
 8002f56:	fba2 2303 	umull	r2, r3, r2, r3
 8002f5a:	0d5b      	lsrs	r3, r3, #21
 8002f5c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002f60:	fb02 f303 	mul.w	r3, r2, r3
 8002f64:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	685b      	ldr	r3, [r3, #4]
 8002f6a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002f6e:	d112      	bne.n	8002f96 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	9300      	str	r3, [sp, #0]
 8002f74:	68bb      	ldr	r3, [r7, #8]
 8002f76:	2200      	movs	r2, #0
 8002f78:	2180      	movs	r1, #128	; 0x80
 8002f7a:	68f8      	ldr	r0, [r7, #12]
 8002f7c:	f7ff fef4 	bl	8002d68 <SPI_WaitFlagStateUntilTimeout>
 8002f80:	4603      	mov	r3, r0
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d016      	beq.n	8002fb4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f8a:	f043 0220 	orr.w	r2, r3, #32
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002f92:	2303      	movs	r3, #3
 8002f94:	e00f      	b.n	8002fb6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002f96:	697b      	ldr	r3, [r7, #20]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d00a      	beq.n	8002fb2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8002f9c:	697b      	ldr	r3, [r7, #20]
 8002f9e:	3b01      	subs	r3, #1
 8002fa0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	689b      	ldr	r3, [r3, #8]
 8002fa8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fac:	2b80      	cmp	r3, #128	; 0x80
 8002fae:	d0f2      	beq.n	8002f96 <SPI_EndRxTxTransaction+0x52>
 8002fb0:	e000      	b.n	8002fb4 <SPI_EndRxTxTransaction+0x70>
        break;
 8002fb2:	bf00      	nop
  }

  return HAL_OK;
 8002fb4:	2300      	movs	r3, #0
}
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	3718      	adds	r7, #24
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	bd80      	pop	{r7, pc}
 8002fbe:	bf00      	nop
 8002fc0:	20000000 	.word	0x20000000
 8002fc4:	165e9f81 	.word	0x165e9f81

08002fc8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b082      	sub	sp, #8
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d101      	bne.n	8002fda <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	e041      	b.n	800305e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fe0:	b2db      	uxtb	r3, r3
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d106      	bne.n	8002ff4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	2200      	movs	r2, #0
 8002fea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002fee:	6878      	ldr	r0, [r7, #4]
 8002ff0:	f7fe f8a4 	bl	800113c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2202      	movs	r2, #2
 8002ff8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681a      	ldr	r2, [r3, #0]
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	3304      	adds	r3, #4
 8003004:	4619      	mov	r1, r3
 8003006:	4610      	mov	r0, r2
 8003008:	f000 f95a 	bl	80032c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2201      	movs	r2, #1
 8003010:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2201      	movs	r2, #1
 8003018:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2201      	movs	r2, #1
 8003020:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2201      	movs	r2, #1
 8003028:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2201      	movs	r2, #1
 8003030:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2201      	movs	r2, #1
 8003038:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2201      	movs	r2, #1
 8003040:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2201      	movs	r2, #1
 8003048:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2201      	movs	r2, #1
 8003050:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2201      	movs	r2, #1
 8003058:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800305c:	2300      	movs	r3, #0
}
 800305e:	4618      	mov	r0, r3
 8003060:	3708      	adds	r7, #8
 8003062:	46bd      	mov	sp, r7
 8003064:	bd80      	pop	{r7, pc}
	...

08003068 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003068:	b480      	push	{r7}
 800306a:	b085      	sub	sp, #20
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003076:	b2db      	uxtb	r3, r3
 8003078:	2b01      	cmp	r3, #1
 800307a:	d001      	beq.n	8003080 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800307c:	2301      	movs	r3, #1
 800307e:	e046      	b.n	800310e <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2202      	movs	r2, #2
 8003084:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4a23      	ldr	r2, [pc, #140]	; (800311c <HAL_TIM_Base_Start+0xb4>)
 800308e:	4293      	cmp	r3, r2
 8003090:	d022      	beq.n	80030d8 <HAL_TIM_Base_Start+0x70>
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800309a:	d01d      	beq.n	80030d8 <HAL_TIM_Base_Start+0x70>
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	4a1f      	ldr	r2, [pc, #124]	; (8003120 <HAL_TIM_Base_Start+0xb8>)
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d018      	beq.n	80030d8 <HAL_TIM_Base_Start+0x70>
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	4a1e      	ldr	r2, [pc, #120]	; (8003124 <HAL_TIM_Base_Start+0xbc>)
 80030ac:	4293      	cmp	r3, r2
 80030ae:	d013      	beq.n	80030d8 <HAL_TIM_Base_Start+0x70>
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4a1c      	ldr	r2, [pc, #112]	; (8003128 <HAL_TIM_Base_Start+0xc0>)
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d00e      	beq.n	80030d8 <HAL_TIM_Base_Start+0x70>
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	4a1b      	ldr	r2, [pc, #108]	; (800312c <HAL_TIM_Base_Start+0xc4>)
 80030c0:	4293      	cmp	r3, r2
 80030c2:	d009      	beq.n	80030d8 <HAL_TIM_Base_Start+0x70>
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4a19      	ldr	r2, [pc, #100]	; (8003130 <HAL_TIM_Base_Start+0xc8>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d004      	beq.n	80030d8 <HAL_TIM_Base_Start+0x70>
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4a18      	ldr	r2, [pc, #96]	; (8003134 <HAL_TIM_Base_Start+0xcc>)
 80030d4:	4293      	cmp	r3, r2
 80030d6:	d111      	bne.n	80030fc <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	689b      	ldr	r3, [r3, #8]
 80030de:	f003 0307 	and.w	r3, r3, #7
 80030e2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	2b06      	cmp	r3, #6
 80030e8:	d010      	beq.n	800310c <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	681a      	ldr	r2, [r3, #0]
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f042 0201 	orr.w	r2, r2, #1
 80030f8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030fa:	e007      	b.n	800310c <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	681a      	ldr	r2, [r3, #0]
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f042 0201 	orr.w	r2, r2, #1
 800310a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800310c:	2300      	movs	r3, #0
}
 800310e:	4618      	mov	r0, r3
 8003110:	3714      	adds	r7, #20
 8003112:	46bd      	mov	sp, r7
 8003114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003118:	4770      	bx	lr
 800311a:	bf00      	nop
 800311c:	40010000 	.word	0x40010000
 8003120:	40000400 	.word	0x40000400
 8003124:	40000800 	.word	0x40000800
 8003128:	40000c00 	.word	0x40000c00
 800312c:	40010400 	.word	0x40010400
 8003130:	40014000 	.word	0x40014000
 8003134:	40001800 	.word	0x40001800

08003138 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b084      	sub	sp, #16
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
 8003140:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003148:	2b01      	cmp	r3, #1
 800314a:	d101      	bne.n	8003150 <HAL_TIM_ConfigClockSource+0x18>
 800314c:	2302      	movs	r3, #2
 800314e:	e0b3      	b.n	80032b8 <HAL_TIM_ConfigClockSource+0x180>
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2201      	movs	r2, #1
 8003154:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2202      	movs	r2, #2
 800315c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	689b      	ldr	r3, [r3, #8]
 8003166:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800316e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003176:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	68fa      	ldr	r2, [r7, #12]
 800317e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003188:	d03e      	beq.n	8003208 <HAL_TIM_ConfigClockSource+0xd0>
 800318a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800318e:	f200 8087 	bhi.w	80032a0 <HAL_TIM_ConfigClockSource+0x168>
 8003192:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003196:	f000 8085 	beq.w	80032a4 <HAL_TIM_ConfigClockSource+0x16c>
 800319a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800319e:	d87f      	bhi.n	80032a0 <HAL_TIM_ConfigClockSource+0x168>
 80031a0:	2b70      	cmp	r3, #112	; 0x70
 80031a2:	d01a      	beq.n	80031da <HAL_TIM_ConfigClockSource+0xa2>
 80031a4:	2b70      	cmp	r3, #112	; 0x70
 80031a6:	d87b      	bhi.n	80032a0 <HAL_TIM_ConfigClockSource+0x168>
 80031a8:	2b60      	cmp	r3, #96	; 0x60
 80031aa:	d050      	beq.n	800324e <HAL_TIM_ConfigClockSource+0x116>
 80031ac:	2b60      	cmp	r3, #96	; 0x60
 80031ae:	d877      	bhi.n	80032a0 <HAL_TIM_ConfigClockSource+0x168>
 80031b0:	2b50      	cmp	r3, #80	; 0x50
 80031b2:	d03c      	beq.n	800322e <HAL_TIM_ConfigClockSource+0xf6>
 80031b4:	2b50      	cmp	r3, #80	; 0x50
 80031b6:	d873      	bhi.n	80032a0 <HAL_TIM_ConfigClockSource+0x168>
 80031b8:	2b40      	cmp	r3, #64	; 0x40
 80031ba:	d058      	beq.n	800326e <HAL_TIM_ConfigClockSource+0x136>
 80031bc:	2b40      	cmp	r3, #64	; 0x40
 80031be:	d86f      	bhi.n	80032a0 <HAL_TIM_ConfigClockSource+0x168>
 80031c0:	2b30      	cmp	r3, #48	; 0x30
 80031c2:	d064      	beq.n	800328e <HAL_TIM_ConfigClockSource+0x156>
 80031c4:	2b30      	cmp	r3, #48	; 0x30
 80031c6:	d86b      	bhi.n	80032a0 <HAL_TIM_ConfigClockSource+0x168>
 80031c8:	2b20      	cmp	r3, #32
 80031ca:	d060      	beq.n	800328e <HAL_TIM_ConfigClockSource+0x156>
 80031cc:	2b20      	cmp	r3, #32
 80031ce:	d867      	bhi.n	80032a0 <HAL_TIM_ConfigClockSource+0x168>
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d05c      	beq.n	800328e <HAL_TIM_ConfigClockSource+0x156>
 80031d4:	2b10      	cmp	r3, #16
 80031d6:	d05a      	beq.n	800328e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80031d8:	e062      	b.n	80032a0 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6818      	ldr	r0, [r3, #0]
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	6899      	ldr	r1, [r3, #8]
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	685a      	ldr	r2, [r3, #4]
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	68db      	ldr	r3, [r3, #12]
 80031ea:	f000 f983 	bl	80034f4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	689b      	ldr	r3, [r3, #8]
 80031f4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80031fc:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	68fa      	ldr	r2, [r7, #12]
 8003204:	609a      	str	r2, [r3, #8]
      break;
 8003206:	e04e      	b.n	80032a6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6818      	ldr	r0, [r3, #0]
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	6899      	ldr	r1, [r3, #8]
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	685a      	ldr	r2, [r3, #4]
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	68db      	ldr	r3, [r3, #12]
 8003218:	f000 f96c 	bl	80034f4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	689a      	ldr	r2, [r3, #8]
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800322a:	609a      	str	r2, [r3, #8]
      break;
 800322c:	e03b      	b.n	80032a6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6818      	ldr	r0, [r3, #0]
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	6859      	ldr	r1, [r3, #4]
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	68db      	ldr	r3, [r3, #12]
 800323a:	461a      	mov	r2, r3
 800323c:	f000 f8e0 	bl	8003400 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	2150      	movs	r1, #80	; 0x50
 8003246:	4618      	mov	r0, r3
 8003248:	f000 f939 	bl	80034be <TIM_ITRx_SetConfig>
      break;
 800324c:	e02b      	b.n	80032a6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6818      	ldr	r0, [r3, #0]
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	6859      	ldr	r1, [r3, #4]
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	68db      	ldr	r3, [r3, #12]
 800325a:	461a      	mov	r2, r3
 800325c:	f000 f8ff 	bl	800345e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	2160      	movs	r1, #96	; 0x60
 8003266:	4618      	mov	r0, r3
 8003268:	f000 f929 	bl	80034be <TIM_ITRx_SetConfig>
      break;
 800326c:	e01b      	b.n	80032a6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6818      	ldr	r0, [r3, #0]
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	6859      	ldr	r1, [r3, #4]
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	68db      	ldr	r3, [r3, #12]
 800327a:	461a      	mov	r2, r3
 800327c:	f000 f8c0 	bl	8003400 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	2140      	movs	r1, #64	; 0x40
 8003286:	4618      	mov	r0, r3
 8003288:	f000 f919 	bl	80034be <TIM_ITRx_SetConfig>
      break;
 800328c:	e00b      	b.n	80032a6 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681a      	ldr	r2, [r3, #0]
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	4619      	mov	r1, r3
 8003298:	4610      	mov	r0, r2
 800329a:	f000 f910 	bl	80034be <TIM_ITRx_SetConfig>
        break;
 800329e:	e002      	b.n	80032a6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80032a0:	bf00      	nop
 80032a2:	e000      	b.n	80032a6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80032a4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	2201      	movs	r2, #1
 80032aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	2200      	movs	r2, #0
 80032b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80032b6:	2300      	movs	r3, #0
}
 80032b8:	4618      	mov	r0, r3
 80032ba:	3710      	adds	r7, #16
 80032bc:	46bd      	mov	sp, r7
 80032be:	bd80      	pop	{r7, pc}

080032c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80032c0:	b480      	push	{r7}
 80032c2:	b085      	sub	sp, #20
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
 80032c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	4a40      	ldr	r2, [pc, #256]	; (80033d4 <TIM_Base_SetConfig+0x114>)
 80032d4:	4293      	cmp	r3, r2
 80032d6:	d013      	beq.n	8003300 <TIM_Base_SetConfig+0x40>
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032de:	d00f      	beq.n	8003300 <TIM_Base_SetConfig+0x40>
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	4a3d      	ldr	r2, [pc, #244]	; (80033d8 <TIM_Base_SetConfig+0x118>)
 80032e4:	4293      	cmp	r3, r2
 80032e6:	d00b      	beq.n	8003300 <TIM_Base_SetConfig+0x40>
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	4a3c      	ldr	r2, [pc, #240]	; (80033dc <TIM_Base_SetConfig+0x11c>)
 80032ec:	4293      	cmp	r3, r2
 80032ee:	d007      	beq.n	8003300 <TIM_Base_SetConfig+0x40>
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	4a3b      	ldr	r2, [pc, #236]	; (80033e0 <TIM_Base_SetConfig+0x120>)
 80032f4:	4293      	cmp	r3, r2
 80032f6:	d003      	beq.n	8003300 <TIM_Base_SetConfig+0x40>
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	4a3a      	ldr	r2, [pc, #232]	; (80033e4 <TIM_Base_SetConfig+0x124>)
 80032fc:	4293      	cmp	r3, r2
 80032fe:	d108      	bne.n	8003312 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003306:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	68fa      	ldr	r2, [r7, #12]
 800330e:	4313      	orrs	r3, r2
 8003310:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	4a2f      	ldr	r2, [pc, #188]	; (80033d4 <TIM_Base_SetConfig+0x114>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d02b      	beq.n	8003372 <TIM_Base_SetConfig+0xb2>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003320:	d027      	beq.n	8003372 <TIM_Base_SetConfig+0xb2>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	4a2c      	ldr	r2, [pc, #176]	; (80033d8 <TIM_Base_SetConfig+0x118>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d023      	beq.n	8003372 <TIM_Base_SetConfig+0xb2>
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	4a2b      	ldr	r2, [pc, #172]	; (80033dc <TIM_Base_SetConfig+0x11c>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d01f      	beq.n	8003372 <TIM_Base_SetConfig+0xb2>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	4a2a      	ldr	r2, [pc, #168]	; (80033e0 <TIM_Base_SetConfig+0x120>)
 8003336:	4293      	cmp	r3, r2
 8003338:	d01b      	beq.n	8003372 <TIM_Base_SetConfig+0xb2>
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	4a29      	ldr	r2, [pc, #164]	; (80033e4 <TIM_Base_SetConfig+0x124>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d017      	beq.n	8003372 <TIM_Base_SetConfig+0xb2>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	4a28      	ldr	r2, [pc, #160]	; (80033e8 <TIM_Base_SetConfig+0x128>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d013      	beq.n	8003372 <TIM_Base_SetConfig+0xb2>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	4a27      	ldr	r2, [pc, #156]	; (80033ec <TIM_Base_SetConfig+0x12c>)
 800334e:	4293      	cmp	r3, r2
 8003350:	d00f      	beq.n	8003372 <TIM_Base_SetConfig+0xb2>
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	4a26      	ldr	r2, [pc, #152]	; (80033f0 <TIM_Base_SetConfig+0x130>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d00b      	beq.n	8003372 <TIM_Base_SetConfig+0xb2>
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	4a25      	ldr	r2, [pc, #148]	; (80033f4 <TIM_Base_SetConfig+0x134>)
 800335e:	4293      	cmp	r3, r2
 8003360:	d007      	beq.n	8003372 <TIM_Base_SetConfig+0xb2>
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	4a24      	ldr	r2, [pc, #144]	; (80033f8 <TIM_Base_SetConfig+0x138>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d003      	beq.n	8003372 <TIM_Base_SetConfig+0xb2>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	4a23      	ldr	r2, [pc, #140]	; (80033fc <TIM_Base_SetConfig+0x13c>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d108      	bne.n	8003384 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003378:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	68db      	ldr	r3, [r3, #12]
 800337e:	68fa      	ldr	r2, [r7, #12]
 8003380:	4313      	orrs	r3, r2
 8003382:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	695b      	ldr	r3, [r3, #20]
 800338e:	4313      	orrs	r3, r2
 8003390:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	68fa      	ldr	r2, [r7, #12]
 8003396:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	689a      	ldr	r2, [r3, #8]
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	681a      	ldr	r2, [r3, #0]
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	4a0a      	ldr	r2, [pc, #40]	; (80033d4 <TIM_Base_SetConfig+0x114>)
 80033ac:	4293      	cmp	r3, r2
 80033ae:	d003      	beq.n	80033b8 <TIM_Base_SetConfig+0xf8>
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	4a0c      	ldr	r2, [pc, #48]	; (80033e4 <TIM_Base_SetConfig+0x124>)
 80033b4:	4293      	cmp	r3, r2
 80033b6:	d103      	bne.n	80033c0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	691a      	ldr	r2, [r3, #16]
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2201      	movs	r2, #1
 80033c4:	615a      	str	r2, [r3, #20]
}
 80033c6:	bf00      	nop
 80033c8:	3714      	adds	r7, #20
 80033ca:	46bd      	mov	sp, r7
 80033cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d0:	4770      	bx	lr
 80033d2:	bf00      	nop
 80033d4:	40010000 	.word	0x40010000
 80033d8:	40000400 	.word	0x40000400
 80033dc:	40000800 	.word	0x40000800
 80033e0:	40000c00 	.word	0x40000c00
 80033e4:	40010400 	.word	0x40010400
 80033e8:	40014000 	.word	0x40014000
 80033ec:	40014400 	.word	0x40014400
 80033f0:	40014800 	.word	0x40014800
 80033f4:	40001800 	.word	0x40001800
 80033f8:	40001c00 	.word	0x40001c00
 80033fc:	40002000 	.word	0x40002000

08003400 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003400:	b480      	push	{r7}
 8003402:	b087      	sub	sp, #28
 8003404:	af00      	add	r7, sp, #0
 8003406:	60f8      	str	r0, [r7, #12]
 8003408:	60b9      	str	r1, [r7, #8]
 800340a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	6a1b      	ldr	r3, [r3, #32]
 8003410:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	6a1b      	ldr	r3, [r3, #32]
 8003416:	f023 0201 	bic.w	r2, r3, #1
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	699b      	ldr	r3, [r3, #24]
 8003422:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003424:	693b      	ldr	r3, [r7, #16]
 8003426:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800342a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	011b      	lsls	r3, r3, #4
 8003430:	693a      	ldr	r2, [r7, #16]
 8003432:	4313      	orrs	r3, r2
 8003434:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003436:	697b      	ldr	r3, [r7, #20]
 8003438:	f023 030a 	bic.w	r3, r3, #10
 800343c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800343e:	697a      	ldr	r2, [r7, #20]
 8003440:	68bb      	ldr	r3, [r7, #8]
 8003442:	4313      	orrs	r3, r2
 8003444:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	693a      	ldr	r2, [r7, #16]
 800344a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	697a      	ldr	r2, [r7, #20]
 8003450:	621a      	str	r2, [r3, #32]
}
 8003452:	bf00      	nop
 8003454:	371c      	adds	r7, #28
 8003456:	46bd      	mov	sp, r7
 8003458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345c:	4770      	bx	lr

0800345e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800345e:	b480      	push	{r7}
 8003460:	b087      	sub	sp, #28
 8003462:	af00      	add	r7, sp, #0
 8003464:	60f8      	str	r0, [r7, #12]
 8003466:	60b9      	str	r1, [r7, #8]
 8003468:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	6a1b      	ldr	r3, [r3, #32]
 800346e:	f023 0210 	bic.w	r2, r3, #16
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	699b      	ldr	r3, [r3, #24]
 800347a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	6a1b      	ldr	r3, [r3, #32]
 8003480:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003482:	697b      	ldr	r3, [r7, #20]
 8003484:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003488:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	031b      	lsls	r3, r3, #12
 800348e:	697a      	ldr	r2, [r7, #20]
 8003490:	4313      	orrs	r3, r2
 8003492:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003494:	693b      	ldr	r3, [r7, #16]
 8003496:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800349a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800349c:	68bb      	ldr	r3, [r7, #8]
 800349e:	011b      	lsls	r3, r3, #4
 80034a0:	693a      	ldr	r2, [r7, #16]
 80034a2:	4313      	orrs	r3, r2
 80034a4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	697a      	ldr	r2, [r7, #20]
 80034aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	693a      	ldr	r2, [r7, #16]
 80034b0:	621a      	str	r2, [r3, #32]
}
 80034b2:	bf00      	nop
 80034b4:	371c      	adds	r7, #28
 80034b6:	46bd      	mov	sp, r7
 80034b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034bc:	4770      	bx	lr

080034be <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80034be:	b480      	push	{r7}
 80034c0:	b085      	sub	sp, #20
 80034c2:	af00      	add	r7, sp, #0
 80034c4:	6078      	str	r0, [r7, #4]
 80034c6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	689b      	ldr	r3, [r3, #8]
 80034cc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034d4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80034d6:	683a      	ldr	r2, [r7, #0]
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	4313      	orrs	r3, r2
 80034dc:	f043 0307 	orr.w	r3, r3, #7
 80034e0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	68fa      	ldr	r2, [r7, #12]
 80034e6:	609a      	str	r2, [r3, #8]
}
 80034e8:	bf00      	nop
 80034ea:	3714      	adds	r7, #20
 80034ec:	46bd      	mov	sp, r7
 80034ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f2:	4770      	bx	lr

080034f4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80034f4:	b480      	push	{r7}
 80034f6:	b087      	sub	sp, #28
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	60f8      	str	r0, [r7, #12]
 80034fc:	60b9      	str	r1, [r7, #8]
 80034fe:	607a      	str	r2, [r7, #4]
 8003500:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	689b      	ldr	r3, [r3, #8]
 8003506:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003508:	697b      	ldr	r3, [r7, #20]
 800350a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800350e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	021a      	lsls	r2, r3, #8
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	431a      	orrs	r2, r3
 8003518:	68bb      	ldr	r3, [r7, #8]
 800351a:	4313      	orrs	r3, r2
 800351c:	697a      	ldr	r2, [r7, #20]
 800351e:	4313      	orrs	r3, r2
 8003520:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	697a      	ldr	r2, [r7, #20]
 8003526:	609a      	str	r2, [r3, #8]
}
 8003528:	bf00      	nop
 800352a:	371c      	adds	r7, #28
 800352c:	46bd      	mov	sp, r7
 800352e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003532:	4770      	bx	lr

08003534 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003534:	b480      	push	{r7}
 8003536:	b085      	sub	sp, #20
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
 800353c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003544:	2b01      	cmp	r3, #1
 8003546:	d101      	bne.n	800354c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003548:	2302      	movs	r3, #2
 800354a:	e05a      	b.n	8003602 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2201      	movs	r2, #1
 8003550:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2202      	movs	r2, #2
 8003558:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	685b      	ldr	r3, [r3, #4]
 8003562:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	689b      	ldr	r3, [r3, #8]
 800356a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003572:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	68fa      	ldr	r2, [r7, #12]
 800357a:	4313      	orrs	r3, r2
 800357c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	68fa      	ldr	r2, [r7, #12]
 8003584:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	4a21      	ldr	r2, [pc, #132]	; (8003610 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800358c:	4293      	cmp	r3, r2
 800358e:	d022      	beq.n	80035d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003598:	d01d      	beq.n	80035d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4a1d      	ldr	r2, [pc, #116]	; (8003614 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d018      	beq.n	80035d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4a1b      	ldr	r2, [pc, #108]	; (8003618 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d013      	beq.n	80035d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	4a1a      	ldr	r2, [pc, #104]	; (800361c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80035b4:	4293      	cmp	r3, r2
 80035b6:	d00e      	beq.n	80035d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4a18      	ldr	r2, [pc, #96]	; (8003620 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80035be:	4293      	cmp	r3, r2
 80035c0:	d009      	beq.n	80035d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4a17      	ldr	r2, [pc, #92]	; (8003624 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80035c8:	4293      	cmp	r3, r2
 80035ca:	d004      	beq.n	80035d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	4a15      	ldr	r2, [pc, #84]	; (8003628 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d10c      	bne.n	80035f0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80035d6:	68bb      	ldr	r3, [r7, #8]
 80035d8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80035dc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	685b      	ldr	r3, [r3, #4]
 80035e2:	68ba      	ldr	r2, [r7, #8]
 80035e4:	4313      	orrs	r3, r2
 80035e6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	68ba      	ldr	r2, [r7, #8]
 80035ee:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2201      	movs	r2, #1
 80035f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2200      	movs	r2, #0
 80035fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003600:	2300      	movs	r3, #0
}
 8003602:	4618      	mov	r0, r3
 8003604:	3714      	adds	r7, #20
 8003606:	46bd      	mov	sp, r7
 8003608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360c:	4770      	bx	lr
 800360e:	bf00      	nop
 8003610:	40010000 	.word	0x40010000
 8003614:	40000400 	.word	0x40000400
 8003618:	40000800 	.word	0x40000800
 800361c:	40000c00 	.word	0x40000c00
 8003620:	40010400 	.word	0x40010400
 8003624:	40014000 	.word	0x40014000
 8003628:	40001800 	.word	0x40001800

0800362c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b082      	sub	sp, #8
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2b00      	cmp	r3, #0
 8003638:	d101      	bne.n	800363e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800363a:	2301      	movs	r3, #1
 800363c:	e03f      	b.n	80036be <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003644:	b2db      	uxtb	r3, r3
 8003646:	2b00      	cmp	r3, #0
 8003648:	d106      	bne.n	8003658 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2200      	movs	r2, #0
 800364e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003652:	6878      	ldr	r0, [r7, #4]
 8003654:	f7fd fd92 	bl	800117c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2224      	movs	r2, #36	; 0x24
 800365c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	68da      	ldr	r2, [r3, #12]
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800366e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003670:	6878      	ldr	r0, [r7, #4]
 8003672:	f000 f905 	bl	8003880 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	691a      	ldr	r2, [r3, #16]
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003684:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	695a      	ldr	r2, [r3, #20]
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003694:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	68da      	ldr	r2, [r3, #12]
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80036a4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	2200      	movs	r2, #0
 80036aa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2220      	movs	r2, #32
 80036b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2220      	movs	r2, #32
 80036b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80036bc:	2300      	movs	r3, #0
}
 80036be:	4618      	mov	r0, r3
 80036c0:	3708      	adds	r7, #8
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bd80      	pop	{r7, pc}

080036c6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80036c6:	b580      	push	{r7, lr}
 80036c8:	b08a      	sub	sp, #40	; 0x28
 80036ca:	af02      	add	r7, sp, #8
 80036cc:	60f8      	str	r0, [r7, #12]
 80036ce:	60b9      	str	r1, [r7, #8]
 80036d0:	603b      	str	r3, [r7, #0]
 80036d2:	4613      	mov	r3, r2
 80036d4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80036d6:	2300      	movs	r3, #0
 80036d8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036e0:	b2db      	uxtb	r3, r3
 80036e2:	2b20      	cmp	r3, #32
 80036e4:	d17c      	bne.n	80037e0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80036e6:	68bb      	ldr	r3, [r7, #8]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d002      	beq.n	80036f2 <HAL_UART_Transmit+0x2c>
 80036ec:	88fb      	ldrh	r3, [r7, #6]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d101      	bne.n	80036f6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80036f2:	2301      	movs	r3, #1
 80036f4:	e075      	b.n	80037e2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036fc:	2b01      	cmp	r3, #1
 80036fe:	d101      	bne.n	8003704 <HAL_UART_Transmit+0x3e>
 8003700:	2302      	movs	r3, #2
 8003702:	e06e      	b.n	80037e2 <HAL_UART_Transmit+0x11c>
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	2201      	movs	r2, #1
 8003708:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	2200      	movs	r2, #0
 8003710:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	2221      	movs	r2, #33	; 0x21
 8003716:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800371a:	f7fd fe9d 	bl	8001458 <HAL_GetTick>
 800371e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	88fa      	ldrh	r2, [r7, #6]
 8003724:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	88fa      	ldrh	r2, [r7, #6]
 800372a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	689b      	ldr	r3, [r3, #8]
 8003730:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003734:	d108      	bne.n	8003748 <HAL_UART_Transmit+0x82>
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	691b      	ldr	r3, [r3, #16]
 800373a:	2b00      	cmp	r3, #0
 800373c:	d104      	bne.n	8003748 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800373e:	2300      	movs	r3, #0
 8003740:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003742:	68bb      	ldr	r3, [r7, #8]
 8003744:	61bb      	str	r3, [r7, #24]
 8003746:	e003      	b.n	8003750 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003748:	68bb      	ldr	r3, [r7, #8]
 800374a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800374c:	2300      	movs	r3, #0
 800374e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	2200      	movs	r2, #0
 8003754:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003758:	e02a      	b.n	80037b0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	9300      	str	r3, [sp, #0]
 800375e:	697b      	ldr	r3, [r7, #20]
 8003760:	2200      	movs	r2, #0
 8003762:	2180      	movs	r1, #128	; 0x80
 8003764:	68f8      	ldr	r0, [r7, #12]
 8003766:	f000 f840 	bl	80037ea <UART_WaitOnFlagUntilTimeout>
 800376a:	4603      	mov	r3, r0
 800376c:	2b00      	cmp	r3, #0
 800376e:	d001      	beq.n	8003774 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003770:	2303      	movs	r3, #3
 8003772:	e036      	b.n	80037e2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003774:	69fb      	ldr	r3, [r7, #28]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d10b      	bne.n	8003792 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800377a:	69bb      	ldr	r3, [r7, #24]
 800377c:	881b      	ldrh	r3, [r3, #0]
 800377e:	461a      	mov	r2, r3
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003788:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800378a:	69bb      	ldr	r3, [r7, #24]
 800378c:	3302      	adds	r3, #2
 800378e:	61bb      	str	r3, [r7, #24]
 8003790:	e007      	b.n	80037a2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003792:	69fb      	ldr	r3, [r7, #28]
 8003794:	781a      	ldrb	r2, [r3, #0]
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800379c:	69fb      	ldr	r3, [r7, #28]
 800379e:	3301      	adds	r3, #1
 80037a0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80037a6:	b29b      	uxth	r3, r3
 80037a8:	3b01      	subs	r3, #1
 80037aa:	b29a      	uxth	r2, r3
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80037b4:	b29b      	uxth	r3, r3
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d1cf      	bne.n	800375a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	9300      	str	r3, [sp, #0]
 80037be:	697b      	ldr	r3, [r7, #20]
 80037c0:	2200      	movs	r2, #0
 80037c2:	2140      	movs	r1, #64	; 0x40
 80037c4:	68f8      	ldr	r0, [r7, #12]
 80037c6:	f000 f810 	bl	80037ea <UART_WaitOnFlagUntilTimeout>
 80037ca:	4603      	mov	r3, r0
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d001      	beq.n	80037d4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80037d0:	2303      	movs	r3, #3
 80037d2:	e006      	b.n	80037e2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	2220      	movs	r2, #32
 80037d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80037dc:	2300      	movs	r3, #0
 80037de:	e000      	b.n	80037e2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80037e0:	2302      	movs	r3, #2
  }
}
 80037e2:	4618      	mov	r0, r3
 80037e4:	3720      	adds	r7, #32
 80037e6:	46bd      	mov	sp, r7
 80037e8:	bd80      	pop	{r7, pc}

080037ea <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80037ea:	b580      	push	{r7, lr}
 80037ec:	b084      	sub	sp, #16
 80037ee:	af00      	add	r7, sp, #0
 80037f0:	60f8      	str	r0, [r7, #12]
 80037f2:	60b9      	str	r1, [r7, #8]
 80037f4:	603b      	str	r3, [r7, #0]
 80037f6:	4613      	mov	r3, r2
 80037f8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80037fa:	e02c      	b.n	8003856 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037fc:	69bb      	ldr	r3, [r7, #24]
 80037fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003802:	d028      	beq.n	8003856 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003804:	69bb      	ldr	r3, [r7, #24]
 8003806:	2b00      	cmp	r3, #0
 8003808:	d007      	beq.n	800381a <UART_WaitOnFlagUntilTimeout+0x30>
 800380a:	f7fd fe25 	bl	8001458 <HAL_GetTick>
 800380e:	4602      	mov	r2, r0
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	1ad3      	subs	r3, r2, r3
 8003814:	69ba      	ldr	r2, [r7, #24]
 8003816:	429a      	cmp	r2, r3
 8003818:	d21d      	bcs.n	8003856 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	68da      	ldr	r2, [r3, #12]
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003828:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	695a      	ldr	r2, [r3, #20]
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f022 0201 	bic.w	r2, r2, #1
 8003838:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	2220      	movs	r2, #32
 800383e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	2220      	movs	r2, #32
 8003846:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	2200      	movs	r2, #0
 800384e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003852:	2303      	movs	r3, #3
 8003854:	e00f      	b.n	8003876 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	681a      	ldr	r2, [r3, #0]
 800385c:	68bb      	ldr	r3, [r7, #8]
 800385e:	4013      	ands	r3, r2
 8003860:	68ba      	ldr	r2, [r7, #8]
 8003862:	429a      	cmp	r2, r3
 8003864:	bf0c      	ite	eq
 8003866:	2301      	moveq	r3, #1
 8003868:	2300      	movne	r3, #0
 800386a:	b2db      	uxtb	r3, r3
 800386c:	461a      	mov	r2, r3
 800386e:	79fb      	ldrb	r3, [r7, #7]
 8003870:	429a      	cmp	r2, r3
 8003872:	d0c3      	beq.n	80037fc <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003874:	2300      	movs	r3, #0
}
 8003876:	4618      	mov	r0, r3
 8003878:	3710      	adds	r7, #16
 800387a:	46bd      	mov	sp, r7
 800387c:	bd80      	pop	{r7, pc}
	...

08003880 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003880:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003884:	b09f      	sub	sp, #124	; 0x7c
 8003886:	af00      	add	r7, sp, #0
 8003888:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800388a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	691b      	ldr	r3, [r3, #16]
 8003890:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003894:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003896:	68d9      	ldr	r1, [r3, #12]
 8003898:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800389a:	681a      	ldr	r2, [r3, #0]
 800389c:	ea40 0301 	orr.w	r3, r0, r1
 80038a0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80038a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038a4:	689a      	ldr	r2, [r3, #8]
 80038a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038a8:	691b      	ldr	r3, [r3, #16]
 80038aa:	431a      	orrs	r2, r3
 80038ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038ae:	695b      	ldr	r3, [r3, #20]
 80038b0:	431a      	orrs	r2, r3
 80038b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038b4:	69db      	ldr	r3, [r3, #28]
 80038b6:	4313      	orrs	r3, r2
 80038b8:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80038ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	68db      	ldr	r3, [r3, #12]
 80038c0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80038c4:	f021 010c 	bic.w	r1, r1, #12
 80038c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038ca:	681a      	ldr	r2, [r3, #0]
 80038cc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80038ce:	430b      	orrs	r3, r1
 80038d0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80038d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	695b      	ldr	r3, [r3, #20]
 80038d8:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80038dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038de:	6999      	ldr	r1, [r3, #24]
 80038e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038e2:	681a      	ldr	r2, [r3, #0]
 80038e4:	ea40 0301 	orr.w	r3, r0, r1
 80038e8:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80038ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038ec:	681a      	ldr	r2, [r3, #0]
 80038ee:	4bc5      	ldr	r3, [pc, #788]	; (8003c04 <UART_SetConfig+0x384>)
 80038f0:	429a      	cmp	r2, r3
 80038f2:	d004      	beq.n	80038fe <UART_SetConfig+0x7e>
 80038f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038f6:	681a      	ldr	r2, [r3, #0]
 80038f8:	4bc3      	ldr	r3, [pc, #780]	; (8003c08 <UART_SetConfig+0x388>)
 80038fa:	429a      	cmp	r2, r3
 80038fc:	d103      	bne.n	8003906 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80038fe:	f7fe fda7 	bl	8002450 <HAL_RCC_GetPCLK2Freq>
 8003902:	6778      	str	r0, [r7, #116]	; 0x74
 8003904:	e002      	b.n	800390c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003906:	f7fe fd8f 	bl	8002428 <HAL_RCC_GetPCLK1Freq>
 800390a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800390c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800390e:	69db      	ldr	r3, [r3, #28]
 8003910:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003914:	f040 80b6 	bne.w	8003a84 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003918:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800391a:	461c      	mov	r4, r3
 800391c:	f04f 0500 	mov.w	r5, #0
 8003920:	4622      	mov	r2, r4
 8003922:	462b      	mov	r3, r5
 8003924:	1891      	adds	r1, r2, r2
 8003926:	6439      	str	r1, [r7, #64]	; 0x40
 8003928:	415b      	adcs	r3, r3
 800392a:	647b      	str	r3, [r7, #68]	; 0x44
 800392c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003930:	1912      	adds	r2, r2, r4
 8003932:	eb45 0303 	adc.w	r3, r5, r3
 8003936:	f04f 0000 	mov.w	r0, #0
 800393a:	f04f 0100 	mov.w	r1, #0
 800393e:	00d9      	lsls	r1, r3, #3
 8003940:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003944:	00d0      	lsls	r0, r2, #3
 8003946:	4602      	mov	r2, r0
 8003948:	460b      	mov	r3, r1
 800394a:	1911      	adds	r1, r2, r4
 800394c:	6639      	str	r1, [r7, #96]	; 0x60
 800394e:	416b      	adcs	r3, r5
 8003950:	667b      	str	r3, [r7, #100]	; 0x64
 8003952:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003954:	685b      	ldr	r3, [r3, #4]
 8003956:	461a      	mov	r2, r3
 8003958:	f04f 0300 	mov.w	r3, #0
 800395c:	1891      	adds	r1, r2, r2
 800395e:	63b9      	str	r1, [r7, #56]	; 0x38
 8003960:	415b      	adcs	r3, r3
 8003962:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003964:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003968:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800396c:	f7fc fc88 	bl	8000280 <__aeabi_uldivmod>
 8003970:	4602      	mov	r2, r0
 8003972:	460b      	mov	r3, r1
 8003974:	4ba5      	ldr	r3, [pc, #660]	; (8003c0c <UART_SetConfig+0x38c>)
 8003976:	fba3 2302 	umull	r2, r3, r3, r2
 800397a:	095b      	lsrs	r3, r3, #5
 800397c:	011e      	lsls	r6, r3, #4
 800397e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003980:	461c      	mov	r4, r3
 8003982:	f04f 0500 	mov.w	r5, #0
 8003986:	4622      	mov	r2, r4
 8003988:	462b      	mov	r3, r5
 800398a:	1891      	adds	r1, r2, r2
 800398c:	6339      	str	r1, [r7, #48]	; 0x30
 800398e:	415b      	adcs	r3, r3
 8003990:	637b      	str	r3, [r7, #52]	; 0x34
 8003992:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003996:	1912      	adds	r2, r2, r4
 8003998:	eb45 0303 	adc.w	r3, r5, r3
 800399c:	f04f 0000 	mov.w	r0, #0
 80039a0:	f04f 0100 	mov.w	r1, #0
 80039a4:	00d9      	lsls	r1, r3, #3
 80039a6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80039aa:	00d0      	lsls	r0, r2, #3
 80039ac:	4602      	mov	r2, r0
 80039ae:	460b      	mov	r3, r1
 80039b0:	1911      	adds	r1, r2, r4
 80039b2:	65b9      	str	r1, [r7, #88]	; 0x58
 80039b4:	416b      	adcs	r3, r5
 80039b6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80039b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039ba:	685b      	ldr	r3, [r3, #4]
 80039bc:	461a      	mov	r2, r3
 80039be:	f04f 0300 	mov.w	r3, #0
 80039c2:	1891      	adds	r1, r2, r2
 80039c4:	62b9      	str	r1, [r7, #40]	; 0x28
 80039c6:	415b      	adcs	r3, r3
 80039c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80039ca:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80039ce:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80039d2:	f7fc fc55 	bl	8000280 <__aeabi_uldivmod>
 80039d6:	4602      	mov	r2, r0
 80039d8:	460b      	mov	r3, r1
 80039da:	4b8c      	ldr	r3, [pc, #560]	; (8003c0c <UART_SetConfig+0x38c>)
 80039dc:	fba3 1302 	umull	r1, r3, r3, r2
 80039e0:	095b      	lsrs	r3, r3, #5
 80039e2:	2164      	movs	r1, #100	; 0x64
 80039e4:	fb01 f303 	mul.w	r3, r1, r3
 80039e8:	1ad3      	subs	r3, r2, r3
 80039ea:	00db      	lsls	r3, r3, #3
 80039ec:	3332      	adds	r3, #50	; 0x32
 80039ee:	4a87      	ldr	r2, [pc, #540]	; (8003c0c <UART_SetConfig+0x38c>)
 80039f0:	fba2 2303 	umull	r2, r3, r2, r3
 80039f4:	095b      	lsrs	r3, r3, #5
 80039f6:	005b      	lsls	r3, r3, #1
 80039f8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80039fc:	441e      	add	r6, r3
 80039fe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003a00:	4618      	mov	r0, r3
 8003a02:	f04f 0100 	mov.w	r1, #0
 8003a06:	4602      	mov	r2, r0
 8003a08:	460b      	mov	r3, r1
 8003a0a:	1894      	adds	r4, r2, r2
 8003a0c:	623c      	str	r4, [r7, #32]
 8003a0e:	415b      	adcs	r3, r3
 8003a10:	627b      	str	r3, [r7, #36]	; 0x24
 8003a12:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003a16:	1812      	adds	r2, r2, r0
 8003a18:	eb41 0303 	adc.w	r3, r1, r3
 8003a1c:	f04f 0400 	mov.w	r4, #0
 8003a20:	f04f 0500 	mov.w	r5, #0
 8003a24:	00dd      	lsls	r5, r3, #3
 8003a26:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003a2a:	00d4      	lsls	r4, r2, #3
 8003a2c:	4622      	mov	r2, r4
 8003a2e:	462b      	mov	r3, r5
 8003a30:	1814      	adds	r4, r2, r0
 8003a32:	653c      	str	r4, [r7, #80]	; 0x50
 8003a34:	414b      	adcs	r3, r1
 8003a36:	657b      	str	r3, [r7, #84]	; 0x54
 8003a38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a3a:	685b      	ldr	r3, [r3, #4]
 8003a3c:	461a      	mov	r2, r3
 8003a3e:	f04f 0300 	mov.w	r3, #0
 8003a42:	1891      	adds	r1, r2, r2
 8003a44:	61b9      	str	r1, [r7, #24]
 8003a46:	415b      	adcs	r3, r3
 8003a48:	61fb      	str	r3, [r7, #28]
 8003a4a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003a4e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8003a52:	f7fc fc15 	bl	8000280 <__aeabi_uldivmod>
 8003a56:	4602      	mov	r2, r0
 8003a58:	460b      	mov	r3, r1
 8003a5a:	4b6c      	ldr	r3, [pc, #432]	; (8003c0c <UART_SetConfig+0x38c>)
 8003a5c:	fba3 1302 	umull	r1, r3, r3, r2
 8003a60:	095b      	lsrs	r3, r3, #5
 8003a62:	2164      	movs	r1, #100	; 0x64
 8003a64:	fb01 f303 	mul.w	r3, r1, r3
 8003a68:	1ad3      	subs	r3, r2, r3
 8003a6a:	00db      	lsls	r3, r3, #3
 8003a6c:	3332      	adds	r3, #50	; 0x32
 8003a6e:	4a67      	ldr	r2, [pc, #412]	; (8003c0c <UART_SetConfig+0x38c>)
 8003a70:	fba2 2303 	umull	r2, r3, r2, r3
 8003a74:	095b      	lsrs	r3, r3, #5
 8003a76:	f003 0207 	and.w	r2, r3, #7
 8003a7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	4432      	add	r2, r6
 8003a80:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003a82:	e0b9      	b.n	8003bf8 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003a84:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003a86:	461c      	mov	r4, r3
 8003a88:	f04f 0500 	mov.w	r5, #0
 8003a8c:	4622      	mov	r2, r4
 8003a8e:	462b      	mov	r3, r5
 8003a90:	1891      	adds	r1, r2, r2
 8003a92:	6139      	str	r1, [r7, #16]
 8003a94:	415b      	adcs	r3, r3
 8003a96:	617b      	str	r3, [r7, #20]
 8003a98:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003a9c:	1912      	adds	r2, r2, r4
 8003a9e:	eb45 0303 	adc.w	r3, r5, r3
 8003aa2:	f04f 0000 	mov.w	r0, #0
 8003aa6:	f04f 0100 	mov.w	r1, #0
 8003aaa:	00d9      	lsls	r1, r3, #3
 8003aac:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003ab0:	00d0      	lsls	r0, r2, #3
 8003ab2:	4602      	mov	r2, r0
 8003ab4:	460b      	mov	r3, r1
 8003ab6:	eb12 0804 	adds.w	r8, r2, r4
 8003aba:	eb43 0905 	adc.w	r9, r3, r5
 8003abe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ac0:	685b      	ldr	r3, [r3, #4]
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	f04f 0100 	mov.w	r1, #0
 8003ac8:	f04f 0200 	mov.w	r2, #0
 8003acc:	f04f 0300 	mov.w	r3, #0
 8003ad0:	008b      	lsls	r3, r1, #2
 8003ad2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003ad6:	0082      	lsls	r2, r0, #2
 8003ad8:	4640      	mov	r0, r8
 8003ada:	4649      	mov	r1, r9
 8003adc:	f7fc fbd0 	bl	8000280 <__aeabi_uldivmod>
 8003ae0:	4602      	mov	r2, r0
 8003ae2:	460b      	mov	r3, r1
 8003ae4:	4b49      	ldr	r3, [pc, #292]	; (8003c0c <UART_SetConfig+0x38c>)
 8003ae6:	fba3 2302 	umull	r2, r3, r3, r2
 8003aea:	095b      	lsrs	r3, r3, #5
 8003aec:	011e      	lsls	r6, r3, #4
 8003aee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003af0:	4618      	mov	r0, r3
 8003af2:	f04f 0100 	mov.w	r1, #0
 8003af6:	4602      	mov	r2, r0
 8003af8:	460b      	mov	r3, r1
 8003afa:	1894      	adds	r4, r2, r2
 8003afc:	60bc      	str	r4, [r7, #8]
 8003afe:	415b      	adcs	r3, r3
 8003b00:	60fb      	str	r3, [r7, #12]
 8003b02:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003b06:	1812      	adds	r2, r2, r0
 8003b08:	eb41 0303 	adc.w	r3, r1, r3
 8003b0c:	f04f 0400 	mov.w	r4, #0
 8003b10:	f04f 0500 	mov.w	r5, #0
 8003b14:	00dd      	lsls	r5, r3, #3
 8003b16:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003b1a:	00d4      	lsls	r4, r2, #3
 8003b1c:	4622      	mov	r2, r4
 8003b1e:	462b      	mov	r3, r5
 8003b20:	1814      	adds	r4, r2, r0
 8003b22:	64bc      	str	r4, [r7, #72]	; 0x48
 8003b24:	414b      	adcs	r3, r1
 8003b26:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003b28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b2a:	685b      	ldr	r3, [r3, #4]
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	f04f 0100 	mov.w	r1, #0
 8003b32:	f04f 0200 	mov.w	r2, #0
 8003b36:	f04f 0300 	mov.w	r3, #0
 8003b3a:	008b      	lsls	r3, r1, #2
 8003b3c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003b40:	0082      	lsls	r2, r0, #2
 8003b42:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8003b46:	f7fc fb9b 	bl	8000280 <__aeabi_uldivmod>
 8003b4a:	4602      	mov	r2, r0
 8003b4c:	460b      	mov	r3, r1
 8003b4e:	4b2f      	ldr	r3, [pc, #188]	; (8003c0c <UART_SetConfig+0x38c>)
 8003b50:	fba3 1302 	umull	r1, r3, r3, r2
 8003b54:	095b      	lsrs	r3, r3, #5
 8003b56:	2164      	movs	r1, #100	; 0x64
 8003b58:	fb01 f303 	mul.w	r3, r1, r3
 8003b5c:	1ad3      	subs	r3, r2, r3
 8003b5e:	011b      	lsls	r3, r3, #4
 8003b60:	3332      	adds	r3, #50	; 0x32
 8003b62:	4a2a      	ldr	r2, [pc, #168]	; (8003c0c <UART_SetConfig+0x38c>)
 8003b64:	fba2 2303 	umull	r2, r3, r2, r3
 8003b68:	095b      	lsrs	r3, r3, #5
 8003b6a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003b6e:	441e      	add	r6, r3
 8003b70:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b72:	4618      	mov	r0, r3
 8003b74:	f04f 0100 	mov.w	r1, #0
 8003b78:	4602      	mov	r2, r0
 8003b7a:	460b      	mov	r3, r1
 8003b7c:	1894      	adds	r4, r2, r2
 8003b7e:	603c      	str	r4, [r7, #0]
 8003b80:	415b      	adcs	r3, r3
 8003b82:	607b      	str	r3, [r7, #4]
 8003b84:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003b88:	1812      	adds	r2, r2, r0
 8003b8a:	eb41 0303 	adc.w	r3, r1, r3
 8003b8e:	f04f 0400 	mov.w	r4, #0
 8003b92:	f04f 0500 	mov.w	r5, #0
 8003b96:	00dd      	lsls	r5, r3, #3
 8003b98:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003b9c:	00d4      	lsls	r4, r2, #3
 8003b9e:	4622      	mov	r2, r4
 8003ba0:	462b      	mov	r3, r5
 8003ba2:	eb12 0a00 	adds.w	sl, r2, r0
 8003ba6:	eb43 0b01 	adc.w	fp, r3, r1
 8003baa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003bac:	685b      	ldr	r3, [r3, #4]
 8003bae:	4618      	mov	r0, r3
 8003bb0:	f04f 0100 	mov.w	r1, #0
 8003bb4:	f04f 0200 	mov.w	r2, #0
 8003bb8:	f04f 0300 	mov.w	r3, #0
 8003bbc:	008b      	lsls	r3, r1, #2
 8003bbe:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003bc2:	0082      	lsls	r2, r0, #2
 8003bc4:	4650      	mov	r0, sl
 8003bc6:	4659      	mov	r1, fp
 8003bc8:	f7fc fb5a 	bl	8000280 <__aeabi_uldivmod>
 8003bcc:	4602      	mov	r2, r0
 8003bce:	460b      	mov	r3, r1
 8003bd0:	4b0e      	ldr	r3, [pc, #56]	; (8003c0c <UART_SetConfig+0x38c>)
 8003bd2:	fba3 1302 	umull	r1, r3, r3, r2
 8003bd6:	095b      	lsrs	r3, r3, #5
 8003bd8:	2164      	movs	r1, #100	; 0x64
 8003bda:	fb01 f303 	mul.w	r3, r1, r3
 8003bde:	1ad3      	subs	r3, r2, r3
 8003be0:	011b      	lsls	r3, r3, #4
 8003be2:	3332      	adds	r3, #50	; 0x32
 8003be4:	4a09      	ldr	r2, [pc, #36]	; (8003c0c <UART_SetConfig+0x38c>)
 8003be6:	fba2 2303 	umull	r2, r3, r2, r3
 8003bea:	095b      	lsrs	r3, r3, #5
 8003bec:	f003 020f 	and.w	r2, r3, #15
 8003bf0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	4432      	add	r2, r6
 8003bf6:	609a      	str	r2, [r3, #8]
}
 8003bf8:	bf00      	nop
 8003bfa:	377c      	adds	r7, #124	; 0x7c
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003c02:	bf00      	nop
 8003c04:	40011000 	.word	0x40011000
 8003c08:	40011400 	.word	0x40011400
 8003c0c:	51eb851f 	.word	0x51eb851f

08003c10 <__errno>:
 8003c10:	4b01      	ldr	r3, [pc, #4]	; (8003c18 <__errno+0x8>)
 8003c12:	6818      	ldr	r0, [r3, #0]
 8003c14:	4770      	bx	lr
 8003c16:	bf00      	nop
 8003c18:	2000000c 	.word	0x2000000c

08003c1c <__libc_init_array>:
 8003c1c:	b570      	push	{r4, r5, r6, lr}
 8003c1e:	4d0d      	ldr	r5, [pc, #52]	; (8003c54 <__libc_init_array+0x38>)
 8003c20:	4c0d      	ldr	r4, [pc, #52]	; (8003c58 <__libc_init_array+0x3c>)
 8003c22:	1b64      	subs	r4, r4, r5
 8003c24:	10a4      	asrs	r4, r4, #2
 8003c26:	2600      	movs	r6, #0
 8003c28:	42a6      	cmp	r6, r4
 8003c2a:	d109      	bne.n	8003c40 <__libc_init_array+0x24>
 8003c2c:	4d0b      	ldr	r5, [pc, #44]	; (8003c5c <__libc_init_array+0x40>)
 8003c2e:	4c0c      	ldr	r4, [pc, #48]	; (8003c60 <__libc_init_array+0x44>)
 8003c30:	f000 fc4e 	bl	80044d0 <_init>
 8003c34:	1b64      	subs	r4, r4, r5
 8003c36:	10a4      	asrs	r4, r4, #2
 8003c38:	2600      	movs	r6, #0
 8003c3a:	42a6      	cmp	r6, r4
 8003c3c:	d105      	bne.n	8003c4a <__libc_init_array+0x2e>
 8003c3e:	bd70      	pop	{r4, r5, r6, pc}
 8003c40:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c44:	4798      	blx	r3
 8003c46:	3601      	adds	r6, #1
 8003c48:	e7ee      	b.n	8003c28 <__libc_init_array+0xc>
 8003c4a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c4e:	4798      	blx	r3
 8003c50:	3601      	adds	r6, #1
 8003c52:	e7f2      	b.n	8003c3a <__libc_init_array+0x1e>
 8003c54:	08004788 	.word	0x08004788
 8003c58:	08004788 	.word	0x08004788
 8003c5c:	08004788 	.word	0x08004788
 8003c60:	0800478c 	.word	0x0800478c

08003c64 <memcpy>:
 8003c64:	440a      	add	r2, r1
 8003c66:	4291      	cmp	r1, r2
 8003c68:	f100 33ff 	add.w	r3, r0, #4294967295
 8003c6c:	d100      	bne.n	8003c70 <memcpy+0xc>
 8003c6e:	4770      	bx	lr
 8003c70:	b510      	push	{r4, lr}
 8003c72:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003c76:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003c7a:	4291      	cmp	r1, r2
 8003c7c:	d1f9      	bne.n	8003c72 <memcpy+0xe>
 8003c7e:	bd10      	pop	{r4, pc}

08003c80 <memset>:
 8003c80:	4402      	add	r2, r0
 8003c82:	4603      	mov	r3, r0
 8003c84:	4293      	cmp	r3, r2
 8003c86:	d100      	bne.n	8003c8a <memset+0xa>
 8003c88:	4770      	bx	lr
 8003c8a:	f803 1b01 	strb.w	r1, [r3], #1
 8003c8e:	e7f9      	b.n	8003c84 <memset+0x4>

08003c90 <siprintf>:
 8003c90:	b40e      	push	{r1, r2, r3}
 8003c92:	b500      	push	{lr}
 8003c94:	b09c      	sub	sp, #112	; 0x70
 8003c96:	ab1d      	add	r3, sp, #116	; 0x74
 8003c98:	9002      	str	r0, [sp, #8]
 8003c9a:	9006      	str	r0, [sp, #24]
 8003c9c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003ca0:	4809      	ldr	r0, [pc, #36]	; (8003cc8 <siprintf+0x38>)
 8003ca2:	9107      	str	r1, [sp, #28]
 8003ca4:	9104      	str	r1, [sp, #16]
 8003ca6:	4909      	ldr	r1, [pc, #36]	; (8003ccc <siprintf+0x3c>)
 8003ca8:	f853 2b04 	ldr.w	r2, [r3], #4
 8003cac:	9105      	str	r1, [sp, #20]
 8003cae:	6800      	ldr	r0, [r0, #0]
 8003cb0:	9301      	str	r3, [sp, #4]
 8003cb2:	a902      	add	r1, sp, #8
 8003cb4:	f000 f868 	bl	8003d88 <_svfiprintf_r>
 8003cb8:	9b02      	ldr	r3, [sp, #8]
 8003cba:	2200      	movs	r2, #0
 8003cbc:	701a      	strb	r2, [r3, #0]
 8003cbe:	b01c      	add	sp, #112	; 0x70
 8003cc0:	f85d eb04 	ldr.w	lr, [sp], #4
 8003cc4:	b003      	add	sp, #12
 8003cc6:	4770      	bx	lr
 8003cc8:	2000000c 	.word	0x2000000c
 8003ccc:	ffff0208 	.word	0xffff0208

08003cd0 <__ssputs_r>:
 8003cd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003cd4:	688e      	ldr	r6, [r1, #8]
 8003cd6:	429e      	cmp	r6, r3
 8003cd8:	4682      	mov	sl, r0
 8003cda:	460c      	mov	r4, r1
 8003cdc:	4690      	mov	r8, r2
 8003cde:	461f      	mov	r7, r3
 8003ce0:	d838      	bhi.n	8003d54 <__ssputs_r+0x84>
 8003ce2:	898a      	ldrh	r2, [r1, #12]
 8003ce4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003ce8:	d032      	beq.n	8003d50 <__ssputs_r+0x80>
 8003cea:	6825      	ldr	r5, [r4, #0]
 8003cec:	6909      	ldr	r1, [r1, #16]
 8003cee:	eba5 0901 	sub.w	r9, r5, r1
 8003cf2:	6965      	ldr	r5, [r4, #20]
 8003cf4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003cf8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003cfc:	3301      	adds	r3, #1
 8003cfe:	444b      	add	r3, r9
 8003d00:	106d      	asrs	r5, r5, #1
 8003d02:	429d      	cmp	r5, r3
 8003d04:	bf38      	it	cc
 8003d06:	461d      	movcc	r5, r3
 8003d08:	0553      	lsls	r3, r2, #21
 8003d0a:	d531      	bpl.n	8003d70 <__ssputs_r+0xa0>
 8003d0c:	4629      	mov	r1, r5
 8003d0e:	f000 fb39 	bl	8004384 <_malloc_r>
 8003d12:	4606      	mov	r6, r0
 8003d14:	b950      	cbnz	r0, 8003d2c <__ssputs_r+0x5c>
 8003d16:	230c      	movs	r3, #12
 8003d18:	f8ca 3000 	str.w	r3, [sl]
 8003d1c:	89a3      	ldrh	r3, [r4, #12]
 8003d1e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003d22:	81a3      	strh	r3, [r4, #12]
 8003d24:	f04f 30ff 	mov.w	r0, #4294967295
 8003d28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d2c:	6921      	ldr	r1, [r4, #16]
 8003d2e:	464a      	mov	r2, r9
 8003d30:	f7ff ff98 	bl	8003c64 <memcpy>
 8003d34:	89a3      	ldrh	r3, [r4, #12]
 8003d36:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003d3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d3e:	81a3      	strh	r3, [r4, #12]
 8003d40:	6126      	str	r6, [r4, #16]
 8003d42:	6165      	str	r5, [r4, #20]
 8003d44:	444e      	add	r6, r9
 8003d46:	eba5 0509 	sub.w	r5, r5, r9
 8003d4a:	6026      	str	r6, [r4, #0]
 8003d4c:	60a5      	str	r5, [r4, #8]
 8003d4e:	463e      	mov	r6, r7
 8003d50:	42be      	cmp	r6, r7
 8003d52:	d900      	bls.n	8003d56 <__ssputs_r+0x86>
 8003d54:	463e      	mov	r6, r7
 8003d56:	4632      	mov	r2, r6
 8003d58:	6820      	ldr	r0, [r4, #0]
 8003d5a:	4641      	mov	r1, r8
 8003d5c:	f000 faa8 	bl	80042b0 <memmove>
 8003d60:	68a3      	ldr	r3, [r4, #8]
 8003d62:	6822      	ldr	r2, [r4, #0]
 8003d64:	1b9b      	subs	r3, r3, r6
 8003d66:	4432      	add	r2, r6
 8003d68:	60a3      	str	r3, [r4, #8]
 8003d6a:	6022      	str	r2, [r4, #0]
 8003d6c:	2000      	movs	r0, #0
 8003d6e:	e7db      	b.n	8003d28 <__ssputs_r+0x58>
 8003d70:	462a      	mov	r2, r5
 8003d72:	f000 fb61 	bl	8004438 <_realloc_r>
 8003d76:	4606      	mov	r6, r0
 8003d78:	2800      	cmp	r0, #0
 8003d7a:	d1e1      	bne.n	8003d40 <__ssputs_r+0x70>
 8003d7c:	6921      	ldr	r1, [r4, #16]
 8003d7e:	4650      	mov	r0, sl
 8003d80:	f000 fab0 	bl	80042e4 <_free_r>
 8003d84:	e7c7      	b.n	8003d16 <__ssputs_r+0x46>
	...

08003d88 <_svfiprintf_r>:
 8003d88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d8c:	4698      	mov	r8, r3
 8003d8e:	898b      	ldrh	r3, [r1, #12]
 8003d90:	061b      	lsls	r3, r3, #24
 8003d92:	b09d      	sub	sp, #116	; 0x74
 8003d94:	4607      	mov	r7, r0
 8003d96:	460d      	mov	r5, r1
 8003d98:	4614      	mov	r4, r2
 8003d9a:	d50e      	bpl.n	8003dba <_svfiprintf_r+0x32>
 8003d9c:	690b      	ldr	r3, [r1, #16]
 8003d9e:	b963      	cbnz	r3, 8003dba <_svfiprintf_r+0x32>
 8003da0:	2140      	movs	r1, #64	; 0x40
 8003da2:	f000 faef 	bl	8004384 <_malloc_r>
 8003da6:	6028      	str	r0, [r5, #0]
 8003da8:	6128      	str	r0, [r5, #16]
 8003daa:	b920      	cbnz	r0, 8003db6 <_svfiprintf_r+0x2e>
 8003dac:	230c      	movs	r3, #12
 8003dae:	603b      	str	r3, [r7, #0]
 8003db0:	f04f 30ff 	mov.w	r0, #4294967295
 8003db4:	e0d1      	b.n	8003f5a <_svfiprintf_r+0x1d2>
 8003db6:	2340      	movs	r3, #64	; 0x40
 8003db8:	616b      	str	r3, [r5, #20]
 8003dba:	2300      	movs	r3, #0
 8003dbc:	9309      	str	r3, [sp, #36]	; 0x24
 8003dbe:	2320      	movs	r3, #32
 8003dc0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003dc4:	f8cd 800c 	str.w	r8, [sp, #12]
 8003dc8:	2330      	movs	r3, #48	; 0x30
 8003dca:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8003f74 <_svfiprintf_r+0x1ec>
 8003dce:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003dd2:	f04f 0901 	mov.w	r9, #1
 8003dd6:	4623      	mov	r3, r4
 8003dd8:	469a      	mov	sl, r3
 8003dda:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003dde:	b10a      	cbz	r2, 8003de4 <_svfiprintf_r+0x5c>
 8003de0:	2a25      	cmp	r2, #37	; 0x25
 8003de2:	d1f9      	bne.n	8003dd8 <_svfiprintf_r+0x50>
 8003de4:	ebba 0b04 	subs.w	fp, sl, r4
 8003de8:	d00b      	beq.n	8003e02 <_svfiprintf_r+0x7a>
 8003dea:	465b      	mov	r3, fp
 8003dec:	4622      	mov	r2, r4
 8003dee:	4629      	mov	r1, r5
 8003df0:	4638      	mov	r0, r7
 8003df2:	f7ff ff6d 	bl	8003cd0 <__ssputs_r>
 8003df6:	3001      	adds	r0, #1
 8003df8:	f000 80aa 	beq.w	8003f50 <_svfiprintf_r+0x1c8>
 8003dfc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003dfe:	445a      	add	r2, fp
 8003e00:	9209      	str	r2, [sp, #36]	; 0x24
 8003e02:	f89a 3000 	ldrb.w	r3, [sl]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	f000 80a2 	beq.w	8003f50 <_svfiprintf_r+0x1c8>
 8003e0c:	2300      	movs	r3, #0
 8003e0e:	f04f 32ff 	mov.w	r2, #4294967295
 8003e12:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003e16:	f10a 0a01 	add.w	sl, sl, #1
 8003e1a:	9304      	str	r3, [sp, #16]
 8003e1c:	9307      	str	r3, [sp, #28]
 8003e1e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003e22:	931a      	str	r3, [sp, #104]	; 0x68
 8003e24:	4654      	mov	r4, sl
 8003e26:	2205      	movs	r2, #5
 8003e28:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003e2c:	4851      	ldr	r0, [pc, #324]	; (8003f74 <_svfiprintf_r+0x1ec>)
 8003e2e:	f7fc f9d7 	bl	80001e0 <memchr>
 8003e32:	9a04      	ldr	r2, [sp, #16]
 8003e34:	b9d8      	cbnz	r0, 8003e6e <_svfiprintf_r+0xe6>
 8003e36:	06d0      	lsls	r0, r2, #27
 8003e38:	bf44      	itt	mi
 8003e3a:	2320      	movmi	r3, #32
 8003e3c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003e40:	0711      	lsls	r1, r2, #28
 8003e42:	bf44      	itt	mi
 8003e44:	232b      	movmi	r3, #43	; 0x2b
 8003e46:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003e4a:	f89a 3000 	ldrb.w	r3, [sl]
 8003e4e:	2b2a      	cmp	r3, #42	; 0x2a
 8003e50:	d015      	beq.n	8003e7e <_svfiprintf_r+0xf6>
 8003e52:	9a07      	ldr	r2, [sp, #28]
 8003e54:	4654      	mov	r4, sl
 8003e56:	2000      	movs	r0, #0
 8003e58:	f04f 0c0a 	mov.w	ip, #10
 8003e5c:	4621      	mov	r1, r4
 8003e5e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003e62:	3b30      	subs	r3, #48	; 0x30
 8003e64:	2b09      	cmp	r3, #9
 8003e66:	d94e      	bls.n	8003f06 <_svfiprintf_r+0x17e>
 8003e68:	b1b0      	cbz	r0, 8003e98 <_svfiprintf_r+0x110>
 8003e6a:	9207      	str	r2, [sp, #28]
 8003e6c:	e014      	b.n	8003e98 <_svfiprintf_r+0x110>
 8003e6e:	eba0 0308 	sub.w	r3, r0, r8
 8003e72:	fa09 f303 	lsl.w	r3, r9, r3
 8003e76:	4313      	orrs	r3, r2
 8003e78:	9304      	str	r3, [sp, #16]
 8003e7a:	46a2      	mov	sl, r4
 8003e7c:	e7d2      	b.n	8003e24 <_svfiprintf_r+0x9c>
 8003e7e:	9b03      	ldr	r3, [sp, #12]
 8003e80:	1d19      	adds	r1, r3, #4
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	9103      	str	r1, [sp, #12]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	bfbb      	ittet	lt
 8003e8a:	425b      	neglt	r3, r3
 8003e8c:	f042 0202 	orrlt.w	r2, r2, #2
 8003e90:	9307      	strge	r3, [sp, #28]
 8003e92:	9307      	strlt	r3, [sp, #28]
 8003e94:	bfb8      	it	lt
 8003e96:	9204      	strlt	r2, [sp, #16]
 8003e98:	7823      	ldrb	r3, [r4, #0]
 8003e9a:	2b2e      	cmp	r3, #46	; 0x2e
 8003e9c:	d10c      	bne.n	8003eb8 <_svfiprintf_r+0x130>
 8003e9e:	7863      	ldrb	r3, [r4, #1]
 8003ea0:	2b2a      	cmp	r3, #42	; 0x2a
 8003ea2:	d135      	bne.n	8003f10 <_svfiprintf_r+0x188>
 8003ea4:	9b03      	ldr	r3, [sp, #12]
 8003ea6:	1d1a      	adds	r2, r3, #4
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	9203      	str	r2, [sp, #12]
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	bfb8      	it	lt
 8003eb0:	f04f 33ff 	movlt.w	r3, #4294967295
 8003eb4:	3402      	adds	r4, #2
 8003eb6:	9305      	str	r3, [sp, #20]
 8003eb8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003f84 <_svfiprintf_r+0x1fc>
 8003ebc:	7821      	ldrb	r1, [r4, #0]
 8003ebe:	2203      	movs	r2, #3
 8003ec0:	4650      	mov	r0, sl
 8003ec2:	f7fc f98d 	bl	80001e0 <memchr>
 8003ec6:	b140      	cbz	r0, 8003eda <_svfiprintf_r+0x152>
 8003ec8:	2340      	movs	r3, #64	; 0x40
 8003eca:	eba0 000a 	sub.w	r0, r0, sl
 8003ece:	fa03 f000 	lsl.w	r0, r3, r0
 8003ed2:	9b04      	ldr	r3, [sp, #16]
 8003ed4:	4303      	orrs	r3, r0
 8003ed6:	3401      	adds	r4, #1
 8003ed8:	9304      	str	r3, [sp, #16]
 8003eda:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003ede:	4826      	ldr	r0, [pc, #152]	; (8003f78 <_svfiprintf_r+0x1f0>)
 8003ee0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003ee4:	2206      	movs	r2, #6
 8003ee6:	f7fc f97b 	bl	80001e0 <memchr>
 8003eea:	2800      	cmp	r0, #0
 8003eec:	d038      	beq.n	8003f60 <_svfiprintf_r+0x1d8>
 8003eee:	4b23      	ldr	r3, [pc, #140]	; (8003f7c <_svfiprintf_r+0x1f4>)
 8003ef0:	bb1b      	cbnz	r3, 8003f3a <_svfiprintf_r+0x1b2>
 8003ef2:	9b03      	ldr	r3, [sp, #12]
 8003ef4:	3307      	adds	r3, #7
 8003ef6:	f023 0307 	bic.w	r3, r3, #7
 8003efa:	3308      	adds	r3, #8
 8003efc:	9303      	str	r3, [sp, #12]
 8003efe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003f00:	4433      	add	r3, r6
 8003f02:	9309      	str	r3, [sp, #36]	; 0x24
 8003f04:	e767      	b.n	8003dd6 <_svfiprintf_r+0x4e>
 8003f06:	fb0c 3202 	mla	r2, ip, r2, r3
 8003f0a:	460c      	mov	r4, r1
 8003f0c:	2001      	movs	r0, #1
 8003f0e:	e7a5      	b.n	8003e5c <_svfiprintf_r+0xd4>
 8003f10:	2300      	movs	r3, #0
 8003f12:	3401      	adds	r4, #1
 8003f14:	9305      	str	r3, [sp, #20]
 8003f16:	4619      	mov	r1, r3
 8003f18:	f04f 0c0a 	mov.w	ip, #10
 8003f1c:	4620      	mov	r0, r4
 8003f1e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003f22:	3a30      	subs	r2, #48	; 0x30
 8003f24:	2a09      	cmp	r2, #9
 8003f26:	d903      	bls.n	8003f30 <_svfiprintf_r+0x1a8>
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d0c5      	beq.n	8003eb8 <_svfiprintf_r+0x130>
 8003f2c:	9105      	str	r1, [sp, #20]
 8003f2e:	e7c3      	b.n	8003eb8 <_svfiprintf_r+0x130>
 8003f30:	fb0c 2101 	mla	r1, ip, r1, r2
 8003f34:	4604      	mov	r4, r0
 8003f36:	2301      	movs	r3, #1
 8003f38:	e7f0      	b.n	8003f1c <_svfiprintf_r+0x194>
 8003f3a:	ab03      	add	r3, sp, #12
 8003f3c:	9300      	str	r3, [sp, #0]
 8003f3e:	462a      	mov	r2, r5
 8003f40:	4b0f      	ldr	r3, [pc, #60]	; (8003f80 <_svfiprintf_r+0x1f8>)
 8003f42:	a904      	add	r1, sp, #16
 8003f44:	4638      	mov	r0, r7
 8003f46:	f3af 8000 	nop.w
 8003f4a:	1c42      	adds	r2, r0, #1
 8003f4c:	4606      	mov	r6, r0
 8003f4e:	d1d6      	bne.n	8003efe <_svfiprintf_r+0x176>
 8003f50:	89ab      	ldrh	r3, [r5, #12]
 8003f52:	065b      	lsls	r3, r3, #25
 8003f54:	f53f af2c 	bmi.w	8003db0 <_svfiprintf_r+0x28>
 8003f58:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003f5a:	b01d      	add	sp, #116	; 0x74
 8003f5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f60:	ab03      	add	r3, sp, #12
 8003f62:	9300      	str	r3, [sp, #0]
 8003f64:	462a      	mov	r2, r5
 8003f66:	4b06      	ldr	r3, [pc, #24]	; (8003f80 <_svfiprintf_r+0x1f8>)
 8003f68:	a904      	add	r1, sp, #16
 8003f6a:	4638      	mov	r0, r7
 8003f6c:	f000 f87a 	bl	8004064 <_printf_i>
 8003f70:	e7eb      	b.n	8003f4a <_svfiprintf_r+0x1c2>
 8003f72:	bf00      	nop
 8003f74:	0800474c 	.word	0x0800474c
 8003f78:	08004756 	.word	0x08004756
 8003f7c:	00000000 	.word	0x00000000
 8003f80:	08003cd1 	.word	0x08003cd1
 8003f84:	08004752 	.word	0x08004752

08003f88 <_printf_common>:
 8003f88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003f8c:	4616      	mov	r6, r2
 8003f8e:	4699      	mov	r9, r3
 8003f90:	688a      	ldr	r2, [r1, #8]
 8003f92:	690b      	ldr	r3, [r1, #16]
 8003f94:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003f98:	4293      	cmp	r3, r2
 8003f9a:	bfb8      	it	lt
 8003f9c:	4613      	movlt	r3, r2
 8003f9e:	6033      	str	r3, [r6, #0]
 8003fa0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003fa4:	4607      	mov	r7, r0
 8003fa6:	460c      	mov	r4, r1
 8003fa8:	b10a      	cbz	r2, 8003fae <_printf_common+0x26>
 8003faa:	3301      	adds	r3, #1
 8003fac:	6033      	str	r3, [r6, #0]
 8003fae:	6823      	ldr	r3, [r4, #0]
 8003fb0:	0699      	lsls	r1, r3, #26
 8003fb2:	bf42      	ittt	mi
 8003fb4:	6833      	ldrmi	r3, [r6, #0]
 8003fb6:	3302      	addmi	r3, #2
 8003fb8:	6033      	strmi	r3, [r6, #0]
 8003fba:	6825      	ldr	r5, [r4, #0]
 8003fbc:	f015 0506 	ands.w	r5, r5, #6
 8003fc0:	d106      	bne.n	8003fd0 <_printf_common+0x48>
 8003fc2:	f104 0a19 	add.w	sl, r4, #25
 8003fc6:	68e3      	ldr	r3, [r4, #12]
 8003fc8:	6832      	ldr	r2, [r6, #0]
 8003fca:	1a9b      	subs	r3, r3, r2
 8003fcc:	42ab      	cmp	r3, r5
 8003fce:	dc26      	bgt.n	800401e <_printf_common+0x96>
 8003fd0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003fd4:	1e13      	subs	r3, r2, #0
 8003fd6:	6822      	ldr	r2, [r4, #0]
 8003fd8:	bf18      	it	ne
 8003fda:	2301      	movne	r3, #1
 8003fdc:	0692      	lsls	r2, r2, #26
 8003fde:	d42b      	bmi.n	8004038 <_printf_common+0xb0>
 8003fe0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003fe4:	4649      	mov	r1, r9
 8003fe6:	4638      	mov	r0, r7
 8003fe8:	47c0      	blx	r8
 8003fea:	3001      	adds	r0, #1
 8003fec:	d01e      	beq.n	800402c <_printf_common+0xa4>
 8003fee:	6823      	ldr	r3, [r4, #0]
 8003ff0:	68e5      	ldr	r5, [r4, #12]
 8003ff2:	6832      	ldr	r2, [r6, #0]
 8003ff4:	f003 0306 	and.w	r3, r3, #6
 8003ff8:	2b04      	cmp	r3, #4
 8003ffa:	bf08      	it	eq
 8003ffc:	1aad      	subeq	r5, r5, r2
 8003ffe:	68a3      	ldr	r3, [r4, #8]
 8004000:	6922      	ldr	r2, [r4, #16]
 8004002:	bf0c      	ite	eq
 8004004:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004008:	2500      	movne	r5, #0
 800400a:	4293      	cmp	r3, r2
 800400c:	bfc4      	itt	gt
 800400e:	1a9b      	subgt	r3, r3, r2
 8004010:	18ed      	addgt	r5, r5, r3
 8004012:	2600      	movs	r6, #0
 8004014:	341a      	adds	r4, #26
 8004016:	42b5      	cmp	r5, r6
 8004018:	d11a      	bne.n	8004050 <_printf_common+0xc8>
 800401a:	2000      	movs	r0, #0
 800401c:	e008      	b.n	8004030 <_printf_common+0xa8>
 800401e:	2301      	movs	r3, #1
 8004020:	4652      	mov	r2, sl
 8004022:	4649      	mov	r1, r9
 8004024:	4638      	mov	r0, r7
 8004026:	47c0      	blx	r8
 8004028:	3001      	adds	r0, #1
 800402a:	d103      	bne.n	8004034 <_printf_common+0xac>
 800402c:	f04f 30ff 	mov.w	r0, #4294967295
 8004030:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004034:	3501      	adds	r5, #1
 8004036:	e7c6      	b.n	8003fc6 <_printf_common+0x3e>
 8004038:	18e1      	adds	r1, r4, r3
 800403a:	1c5a      	adds	r2, r3, #1
 800403c:	2030      	movs	r0, #48	; 0x30
 800403e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004042:	4422      	add	r2, r4
 8004044:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004048:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800404c:	3302      	adds	r3, #2
 800404e:	e7c7      	b.n	8003fe0 <_printf_common+0x58>
 8004050:	2301      	movs	r3, #1
 8004052:	4622      	mov	r2, r4
 8004054:	4649      	mov	r1, r9
 8004056:	4638      	mov	r0, r7
 8004058:	47c0      	blx	r8
 800405a:	3001      	adds	r0, #1
 800405c:	d0e6      	beq.n	800402c <_printf_common+0xa4>
 800405e:	3601      	adds	r6, #1
 8004060:	e7d9      	b.n	8004016 <_printf_common+0x8e>
	...

08004064 <_printf_i>:
 8004064:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004068:	460c      	mov	r4, r1
 800406a:	4691      	mov	r9, r2
 800406c:	7e27      	ldrb	r7, [r4, #24]
 800406e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004070:	2f78      	cmp	r7, #120	; 0x78
 8004072:	4680      	mov	r8, r0
 8004074:	469a      	mov	sl, r3
 8004076:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800407a:	d807      	bhi.n	800408c <_printf_i+0x28>
 800407c:	2f62      	cmp	r7, #98	; 0x62
 800407e:	d80a      	bhi.n	8004096 <_printf_i+0x32>
 8004080:	2f00      	cmp	r7, #0
 8004082:	f000 80d8 	beq.w	8004236 <_printf_i+0x1d2>
 8004086:	2f58      	cmp	r7, #88	; 0x58
 8004088:	f000 80a3 	beq.w	80041d2 <_printf_i+0x16e>
 800408c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004090:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004094:	e03a      	b.n	800410c <_printf_i+0xa8>
 8004096:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800409a:	2b15      	cmp	r3, #21
 800409c:	d8f6      	bhi.n	800408c <_printf_i+0x28>
 800409e:	a001      	add	r0, pc, #4	; (adr r0, 80040a4 <_printf_i+0x40>)
 80040a0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80040a4:	080040fd 	.word	0x080040fd
 80040a8:	08004111 	.word	0x08004111
 80040ac:	0800408d 	.word	0x0800408d
 80040b0:	0800408d 	.word	0x0800408d
 80040b4:	0800408d 	.word	0x0800408d
 80040b8:	0800408d 	.word	0x0800408d
 80040bc:	08004111 	.word	0x08004111
 80040c0:	0800408d 	.word	0x0800408d
 80040c4:	0800408d 	.word	0x0800408d
 80040c8:	0800408d 	.word	0x0800408d
 80040cc:	0800408d 	.word	0x0800408d
 80040d0:	0800421d 	.word	0x0800421d
 80040d4:	08004141 	.word	0x08004141
 80040d8:	080041ff 	.word	0x080041ff
 80040dc:	0800408d 	.word	0x0800408d
 80040e0:	0800408d 	.word	0x0800408d
 80040e4:	0800423f 	.word	0x0800423f
 80040e8:	0800408d 	.word	0x0800408d
 80040ec:	08004141 	.word	0x08004141
 80040f0:	0800408d 	.word	0x0800408d
 80040f4:	0800408d 	.word	0x0800408d
 80040f8:	08004207 	.word	0x08004207
 80040fc:	680b      	ldr	r3, [r1, #0]
 80040fe:	1d1a      	adds	r2, r3, #4
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	600a      	str	r2, [r1, #0]
 8004104:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004108:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800410c:	2301      	movs	r3, #1
 800410e:	e0a3      	b.n	8004258 <_printf_i+0x1f4>
 8004110:	6825      	ldr	r5, [r4, #0]
 8004112:	6808      	ldr	r0, [r1, #0]
 8004114:	062e      	lsls	r6, r5, #24
 8004116:	f100 0304 	add.w	r3, r0, #4
 800411a:	d50a      	bpl.n	8004132 <_printf_i+0xce>
 800411c:	6805      	ldr	r5, [r0, #0]
 800411e:	600b      	str	r3, [r1, #0]
 8004120:	2d00      	cmp	r5, #0
 8004122:	da03      	bge.n	800412c <_printf_i+0xc8>
 8004124:	232d      	movs	r3, #45	; 0x2d
 8004126:	426d      	negs	r5, r5
 8004128:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800412c:	485e      	ldr	r0, [pc, #376]	; (80042a8 <_printf_i+0x244>)
 800412e:	230a      	movs	r3, #10
 8004130:	e019      	b.n	8004166 <_printf_i+0x102>
 8004132:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004136:	6805      	ldr	r5, [r0, #0]
 8004138:	600b      	str	r3, [r1, #0]
 800413a:	bf18      	it	ne
 800413c:	b22d      	sxthne	r5, r5
 800413e:	e7ef      	b.n	8004120 <_printf_i+0xbc>
 8004140:	680b      	ldr	r3, [r1, #0]
 8004142:	6825      	ldr	r5, [r4, #0]
 8004144:	1d18      	adds	r0, r3, #4
 8004146:	6008      	str	r0, [r1, #0]
 8004148:	0628      	lsls	r0, r5, #24
 800414a:	d501      	bpl.n	8004150 <_printf_i+0xec>
 800414c:	681d      	ldr	r5, [r3, #0]
 800414e:	e002      	b.n	8004156 <_printf_i+0xf2>
 8004150:	0669      	lsls	r1, r5, #25
 8004152:	d5fb      	bpl.n	800414c <_printf_i+0xe8>
 8004154:	881d      	ldrh	r5, [r3, #0]
 8004156:	4854      	ldr	r0, [pc, #336]	; (80042a8 <_printf_i+0x244>)
 8004158:	2f6f      	cmp	r7, #111	; 0x6f
 800415a:	bf0c      	ite	eq
 800415c:	2308      	moveq	r3, #8
 800415e:	230a      	movne	r3, #10
 8004160:	2100      	movs	r1, #0
 8004162:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004166:	6866      	ldr	r6, [r4, #4]
 8004168:	60a6      	str	r6, [r4, #8]
 800416a:	2e00      	cmp	r6, #0
 800416c:	bfa2      	ittt	ge
 800416e:	6821      	ldrge	r1, [r4, #0]
 8004170:	f021 0104 	bicge.w	r1, r1, #4
 8004174:	6021      	strge	r1, [r4, #0]
 8004176:	b90d      	cbnz	r5, 800417c <_printf_i+0x118>
 8004178:	2e00      	cmp	r6, #0
 800417a:	d04d      	beq.n	8004218 <_printf_i+0x1b4>
 800417c:	4616      	mov	r6, r2
 800417e:	fbb5 f1f3 	udiv	r1, r5, r3
 8004182:	fb03 5711 	mls	r7, r3, r1, r5
 8004186:	5dc7      	ldrb	r7, [r0, r7]
 8004188:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800418c:	462f      	mov	r7, r5
 800418e:	42bb      	cmp	r3, r7
 8004190:	460d      	mov	r5, r1
 8004192:	d9f4      	bls.n	800417e <_printf_i+0x11a>
 8004194:	2b08      	cmp	r3, #8
 8004196:	d10b      	bne.n	80041b0 <_printf_i+0x14c>
 8004198:	6823      	ldr	r3, [r4, #0]
 800419a:	07df      	lsls	r7, r3, #31
 800419c:	d508      	bpl.n	80041b0 <_printf_i+0x14c>
 800419e:	6923      	ldr	r3, [r4, #16]
 80041a0:	6861      	ldr	r1, [r4, #4]
 80041a2:	4299      	cmp	r1, r3
 80041a4:	bfde      	ittt	le
 80041a6:	2330      	movle	r3, #48	; 0x30
 80041a8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80041ac:	f106 36ff 	addle.w	r6, r6, #4294967295
 80041b0:	1b92      	subs	r2, r2, r6
 80041b2:	6122      	str	r2, [r4, #16]
 80041b4:	f8cd a000 	str.w	sl, [sp]
 80041b8:	464b      	mov	r3, r9
 80041ba:	aa03      	add	r2, sp, #12
 80041bc:	4621      	mov	r1, r4
 80041be:	4640      	mov	r0, r8
 80041c0:	f7ff fee2 	bl	8003f88 <_printf_common>
 80041c4:	3001      	adds	r0, #1
 80041c6:	d14c      	bne.n	8004262 <_printf_i+0x1fe>
 80041c8:	f04f 30ff 	mov.w	r0, #4294967295
 80041cc:	b004      	add	sp, #16
 80041ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80041d2:	4835      	ldr	r0, [pc, #212]	; (80042a8 <_printf_i+0x244>)
 80041d4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80041d8:	6823      	ldr	r3, [r4, #0]
 80041da:	680e      	ldr	r6, [r1, #0]
 80041dc:	061f      	lsls	r7, r3, #24
 80041de:	f856 5b04 	ldr.w	r5, [r6], #4
 80041e2:	600e      	str	r6, [r1, #0]
 80041e4:	d514      	bpl.n	8004210 <_printf_i+0x1ac>
 80041e6:	07d9      	lsls	r1, r3, #31
 80041e8:	bf44      	itt	mi
 80041ea:	f043 0320 	orrmi.w	r3, r3, #32
 80041ee:	6023      	strmi	r3, [r4, #0]
 80041f0:	b91d      	cbnz	r5, 80041fa <_printf_i+0x196>
 80041f2:	6823      	ldr	r3, [r4, #0]
 80041f4:	f023 0320 	bic.w	r3, r3, #32
 80041f8:	6023      	str	r3, [r4, #0]
 80041fa:	2310      	movs	r3, #16
 80041fc:	e7b0      	b.n	8004160 <_printf_i+0xfc>
 80041fe:	6823      	ldr	r3, [r4, #0]
 8004200:	f043 0320 	orr.w	r3, r3, #32
 8004204:	6023      	str	r3, [r4, #0]
 8004206:	2378      	movs	r3, #120	; 0x78
 8004208:	4828      	ldr	r0, [pc, #160]	; (80042ac <_printf_i+0x248>)
 800420a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800420e:	e7e3      	b.n	80041d8 <_printf_i+0x174>
 8004210:	065e      	lsls	r6, r3, #25
 8004212:	bf48      	it	mi
 8004214:	b2ad      	uxthmi	r5, r5
 8004216:	e7e6      	b.n	80041e6 <_printf_i+0x182>
 8004218:	4616      	mov	r6, r2
 800421a:	e7bb      	b.n	8004194 <_printf_i+0x130>
 800421c:	680b      	ldr	r3, [r1, #0]
 800421e:	6826      	ldr	r6, [r4, #0]
 8004220:	6960      	ldr	r0, [r4, #20]
 8004222:	1d1d      	adds	r5, r3, #4
 8004224:	600d      	str	r5, [r1, #0]
 8004226:	0635      	lsls	r5, r6, #24
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	d501      	bpl.n	8004230 <_printf_i+0x1cc>
 800422c:	6018      	str	r0, [r3, #0]
 800422e:	e002      	b.n	8004236 <_printf_i+0x1d2>
 8004230:	0671      	lsls	r1, r6, #25
 8004232:	d5fb      	bpl.n	800422c <_printf_i+0x1c8>
 8004234:	8018      	strh	r0, [r3, #0]
 8004236:	2300      	movs	r3, #0
 8004238:	6123      	str	r3, [r4, #16]
 800423a:	4616      	mov	r6, r2
 800423c:	e7ba      	b.n	80041b4 <_printf_i+0x150>
 800423e:	680b      	ldr	r3, [r1, #0]
 8004240:	1d1a      	adds	r2, r3, #4
 8004242:	600a      	str	r2, [r1, #0]
 8004244:	681e      	ldr	r6, [r3, #0]
 8004246:	6862      	ldr	r2, [r4, #4]
 8004248:	2100      	movs	r1, #0
 800424a:	4630      	mov	r0, r6
 800424c:	f7fb ffc8 	bl	80001e0 <memchr>
 8004250:	b108      	cbz	r0, 8004256 <_printf_i+0x1f2>
 8004252:	1b80      	subs	r0, r0, r6
 8004254:	6060      	str	r0, [r4, #4]
 8004256:	6863      	ldr	r3, [r4, #4]
 8004258:	6123      	str	r3, [r4, #16]
 800425a:	2300      	movs	r3, #0
 800425c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004260:	e7a8      	b.n	80041b4 <_printf_i+0x150>
 8004262:	6923      	ldr	r3, [r4, #16]
 8004264:	4632      	mov	r2, r6
 8004266:	4649      	mov	r1, r9
 8004268:	4640      	mov	r0, r8
 800426a:	47d0      	blx	sl
 800426c:	3001      	adds	r0, #1
 800426e:	d0ab      	beq.n	80041c8 <_printf_i+0x164>
 8004270:	6823      	ldr	r3, [r4, #0]
 8004272:	079b      	lsls	r3, r3, #30
 8004274:	d413      	bmi.n	800429e <_printf_i+0x23a>
 8004276:	68e0      	ldr	r0, [r4, #12]
 8004278:	9b03      	ldr	r3, [sp, #12]
 800427a:	4298      	cmp	r0, r3
 800427c:	bfb8      	it	lt
 800427e:	4618      	movlt	r0, r3
 8004280:	e7a4      	b.n	80041cc <_printf_i+0x168>
 8004282:	2301      	movs	r3, #1
 8004284:	4632      	mov	r2, r6
 8004286:	4649      	mov	r1, r9
 8004288:	4640      	mov	r0, r8
 800428a:	47d0      	blx	sl
 800428c:	3001      	adds	r0, #1
 800428e:	d09b      	beq.n	80041c8 <_printf_i+0x164>
 8004290:	3501      	adds	r5, #1
 8004292:	68e3      	ldr	r3, [r4, #12]
 8004294:	9903      	ldr	r1, [sp, #12]
 8004296:	1a5b      	subs	r3, r3, r1
 8004298:	42ab      	cmp	r3, r5
 800429a:	dcf2      	bgt.n	8004282 <_printf_i+0x21e>
 800429c:	e7eb      	b.n	8004276 <_printf_i+0x212>
 800429e:	2500      	movs	r5, #0
 80042a0:	f104 0619 	add.w	r6, r4, #25
 80042a4:	e7f5      	b.n	8004292 <_printf_i+0x22e>
 80042a6:	bf00      	nop
 80042a8:	0800475d 	.word	0x0800475d
 80042ac:	0800476e 	.word	0x0800476e

080042b0 <memmove>:
 80042b0:	4288      	cmp	r0, r1
 80042b2:	b510      	push	{r4, lr}
 80042b4:	eb01 0402 	add.w	r4, r1, r2
 80042b8:	d902      	bls.n	80042c0 <memmove+0x10>
 80042ba:	4284      	cmp	r4, r0
 80042bc:	4623      	mov	r3, r4
 80042be:	d807      	bhi.n	80042d0 <memmove+0x20>
 80042c0:	1e43      	subs	r3, r0, #1
 80042c2:	42a1      	cmp	r1, r4
 80042c4:	d008      	beq.n	80042d8 <memmove+0x28>
 80042c6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80042ca:	f803 2f01 	strb.w	r2, [r3, #1]!
 80042ce:	e7f8      	b.n	80042c2 <memmove+0x12>
 80042d0:	4402      	add	r2, r0
 80042d2:	4601      	mov	r1, r0
 80042d4:	428a      	cmp	r2, r1
 80042d6:	d100      	bne.n	80042da <memmove+0x2a>
 80042d8:	bd10      	pop	{r4, pc}
 80042da:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80042de:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80042e2:	e7f7      	b.n	80042d4 <memmove+0x24>

080042e4 <_free_r>:
 80042e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80042e6:	2900      	cmp	r1, #0
 80042e8:	d048      	beq.n	800437c <_free_r+0x98>
 80042ea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80042ee:	9001      	str	r0, [sp, #4]
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	f1a1 0404 	sub.w	r4, r1, #4
 80042f6:	bfb8      	it	lt
 80042f8:	18e4      	addlt	r4, r4, r3
 80042fa:	f000 f8d3 	bl	80044a4 <__malloc_lock>
 80042fe:	4a20      	ldr	r2, [pc, #128]	; (8004380 <_free_r+0x9c>)
 8004300:	9801      	ldr	r0, [sp, #4]
 8004302:	6813      	ldr	r3, [r2, #0]
 8004304:	4615      	mov	r5, r2
 8004306:	b933      	cbnz	r3, 8004316 <_free_r+0x32>
 8004308:	6063      	str	r3, [r4, #4]
 800430a:	6014      	str	r4, [r2, #0]
 800430c:	b003      	add	sp, #12
 800430e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004312:	f000 b8cd 	b.w	80044b0 <__malloc_unlock>
 8004316:	42a3      	cmp	r3, r4
 8004318:	d90b      	bls.n	8004332 <_free_r+0x4e>
 800431a:	6821      	ldr	r1, [r4, #0]
 800431c:	1862      	adds	r2, r4, r1
 800431e:	4293      	cmp	r3, r2
 8004320:	bf04      	itt	eq
 8004322:	681a      	ldreq	r2, [r3, #0]
 8004324:	685b      	ldreq	r3, [r3, #4]
 8004326:	6063      	str	r3, [r4, #4]
 8004328:	bf04      	itt	eq
 800432a:	1852      	addeq	r2, r2, r1
 800432c:	6022      	streq	r2, [r4, #0]
 800432e:	602c      	str	r4, [r5, #0]
 8004330:	e7ec      	b.n	800430c <_free_r+0x28>
 8004332:	461a      	mov	r2, r3
 8004334:	685b      	ldr	r3, [r3, #4]
 8004336:	b10b      	cbz	r3, 800433c <_free_r+0x58>
 8004338:	42a3      	cmp	r3, r4
 800433a:	d9fa      	bls.n	8004332 <_free_r+0x4e>
 800433c:	6811      	ldr	r1, [r2, #0]
 800433e:	1855      	adds	r5, r2, r1
 8004340:	42a5      	cmp	r5, r4
 8004342:	d10b      	bne.n	800435c <_free_r+0x78>
 8004344:	6824      	ldr	r4, [r4, #0]
 8004346:	4421      	add	r1, r4
 8004348:	1854      	adds	r4, r2, r1
 800434a:	42a3      	cmp	r3, r4
 800434c:	6011      	str	r1, [r2, #0]
 800434e:	d1dd      	bne.n	800430c <_free_r+0x28>
 8004350:	681c      	ldr	r4, [r3, #0]
 8004352:	685b      	ldr	r3, [r3, #4]
 8004354:	6053      	str	r3, [r2, #4]
 8004356:	4421      	add	r1, r4
 8004358:	6011      	str	r1, [r2, #0]
 800435a:	e7d7      	b.n	800430c <_free_r+0x28>
 800435c:	d902      	bls.n	8004364 <_free_r+0x80>
 800435e:	230c      	movs	r3, #12
 8004360:	6003      	str	r3, [r0, #0]
 8004362:	e7d3      	b.n	800430c <_free_r+0x28>
 8004364:	6825      	ldr	r5, [r4, #0]
 8004366:	1961      	adds	r1, r4, r5
 8004368:	428b      	cmp	r3, r1
 800436a:	bf04      	itt	eq
 800436c:	6819      	ldreq	r1, [r3, #0]
 800436e:	685b      	ldreq	r3, [r3, #4]
 8004370:	6063      	str	r3, [r4, #4]
 8004372:	bf04      	itt	eq
 8004374:	1949      	addeq	r1, r1, r5
 8004376:	6021      	streq	r1, [r4, #0]
 8004378:	6054      	str	r4, [r2, #4]
 800437a:	e7c7      	b.n	800430c <_free_r+0x28>
 800437c:	b003      	add	sp, #12
 800437e:	bd30      	pop	{r4, r5, pc}
 8004380:	20000090 	.word	0x20000090

08004384 <_malloc_r>:
 8004384:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004386:	1ccd      	adds	r5, r1, #3
 8004388:	f025 0503 	bic.w	r5, r5, #3
 800438c:	3508      	adds	r5, #8
 800438e:	2d0c      	cmp	r5, #12
 8004390:	bf38      	it	cc
 8004392:	250c      	movcc	r5, #12
 8004394:	2d00      	cmp	r5, #0
 8004396:	4606      	mov	r6, r0
 8004398:	db01      	blt.n	800439e <_malloc_r+0x1a>
 800439a:	42a9      	cmp	r1, r5
 800439c:	d903      	bls.n	80043a6 <_malloc_r+0x22>
 800439e:	230c      	movs	r3, #12
 80043a0:	6033      	str	r3, [r6, #0]
 80043a2:	2000      	movs	r0, #0
 80043a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80043a6:	f000 f87d 	bl	80044a4 <__malloc_lock>
 80043aa:	4921      	ldr	r1, [pc, #132]	; (8004430 <_malloc_r+0xac>)
 80043ac:	680a      	ldr	r2, [r1, #0]
 80043ae:	4614      	mov	r4, r2
 80043b0:	b99c      	cbnz	r4, 80043da <_malloc_r+0x56>
 80043b2:	4f20      	ldr	r7, [pc, #128]	; (8004434 <_malloc_r+0xb0>)
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	b923      	cbnz	r3, 80043c2 <_malloc_r+0x3e>
 80043b8:	4621      	mov	r1, r4
 80043ba:	4630      	mov	r0, r6
 80043bc:	f000 f862 	bl	8004484 <_sbrk_r>
 80043c0:	6038      	str	r0, [r7, #0]
 80043c2:	4629      	mov	r1, r5
 80043c4:	4630      	mov	r0, r6
 80043c6:	f000 f85d 	bl	8004484 <_sbrk_r>
 80043ca:	1c43      	adds	r3, r0, #1
 80043cc:	d123      	bne.n	8004416 <_malloc_r+0x92>
 80043ce:	230c      	movs	r3, #12
 80043d0:	6033      	str	r3, [r6, #0]
 80043d2:	4630      	mov	r0, r6
 80043d4:	f000 f86c 	bl	80044b0 <__malloc_unlock>
 80043d8:	e7e3      	b.n	80043a2 <_malloc_r+0x1e>
 80043da:	6823      	ldr	r3, [r4, #0]
 80043dc:	1b5b      	subs	r3, r3, r5
 80043de:	d417      	bmi.n	8004410 <_malloc_r+0x8c>
 80043e0:	2b0b      	cmp	r3, #11
 80043e2:	d903      	bls.n	80043ec <_malloc_r+0x68>
 80043e4:	6023      	str	r3, [r4, #0]
 80043e6:	441c      	add	r4, r3
 80043e8:	6025      	str	r5, [r4, #0]
 80043ea:	e004      	b.n	80043f6 <_malloc_r+0x72>
 80043ec:	6863      	ldr	r3, [r4, #4]
 80043ee:	42a2      	cmp	r2, r4
 80043f0:	bf0c      	ite	eq
 80043f2:	600b      	streq	r3, [r1, #0]
 80043f4:	6053      	strne	r3, [r2, #4]
 80043f6:	4630      	mov	r0, r6
 80043f8:	f000 f85a 	bl	80044b0 <__malloc_unlock>
 80043fc:	f104 000b 	add.w	r0, r4, #11
 8004400:	1d23      	adds	r3, r4, #4
 8004402:	f020 0007 	bic.w	r0, r0, #7
 8004406:	1ac2      	subs	r2, r0, r3
 8004408:	d0cc      	beq.n	80043a4 <_malloc_r+0x20>
 800440a:	1a1b      	subs	r3, r3, r0
 800440c:	50a3      	str	r3, [r4, r2]
 800440e:	e7c9      	b.n	80043a4 <_malloc_r+0x20>
 8004410:	4622      	mov	r2, r4
 8004412:	6864      	ldr	r4, [r4, #4]
 8004414:	e7cc      	b.n	80043b0 <_malloc_r+0x2c>
 8004416:	1cc4      	adds	r4, r0, #3
 8004418:	f024 0403 	bic.w	r4, r4, #3
 800441c:	42a0      	cmp	r0, r4
 800441e:	d0e3      	beq.n	80043e8 <_malloc_r+0x64>
 8004420:	1a21      	subs	r1, r4, r0
 8004422:	4630      	mov	r0, r6
 8004424:	f000 f82e 	bl	8004484 <_sbrk_r>
 8004428:	3001      	adds	r0, #1
 800442a:	d1dd      	bne.n	80043e8 <_malloc_r+0x64>
 800442c:	e7cf      	b.n	80043ce <_malloc_r+0x4a>
 800442e:	bf00      	nop
 8004430:	20000090 	.word	0x20000090
 8004434:	20000094 	.word	0x20000094

08004438 <_realloc_r>:
 8004438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800443a:	4607      	mov	r7, r0
 800443c:	4614      	mov	r4, r2
 800443e:	460e      	mov	r6, r1
 8004440:	b921      	cbnz	r1, 800444c <_realloc_r+0x14>
 8004442:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004446:	4611      	mov	r1, r2
 8004448:	f7ff bf9c 	b.w	8004384 <_malloc_r>
 800444c:	b922      	cbnz	r2, 8004458 <_realloc_r+0x20>
 800444e:	f7ff ff49 	bl	80042e4 <_free_r>
 8004452:	4625      	mov	r5, r4
 8004454:	4628      	mov	r0, r5
 8004456:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004458:	f000 f830 	bl	80044bc <_malloc_usable_size_r>
 800445c:	42a0      	cmp	r0, r4
 800445e:	d20f      	bcs.n	8004480 <_realloc_r+0x48>
 8004460:	4621      	mov	r1, r4
 8004462:	4638      	mov	r0, r7
 8004464:	f7ff ff8e 	bl	8004384 <_malloc_r>
 8004468:	4605      	mov	r5, r0
 800446a:	2800      	cmp	r0, #0
 800446c:	d0f2      	beq.n	8004454 <_realloc_r+0x1c>
 800446e:	4631      	mov	r1, r6
 8004470:	4622      	mov	r2, r4
 8004472:	f7ff fbf7 	bl	8003c64 <memcpy>
 8004476:	4631      	mov	r1, r6
 8004478:	4638      	mov	r0, r7
 800447a:	f7ff ff33 	bl	80042e4 <_free_r>
 800447e:	e7e9      	b.n	8004454 <_realloc_r+0x1c>
 8004480:	4635      	mov	r5, r6
 8004482:	e7e7      	b.n	8004454 <_realloc_r+0x1c>

08004484 <_sbrk_r>:
 8004484:	b538      	push	{r3, r4, r5, lr}
 8004486:	4d06      	ldr	r5, [pc, #24]	; (80044a0 <_sbrk_r+0x1c>)
 8004488:	2300      	movs	r3, #0
 800448a:	4604      	mov	r4, r0
 800448c:	4608      	mov	r0, r1
 800448e:	602b      	str	r3, [r5, #0]
 8004490:	f7fc fee6 	bl	8001260 <_sbrk>
 8004494:	1c43      	adds	r3, r0, #1
 8004496:	d102      	bne.n	800449e <_sbrk_r+0x1a>
 8004498:	682b      	ldr	r3, [r5, #0]
 800449a:	b103      	cbz	r3, 800449e <_sbrk_r+0x1a>
 800449c:	6023      	str	r3, [r4, #0]
 800449e:	bd38      	pop	{r3, r4, r5, pc}
 80044a0:	200001a8 	.word	0x200001a8

080044a4 <__malloc_lock>:
 80044a4:	4801      	ldr	r0, [pc, #4]	; (80044ac <__malloc_lock+0x8>)
 80044a6:	f000 b811 	b.w	80044cc <__retarget_lock_acquire_recursive>
 80044aa:	bf00      	nop
 80044ac:	200001b0 	.word	0x200001b0

080044b0 <__malloc_unlock>:
 80044b0:	4801      	ldr	r0, [pc, #4]	; (80044b8 <__malloc_unlock+0x8>)
 80044b2:	f000 b80c 	b.w	80044ce <__retarget_lock_release_recursive>
 80044b6:	bf00      	nop
 80044b8:	200001b0 	.word	0x200001b0

080044bc <_malloc_usable_size_r>:
 80044bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80044c0:	1f18      	subs	r0, r3, #4
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	bfbc      	itt	lt
 80044c6:	580b      	ldrlt	r3, [r1, r0]
 80044c8:	18c0      	addlt	r0, r0, r3
 80044ca:	4770      	bx	lr

080044cc <__retarget_lock_acquire_recursive>:
 80044cc:	4770      	bx	lr

080044ce <__retarget_lock_release_recursive>:
 80044ce:	4770      	bx	lr

080044d0 <_init>:
 80044d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044d2:	bf00      	nop
 80044d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80044d6:	bc08      	pop	{r3}
 80044d8:	469e      	mov	lr, r3
 80044da:	4770      	bx	lr

080044dc <_fini>:
 80044dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044de:	bf00      	nop
 80044e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80044e2:	bc08      	pop	{r3}
 80044e4:	469e      	mov	lr, r3
 80044e6:	4770      	bx	lr
