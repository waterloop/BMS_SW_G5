
STM32F405RGTx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009864  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000478  080099f4  080099f4  000199f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009e6c  08009e6c  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08009e6c  08009e6c  00019e6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009e74  08009e74  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009e74  08009e74  00019e74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009e78  08009e78  00019e78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08009e7c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004bbc  20000074  08009ef0  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004c30  08009ef0  00024c30  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00026d52  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004747  00000000  00000000  00046df6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a08  00000000  00000000  0004b540  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001860  00000000  00000000  0004cf48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025062  00000000  00000000  0004e7a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c9ab  00000000  00000000  0007380a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dce5c  00000000  00000000  000901b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0016d011  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000076e4  00000000  00000000  0016d064  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080099dc 	.word	0x080099dc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	080099dc 	.word	0x080099dc

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96e 	b.w	8000564 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468c      	mov	ip, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	f040 8083 	bne.w	80003b6 <__udivmoddi4+0x116>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d947      	bls.n	8000346 <__udivmoddi4+0xa6>
 80002b6:	fab2 f282 	clz	r2, r2
 80002ba:	b142      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002bc:	f1c2 0020 	rsb	r0, r2, #32
 80002c0:	fa24 f000 	lsr.w	r0, r4, r0
 80002c4:	4091      	lsls	r1, r2
 80002c6:	4097      	lsls	r7, r2
 80002c8:	ea40 0c01 	orr.w	ip, r0, r1
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbbc f6f8 	udiv	r6, ip, r8
 80002d8:	fa1f fe87 	uxth.w	lr, r7
 80002dc:	fb08 c116 	mls	r1, r8, r6, ip
 80002e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e4:	fb06 f10e 	mul.w	r1, r6, lr
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18fb      	adds	r3, r7, r3
 80002ee:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f2:	f080 8119 	bcs.w	8000528 <__udivmoddi4+0x288>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8116 	bls.w	8000528 <__udivmoddi4+0x288>
 80002fc:	3e02      	subs	r6, #2
 80002fe:	443b      	add	r3, r7
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0f8 	udiv	r0, r3, r8
 8000308:	fb08 3310 	mls	r3, r8, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fe0e 	mul.w	lr, r0, lr
 8000314:	45a6      	cmp	lr, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	193c      	adds	r4, r7, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	f080 8105 	bcs.w	800052c <__udivmoddi4+0x28c>
 8000322:	45a6      	cmp	lr, r4
 8000324:	f240 8102 	bls.w	800052c <__udivmoddi4+0x28c>
 8000328:	3802      	subs	r0, #2
 800032a:	443c      	add	r4, r7
 800032c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000330:	eba4 040e 	sub.w	r4, r4, lr
 8000334:	2600      	movs	r6, #0
 8000336:	b11d      	cbz	r5, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c5 4300 	strd	r4, r3, [r5]
 8000340:	4631      	mov	r1, r6
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	b902      	cbnz	r2, 800034a <__udivmoddi4+0xaa>
 8000348:	deff      	udf	#255	; 0xff
 800034a:	fab2 f282 	clz	r2, r2
 800034e:	2a00      	cmp	r2, #0
 8000350:	d150      	bne.n	80003f4 <__udivmoddi4+0x154>
 8000352:	1bcb      	subs	r3, r1, r7
 8000354:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000358:	fa1f f887 	uxth.w	r8, r7
 800035c:	2601      	movs	r6, #1
 800035e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000362:	0c21      	lsrs	r1, r4, #16
 8000364:	fb0e 331c 	mls	r3, lr, ip, r3
 8000368:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800036c:	fb08 f30c 	mul.w	r3, r8, ip
 8000370:	428b      	cmp	r3, r1
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0xe4>
 8000374:	1879      	adds	r1, r7, r1
 8000376:	f10c 30ff 	add.w	r0, ip, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0xe2>
 800037c:	428b      	cmp	r3, r1
 800037e:	f200 80e9 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 8000382:	4684      	mov	ip, r0
 8000384:	1ac9      	subs	r1, r1, r3
 8000386:	b2a3      	uxth	r3, r4
 8000388:	fbb1 f0fe 	udiv	r0, r1, lr
 800038c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000390:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000394:	fb08 f800 	mul.w	r8, r8, r0
 8000398:	45a0      	cmp	r8, r4
 800039a:	d907      	bls.n	80003ac <__udivmoddi4+0x10c>
 800039c:	193c      	adds	r4, r7, r4
 800039e:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a2:	d202      	bcs.n	80003aa <__udivmoddi4+0x10a>
 80003a4:	45a0      	cmp	r8, r4
 80003a6:	f200 80d9 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003aa:	4618      	mov	r0, r3
 80003ac:	eba4 0408 	sub.w	r4, r4, r8
 80003b0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003b4:	e7bf      	b.n	8000336 <__udivmoddi4+0x96>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0x12e>
 80003ba:	2d00      	cmp	r5, #0
 80003bc:	f000 80b1 	beq.w	8000522 <__udivmoddi4+0x282>
 80003c0:	2600      	movs	r6, #0
 80003c2:	e9c5 0100 	strd	r0, r1, [r5]
 80003c6:	4630      	mov	r0, r6
 80003c8:	4631      	mov	r1, r6
 80003ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ce:	fab3 f683 	clz	r6, r3
 80003d2:	2e00      	cmp	r6, #0
 80003d4:	d14a      	bne.n	800046c <__udivmoddi4+0x1cc>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d302      	bcc.n	80003e0 <__udivmoddi4+0x140>
 80003da:	4282      	cmp	r2, r0
 80003dc:	f200 80b8 	bhi.w	8000550 <__udivmoddi4+0x2b0>
 80003e0:	1a84      	subs	r4, r0, r2
 80003e2:	eb61 0103 	sbc.w	r1, r1, r3
 80003e6:	2001      	movs	r0, #1
 80003e8:	468c      	mov	ip, r1
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	d0a8      	beq.n	8000340 <__udivmoddi4+0xa0>
 80003ee:	e9c5 4c00 	strd	r4, ip, [r5]
 80003f2:	e7a5      	b.n	8000340 <__udivmoddi4+0xa0>
 80003f4:	f1c2 0320 	rsb	r3, r2, #32
 80003f8:	fa20 f603 	lsr.w	r6, r0, r3
 80003fc:	4097      	lsls	r7, r2
 80003fe:	fa01 f002 	lsl.w	r0, r1, r2
 8000402:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000406:	40d9      	lsrs	r1, r3
 8000408:	4330      	orrs	r0, r6
 800040a:	0c03      	lsrs	r3, r0, #16
 800040c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000410:	fa1f f887 	uxth.w	r8, r7
 8000414:	fb0e 1116 	mls	r1, lr, r6, r1
 8000418:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800041c:	fb06 f108 	mul.w	r1, r6, r8
 8000420:	4299      	cmp	r1, r3
 8000422:	fa04 f402 	lsl.w	r4, r4, r2
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x19c>
 8000428:	18fb      	adds	r3, r7, r3
 800042a:	f106 3cff 	add.w	ip, r6, #4294967295
 800042e:	f080 808d 	bcs.w	800054c <__udivmoddi4+0x2ac>
 8000432:	4299      	cmp	r1, r3
 8000434:	f240 808a 	bls.w	800054c <__udivmoddi4+0x2ac>
 8000438:	3e02      	subs	r6, #2
 800043a:	443b      	add	r3, r7
 800043c:	1a5b      	subs	r3, r3, r1
 800043e:	b281      	uxth	r1, r0
 8000440:	fbb3 f0fe 	udiv	r0, r3, lr
 8000444:	fb0e 3310 	mls	r3, lr, r0, r3
 8000448:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044c:	fb00 f308 	mul.w	r3, r0, r8
 8000450:	428b      	cmp	r3, r1
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x1c4>
 8000454:	1879      	adds	r1, r7, r1
 8000456:	f100 3cff 	add.w	ip, r0, #4294967295
 800045a:	d273      	bcs.n	8000544 <__udivmoddi4+0x2a4>
 800045c:	428b      	cmp	r3, r1
 800045e:	d971      	bls.n	8000544 <__udivmoddi4+0x2a4>
 8000460:	3802      	subs	r0, #2
 8000462:	4439      	add	r1, r7
 8000464:	1acb      	subs	r3, r1, r3
 8000466:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800046a:	e778      	b.n	800035e <__udivmoddi4+0xbe>
 800046c:	f1c6 0c20 	rsb	ip, r6, #32
 8000470:	fa03 f406 	lsl.w	r4, r3, r6
 8000474:	fa22 f30c 	lsr.w	r3, r2, ip
 8000478:	431c      	orrs	r4, r3
 800047a:	fa20 f70c 	lsr.w	r7, r0, ip
 800047e:	fa01 f306 	lsl.w	r3, r1, r6
 8000482:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000486:	fa21 f10c 	lsr.w	r1, r1, ip
 800048a:	431f      	orrs	r7, r3
 800048c:	0c3b      	lsrs	r3, r7, #16
 800048e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000492:	fa1f f884 	uxth.w	r8, r4
 8000496:	fb0e 1119 	mls	r1, lr, r9, r1
 800049a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800049e:	fb09 fa08 	mul.w	sl, r9, r8
 80004a2:	458a      	cmp	sl, r1
 80004a4:	fa02 f206 	lsl.w	r2, r2, r6
 80004a8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x220>
 80004ae:	1861      	adds	r1, r4, r1
 80004b0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004b4:	d248      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 80004b6:	458a      	cmp	sl, r1
 80004b8:	d946      	bls.n	8000548 <__udivmoddi4+0x2a8>
 80004ba:	f1a9 0902 	sub.w	r9, r9, #2
 80004be:	4421      	add	r1, r4
 80004c0:	eba1 010a 	sub.w	r1, r1, sl
 80004c4:	b2bf      	uxth	r7, r7
 80004c6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ca:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ce:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004d2:	fb00 f808 	mul.w	r8, r0, r8
 80004d6:	45b8      	cmp	r8, r7
 80004d8:	d907      	bls.n	80004ea <__udivmoddi4+0x24a>
 80004da:	19e7      	adds	r7, r4, r7
 80004dc:	f100 31ff 	add.w	r1, r0, #4294967295
 80004e0:	d22e      	bcs.n	8000540 <__udivmoddi4+0x2a0>
 80004e2:	45b8      	cmp	r8, r7
 80004e4:	d92c      	bls.n	8000540 <__udivmoddi4+0x2a0>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4427      	add	r7, r4
 80004ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ee:	eba7 0708 	sub.w	r7, r7, r8
 80004f2:	fba0 8902 	umull	r8, r9, r0, r2
 80004f6:	454f      	cmp	r7, r9
 80004f8:	46c6      	mov	lr, r8
 80004fa:	4649      	mov	r1, r9
 80004fc:	d31a      	bcc.n	8000534 <__udivmoddi4+0x294>
 80004fe:	d017      	beq.n	8000530 <__udivmoddi4+0x290>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x27a>
 8000502:	ebb3 020e 	subs.w	r2, r3, lr
 8000506:	eb67 0701 	sbc.w	r7, r7, r1
 800050a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800050e:	40f2      	lsrs	r2, r6
 8000510:	ea4c 0202 	orr.w	r2, ip, r2
 8000514:	40f7      	lsrs	r7, r6
 8000516:	e9c5 2700 	strd	r2, r7, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	462e      	mov	r6, r5
 8000524:	4628      	mov	r0, r5
 8000526:	e70b      	b.n	8000340 <__udivmoddi4+0xa0>
 8000528:	4606      	mov	r6, r0
 800052a:	e6e9      	b.n	8000300 <__udivmoddi4+0x60>
 800052c:	4618      	mov	r0, r3
 800052e:	e6fd      	b.n	800032c <__udivmoddi4+0x8c>
 8000530:	4543      	cmp	r3, r8
 8000532:	d2e5      	bcs.n	8000500 <__udivmoddi4+0x260>
 8000534:	ebb8 0e02 	subs.w	lr, r8, r2
 8000538:	eb69 0104 	sbc.w	r1, r9, r4
 800053c:	3801      	subs	r0, #1
 800053e:	e7df      	b.n	8000500 <__udivmoddi4+0x260>
 8000540:	4608      	mov	r0, r1
 8000542:	e7d2      	b.n	80004ea <__udivmoddi4+0x24a>
 8000544:	4660      	mov	r0, ip
 8000546:	e78d      	b.n	8000464 <__udivmoddi4+0x1c4>
 8000548:	4681      	mov	r9, r0
 800054a:	e7b9      	b.n	80004c0 <__udivmoddi4+0x220>
 800054c:	4666      	mov	r6, ip
 800054e:	e775      	b.n	800043c <__udivmoddi4+0x19c>
 8000550:	4630      	mov	r0, r6
 8000552:	e74a      	b.n	80003ea <__udivmoddi4+0x14a>
 8000554:	f1ac 0c02 	sub.w	ip, ip, #2
 8000558:	4439      	add	r1, r7
 800055a:	e713      	b.n	8000384 <__udivmoddi4+0xe4>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	e724      	b.n	80003ac <__udivmoddi4+0x10c>
 8000562:	bf00      	nop

08000564 <__aeabi_idiv0>:
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop

08000568 <__io_putchar>:
#if BMS_DEBUG
#include "bms_tests.h"
#endif

// override __io_putchar from the STL to enable UART printing
void __io_putchar(uint8_t ch) {
 8000568:	b580      	push	{r7, lr}
 800056a:	b082      	sub	sp, #8
 800056c:	af00      	add	r7, sp, #0
 800056e:	4603      	mov	r3, r0
 8000570:	71fb      	strb	r3, [r7, #7]
	HAL_UART_Transmit(&huart1, &ch, 1, 500);
 8000572:	1df9      	adds	r1, r7, #7
 8000574:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000578:	2201      	movs	r2, #1
 800057a:	4803      	ldr	r0, [pc, #12]	; (8000588 <__io_putchar+0x20>)
 800057c:	f005 f827 	bl	80055ce <HAL_UART_Transmit>
}
 8000580:	bf00      	nop
 8000582:	3708      	adds	r7, #8
 8000584:	46bd      	mov	sp, r7
 8000586:	bd80      	pop	{r7, pc}
 8000588:	20004a40 	.word	0x20004a40

0800058c <bms_entry>:

int bms_entry() {	
 800058c:	b580      	push	{r7, lr}
 800058e:	af00      	add	r7, sp, #0
	printf("starting timers...\r\n");
 8000590:	4810      	ldr	r0, [pc, #64]	; (80005d4 <bms_entry+0x48>)
 8000592:	f008 f919 	bl	80087c8 <puts>
	start_timers();
 8000596:	f001 fb4f 	bl	8001c38 <start_timers>

	printf("initializing RTOS kernel...\r\n");
 800059a:	480f      	ldr	r0, [pc, #60]	; (80005d8 <bms_entry+0x4c>)
 800059c:	f008 f914 	bl	80087c8 <puts>
	osKernelInitialize();
 80005a0:	f005 fafe 	bl	8005ba0 <osKernelInitialize>

	printf("starting RTOS threads...\r\n");
 80005a4:	480d      	ldr	r0, [pc, #52]	; (80005dc <bms_entry+0x50>)
 80005a6:	f008 f90f 	bl	80087c8 <puts>
	osThreadNew(ext_led_blink_thread_fn, NULL, &ext_led_blink_thread_attrs);
 80005aa:	4a0d      	ldr	r2, [pc, #52]	; (80005e0 <bms_entry+0x54>)
 80005ac:	2100      	movs	r1, #0
 80005ae:	480d      	ldr	r0, [pc, #52]	; (80005e4 <bms_entry+0x58>)
 80005b0:	f005 fb40 	bl	8005c34 <osThreadNew>
	// osThreadNew(rtos_heartbeat_logger_thread_fn, NULL, &rtos_heartbeat_logger_thread_attrs);
	osThreadNew(measurements_thread_fn, NULL, &measurements_thread_attrs);
 80005b4:	4a0c      	ldr	r2, [pc, #48]	; (80005e8 <bms_entry+0x5c>)
 80005b6:	2100      	movs	r1, #0
 80005b8:	480c      	ldr	r0, [pc, #48]	; (80005ec <bms_entry+0x60>)
 80005ba:	f005 fb3b 	bl	8005c34 <osThreadNew>

	printf("starting RTOS scheduler...\r\n");
 80005be:	480c      	ldr	r0, [pc, #48]	; (80005f0 <bms_entry+0x64>)
 80005c0:	f008 f902 	bl	80087c8 <puts>
	osKernelStart();
 80005c4:	f005 fb10 	bl	8005be8 <osKernelStart>

	// should never reach this point, since we have handed execution over to the RTOS
	Error_Handler();
 80005c8:	f000 ffd2 	bl	8001570 <Error_Handler>

	return 0;
 80005cc:	2300      	movs	r3, #0
}
 80005ce:	4618      	mov	r0, r3
 80005d0:	bd80      	pop	{r7, pc}
 80005d2:	bf00      	nop
 80005d4:	080099f4 	.word	0x080099f4
 80005d8:	08009a08 	.word	0x08009a08
 80005dc:	08009a28 	.word	0x08009a28
 80005e0:	08009d8c 	.word	0x08009d8c
 80005e4:	08001c81 	.word	0x08001c81
 80005e8:	08009db0 	.word	0x08009db0
 80005ec:	08001ca1 	.word	0x08001ca1
 80005f0:	08009a44 	.word	0x08009a44

080005f4 <Buffer_init>:
	0x585a, 0x8ba7, 0x4e3e, 0x450c, 0x8095
};

/////////////////////////////////////////////////////////////////////////////////////////////////////
// Buffer methods
Buffer Buffer_init() {
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b09c      	sub	sp, #112	; 0x70
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	6078      	str	r0, [r7, #4]
	Buffer buffer = {};
 80005fc:	f107 0308 	add.w	r3, r7, #8
 8000600:	2265      	movs	r2, #101	; 0x65
 8000602:	2100      	movs	r1, #0
 8000604:	4618      	mov	r0, r3
 8000606:	f008 f851 	bl	80086ac <memset>
	buffer.len = 0;
 800060a:	2300      	movs	r3, #0
 800060c:	723b      	strb	r3, [r7, #8]
	return buffer;
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	4618      	mov	r0, r3
 8000612:	f107 0308 	add.w	r3, r7, #8
 8000616:	2265      	movs	r2, #101	; 0x65
 8000618:	4619      	mov	r1, r3
 800061a:	f008 f839 	bl	8008690 <memcpy>
}
 800061e:	6878      	ldr	r0, [r7, #4]
 8000620:	3770      	adds	r7, #112	; 0x70
 8000622:	46bd      	mov	sp, r7
 8000624:	bd80      	pop	{r7, pc}

08000626 <Buffer_append>:

void Buffer_append(Buffer* self, uint8_t val) {
 8000626:	b480      	push	{r7}
 8000628:	b085      	sub	sp, #20
 800062a:	af00      	add	r7, sp, #0
 800062c:	6078      	str	r0, [r7, #4]
 800062e:	460b      	mov	r3, r1
 8000630:	70fb      	strb	r3, [r7, #3]
	uint8_t indx = self->len;
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	781b      	ldrb	r3, [r3, #0]
 8000636:	73fb      	strb	r3, [r7, #15]
	self->data[indx] = val;
 8000638:	7bfb      	ldrb	r3, [r7, #15]
 800063a:	687a      	ldr	r2, [r7, #4]
 800063c:	4413      	add	r3, r2
 800063e:	78fa      	ldrb	r2, [r7, #3]
 8000640:	705a      	strb	r2, [r3, #1]
	self->len += 1;
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	781b      	ldrb	r3, [r3, #0]
 8000646:	3301      	adds	r3, #1
 8000648:	b2da      	uxtb	r2, r3
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	701a      	strb	r2, [r3, #0]
}
 800064e:	bf00      	nop
 8000650:	3714      	adds	r7, #20
 8000652:	46bd      	mov	sp, r7
 8000654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000658:	4770      	bx	lr

0800065a <Buffer_index>:

uint8_t Buffer_index(Buffer* self, uint8_t indx) {
 800065a:	b580      	push	{r7, lr}
 800065c:	b082      	sub	sp, #8
 800065e:	af00      	add	r7, sp, #0
 8000660:	6078      	str	r0, [r7, #4]
 8000662:	460b      	mov	r3, r1
 8000664:	70fb      	strb	r3, [r7, #3]
	if (indx >= self->len) { Error_Handler(); }
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	781b      	ldrb	r3, [r3, #0]
 800066a:	78fa      	ldrb	r2, [r7, #3]
 800066c:	429a      	cmp	r2, r3
 800066e:	d301      	bcc.n	8000674 <Buffer_index+0x1a>
 8000670:	f000 ff7e 	bl	8001570 <Error_Handler>
	return self->data[indx];
 8000674:	78fb      	ldrb	r3, [r7, #3]
 8000676:	687a      	ldr	r2, [r7, #4]
 8000678:	4413      	add	r3, r2
 800067a:	785b      	ldrb	r3, [r3, #1]
}
 800067c:	4618      	mov	r0, r3
 800067e:	3708      	adds	r7, #8
 8000680:	46bd      	mov	sp, r7
 8000682:	bd80      	pop	{r7, pc}

08000684 <Buffer_set_index>:
void Buffer_set_index(Buffer* self, uint8_t indx, uint8_t val) {
 8000684:	b580      	push	{r7, lr}
 8000686:	b082      	sub	sp, #8
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
 800068c:	460b      	mov	r3, r1
 800068e:	70fb      	strb	r3, [r7, #3]
 8000690:	4613      	mov	r3, r2
 8000692:	70bb      	strb	r3, [r7, #2]
	if (indx >= self->len) { Error_Handler(); }
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	781b      	ldrb	r3, [r3, #0]
 8000698:	78fa      	ldrb	r2, [r7, #3]
 800069a:	429a      	cmp	r2, r3
 800069c:	d301      	bcc.n	80006a2 <Buffer_set_index+0x1e>
 800069e:	f000 ff67 	bl	8001570 <Error_Handler>
	self->data[indx] = val;
 80006a2:	78fb      	ldrb	r3, [r7, #3]
 80006a4:	687a      	ldr	r2, [r7, #4]
 80006a6:	4413      	add	r3, r2
 80006a8:	78ba      	ldrb	r2, [r7, #2]
 80006aa:	705a      	strb	r2, [r3, #1]
}
 80006ac:	bf00      	nop
 80006ae:	3708      	adds	r7, #8
 80006b0:	46bd      	mov	sp, r7
 80006b2:	bd80      	pop	{r7, pc}

080006b4 <Buffer_add_pec>:

void Buffer_add_pec(Buffer* self) {
 80006b4:	b590      	push	{r4, r7, lr}
 80006b6:	b085      	sub	sp, #20
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]
	uint16_t remainder = 16;
 80006bc:	2310      	movs	r3, #16
 80006be:	81fb      	strh	r3, [r7, #14]
	uint16_t addr = 0;
 80006c0:	2300      	movs	r3, #0
 80006c2:	817b      	strh	r3, [r7, #10]
	for (uint8_t i = 0; i < self->len; i++) {
 80006c4:	2300      	movs	r3, #0
 80006c6:	737b      	strb	r3, [r7, #13]
 80006c8:	e01b      	b.n	8000702 <Buffer_add_pec+0x4e>
		addr = ( (remainder >> 7)^Buffer_index(self, i) ) & 0xff;
 80006ca:	89fb      	ldrh	r3, [r7, #14]
 80006cc:	09db      	lsrs	r3, r3, #7
 80006ce:	b29c      	uxth	r4, r3
 80006d0:	7b7b      	ldrb	r3, [r7, #13]
 80006d2:	4619      	mov	r1, r3
 80006d4:	6878      	ldr	r0, [r7, #4]
 80006d6:	f7ff ffc0 	bl	800065a <Buffer_index>
 80006da:	4603      	mov	r3, r0
 80006dc:	b29b      	uxth	r3, r3
 80006de:	4063      	eors	r3, r4
 80006e0:	b29b      	uxth	r3, r3
 80006e2:	b2db      	uxtb	r3, r3
 80006e4:	817b      	strh	r3, [r7, #10]
		remainder = (remainder << 8)^_CRC15_LUT[addr];
 80006e6:	89fb      	ldrh	r3, [r7, #14]
 80006e8:	021b      	lsls	r3, r3, #8
 80006ea:	b21a      	sxth	r2, r3
 80006ec:	897b      	ldrh	r3, [r7, #10]
 80006ee:	4912      	ldr	r1, [pc, #72]	; (8000738 <Buffer_add_pec+0x84>)
 80006f0:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80006f4:	b21b      	sxth	r3, r3
 80006f6:	4053      	eors	r3, r2
 80006f8:	b21b      	sxth	r3, r3
 80006fa:	81fb      	strh	r3, [r7, #14]
	for (uint8_t i = 0; i < self->len; i++) {
 80006fc:	7b7b      	ldrb	r3, [r7, #13]
 80006fe:	3301      	adds	r3, #1
 8000700:	737b      	strb	r3, [r7, #13]
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	781b      	ldrb	r3, [r3, #0]
 8000706:	7b7a      	ldrb	r2, [r7, #13]
 8000708:	429a      	cmp	r2, r3
 800070a:	d3de      	bcc.n	80006ca <Buffer_add_pec+0x16>
	}
	uint16_t pec = remainder*2;
 800070c:	89fb      	ldrh	r3, [r7, #14]
 800070e:	005b      	lsls	r3, r3, #1
 8000710:	813b      	strh	r3, [r7, #8]
	Buffer_append(self, (pec >> 8) & 0xff);
 8000712:	893b      	ldrh	r3, [r7, #8]
 8000714:	0a1b      	lsrs	r3, r3, #8
 8000716:	b29b      	uxth	r3, r3
 8000718:	b2db      	uxtb	r3, r3
 800071a:	4619      	mov	r1, r3
 800071c:	6878      	ldr	r0, [r7, #4]
 800071e:	f7ff ff82 	bl	8000626 <Buffer_append>
	Buffer_append(self, pec & 0xff);
 8000722:	893b      	ldrh	r3, [r7, #8]
 8000724:	b2db      	uxtb	r3, r3
 8000726:	4619      	mov	r1, r3
 8000728:	6878      	ldr	r0, [r7, #4]
 800072a:	f7ff ff7c 	bl	8000626 <Buffer_append>
}
 800072e:	bf00      	nop
 8000730:	3714      	adds	r7, #20
 8000732:	46bd      	mov	sp, r7
 8000734:	bd90      	pop	{r4, r7, pc}
 8000736:	bf00      	nop
 8000738:	08009b74 	.word	0x08009b74

0800073c <Buffer_check_pec>:

uint8_t Buffer_check_pec(Buffer* self) {
 800073c:	b590      	push	{r4, r7, lr}
 800073e:	b087      	sub	sp, #28
 8000740:	af00      	add	r7, sp, #0
 8000742:	6078      	str	r0, [r7, #4]
	uint16_t remainder = 16;
 8000744:	2310      	movs	r3, #16
 8000746:	82fb      	strh	r3, [r7, #22]
	uint16_t addr = 0;
 8000748:	2300      	movs	r3, #0
 800074a:	827b      	strh	r3, [r7, #18]
	for (uint8_t i = 0; i < self->len - 2; i++) {
 800074c:	2300      	movs	r3, #0
 800074e:	757b      	strb	r3, [r7, #21]
 8000750:	e01b      	b.n	800078a <Buffer_check_pec+0x4e>
		addr = ( (remainder >> 7)^Buffer_index(self, i) ) & 0xff;
 8000752:	8afb      	ldrh	r3, [r7, #22]
 8000754:	09db      	lsrs	r3, r3, #7
 8000756:	b29c      	uxth	r4, r3
 8000758:	7d7b      	ldrb	r3, [r7, #21]
 800075a:	4619      	mov	r1, r3
 800075c:	6878      	ldr	r0, [r7, #4]
 800075e:	f7ff ff7c 	bl	800065a <Buffer_index>
 8000762:	4603      	mov	r3, r0
 8000764:	b29b      	uxth	r3, r3
 8000766:	4063      	eors	r3, r4
 8000768:	b29b      	uxth	r3, r3
 800076a:	b2db      	uxtb	r3, r3
 800076c:	827b      	strh	r3, [r7, #18]
		remainder = (remainder << 8)^_CRC15_LUT[addr];
 800076e:	8afb      	ldrh	r3, [r7, #22]
 8000770:	021b      	lsls	r3, r3, #8
 8000772:	b21a      	sxth	r2, r3
 8000774:	8a7b      	ldrh	r3, [r7, #18]
 8000776:	491b      	ldr	r1, [pc, #108]	; (80007e4 <Buffer_check_pec+0xa8>)
 8000778:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800077c:	b21b      	sxth	r3, r3
 800077e:	4053      	eors	r3, r2
 8000780:	b21b      	sxth	r3, r3
 8000782:	82fb      	strh	r3, [r7, #22]
	for (uint8_t i = 0; i < self->len - 2; i++) {
 8000784:	7d7b      	ldrb	r3, [r7, #21]
 8000786:	3301      	adds	r3, #1
 8000788:	757b      	strb	r3, [r7, #21]
 800078a:	7d7a      	ldrb	r2, [r7, #21]
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	781b      	ldrb	r3, [r3, #0]
 8000790:	3b02      	subs	r3, #2
 8000792:	429a      	cmp	r2, r3
 8000794:	dbdd      	blt.n	8000752 <Buffer_check_pec+0x16>
	}
	uint16_t calc_pec = remainder*2;
 8000796:	8afb      	ldrh	r3, [r7, #22]
 8000798:	005b      	lsls	r3, r3, #1
 800079a:	823b      	strh	r3, [r7, #16]
	uint16_t act_pec = ((uint16_t)Buffer_index(self, self->len - 2) << 8) | Buffer_index(self, self->len - 1);
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	781b      	ldrb	r3, [r3, #0]
 80007a0:	3b02      	subs	r3, #2
 80007a2:	b2db      	uxtb	r3, r3
 80007a4:	4619      	mov	r1, r3
 80007a6:	6878      	ldr	r0, [r7, #4]
 80007a8:	f7ff ff57 	bl	800065a <Buffer_index>
 80007ac:	4603      	mov	r3, r0
 80007ae:	021b      	lsls	r3, r3, #8
 80007b0:	b21c      	sxth	r4, r3
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	781b      	ldrb	r3, [r3, #0]
 80007b6:	3b01      	subs	r3, #1
 80007b8:	b2db      	uxtb	r3, r3
 80007ba:	4619      	mov	r1, r3
 80007bc:	6878      	ldr	r0, [r7, #4]
 80007be:	f7ff ff4c 	bl	800065a <Buffer_index>
 80007c2:	4603      	mov	r3, r0
 80007c4:	b21b      	sxth	r3, r3
 80007c6:	4323      	orrs	r3, r4
 80007c8:	b21b      	sxth	r3, r3
 80007ca:	81fb      	strh	r3, [r7, #14]
	return calc_pec == act_pec;
 80007cc:	8a3a      	ldrh	r2, [r7, #16]
 80007ce:	89fb      	ldrh	r3, [r7, #14]
 80007d0:	429a      	cmp	r2, r3
 80007d2:	bf0c      	ite	eq
 80007d4:	2301      	moveq	r3, #1
 80007d6:	2300      	movne	r3, #0
 80007d8:	b2db      	uxtb	r3, r3
}
 80007da:	4618      	mov	r0, r3
 80007dc:	371c      	adds	r7, #28
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd90      	pop	{r4, r7, pc}
 80007e2:	bf00      	nop
 80007e4:	08009b74 	.word	0x08009b74

080007e8 <Buffer_print>:

void Buffer_print(Buffer* self) {
 80007e8:	b590      	push	{r4, r7, lr}
 80007ea:	f5ad 7d01 	sub.w	sp, sp, #516	; 0x204
 80007ee:	af00      	add	r7, sp, #0
 80007f0:	1d3b      	adds	r3, r7, #4
 80007f2:	6018      	str	r0, [r3, #0]
	char str[500];
	for (uint8_t i = 0; i < self->len; i++) {
 80007f4:	2300      	movs	r3, #0
 80007f6:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
 80007fa:	e019      	b.n	8000830 <Buffer_print+0x48>
		sprintf(str, "pkt byte %d: %d\r\n", i, Buffer_index(self, i));
 80007fc:	f897 41ff 	ldrb.w	r4, [r7, #511]	; 0x1ff
 8000800:	f897 21ff 	ldrb.w	r2, [r7, #511]	; 0x1ff
 8000804:	1d3b      	adds	r3, r7, #4
 8000806:	4611      	mov	r1, r2
 8000808:	6818      	ldr	r0, [r3, #0]
 800080a:	f7ff ff26 	bl	800065a <Buffer_index>
 800080e:	4603      	mov	r3, r0
 8000810:	f107 0008 	add.w	r0, r7, #8
 8000814:	4622      	mov	r2, r4
 8000816:	490e      	ldr	r1, [pc, #56]	; (8000850 <Buffer_print+0x68>)
 8000818:	f007 ffde 	bl	80087d8 <siprintf>
		printf(str);
 800081c:	f107 0308 	add.w	r3, r7, #8
 8000820:	4618      	mov	r0, r3
 8000822:	f007 ff4b 	bl	80086bc <iprintf>
	for (uint8_t i = 0; i < self->len; i++) {
 8000826:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 800082a:	3301      	adds	r3, #1
 800082c:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
 8000830:	1d3b      	adds	r3, r7, #4
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	781b      	ldrb	r3, [r3, #0]
 8000836:	f897 21ff 	ldrb.w	r2, [r7, #511]	; 0x1ff
 800083a:	429a      	cmp	r2, r3
 800083c:	d3de      	bcc.n	80007fc <Buffer_print+0x14>
	}
	printf("\r\n");
 800083e:	4805      	ldr	r0, [pc, #20]	; (8000854 <Buffer_print+0x6c>)
 8000840:	f007 ffc2 	bl	80087c8 <puts>
}
 8000844:	bf00      	nop
 8000846:	f507 7701 	add.w	r7, r7, #516	; 0x204
 800084a:	46bd      	mov	sp, r7
 800084c:	bd90      	pop	{r4, r7, pc}
 800084e:	bf00      	nop
 8000850:	08009a60 	.word	0x08009a60
 8000854:	08009a74 	.word	0x08009a74

08000858 <Buffer_clear>:

void Buffer_clear(Buffer* self) {
 8000858:	b580      	push	{r7, lr}
 800085a:	b082      	sub	sp, #8
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
	while (self->len > 0) {
 8000860:	e00e      	b.n	8000880 <Buffer_clear+0x28>
		Buffer_set_index(self, self->len - 1, 0);
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	781b      	ldrb	r3, [r3, #0]
 8000866:	3b01      	subs	r3, #1
 8000868:	b2db      	uxtb	r3, r3
 800086a:	2200      	movs	r2, #0
 800086c:	4619      	mov	r1, r3
 800086e:	6878      	ldr	r0, [r7, #4]
 8000870:	f7ff ff08 	bl	8000684 <Buffer_set_index>
		self->len = self->len - 1;
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	781b      	ldrb	r3, [r3, #0]
 8000878:	3b01      	subs	r3, #1
 800087a:	b2da      	uxtb	r2, r3
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	701a      	strb	r2, [r3, #0]
	while (self->len > 0) {
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	781b      	ldrb	r3, [r3, #0]
 8000884:	2b00      	cmp	r3, #0
 8000886:	d1ec      	bne.n	8000862 <Buffer_clear+0xa>
	}
}
 8000888:	bf00      	nop
 800088a:	bf00      	nop
 800088c:	3708      	adds	r7, #8
 800088e:	46bd      	mov	sp, r7
 8000890:	bd80      	pop	{r7, pc}

08000892 <Ltc6813_init>:
/////////////////////////////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////////////////////////////
// Ltc6813 methods
Ltc6813 Ltc6813_init(SPI_HandleTypeDef spi, GPIO_TypeDef* cs_gpio_port, uint8_t cs_pin_num) {
 8000892:	b084      	sub	sp, #16
 8000894:	b590      	push	{r4, r7, lr}
 8000896:	f2ad 4d64 	subw	sp, sp, #1124	; 0x464
 800089a:	af00      	add	r7, sp, #0
 800089c:	f107 046c 	add.w	r4, r7, #108	; 0x6c
 80008a0:	6020      	str	r0, [r4, #0]
 80008a2:	f207 4074 	addw	r0, r7, #1140	; 0x474
 80008a6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	Ltc6813 slave_device = {};
 80008aa:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80008ae:	4618      	mov	r0, r3
 80008b0:	f44f 737c 	mov.w	r3, #1008	; 0x3f0
 80008b4:	461a      	mov	r2, r3
 80008b6:	2100      	movs	r1, #0
 80008b8:	f007 fef8 	bl	80086ac <memset>
	slave_device._spi_interface = spi;
 80008bc:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80008c0:	4618      	mov	r0, r3
 80008c2:	f207 4374 	addw	r3, r7, #1140	; 0x474
 80008c6:	2258      	movs	r2, #88	; 0x58
 80008c8:	4619      	mov	r1, r3
 80008ca:	f007 fee1 	bl	8008690 <memcpy>

	// config CS pin as GPIO output
	cs_gpio_port->MODER &= ~(0b11u << (cs_pin_num*2));
 80008ce:	f8d7 34cc 	ldr.w	r3, [r7, #1228]	; 0x4cc
 80008d2:	681a      	ldr	r2, [r3, #0]
 80008d4:	f897 34d0 	ldrb.w	r3, [r7, #1232]	; 0x4d0
 80008d8:	005b      	lsls	r3, r3, #1
 80008da:	2103      	movs	r1, #3
 80008dc:	fa01 f303 	lsl.w	r3, r1, r3
 80008e0:	43db      	mvns	r3, r3
 80008e2:	401a      	ands	r2, r3
 80008e4:	f8d7 34cc 	ldr.w	r3, [r7, #1228]	; 0x4cc
 80008e8:	601a      	str	r2, [r3, #0]
	cs_gpio_port->MODER |= (0b01u << (cs_pin_num*2));
 80008ea:	f8d7 34cc 	ldr.w	r3, [r7, #1228]	; 0x4cc
 80008ee:	681a      	ldr	r2, [r3, #0]
 80008f0:	f897 34d0 	ldrb.w	r3, [r7, #1232]	; 0x4d0
 80008f4:	005b      	lsls	r3, r3, #1
 80008f6:	2101      	movs	r1, #1
 80008f8:	fa01 f303 	lsl.w	r3, r1, r3
 80008fc:	431a      	orrs	r2, r3
 80008fe:	f8d7 34cc 	ldr.w	r3, [r7, #1228]	; 0x4cc
 8000902:	601a      	str	r2, [r3, #0]

	slave_device._cs_gpio_port = cs_gpio_port;
 8000904:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000908:	f8d7 24cc 	ldr.w	r2, [r7, #1228]	; 0x4cc
 800090c:	659a      	str	r2, [r3, #88]	; 0x58
	slave_device._cs_pin_num = cs_pin_num;
 800090e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000912:	f897 24d0 	ldrb.w	r2, [r7, #1232]	; 0x4d0
 8000916:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

	slave_device.cmd_bfr = Buffer_init();
 800091a:	f107 0470 	add.w	r4, r7, #112	; 0x70
 800091e:	463b      	mov	r3, r7
 8000920:	4618      	mov	r0, r3
 8000922:	f7ff fe67 	bl	80005f4 <Buffer_init>
 8000926:	463a      	mov	r2, r7
 8000928:	f104 035d 	add.w	r3, r4, #93	; 0x5d
 800092c:	4611      	mov	r1, r2
 800092e:	2265      	movs	r2, #101	; 0x65
 8000930:	4618      	mov	r0, r3
 8000932:	f007 fead 	bl	8008690 <memcpy>

	slave_device.cfga_bfr = Buffer_init();
 8000936:	f107 0470 	add.w	r4, r7, #112	; 0x70
 800093a:	463b      	mov	r3, r7
 800093c:	4618      	mov	r0, r3
 800093e:	f7ff fe59 	bl	80005f4 <Buffer_init>
 8000942:	463a      	mov	r2, r7
 8000944:	f104 03c2 	add.w	r3, r4, #194	; 0xc2
 8000948:	4611      	mov	r1, r2
 800094a:	2265      	movs	r2, #101	; 0x65
 800094c:	4618      	mov	r0, r3
 800094e:	f007 fe9f 	bl	8008690 <memcpy>
	slave_device.cfgb_bfr = Buffer_init();
 8000952:	f107 0470 	add.w	r4, r7, #112	; 0x70
 8000956:	463b      	mov	r3, r7
 8000958:	4618      	mov	r0, r3
 800095a:	f7ff fe4b 	bl	80005f4 <Buffer_init>
 800095e:	463a      	mov	r2, r7
 8000960:	f204 1327 	addw	r3, r4, #295	; 0x127
 8000964:	4611      	mov	r1, r2
 8000966:	2265      	movs	r2, #101	; 0x65
 8000968:	4618      	mov	r0, r3
 800096a:	f007 fe91 	bl	8008690 <memcpy>

	slave_device.cva_bfr = Buffer_init();
 800096e:	f107 0470 	add.w	r4, r7, #112	; 0x70
 8000972:	463b      	mov	r3, r7
 8000974:	4618      	mov	r0, r3
 8000976:	f7ff fe3d 	bl	80005f4 <Buffer_init>
 800097a:	463a      	mov	r2, r7
 800097c:	f504 73c6 	add.w	r3, r4, #396	; 0x18c
 8000980:	4611      	mov	r1, r2
 8000982:	2265      	movs	r2, #101	; 0x65
 8000984:	4618      	mov	r0, r3
 8000986:	f007 fe83 	bl	8008690 <memcpy>
	slave_device.cvb_bfr = Buffer_init();
 800098a:	f107 0470 	add.w	r4, r7, #112	; 0x70
 800098e:	463b      	mov	r3, r7
 8000990:	4618      	mov	r0, r3
 8000992:	f7ff fe2f 	bl	80005f4 <Buffer_init>
 8000996:	463a      	mov	r2, r7
 8000998:	f204 13f1 	addw	r3, r4, #497	; 0x1f1
 800099c:	4611      	mov	r1, r2
 800099e:	2265      	movs	r2, #101	; 0x65
 80009a0:	4618      	mov	r0, r3
 80009a2:	f007 fe75 	bl	8008690 <memcpy>
	slave_device.cvc_bfr = Buffer_init();
 80009a6:	f107 0470 	add.w	r4, r7, #112	; 0x70
 80009aa:	463b      	mov	r3, r7
 80009ac:	4618      	mov	r0, r3
 80009ae:	f7ff fe21 	bl	80005f4 <Buffer_init>
 80009b2:	463a      	mov	r2, r7
 80009b4:	f204 2356 	addw	r3, r4, #598	; 0x256
 80009b8:	4611      	mov	r1, r2
 80009ba:	2265      	movs	r2, #101	; 0x65
 80009bc:	4618      	mov	r0, r3
 80009be:	f007 fe67 	bl	8008690 <memcpy>
	slave_device.cvd_bfr = Buffer_init();
 80009c2:	f107 0470 	add.w	r4, r7, #112	; 0x70
 80009c6:	463b      	mov	r3, r7
 80009c8:	4618      	mov	r0, r3
 80009ca:	f7ff fe13 	bl	80005f4 <Buffer_init>
 80009ce:	463a      	mov	r2, r7
 80009d0:	f204 23bb 	addw	r3, r4, #699	; 0x2bb
 80009d4:	4611      	mov	r1, r2
 80009d6:	2265      	movs	r2, #101	; 0x65
 80009d8:	4618      	mov	r0, r3
 80009da:	f007 fe59 	bl	8008690 <memcpy>
	slave_device.cve_bfr = Buffer_init();
 80009de:	f107 0470 	add.w	r4, r7, #112	; 0x70
 80009e2:	463b      	mov	r3, r7
 80009e4:	4618      	mov	r0, r3
 80009e6:	f7ff fe05 	bl	80005f4 <Buffer_init>
 80009ea:	463a      	mov	r2, r7
 80009ec:	f504 7348 	add.w	r3, r4, #800	; 0x320
 80009f0:	4611      	mov	r1, r2
 80009f2:	2265      	movs	r2, #101	; 0x65
 80009f4:	4618      	mov	r0, r3
 80009f6:	f007 fe4b 	bl	8008690 <memcpy>
	slave_device.cvf_bfr = Buffer_init();
 80009fa:	f107 0470 	add.w	r4, r7, #112	; 0x70
 80009fe:	463b      	mov	r3, r7
 8000a00:	4618      	mov	r0, r3
 8000a02:	f7ff fdf7 	bl	80005f4 <Buffer_init>
 8000a06:	463a      	mov	r2, r7
 8000a08:	f204 3385 	addw	r3, r4, #901	; 0x385
 8000a0c:	4611      	mov	r1, r2
 8000a0e:	2265      	movs	r2, #101	; 0x65
 8000a10:	4618      	mov	r0, r3
 8000a12:	f007 fe3d 	bl	8008690 <memcpy>

	slave_device.timeout = 10000;
 8000a16:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000a1a:	f242 7210 	movw	r2, #10000	; 0x2710
 8000a1e:	f8c3 23ec 	str.w	r2, [r3, #1004]	; 0x3ec

	Ltc6813_cs_high(&slave_device);
 8000a22:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000a26:	4618      	mov	r0, r3
 8000a28:	f000 f82b 	bl	8000a82 <Ltc6813_cs_high>

	return slave_device;
 8000a2c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000a30:	681a      	ldr	r2, [r3, #0]
 8000a32:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	f44f 737c 	mov.w	r3, #1008	; 0x3f0
 8000a3e:	461a      	mov	r2, r3
 8000a40:	f007 fe26 	bl	8008690 <memcpy>
}
 8000a44:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000a48:	6818      	ldr	r0, [r3, #0]
 8000a4a:	f207 4764 	addw	r7, r7, #1124	; 0x464
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8000a54:	b004      	add	sp, #16
 8000a56:	4770      	bx	lr

08000a58 <Ltc6813_cs_low>:

void Ltc6813_cs_low(Ltc6813* self) { HAL_GPIO_WritePin(self->_cs_gpio_port, (1u << self->_cs_pin_num), 0); }
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b082      	sub	sp, #8
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8000a6a:	461a      	mov	r2, r3
 8000a6c:	2301      	movs	r3, #1
 8000a6e:	4093      	lsls	r3, r2
 8000a70:	b29b      	uxth	r3, r3
 8000a72:	2200      	movs	r2, #0
 8000a74:	4619      	mov	r1, r3
 8000a76:	f002 f815 	bl	8002aa4 <HAL_GPIO_WritePin>
 8000a7a:	bf00      	nop
 8000a7c:	3708      	adds	r7, #8
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bd80      	pop	{r7, pc}

08000a82 <Ltc6813_cs_high>:
void Ltc6813_cs_high(Ltc6813* self) { HAL_GPIO_WritePin(self->_cs_gpio_port, (1u << self->_cs_pin_num), 1); }
 8000a82:	b580      	push	{r7, lr}
 8000a84:	b082      	sub	sp, #8
 8000a86:	af00      	add	r7, sp, #0
 8000a88:	6078      	str	r0, [r7, #4]
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8000a94:	461a      	mov	r2, r3
 8000a96:	2301      	movs	r3, #1
 8000a98:	4093      	lsls	r3, r2
 8000a9a:	b29b      	uxth	r3, r3
 8000a9c:	2201      	movs	r2, #1
 8000a9e:	4619      	mov	r1, r3
 8000aa0:	f002 f800 	bl	8002aa4 <HAL_GPIO_WritePin>
 8000aa4:	bf00      	nop
 8000aa6:	3708      	adds	r7, #8
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	bd80      	pop	{r7, pc}

08000aac <Ltc6813_wakeup_sleep>:

// WAKEUP FUNCTIONS:
// setting CS low will send a long isoSPI pulse (reference: page 18 of LTC6820 datasheet)
void Ltc6813_wakeup_sleep(Ltc6813* self) {
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b082      	sub	sp, #8
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
	Ltc6813_cs_low(self);
 8000ab4:	6878      	ldr	r0, [r7, #4]
 8000ab6:	f7ff ffcf 	bl	8000a58 <Ltc6813_cs_low>
	delay_us(410);		// according to datasheet, t_wake = 400us
 8000aba:	f44f 70cd 	mov.w	r0, #410	; 0x19a
 8000abe:	f001 f8c5 	bl	8001c4c <delay_us>
	Ltc6813_cs_high(self);
 8000ac2:	6878      	ldr	r0, [r7, #4]
 8000ac4:	f7ff ffdd 	bl	8000a82 <Ltc6813_cs_high>
	delay_us(30);
 8000ac8:	201e      	movs	r0, #30
 8000aca:	f001 f8bf 	bl	8001c4c <delay_us>
}
 8000ace:	bf00      	nop
 8000ad0:	3708      	adds	r7, #8
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bd80      	pop	{r7, pc}
	...

08000ad8 <Ltc6813_print_voltages>:
	Ltc6813_cs_low(self);
	delay_us(20);		// according to datasheet, t_wake = 10us
	Ltc6813_cs_high(self);
}

void Ltc6813_print_voltages(Ltc6813* self) {
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b082      	sub	sp, #8
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]

	printf("PRINTING CVA\r\n");
 8000ae0:	481c      	ldr	r0, [pc, #112]	; (8000b54 <Ltc6813_print_voltages+0x7c>)
 8000ae2:	f007 fe71 	bl	80087c8 <puts>
	Buffer_print(&(self->cva_bfr));
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8000aec:	4618      	mov	r0, r3
 8000aee:	f7ff fe7b 	bl	80007e8 <Buffer_print>

	printf("PRINTING CVB\r\n");
 8000af2:	4819      	ldr	r0, [pc, #100]	; (8000b58 <Ltc6813_print_voltages+0x80>)
 8000af4:	f007 fe68 	bl	80087c8 <puts>
	Buffer_print(&(self->cvb_bfr));
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	f203 13f1 	addw	r3, r3, #497	; 0x1f1
 8000afe:	4618      	mov	r0, r3
 8000b00:	f7ff fe72 	bl	80007e8 <Buffer_print>

	printf("PRINTING CVC\r\n");
 8000b04:	4815      	ldr	r0, [pc, #84]	; (8000b5c <Ltc6813_print_voltages+0x84>)
 8000b06:	f007 fe5f 	bl	80087c8 <puts>
	Buffer_print(&(self->cvc_bfr));
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	f203 2356 	addw	r3, r3, #598	; 0x256
 8000b10:	4618      	mov	r0, r3
 8000b12:	f7ff fe69 	bl	80007e8 <Buffer_print>

	printf("PRINTING CVD\r\n");
 8000b16:	4812      	ldr	r0, [pc, #72]	; (8000b60 <Ltc6813_print_voltages+0x88>)
 8000b18:	f007 fe56 	bl	80087c8 <puts>
	Buffer_print(&(self->cvd_bfr));
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	f203 23bb 	addw	r3, r3, #699	; 0x2bb
 8000b22:	4618      	mov	r0, r3
 8000b24:	f7ff fe60 	bl	80007e8 <Buffer_print>

	printf("PRINTING CVE\r\n");
 8000b28:	480e      	ldr	r0, [pc, #56]	; (8000b64 <Ltc6813_print_voltages+0x8c>)
 8000b2a:	f007 fe4d 	bl	80087c8 <puts>
	Buffer_print(&(self->cve_bfr));
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	f503 7348 	add.w	r3, r3, #800	; 0x320
 8000b34:	4618      	mov	r0, r3
 8000b36:	f7ff fe57 	bl	80007e8 <Buffer_print>

	printf("PRINTING CVF\r\n");
 8000b3a:	480b      	ldr	r0, [pc, #44]	; (8000b68 <Ltc6813_print_voltages+0x90>)
 8000b3c:	f007 fe44 	bl	80087c8 <puts>
	Buffer_print(&(self->cvf_bfr));
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	f203 3385 	addw	r3, r3, #901	; 0x385
 8000b46:	4618      	mov	r0, r3
 8000b48:	f7ff fe4e 	bl	80007e8 <Buffer_print>

}
 8000b4c:	bf00      	nop
 8000b4e:	3708      	adds	r7, #8
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bd80      	pop	{r7, pc}
 8000b54:	08009a78 	.word	0x08009a78
 8000b58:	08009a88 	.word	0x08009a88
 8000b5c:	08009a98 	.word	0x08009a98
 8000b60:	08009aa8 	.word	0x08009aa8
 8000b64:	08009ab8 	.word	0x08009ab8
 8000b68:	08009ac8 	.word	0x08009ac8

08000b6c <Ltc6813_send_cmd>:

// READ COMMAND FUNCTIONS:
// commands to send read commands and receive data back (page 60 of LTC6813 datasheet)
void Ltc6813_send_cmd(Ltc6813* self, uint16_t cmd) {
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b082      	sub	sp, #8
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
 8000b74:	460b      	mov	r3, r1
 8000b76:	807b      	strh	r3, [r7, #2]
	Buffer_clear(&self->cmd_bfr);
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	335d      	adds	r3, #93	; 0x5d
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	f7ff fe6b 	bl	8000858 <Buffer_clear>

	Buffer_append(&self->cmd_bfr, (cmd >> 8) & 0xff);
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	f103 025d 	add.w	r2, r3, #93	; 0x5d
 8000b88:	887b      	ldrh	r3, [r7, #2]
 8000b8a:	0a1b      	lsrs	r3, r3, #8
 8000b8c:	b29b      	uxth	r3, r3
 8000b8e:	b2db      	uxtb	r3, r3
 8000b90:	4619      	mov	r1, r3
 8000b92:	4610      	mov	r0, r2
 8000b94:	f7ff fd47 	bl	8000626 <Buffer_append>
	Buffer_append(&self->cmd_bfr, cmd & 0xff);
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	335d      	adds	r3, #93	; 0x5d
 8000b9c:	887a      	ldrh	r2, [r7, #2]
 8000b9e:	b2d2      	uxtb	r2, r2
 8000ba0:	4611      	mov	r1, r2
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	f7ff fd3f 	bl	8000626 <Buffer_append>

	Buffer_add_pec(&self->cmd_bfr);
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	335d      	adds	r3, #93	; 0x5d
 8000bac:	4618      	mov	r0, r3
 8000bae:	f7ff fd81 	bl	80006b4 <Buffer_add_pec>

	HAL_SPI_Transmit(&self->_spi_interface, self->cmd_bfr.data, self->cmd_bfr.len, self->timeout);
 8000bb2:	6878      	ldr	r0, [r7, #4]
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	f103 015e 	add.w	r1, r3, #94	; 0x5e
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8000bc0:	b29a      	uxth	r2, r3
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	f8d3 33ec 	ldr.w	r3, [r3, #1004]	; 0x3ec
 8000bc8:	f002 fccd 	bl	8003566 <HAL_SPI_Transmit>
}
 8000bcc:	bf00      	nop
 8000bce:	3708      	adds	r7, #8
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bd80      	pop	{r7, pc}

08000bd4 <Ltc6813_read_reg>:

uint8_t Ltc6813_read_reg(Ltc6813* self, uint8_t reg_cmd) {
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b084      	sub	sp, #16
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
 8000bdc:	460b      	mov	r3, r1
 8000bde:	70fb      	strb	r3, [r7, #3]

	Buffer* reg_buf;

	switch (reg_cmd) {
 8000be0:	78fb      	ldrb	r3, [r7, #3]
 8000be2:	3b02      	subs	r3, #2
 8000be4:	2b24      	cmp	r3, #36	; 0x24
 8000be6:	d874      	bhi.n	8000cd2 <Ltc6813_read_reg+0xfe>
 8000be8:	a201      	add	r2, pc, #4	; (adr r2, 8000bf0 <Ltc6813_read_reg+0x1c>)
 8000bea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bee:	bf00      	nop
 8000bf0:	08000c85 	.word	0x08000c85
 8000bf4:	08000cd3 	.word	0x08000cd3
 8000bf8:	08000c97 	.word	0x08000c97
 8000bfc:	08000cd3 	.word	0x08000cd3
 8000c00:	08000ca1 	.word	0x08000ca1
 8000c04:	08000cd3 	.word	0x08000cd3
 8000c08:	08000cab 	.word	0x08000cab
 8000c0c:	08000cbf 	.word	0x08000cbf
 8000c10:	08000cb5 	.word	0x08000cb5
 8000c14:	08000cc9 	.word	0x08000cc9
 8000c18:	08000cd3 	.word	0x08000cd3
 8000c1c:	08000cd3 	.word	0x08000cd3
 8000c20:	08000cd3 	.word	0x08000cd3
 8000c24:	08000cd3 	.word	0x08000cd3
 8000c28:	08000cd3 	.word	0x08000cd3
 8000c2c:	08000cd3 	.word	0x08000cd3
 8000c30:	08000cd3 	.word	0x08000cd3
 8000c34:	08000cd3 	.word	0x08000cd3
 8000c38:	08000cd3 	.word	0x08000cd3
 8000c3c:	08000cd3 	.word	0x08000cd3
 8000c40:	08000cd3 	.word	0x08000cd3
 8000c44:	08000cd3 	.word	0x08000cd3
 8000c48:	08000cd3 	.word	0x08000cd3
 8000c4c:	08000cd3 	.word	0x08000cd3
 8000c50:	08000cd3 	.word	0x08000cd3
 8000c54:	08000cd3 	.word	0x08000cd3
 8000c58:	08000cd3 	.word	0x08000cd3
 8000c5c:	08000cd3 	.word	0x08000cd3
 8000c60:	08000cd3 	.word	0x08000cd3
 8000c64:	08000cd3 	.word	0x08000cd3
 8000c68:	08000cd3 	.word	0x08000cd3
 8000c6c:	08000cd3 	.word	0x08000cd3
 8000c70:	08000cd3 	.word	0x08000cd3
 8000c74:	08000cd3 	.word	0x08000cd3
 8000c78:	08000cd3 	.word	0x08000cd3
 8000c7c:	08000cd3 	.word	0x08000cd3
 8000c80:	08000c8d 	.word	0x08000c8d
		case RDCFGA:
			reg_buf = &(self->cfga_bfr);
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	33c2      	adds	r3, #194	; 0xc2
 8000c88:	60fb      	str	r3, [r7, #12]
			break;
 8000c8a:	e023      	b.n	8000cd4 <Ltc6813_read_reg+0x100>
		case RDCFGB:
			reg_buf = &(self->cfgb_bfr);
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	f203 1327 	addw	r3, r3, #295	; 0x127
 8000c92:	60fb      	str	r3, [r7, #12]
			break;
 8000c94:	e01e      	b.n	8000cd4 <Ltc6813_read_reg+0x100>
		case RDCVA:
			reg_buf = &(self->cva_bfr);
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8000c9c:	60fb      	str	r3, [r7, #12]
			break;
 8000c9e:	e019      	b.n	8000cd4 <Ltc6813_read_reg+0x100>
		case RDCVB:
			reg_buf = &(self->cvb_bfr);
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	f203 13f1 	addw	r3, r3, #497	; 0x1f1
 8000ca6:	60fb      	str	r3, [r7, #12]
			break;
 8000ca8:	e014      	b.n	8000cd4 <Ltc6813_read_reg+0x100>
		case RDCVC:
			reg_buf = &(self->cvc_bfr);
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	f203 2356 	addw	r3, r3, #598	; 0x256
 8000cb0:	60fb      	str	r3, [r7, #12]
			break;
 8000cb2:	e00f      	b.n	8000cd4 <Ltc6813_read_reg+0x100>
		case RDCVD:
			reg_buf = &(self->cvd_bfr);
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	f203 23bb 	addw	r3, r3, #699	; 0x2bb
 8000cba:	60fb      	str	r3, [r7, #12]
			break;
 8000cbc:	e00a      	b.n	8000cd4 <Ltc6813_read_reg+0x100>
		case RDCVE:
			reg_buf = &(self->cve_bfr);
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	f503 7348 	add.w	r3, r3, #800	; 0x320
 8000cc4:	60fb      	str	r3, [r7, #12]
			break;
 8000cc6:	e005      	b.n	8000cd4 <Ltc6813_read_reg+0x100>
		case RDCVF:
			reg_buf = &(self->cvf_bfr);
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	f203 3385 	addw	r3, r3, #901	; 0x385
 8000cce:	60fb      	str	r3, [r7, #12]
			break;
 8000cd0:	e000      	b.n	8000cd4 <Ltc6813_read_reg+0x100>
		default:
			break;
 8000cd2:	bf00      	nop
	}

	Buffer_clear(reg_buf);
 8000cd4:	68f8      	ldr	r0, [r7, #12]
 8000cd6:	f7ff fdbf 	bl	8000858 <Buffer_clear>

	reg_buf->len = 8;
 8000cda:	68fb      	ldr	r3, [r7, #12]
 8000cdc:	2208      	movs	r2, #8
 8000cde:	701a      	strb	r2, [r3, #0]

	Ltc6813_cs_low(self);
 8000ce0:	6878      	ldr	r0, [r7, #4]
 8000ce2:	f7ff feb9 	bl	8000a58 <Ltc6813_cs_low>

	Ltc6813_send_cmd(self, reg_cmd);
 8000ce6:	78fb      	ldrb	r3, [r7, #3]
 8000ce8:	b29b      	uxth	r3, r3
 8000cea:	4619      	mov	r1, r3
 8000cec:	6878      	ldr	r0, [r7, #4]
 8000cee:	f7ff ff3d 	bl	8000b6c <Ltc6813_send_cmd>
	HAL_SPI_Receive(&self->_spi_interface, reg_buf->data, reg_buf->len, self->timeout);
 8000cf2:	6878      	ldr	r0, [r7, #4]
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	1c59      	adds	r1, r3, #1
 8000cf8:	68fb      	ldr	r3, [r7, #12]
 8000cfa:	781b      	ldrb	r3, [r3, #0]
 8000cfc:	b29a      	uxth	r2, r3
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	f8d3 33ec 	ldr.w	r3, [r3, #1004]	; 0x3ec
 8000d04:	f002 fd6b 	bl	80037de <HAL_SPI_Receive>

	Ltc6813_cs_high(self);
 8000d08:	6878      	ldr	r0, [r7, #4]
 8000d0a:	f7ff feba 	bl	8000a82 <Ltc6813_cs_high>

	uint8_t pec_success = Buffer_check_pec(reg_buf);
 8000d0e:	68f8      	ldr	r0, [r7, #12]
 8000d10:	f7ff fd14 	bl	800073c <Buffer_check_pec>
 8000d14:	4603      	mov	r3, r0
 8000d16:	72fb      	strb	r3, [r7, #11]
	reg_buf->len = 6;
 8000d18:	68fb      	ldr	r3, [r7, #12]
 8000d1a:	2206      	movs	r2, #6
 8000d1c:	701a      	strb	r2, [r3, #0]

	return pec_success;
 8000d1e:	7afb      	ldrb	r3, [r7, #11]

}
 8000d20:	4618      	mov	r0, r3
 8000d22:	3710      	adds	r7, #16
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bd80      	pop	{r7, pc}

08000d28 <Ltc6813_read_cfga>:

uint8_t Ltc6813_read_cfga(Ltc6813* self) {
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b082      	sub	sp, #8
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
	return Ltc6813_read_reg(self, RDCFGA);
 8000d30:	2102      	movs	r1, #2
 8000d32:	6878      	ldr	r0, [r7, #4]
 8000d34:	f7ff ff4e 	bl	8000bd4 <Ltc6813_read_reg>
 8000d38:	4603      	mov	r3, r0
}
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	3708      	adds	r7, #8
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd80      	pop	{r7, pc}

08000d42 <Ltc6813_write_cfga>:

uint8_t Ltc6813_read_cfgb(Ltc6813* self) {
	return Ltc6813_read_reg(self, RDCFGB);
}

void Ltc6813_write_cfga(Ltc6813* self) {
 8000d42:	b580      	push	{r7, lr}
 8000d44:	b082      	sub	sp, #8
 8000d46:	af00      	add	r7, sp, #0
 8000d48:	6078      	str	r0, [r7, #4]

	Buffer_add_pec(&(self->cfga_bfr));
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	33c2      	adds	r3, #194	; 0xc2
 8000d4e:	4618      	mov	r0, r3
 8000d50:	f7ff fcb0 	bl	80006b4 <Buffer_add_pec>

	Ltc6813_cs_low(self);
 8000d54:	6878      	ldr	r0, [r7, #4]
 8000d56:	f7ff fe7f 	bl	8000a58 <Ltc6813_cs_low>

	Ltc6813_send_cmd(self, WRCFGA);
 8000d5a:	2101      	movs	r1, #1
 8000d5c:	6878      	ldr	r0, [r7, #4]
 8000d5e:	f7ff ff05 	bl	8000b6c <Ltc6813_send_cmd>
	HAL_SPI_Transmit(&self->_spi_interface, self->cfga_bfr.data, self->cfga_bfr.len, self->timeout);
 8000d62:	6878      	ldr	r0, [r7, #4]
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	f103 01c3 	add.w	r1, r3, #195	; 0xc3
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	f893 30c2 	ldrb.w	r3, [r3, #194]	; 0xc2
 8000d70:	b29a      	uxth	r2, r3
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	f8d3 33ec 	ldr.w	r3, [r3, #1004]	; 0x3ec
 8000d78:	f002 fbf5 	bl	8003566 <HAL_SPI_Transmit>

	Ltc6813_cs_high(self);
 8000d7c:	6878      	ldr	r0, [r7, #4]
 8000d7e:	f7ff fe80 	bl	8000a82 <Ltc6813_cs_high>

	self->cfga_bfr.len = 6;
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	2206      	movs	r2, #6
 8000d86:	f883 20c2 	strb.w	r2, [r3, #194]	; 0xc2
}
 8000d8a:	bf00      	nop
 8000d8c:	3708      	adds	r7, #8
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}

08000d92 <Ltc6813_read_adc>:

uint8_t Ltc6813_read_adc(Ltc6813* self, uint16_t mode) {
 8000d92:	b580      	push	{r7, lr}
 8000d94:	b084      	sub	sp, #16
 8000d96:	af00      	add	r7, sp, #0
 8000d98:	6078      	str	r0, [r7, #4]
 8000d9a:	460b      	mov	r3, r1
 8000d9c:	807b      	strh	r3, [r7, #2]

	// Enter REFUP by waiting t(refup). Should be 4.4 ms, but can only delay integer ticks (1ms/tick)
	osDelay(5);
 8000d9e:	2005      	movs	r0, #5
 8000da0:	f004 ffda 	bl	8005d58 <osDelay>

	Ltc6813_cs_low(self);
 8000da4:	6878      	ldr	r0, [r7, #4]
 8000da6:	f7ff fe57 	bl	8000a58 <Ltc6813_cs_low>

	Ltc6813_send_cmd(self, mode);
 8000daa:	887b      	ldrh	r3, [r7, #2]
 8000dac:	4619      	mov	r1, r3
 8000dae:	6878      	ldr	r0, [r7, #4]
 8000db0:	f7ff fedc 	bl	8000b6c <Ltc6813_send_cmd>

	uint32_t delay = FILTERED_ADC_DELAY;
 8000db4:	23ca      	movs	r3, #202	; 0xca
 8000db6:	60fb      	str	r3, [r7, #12]

	if (mode == FAST_ADC) {
 8000db8:	887b      	ldrh	r3, [r7, #2]
 8000dba:	f5b3 7f38 	cmp.w	r3, #736	; 0x2e0
 8000dbe:	d102      	bne.n	8000dc6 <Ltc6813_read_adc+0x34>
		delay = FAST_ADC_DELAY;
 8000dc0:	2302      	movs	r3, #2
 8000dc2:	60fb      	str	r3, [r7, #12]
 8000dc4:	e00c      	b.n	8000de0 <Ltc6813_read_adc+0x4e>
	} else if (mode == NORMAL_ADC) {
 8000dc6:	887b      	ldrh	r3, [r7, #2]
 8000dc8:	f5b3 7f58 	cmp.w	r3, #864	; 0x360
 8000dcc:	d102      	bne.n	8000dd4 <Ltc6813_read_adc+0x42>
		delay = NORMAL_ADC_DELAY;
 8000dce:	2303      	movs	r3, #3
 8000dd0:	60fb      	str	r3, [r7, #12]
 8000dd2:	e005      	b.n	8000de0 <Ltc6813_read_adc+0x4e>
	} else if (mode == FILTERED_ADC) {
 8000dd4:	887b      	ldrh	r3, [r7, #2]
 8000dd6:	f5b3 7f78 	cmp.w	r3, #992	; 0x3e0
 8000dda:	d101      	bne.n	8000de0 <Ltc6813_read_adc+0x4e>
		delay = FILTERED_ADC_DELAY;
 8000ddc:	23ca      	movs	r3, #202	; 0xca
 8000dde:	60fb      	str	r3, [r7, #12]
	}

	osDelay(delay);
 8000de0:	68f8      	ldr	r0, [r7, #12]
 8000de2:	f004 ffb9 	bl	8005d58 <osDelay>

	uint8_t success = 1;
 8000de6:	2301      	movs	r3, #1
 8000de8:	72fb      	strb	r3, [r7, #11]

	success &= Ltc6813_read_reg(self, RDCVA);
 8000dea:	2104      	movs	r1, #4
 8000dec:	6878      	ldr	r0, [r7, #4]
 8000dee:	f7ff fef1 	bl	8000bd4 <Ltc6813_read_reg>
 8000df2:	4603      	mov	r3, r0
 8000df4:	461a      	mov	r2, r3
 8000df6:	7afb      	ldrb	r3, [r7, #11]
 8000df8:	4013      	ands	r3, r2
 8000dfa:	72fb      	strb	r3, [r7, #11]
	success &= Ltc6813_read_reg(self, RDCVB);
 8000dfc:	2106      	movs	r1, #6
 8000dfe:	6878      	ldr	r0, [r7, #4]
 8000e00:	f7ff fee8 	bl	8000bd4 <Ltc6813_read_reg>
 8000e04:	4603      	mov	r3, r0
 8000e06:	461a      	mov	r2, r3
 8000e08:	7afb      	ldrb	r3, [r7, #11]
 8000e0a:	4013      	ands	r3, r2
 8000e0c:	72fb      	strb	r3, [r7, #11]
	success &= Ltc6813_read_reg(self, RDCVC);
 8000e0e:	2108      	movs	r1, #8
 8000e10:	6878      	ldr	r0, [r7, #4]
 8000e12:	f7ff fedf 	bl	8000bd4 <Ltc6813_read_reg>
 8000e16:	4603      	mov	r3, r0
 8000e18:	461a      	mov	r2, r3
 8000e1a:	7afb      	ldrb	r3, [r7, #11]
 8000e1c:	4013      	ands	r3, r2
 8000e1e:	72fb      	strb	r3, [r7, #11]
	success &= Ltc6813_read_reg(self, RDCVD);
 8000e20:	210a      	movs	r1, #10
 8000e22:	6878      	ldr	r0, [r7, #4]
 8000e24:	f7ff fed6 	bl	8000bd4 <Ltc6813_read_reg>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	461a      	mov	r2, r3
 8000e2c:	7afb      	ldrb	r3, [r7, #11]
 8000e2e:	4013      	ands	r3, r2
 8000e30:	72fb      	strb	r3, [r7, #11]
	success &= Ltc6813_read_reg(self, RDCVE);
 8000e32:	2109      	movs	r1, #9
 8000e34:	6878      	ldr	r0, [r7, #4]
 8000e36:	f7ff fecd 	bl	8000bd4 <Ltc6813_read_reg>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	461a      	mov	r2, r3
 8000e3e:	7afb      	ldrb	r3, [r7, #11]
 8000e40:	4013      	ands	r3, r2
 8000e42:	72fb      	strb	r3, [r7, #11]
	success &= Ltc6813_read_reg(self, RDCVF);
 8000e44:	210b      	movs	r1, #11
 8000e46:	6878      	ldr	r0, [r7, #4]
 8000e48:	f7ff fec4 	bl	8000bd4 <Ltc6813_read_reg>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	461a      	mov	r2, r3
 8000e50:	7afb      	ldrb	r3, [r7, #11]
 8000e52:	4013      	ands	r3, r2
 8000e54:	72fb      	strb	r3, [r7, #11]

	return success;
 8000e56:	7afb      	ldrb	r3, [r7, #11]

}
 8000e58:	4618      	mov	r0, r3
 8000e5a:	3710      	adds	r7, #16
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	bd80      	pop	{r7, pc}

08000e60 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e64:	f001 f800 	bl	8001e68 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e68:	f000 f816 	bl	8000e98 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e6c:	f000 fae4 	bl	8001438 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000e70:	f000 f9fc 	bl	800126c <MX_TIM2_Init>
  MX_ADC1_Init();
 8000e74:	f000 f87a 	bl	8000f6c <MX_ADC1_Init>
  MX_SPI1_Init();
 8000e78:	f000 f900 	bl	800107c <MX_SPI1_Init>
  MX_TIM1_Init();
 8000e7c:	f000 f934 	bl	80010e8 <MX_TIM1_Init>
  MX_TIM3_Init();
 8000e80:	f000 fa40 	bl	8001304 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8000e84:	f000 faae 	bl	80013e4 <MX_USART1_UART_Init>
  MX_CAN1_Init();
 8000e88:	f000 f8c2 	bl	8001010 <MX_CAN1_Init>
  /* USER CODE BEGIN 2 */
  return bms_entry();
 8000e8c:	f7ff fb7e 	bl	800058c <bms_entry>
 8000e90:	4603      	mov	r3, r0
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}
 8000e92:	4618      	mov	r0, r3
 8000e94:	bd80      	pop	{r7, pc}
	...

08000e98 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b094      	sub	sp, #80	; 0x50
 8000e9c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e9e:	f107 0320 	add.w	r3, r7, #32
 8000ea2:	2230      	movs	r2, #48	; 0x30
 8000ea4:	2100      	movs	r1, #0
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	f007 fc00 	bl	80086ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000eac:	f107 030c 	add.w	r3, r7, #12
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	601a      	str	r2, [r3, #0]
 8000eb4:	605a      	str	r2, [r3, #4]
 8000eb6:	609a      	str	r2, [r3, #8]
 8000eb8:	60da      	str	r2, [r3, #12]
 8000eba:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	60bb      	str	r3, [r7, #8]
 8000ec0:	4b28      	ldr	r3, [pc, #160]	; (8000f64 <SystemClock_Config+0xcc>)
 8000ec2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ec4:	4a27      	ldr	r2, [pc, #156]	; (8000f64 <SystemClock_Config+0xcc>)
 8000ec6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000eca:	6413      	str	r3, [r2, #64]	; 0x40
 8000ecc:	4b25      	ldr	r3, [pc, #148]	; (8000f64 <SystemClock_Config+0xcc>)
 8000ece:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ed0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ed4:	60bb      	str	r3, [r7, #8]
 8000ed6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ed8:	2300      	movs	r3, #0
 8000eda:	607b      	str	r3, [r7, #4]
 8000edc:	4b22      	ldr	r3, [pc, #136]	; (8000f68 <SystemClock_Config+0xd0>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	4a21      	ldr	r2, [pc, #132]	; (8000f68 <SystemClock_Config+0xd0>)
 8000ee2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ee6:	6013      	str	r3, [r2, #0]
 8000ee8:	4b1f      	ldr	r3, [pc, #124]	; (8000f68 <SystemClock_Config+0xd0>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ef0:	607b      	str	r3, [r7, #4]
 8000ef2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ef4:	2301      	movs	r3, #1
 8000ef6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ef8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000efc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000efe:	2302      	movs	r3, #2
 8000f00:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f02:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000f06:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000f08:	2308      	movs	r3, #8
 8000f0a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 160;
 8000f0c:	23a0      	movs	r3, #160	; 0xa0
 8000f0e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f10:	2302      	movs	r3, #2
 8000f12:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000f14:	2304      	movs	r3, #4
 8000f16:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f18:	f107 0320 	add.w	r3, r7, #32
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	f001 fdf5 	bl	8002b0c <HAL_RCC_OscConfig>
 8000f22:	4603      	mov	r3, r0
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d001      	beq.n	8000f2c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000f28:	f000 fb22 	bl	8001570 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f2c:	230f      	movs	r3, #15
 8000f2e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f30:	2302      	movs	r3, #2
 8000f32:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f34:	2300      	movs	r3, #0
 8000f36:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000f38:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000f3c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000f3e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f42:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000f44:	f107 030c 	add.w	r3, r7, #12
 8000f48:	2105      	movs	r1, #5
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	f002 f856 	bl	8002ffc <HAL_RCC_ClockConfig>
 8000f50:	4603      	mov	r3, r0
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d001      	beq.n	8000f5a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000f56:	f000 fb0b 	bl	8001570 <Error_Handler>
  }
}
 8000f5a:	bf00      	nop
 8000f5c:	3750      	adds	r7, #80	; 0x50
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	40023800 	.word	0x40023800
 8000f68:	40007000 	.word	0x40007000

08000f6c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b084      	sub	sp, #16
 8000f70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000f72:	463b      	mov	r3, r7
 8000f74:	2200      	movs	r2, #0
 8000f76:	601a      	str	r2, [r3, #0]
 8000f78:	605a      	str	r2, [r3, #4]
 8000f7a:	609a      	str	r2, [r3, #8]
 8000f7c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000f7e:	4b21      	ldr	r3, [pc, #132]	; (8001004 <MX_ADC1_Init+0x98>)
 8000f80:	4a21      	ldr	r2, [pc, #132]	; (8001008 <MX_ADC1_Init+0x9c>)
 8000f82:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000f84:	4b1f      	ldr	r3, [pc, #124]	; (8001004 <MX_ADC1_Init+0x98>)
 8000f86:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000f8a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000f8c:	4b1d      	ldr	r3, [pc, #116]	; (8001004 <MX_ADC1_Init+0x98>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000f92:	4b1c      	ldr	r3, [pc, #112]	; (8001004 <MX_ADC1_Init+0x98>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000f98:	4b1a      	ldr	r3, [pc, #104]	; (8001004 <MX_ADC1_Init+0x98>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f9e:	4b19      	ldr	r3, [pc, #100]	; (8001004 <MX_ADC1_Init+0x98>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000fa6:	4b17      	ldr	r3, [pc, #92]	; (8001004 <MX_ADC1_Init+0x98>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000fac:	4b15      	ldr	r3, [pc, #84]	; (8001004 <MX_ADC1_Init+0x98>)
 8000fae:	4a17      	ldr	r2, [pc, #92]	; (800100c <MX_ADC1_Init+0xa0>)
 8000fb0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000fb2:	4b14      	ldr	r3, [pc, #80]	; (8001004 <MX_ADC1_Init+0x98>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000fb8:	4b12      	ldr	r3, [pc, #72]	; (8001004 <MX_ADC1_Init+0x98>)
 8000fba:	2201      	movs	r2, #1
 8000fbc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000fbe:	4b11      	ldr	r3, [pc, #68]	; (8001004 <MX_ADC1_Init+0x98>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000fc6:	4b0f      	ldr	r3, [pc, #60]	; (8001004 <MX_ADC1_Init+0x98>)
 8000fc8:	2201      	movs	r2, #1
 8000fca:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000fcc:	480d      	ldr	r0, [pc, #52]	; (8001004 <MX_ADC1_Init+0x98>)
 8000fce:	f000 ff8d 	bl	8001eec <HAL_ADC_Init>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d001      	beq.n	8000fdc <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000fd8:	f000 faca 	bl	8001570 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000fdc:	2301      	movs	r3, #1
 8000fde:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000fe0:	2301      	movs	r3, #1
 8000fe2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fe8:	463b      	mov	r3, r7
 8000fea:	4619      	mov	r1, r3
 8000fec:	4805      	ldr	r0, [pc, #20]	; (8001004 <MX_ADC1_Init+0x98>)
 8000fee:	f000 ffc1 	bl	8001f74 <HAL_ADC_ConfigChannel>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d001      	beq.n	8000ffc <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000ff8:	f000 faba 	bl	8001570 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000ffc:	bf00      	nop
 8000ffe:	3710      	adds	r7, #16
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}
 8001004:	200049f8 	.word	0x200049f8
 8001008:	40012000 	.word	0x40012000
 800100c:	0f000001 	.word	0x0f000001

08001010 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001014:	4b17      	ldr	r3, [pc, #92]	; (8001074 <MX_CAN1_Init+0x64>)
 8001016:	4a18      	ldr	r2, [pc, #96]	; (8001078 <MX_CAN1_Init+0x68>)
 8001018:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 5;
 800101a:	4b16      	ldr	r3, [pc, #88]	; (8001074 <MX_CAN1_Init+0x64>)
 800101c:	2205      	movs	r2, #5
 800101e:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001020:	4b14      	ldr	r3, [pc, #80]	; (8001074 <MX_CAN1_Init+0x64>)
 8001022:	2200      	movs	r2, #0
 8001024:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001026:	4b13      	ldr	r3, [pc, #76]	; (8001074 <MX_CAN1_Init+0x64>)
 8001028:	2200      	movs	r2, #0
 800102a:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_13TQ;
 800102c:	4b11      	ldr	r3, [pc, #68]	; (8001074 <MX_CAN1_Init+0x64>)
 800102e:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 8001032:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8001034:	4b0f      	ldr	r3, [pc, #60]	; (8001074 <MX_CAN1_Init+0x64>)
 8001036:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800103a:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800103c:	4b0d      	ldr	r3, [pc, #52]	; (8001074 <MX_CAN1_Init+0x64>)
 800103e:	2200      	movs	r2, #0
 8001040:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8001042:	4b0c      	ldr	r3, [pc, #48]	; (8001074 <MX_CAN1_Init+0x64>)
 8001044:	2200      	movs	r2, #0
 8001046:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001048:	4b0a      	ldr	r3, [pc, #40]	; (8001074 <MX_CAN1_Init+0x64>)
 800104a:	2200      	movs	r2, #0
 800104c:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800104e:	4b09      	ldr	r3, [pc, #36]	; (8001074 <MX_CAN1_Init+0x64>)
 8001050:	2200      	movs	r2, #0
 8001052:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001054:	4b07      	ldr	r3, [pc, #28]	; (8001074 <MX_CAN1_Init+0x64>)
 8001056:	2200      	movs	r2, #0
 8001058:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800105a:	4b06      	ldr	r3, [pc, #24]	; (8001074 <MX_CAN1_Init+0x64>)
 800105c:	2200      	movs	r2, #0
 800105e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001060:	4804      	ldr	r0, [pc, #16]	; (8001074 <MX_CAN1_Init+0x64>)
 8001062:	f001 f9a5 	bl	80023b0 <HAL_CAN_Init>
 8001066:	4603      	mov	r3, r0
 8001068:	2b00      	cmp	r3, #0
 800106a:	d001      	beq.n	8001070 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 800106c:	f000 fa80 	bl	8001570 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8001070:	bf00      	nop
 8001072:	bd80      	pop	{r7, pc}
 8001074:	20004b6c 	.word	0x20004b6c
 8001078:	40006400 	.word	0x40006400

0800107c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001080:	4b17      	ldr	r3, [pc, #92]	; (80010e0 <MX_SPI1_Init+0x64>)
 8001082:	4a18      	ldr	r2, [pc, #96]	; (80010e4 <MX_SPI1_Init+0x68>)
 8001084:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001086:	4b16      	ldr	r3, [pc, #88]	; (80010e0 <MX_SPI1_Init+0x64>)
 8001088:	f44f 7282 	mov.w	r2, #260	; 0x104
 800108c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800108e:	4b14      	ldr	r3, [pc, #80]	; (80010e0 <MX_SPI1_Init+0x64>)
 8001090:	2200      	movs	r2, #0
 8001092:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001094:	4b12      	ldr	r3, [pc, #72]	; (80010e0 <MX_SPI1_Init+0x64>)
 8001096:	2200      	movs	r2, #0
 8001098:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800109a:	4b11      	ldr	r3, [pc, #68]	; (80010e0 <MX_SPI1_Init+0x64>)
 800109c:	2202      	movs	r2, #2
 800109e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80010a0:	4b0f      	ldr	r3, [pc, #60]	; (80010e0 <MX_SPI1_Init+0x64>)
 80010a2:	2201      	movs	r2, #1
 80010a4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80010a6:	4b0e      	ldr	r3, [pc, #56]	; (80010e0 <MX_SPI1_Init+0x64>)
 80010a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80010ac:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80010ae:	4b0c      	ldr	r3, [pc, #48]	; (80010e0 <MX_SPI1_Init+0x64>)
 80010b0:	2230      	movs	r2, #48	; 0x30
 80010b2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80010b4:	4b0a      	ldr	r3, [pc, #40]	; (80010e0 <MX_SPI1_Init+0x64>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80010ba:	4b09      	ldr	r3, [pc, #36]	; (80010e0 <MX_SPI1_Init+0x64>)
 80010bc:	2200      	movs	r2, #0
 80010be:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80010c0:	4b07      	ldr	r3, [pc, #28]	; (80010e0 <MX_SPI1_Init+0x64>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80010c6:	4b06      	ldr	r3, [pc, #24]	; (80010e0 <MX_SPI1_Init+0x64>)
 80010c8:	220a      	movs	r2, #10
 80010ca:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80010cc:	4804      	ldr	r0, [pc, #16]	; (80010e0 <MX_SPI1_Init+0x64>)
 80010ce:	f002 f9c1 	bl	8003454 <HAL_SPI_Init>
 80010d2:	4603      	mov	r3, r0
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d001      	beq.n	80010dc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80010d8:	f000 fa4a 	bl	8001570 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80010dc:	bf00      	nop
 80010de:	bd80      	pop	{r7, pc}
 80010e0:	20004acc 	.word	0x20004acc
 80010e4:	40013000 	.word	0x40013000

080010e8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b096      	sub	sp, #88	; 0x58
 80010ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010ee:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80010f2:	2200      	movs	r2, #0
 80010f4:	601a      	str	r2, [r3, #0]
 80010f6:	605a      	str	r2, [r3, #4]
 80010f8:	609a      	str	r2, [r3, #8]
 80010fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010fc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001100:	2200      	movs	r2, #0
 8001102:	601a      	str	r2, [r3, #0]
 8001104:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001106:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800110a:	2200      	movs	r2, #0
 800110c:	601a      	str	r2, [r3, #0]
 800110e:	605a      	str	r2, [r3, #4]
 8001110:	609a      	str	r2, [r3, #8]
 8001112:	60da      	str	r2, [r3, #12]
 8001114:	611a      	str	r2, [r3, #16]
 8001116:	615a      	str	r2, [r3, #20]
 8001118:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800111a:	1d3b      	adds	r3, r7, #4
 800111c:	2220      	movs	r2, #32
 800111e:	2100      	movs	r1, #0
 8001120:	4618      	mov	r0, r3
 8001122:	f007 fac3 	bl	80086ac <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001126:	4b4f      	ldr	r3, [pc, #316]	; (8001264 <MX_TIM1_Init+0x17c>)
 8001128:	4a4f      	ldr	r2, [pc, #316]	; (8001268 <MX_TIM1_Init+0x180>)
 800112a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 159;
 800112c:	4b4d      	ldr	r3, [pc, #308]	; (8001264 <MX_TIM1_Init+0x17c>)
 800112e:	229f      	movs	r2, #159	; 0x9f
 8001130:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001132:	4b4c      	ldr	r3, [pc, #304]	; (8001264 <MX_TIM1_Init+0x17c>)
 8001134:	2200      	movs	r2, #0
 8001136:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001138:	4b4a      	ldr	r3, [pc, #296]	; (8001264 <MX_TIM1_Init+0x17c>)
 800113a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800113e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001140:	4b48      	ldr	r3, [pc, #288]	; (8001264 <MX_TIM1_Init+0x17c>)
 8001142:	2200      	movs	r2, #0
 8001144:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001146:	4b47      	ldr	r3, [pc, #284]	; (8001264 <MX_TIM1_Init+0x17c>)
 8001148:	2200      	movs	r2, #0
 800114a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800114c:	4b45      	ldr	r3, [pc, #276]	; (8001264 <MX_TIM1_Init+0x17c>)
 800114e:	2200      	movs	r2, #0
 8001150:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001152:	4844      	ldr	r0, [pc, #272]	; (8001264 <MX_TIM1_Init+0x17c>)
 8001154:	f002 ff26 	bl	8003fa4 <HAL_TIM_Base_Init>
 8001158:	4603      	mov	r3, r0
 800115a:	2b00      	cmp	r3, #0
 800115c:	d001      	beq.n	8001162 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800115e:	f000 fa07 	bl	8001570 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001162:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001166:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001168:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800116c:	4619      	mov	r1, r3
 800116e:	483d      	ldr	r0, [pc, #244]	; (8001264 <MX_TIM1_Init+0x17c>)
 8001170:	f003 fbfe 	bl	8004970 <HAL_TIM_ConfigClockSource>
 8001174:	4603      	mov	r3, r0
 8001176:	2b00      	cmp	r3, #0
 8001178:	d001      	beq.n	800117e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800117a:	f000 f9f9 	bl	8001570 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800117e:	4839      	ldr	r0, [pc, #228]	; (8001264 <MX_TIM1_Init+0x17c>)
 8001180:	f003 f891 	bl	80042a6 <HAL_TIM_PWM_Init>
 8001184:	4603      	mov	r3, r0
 8001186:	2b00      	cmp	r3, #0
 8001188:	d001      	beq.n	800118e <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800118a:	f000 f9f1 	bl	8001570 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 800118e:	4835      	ldr	r0, [pc, #212]	; (8001264 <MX_TIM1_Init+0x17c>)
 8001190:	f003 f830 	bl	80041f4 <HAL_TIM_OC_Init>
 8001194:	4603      	mov	r3, r0
 8001196:	2b00      	cmp	r3, #0
 8001198:	d001      	beq.n	800119e <MX_TIM1_Init+0xb6>
  {
    Error_Handler();
 800119a:	f000 f9e9 	bl	8001570 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800119e:	2300      	movs	r3, #0
 80011a0:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011a2:	2300      	movs	r3, #0
 80011a4:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80011a6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80011aa:	4619      	mov	r1, r3
 80011ac:	482d      	ldr	r0, [pc, #180]	; (8001264 <MX_TIM1_Init+0x17c>)
 80011ae:	f004 f8df 	bl	8005370 <HAL_TIMEx_MasterConfigSynchronization>
 80011b2:	4603      	mov	r3, r0
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d001      	beq.n	80011bc <MX_TIM1_Init+0xd4>
  {
    Error_Handler();
 80011b8:	f000 f9da 	bl	8001570 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80011bc:	2360      	movs	r3, #96	; 0x60
 80011be:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80011c0:	2300      	movs	r3, #0
 80011c2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011c4:	2300      	movs	r3, #0
 80011c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80011c8:	2300      	movs	r3, #0
 80011ca:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011cc:	2300      	movs	r3, #0
 80011ce:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80011d0:	2300      	movs	r3, #0
 80011d2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80011d4:	2300      	movs	r3, #0
 80011d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80011d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011dc:	2200      	movs	r2, #0
 80011de:	4619      	mov	r1, r3
 80011e0:	4820      	ldr	r0, [pc, #128]	; (8001264 <MX_TIM1_Init+0x17c>)
 80011e2:	f003 fb07 	bl	80047f4 <HAL_TIM_PWM_ConfigChannel>
 80011e6:	4603      	mov	r3, r0
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d001      	beq.n	80011f0 <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 80011ec:	f000 f9c0 	bl	8001570 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80011f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011f4:	2204      	movs	r2, #4
 80011f6:	4619      	mov	r1, r3
 80011f8:	481a      	ldr	r0, [pc, #104]	; (8001264 <MX_TIM1_Init+0x17c>)
 80011fa:	f003 fafb 	bl	80047f4 <HAL_TIM_PWM_ConfigChannel>
 80011fe:	4603      	mov	r3, r0
 8001200:	2b00      	cmp	r3, #0
 8001202:	d001      	beq.n	8001208 <MX_TIM1_Init+0x120>
  {
    Error_Handler();
 8001204:	f000 f9b4 	bl	8001570 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001208:	2300      	movs	r3, #0
 800120a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800120c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001210:	2208      	movs	r2, #8
 8001212:	4619      	mov	r1, r3
 8001214:	4813      	ldr	r0, [pc, #76]	; (8001264 <MX_TIM1_Init+0x17c>)
 8001216:	f003 fa01 	bl	800461c <HAL_TIM_OC_ConfigChannel>
 800121a:	4603      	mov	r3, r0
 800121c:	2b00      	cmp	r3, #0
 800121e:	d001      	beq.n	8001224 <MX_TIM1_Init+0x13c>
  {
    Error_Handler();
 8001220:	f000 f9a6 	bl	8001570 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001224:	2300      	movs	r3, #0
 8001226:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001228:	2300      	movs	r3, #0
 800122a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800122c:	2300      	movs	r3, #0
 800122e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001230:	2300      	movs	r3, #0
 8001232:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001234:	2300      	movs	r3, #0
 8001236:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001238:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800123c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800123e:	2300      	movs	r3, #0
 8001240:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001242:	1d3b      	adds	r3, r7, #4
 8001244:	4619      	mov	r1, r3
 8001246:	4807      	ldr	r0, [pc, #28]	; (8001264 <MX_TIM1_Init+0x17c>)
 8001248:	f004 f90e 	bl	8005468 <HAL_TIMEx_ConfigBreakDeadTime>
 800124c:	4603      	mov	r3, r0
 800124e:	2b00      	cmp	r3, #0
 8001250:	d001      	beq.n	8001256 <MX_TIM1_Init+0x16e>
  {
    Error_Handler();
 8001252:	f000 f98d 	bl	8001570 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001256:	4803      	ldr	r0, [pc, #12]	; (8001264 <MX_TIM1_Init+0x17c>)
 8001258:	f000 fb2e 	bl	80018b8 <HAL_TIM_MspPostInit>

}
 800125c:	bf00      	nop
 800125e:	3758      	adds	r7, #88	; 0x58
 8001260:	46bd      	mov	sp, r7
 8001262:	bd80      	pop	{r7, pc}
 8001264:	20004a84 	.word	0x20004a84
 8001268:	40010000 	.word	0x40010000

0800126c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b086      	sub	sp, #24
 8001270:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001272:	f107 0308 	add.w	r3, r7, #8
 8001276:	2200      	movs	r2, #0
 8001278:	601a      	str	r2, [r3, #0]
 800127a:	605a      	str	r2, [r3, #4]
 800127c:	609a      	str	r2, [r3, #8]
 800127e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001280:	463b      	mov	r3, r7
 8001282:	2200      	movs	r2, #0
 8001284:	601a      	str	r2, [r3, #0]
 8001286:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001288:	4b1d      	ldr	r3, [pc, #116]	; (8001300 <MX_TIM2_Init+0x94>)
 800128a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800128e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 79;
 8001290:	4b1b      	ldr	r3, [pc, #108]	; (8001300 <MX_TIM2_Init+0x94>)
 8001292:	224f      	movs	r2, #79	; 0x4f
 8001294:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001296:	4b1a      	ldr	r3, [pc, #104]	; (8001300 <MX_TIM2_Init+0x94>)
 8001298:	2200      	movs	r2, #0
 800129a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800129c:	4b18      	ldr	r3, [pc, #96]	; (8001300 <MX_TIM2_Init+0x94>)
 800129e:	f04f 32ff 	mov.w	r2, #4294967295
 80012a2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012a4:	4b16      	ldr	r3, [pc, #88]	; (8001300 <MX_TIM2_Init+0x94>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012aa:	4b15      	ldr	r3, [pc, #84]	; (8001300 <MX_TIM2_Init+0x94>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80012b0:	4813      	ldr	r0, [pc, #76]	; (8001300 <MX_TIM2_Init+0x94>)
 80012b2:	f002 fe77 	bl	8003fa4 <HAL_TIM_Base_Init>
 80012b6:	4603      	mov	r3, r0
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d001      	beq.n	80012c0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80012bc:	f000 f958 	bl	8001570 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012c4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80012c6:	f107 0308 	add.w	r3, r7, #8
 80012ca:	4619      	mov	r1, r3
 80012cc:	480c      	ldr	r0, [pc, #48]	; (8001300 <MX_TIM2_Init+0x94>)
 80012ce:	f003 fb4f 	bl	8004970 <HAL_TIM_ConfigClockSource>
 80012d2:	4603      	mov	r3, r0
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d001      	beq.n	80012dc <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80012d8:	f000 f94a 	bl	8001570 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012dc:	2300      	movs	r3, #0
 80012de:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012e0:	2300      	movs	r3, #0
 80012e2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80012e4:	463b      	mov	r3, r7
 80012e6:	4619      	mov	r1, r3
 80012e8:	4805      	ldr	r0, [pc, #20]	; (8001300 <MX_TIM2_Init+0x94>)
 80012ea:	f004 f841 	bl	8005370 <HAL_TIMEx_MasterConfigSynchronization>
 80012ee:	4603      	mov	r3, r0
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d001      	beq.n	80012f8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80012f4:	f000 f93c 	bl	8001570 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80012f8:	bf00      	nop
 80012fa:	3718      	adds	r7, #24
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}
 8001300:	20004b24 	.word	0x20004b24

08001304 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b08a      	sub	sp, #40	; 0x28
 8001308:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800130a:	f107 0318 	add.w	r3, r7, #24
 800130e:	2200      	movs	r2, #0
 8001310:	601a      	str	r2, [r3, #0]
 8001312:	605a      	str	r2, [r3, #4]
 8001314:	609a      	str	r2, [r3, #8]
 8001316:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001318:	f107 0310 	add.w	r3, r7, #16
 800131c:	2200      	movs	r2, #0
 800131e:	601a      	str	r2, [r3, #0]
 8001320:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001322:	463b      	mov	r3, r7
 8001324:	2200      	movs	r2, #0
 8001326:	601a      	str	r2, [r3, #0]
 8001328:	605a      	str	r2, [r3, #4]
 800132a:	609a      	str	r2, [r3, #8]
 800132c:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800132e:	4b2b      	ldr	r3, [pc, #172]	; (80013dc <MX_TIM3_Init+0xd8>)
 8001330:	4a2b      	ldr	r2, [pc, #172]	; (80013e0 <MX_TIM3_Init+0xdc>)
 8001332:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001334:	4b29      	ldr	r3, [pc, #164]	; (80013dc <MX_TIM3_Init+0xd8>)
 8001336:	2200      	movs	r2, #0
 8001338:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800133a:	4b28      	ldr	r3, [pc, #160]	; (80013dc <MX_TIM3_Init+0xd8>)
 800133c:	2200      	movs	r2, #0
 800133e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001340:	4b26      	ldr	r3, [pc, #152]	; (80013dc <MX_TIM3_Init+0xd8>)
 8001342:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001346:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001348:	4b24      	ldr	r3, [pc, #144]	; (80013dc <MX_TIM3_Init+0xd8>)
 800134a:	2200      	movs	r2, #0
 800134c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800134e:	4b23      	ldr	r3, [pc, #140]	; (80013dc <MX_TIM3_Init+0xd8>)
 8001350:	2200      	movs	r2, #0
 8001352:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001354:	4821      	ldr	r0, [pc, #132]	; (80013dc <MX_TIM3_Init+0xd8>)
 8001356:	f002 fe25 	bl	8003fa4 <HAL_TIM_Base_Init>
 800135a:	4603      	mov	r3, r0
 800135c:	2b00      	cmp	r3, #0
 800135e:	d001      	beq.n	8001364 <MX_TIM3_Init+0x60>
  {
    Error_Handler();
 8001360:	f000 f906 	bl	8001570 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001364:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001368:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800136a:	f107 0318 	add.w	r3, r7, #24
 800136e:	4619      	mov	r1, r3
 8001370:	481a      	ldr	r0, [pc, #104]	; (80013dc <MX_TIM3_Init+0xd8>)
 8001372:	f003 fafd 	bl	8004970 <HAL_TIM_ConfigClockSource>
 8001376:	4603      	mov	r3, r0
 8001378:	2b00      	cmp	r3, #0
 800137a:	d001      	beq.n	8001380 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 800137c:	f000 f8f8 	bl	8001570 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8001380:	4816      	ldr	r0, [pc, #88]	; (80013dc <MX_TIM3_Init+0xd8>)
 8001382:	f002 ffe9 	bl	8004358 <HAL_TIM_IC_Init>
 8001386:	4603      	mov	r3, r0
 8001388:	2b00      	cmp	r3, #0
 800138a:	d001      	beq.n	8001390 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 800138c:	f000 f8f0 	bl	8001570 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001390:	2300      	movs	r3, #0
 8001392:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001394:	2300      	movs	r3, #0
 8001396:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001398:	f107 0310 	add.w	r3, r7, #16
 800139c:	4619      	mov	r1, r3
 800139e:	480f      	ldr	r0, [pc, #60]	; (80013dc <MX_TIM3_Init+0xd8>)
 80013a0:	f003 ffe6 	bl	8005370 <HAL_TIMEx_MasterConfigSynchronization>
 80013a4:	4603      	mov	r3, r0
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d001      	beq.n	80013ae <MX_TIM3_Init+0xaa>
  {
    Error_Handler();
 80013aa:	f000 f8e1 	bl	8001570 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80013ae:	2300      	movs	r3, #0
 80013b0:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80013b2:	2301      	movs	r3, #1
 80013b4:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80013b6:	2300      	movs	r3, #0
 80013b8:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80013ba:	2300      	movs	r3, #0
 80013bc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80013be:	463b      	mov	r3, r7
 80013c0:	2200      	movs	r2, #0
 80013c2:	4619      	mov	r1, r3
 80013c4:	4805      	ldr	r0, [pc, #20]	; (80013dc <MX_TIM3_Init+0xd8>)
 80013c6:	f003 f981 	bl	80046cc <HAL_TIM_IC_ConfigChannel>
 80013ca:	4603      	mov	r3, r0
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d001      	beq.n	80013d4 <MX_TIM3_Init+0xd0>
  {
    Error_Handler();
 80013d0:	f000 f8ce 	bl	8001570 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80013d4:	bf00      	nop
 80013d6:	3728      	adds	r7, #40	; 0x28
 80013d8:	46bd      	mov	sp, r7
 80013da:	bd80      	pop	{r7, pc}
 80013dc:	200049b0 	.word	0x200049b0
 80013e0:	40000400 	.word	0x40000400

080013e4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80013e8:	4b11      	ldr	r3, [pc, #68]	; (8001430 <MX_USART1_UART_Init+0x4c>)
 80013ea:	4a12      	ldr	r2, [pc, #72]	; (8001434 <MX_USART1_UART_Init+0x50>)
 80013ec:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80013ee:	4b10      	ldr	r3, [pc, #64]	; (8001430 <MX_USART1_UART_Init+0x4c>)
 80013f0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80013f4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80013f6:	4b0e      	ldr	r3, [pc, #56]	; (8001430 <MX_USART1_UART_Init+0x4c>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80013fc:	4b0c      	ldr	r3, [pc, #48]	; (8001430 <MX_USART1_UART_Init+0x4c>)
 80013fe:	2200      	movs	r2, #0
 8001400:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001402:	4b0b      	ldr	r3, [pc, #44]	; (8001430 <MX_USART1_UART_Init+0x4c>)
 8001404:	2200      	movs	r2, #0
 8001406:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001408:	4b09      	ldr	r3, [pc, #36]	; (8001430 <MX_USART1_UART_Init+0x4c>)
 800140a:	220c      	movs	r2, #12
 800140c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800140e:	4b08      	ldr	r3, [pc, #32]	; (8001430 <MX_USART1_UART_Init+0x4c>)
 8001410:	2200      	movs	r2, #0
 8001412:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001414:	4b06      	ldr	r3, [pc, #24]	; (8001430 <MX_USART1_UART_Init+0x4c>)
 8001416:	2200      	movs	r2, #0
 8001418:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800141a:	4805      	ldr	r0, [pc, #20]	; (8001430 <MX_USART1_UART_Init+0x4c>)
 800141c:	f004 f88a 	bl	8005534 <HAL_UART_Init>
 8001420:	4603      	mov	r3, r0
 8001422:	2b00      	cmp	r3, #0
 8001424:	d001      	beq.n	800142a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001426:	f000 f8a3 	bl	8001570 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800142a:	bf00      	nop
 800142c:	bd80      	pop	{r7, pc}
 800142e:	bf00      	nop
 8001430:	20004a40 	.word	0x20004a40
 8001434:	40011000 	.word	0x40011000

08001438 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b08a      	sub	sp, #40	; 0x28
 800143c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800143e:	f107 0314 	add.w	r3, r7, #20
 8001442:	2200      	movs	r2, #0
 8001444:	601a      	str	r2, [r3, #0]
 8001446:	605a      	str	r2, [r3, #4]
 8001448:	609a      	str	r2, [r3, #8]
 800144a:	60da      	str	r2, [r3, #12]
 800144c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800144e:	2300      	movs	r3, #0
 8001450:	613b      	str	r3, [r7, #16]
 8001452:	4b3a      	ldr	r3, [pc, #232]	; (800153c <MX_GPIO_Init+0x104>)
 8001454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001456:	4a39      	ldr	r2, [pc, #228]	; (800153c <MX_GPIO_Init+0x104>)
 8001458:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800145c:	6313      	str	r3, [r2, #48]	; 0x30
 800145e:	4b37      	ldr	r3, [pc, #220]	; (800153c <MX_GPIO_Init+0x104>)
 8001460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001462:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001466:	613b      	str	r3, [r7, #16]
 8001468:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800146a:	2300      	movs	r3, #0
 800146c:	60fb      	str	r3, [r7, #12]
 800146e:	4b33      	ldr	r3, [pc, #204]	; (800153c <MX_GPIO_Init+0x104>)
 8001470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001472:	4a32      	ldr	r2, [pc, #200]	; (800153c <MX_GPIO_Init+0x104>)
 8001474:	f043 0304 	orr.w	r3, r3, #4
 8001478:	6313      	str	r3, [r2, #48]	; 0x30
 800147a:	4b30      	ldr	r3, [pc, #192]	; (800153c <MX_GPIO_Init+0x104>)
 800147c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800147e:	f003 0304 	and.w	r3, r3, #4
 8001482:	60fb      	str	r3, [r7, #12]
 8001484:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001486:	2300      	movs	r3, #0
 8001488:	60bb      	str	r3, [r7, #8]
 800148a:	4b2c      	ldr	r3, [pc, #176]	; (800153c <MX_GPIO_Init+0x104>)
 800148c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800148e:	4a2b      	ldr	r2, [pc, #172]	; (800153c <MX_GPIO_Init+0x104>)
 8001490:	f043 0301 	orr.w	r3, r3, #1
 8001494:	6313      	str	r3, [r2, #48]	; 0x30
 8001496:	4b29      	ldr	r3, [pc, #164]	; (800153c <MX_GPIO_Init+0x104>)
 8001498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149a:	f003 0301 	and.w	r3, r3, #1
 800149e:	60bb      	str	r3, [r7, #8]
 80014a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014a2:	2300      	movs	r3, #0
 80014a4:	607b      	str	r3, [r7, #4]
 80014a6:	4b25      	ldr	r3, [pc, #148]	; (800153c <MX_GPIO_Init+0x104>)
 80014a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014aa:	4a24      	ldr	r2, [pc, #144]	; (800153c <MX_GPIO_Init+0x104>)
 80014ac:	f043 0302 	orr.w	r3, r3, #2
 80014b0:	6313      	str	r3, [r2, #48]	; 0x30
 80014b2:	4b22      	ldr	r3, [pc, #136]	; (800153c <MX_GPIO_Init+0x104>)
 80014b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b6:	f003 0302 	and.w	r3, r3, #2
 80014ba:	607b      	str	r3, [r7, #4]
 80014bc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 80014be:	2200      	movs	r2, #0
 80014c0:	2110      	movs	r1, #16
 80014c2:	481f      	ldr	r0, [pc, #124]	; (8001540 <MX_GPIO_Init+0x108>)
 80014c4:	f001 faee 	bl	8002aa4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS2_GPIO_Port, CS2_Pin, GPIO_PIN_RESET);
 80014c8:	2200      	movs	r2, #0
 80014ca:	2110      	movs	r1, #16
 80014cc:	481d      	ldr	r0, [pc, #116]	; (8001544 <MX_GPIO_Init+0x10c>)
 80014ce:	f001 fae9 	bl	8002aa4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CONTACTOR_Pin|PRECHARGE_Pin|EXT_LED_Pin, GPIO_PIN_RESET);
 80014d2:	2200      	movs	r2, #0
 80014d4:	f240 4106 	movw	r1, #1030	; 0x406
 80014d8:	481b      	ldr	r0, [pc, #108]	; (8001548 <MX_GPIO_Init+0x110>)
 80014da:	f001 fae3 	bl	8002aa4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CS_Pin */
  GPIO_InitStruct.Pin = CS_Pin;
 80014de:	2310      	movs	r3, #16
 80014e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014e2:	2301      	movs	r3, #1
 80014e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e6:	2300      	movs	r3, #0
 80014e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ea:	2300      	movs	r3, #0
 80014ec:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CS_GPIO_Port, &GPIO_InitStruct);
 80014ee:	f107 0314 	add.w	r3, r7, #20
 80014f2:	4619      	mov	r1, r3
 80014f4:	4812      	ldr	r0, [pc, #72]	; (8001540 <MX_GPIO_Init+0x108>)
 80014f6:	f001 f939 	bl	800276c <HAL_GPIO_Init>

  /*Configure GPIO pin : CS2_Pin */
  GPIO_InitStruct.Pin = CS2_Pin;
 80014fa:	2310      	movs	r3, #16
 80014fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014fe:	2301      	movs	r3, #1
 8001500:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001502:	2300      	movs	r3, #0
 8001504:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001506:	2300      	movs	r3, #0
 8001508:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CS2_GPIO_Port, &GPIO_InitStruct);
 800150a:	f107 0314 	add.w	r3, r7, #20
 800150e:	4619      	mov	r1, r3
 8001510:	480c      	ldr	r0, [pc, #48]	; (8001544 <MX_GPIO_Init+0x10c>)
 8001512:	f001 f92b 	bl	800276c <HAL_GPIO_Init>

  /*Configure GPIO pins : CONTACTOR_Pin PRECHARGE_Pin EXT_LED_Pin */
  GPIO_InitStruct.Pin = CONTACTOR_Pin|PRECHARGE_Pin|EXT_LED_Pin;
 8001516:	f240 4306 	movw	r3, #1030	; 0x406
 800151a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800151c:	2301      	movs	r3, #1
 800151e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001520:	2300      	movs	r3, #0
 8001522:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001524:	2300      	movs	r3, #0
 8001526:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001528:	f107 0314 	add.w	r3, r7, #20
 800152c:	4619      	mov	r1, r3
 800152e:	4806      	ldr	r0, [pc, #24]	; (8001548 <MX_GPIO_Init+0x110>)
 8001530:	f001 f91c 	bl	800276c <HAL_GPIO_Init>

}
 8001534:	bf00      	nop
 8001536:	3728      	adds	r7, #40	; 0x28
 8001538:	46bd      	mov	sp, r7
 800153a:	bd80      	pop	{r7, pc}
 800153c:	40023800 	.word	0x40023800
 8001540:	40020000 	.word	0x40020000
 8001544:	40020800 	.word	0x40020800
 8001548:	40020400 	.word	0x40020400

0800154c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b082      	sub	sp, #8
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM9) {
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	4a04      	ldr	r2, [pc, #16]	; (800156c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800155a:	4293      	cmp	r3, r2
 800155c:	d101      	bne.n	8001562 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800155e:	f000 fca5 	bl	8001eac <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001562:	bf00      	nop
 8001564:	3708      	adds	r7, #8
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop
 800156c:	40014000 	.word	0x40014000

08001570 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001570:	b480      	push	{r7}
 8001572:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001574:	b672      	cpsid	i
}
 8001576:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001578:	e7fe      	b.n	8001578 <Error_Handler+0x8>
	...

0800157c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b082      	sub	sp, #8
 8001580:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001582:	2300      	movs	r3, #0
 8001584:	607b      	str	r3, [r7, #4]
 8001586:	4b12      	ldr	r3, [pc, #72]	; (80015d0 <HAL_MspInit+0x54>)
 8001588:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800158a:	4a11      	ldr	r2, [pc, #68]	; (80015d0 <HAL_MspInit+0x54>)
 800158c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001590:	6453      	str	r3, [r2, #68]	; 0x44
 8001592:	4b0f      	ldr	r3, [pc, #60]	; (80015d0 <HAL_MspInit+0x54>)
 8001594:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001596:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800159a:	607b      	str	r3, [r7, #4]
 800159c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800159e:	2300      	movs	r3, #0
 80015a0:	603b      	str	r3, [r7, #0]
 80015a2:	4b0b      	ldr	r3, [pc, #44]	; (80015d0 <HAL_MspInit+0x54>)
 80015a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015a6:	4a0a      	ldr	r2, [pc, #40]	; (80015d0 <HAL_MspInit+0x54>)
 80015a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015ac:	6413      	str	r3, [r2, #64]	; 0x40
 80015ae:	4b08      	ldr	r3, [pc, #32]	; (80015d0 <HAL_MspInit+0x54>)
 80015b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015b6:	603b      	str	r3, [r7, #0]
 80015b8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80015ba:	2200      	movs	r2, #0
 80015bc:	210f      	movs	r1, #15
 80015be:	f06f 0001 	mvn.w	r0, #1
 80015c2:	f001 f8a9 	bl	8002718 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015c6:	bf00      	nop
 80015c8:	3708      	adds	r7, #8
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	40023800 	.word	0x40023800

080015d4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b08a      	sub	sp, #40	; 0x28
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015dc:	f107 0314 	add.w	r3, r7, #20
 80015e0:	2200      	movs	r2, #0
 80015e2:	601a      	str	r2, [r3, #0]
 80015e4:	605a      	str	r2, [r3, #4]
 80015e6:	609a      	str	r2, [r3, #8]
 80015e8:	60da      	str	r2, [r3, #12]
 80015ea:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	4a24      	ldr	r2, [pc, #144]	; (8001684 <HAL_ADC_MspInit+0xb0>)
 80015f2:	4293      	cmp	r3, r2
 80015f4:	d141      	bne.n	800167a <HAL_ADC_MspInit+0xa6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80015f6:	2300      	movs	r3, #0
 80015f8:	613b      	str	r3, [r7, #16]
 80015fa:	4b23      	ldr	r3, [pc, #140]	; (8001688 <HAL_ADC_MspInit+0xb4>)
 80015fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015fe:	4a22      	ldr	r2, [pc, #136]	; (8001688 <HAL_ADC_MspInit+0xb4>)
 8001600:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001604:	6453      	str	r3, [r2, #68]	; 0x44
 8001606:	4b20      	ldr	r3, [pc, #128]	; (8001688 <HAL_ADC_MspInit+0xb4>)
 8001608:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800160a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800160e:	613b      	str	r3, [r7, #16]
 8001610:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001612:	2300      	movs	r3, #0
 8001614:	60fb      	str	r3, [r7, #12]
 8001616:	4b1c      	ldr	r3, [pc, #112]	; (8001688 <HAL_ADC_MspInit+0xb4>)
 8001618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800161a:	4a1b      	ldr	r2, [pc, #108]	; (8001688 <HAL_ADC_MspInit+0xb4>)
 800161c:	f043 0304 	orr.w	r3, r3, #4
 8001620:	6313      	str	r3, [r2, #48]	; 0x30
 8001622:	4b19      	ldr	r3, [pc, #100]	; (8001688 <HAL_ADC_MspInit+0xb4>)
 8001624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001626:	f003 0304 	and.w	r3, r3, #4
 800162a:	60fb      	str	r3, [r7, #12]
 800162c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800162e:	2300      	movs	r3, #0
 8001630:	60bb      	str	r3, [r7, #8]
 8001632:	4b15      	ldr	r3, [pc, #84]	; (8001688 <HAL_ADC_MspInit+0xb4>)
 8001634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001636:	4a14      	ldr	r2, [pc, #80]	; (8001688 <HAL_ADC_MspInit+0xb4>)
 8001638:	f043 0301 	orr.w	r3, r3, #1
 800163c:	6313      	str	r3, [r2, #48]	; 0x30
 800163e:	4b12      	ldr	r3, [pc, #72]	; (8001688 <HAL_ADC_MspInit+0xb4>)
 8001640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001642:	f003 0301 	and.w	r3, r3, #1
 8001646:	60bb      	str	r3, [r7, #8]
 8001648:	68bb      	ldr	r3, [r7, #8]
    PC1     ------> ADC1_IN11
    PC2     ------> ADC1_IN12
    PC3     ------> ADC1_IN13
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = ADC1_IN10_CURRENT_SENSE_Pin|ADC1_IN11_VBATT_Pin|ADC1_IN12_MC_CAP_Pin|ADC1_IN13_CONTACTOR_Pin;
 800164a:	230f      	movs	r3, #15
 800164c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800164e:	2303      	movs	r3, #3
 8001650:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001652:	2300      	movs	r3, #0
 8001654:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001656:	f107 0314 	add.w	r3, r7, #20
 800165a:	4619      	mov	r1, r3
 800165c:	480b      	ldr	r0, [pc, #44]	; (800168c <HAL_ADC_MspInit+0xb8>)
 800165e:	f001 f885 	bl	800276c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC1_IN1_BUCK_TEMP_Pin;
 8001662:	2302      	movs	r3, #2
 8001664:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001666:	2303      	movs	r3, #3
 8001668:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800166a:	2300      	movs	r3, #0
 800166c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ADC1_IN1_BUCK_TEMP_GPIO_Port, &GPIO_InitStruct);
 800166e:	f107 0314 	add.w	r3, r7, #20
 8001672:	4619      	mov	r1, r3
 8001674:	4806      	ldr	r0, [pc, #24]	; (8001690 <HAL_ADC_MspInit+0xbc>)
 8001676:	f001 f879 	bl	800276c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800167a:	bf00      	nop
 800167c:	3728      	adds	r7, #40	; 0x28
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	40012000 	.word	0x40012000
 8001688:	40023800 	.word	0x40023800
 800168c:	40020800 	.word	0x40020800
 8001690:	40020000 	.word	0x40020000

08001694 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b08a      	sub	sp, #40	; 0x28
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800169c:	f107 0314 	add.w	r3, r7, #20
 80016a0:	2200      	movs	r2, #0
 80016a2:	601a      	str	r2, [r3, #0]
 80016a4:	605a      	str	r2, [r3, #4]
 80016a6:	609a      	str	r2, [r3, #8]
 80016a8:	60da      	str	r2, [r3, #12]
 80016aa:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4a19      	ldr	r2, [pc, #100]	; (8001718 <HAL_CAN_MspInit+0x84>)
 80016b2:	4293      	cmp	r3, r2
 80016b4:	d12c      	bne.n	8001710 <HAL_CAN_MspInit+0x7c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80016b6:	2300      	movs	r3, #0
 80016b8:	613b      	str	r3, [r7, #16]
 80016ba:	4b18      	ldr	r3, [pc, #96]	; (800171c <HAL_CAN_MspInit+0x88>)
 80016bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016be:	4a17      	ldr	r2, [pc, #92]	; (800171c <HAL_CAN_MspInit+0x88>)
 80016c0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80016c4:	6413      	str	r3, [r2, #64]	; 0x40
 80016c6:	4b15      	ldr	r3, [pc, #84]	; (800171c <HAL_CAN_MspInit+0x88>)
 80016c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016ce:	613b      	str	r3, [r7, #16]
 80016d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016d2:	2300      	movs	r3, #0
 80016d4:	60fb      	str	r3, [r7, #12]
 80016d6:	4b11      	ldr	r3, [pc, #68]	; (800171c <HAL_CAN_MspInit+0x88>)
 80016d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016da:	4a10      	ldr	r2, [pc, #64]	; (800171c <HAL_CAN_MspInit+0x88>)
 80016dc:	f043 0301 	orr.w	r3, r3, #1
 80016e0:	6313      	str	r3, [r2, #48]	; 0x30
 80016e2:	4b0e      	ldr	r3, [pc, #56]	; (800171c <HAL_CAN_MspInit+0x88>)
 80016e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016e6:	f003 0301 	and.w	r3, r3, #1
 80016ea:	60fb      	str	r3, [r7, #12]
 80016ec:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80016ee:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80016f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016f4:	2302      	movs	r3, #2
 80016f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f8:	2300      	movs	r3, #0
 80016fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016fc:	2303      	movs	r3, #3
 80016fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001700:	2309      	movs	r3, #9
 8001702:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001704:	f107 0314 	add.w	r3, r7, #20
 8001708:	4619      	mov	r1, r3
 800170a:	4805      	ldr	r0, [pc, #20]	; (8001720 <HAL_CAN_MspInit+0x8c>)
 800170c:	f001 f82e 	bl	800276c <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8001710:	bf00      	nop
 8001712:	3728      	adds	r7, #40	; 0x28
 8001714:	46bd      	mov	sp, r7
 8001716:	bd80      	pop	{r7, pc}
 8001718:	40006400 	.word	0x40006400
 800171c:	40023800 	.word	0x40023800
 8001720:	40020000 	.word	0x40020000

08001724 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b08a      	sub	sp, #40	; 0x28
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800172c:	f107 0314 	add.w	r3, r7, #20
 8001730:	2200      	movs	r2, #0
 8001732:	601a      	str	r2, [r3, #0]
 8001734:	605a      	str	r2, [r3, #4]
 8001736:	609a      	str	r2, [r3, #8]
 8001738:	60da      	str	r2, [r3, #12]
 800173a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	4a19      	ldr	r2, [pc, #100]	; (80017a8 <HAL_SPI_MspInit+0x84>)
 8001742:	4293      	cmp	r3, r2
 8001744:	d12b      	bne.n	800179e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001746:	2300      	movs	r3, #0
 8001748:	613b      	str	r3, [r7, #16]
 800174a:	4b18      	ldr	r3, [pc, #96]	; (80017ac <HAL_SPI_MspInit+0x88>)
 800174c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800174e:	4a17      	ldr	r2, [pc, #92]	; (80017ac <HAL_SPI_MspInit+0x88>)
 8001750:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001754:	6453      	str	r3, [r2, #68]	; 0x44
 8001756:	4b15      	ldr	r3, [pc, #84]	; (80017ac <HAL_SPI_MspInit+0x88>)
 8001758:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800175a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800175e:	613b      	str	r3, [r7, #16]
 8001760:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001762:	2300      	movs	r3, #0
 8001764:	60fb      	str	r3, [r7, #12]
 8001766:	4b11      	ldr	r3, [pc, #68]	; (80017ac <HAL_SPI_MspInit+0x88>)
 8001768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800176a:	4a10      	ldr	r2, [pc, #64]	; (80017ac <HAL_SPI_MspInit+0x88>)
 800176c:	f043 0301 	orr.w	r3, r3, #1
 8001770:	6313      	str	r3, [r2, #48]	; 0x30
 8001772:	4b0e      	ldr	r3, [pc, #56]	; (80017ac <HAL_SPI_MspInit+0x88>)
 8001774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001776:	f003 0301 	and.w	r3, r3, #1
 800177a:	60fb      	str	r3, [r7, #12]
 800177c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800177e:	23e0      	movs	r3, #224	; 0xe0
 8001780:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001782:	2302      	movs	r3, #2
 8001784:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001786:	2300      	movs	r3, #0
 8001788:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800178a:	2303      	movs	r3, #3
 800178c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800178e:	2305      	movs	r3, #5
 8001790:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001792:	f107 0314 	add.w	r3, r7, #20
 8001796:	4619      	mov	r1, r3
 8001798:	4805      	ldr	r0, [pc, #20]	; (80017b0 <HAL_SPI_MspInit+0x8c>)
 800179a:	f000 ffe7 	bl	800276c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800179e:	bf00      	nop
 80017a0:	3728      	adds	r7, #40	; 0x28
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}
 80017a6:	bf00      	nop
 80017a8:	40013000 	.word	0x40013000
 80017ac:	40023800 	.word	0x40023800
 80017b0:	40020000 	.word	0x40020000

080017b4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b08c      	sub	sp, #48	; 0x30
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017bc:	f107 031c 	add.w	r3, r7, #28
 80017c0:	2200      	movs	r2, #0
 80017c2:	601a      	str	r2, [r3, #0]
 80017c4:	605a      	str	r2, [r3, #4]
 80017c6:	609a      	str	r2, [r3, #8]
 80017c8:	60da      	str	r2, [r3, #12]
 80017ca:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	4a35      	ldr	r2, [pc, #212]	; (80018a8 <HAL_TIM_Base_MspInit+0xf4>)
 80017d2:	4293      	cmp	r3, r2
 80017d4:	d116      	bne.n	8001804 <HAL_TIM_Base_MspInit+0x50>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80017d6:	2300      	movs	r3, #0
 80017d8:	61bb      	str	r3, [r7, #24]
 80017da:	4b34      	ldr	r3, [pc, #208]	; (80018ac <HAL_TIM_Base_MspInit+0xf8>)
 80017dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017de:	4a33      	ldr	r2, [pc, #204]	; (80018ac <HAL_TIM_Base_MspInit+0xf8>)
 80017e0:	f043 0301 	orr.w	r3, r3, #1
 80017e4:	6453      	str	r3, [r2, #68]	; 0x44
 80017e6:	4b31      	ldr	r3, [pc, #196]	; (80018ac <HAL_TIM_Base_MspInit+0xf8>)
 80017e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017ea:	f003 0301 	and.w	r3, r3, #1
 80017ee:	61bb      	str	r3, [r7, #24]
 80017f0:	69bb      	ldr	r3, [r7, #24]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 80017f2:	2200      	movs	r2, #0
 80017f4:	2100      	movs	r1, #0
 80017f6:	2018      	movs	r0, #24
 80017f8:	f000 ff8e 	bl	8002718 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 80017fc:	2018      	movs	r0, #24
 80017fe:	f000 ffa7 	bl	8002750 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001802:	e04c      	b.n	800189e <HAL_TIM_Base_MspInit+0xea>
  else if(htim_base->Instance==TIM2)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800180c:	d10e      	bne.n	800182c <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800180e:	2300      	movs	r3, #0
 8001810:	617b      	str	r3, [r7, #20]
 8001812:	4b26      	ldr	r3, [pc, #152]	; (80018ac <HAL_TIM_Base_MspInit+0xf8>)
 8001814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001816:	4a25      	ldr	r2, [pc, #148]	; (80018ac <HAL_TIM_Base_MspInit+0xf8>)
 8001818:	f043 0301 	orr.w	r3, r3, #1
 800181c:	6413      	str	r3, [r2, #64]	; 0x40
 800181e:	4b23      	ldr	r3, [pc, #140]	; (80018ac <HAL_TIM_Base_MspInit+0xf8>)
 8001820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001822:	f003 0301 	and.w	r3, r3, #1
 8001826:	617b      	str	r3, [r7, #20]
 8001828:	697b      	ldr	r3, [r7, #20]
}
 800182a:	e038      	b.n	800189e <HAL_TIM_Base_MspInit+0xea>
  else if(htim_base->Instance==TIM3)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4a1f      	ldr	r2, [pc, #124]	; (80018b0 <HAL_TIM_Base_MspInit+0xfc>)
 8001832:	4293      	cmp	r3, r2
 8001834:	d133      	bne.n	800189e <HAL_TIM_Base_MspInit+0xea>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001836:	2300      	movs	r3, #0
 8001838:	613b      	str	r3, [r7, #16]
 800183a:	4b1c      	ldr	r3, [pc, #112]	; (80018ac <HAL_TIM_Base_MspInit+0xf8>)
 800183c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800183e:	4a1b      	ldr	r2, [pc, #108]	; (80018ac <HAL_TIM_Base_MspInit+0xf8>)
 8001840:	f043 0302 	orr.w	r3, r3, #2
 8001844:	6413      	str	r3, [r2, #64]	; 0x40
 8001846:	4b19      	ldr	r3, [pc, #100]	; (80018ac <HAL_TIM_Base_MspInit+0xf8>)
 8001848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800184a:	f003 0302 	and.w	r3, r3, #2
 800184e:	613b      	str	r3, [r7, #16]
 8001850:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001852:	2300      	movs	r3, #0
 8001854:	60fb      	str	r3, [r7, #12]
 8001856:	4b15      	ldr	r3, [pc, #84]	; (80018ac <HAL_TIM_Base_MspInit+0xf8>)
 8001858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800185a:	4a14      	ldr	r2, [pc, #80]	; (80018ac <HAL_TIM_Base_MspInit+0xf8>)
 800185c:	f043 0304 	orr.w	r3, r3, #4
 8001860:	6313      	str	r3, [r2, #48]	; 0x30
 8001862:	4b12      	ldr	r3, [pc, #72]	; (80018ac <HAL_TIM_Base_MspInit+0xf8>)
 8001864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001866:	f003 0304 	and.w	r3, r3, #4
 800186a:	60fb      	str	r3, [r7, #12]
 800186c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TIM3_CH1_IMD_IN_Pin;
 800186e:	2340      	movs	r3, #64	; 0x40
 8001870:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001872:	2302      	movs	r3, #2
 8001874:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001876:	2300      	movs	r3, #0
 8001878:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800187a:	2300      	movs	r3, #0
 800187c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800187e:	2302      	movs	r3, #2
 8001880:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(TIM3_CH1_IMD_IN_GPIO_Port, &GPIO_InitStruct);
 8001882:	f107 031c 	add.w	r3, r7, #28
 8001886:	4619      	mov	r1, r3
 8001888:	480a      	ldr	r0, [pc, #40]	; (80018b4 <HAL_TIM_Base_MspInit+0x100>)
 800188a:	f000 ff6f 	bl	800276c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 800188e:	2200      	movs	r2, #0
 8001890:	2105      	movs	r1, #5
 8001892:	201d      	movs	r0, #29
 8001894:	f000 ff40 	bl	8002718 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001898:	201d      	movs	r0, #29
 800189a:	f000 ff59 	bl	8002750 <HAL_NVIC_EnableIRQ>
}
 800189e:	bf00      	nop
 80018a0:	3730      	adds	r7, #48	; 0x30
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}
 80018a6:	bf00      	nop
 80018a8:	40010000 	.word	0x40010000
 80018ac:	40023800 	.word	0x40023800
 80018b0:	40000400 	.word	0x40000400
 80018b4:	40020800 	.word	0x40020800

080018b8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b088      	sub	sp, #32
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018c0:	f107 030c 	add.w	r3, r7, #12
 80018c4:	2200      	movs	r2, #0
 80018c6:	601a      	str	r2, [r3, #0]
 80018c8:	605a      	str	r2, [r3, #4]
 80018ca:	609a      	str	r2, [r3, #8]
 80018cc:	60da      	str	r2, [r3, #12]
 80018ce:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	4a12      	ldr	r2, [pc, #72]	; (8001920 <HAL_TIM_MspPostInit+0x68>)
 80018d6:	4293      	cmp	r3, r2
 80018d8:	d11e      	bne.n	8001918 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018da:	2300      	movs	r3, #0
 80018dc:	60bb      	str	r3, [r7, #8]
 80018de:	4b11      	ldr	r3, [pc, #68]	; (8001924 <HAL_TIM_MspPostInit+0x6c>)
 80018e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018e2:	4a10      	ldr	r2, [pc, #64]	; (8001924 <HAL_TIM_MspPostInit+0x6c>)
 80018e4:	f043 0301 	orr.w	r3, r3, #1
 80018e8:	6313      	str	r3, [r2, #48]	; 0x30
 80018ea:	4b0e      	ldr	r3, [pc, #56]	; (8001924 <HAL_TIM_MspPostInit+0x6c>)
 80018ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ee:	f003 0301 	and.w	r3, r3, #1
 80018f2:	60bb      	str	r3, [r7, #8]
 80018f4:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = TIM1_CH1_BLUE_Pin|TIM1_CH2_GREEN_Pin|TIM1_CH3_RED_Pin;
 80018f6:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80018fa:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018fc:	2302      	movs	r3, #2
 80018fe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001900:	2300      	movs	r3, #0
 8001902:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001904:	2300      	movs	r3, #0
 8001906:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001908:	2301      	movs	r3, #1
 800190a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800190c:	f107 030c 	add.w	r3, r7, #12
 8001910:	4619      	mov	r1, r3
 8001912:	4805      	ldr	r0, [pc, #20]	; (8001928 <HAL_TIM_MspPostInit+0x70>)
 8001914:	f000 ff2a 	bl	800276c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001918:	bf00      	nop
 800191a:	3720      	adds	r7, #32
 800191c:	46bd      	mov	sp, r7
 800191e:	bd80      	pop	{r7, pc}
 8001920:	40010000 	.word	0x40010000
 8001924:	40023800 	.word	0x40023800
 8001928:	40020000 	.word	0x40020000

0800192c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b08a      	sub	sp, #40	; 0x28
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001934:	f107 0314 	add.w	r3, r7, #20
 8001938:	2200      	movs	r2, #0
 800193a:	601a      	str	r2, [r3, #0]
 800193c:	605a      	str	r2, [r3, #4]
 800193e:	609a      	str	r2, [r3, #8]
 8001940:	60da      	str	r2, [r3, #12]
 8001942:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4a19      	ldr	r2, [pc, #100]	; (80019b0 <HAL_UART_MspInit+0x84>)
 800194a:	4293      	cmp	r3, r2
 800194c:	d12b      	bne.n	80019a6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800194e:	2300      	movs	r3, #0
 8001950:	613b      	str	r3, [r7, #16]
 8001952:	4b18      	ldr	r3, [pc, #96]	; (80019b4 <HAL_UART_MspInit+0x88>)
 8001954:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001956:	4a17      	ldr	r2, [pc, #92]	; (80019b4 <HAL_UART_MspInit+0x88>)
 8001958:	f043 0310 	orr.w	r3, r3, #16
 800195c:	6453      	str	r3, [r2, #68]	; 0x44
 800195e:	4b15      	ldr	r3, [pc, #84]	; (80019b4 <HAL_UART_MspInit+0x88>)
 8001960:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001962:	f003 0310 	and.w	r3, r3, #16
 8001966:	613b      	str	r3, [r7, #16]
 8001968:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800196a:	2300      	movs	r3, #0
 800196c:	60fb      	str	r3, [r7, #12]
 800196e:	4b11      	ldr	r3, [pc, #68]	; (80019b4 <HAL_UART_MspInit+0x88>)
 8001970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001972:	4a10      	ldr	r2, [pc, #64]	; (80019b4 <HAL_UART_MspInit+0x88>)
 8001974:	f043 0302 	orr.w	r3, r3, #2
 8001978:	6313      	str	r3, [r2, #48]	; 0x30
 800197a:	4b0e      	ldr	r3, [pc, #56]	; (80019b4 <HAL_UART_MspInit+0x88>)
 800197c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800197e:	f003 0302 	and.w	r3, r3, #2
 8001982:	60fb      	str	r3, [r7, #12]
 8001984:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001986:	23c0      	movs	r3, #192	; 0xc0
 8001988:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800198a:	2302      	movs	r3, #2
 800198c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800198e:	2300      	movs	r3, #0
 8001990:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001992:	2303      	movs	r3, #3
 8001994:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001996:	2307      	movs	r3, #7
 8001998:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800199a:	f107 0314 	add.w	r3, r7, #20
 800199e:	4619      	mov	r1, r3
 80019a0:	4805      	ldr	r0, [pc, #20]	; (80019b8 <HAL_UART_MspInit+0x8c>)
 80019a2:	f000 fee3 	bl	800276c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80019a6:	bf00      	nop
 80019a8:	3728      	adds	r7, #40	; 0x28
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}
 80019ae:	bf00      	nop
 80019b0:	40011000 	.word	0x40011000
 80019b4:	40023800 	.word	0x40023800
 80019b8:	40020400 	.word	0x40020400

080019bc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b08c      	sub	sp, #48	; 0x30
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80019c4:	2300      	movs	r3, #0
 80019c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80019c8:	2300      	movs	r3, #0
 80019ca:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM9 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, TickPriority ,0);
 80019cc:	2200      	movs	r2, #0
 80019ce:	6879      	ldr	r1, [r7, #4]
 80019d0:	2018      	movs	r0, #24
 80019d2:	f000 fea1 	bl	8002718 <HAL_NVIC_SetPriority>

  /* Enable the TIM9 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 80019d6:	2018      	movs	r0, #24
 80019d8:	f000 feba 	bl	8002750 <HAL_NVIC_EnableIRQ>
  /* Enable TIM9 clock */
  __HAL_RCC_TIM9_CLK_ENABLE();
 80019dc:	2300      	movs	r3, #0
 80019de:	60fb      	str	r3, [r7, #12]
 80019e0:	4b1f      	ldr	r3, [pc, #124]	; (8001a60 <HAL_InitTick+0xa4>)
 80019e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019e4:	4a1e      	ldr	r2, [pc, #120]	; (8001a60 <HAL_InitTick+0xa4>)
 80019e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019ea:	6453      	str	r3, [r2, #68]	; 0x44
 80019ec:	4b1c      	ldr	r3, [pc, #112]	; (8001a60 <HAL_InitTick+0xa4>)
 80019ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019f4:	60fb      	str	r3, [r7, #12]
 80019f6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80019f8:	f107 0210 	add.w	r2, r7, #16
 80019fc:	f107 0314 	add.w	r3, r7, #20
 8001a00:	4611      	mov	r1, r2
 8001a02:	4618      	mov	r0, r3
 8001a04:	f001 fcf4 	bl	80033f0 <HAL_RCC_GetClockConfig>

  /* Compute TIM9 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8001a08:	f001 fcde 	bl	80033c8 <HAL_RCC_GetPCLK2Freq>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	005b      	lsls	r3, r3, #1
 8001a10:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM9 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001a12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a14:	4a13      	ldr	r2, [pc, #76]	; (8001a64 <HAL_InitTick+0xa8>)
 8001a16:	fba2 2303 	umull	r2, r3, r2, r3
 8001a1a:	0c9b      	lsrs	r3, r3, #18
 8001a1c:	3b01      	subs	r3, #1
 8001a1e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM9 */
  htim9.Instance = TIM9;
 8001a20:	4b11      	ldr	r3, [pc, #68]	; (8001a68 <HAL_InitTick+0xac>)
 8001a22:	4a12      	ldr	r2, [pc, #72]	; (8001a6c <HAL_InitTick+0xb0>)
 8001a24:	601a      	str	r2, [r3, #0]
  + Period = [(TIM9CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim9.Init.Period = (1000000U / 1000U) - 1U;
 8001a26:	4b10      	ldr	r3, [pc, #64]	; (8001a68 <HAL_InitTick+0xac>)
 8001a28:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001a2c:	60da      	str	r2, [r3, #12]
  htim9.Init.Prescaler = uwPrescalerValue;
 8001a2e:	4a0e      	ldr	r2, [pc, #56]	; (8001a68 <HAL_InitTick+0xac>)
 8001a30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a32:	6053      	str	r3, [r2, #4]
  htim9.Init.ClockDivision = 0;
 8001a34:	4b0c      	ldr	r3, [pc, #48]	; (8001a68 <HAL_InitTick+0xac>)
 8001a36:	2200      	movs	r2, #0
 8001a38:	611a      	str	r2, [r3, #16]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a3a:	4b0b      	ldr	r3, [pc, #44]	; (8001a68 <HAL_InitTick+0xac>)
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim9) == HAL_OK)
 8001a40:	4809      	ldr	r0, [pc, #36]	; (8001a68 <HAL_InitTick+0xac>)
 8001a42:	f002 faaf 	bl	8003fa4 <HAL_TIM_Base_Init>
 8001a46:	4603      	mov	r3, r0
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d104      	bne.n	8001a56 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim9);
 8001a4c:	4806      	ldr	r0, [pc, #24]	; (8001a68 <HAL_InitTick+0xac>)
 8001a4e:	f002 fb61 	bl	8004114 <HAL_TIM_Base_Start_IT>
 8001a52:	4603      	mov	r3, r0
 8001a54:	e000      	b.n	8001a58 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8001a56:	2301      	movs	r3, #1
}
 8001a58:	4618      	mov	r0, r3
 8001a5a:	3730      	adds	r7, #48	; 0x30
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bd80      	pop	{r7, pc}
 8001a60:	40023800 	.word	0x40023800
 8001a64:	431bde83 	.word	0x431bde83
 8001a68:	20004b94 	.word	0x20004b94
 8001a6c:	40014000 	.word	0x40014000

08001a70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a70:	b480      	push	{r7}
 8001a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a74:	e7fe      	b.n	8001a74 <NMI_Handler+0x4>

08001a76 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a76:	b480      	push	{r7}
 8001a78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a7a:	e7fe      	b.n	8001a7a <HardFault_Handler+0x4>

08001a7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a80:	e7fe      	b.n	8001a80 <MemManage_Handler+0x4>

08001a82 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a82:	b480      	push	{r7}
 8001a84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a86:	e7fe      	b.n	8001a86 <BusFault_Handler+0x4>

08001a88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a8c:	e7fe      	b.n	8001a8c <UsageFault_Handler+0x4>

08001a8e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a8e:	b480      	push	{r7}
 8001a90:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a92:	bf00      	nop
 8001a94:	46bd      	mov	sp, r7
 8001a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9a:	4770      	bx	lr

08001a9c <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001aa0:	4803      	ldr	r0, [pc, #12]	; (8001ab0 <TIM1_BRK_TIM9_IRQHandler+0x14>)
 8001aa2:	f002 fcb2 	bl	800440a <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim9);
 8001aa6:	4803      	ldr	r0, [pc, #12]	; (8001ab4 <TIM1_BRK_TIM9_IRQHandler+0x18>)
 8001aa8:	f002 fcaf 	bl	800440a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8001aac:	bf00      	nop
 8001aae:	bd80      	pop	{r7, pc}
 8001ab0:	20004a84 	.word	0x20004a84
 8001ab4:	20004b94 	.word	0x20004b94

08001ab8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001abc:	4802      	ldr	r0, [pc, #8]	; (8001ac8 <TIM3_IRQHandler+0x10>)
 8001abe:	f002 fca4 	bl	800440a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001ac2:	bf00      	nop
 8001ac4:	bd80      	pop	{r7, pc}
 8001ac6:	bf00      	nop
 8001ac8:	200049b0 	.word	0x200049b0

08001acc <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b086      	sub	sp, #24
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	60f8      	str	r0, [r7, #12]
 8001ad4:	60b9      	str	r1, [r7, #8]
 8001ad6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ad8:	2300      	movs	r3, #0
 8001ada:	617b      	str	r3, [r7, #20]
 8001adc:	e00a      	b.n	8001af4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001ade:	f3af 8000 	nop.w
 8001ae2:	4601      	mov	r1, r0
 8001ae4:	68bb      	ldr	r3, [r7, #8]
 8001ae6:	1c5a      	adds	r2, r3, #1
 8001ae8:	60ba      	str	r2, [r7, #8]
 8001aea:	b2ca      	uxtb	r2, r1
 8001aec:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001aee:	697b      	ldr	r3, [r7, #20]
 8001af0:	3301      	adds	r3, #1
 8001af2:	617b      	str	r3, [r7, #20]
 8001af4:	697a      	ldr	r2, [r7, #20]
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	429a      	cmp	r2, r3
 8001afa:	dbf0      	blt.n	8001ade <_read+0x12>
	}

return len;
 8001afc:	687b      	ldr	r3, [r7, #4]
}
 8001afe:	4618      	mov	r0, r3
 8001b00:	3718      	adds	r7, #24
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}

08001b06 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001b06:	b580      	push	{r7, lr}
 8001b08:	b086      	sub	sp, #24
 8001b0a:	af00      	add	r7, sp, #0
 8001b0c:	60f8      	str	r0, [r7, #12]
 8001b0e:	60b9      	str	r1, [r7, #8]
 8001b10:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b12:	2300      	movs	r3, #0
 8001b14:	617b      	str	r3, [r7, #20]
 8001b16:	e009      	b.n	8001b2c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001b18:	68bb      	ldr	r3, [r7, #8]
 8001b1a:	1c5a      	adds	r2, r3, #1
 8001b1c:	60ba      	str	r2, [r7, #8]
 8001b1e:	781b      	ldrb	r3, [r3, #0]
 8001b20:	4618      	mov	r0, r3
 8001b22:	f7fe fd21 	bl	8000568 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b26:	697b      	ldr	r3, [r7, #20]
 8001b28:	3301      	adds	r3, #1
 8001b2a:	617b      	str	r3, [r7, #20]
 8001b2c:	697a      	ldr	r2, [r7, #20]
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	429a      	cmp	r2, r3
 8001b32:	dbf1      	blt.n	8001b18 <_write+0x12>
	}
	return len;
 8001b34:	687b      	ldr	r3, [r7, #4]
}
 8001b36:	4618      	mov	r0, r3
 8001b38:	3718      	adds	r7, #24
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}

08001b3e <_close>:

int _close(int file)
{
 8001b3e:	b480      	push	{r7}
 8001b40:	b083      	sub	sp, #12
 8001b42:	af00      	add	r7, sp, #0
 8001b44:	6078      	str	r0, [r7, #4]
	return -1;
 8001b46:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	370c      	adds	r7, #12
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b54:	4770      	bx	lr

08001b56 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b56:	b480      	push	{r7}
 8001b58:	b083      	sub	sp, #12
 8001b5a:	af00      	add	r7, sp, #0
 8001b5c:	6078      	str	r0, [r7, #4]
 8001b5e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001b66:	605a      	str	r2, [r3, #4]
	return 0;
 8001b68:	2300      	movs	r3, #0
}
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	370c      	adds	r7, #12
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b74:	4770      	bx	lr

08001b76 <_isatty>:

int _isatty(int file)
{
 8001b76:	b480      	push	{r7}
 8001b78:	b083      	sub	sp, #12
 8001b7a:	af00      	add	r7, sp, #0
 8001b7c:	6078      	str	r0, [r7, #4]
	return 1;
 8001b7e:	2301      	movs	r3, #1
}
 8001b80:	4618      	mov	r0, r3
 8001b82:	370c      	adds	r7, #12
 8001b84:	46bd      	mov	sp, r7
 8001b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8a:	4770      	bx	lr

08001b8c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	b085      	sub	sp, #20
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	60f8      	str	r0, [r7, #12]
 8001b94:	60b9      	str	r1, [r7, #8]
 8001b96:	607a      	str	r2, [r7, #4]
	return 0;
 8001b98:	2300      	movs	r3, #0
}
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	3714      	adds	r7, #20
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba4:	4770      	bx	lr
	...

08001ba8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b086      	sub	sp, #24
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001bb0:	4a14      	ldr	r2, [pc, #80]	; (8001c04 <_sbrk+0x5c>)
 8001bb2:	4b15      	ldr	r3, [pc, #84]	; (8001c08 <_sbrk+0x60>)
 8001bb4:	1ad3      	subs	r3, r2, r3
 8001bb6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001bb8:	697b      	ldr	r3, [r7, #20]
 8001bba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001bbc:	4b13      	ldr	r3, [pc, #76]	; (8001c0c <_sbrk+0x64>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d102      	bne.n	8001bca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001bc4:	4b11      	ldr	r3, [pc, #68]	; (8001c0c <_sbrk+0x64>)
 8001bc6:	4a12      	ldr	r2, [pc, #72]	; (8001c10 <_sbrk+0x68>)
 8001bc8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001bca:	4b10      	ldr	r3, [pc, #64]	; (8001c0c <_sbrk+0x64>)
 8001bcc:	681a      	ldr	r2, [r3, #0]
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	4413      	add	r3, r2
 8001bd2:	693a      	ldr	r2, [r7, #16]
 8001bd4:	429a      	cmp	r2, r3
 8001bd6:	d207      	bcs.n	8001be8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001bd8:	f006 fd30 	bl	800863c <__errno>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	220c      	movs	r2, #12
 8001be0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001be2:	f04f 33ff 	mov.w	r3, #4294967295
 8001be6:	e009      	b.n	8001bfc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001be8:	4b08      	ldr	r3, [pc, #32]	; (8001c0c <_sbrk+0x64>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001bee:	4b07      	ldr	r3, [pc, #28]	; (8001c0c <_sbrk+0x64>)
 8001bf0:	681a      	ldr	r2, [r3, #0]
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	4413      	add	r3, r2
 8001bf6:	4a05      	ldr	r2, [pc, #20]	; (8001c0c <_sbrk+0x64>)
 8001bf8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001bfa:	68fb      	ldr	r3, [r7, #12]
}
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	3718      	adds	r7, #24
 8001c00:	46bd      	mov	sp, r7
 8001c02:	bd80      	pop	{r7, pc}
 8001c04:	20020000 	.word	0x20020000
 8001c08:	00000400 	.word	0x00000400
 8001c0c:	20000090 	.word	0x20000090
 8001c10:	20004c30 	.word	0x20004c30

08001c14 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c14:	b480      	push	{r7}
 8001c16:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c18:	4b06      	ldr	r3, [pc, #24]	; (8001c34 <SystemInit+0x20>)
 8001c1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c1e:	4a05      	ldr	r2, [pc, #20]	; (8001c34 <SystemInit+0x20>)
 8001c20:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c24:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c28:	bf00      	nop
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c30:	4770      	bx	lr
 8001c32:	bf00      	nop
 8001c34:	e000ed00 	.word	0xe000ed00

08001c38 <start_timers>:
#include <stdint.h>
#include "peripherals.h"
#include "timer_utils.h"

void start_timers() {
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start(&htim2);
 8001c3c:	4802      	ldr	r0, [pc, #8]	; (8001c48 <start_timers+0x10>)
 8001c3e:	f002 fa01 	bl	8004044 <HAL_TIM_Base_Start>
}
 8001c42:	bf00      	nop
 8001c44:	bd80      	pop	{r7, pc}
 8001c46:	bf00      	nop
 8001c48:	20004b24 	.word	0x20004b24

08001c4c <delay_us>:

void delay_us(uint16_t us) {
 8001c4c:	b480      	push	{r7}
 8001c4e:	b083      	sub	sp, #12
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	4603      	mov	r3, r0
 8001c54:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim2, 0);
 8001c56:	4b09      	ldr	r3, [pc, #36]	; (8001c7c <delay_us+0x30>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim2) < us) { asm("NOP"); }
 8001c5e:	e000      	b.n	8001c62 <delay_us+0x16>
 8001c60:	bf00      	nop
 8001c62:	4b06      	ldr	r3, [pc, #24]	; (8001c7c <delay_us+0x30>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001c68:	88fb      	ldrh	r3, [r7, #6]
 8001c6a:	429a      	cmp	r2, r3
 8001c6c:	d3f8      	bcc.n	8001c60 <delay_us+0x14>
}
 8001c6e:	bf00      	nop
 8001c70:	bf00      	nop
 8001c72:	370c      	adds	r7, #12
 8001c74:	46bd      	mov	sp, r7
 8001c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7a:	4770      	bx	lr
 8001c7c:	20004b24 	.word	0x20004b24

08001c80 <ext_led_blink_thread_fn>:
const osThreadAttr_t ext_led_blink_thread_attrs = {
	.name = "ext_led_blink_thread",
	.priority = (osPriority_t)osPriorityIdle
};

void ext_led_blink_thread_fn(void* arg) {
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b082      	sub	sp, #8
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
	while (1) {
		HAL_GPIO_TogglePin(GPIOB, CONTACTOR_Pin);
 8001c88:	2102      	movs	r1, #2
 8001c8a:	4804      	ldr	r0, [pc, #16]	; (8001c9c <ext_led_blink_thread_fn+0x1c>)
 8001c8c:	f000 ff23 	bl	8002ad6 <HAL_GPIO_TogglePin>
		osDelay(1000);
 8001c90:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001c94:	f004 f860 	bl	8005d58 <osDelay>
		HAL_GPIO_TogglePin(GPIOB, CONTACTOR_Pin);
 8001c98:	e7f6      	b.n	8001c88 <ext_led_blink_thread_fn+0x8>
 8001c9a:	bf00      	nop
 8001c9c:	40020400 	.word	0x40020400

08001ca0 <measurements_thread_fn>:
	.name = "measurements_thread",
	.priority = (osPriority_t)osPriorityAboveNormal,
	.stack_size = 2048
};

void measurements_thread_fn(void* arg) {
 8001ca0:	b5b0      	push	{r4, r5, r7, lr}
 8001ca2:	f5ad 6d8b 	sub.w	sp, sp, #1112	; 0x458
 8001ca6:	af16      	add	r7, sp, #88	; 0x58
 8001ca8:	1d3b      	adds	r3, r7, #4
 8001caa:	6018      	str	r0, [r3, #0]
	Ltc6813 slave_device = Ltc6813_init(hspi1, GPIOA, 4);
 8001cac:	f107 050c 	add.w	r5, r7, #12
 8001cb0:	4c50      	ldr	r4, [pc, #320]	; (8001df4 <measurements_thread_fn+0x154>)
 8001cb2:	2304      	movs	r3, #4
 8001cb4:	9314      	str	r3, [sp, #80]	; 0x50
 8001cb6:	4b50      	ldr	r3, [pc, #320]	; (8001df8 <measurements_thread_fn+0x158>)
 8001cb8:	9313      	str	r3, [sp, #76]	; 0x4c
 8001cba:	4668      	mov	r0, sp
 8001cbc:	f104 030c 	add.w	r3, r4, #12
 8001cc0:	224c      	movs	r2, #76	; 0x4c
 8001cc2:	4619      	mov	r1, r3
 8001cc4:	f006 fce4 	bl	8008690 <memcpy>
 8001cc8:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8001ccc:	4628      	mov	r0, r5
 8001cce:	f7fe fde0 	bl	8000892 <Ltc6813_init>

	Ltc6813_wakeup_sleep(&slave_device);
 8001cd2:	f107 030c 	add.w	r3, r7, #12
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	f7fe fee8 	bl	8000aac <Ltc6813_wakeup_sleep>
	uint8_t success;
	osDelay(1000);
 8001cdc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001ce0:	f004 f83a 	bl	8005d58 <osDelay>

	while (1) {
		Ltc6813_wakeup_sleep(&slave_device);
 8001ce4:	f107 030c 	add.w	r3, r7, #12
 8001ce8:	4618      	mov	r0, r3
 8001cea:	f7fe fedf 	bl	8000aac <Ltc6813_wakeup_sleep>

		printf("CFG A\r\n");
 8001cee:	4843      	ldr	r0, [pc, #268]	; (8001dfc <measurements_thread_fn+0x15c>)
 8001cf0:	f006 fd6a 	bl	80087c8 <puts>

		success = Ltc6813_read_cfga(&slave_device);
 8001cf4:	f107 030c 	add.w	r3, r7, #12
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	f7ff f815 	bl	8000d28 <Ltc6813_read_cfga>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	f887 33ff 	strb.w	r3, [r7, #1023]	; 0x3ff

		if (success) {
 8001d04:	f897 33ff 	ldrb.w	r3, [r7, #1023]	; 0x3ff
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d003      	beq.n	8001d14 <measurements_thread_fn+0x74>
			printf("PEC SUCCESS\r\n");
 8001d0c:	483c      	ldr	r0, [pc, #240]	; (8001e00 <measurements_thread_fn+0x160>)
 8001d0e:	f006 fd5b 	bl	80087c8 <puts>
 8001d12:	e002      	b.n	8001d1a <measurements_thread_fn+0x7a>
		} else {
			printf("PEC FAIL\r\n");
 8001d14:	483b      	ldr	r0, [pc, #236]	; (8001e04 <measurements_thread_fn+0x164>)
 8001d16:	f006 fd57 	bl	80087c8 <puts>
		}

		Buffer_print(&(slave_device.cfga_bfr));
 8001d1a:	f107 030c 	add.w	r3, r7, #12
 8001d1e:	33c2      	adds	r3, #194	; 0xc2
 8001d20:	4618      	mov	r0, r3
 8001d22:	f7fe fd61 	bl	80007e8 <Buffer_print>

		Ltc6813_wakeup_sleep(&slave_device);
 8001d26:	f107 030c 	add.w	r3, r7, #12
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	f7fe febe 	bl	8000aac <Ltc6813_wakeup_sleep>

		printf("WRITE REFON 1\r\n");
 8001d30:	4835      	ldr	r0, [pc, #212]	; (8001e08 <measurements_thread_fn+0x168>)
 8001d32:	f006 fd49 	bl	80087c8 <puts>

		uint8_t CFGAR0 = Buffer_index(&(slave_device.cfga_bfr), 0);
 8001d36:	f107 030c 	add.w	r3, r7, #12
 8001d3a:	33c2      	adds	r3, #194	; 0xc2
 8001d3c:	2100      	movs	r1, #0
 8001d3e:	4618      	mov	r0, r3
 8001d40:	f7fe fc8b 	bl	800065a <Buffer_index>
 8001d44:	4603      	mov	r3, r0
 8001d46:	f887 33fe 	strb.w	r3, [r7, #1022]	; 0x3fe
		CFGAR0 |= 0b00000100u;
 8001d4a:	f897 33fe 	ldrb.w	r3, [r7, #1022]	; 0x3fe
 8001d4e:	f043 0304 	orr.w	r3, r3, #4
 8001d52:	f887 33fe 	strb.w	r3, [r7, #1022]	; 0x3fe

		Buffer_set_index(&(slave_device.cfga_bfr), 0, CFGAR0);
 8001d56:	f897 23fe 	ldrb.w	r2, [r7, #1022]	; 0x3fe
 8001d5a:	f107 030c 	add.w	r3, r7, #12
 8001d5e:	33c2      	adds	r3, #194	; 0xc2
 8001d60:	2100      	movs	r1, #0
 8001d62:	4618      	mov	r0, r3
 8001d64:	f7fe fc8e 	bl	8000684 <Buffer_set_index>

		Ltc6813_write_cfga(&slave_device);
 8001d68:	f107 030c 	add.w	r3, r7, #12
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	f7fe ffe8 	bl	8000d42 <Ltc6813_write_cfga>

		printf("CFG A\r\n");
 8001d72:	4822      	ldr	r0, [pc, #136]	; (8001dfc <measurements_thread_fn+0x15c>)
 8001d74:	f006 fd28 	bl	80087c8 <puts>

		success = Ltc6813_read_cfga(&slave_device);
 8001d78:	f107 030c 	add.w	r3, r7, #12
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	f7fe ffd3 	bl	8000d28 <Ltc6813_read_cfga>
 8001d82:	4603      	mov	r3, r0
 8001d84:	f887 33ff 	strb.w	r3, [r7, #1023]	; 0x3ff

		if (success) {
 8001d88:	f897 33ff 	ldrb.w	r3, [r7, #1023]	; 0x3ff
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d003      	beq.n	8001d98 <measurements_thread_fn+0xf8>
			printf("PEC SUCCESS\r\n");
 8001d90:	481b      	ldr	r0, [pc, #108]	; (8001e00 <measurements_thread_fn+0x160>)
 8001d92:	f006 fd19 	bl	80087c8 <puts>
 8001d96:	e002      	b.n	8001d9e <measurements_thread_fn+0xfe>
		} else {
			printf("PEC FAIL\r\n");
 8001d98:	481a      	ldr	r0, [pc, #104]	; (8001e04 <measurements_thread_fn+0x164>)
 8001d9a:	f006 fd15 	bl	80087c8 <puts>
		}

		Buffer_print(&(slave_device.cfga_bfr));
 8001d9e:	f107 030c 	add.w	r3, r7, #12
 8001da2:	33c2      	adds	r3, #194	; 0xc2
 8001da4:	4618      	mov	r0, r3
 8001da6:	f7fe fd1f 	bl	80007e8 <Buffer_print>

		printf("START ADC CONV\r\n");
 8001daa:	4818      	ldr	r0, [pc, #96]	; (8001e0c <measurements_thread_fn+0x16c>)
 8001dac:	f006 fd0c 	bl	80087c8 <puts>

		success = Ltc6813_read_adc(&slave_device, NORMAL_ADC);
 8001db0:	f107 030c 	add.w	r3, r7, #12
 8001db4:	f44f 7158 	mov.w	r1, #864	; 0x360
 8001db8:	4618      	mov	r0, r3
 8001dba:	f7fe ffea 	bl	8000d92 <Ltc6813_read_adc>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	f887 33ff 	strb.w	r3, [r7, #1023]	; 0x3ff

		printf("FINISH ADC CONV\r\n");
 8001dc4:	4812      	ldr	r0, [pc, #72]	; (8001e10 <measurements_thread_fn+0x170>)
 8001dc6:	f006 fcff 	bl	80087c8 <puts>

		if (success) {
 8001dca:	f897 33ff 	ldrb.w	r3, [r7, #1023]	; 0x3ff
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d003      	beq.n	8001dda <measurements_thread_fn+0x13a>
			printf("PEC SUCCESS\r\n");
 8001dd2:	480b      	ldr	r0, [pc, #44]	; (8001e00 <measurements_thread_fn+0x160>)
 8001dd4:	f006 fcf8 	bl	80087c8 <puts>
 8001dd8:	e002      	b.n	8001de0 <measurements_thread_fn+0x140>
		} else {
			printf("PEC FAIL\r\n");
 8001dda:	480a      	ldr	r0, [pc, #40]	; (8001e04 <measurements_thread_fn+0x164>)
 8001ddc:	f006 fcf4 	bl	80087c8 <puts>
		}

		Ltc6813_print_voltages(&slave_device);
 8001de0:	f107 030c 	add.w	r3, r7, #12
 8001de4:	4618      	mov	r0, r3
 8001de6:	f7fe fe77 	bl	8000ad8 <Ltc6813_print_voltages>


		osDelay(1000);
 8001dea:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001dee:	f003 ffb3 	bl	8005d58 <osDelay>
	while (1) {
 8001df2:	e777      	b.n	8001ce4 <measurements_thread_fn+0x44>
 8001df4:	20004acc 	.word	0x20004acc
 8001df8:	40020000 	.word	0x40020000
 8001dfc:	08009b04 	.word	0x08009b04
 8001e00:	08009b0c 	.word	0x08009b0c
 8001e04:	08009b1c 	.word	0x08009b1c
 8001e08:	08009b28 	.word	0x08009b28
 8001e0c:	08009b38 	.word	0x08009b38
 8001e10:	08009b48 	.word	0x08009b48

08001e14 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001e14:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001e4c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001e18:	480d      	ldr	r0, [pc, #52]	; (8001e50 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001e1a:	490e      	ldr	r1, [pc, #56]	; (8001e54 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001e1c:	4a0e      	ldr	r2, [pc, #56]	; (8001e58 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001e1e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e20:	e002      	b.n	8001e28 <LoopCopyDataInit>

08001e22 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e22:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e24:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e26:	3304      	adds	r3, #4

08001e28 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e28:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e2a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e2c:	d3f9      	bcc.n	8001e22 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e2e:	4a0b      	ldr	r2, [pc, #44]	; (8001e5c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001e30:	4c0b      	ldr	r4, [pc, #44]	; (8001e60 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001e32:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e34:	e001      	b.n	8001e3a <LoopFillZerobss>

08001e36 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e36:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e38:	3204      	adds	r2, #4

08001e3a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e3a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e3c:	d3fb      	bcc.n	8001e36 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001e3e:	f7ff fee9 	bl	8001c14 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001e42:	f006 fc01 	bl	8008648 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e46:	f7ff f80b 	bl	8000e60 <main>
  bx  lr    
 8001e4a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001e4c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001e50:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e54:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001e58:	08009e7c 	.word	0x08009e7c
  ldr r2, =_sbss
 8001e5c:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001e60:	20004c30 	.word	0x20004c30

08001e64 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e64:	e7fe      	b.n	8001e64 <ADC_IRQHandler>
	...

08001e68 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001e6c:	4b0e      	ldr	r3, [pc, #56]	; (8001ea8 <HAL_Init+0x40>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4a0d      	ldr	r2, [pc, #52]	; (8001ea8 <HAL_Init+0x40>)
 8001e72:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e76:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001e78:	4b0b      	ldr	r3, [pc, #44]	; (8001ea8 <HAL_Init+0x40>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4a0a      	ldr	r2, [pc, #40]	; (8001ea8 <HAL_Init+0x40>)
 8001e7e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001e82:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e84:	4b08      	ldr	r3, [pc, #32]	; (8001ea8 <HAL_Init+0x40>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	4a07      	ldr	r2, [pc, #28]	; (8001ea8 <HAL_Init+0x40>)
 8001e8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e8e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e90:	2003      	movs	r0, #3
 8001e92:	f000 fc36 	bl	8002702 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e96:	2000      	movs	r0, #0
 8001e98:	f7ff fd90 	bl	80019bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e9c:	f7ff fb6e 	bl	800157c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ea0:	2300      	movs	r3, #0
}
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	bd80      	pop	{r7, pc}
 8001ea6:	bf00      	nop
 8001ea8:	40023c00 	.word	0x40023c00

08001eac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001eac:	b480      	push	{r7}
 8001eae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001eb0:	4b06      	ldr	r3, [pc, #24]	; (8001ecc <HAL_IncTick+0x20>)
 8001eb2:	781b      	ldrb	r3, [r3, #0]
 8001eb4:	461a      	mov	r2, r3
 8001eb6:	4b06      	ldr	r3, [pc, #24]	; (8001ed0 <HAL_IncTick+0x24>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	4413      	add	r3, r2
 8001ebc:	4a04      	ldr	r2, [pc, #16]	; (8001ed0 <HAL_IncTick+0x24>)
 8001ebe:	6013      	str	r3, [r2, #0]
}
 8001ec0:	bf00      	nop
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec8:	4770      	bx	lr
 8001eca:	bf00      	nop
 8001ecc:	20000008 	.word	0x20000008
 8001ed0:	20004bdc 	.word	0x20004bdc

08001ed4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	af00      	add	r7, sp, #0
  return uwTick;
 8001ed8:	4b03      	ldr	r3, [pc, #12]	; (8001ee8 <HAL_GetTick+0x14>)
 8001eda:	681b      	ldr	r3, [r3, #0]
}
 8001edc:	4618      	mov	r0, r3
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee4:	4770      	bx	lr
 8001ee6:	bf00      	nop
 8001ee8:	20004bdc 	.word	0x20004bdc

08001eec <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b084      	sub	sp, #16
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d101      	bne.n	8001f02 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001efe:	2301      	movs	r3, #1
 8001f00:	e033      	b.n	8001f6a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d109      	bne.n	8001f1e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001f0a:	6878      	ldr	r0, [r7, #4]
 8001f0c:	f7ff fb62 	bl	80015d4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2200      	movs	r2, #0
 8001f14:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	2200      	movs	r2, #0
 8001f1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f22:	f003 0310 	and.w	r3, r3, #16
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d118      	bne.n	8001f5c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f2e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001f32:	f023 0302 	bic.w	r3, r3, #2
 8001f36:	f043 0202 	orr.w	r2, r3, #2
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001f3e:	6878      	ldr	r0, [r7, #4]
 8001f40:	f000 f93a 	bl	80021b8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2200      	movs	r2, #0
 8001f48:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f4e:	f023 0303 	bic.w	r3, r3, #3
 8001f52:	f043 0201 	orr.w	r2, r3, #1
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	641a      	str	r2, [r3, #64]	; 0x40
 8001f5a:	e001      	b.n	8001f60 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001f5c:	2301      	movs	r3, #1
 8001f5e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2200      	movs	r2, #0
 8001f64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001f68:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	3710      	adds	r7, #16
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd80      	pop	{r7, pc}
	...

08001f74 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001f74:	b480      	push	{r7}
 8001f76:	b085      	sub	sp, #20
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
 8001f7c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f88:	2b01      	cmp	r3, #1
 8001f8a:	d101      	bne.n	8001f90 <HAL_ADC_ConfigChannel+0x1c>
 8001f8c:	2302      	movs	r3, #2
 8001f8e:	e105      	b.n	800219c <HAL_ADC_ConfigChannel+0x228>
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2201      	movs	r2, #1
 8001f94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	2b09      	cmp	r3, #9
 8001f9e:	d925      	bls.n	8001fec <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	68d9      	ldr	r1, [r3, #12]
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	b29b      	uxth	r3, r3
 8001fac:	461a      	mov	r2, r3
 8001fae:	4613      	mov	r3, r2
 8001fb0:	005b      	lsls	r3, r3, #1
 8001fb2:	4413      	add	r3, r2
 8001fb4:	3b1e      	subs	r3, #30
 8001fb6:	2207      	movs	r2, #7
 8001fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fbc:	43da      	mvns	r2, r3
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	400a      	ands	r2, r1
 8001fc4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	68d9      	ldr	r1, [r3, #12]
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	689a      	ldr	r2, [r3, #8]
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	b29b      	uxth	r3, r3
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	4603      	mov	r3, r0
 8001fda:	005b      	lsls	r3, r3, #1
 8001fdc:	4403      	add	r3, r0
 8001fde:	3b1e      	subs	r3, #30
 8001fe0:	409a      	lsls	r2, r3
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	430a      	orrs	r2, r1
 8001fe8:	60da      	str	r2, [r3, #12]
 8001fea:	e022      	b.n	8002032 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	6919      	ldr	r1, [r3, #16]
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	b29b      	uxth	r3, r3
 8001ff8:	461a      	mov	r2, r3
 8001ffa:	4613      	mov	r3, r2
 8001ffc:	005b      	lsls	r3, r3, #1
 8001ffe:	4413      	add	r3, r2
 8002000:	2207      	movs	r2, #7
 8002002:	fa02 f303 	lsl.w	r3, r2, r3
 8002006:	43da      	mvns	r2, r3
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	400a      	ands	r2, r1
 800200e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	6919      	ldr	r1, [r3, #16]
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	689a      	ldr	r2, [r3, #8]
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	b29b      	uxth	r3, r3
 8002020:	4618      	mov	r0, r3
 8002022:	4603      	mov	r3, r0
 8002024:	005b      	lsls	r3, r3, #1
 8002026:	4403      	add	r3, r0
 8002028:	409a      	lsls	r2, r3
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	430a      	orrs	r2, r1
 8002030:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	685b      	ldr	r3, [r3, #4]
 8002036:	2b06      	cmp	r3, #6
 8002038:	d824      	bhi.n	8002084 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	685a      	ldr	r2, [r3, #4]
 8002044:	4613      	mov	r3, r2
 8002046:	009b      	lsls	r3, r3, #2
 8002048:	4413      	add	r3, r2
 800204a:	3b05      	subs	r3, #5
 800204c:	221f      	movs	r2, #31
 800204e:	fa02 f303 	lsl.w	r3, r2, r3
 8002052:	43da      	mvns	r2, r3
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	400a      	ands	r2, r1
 800205a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	b29b      	uxth	r3, r3
 8002068:	4618      	mov	r0, r3
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	685a      	ldr	r2, [r3, #4]
 800206e:	4613      	mov	r3, r2
 8002070:	009b      	lsls	r3, r3, #2
 8002072:	4413      	add	r3, r2
 8002074:	3b05      	subs	r3, #5
 8002076:	fa00 f203 	lsl.w	r2, r0, r3
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	430a      	orrs	r2, r1
 8002080:	635a      	str	r2, [r3, #52]	; 0x34
 8002082:	e04c      	b.n	800211e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	2b0c      	cmp	r3, #12
 800208a:	d824      	bhi.n	80020d6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	685a      	ldr	r2, [r3, #4]
 8002096:	4613      	mov	r3, r2
 8002098:	009b      	lsls	r3, r3, #2
 800209a:	4413      	add	r3, r2
 800209c:	3b23      	subs	r3, #35	; 0x23
 800209e:	221f      	movs	r2, #31
 80020a0:	fa02 f303 	lsl.w	r3, r2, r3
 80020a4:	43da      	mvns	r2, r3
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	400a      	ands	r2, r1
 80020ac:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	b29b      	uxth	r3, r3
 80020ba:	4618      	mov	r0, r3
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	685a      	ldr	r2, [r3, #4]
 80020c0:	4613      	mov	r3, r2
 80020c2:	009b      	lsls	r3, r3, #2
 80020c4:	4413      	add	r3, r2
 80020c6:	3b23      	subs	r3, #35	; 0x23
 80020c8:	fa00 f203 	lsl.w	r2, r0, r3
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	430a      	orrs	r2, r1
 80020d2:	631a      	str	r2, [r3, #48]	; 0x30
 80020d4:	e023      	b.n	800211e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	685a      	ldr	r2, [r3, #4]
 80020e0:	4613      	mov	r3, r2
 80020e2:	009b      	lsls	r3, r3, #2
 80020e4:	4413      	add	r3, r2
 80020e6:	3b41      	subs	r3, #65	; 0x41
 80020e8:	221f      	movs	r2, #31
 80020ea:	fa02 f303 	lsl.w	r3, r2, r3
 80020ee:	43da      	mvns	r2, r3
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	400a      	ands	r2, r1
 80020f6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	b29b      	uxth	r3, r3
 8002104:	4618      	mov	r0, r3
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	685a      	ldr	r2, [r3, #4]
 800210a:	4613      	mov	r3, r2
 800210c:	009b      	lsls	r3, r3, #2
 800210e:	4413      	add	r3, r2
 8002110:	3b41      	subs	r3, #65	; 0x41
 8002112:	fa00 f203 	lsl.w	r2, r0, r3
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	430a      	orrs	r2, r1
 800211c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800211e:	4b22      	ldr	r3, [pc, #136]	; (80021a8 <HAL_ADC_ConfigChannel+0x234>)
 8002120:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	4a21      	ldr	r2, [pc, #132]	; (80021ac <HAL_ADC_ConfigChannel+0x238>)
 8002128:	4293      	cmp	r3, r2
 800212a:	d109      	bne.n	8002140 <HAL_ADC_ConfigChannel+0x1cc>
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	2b12      	cmp	r3, #18
 8002132:	d105      	bne.n	8002140 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4a19      	ldr	r2, [pc, #100]	; (80021ac <HAL_ADC_ConfigChannel+0x238>)
 8002146:	4293      	cmp	r3, r2
 8002148:	d123      	bne.n	8002192 <HAL_ADC_ConfigChannel+0x21e>
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	2b10      	cmp	r3, #16
 8002150:	d003      	beq.n	800215a <HAL_ADC_ConfigChannel+0x1e6>
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	2b11      	cmp	r3, #17
 8002158:	d11b      	bne.n	8002192 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	2b10      	cmp	r3, #16
 800216c:	d111      	bne.n	8002192 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800216e:	4b10      	ldr	r3, [pc, #64]	; (80021b0 <HAL_ADC_ConfigChannel+0x23c>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	4a10      	ldr	r2, [pc, #64]	; (80021b4 <HAL_ADC_ConfigChannel+0x240>)
 8002174:	fba2 2303 	umull	r2, r3, r2, r3
 8002178:	0c9a      	lsrs	r2, r3, #18
 800217a:	4613      	mov	r3, r2
 800217c:	009b      	lsls	r3, r3, #2
 800217e:	4413      	add	r3, r2
 8002180:	005b      	lsls	r3, r3, #1
 8002182:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002184:	e002      	b.n	800218c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002186:	68bb      	ldr	r3, [r7, #8]
 8002188:	3b01      	subs	r3, #1
 800218a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800218c:	68bb      	ldr	r3, [r7, #8]
 800218e:	2b00      	cmp	r3, #0
 8002190:	d1f9      	bne.n	8002186 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	2200      	movs	r2, #0
 8002196:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800219a:	2300      	movs	r3, #0
}
 800219c:	4618      	mov	r0, r3
 800219e:	3714      	adds	r7, #20
 80021a0:	46bd      	mov	sp, r7
 80021a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a6:	4770      	bx	lr
 80021a8:	40012300 	.word	0x40012300
 80021ac:	40012000 	.word	0x40012000
 80021b0:	20000000 	.word	0x20000000
 80021b4:	431bde83 	.word	0x431bde83

080021b8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80021b8:	b480      	push	{r7}
 80021ba:	b085      	sub	sp, #20
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80021c0:	4b79      	ldr	r3, [pc, #484]	; (80023a8 <ADC_Init+0x1f0>)
 80021c2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	685a      	ldr	r2, [r3, #4]
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	431a      	orrs	r2, r3
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	685a      	ldr	r2, [r3, #4]
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80021ec:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	6859      	ldr	r1, [r3, #4]
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	691b      	ldr	r3, [r3, #16]
 80021f8:	021a      	lsls	r2, r3, #8
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	430a      	orrs	r2, r1
 8002200:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	685a      	ldr	r2, [r3, #4]
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002210:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	6859      	ldr	r1, [r3, #4]
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	689a      	ldr	r2, [r3, #8]
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	430a      	orrs	r2, r1
 8002222:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	689a      	ldr	r2, [r3, #8]
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002232:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	6899      	ldr	r1, [r3, #8]
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	68da      	ldr	r2, [r3, #12]
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	430a      	orrs	r2, r1
 8002244:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800224a:	4a58      	ldr	r2, [pc, #352]	; (80023ac <ADC_Init+0x1f4>)
 800224c:	4293      	cmp	r3, r2
 800224e:	d022      	beq.n	8002296 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	689a      	ldr	r2, [r3, #8]
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800225e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	6899      	ldr	r1, [r3, #8]
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	430a      	orrs	r2, r1
 8002270:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	689a      	ldr	r2, [r3, #8]
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002280:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	6899      	ldr	r1, [r3, #8]
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	430a      	orrs	r2, r1
 8002292:	609a      	str	r2, [r3, #8]
 8002294:	e00f      	b.n	80022b6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	689a      	ldr	r2, [r3, #8]
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80022a4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	689a      	ldr	r2, [r3, #8]
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80022b4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	689a      	ldr	r2, [r3, #8]
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f022 0202 	bic.w	r2, r2, #2
 80022c4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	6899      	ldr	r1, [r3, #8]
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	7e1b      	ldrb	r3, [r3, #24]
 80022d0:	005a      	lsls	r2, r3, #1
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	430a      	orrs	r2, r1
 80022d8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d01b      	beq.n	800231c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	685a      	ldr	r2, [r3, #4]
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80022f2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	685a      	ldr	r2, [r3, #4]
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002302:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	6859      	ldr	r1, [r3, #4]
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800230e:	3b01      	subs	r3, #1
 8002310:	035a      	lsls	r2, r3, #13
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	430a      	orrs	r2, r1
 8002318:	605a      	str	r2, [r3, #4]
 800231a:	e007      	b.n	800232c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	685a      	ldr	r2, [r3, #4]
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800232a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800233a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	69db      	ldr	r3, [r3, #28]
 8002346:	3b01      	subs	r3, #1
 8002348:	051a      	lsls	r2, r3, #20
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	430a      	orrs	r2, r1
 8002350:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	689a      	ldr	r2, [r3, #8]
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002360:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	6899      	ldr	r1, [r3, #8]
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800236e:	025a      	lsls	r2, r3, #9
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	430a      	orrs	r2, r1
 8002376:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	689a      	ldr	r2, [r3, #8]
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002386:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	6899      	ldr	r1, [r3, #8]
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	695b      	ldr	r3, [r3, #20]
 8002392:	029a      	lsls	r2, r3, #10
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	430a      	orrs	r2, r1
 800239a:	609a      	str	r2, [r3, #8]
}
 800239c:	bf00      	nop
 800239e:	3714      	adds	r7, #20
 80023a0:	46bd      	mov	sp, r7
 80023a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a6:	4770      	bx	lr
 80023a8:	40012300 	.word	0x40012300
 80023ac:	0f000001 	.word	0x0f000001

080023b0 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b084      	sub	sp, #16
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d101      	bne.n	80023c2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80023be:	2301      	movs	r3, #1
 80023c0:	e0ed      	b.n	800259e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80023c8:	b2db      	uxtb	r3, r3
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d102      	bne.n	80023d4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80023ce:	6878      	ldr	r0, [r7, #4]
 80023d0:	f7ff f960 	bl	8001694 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	681a      	ldr	r2, [r3, #0]
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f022 0202 	bic.w	r2, r2, #2
 80023e2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80023e4:	f7ff fd76 	bl	8001ed4 <HAL_GetTick>
 80023e8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80023ea:	e012      	b.n	8002412 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80023ec:	f7ff fd72 	bl	8001ed4 <HAL_GetTick>
 80023f0:	4602      	mov	r2, r0
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	1ad3      	subs	r3, r2, r3
 80023f6:	2b0a      	cmp	r3, #10
 80023f8:	d90b      	bls.n	8002412 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023fe:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	2205      	movs	r2, #5
 800240a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800240e:	2301      	movs	r3, #1
 8002410:	e0c5      	b.n	800259e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	f003 0302 	and.w	r3, r3, #2
 800241c:	2b00      	cmp	r3, #0
 800241e:	d1e5      	bne.n	80023ec <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	681a      	ldr	r2, [r3, #0]
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f042 0201 	orr.w	r2, r2, #1
 800242e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002430:	f7ff fd50 	bl	8001ed4 <HAL_GetTick>
 8002434:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002436:	e012      	b.n	800245e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002438:	f7ff fd4c 	bl	8001ed4 <HAL_GetTick>
 800243c:	4602      	mov	r2, r0
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	1ad3      	subs	r3, r2, r3
 8002442:	2b0a      	cmp	r3, #10
 8002444:	d90b      	bls.n	800245e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800244a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	2205      	movs	r2, #5
 8002456:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800245a:	2301      	movs	r3, #1
 800245c:	e09f      	b.n	800259e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	f003 0301 	and.w	r3, r3, #1
 8002468:	2b00      	cmp	r3, #0
 800246a:	d0e5      	beq.n	8002438 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	7e1b      	ldrb	r3, [r3, #24]
 8002470:	2b01      	cmp	r3, #1
 8002472:	d108      	bne.n	8002486 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	681a      	ldr	r2, [r3, #0]
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002482:	601a      	str	r2, [r3, #0]
 8002484:	e007      	b.n	8002496 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	681a      	ldr	r2, [r3, #0]
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002494:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	7e5b      	ldrb	r3, [r3, #25]
 800249a:	2b01      	cmp	r3, #1
 800249c:	d108      	bne.n	80024b0 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	681a      	ldr	r2, [r3, #0]
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80024ac:	601a      	str	r2, [r3, #0]
 80024ae:	e007      	b.n	80024c0 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	681a      	ldr	r2, [r3, #0]
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80024be:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	7e9b      	ldrb	r3, [r3, #26]
 80024c4:	2b01      	cmp	r3, #1
 80024c6:	d108      	bne.n	80024da <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	681a      	ldr	r2, [r3, #0]
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f042 0220 	orr.w	r2, r2, #32
 80024d6:	601a      	str	r2, [r3, #0]
 80024d8:	e007      	b.n	80024ea <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	681a      	ldr	r2, [r3, #0]
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f022 0220 	bic.w	r2, r2, #32
 80024e8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	7edb      	ldrb	r3, [r3, #27]
 80024ee:	2b01      	cmp	r3, #1
 80024f0:	d108      	bne.n	8002504 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	681a      	ldr	r2, [r3, #0]
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f022 0210 	bic.w	r2, r2, #16
 8002500:	601a      	str	r2, [r3, #0]
 8002502:	e007      	b.n	8002514 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	681a      	ldr	r2, [r3, #0]
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f042 0210 	orr.w	r2, r2, #16
 8002512:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	7f1b      	ldrb	r3, [r3, #28]
 8002518:	2b01      	cmp	r3, #1
 800251a:	d108      	bne.n	800252e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	681a      	ldr	r2, [r3, #0]
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f042 0208 	orr.w	r2, r2, #8
 800252a:	601a      	str	r2, [r3, #0]
 800252c:	e007      	b.n	800253e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	681a      	ldr	r2, [r3, #0]
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f022 0208 	bic.w	r2, r2, #8
 800253c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	7f5b      	ldrb	r3, [r3, #29]
 8002542:	2b01      	cmp	r3, #1
 8002544:	d108      	bne.n	8002558 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	681a      	ldr	r2, [r3, #0]
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f042 0204 	orr.w	r2, r2, #4
 8002554:	601a      	str	r2, [r3, #0]
 8002556:	e007      	b.n	8002568 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	681a      	ldr	r2, [r3, #0]
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f022 0204 	bic.w	r2, r2, #4
 8002566:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	689a      	ldr	r2, [r3, #8]
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	68db      	ldr	r3, [r3, #12]
 8002570:	431a      	orrs	r2, r3
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	691b      	ldr	r3, [r3, #16]
 8002576:	431a      	orrs	r2, r3
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	695b      	ldr	r3, [r3, #20]
 800257c:	ea42 0103 	orr.w	r1, r2, r3
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	1e5a      	subs	r2, r3, #1
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	430a      	orrs	r2, r1
 800258c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	2200      	movs	r2, #0
 8002592:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2201      	movs	r2, #1
 8002598:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800259c:	2300      	movs	r3, #0
}
 800259e:	4618      	mov	r0, r3
 80025a0:	3710      	adds	r7, #16
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bd80      	pop	{r7, pc}
	...

080025a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025a8:	b480      	push	{r7}
 80025aa:	b085      	sub	sp, #20
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	f003 0307 	and.w	r3, r3, #7
 80025b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80025b8:	4b0c      	ldr	r3, [pc, #48]	; (80025ec <__NVIC_SetPriorityGrouping+0x44>)
 80025ba:	68db      	ldr	r3, [r3, #12]
 80025bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80025be:	68ba      	ldr	r2, [r7, #8]
 80025c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80025c4:	4013      	ands	r3, r2
 80025c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80025cc:	68bb      	ldr	r3, [r7, #8]
 80025ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80025d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80025d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80025da:	4a04      	ldr	r2, [pc, #16]	; (80025ec <__NVIC_SetPriorityGrouping+0x44>)
 80025dc:	68bb      	ldr	r3, [r7, #8]
 80025de:	60d3      	str	r3, [r2, #12]
}
 80025e0:	bf00      	nop
 80025e2:	3714      	adds	r7, #20
 80025e4:	46bd      	mov	sp, r7
 80025e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ea:	4770      	bx	lr
 80025ec:	e000ed00 	.word	0xe000ed00

080025f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80025f0:	b480      	push	{r7}
 80025f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80025f4:	4b04      	ldr	r3, [pc, #16]	; (8002608 <__NVIC_GetPriorityGrouping+0x18>)
 80025f6:	68db      	ldr	r3, [r3, #12]
 80025f8:	0a1b      	lsrs	r3, r3, #8
 80025fa:	f003 0307 	and.w	r3, r3, #7
}
 80025fe:	4618      	mov	r0, r3
 8002600:	46bd      	mov	sp, r7
 8002602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002606:	4770      	bx	lr
 8002608:	e000ed00 	.word	0xe000ed00

0800260c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800260c:	b480      	push	{r7}
 800260e:	b083      	sub	sp, #12
 8002610:	af00      	add	r7, sp, #0
 8002612:	4603      	mov	r3, r0
 8002614:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002616:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800261a:	2b00      	cmp	r3, #0
 800261c:	db0b      	blt.n	8002636 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800261e:	79fb      	ldrb	r3, [r7, #7]
 8002620:	f003 021f 	and.w	r2, r3, #31
 8002624:	4907      	ldr	r1, [pc, #28]	; (8002644 <__NVIC_EnableIRQ+0x38>)
 8002626:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800262a:	095b      	lsrs	r3, r3, #5
 800262c:	2001      	movs	r0, #1
 800262e:	fa00 f202 	lsl.w	r2, r0, r2
 8002632:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002636:	bf00      	nop
 8002638:	370c      	adds	r7, #12
 800263a:	46bd      	mov	sp, r7
 800263c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002640:	4770      	bx	lr
 8002642:	bf00      	nop
 8002644:	e000e100 	.word	0xe000e100

08002648 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002648:	b480      	push	{r7}
 800264a:	b083      	sub	sp, #12
 800264c:	af00      	add	r7, sp, #0
 800264e:	4603      	mov	r3, r0
 8002650:	6039      	str	r1, [r7, #0]
 8002652:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002654:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002658:	2b00      	cmp	r3, #0
 800265a:	db0a      	blt.n	8002672 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	b2da      	uxtb	r2, r3
 8002660:	490c      	ldr	r1, [pc, #48]	; (8002694 <__NVIC_SetPriority+0x4c>)
 8002662:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002666:	0112      	lsls	r2, r2, #4
 8002668:	b2d2      	uxtb	r2, r2
 800266a:	440b      	add	r3, r1
 800266c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002670:	e00a      	b.n	8002688 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	b2da      	uxtb	r2, r3
 8002676:	4908      	ldr	r1, [pc, #32]	; (8002698 <__NVIC_SetPriority+0x50>)
 8002678:	79fb      	ldrb	r3, [r7, #7]
 800267a:	f003 030f 	and.w	r3, r3, #15
 800267e:	3b04      	subs	r3, #4
 8002680:	0112      	lsls	r2, r2, #4
 8002682:	b2d2      	uxtb	r2, r2
 8002684:	440b      	add	r3, r1
 8002686:	761a      	strb	r2, [r3, #24]
}
 8002688:	bf00      	nop
 800268a:	370c      	adds	r7, #12
 800268c:	46bd      	mov	sp, r7
 800268e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002692:	4770      	bx	lr
 8002694:	e000e100 	.word	0xe000e100
 8002698:	e000ed00 	.word	0xe000ed00

0800269c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800269c:	b480      	push	{r7}
 800269e:	b089      	sub	sp, #36	; 0x24
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	60f8      	str	r0, [r7, #12]
 80026a4:	60b9      	str	r1, [r7, #8]
 80026a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	f003 0307 	and.w	r3, r3, #7
 80026ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80026b0:	69fb      	ldr	r3, [r7, #28]
 80026b2:	f1c3 0307 	rsb	r3, r3, #7
 80026b6:	2b04      	cmp	r3, #4
 80026b8:	bf28      	it	cs
 80026ba:	2304      	movcs	r3, #4
 80026bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80026be:	69fb      	ldr	r3, [r7, #28]
 80026c0:	3304      	adds	r3, #4
 80026c2:	2b06      	cmp	r3, #6
 80026c4:	d902      	bls.n	80026cc <NVIC_EncodePriority+0x30>
 80026c6:	69fb      	ldr	r3, [r7, #28]
 80026c8:	3b03      	subs	r3, #3
 80026ca:	e000      	b.n	80026ce <NVIC_EncodePriority+0x32>
 80026cc:	2300      	movs	r3, #0
 80026ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026d0:	f04f 32ff 	mov.w	r2, #4294967295
 80026d4:	69bb      	ldr	r3, [r7, #24]
 80026d6:	fa02 f303 	lsl.w	r3, r2, r3
 80026da:	43da      	mvns	r2, r3
 80026dc:	68bb      	ldr	r3, [r7, #8]
 80026de:	401a      	ands	r2, r3
 80026e0:	697b      	ldr	r3, [r7, #20]
 80026e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80026e4:	f04f 31ff 	mov.w	r1, #4294967295
 80026e8:	697b      	ldr	r3, [r7, #20]
 80026ea:	fa01 f303 	lsl.w	r3, r1, r3
 80026ee:	43d9      	mvns	r1, r3
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026f4:	4313      	orrs	r3, r2
         );
}
 80026f6:	4618      	mov	r0, r3
 80026f8:	3724      	adds	r7, #36	; 0x24
 80026fa:	46bd      	mov	sp, r7
 80026fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002700:	4770      	bx	lr

08002702 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002702:	b580      	push	{r7, lr}
 8002704:	b082      	sub	sp, #8
 8002706:	af00      	add	r7, sp, #0
 8002708:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800270a:	6878      	ldr	r0, [r7, #4]
 800270c:	f7ff ff4c 	bl	80025a8 <__NVIC_SetPriorityGrouping>
}
 8002710:	bf00      	nop
 8002712:	3708      	adds	r7, #8
 8002714:	46bd      	mov	sp, r7
 8002716:	bd80      	pop	{r7, pc}

08002718 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002718:	b580      	push	{r7, lr}
 800271a:	b086      	sub	sp, #24
 800271c:	af00      	add	r7, sp, #0
 800271e:	4603      	mov	r3, r0
 8002720:	60b9      	str	r1, [r7, #8]
 8002722:	607a      	str	r2, [r7, #4]
 8002724:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002726:	2300      	movs	r3, #0
 8002728:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800272a:	f7ff ff61 	bl	80025f0 <__NVIC_GetPriorityGrouping>
 800272e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002730:	687a      	ldr	r2, [r7, #4]
 8002732:	68b9      	ldr	r1, [r7, #8]
 8002734:	6978      	ldr	r0, [r7, #20]
 8002736:	f7ff ffb1 	bl	800269c <NVIC_EncodePriority>
 800273a:	4602      	mov	r2, r0
 800273c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002740:	4611      	mov	r1, r2
 8002742:	4618      	mov	r0, r3
 8002744:	f7ff ff80 	bl	8002648 <__NVIC_SetPriority>
}
 8002748:	bf00      	nop
 800274a:	3718      	adds	r7, #24
 800274c:	46bd      	mov	sp, r7
 800274e:	bd80      	pop	{r7, pc}

08002750 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b082      	sub	sp, #8
 8002754:	af00      	add	r7, sp, #0
 8002756:	4603      	mov	r3, r0
 8002758:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800275a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800275e:	4618      	mov	r0, r3
 8002760:	f7ff ff54 	bl	800260c <__NVIC_EnableIRQ>
}
 8002764:	bf00      	nop
 8002766:	3708      	adds	r7, #8
 8002768:	46bd      	mov	sp, r7
 800276a:	bd80      	pop	{r7, pc}

0800276c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800276c:	b480      	push	{r7}
 800276e:	b089      	sub	sp, #36	; 0x24
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
 8002774:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002776:	2300      	movs	r3, #0
 8002778:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800277a:	2300      	movs	r3, #0
 800277c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800277e:	2300      	movs	r3, #0
 8002780:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002782:	2300      	movs	r3, #0
 8002784:	61fb      	str	r3, [r7, #28]
 8002786:	e16b      	b.n	8002a60 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002788:	2201      	movs	r2, #1
 800278a:	69fb      	ldr	r3, [r7, #28]
 800278c:	fa02 f303 	lsl.w	r3, r2, r3
 8002790:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	697a      	ldr	r2, [r7, #20]
 8002798:	4013      	ands	r3, r2
 800279a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800279c:	693a      	ldr	r2, [r7, #16]
 800279e:	697b      	ldr	r3, [r7, #20]
 80027a0:	429a      	cmp	r2, r3
 80027a2:	f040 815a 	bne.w	8002a5a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	f003 0303 	and.w	r3, r3, #3
 80027ae:	2b01      	cmp	r3, #1
 80027b0:	d005      	beq.n	80027be <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80027ba:	2b02      	cmp	r3, #2
 80027bc:	d130      	bne.n	8002820 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	689b      	ldr	r3, [r3, #8]
 80027c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80027c4:	69fb      	ldr	r3, [r7, #28]
 80027c6:	005b      	lsls	r3, r3, #1
 80027c8:	2203      	movs	r2, #3
 80027ca:	fa02 f303 	lsl.w	r3, r2, r3
 80027ce:	43db      	mvns	r3, r3
 80027d0:	69ba      	ldr	r2, [r7, #24]
 80027d2:	4013      	ands	r3, r2
 80027d4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	68da      	ldr	r2, [r3, #12]
 80027da:	69fb      	ldr	r3, [r7, #28]
 80027dc:	005b      	lsls	r3, r3, #1
 80027de:	fa02 f303 	lsl.w	r3, r2, r3
 80027e2:	69ba      	ldr	r2, [r7, #24]
 80027e4:	4313      	orrs	r3, r2
 80027e6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	69ba      	ldr	r2, [r7, #24]
 80027ec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80027f4:	2201      	movs	r2, #1
 80027f6:	69fb      	ldr	r3, [r7, #28]
 80027f8:	fa02 f303 	lsl.w	r3, r2, r3
 80027fc:	43db      	mvns	r3, r3
 80027fe:	69ba      	ldr	r2, [r7, #24]
 8002800:	4013      	ands	r3, r2
 8002802:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	091b      	lsrs	r3, r3, #4
 800280a:	f003 0201 	and.w	r2, r3, #1
 800280e:	69fb      	ldr	r3, [r7, #28]
 8002810:	fa02 f303 	lsl.w	r3, r2, r3
 8002814:	69ba      	ldr	r2, [r7, #24]
 8002816:	4313      	orrs	r3, r2
 8002818:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	69ba      	ldr	r2, [r7, #24]
 800281e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	f003 0303 	and.w	r3, r3, #3
 8002828:	2b03      	cmp	r3, #3
 800282a:	d017      	beq.n	800285c <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	68db      	ldr	r3, [r3, #12]
 8002830:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002832:	69fb      	ldr	r3, [r7, #28]
 8002834:	005b      	lsls	r3, r3, #1
 8002836:	2203      	movs	r2, #3
 8002838:	fa02 f303 	lsl.w	r3, r2, r3
 800283c:	43db      	mvns	r3, r3
 800283e:	69ba      	ldr	r2, [r7, #24]
 8002840:	4013      	ands	r3, r2
 8002842:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	689a      	ldr	r2, [r3, #8]
 8002848:	69fb      	ldr	r3, [r7, #28]
 800284a:	005b      	lsls	r3, r3, #1
 800284c:	fa02 f303 	lsl.w	r3, r2, r3
 8002850:	69ba      	ldr	r2, [r7, #24]
 8002852:	4313      	orrs	r3, r2
 8002854:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	69ba      	ldr	r2, [r7, #24]
 800285a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	f003 0303 	and.w	r3, r3, #3
 8002864:	2b02      	cmp	r3, #2
 8002866:	d123      	bne.n	80028b0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002868:	69fb      	ldr	r3, [r7, #28]
 800286a:	08da      	lsrs	r2, r3, #3
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	3208      	adds	r2, #8
 8002870:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002874:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002876:	69fb      	ldr	r3, [r7, #28]
 8002878:	f003 0307 	and.w	r3, r3, #7
 800287c:	009b      	lsls	r3, r3, #2
 800287e:	220f      	movs	r2, #15
 8002880:	fa02 f303 	lsl.w	r3, r2, r3
 8002884:	43db      	mvns	r3, r3
 8002886:	69ba      	ldr	r2, [r7, #24]
 8002888:	4013      	ands	r3, r2
 800288a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	691a      	ldr	r2, [r3, #16]
 8002890:	69fb      	ldr	r3, [r7, #28]
 8002892:	f003 0307 	and.w	r3, r3, #7
 8002896:	009b      	lsls	r3, r3, #2
 8002898:	fa02 f303 	lsl.w	r3, r2, r3
 800289c:	69ba      	ldr	r2, [r7, #24]
 800289e:	4313      	orrs	r3, r2
 80028a0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80028a2:	69fb      	ldr	r3, [r7, #28]
 80028a4:	08da      	lsrs	r2, r3, #3
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	3208      	adds	r2, #8
 80028aa:	69b9      	ldr	r1, [r7, #24]
 80028ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80028b6:	69fb      	ldr	r3, [r7, #28]
 80028b8:	005b      	lsls	r3, r3, #1
 80028ba:	2203      	movs	r2, #3
 80028bc:	fa02 f303 	lsl.w	r3, r2, r3
 80028c0:	43db      	mvns	r3, r3
 80028c2:	69ba      	ldr	r2, [r7, #24]
 80028c4:	4013      	ands	r3, r2
 80028c6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	f003 0203 	and.w	r2, r3, #3
 80028d0:	69fb      	ldr	r3, [r7, #28]
 80028d2:	005b      	lsls	r3, r3, #1
 80028d4:	fa02 f303 	lsl.w	r3, r2, r3
 80028d8:	69ba      	ldr	r2, [r7, #24]
 80028da:	4313      	orrs	r3, r2
 80028dc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	69ba      	ldr	r2, [r7, #24]
 80028e2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	685b      	ldr	r3, [r3, #4]
 80028e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	f000 80b4 	beq.w	8002a5a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028f2:	2300      	movs	r3, #0
 80028f4:	60fb      	str	r3, [r7, #12]
 80028f6:	4b60      	ldr	r3, [pc, #384]	; (8002a78 <HAL_GPIO_Init+0x30c>)
 80028f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028fa:	4a5f      	ldr	r2, [pc, #380]	; (8002a78 <HAL_GPIO_Init+0x30c>)
 80028fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002900:	6453      	str	r3, [r2, #68]	; 0x44
 8002902:	4b5d      	ldr	r3, [pc, #372]	; (8002a78 <HAL_GPIO_Init+0x30c>)
 8002904:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002906:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800290a:	60fb      	str	r3, [r7, #12]
 800290c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800290e:	4a5b      	ldr	r2, [pc, #364]	; (8002a7c <HAL_GPIO_Init+0x310>)
 8002910:	69fb      	ldr	r3, [r7, #28]
 8002912:	089b      	lsrs	r3, r3, #2
 8002914:	3302      	adds	r3, #2
 8002916:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800291a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800291c:	69fb      	ldr	r3, [r7, #28]
 800291e:	f003 0303 	and.w	r3, r3, #3
 8002922:	009b      	lsls	r3, r3, #2
 8002924:	220f      	movs	r2, #15
 8002926:	fa02 f303 	lsl.w	r3, r2, r3
 800292a:	43db      	mvns	r3, r3
 800292c:	69ba      	ldr	r2, [r7, #24]
 800292e:	4013      	ands	r3, r2
 8002930:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	4a52      	ldr	r2, [pc, #328]	; (8002a80 <HAL_GPIO_Init+0x314>)
 8002936:	4293      	cmp	r3, r2
 8002938:	d02b      	beq.n	8002992 <HAL_GPIO_Init+0x226>
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	4a51      	ldr	r2, [pc, #324]	; (8002a84 <HAL_GPIO_Init+0x318>)
 800293e:	4293      	cmp	r3, r2
 8002940:	d025      	beq.n	800298e <HAL_GPIO_Init+0x222>
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	4a50      	ldr	r2, [pc, #320]	; (8002a88 <HAL_GPIO_Init+0x31c>)
 8002946:	4293      	cmp	r3, r2
 8002948:	d01f      	beq.n	800298a <HAL_GPIO_Init+0x21e>
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	4a4f      	ldr	r2, [pc, #316]	; (8002a8c <HAL_GPIO_Init+0x320>)
 800294e:	4293      	cmp	r3, r2
 8002950:	d019      	beq.n	8002986 <HAL_GPIO_Init+0x21a>
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	4a4e      	ldr	r2, [pc, #312]	; (8002a90 <HAL_GPIO_Init+0x324>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d013      	beq.n	8002982 <HAL_GPIO_Init+0x216>
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	4a4d      	ldr	r2, [pc, #308]	; (8002a94 <HAL_GPIO_Init+0x328>)
 800295e:	4293      	cmp	r3, r2
 8002960:	d00d      	beq.n	800297e <HAL_GPIO_Init+0x212>
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	4a4c      	ldr	r2, [pc, #304]	; (8002a98 <HAL_GPIO_Init+0x32c>)
 8002966:	4293      	cmp	r3, r2
 8002968:	d007      	beq.n	800297a <HAL_GPIO_Init+0x20e>
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	4a4b      	ldr	r2, [pc, #300]	; (8002a9c <HAL_GPIO_Init+0x330>)
 800296e:	4293      	cmp	r3, r2
 8002970:	d101      	bne.n	8002976 <HAL_GPIO_Init+0x20a>
 8002972:	2307      	movs	r3, #7
 8002974:	e00e      	b.n	8002994 <HAL_GPIO_Init+0x228>
 8002976:	2308      	movs	r3, #8
 8002978:	e00c      	b.n	8002994 <HAL_GPIO_Init+0x228>
 800297a:	2306      	movs	r3, #6
 800297c:	e00a      	b.n	8002994 <HAL_GPIO_Init+0x228>
 800297e:	2305      	movs	r3, #5
 8002980:	e008      	b.n	8002994 <HAL_GPIO_Init+0x228>
 8002982:	2304      	movs	r3, #4
 8002984:	e006      	b.n	8002994 <HAL_GPIO_Init+0x228>
 8002986:	2303      	movs	r3, #3
 8002988:	e004      	b.n	8002994 <HAL_GPIO_Init+0x228>
 800298a:	2302      	movs	r3, #2
 800298c:	e002      	b.n	8002994 <HAL_GPIO_Init+0x228>
 800298e:	2301      	movs	r3, #1
 8002990:	e000      	b.n	8002994 <HAL_GPIO_Init+0x228>
 8002992:	2300      	movs	r3, #0
 8002994:	69fa      	ldr	r2, [r7, #28]
 8002996:	f002 0203 	and.w	r2, r2, #3
 800299a:	0092      	lsls	r2, r2, #2
 800299c:	4093      	lsls	r3, r2
 800299e:	69ba      	ldr	r2, [r7, #24]
 80029a0:	4313      	orrs	r3, r2
 80029a2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80029a4:	4935      	ldr	r1, [pc, #212]	; (8002a7c <HAL_GPIO_Init+0x310>)
 80029a6:	69fb      	ldr	r3, [r7, #28]
 80029a8:	089b      	lsrs	r3, r3, #2
 80029aa:	3302      	adds	r3, #2
 80029ac:	69ba      	ldr	r2, [r7, #24]
 80029ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80029b2:	4b3b      	ldr	r3, [pc, #236]	; (8002aa0 <HAL_GPIO_Init+0x334>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029b8:	693b      	ldr	r3, [r7, #16]
 80029ba:	43db      	mvns	r3, r3
 80029bc:	69ba      	ldr	r2, [r7, #24]
 80029be:	4013      	ands	r3, r2
 80029c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d003      	beq.n	80029d6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80029ce:	69ba      	ldr	r2, [r7, #24]
 80029d0:	693b      	ldr	r3, [r7, #16]
 80029d2:	4313      	orrs	r3, r2
 80029d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80029d6:	4a32      	ldr	r2, [pc, #200]	; (8002aa0 <HAL_GPIO_Init+0x334>)
 80029d8:	69bb      	ldr	r3, [r7, #24]
 80029da:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80029dc:	4b30      	ldr	r3, [pc, #192]	; (8002aa0 <HAL_GPIO_Init+0x334>)
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029e2:	693b      	ldr	r3, [r7, #16]
 80029e4:	43db      	mvns	r3, r3
 80029e6:	69ba      	ldr	r2, [r7, #24]
 80029e8:	4013      	ands	r3, r2
 80029ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d003      	beq.n	8002a00 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80029f8:	69ba      	ldr	r2, [r7, #24]
 80029fa:	693b      	ldr	r3, [r7, #16]
 80029fc:	4313      	orrs	r3, r2
 80029fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002a00:	4a27      	ldr	r2, [pc, #156]	; (8002aa0 <HAL_GPIO_Init+0x334>)
 8002a02:	69bb      	ldr	r3, [r7, #24]
 8002a04:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002a06:	4b26      	ldr	r3, [pc, #152]	; (8002aa0 <HAL_GPIO_Init+0x334>)
 8002a08:	689b      	ldr	r3, [r3, #8]
 8002a0a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a0c:	693b      	ldr	r3, [r7, #16]
 8002a0e:	43db      	mvns	r3, r3
 8002a10:	69ba      	ldr	r2, [r7, #24]
 8002a12:	4013      	ands	r3, r2
 8002a14:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	685b      	ldr	r3, [r3, #4]
 8002a1a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d003      	beq.n	8002a2a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002a22:	69ba      	ldr	r2, [r7, #24]
 8002a24:	693b      	ldr	r3, [r7, #16]
 8002a26:	4313      	orrs	r3, r2
 8002a28:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002a2a:	4a1d      	ldr	r2, [pc, #116]	; (8002aa0 <HAL_GPIO_Init+0x334>)
 8002a2c:	69bb      	ldr	r3, [r7, #24]
 8002a2e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002a30:	4b1b      	ldr	r3, [pc, #108]	; (8002aa0 <HAL_GPIO_Init+0x334>)
 8002a32:	68db      	ldr	r3, [r3, #12]
 8002a34:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a36:	693b      	ldr	r3, [r7, #16]
 8002a38:	43db      	mvns	r3, r3
 8002a3a:	69ba      	ldr	r2, [r7, #24]
 8002a3c:	4013      	ands	r3, r2
 8002a3e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	685b      	ldr	r3, [r3, #4]
 8002a44:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d003      	beq.n	8002a54 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002a4c:	69ba      	ldr	r2, [r7, #24]
 8002a4e:	693b      	ldr	r3, [r7, #16]
 8002a50:	4313      	orrs	r3, r2
 8002a52:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002a54:	4a12      	ldr	r2, [pc, #72]	; (8002aa0 <HAL_GPIO_Init+0x334>)
 8002a56:	69bb      	ldr	r3, [r7, #24]
 8002a58:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a5a:	69fb      	ldr	r3, [r7, #28]
 8002a5c:	3301      	adds	r3, #1
 8002a5e:	61fb      	str	r3, [r7, #28]
 8002a60:	69fb      	ldr	r3, [r7, #28]
 8002a62:	2b0f      	cmp	r3, #15
 8002a64:	f67f ae90 	bls.w	8002788 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002a68:	bf00      	nop
 8002a6a:	bf00      	nop
 8002a6c:	3724      	adds	r7, #36	; 0x24
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a74:	4770      	bx	lr
 8002a76:	bf00      	nop
 8002a78:	40023800 	.word	0x40023800
 8002a7c:	40013800 	.word	0x40013800
 8002a80:	40020000 	.word	0x40020000
 8002a84:	40020400 	.word	0x40020400
 8002a88:	40020800 	.word	0x40020800
 8002a8c:	40020c00 	.word	0x40020c00
 8002a90:	40021000 	.word	0x40021000
 8002a94:	40021400 	.word	0x40021400
 8002a98:	40021800 	.word	0x40021800
 8002a9c:	40021c00 	.word	0x40021c00
 8002aa0:	40013c00 	.word	0x40013c00

08002aa4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	b083      	sub	sp, #12
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
 8002aac:	460b      	mov	r3, r1
 8002aae:	807b      	strh	r3, [r7, #2]
 8002ab0:	4613      	mov	r3, r2
 8002ab2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002ab4:	787b      	ldrb	r3, [r7, #1]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d003      	beq.n	8002ac2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002aba:	887a      	ldrh	r2, [r7, #2]
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002ac0:	e003      	b.n	8002aca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002ac2:	887b      	ldrh	r3, [r7, #2]
 8002ac4:	041a      	lsls	r2, r3, #16
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	619a      	str	r2, [r3, #24]
}
 8002aca:	bf00      	nop
 8002acc:	370c      	adds	r7, #12
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad4:	4770      	bx	lr

08002ad6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002ad6:	b480      	push	{r7}
 8002ad8:	b085      	sub	sp, #20
 8002ada:	af00      	add	r7, sp, #0
 8002adc:	6078      	str	r0, [r7, #4]
 8002ade:	460b      	mov	r3, r1
 8002ae0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	695b      	ldr	r3, [r3, #20]
 8002ae6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002ae8:	887a      	ldrh	r2, [r7, #2]
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	4013      	ands	r3, r2
 8002aee:	041a      	lsls	r2, r3, #16
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	43d9      	mvns	r1, r3
 8002af4:	887b      	ldrh	r3, [r7, #2]
 8002af6:	400b      	ands	r3, r1
 8002af8:	431a      	orrs	r2, r3
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	619a      	str	r2, [r3, #24]
}
 8002afe:	bf00      	nop
 8002b00:	3714      	adds	r7, #20
 8002b02:	46bd      	mov	sp, r7
 8002b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b08:	4770      	bx	lr
	...

08002b0c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b086      	sub	sp, #24
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d101      	bne.n	8002b1e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	e264      	b.n	8002fe8 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f003 0301 	and.w	r3, r3, #1
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d075      	beq.n	8002c16 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002b2a:	4ba3      	ldr	r3, [pc, #652]	; (8002db8 <HAL_RCC_OscConfig+0x2ac>)
 8002b2c:	689b      	ldr	r3, [r3, #8]
 8002b2e:	f003 030c 	and.w	r3, r3, #12
 8002b32:	2b04      	cmp	r3, #4
 8002b34:	d00c      	beq.n	8002b50 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b36:	4ba0      	ldr	r3, [pc, #640]	; (8002db8 <HAL_RCC_OscConfig+0x2ac>)
 8002b38:	689b      	ldr	r3, [r3, #8]
 8002b3a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002b3e:	2b08      	cmp	r3, #8
 8002b40:	d112      	bne.n	8002b68 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b42:	4b9d      	ldr	r3, [pc, #628]	; (8002db8 <HAL_RCC_OscConfig+0x2ac>)
 8002b44:	685b      	ldr	r3, [r3, #4]
 8002b46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b4a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b4e:	d10b      	bne.n	8002b68 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b50:	4b99      	ldr	r3, [pc, #612]	; (8002db8 <HAL_RCC_OscConfig+0x2ac>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d05b      	beq.n	8002c14 <HAL_RCC_OscConfig+0x108>
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	685b      	ldr	r3, [r3, #4]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d157      	bne.n	8002c14 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002b64:	2301      	movs	r3, #1
 8002b66:	e23f      	b.n	8002fe8 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	685b      	ldr	r3, [r3, #4]
 8002b6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b70:	d106      	bne.n	8002b80 <HAL_RCC_OscConfig+0x74>
 8002b72:	4b91      	ldr	r3, [pc, #580]	; (8002db8 <HAL_RCC_OscConfig+0x2ac>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	4a90      	ldr	r2, [pc, #576]	; (8002db8 <HAL_RCC_OscConfig+0x2ac>)
 8002b78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b7c:	6013      	str	r3, [r2, #0]
 8002b7e:	e01d      	b.n	8002bbc <HAL_RCC_OscConfig+0xb0>
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	685b      	ldr	r3, [r3, #4]
 8002b84:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002b88:	d10c      	bne.n	8002ba4 <HAL_RCC_OscConfig+0x98>
 8002b8a:	4b8b      	ldr	r3, [pc, #556]	; (8002db8 <HAL_RCC_OscConfig+0x2ac>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	4a8a      	ldr	r2, [pc, #552]	; (8002db8 <HAL_RCC_OscConfig+0x2ac>)
 8002b90:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b94:	6013      	str	r3, [r2, #0]
 8002b96:	4b88      	ldr	r3, [pc, #544]	; (8002db8 <HAL_RCC_OscConfig+0x2ac>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	4a87      	ldr	r2, [pc, #540]	; (8002db8 <HAL_RCC_OscConfig+0x2ac>)
 8002b9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ba0:	6013      	str	r3, [r2, #0]
 8002ba2:	e00b      	b.n	8002bbc <HAL_RCC_OscConfig+0xb0>
 8002ba4:	4b84      	ldr	r3, [pc, #528]	; (8002db8 <HAL_RCC_OscConfig+0x2ac>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4a83      	ldr	r2, [pc, #524]	; (8002db8 <HAL_RCC_OscConfig+0x2ac>)
 8002baa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002bae:	6013      	str	r3, [r2, #0]
 8002bb0:	4b81      	ldr	r3, [pc, #516]	; (8002db8 <HAL_RCC_OscConfig+0x2ac>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	4a80      	ldr	r2, [pc, #512]	; (8002db8 <HAL_RCC_OscConfig+0x2ac>)
 8002bb6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002bba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d013      	beq.n	8002bec <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bc4:	f7ff f986 	bl	8001ed4 <HAL_GetTick>
 8002bc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bca:	e008      	b.n	8002bde <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002bcc:	f7ff f982 	bl	8001ed4 <HAL_GetTick>
 8002bd0:	4602      	mov	r2, r0
 8002bd2:	693b      	ldr	r3, [r7, #16]
 8002bd4:	1ad3      	subs	r3, r2, r3
 8002bd6:	2b64      	cmp	r3, #100	; 0x64
 8002bd8:	d901      	bls.n	8002bde <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002bda:	2303      	movs	r3, #3
 8002bdc:	e204      	b.n	8002fe8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bde:	4b76      	ldr	r3, [pc, #472]	; (8002db8 <HAL_RCC_OscConfig+0x2ac>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d0f0      	beq.n	8002bcc <HAL_RCC_OscConfig+0xc0>
 8002bea:	e014      	b.n	8002c16 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bec:	f7ff f972 	bl	8001ed4 <HAL_GetTick>
 8002bf0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002bf2:	e008      	b.n	8002c06 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002bf4:	f7ff f96e 	bl	8001ed4 <HAL_GetTick>
 8002bf8:	4602      	mov	r2, r0
 8002bfa:	693b      	ldr	r3, [r7, #16]
 8002bfc:	1ad3      	subs	r3, r2, r3
 8002bfe:	2b64      	cmp	r3, #100	; 0x64
 8002c00:	d901      	bls.n	8002c06 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002c02:	2303      	movs	r3, #3
 8002c04:	e1f0      	b.n	8002fe8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c06:	4b6c      	ldr	r3, [pc, #432]	; (8002db8 <HAL_RCC_OscConfig+0x2ac>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d1f0      	bne.n	8002bf4 <HAL_RCC_OscConfig+0xe8>
 8002c12:	e000      	b.n	8002c16 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c14:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f003 0302 	and.w	r3, r3, #2
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d063      	beq.n	8002cea <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002c22:	4b65      	ldr	r3, [pc, #404]	; (8002db8 <HAL_RCC_OscConfig+0x2ac>)
 8002c24:	689b      	ldr	r3, [r3, #8]
 8002c26:	f003 030c 	and.w	r3, r3, #12
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d00b      	beq.n	8002c46 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c2e:	4b62      	ldr	r3, [pc, #392]	; (8002db8 <HAL_RCC_OscConfig+0x2ac>)
 8002c30:	689b      	ldr	r3, [r3, #8]
 8002c32:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002c36:	2b08      	cmp	r3, #8
 8002c38:	d11c      	bne.n	8002c74 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c3a:	4b5f      	ldr	r3, [pc, #380]	; (8002db8 <HAL_RCC_OscConfig+0x2ac>)
 8002c3c:	685b      	ldr	r3, [r3, #4]
 8002c3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d116      	bne.n	8002c74 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c46:	4b5c      	ldr	r3, [pc, #368]	; (8002db8 <HAL_RCC_OscConfig+0x2ac>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f003 0302 	and.w	r3, r3, #2
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d005      	beq.n	8002c5e <HAL_RCC_OscConfig+0x152>
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	68db      	ldr	r3, [r3, #12]
 8002c56:	2b01      	cmp	r3, #1
 8002c58:	d001      	beq.n	8002c5e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	e1c4      	b.n	8002fe8 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c5e:	4b56      	ldr	r3, [pc, #344]	; (8002db8 <HAL_RCC_OscConfig+0x2ac>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	691b      	ldr	r3, [r3, #16]
 8002c6a:	00db      	lsls	r3, r3, #3
 8002c6c:	4952      	ldr	r1, [pc, #328]	; (8002db8 <HAL_RCC_OscConfig+0x2ac>)
 8002c6e:	4313      	orrs	r3, r2
 8002c70:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c72:	e03a      	b.n	8002cea <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	68db      	ldr	r3, [r3, #12]
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d020      	beq.n	8002cbe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c7c:	4b4f      	ldr	r3, [pc, #316]	; (8002dbc <HAL_RCC_OscConfig+0x2b0>)
 8002c7e:	2201      	movs	r2, #1
 8002c80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c82:	f7ff f927 	bl	8001ed4 <HAL_GetTick>
 8002c86:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c88:	e008      	b.n	8002c9c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c8a:	f7ff f923 	bl	8001ed4 <HAL_GetTick>
 8002c8e:	4602      	mov	r2, r0
 8002c90:	693b      	ldr	r3, [r7, #16]
 8002c92:	1ad3      	subs	r3, r2, r3
 8002c94:	2b02      	cmp	r3, #2
 8002c96:	d901      	bls.n	8002c9c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002c98:	2303      	movs	r3, #3
 8002c9a:	e1a5      	b.n	8002fe8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c9c:	4b46      	ldr	r3, [pc, #280]	; (8002db8 <HAL_RCC_OscConfig+0x2ac>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f003 0302 	and.w	r3, r3, #2
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d0f0      	beq.n	8002c8a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ca8:	4b43      	ldr	r3, [pc, #268]	; (8002db8 <HAL_RCC_OscConfig+0x2ac>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	691b      	ldr	r3, [r3, #16]
 8002cb4:	00db      	lsls	r3, r3, #3
 8002cb6:	4940      	ldr	r1, [pc, #256]	; (8002db8 <HAL_RCC_OscConfig+0x2ac>)
 8002cb8:	4313      	orrs	r3, r2
 8002cba:	600b      	str	r3, [r1, #0]
 8002cbc:	e015      	b.n	8002cea <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002cbe:	4b3f      	ldr	r3, [pc, #252]	; (8002dbc <HAL_RCC_OscConfig+0x2b0>)
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cc4:	f7ff f906 	bl	8001ed4 <HAL_GetTick>
 8002cc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002cca:	e008      	b.n	8002cde <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ccc:	f7ff f902 	bl	8001ed4 <HAL_GetTick>
 8002cd0:	4602      	mov	r2, r0
 8002cd2:	693b      	ldr	r3, [r7, #16]
 8002cd4:	1ad3      	subs	r3, r2, r3
 8002cd6:	2b02      	cmp	r3, #2
 8002cd8:	d901      	bls.n	8002cde <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002cda:	2303      	movs	r3, #3
 8002cdc:	e184      	b.n	8002fe8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002cde:	4b36      	ldr	r3, [pc, #216]	; (8002db8 <HAL_RCC_OscConfig+0x2ac>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f003 0302 	and.w	r3, r3, #2
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d1f0      	bne.n	8002ccc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f003 0308 	and.w	r3, r3, #8
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d030      	beq.n	8002d58 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	695b      	ldr	r3, [r3, #20]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d016      	beq.n	8002d2c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002cfe:	4b30      	ldr	r3, [pc, #192]	; (8002dc0 <HAL_RCC_OscConfig+0x2b4>)
 8002d00:	2201      	movs	r2, #1
 8002d02:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d04:	f7ff f8e6 	bl	8001ed4 <HAL_GetTick>
 8002d08:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d0a:	e008      	b.n	8002d1e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d0c:	f7ff f8e2 	bl	8001ed4 <HAL_GetTick>
 8002d10:	4602      	mov	r2, r0
 8002d12:	693b      	ldr	r3, [r7, #16]
 8002d14:	1ad3      	subs	r3, r2, r3
 8002d16:	2b02      	cmp	r3, #2
 8002d18:	d901      	bls.n	8002d1e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002d1a:	2303      	movs	r3, #3
 8002d1c:	e164      	b.n	8002fe8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d1e:	4b26      	ldr	r3, [pc, #152]	; (8002db8 <HAL_RCC_OscConfig+0x2ac>)
 8002d20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d22:	f003 0302 	and.w	r3, r3, #2
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d0f0      	beq.n	8002d0c <HAL_RCC_OscConfig+0x200>
 8002d2a:	e015      	b.n	8002d58 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d2c:	4b24      	ldr	r3, [pc, #144]	; (8002dc0 <HAL_RCC_OscConfig+0x2b4>)
 8002d2e:	2200      	movs	r2, #0
 8002d30:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d32:	f7ff f8cf 	bl	8001ed4 <HAL_GetTick>
 8002d36:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d38:	e008      	b.n	8002d4c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d3a:	f7ff f8cb 	bl	8001ed4 <HAL_GetTick>
 8002d3e:	4602      	mov	r2, r0
 8002d40:	693b      	ldr	r3, [r7, #16]
 8002d42:	1ad3      	subs	r3, r2, r3
 8002d44:	2b02      	cmp	r3, #2
 8002d46:	d901      	bls.n	8002d4c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002d48:	2303      	movs	r3, #3
 8002d4a:	e14d      	b.n	8002fe8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d4c:	4b1a      	ldr	r3, [pc, #104]	; (8002db8 <HAL_RCC_OscConfig+0x2ac>)
 8002d4e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d50:	f003 0302 	and.w	r3, r3, #2
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d1f0      	bne.n	8002d3a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f003 0304 	and.w	r3, r3, #4
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	f000 80a0 	beq.w	8002ea6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d66:	2300      	movs	r3, #0
 8002d68:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d6a:	4b13      	ldr	r3, [pc, #76]	; (8002db8 <HAL_RCC_OscConfig+0x2ac>)
 8002d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d10f      	bne.n	8002d96 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d76:	2300      	movs	r3, #0
 8002d78:	60bb      	str	r3, [r7, #8]
 8002d7a:	4b0f      	ldr	r3, [pc, #60]	; (8002db8 <HAL_RCC_OscConfig+0x2ac>)
 8002d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d7e:	4a0e      	ldr	r2, [pc, #56]	; (8002db8 <HAL_RCC_OscConfig+0x2ac>)
 8002d80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d84:	6413      	str	r3, [r2, #64]	; 0x40
 8002d86:	4b0c      	ldr	r3, [pc, #48]	; (8002db8 <HAL_RCC_OscConfig+0x2ac>)
 8002d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d8e:	60bb      	str	r3, [r7, #8]
 8002d90:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d92:	2301      	movs	r3, #1
 8002d94:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d96:	4b0b      	ldr	r3, [pc, #44]	; (8002dc4 <HAL_RCC_OscConfig+0x2b8>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d121      	bne.n	8002de6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002da2:	4b08      	ldr	r3, [pc, #32]	; (8002dc4 <HAL_RCC_OscConfig+0x2b8>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	4a07      	ldr	r2, [pc, #28]	; (8002dc4 <HAL_RCC_OscConfig+0x2b8>)
 8002da8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002dac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002dae:	f7ff f891 	bl	8001ed4 <HAL_GetTick>
 8002db2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002db4:	e011      	b.n	8002dda <HAL_RCC_OscConfig+0x2ce>
 8002db6:	bf00      	nop
 8002db8:	40023800 	.word	0x40023800
 8002dbc:	42470000 	.word	0x42470000
 8002dc0:	42470e80 	.word	0x42470e80
 8002dc4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002dc8:	f7ff f884 	bl	8001ed4 <HAL_GetTick>
 8002dcc:	4602      	mov	r2, r0
 8002dce:	693b      	ldr	r3, [r7, #16]
 8002dd0:	1ad3      	subs	r3, r2, r3
 8002dd2:	2b02      	cmp	r3, #2
 8002dd4:	d901      	bls.n	8002dda <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002dd6:	2303      	movs	r3, #3
 8002dd8:	e106      	b.n	8002fe8 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dda:	4b85      	ldr	r3, [pc, #532]	; (8002ff0 <HAL_RCC_OscConfig+0x4e4>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d0f0      	beq.n	8002dc8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	689b      	ldr	r3, [r3, #8]
 8002dea:	2b01      	cmp	r3, #1
 8002dec:	d106      	bne.n	8002dfc <HAL_RCC_OscConfig+0x2f0>
 8002dee:	4b81      	ldr	r3, [pc, #516]	; (8002ff4 <HAL_RCC_OscConfig+0x4e8>)
 8002df0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002df2:	4a80      	ldr	r2, [pc, #512]	; (8002ff4 <HAL_RCC_OscConfig+0x4e8>)
 8002df4:	f043 0301 	orr.w	r3, r3, #1
 8002df8:	6713      	str	r3, [r2, #112]	; 0x70
 8002dfa:	e01c      	b.n	8002e36 <HAL_RCC_OscConfig+0x32a>
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	689b      	ldr	r3, [r3, #8]
 8002e00:	2b05      	cmp	r3, #5
 8002e02:	d10c      	bne.n	8002e1e <HAL_RCC_OscConfig+0x312>
 8002e04:	4b7b      	ldr	r3, [pc, #492]	; (8002ff4 <HAL_RCC_OscConfig+0x4e8>)
 8002e06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e08:	4a7a      	ldr	r2, [pc, #488]	; (8002ff4 <HAL_RCC_OscConfig+0x4e8>)
 8002e0a:	f043 0304 	orr.w	r3, r3, #4
 8002e0e:	6713      	str	r3, [r2, #112]	; 0x70
 8002e10:	4b78      	ldr	r3, [pc, #480]	; (8002ff4 <HAL_RCC_OscConfig+0x4e8>)
 8002e12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e14:	4a77      	ldr	r2, [pc, #476]	; (8002ff4 <HAL_RCC_OscConfig+0x4e8>)
 8002e16:	f043 0301 	orr.w	r3, r3, #1
 8002e1a:	6713      	str	r3, [r2, #112]	; 0x70
 8002e1c:	e00b      	b.n	8002e36 <HAL_RCC_OscConfig+0x32a>
 8002e1e:	4b75      	ldr	r3, [pc, #468]	; (8002ff4 <HAL_RCC_OscConfig+0x4e8>)
 8002e20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e22:	4a74      	ldr	r2, [pc, #464]	; (8002ff4 <HAL_RCC_OscConfig+0x4e8>)
 8002e24:	f023 0301 	bic.w	r3, r3, #1
 8002e28:	6713      	str	r3, [r2, #112]	; 0x70
 8002e2a:	4b72      	ldr	r3, [pc, #456]	; (8002ff4 <HAL_RCC_OscConfig+0x4e8>)
 8002e2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e2e:	4a71      	ldr	r2, [pc, #452]	; (8002ff4 <HAL_RCC_OscConfig+0x4e8>)
 8002e30:	f023 0304 	bic.w	r3, r3, #4
 8002e34:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	689b      	ldr	r3, [r3, #8]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d015      	beq.n	8002e6a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e3e:	f7ff f849 	bl	8001ed4 <HAL_GetTick>
 8002e42:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e44:	e00a      	b.n	8002e5c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e46:	f7ff f845 	bl	8001ed4 <HAL_GetTick>
 8002e4a:	4602      	mov	r2, r0
 8002e4c:	693b      	ldr	r3, [r7, #16]
 8002e4e:	1ad3      	subs	r3, r2, r3
 8002e50:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e54:	4293      	cmp	r3, r2
 8002e56:	d901      	bls.n	8002e5c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002e58:	2303      	movs	r3, #3
 8002e5a:	e0c5      	b.n	8002fe8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e5c:	4b65      	ldr	r3, [pc, #404]	; (8002ff4 <HAL_RCC_OscConfig+0x4e8>)
 8002e5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e60:	f003 0302 	and.w	r3, r3, #2
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d0ee      	beq.n	8002e46 <HAL_RCC_OscConfig+0x33a>
 8002e68:	e014      	b.n	8002e94 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e6a:	f7ff f833 	bl	8001ed4 <HAL_GetTick>
 8002e6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e70:	e00a      	b.n	8002e88 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e72:	f7ff f82f 	bl	8001ed4 <HAL_GetTick>
 8002e76:	4602      	mov	r2, r0
 8002e78:	693b      	ldr	r3, [r7, #16]
 8002e7a:	1ad3      	subs	r3, r2, r3
 8002e7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e80:	4293      	cmp	r3, r2
 8002e82:	d901      	bls.n	8002e88 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002e84:	2303      	movs	r3, #3
 8002e86:	e0af      	b.n	8002fe8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e88:	4b5a      	ldr	r3, [pc, #360]	; (8002ff4 <HAL_RCC_OscConfig+0x4e8>)
 8002e8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e8c:	f003 0302 	and.w	r3, r3, #2
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d1ee      	bne.n	8002e72 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002e94:	7dfb      	ldrb	r3, [r7, #23]
 8002e96:	2b01      	cmp	r3, #1
 8002e98:	d105      	bne.n	8002ea6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e9a:	4b56      	ldr	r3, [pc, #344]	; (8002ff4 <HAL_RCC_OscConfig+0x4e8>)
 8002e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e9e:	4a55      	ldr	r2, [pc, #340]	; (8002ff4 <HAL_RCC_OscConfig+0x4e8>)
 8002ea0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ea4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	699b      	ldr	r3, [r3, #24]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	f000 809b 	beq.w	8002fe6 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002eb0:	4b50      	ldr	r3, [pc, #320]	; (8002ff4 <HAL_RCC_OscConfig+0x4e8>)
 8002eb2:	689b      	ldr	r3, [r3, #8]
 8002eb4:	f003 030c 	and.w	r3, r3, #12
 8002eb8:	2b08      	cmp	r3, #8
 8002eba:	d05c      	beq.n	8002f76 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	699b      	ldr	r3, [r3, #24]
 8002ec0:	2b02      	cmp	r3, #2
 8002ec2:	d141      	bne.n	8002f48 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ec4:	4b4c      	ldr	r3, [pc, #304]	; (8002ff8 <HAL_RCC_OscConfig+0x4ec>)
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002eca:	f7ff f803 	bl	8001ed4 <HAL_GetTick>
 8002ece:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ed0:	e008      	b.n	8002ee4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ed2:	f7fe ffff 	bl	8001ed4 <HAL_GetTick>
 8002ed6:	4602      	mov	r2, r0
 8002ed8:	693b      	ldr	r3, [r7, #16]
 8002eda:	1ad3      	subs	r3, r2, r3
 8002edc:	2b02      	cmp	r3, #2
 8002ede:	d901      	bls.n	8002ee4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002ee0:	2303      	movs	r3, #3
 8002ee2:	e081      	b.n	8002fe8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ee4:	4b43      	ldr	r3, [pc, #268]	; (8002ff4 <HAL_RCC_OscConfig+0x4e8>)
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d1f0      	bne.n	8002ed2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	69da      	ldr	r2, [r3, #28]
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6a1b      	ldr	r3, [r3, #32]
 8002ef8:	431a      	orrs	r2, r3
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002efe:	019b      	lsls	r3, r3, #6
 8002f00:	431a      	orrs	r2, r3
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f06:	085b      	lsrs	r3, r3, #1
 8002f08:	3b01      	subs	r3, #1
 8002f0a:	041b      	lsls	r3, r3, #16
 8002f0c:	431a      	orrs	r2, r3
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f12:	061b      	lsls	r3, r3, #24
 8002f14:	4937      	ldr	r1, [pc, #220]	; (8002ff4 <HAL_RCC_OscConfig+0x4e8>)
 8002f16:	4313      	orrs	r3, r2
 8002f18:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f1a:	4b37      	ldr	r3, [pc, #220]	; (8002ff8 <HAL_RCC_OscConfig+0x4ec>)
 8002f1c:	2201      	movs	r2, #1
 8002f1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f20:	f7fe ffd8 	bl	8001ed4 <HAL_GetTick>
 8002f24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f26:	e008      	b.n	8002f3a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f28:	f7fe ffd4 	bl	8001ed4 <HAL_GetTick>
 8002f2c:	4602      	mov	r2, r0
 8002f2e:	693b      	ldr	r3, [r7, #16]
 8002f30:	1ad3      	subs	r3, r2, r3
 8002f32:	2b02      	cmp	r3, #2
 8002f34:	d901      	bls.n	8002f3a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002f36:	2303      	movs	r3, #3
 8002f38:	e056      	b.n	8002fe8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f3a:	4b2e      	ldr	r3, [pc, #184]	; (8002ff4 <HAL_RCC_OscConfig+0x4e8>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d0f0      	beq.n	8002f28 <HAL_RCC_OscConfig+0x41c>
 8002f46:	e04e      	b.n	8002fe6 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f48:	4b2b      	ldr	r3, [pc, #172]	; (8002ff8 <HAL_RCC_OscConfig+0x4ec>)
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f4e:	f7fe ffc1 	bl	8001ed4 <HAL_GetTick>
 8002f52:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f54:	e008      	b.n	8002f68 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f56:	f7fe ffbd 	bl	8001ed4 <HAL_GetTick>
 8002f5a:	4602      	mov	r2, r0
 8002f5c:	693b      	ldr	r3, [r7, #16]
 8002f5e:	1ad3      	subs	r3, r2, r3
 8002f60:	2b02      	cmp	r3, #2
 8002f62:	d901      	bls.n	8002f68 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002f64:	2303      	movs	r3, #3
 8002f66:	e03f      	b.n	8002fe8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f68:	4b22      	ldr	r3, [pc, #136]	; (8002ff4 <HAL_RCC_OscConfig+0x4e8>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d1f0      	bne.n	8002f56 <HAL_RCC_OscConfig+0x44a>
 8002f74:	e037      	b.n	8002fe6 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	699b      	ldr	r3, [r3, #24]
 8002f7a:	2b01      	cmp	r3, #1
 8002f7c:	d101      	bne.n	8002f82 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002f7e:	2301      	movs	r3, #1
 8002f80:	e032      	b.n	8002fe8 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002f82:	4b1c      	ldr	r3, [pc, #112]	; (8002ff4 <HAL_RCC_OscConfig+0x4e8>)
 8002f84:	685b      	ldr	r3, [r3, #4]
 8002f86:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	699b      	ldr	r3, [r3, #24]
 8002f8c:	2b01      	cmp	r3, #1
 8002f8e:	d028      	beq.n	8002fe2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f9a:	429a      	cmp	r2, r3
 8002f9c:	d121      	bne.n	8002fe2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fa8:	429a      	cmp	r2, r3
 8002faa:	d11a      	bne.n	8002fe2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002fac:	68fa      	ldr	r2, [r7, #12]
 8002fae:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002fb2:	4013      	ands	r3, r2
 8002fb4:	687a      	ldr	r2, [r7, #4]
 8002fb6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002fb8:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d111      	bne.n	8002fe2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fc8:	085b      	lsrs	r3, r3, #1
 8002fca:	3b01      	subs	r3, #1
 8002fcc:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002fce:	429a      	cmp	r2, r3
 8002fd0:	d107      	bne.n	8002fe2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fdc:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002fde:	429a      	cmp	r2, r3
 8002fe0:	d001      	beq.n	8002fe6 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	e000      	b.n	8002fe8 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8002fe6:	2300      	movs	r3, #0
}
 8002fe8:	4618      	mov	r0, r3
 8002fea:	3718      	adds	r7, #24
 8002fec:	46bd      	mov	sp, r7
 8002fee:	bd80      	pop	{r7, pc}
 8002ff0:	40007000 	.word	0x40007000
 8002ff4:	40023800 	.word	0x40023800
 8002ff8:	42470060 	.word	0x42470060

08002ffc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b084      	sub	sp, #16
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
 8003004:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	2b00      	cmp	r3, #0
 800300a:	d101      	bne.n	8003010 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800300c:	2301      	movs	r3, #1
 800300e:	e0cc      	b.n	80031aa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003010:	4b68      	ldr	r3, [pc, #416]	; (80031b4 <HAL_RCC_ClockConfig+0x1b8>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f003 0307 	and.w	r3, r3, #7
 8003018:	683a      	ldr	r2, [r7, #0]
 800301a:	429a      	cmp	r2, r3
 800301c:	d90c      	bls.n	8003038 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800301e:	4b65      	ldr	r3, [pc, #404]	; (80031b4 <HAL_RCC_ClockConfig+0x1b8>)
 8003020:	683a      	ldr	r2, [r7, #0]
 8003022:	b2d2      	uxtb	r2, r2
 8003024:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003026:	4b63      	ldr	r3, [pc, #396]	; (80031b4 <HAL_RCC_ClockConfig+0x1b8>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f003 0307 	and.w	r3, r3, #7
 800302e:	683a      	ldr	r2, [r7, #0]
 8003030:	429a      	cmp	r2, r3
 8003032:	d001      	beq.n	8003038 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003034:	2301      	movs	r3, #1
 8003036:	e0b8      	b.n	80031aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f003 0302 	and.w	r3, r3, #2
 8003040:	2b00      	cmp	r3, #0
 8003042:	d020      	beq.n	8003086 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f003 0304 	and.w	r3, r3, #4
 800304c:	2b00      	cmp	r3, #0
 800304e:	d005      	beq.n	800305c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003050:	4b59      	ldr	r3, [pc, #356]	; (80031b8 <HAL_RCC_ClockConfig+0x1bc>)
 8003052:	689b      	ldr	r3, [r3, #8]
 8003054:	4a58      	ldr	r2, [pc, #352]	; (80031b8 <HAL_RCC_ClockConfig+0x1bc>)
 8003056:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800305a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f003 0308 	and.w	r3, r3, #8
 8003064:	2b00      	cmp	r3, #0
 8003066:	d005      	beq.n	8003074 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003068:	4b53      	ldr	r3, [pc, #332]	; (80031b8 <HAL_RCC_ClockConfig+0x1bc>)
 800306a:	689b      	ldr	r3, [r3, #8]
 800306c:	4a52      	ldr	r2, [pc, #328]	; (80031b8 <HAL_RCC_ClockConfig+0x1bc>)
 800306e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003072:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003074:	4b50      	ldr	r3, [pc, #320]	; (80031b8 <HAL_RCC_ClockConfig+0x1bc>)
 8003076:	689b      	ldr	r3, [r3, #8]
 8003078:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	689b      	ldr	r3, [r3, #8]
 8003080:	494d      	ldr	r1, [pc, #308]	; (80031b8 <HAL_RCC_ClockConfig+0x1bc>)
 8003082:	4313      	orrs	r3, r2
 8003084:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f003 0301 	and.w	r3, r3, #1
 800308e:	2b00      	cmp	r3, #0
 8003090:	d044      	beq.n	800311c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	685b      	ldr	r3, [r3, #4]
 8003096:	2b01      	cmp	r3, #1
 8003098:	d107      	bne.n	80030aa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800309a:	4b47      	ldr	r3, [pc, #284]	; (80031b8 <HAL_RCC_ClockConfig+0x1bc>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d119      	bne.n	80030da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030a6:	2301      	movs	r3, #1
 80030a8:	e07f      	b.n	80031aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	685b      	ldr	r3, [r3, #4]
 80030ae:	2b02      	cmp	r3, #2
 80030b0:	d003      	beq.n	80030ba <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80030b6:	2b03      	cmp	r3, #3
 80030b8:	d107      	bne.n	80030ca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030ba:	4b3f      	ldr	r3, [pc, #252]	; (80031b8 <HAL_RCC_ClockConfig+0x1bc>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d109      	bne.n	80030da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030c6:	2301      	movs	r3, #1
 80030c8:	e06f      	b.n	80031aa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030ca:	4b3b      	ldr	r3, [pc, #236]	; (80031b8 <HAL_RCC_ClockConfig+0x1bc>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f003 0302 	and.w	r3, r3, #2
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d101      	bne.n	80030da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030d6:	2301      	movs	r3, #1
 80030d8:	e067      	b.n	80031aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80030da:	4b37      	ldr	r3, [pc, #220]	; (80031b8 <HAL_RCC_ClockConfig+0x1bc>)
 80030dc:	689b      	ldr	r3, [r3, #8]
 80030de:	f023 0203 	bic.w	r2, r3, #3
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	685b      	ldr	r3, [r3, #4]
 80030e6:	4934      	ldr	r1, [pc, #208]	; (80031b8 <HAL_RCC_ClockConfig+0x1bc>)
 80030e8:	4313      	orrs	r3, r2
 80030ea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80030ec:	f7fe fef2 	bl	8001ed4 <HAL_GetTick>
 80030f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030f2:	e00a      	b.n	800310a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030f4:	f7fe feee 	bl	8001ed4 <HAL_GetTick>
 80030f8:	4602      	mov	r2, r0
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	1ad3      	subs	r3, r2, r3
 80030fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8003102:	4293      	cmp	r3, r2
 8003104:	d901      	bls.n	800310a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003106:	2303      	movs	r3, #3
 8003108:	e04f      	b.n	80031aa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800310a:	4b2b      	ldr	r3, [pc, #172]	; (80031b8 <HAL_RCC_ClockConfig+0x1bc>)
 800310c:	689b      	ldr	r3, [r3, #8]
 800310e:	f003 020c 	and.w	r2, r3, #12
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	685b      	ldr	r3, [r3, #4]
 8003116:	009b      	lsls	r3, r3, #2
 8003118:	429a      	cmp	r2, r3
 800311a:	d1eb      	bne.n	80030f4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800311c:	4b25      	ldr	r3, [pc, #148]	; (80031b4 <HAL_RCC_ClockConfig+0x1b8>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f003 0307 	and.w	r3, r3, #7
 8003124:	683a      	ldr	r2, [r7, #0]
 8003126:	429a      	cmp	r2, r3
 8003128:	d20c      	bcs.n	8003144 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800312a:	4b22      	ldr	r3, [pc, #136]	; (80031b4 <HAL_RCC_ClockConfig+0x1b8>)
 800312c:	683a      	ldr	r2, [r7, #0]
 800312e:	b2d2      	uxtb	r2, r2
 8003130:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003132:	4b20      	ldr	r3, [pc, #128]	; (80031b4 <HAL_RCC_ClockConfig+0x1b8>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f003 0307 	and.w	r3, r3, #7
 800313a:	683a      	ldr	r2, [r7, #0]
 800313c:	429a      	cmp	r2, r3
 800313e:	d001      	beq.n	8003144 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003140:	2301      	movs	r3, #1
 8003142:	e032      	b.n	80031aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f003 0304 	and.w	r3, r3, #4
 800314c:	2b00      	cmp	r3, #0
 800314e:	d008      	beq.n	8003162 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003150:	4b19      	ldr	r3, [pc, #100]	; (80031b8 <HAL_RCC_ClockConfig+0x1bc>)
 8003152:	689b      	ldr	r3, [r3, #8]
 8003154:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	68db      	ldr	r3, [r3, #12]
 800315c:	4916      	ldr	r1, [pc, #88]	; (80031b8 <HAL_RCC_ClockConfig+0x1bc>)
 800315e:	4313      	orrs	r3, r2
 8003160:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f003 0308 	and.w	r3, r3, #8
 800316a:	2b00      	cmp	r3, #0
 800316c:	d009      	beq.n	8003182 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800316e:	4b12      	ldr	r3, [pc, #72]	; (80031b8 <HAL_RCC_ClockConfig+0x1bc>)
 8003170:	689b      	ldr	r3, [r3, #8]
 8003172:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	691b      	ldr	r3, [r3, #16]
 800317a:	00db      	lsls	r3, r3, #3
 800317c:	490e      	ldr	r1, [pc, #56]	; (80031b8 <HAL_RCC_ClockConfig+0x1bc>)
 800317e:	4313      	orrs	r3, r2
 8003180:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003182:	f000 f821 	bl	80031c8 <HAL_RCC_GetSysClockFreq>
 8003186:	4602      	mov	r2, r0
 8003188:	4b0b      	ldr	r3, [pc, #44]	; (80031b8 <HAL_RCC_ClockConfig+0x1bc>)
 800318a:	689b      	ldr	r3, [r3, #8]
 800318c:	091b      	lsrs	r3, r3, #4
 800318e:	f003 030f 	and.w	r3, r3, #15
 8003192:	490a      	ldr	r1, [pc, #40]	; (80031bc <HAL_RCC_ClockConfig+0x1c0>)
 8003194:	5ccb      	ldrb	r3, [r1, r3]
 8003196:	fa22 f303 	lsr.w	r3, r2, r3
 800319a:	4a09      	ldr	r2, [pc, #36]	; (80031c0 <HAL_RCC_ClockConfig+0x1c4>)
 800319c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800319e:	4b09      	ldr	r3, [pc, #36]	; (80031c4 <HAL_RCC_ClockConfig+0x1c8>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4618      	mov	r0, r3
 80031a4:	f7fe fc0a 	bl	80019bc <HAL_InitTick>

  return HAL_OK;
 80031a8:	2300      	movs	r3, #0
}
 80031aa:	4618      	mov	r0, r3
 80031ac:	3710      	adds	r7, #16
 80031ae:	46bd      	mov	sp, r7
 80031b0:	bd80      	pop	{r7, pc}
 80031b2:	bf00      	nop
 80031b4:	40023c00 	.word	0x40023c00
 80031b8:	40023800 	.word	0x40023800
 80031bc:	08009d74 	.word	0x08009d74
 80031c0:	20000000 	.word	0x20000000
 80031c4:	20000004 	.word	0x20000004

080031c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80031c8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80031cc:	b084      	sub	sp, #16
 80031ce:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80031d0:	2300      	movs	r3, #0
 80031d2:	607b      	str	r3, [r7, #4]
 80031d4:	2300      	movs	r3, #0
 80031d6:	60fb      	str	r3, [r7, #12]
 80031d8:	2300      	movs	r3, #0
 80031da:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80031dc:	2300      	movs	r3, #0
 80031de:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80031e0:	4b67      	ldr	r3, [pc, #412]	; (8003380 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80031e2:	689b      	ldr	r3, [r3, #8]
 80031e4:	f003 030c 	and.w	r3, r3, #12
 80031e8:	2b08      	cmp	r3, #8
 80031ea:	d00d      	beq.n	8003208 <HAL_RCC_GetSysClockFreq+0x40>
 80031ec:	2b08      	cmp	r3, #8
 80031ee:	f200 80bd 	bhi.w	800336c <HAL_RCC_GetSysClockFreq+0x1a4>
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d002      	beq.n	80031fc <HAL_RCC_GetSysClockFreq+0x34>
 80031f6:	2b04      	cmp	r3, #4
 80031f8:	d003      	beq.n	8003202 <HAL_RCC_GetSysClockFreq+0x3a>
 80031fa:	e0b7      	b.n	800336c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80031fc:	4b61      	ldr	r3, [pc, #388]	; (8003384 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80031fe:	60bb      	str	r3, [r7, #8]
       break;
 8003200:	e0b7      	b.n	8003372 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003202:	4b60      	ldr	r3, [pc, #384]	; (8003384 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003204:	60bb      	str	r3, [r7, #8]
      break;
 8003206:	e0b4      	b.n	8003372 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003208:	4b5d      	ldr	r3, [pc, #372]	; (8003380 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003210:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003212:	4b5b      	ldr	r3, [pc, #364]	; (8003380 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003214:	685b      	ldr	r3, [r3, #4]
 8003216:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800321a:	2b00      	cmp	r3, #0
 800321c:	d04d      	beq.n	80032ba <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800321e:	4b58      	ldr	r3, [pc, #352]	; (8003380 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003220:	685b      	ldr	r3, [r3, #4]
 8003222:	099b      	lsrs	r3, r3, #6
 8003224:	461a      	mov	r2, r3
 8003226:	f04f 0300 	mov.w	r3, #0
 800322a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800322e:	f04f 0100 	mov.w	r1, #0
 8003232:	ea02 0800 	and.w	r8, r2, r0
 8003236:	ea03 0901 	and.w	r9, r3, r1
 800323a:	4640      	mov	r0, r8
 800323c:	4649      	mov	r1, r9
 800323e:	f04f 0200 	mov.w	r2, #0
 8003242:	f04f 0300 	mov.w	r3, #0
 8003246:	014b      	lsls	r3, r1, #5
 8003248:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800324c:	0142      	lsls	r2, r0, #5
 800324e:	4610      	mov	r0, r2
 8003250:	4619      	mov	r1, r3
 8003252:	ebb0 0008 	subs.w	r0, r0, r8
 8003256:	eb61 0109 	sbc.w	r1, r1, r9
 800325a:	f04f 0200 	mov.w	r2, #0
 800325e:	f04f 0300 	mov.w	r3, #0
 8003262:	018b      	lsls	r3, r1, #6
 8003264:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003268:	0182      	lsls	r2, r0, #6
 800326a:	1a12      	subs	r2, r2, r0
 800326c:	eb63 0301 	sbc.w	r3, r3, r1
 8003270:	f04f 0000 	mov.w	r0, #0
 8003274:	f04f 0100 	mov.w	r1, #0
 8003278:	00d9      	lsls	r1, r3, #3
 800327a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800327e:	00d0      	lsls	r0, r2, #3
 8003280:	4602      	mov	r2, r0
 8003282:	460b      	mov	r3, r1
 8003284:	eb12 0208 	adds.w	r2, r2, r8
 8003288:	eb43 0309 	adc.w	r3, r3, r9
 800328c:	f04f 0000 	mov.w	r0, #0
 8003290:	f04f 0100 	mov.w	r1, #0
 8003294:	0299      	lsls	r1, r3, #10
 8003296:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800329a:	0290      	lsls	r0, r2, #10
 800329c:	4602      	mov	r2, r0
 800329e:	460b      	mov	r3, r1
 80032a0:	4610      	mov	r0, r2
 80032a2:	4619      	mov	r1, r3
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	461a      	mov	r2, r3
 80032a8:	f04f 0300 	mov.w	r3, #0
 80032ac:	f7fc ffe0 	bl	8000270 <__aeabi_uldivmod>
 80032b0:	4602      	mov	r2, r0
 80032b2:	460b      	mov	r3, r1
 80032b4:	4613      	mov	r3, r2
 80032b6:	60fb      	str	r3, [r7, #12]
 80032b8:	e04a      	b.n	8003350 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80032ba:	4b31      	ldr	r3, [pc, #196]	; (8003380 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	099b      	lsrs	r3, r3, #6
 80032c0:	461a      	mov	r2, r3
 80032c2:	f04f 0300 	mov.w	r3, #0
 80032c6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80032ca:	f04f 0100 	mov.w	r1, #0
 80032ce:	ea02 0400 	and.w	r4, r2, r0
 80032d2:	ea03 0501 	and.w	r5, r3, r1
 80032d6:	4620      	mov	r0, r4
 80032d8:	4629      	mov	r1, r5
 80032da:	f04f 0200 	mov.w	r2, #0
 80032de:	f04f 0300 	mov.w	r3, #0
 80032e2:	014b      	lsls	r3, r1, #5
 80032e4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80032e8:	0142      	lsls	r2, r0, #5
 80032ea:	4610      	mov	r0, r2
 80032ec:	4619      	mov	r1, r3
 80032ee:	1b00      	subs	r0, r0, r4
 80032f0:	eb61 0105 	sbc.w	r1, r1, r5
 80032f4:	f04f 0200 	mov.w	r2, #0
 80032f8:	f04f 0300 	mov.w	r3, #0
 80032fc:	018b      	lsls	r3, r1, #6
 80032fe:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003302:	0182      	lsls	r2, r0, #6
 8003304:	1a12      	subs	r2, r2, r0
 8003306:	eb63 0301 	sbc.w	r3, r3, r1
 800330a:	f04f 0000 	mov.w	r0, #0
 800330e:	f04f 0100 	mov.w	r1, #0
 8003312:	00d9      	lsls	r1, r3, #3
 8003314:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003318:	00d0      	lsls	r0, r2, #3
 800331a:	4602      	mov	r2, r0
 800331c:	460b      	mov	r3, r1
 800331e:	1912      	adds	r2, r2, r4
 8003320:	eb45 0303 	adc.w	r3, r5, r3
 8003324:	f04f 0000 	mov.w	r0, #0
 8003328:	f04f 0100 	mov.w	r1, #0
 800332c:	0299      	lsls	r1, r3, #10
 800332e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003332:	0290      	lsls	r0, r2, #10
 8003334:	4602      	mov	r2, r0
 8003336:	460b      	mov	r3, r1
 8003338:	4610      	mov	r0, r2
 800333a:	4619      	mov	r1, r3
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	461a      	mov	r2, r3
 8003340:	f04f 0300 	mov.w	r3, #0
 8003344:	f7fc ff94 	bl	8000270 <__aeabi_uldivmod>
 8003348:	4602      	mov	r2, r0
 800334a:	460b      	mov	r3, r1
 800334c:	4613      	mov	r3, r2
 800334e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003350:	4b0b      	ldr	r3, [pc, #44]	; (8003380 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	0c1b      	lsrs	r3, r3, #16
 8003356:	f003 0303 	and.w	r3, r3, #3
 800335a:	3301      	adds	r3, #1
 800335c:	005b      	lsls	r3, r3, #1
 800335e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003360:	68fa      	ldr	r2, [r7, #12]
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	fbb2 f3f3 	udiv	r3, r2, r3
 8003368:	60bb      	str	r3, [r7, #8]
      break;
 800336a:	e002      	b.n	8003372 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800336c:	4b05      	ldr	r3, [pc, #20]	; (8003384 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800336e:	60bb      	str	r3, [r7, #8]
      break;
 8003370:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003372:	68bb      	ldr	r3, [r7, #8]
}
 8003374:	4618      	mov	r0, r3
 8003376:	3710      	adds	r7, #16
 8003378:	46bd      	mov	sp, r7
 800337a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800337e:	bf00      	nop
 8003380:	40023800 	.word	0x40023800
 8003384:	00f42400 	.word	0x00f42400

08003388 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003388:	b480      	push	{r7}
 800338a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800338c:	4b03      	ldr	r3, [pc, #12]	; (800339c <HAL_RCC_GetHCLKFreq+0x14>)
 800338e:	681b      	ldr	r3, [r3, #0]
}
 8003390:	4618      	mov	r0, r3
 8003392:	46bd      	mov	sp, r7
 8003394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003398:	4770      	bx	lr
 800339a:	bf00      	nop
 800339c:	20000000 	.word	0x20000000

080033a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80033a4:	f7ff fff0 	bl	8003388 <HAL_RCC_GetHCLKFreq>
 80033a8:	4602      	mov	r2, r0
 80033aa:	4b05      	ldr	r3, [pc, #20]	; (80033c0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80033ac:	689b      	ldr	r3, [r3, #8]
 80033ae:	0a9b      	lsrs	r3, r3, #10
 80033b0:	f003 0307 	and.w	r3, r3, #7
 80033b4:	4903      	ldr	r1, [pc, #12]	; (80033c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80033b6:	5ccb      	ldrb	r3, [r1, r3]
 80033b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80033bc:	4618      	mov	r0, r3
 80033be:	bd80      	pop	{r7, pc}
 80033c0:	40023800 	.word	0x40023800
 80033c4:	08009d84 	.word	0x08009d84

080033c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80033cc:	f7ff ffdc 	bl	8003388 <HAL_RCC_GetHCLKFreq>
 80033d0:	4602      	mov	r2, r0
 80033d2:	4b05      	ldr	r3, [pc, #20]	; (80033e8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80033d4:	689b      	ldr	r3, [r3, #8]
 80033d6:	0b5b      	lsrs	r3, r3, #13
 80033d8:	f003 0307 	and.w	r3, r3, #7
 80033dc:	4903      	ldr	r1, [pc, #12]	; (80033ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80033de:	5ccb      	ldrb	r3, [r1, r3]
 80033e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80033e4:	4618      	mov	r0, r3
 80033e6:	bd80      	pop	{r7, pc}
 80033e8:	40023800 	.word	0x40023800
 80033ec:	08009d84 	.word	0x08009d84

080033f0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80033f0:	b480      	push	{r7}
 80033f2:	b083      	sub	sp, #12
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
 80033f8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	220f      	movs	r2, #15
 80033fe:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003400:	4b12      	ldr	r3, [pc, #72]	; (800344c <HAL_RCC_GetClockConfig+0x5c>)
 8003402:	689b      	ldr	r3, [r3, #8]
 8003404:	f003 0203 	and.w	r2, r3, #3
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800340c:	4b0f      	ldr	r3, [pc, #60]	; (800344c <HAL_RCC_GetClockConfig+0x5c>)
 800340e:	689b      	ldr	r3, [r3, #8]
 8003410:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003418:	4b0c      	ldr	r3, [pc, #48]	; (800344c <HAL_RCC_GetClockConfig+0x5c>)
 800341a:	689b      	ldr	r3, [r3, #8]
 800341c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003424:	4b09      	ldr	r3, [pc, #36]	; (800344c <HAL_RCC_GetClockConfig+0x5c>)
 8003426:	689b      	ldr	r3, [r3, #8]
 8003428:	08db      	lsrs	r3, r3, #3
 800342a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003432:	4b07      	ldr	r3, [pc, #28]	; (8003450 <HAL_RCC_GetClockConfig+0x60>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f003 0207 	and.w	r2, r3, #7
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	601a      	str	r2, [r3, #0]
}
 800343e:	bf00      	nop
 8003440:	370c      	adds	r7, #12
 8003442:	46bd      	mov	sp, r7
 8003444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003448:	4770      	bx	lr
 800344a:	bf00      	nop
 800344c:	40023800 	.word	0x40023800
 8003450:	40023c00 	.word	0x40023c00

08003454 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	b082      	sub	sp, #8
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2b00      	cmp	r3, #0
 8003460:	d101      	bne.n	8003466 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003462:	2301      	movs	r3, #1
 8003464:	e07b      	b.n	800355e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800346a:	2b00      	cmp	r3, #0
 800346c:	d108      	bne.n	8003480 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	685b      	ldr	r3, [r3, #4]
 8003472:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003476:	d009      	beq.n	800348c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2200      	movs	r2, #0
 800347c:	61da      	str	r2, [r3, #28]
 800347e:	e005      	b.n	800348c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2200      	movs	r2, #0
 8003484:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2200      	movs	r2, #0
 800348a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2200      	movs	r2, #0
 8003490:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003498:	b2db      	uxtb	r3, r3
 800349a:	2b00      	cmp	r3, #0
 800349c:	d106      	bne.n	80034ac <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2200      	movs	r2, #0
 80034a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80034a6:	6878      	ldr	r0, [r7, #4]
 80034a8:	f7fe f93c 	bl	8001724 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2202      	movs	r2, #2
 80034b0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	681a      	ldr	r2, [r3, #0]
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80034c2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	685b      	ldr	r3, [r3, #4]
 80034c8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	689b      	ldr	r3, [r3, #8]
 80034d0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80034d4:	431a      	orrs	r2, r3
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	68db      	ldr	r3, [r3, #12]
 80034da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80034de:	431a      	orrs	r2, r3
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	691b      	ldr	r3, [r3, #16]
 80034e4:	f003 0302 	and.w	r3, r3, #2
 80034e8:	431a      	orrs	r2, r3
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	695b      	ldr	r3, [r3, #20]
 80034ee:	f003 0301 	and.w	r3, r3, #1
 80034f2:	431a      	orrs	r2, r3
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	699b      	ldr	r3, [r3, #24]
 80034f8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80034fc:	431a      	orrs	r2, r3
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	69db      	ldr	r3, [r3, #28]
 8003502:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003506:	431a      	orrs	r2, r3
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6a1b      	ldr	r3, [r3, #32]
 800350c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003510:	ea42 0103 	orr.w	r1, r2, r3
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003518:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	430a      	orrs	r2, r1
 8003522:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	699b      	ldr	r3, [r3, #24]
 8003528:	0c1b      	lsrs	r3, r3, #16
 800352a:	f003 0104 	and.w	r1, r3, #4
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003532:	f003 0210 	and.w	r2, r3, #16
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	430a      	orrs	r2, r1
 800353c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	69da      	ldr	r2, [r3, #28]
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800354c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	2200      	movs	r2, #0
 8003552:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2201      	movs	r2, #1
 8003558:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800355c:	2300      	movs	r3, #0
}
 800355e:	4618      	mov	r0, r3
 8003560:	3708      	adds	r7, #8
 8003562:	46bd      	mov	sp, r7
 8003564:	bd80      	pop	{r7, pc}

08003566 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003566:	b580      	push	{r7, lr}
 8003568:	b088      	sub	sp, #32
 800356a:	af00      	add	r7, sp, #0
 800356c:	60f8      	str	r0, [r7, #12]
 800356e:	60b9      	str	r1, [r7, #8]
 8003570:	603b      	str	r3, [r7, #0]
 8003572:	4613      	mov	r3, r2
 8003574:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003576:	2300      	movs	r3, #0
 8003578:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003580:	2b01      	cmp	r3, #1
 8003582:	d101      	bne.n	8003588 <HAL_SPI_Transmit+0x22>
 8003584:	2302      	movs	r3, #2
 8003586:	e126      	b.n	80037d6 <HAL_SPI_Transmit+0x270>
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	2201      	movs	r2, #1
 800358c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003590:	f7fe fca0 	bl	8001ed4 <HAL_GetTick>
 8003594:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003596:	88fb      	ldrh	r3, [r7, #6]
 8003598:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80035a0:	b2db      	uxtb	r3, r3
 80035a2:	2b01      	cmp	r3, #1
 80035a4:	d002      	beq.n	80035ac <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80035a6:	2302      	movs	r3, #2
 80035a8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80035aa:	e10b      	b.n	80037c4 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80035ac:	68bb      	ldr	r3, [r7, #8]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d002      	beq.n	80035b8 <HAL_SPI_Transmit+0x52>
 80035b2:	88fb      	ldrh	r3, [r7, #6]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d102      	bne.n	80035be <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80035b8:	2301      	movs	r3, #1
 80035ba:	77fb      	strb	r3, [r7, #31]
    goto error;
 80035bc:	e102      	b.n	80037c4 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	2203      	movs	r2, #3
 80035c2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	2200      	movs	r2, #0
 80035ca:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	68ba      	ldr	r2, [r7, #8]
 80035d0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	88fa      	ldrh	r2, [r7, #6]
 80035d6:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	88fa      	ldrh	r2, [r7, #6]
 80035dc:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	2200      	movs	r2, #0
 80035e2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	2200      	movs	r2, #0
 80035e8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	2200      	movs	r2, #0
 80035ee:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	2200      	movs	r2, #0
 80035f4:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	2200      	movs	r2, #0
 80035fa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	689b      	ldr	r3, [r3, #8]
 8003600:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003604:	d10f      	bne.n	8003626 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	681a      	ldr	r2, [r3, #0]
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003614:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	681a      	ldr	r2, [r3, #0]
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003624:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003630:	2b40      	cmp	r3, #64	; 0x40
 8003632:	d007      	beq.n	8003644 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	681a      	ldr	r2, [r3, #0]
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003642:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	68db      	ldr	r3, [r3, #12]
 8003648:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800364c:	d14b      	bne.n	80036e6 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	685b      	ldr	r3, [r3, #4]
 8003652:	2b00      	cmp	r3, #0
 8003654:	d002      	beq.n	800365c <HAL_SPI_Transmit+0xf6>
 8003656:	8afb      	ldrh	r3, [r7, #22]
 8003658:	2b01      	cmp	r3, #1
 800365a:	d13e      	bne.n	80036da <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003660:	881a      	ldrh	r2, [r3, #0]
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800366c:	1c9a      	adds	r2, r3, #2
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003676:	b29b      	uxth	r3, r3
 8003678:	3b01      	subs	r3, #1
 800367a:	b29a      	uxth	r2, r3
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003680:	e02b      	b.n	80036da <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	689b      	ldr	r3, [r3, #8]
 8003688:	f003 0302 	and.w	r3, r3, #2
 800368c:	2b02      	cmp	r3, #2
 800368e:	d112      	bne.n	80036b6 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003694:	881a      	ldrh	r2, [r3, #0]
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036a0:	1c9a      	adds	r2, r3, #2
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80036aa:	b29b      	uxth	r3, r3
 80036ac:	3b01      	subs	r3, #1
 80036ae:	b29a      	uxth	r2, r3
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	86da      	strh	r2, [r3, #54]	; 0x36
 80036b4:	e011      	b.n	80036da <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80036b6:	f7fe fc0d 	bl	8001ed4 <HAL_GetTick>
 80036ba:	4602      	mov	r2, r0
 80036bc:	69bb      	ldr	r3, [r7, #24]
 80036be:	1ad3      	subs	r3, r2, r3
 80036c0:	683a      	ldr	r2, [r7, #0]
 80036c2:	429a      	cmp	r2, r3
 80036c4:	d803      	bhi.n	80036ce <HAL_SPI_Transmit+0x168>
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036cc:	d102      	bne.n	80036d4 <HAL_SPI_Transmit+0x16e>
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d102      	bne.n	80036da <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80036d4:	2303      	movs	r3, #3
 80036d6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80036d8:	e074      	b.n	80037c4 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80036de:	b29b      	uxth	r3, r3
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d1ce      	bne.n	8003682 <HAL_SPI_Transmit+0x11c>
 80036e4:	e04c      	b.n	8003780 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	685b      	ldr	r3, [r3, #4]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d002      	beq.n	80036f4 <HAL_SPI_Transmit+0x18e>
 80036ee:	8afb      	ldrh	r3, [r7, #22]
 80036f0:	2b01      	cmp	r3, #1
 80036f2:	d140      	bne.n	8003776 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	330c      	adds	r3, #12
 80036fe:	7812      	ldrb	r2, [r2, #0]
 8003700:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003706:	1c5a      	adds	r2, r3, #1
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003710:	b29b      	uxth	r3, r3
 8003712:	3b01      	subs	r3, #1
 8003714:	b29a      	uxth	r2, r3
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800371a:	e02c      	b.n	8003776 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	689b      	ldr	r3, [r3, #8]
 8003722:	f003 0302 	and.w	r3, r3, #2
 8003726:	2b02      	cmp	r3, #2
 8003728:	d113      	bne.n	8003752 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	330c      	adds	r3, #12
 8003734:	7812      	ldrb	r2, [r2, #0]
 8003736:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800373c:	1c5a      	adds	r2, r3, #1
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003746:	b29b      	uxth	r3, r3
 8003748:	3b01      	subs	r3, #1
 800374a:	b29a      	uxth	r2, r3
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	86da      	strh	r2, [r3, #54]	; 0x36
 8003750:	e011      	b.n	8003776 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003752:	f7fe fbbf 	bl	8001ed4 <HAL_GetTick>
 8003756:	4602      	mov	r2, r0
 8003758:	69bb      	ldr	r3, [r7, #24]
 800375a:	1ad3      	subs	r3, r2, r3
 800375c:	683a      	ldr	r2, [r7, #0]
 800375e:	429a      	cmp	r2, r3
 8003760:	d803      	bhi.n	800376a <HAL_SPI_Transmit+0x204>
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003768:	d102      	bne.n	8003770 <HAL_SPI_Transmit+0x20a>
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	2b00      	cmp	r3, #0
 800376e:	d102      	bne.n	8003776 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8003770:	2303      	movs	r3, #3
 8003772:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003774:	e026      	b.n	80037c4 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800377a:	b29b      	uxth	r3, r3
 800377c:	2b00      	cmp	r3, #0
 800377e:	d1cd      	bne.n	800371c <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003780:	69ba      	ldr	r2, [r7, #24]
 8003782:	6839      	ldr	r1, [r7, #0]
 8003784:	68f8      	ldr	r0, [r7, #12]
 8003786:	f000 fbcb 	bl	8003f20 <SPI_EndRxTxTransaction>
 800378a:	4603      	mov	r3, r0
 800378c:	2b00      	cmp	r3, #0
 800378e:	d002      	beq.n	8003796 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	2220      	movs	r2, #32
 8003794:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	689b      	ldr	r3, [r3, #8]
 800379a:	2b00      	cmp	r3, #0
 800379c:	d10a      	bne.n	80037b4 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800379e:	2300      	movs	r3, #0
 80037a0:	613b      	str	r3, [r7, #16]
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	68db      	ldr	r3, [r3, #12]
 80037a8:	613b      	str	r3, [r7, #16]
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	689b      	ldr	r3, [r3, #8]
 80037b0:	613b      	str	r3, [r7, #16]
 80037b2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d002      	beq.n	80037c2 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80037bc:	2301      	movs	r3, #1
 80037be:	77fb      	strb	r3, [r7, #31]
 80037c0:	e000      	b.n	80037c4 <HAL_SPI_Transmit+0x25e>
  }

error:
 80037c2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	2201      	movs	r2, #1
 80037c8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	2200      	movs	r2, #0
 80037d0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80037d4:	7ffb      	ldrb	r3, [r7, #31]
}
 80037d6:	4618      	mov	r0, r3
 80037d8:	3720      	adds	r7, #32
 80037da:	46bd      	mov	sp, r7
 80037dc:	bd80      	pop	{r7, pc}

080037de <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80037de:	b580      	push	{r7, lr}
 80037e0:	b088      	sub	sp, #32
 80037e2:	af02      	add	r7, sp, #8
 80037e4:	60f8      	str	r0, [r7, #12]
 80037e6:	60b9      	str	r1, [r7, #8]
 80037e8:	603b      	str	r3, [r7, #0]
 80037ea:	4613      	mov	r3, r2
 80037ec:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80037ee:	2300      	movs	r3, #0
 80037f0:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	685b      	ldr	r3, [r3, #4]
 80037f6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80037fa:	d112      	bne.n	8003822 <HAL_SPI_Receive+0x44>
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	689b      	ldr	r3, [r3, #8]
 8003800:	2b00      	cmp	r3, #0
 8003802:	d10e      	bne.n	8003822 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	2204      	movs	r2, #4
 8003808:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800380c:	88fa      	ldrh	r2, [r7, #6]
 800380e:	683b      	ldr	r3, [r7, #0]
 8003810:	9300      	str	r3, [sp, #0]
 8003812:	4613      	mov	r3, r2
 8003814:	68ba      	ldr	r2, [r7, #8]
 8003816:	68b9      	ldr	r1, [r7, #8]
 8003818:	68f8      	ldr	r0, [r7, #12]
 800381a:	f000 f8f1 	bl	8003a00 <HAL_SPI_TransmitReceive>
 800381e:	4603      	mov	r3, r0
 8003820:	e0ea      	b.n	80039f8 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003828:	2b01      	cmp	r3, #1
 800382a:	d101      	bne.n	8003830 <HAL_SPI_Receive+0x52>
 800382c:	2302      	movs	r3, #2
 800382e:	e0e3      	b.n	80039f8 <HAL_SPI_Receive+0x21a>
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	2201      	movs	r2, #1
 8003834:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003838:	f7fe fb4c 	bl	8001ed4 <HAL_GetTick>
 800383c:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003844:	b2db      	uxtb	r3, r3
 8003846:	2b01      	cmp	r3, #1
 8003848:	d002      	beq.n	8003850 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800384a:	2302      	movs	r3, #2
 800384c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800384e:	e0ca      	b.n	80039e6 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8003850:	68bb      	ldr	r3, [r7, #8]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d002      	beq.n	800385c <HAL_SPI_Receive+0x7e>
 8003856:	88fb      	ldrh	r3, [r7, #6]
 8003858:	2b00      	cmp	r3, #0
 800385a:	d102      	bne.n	8003862 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800385c:	2301      	movs	r3, #1
 800385e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003860:	e0c1      	b.n	80039e6 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	2204      	movs	r2, #4
 8003866:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	2200      	movs	r2, #0
 800386e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	68ba      	ldr	r2, [r7, #8]
 8003874:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	88fa      	ldrh	r2, [r7, #6]
 800387a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	88fa      	ldrh	r2, [r7, #6]
 8003880:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	2200      	movs	r2, #0
 8003886:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	2200      	movs	r2, #0
 800388c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	2200      	movs	r2, #0
 8003892:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	2200      	movs	r2, #0
 8003898:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	2200      	movs	r2, #0
 800389e:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	689b      	ldr	r3, [r3, #8]
 80038a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80038a8:	d10f      	bne.n	80038ca <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	681a      	ldr	r2, [r3, #0]
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80038b8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	681a      	ldr	r2, [r3, #0]
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80038c8:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038d4:	2b40      	cmp	r3, #64	; 0x40
 80038d6:	d007      	beq.n	80038e8 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	681a      	ldr	r2, [r3, #0]
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80038e6:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	68db      	ldr	r3, [r3, #12]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d162      	bne.n	80039b6 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80038f0:	e02e      	b.n	8003950 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	689b      	ldr	r3, [r3, #8]
 80038f8:	f003 0301 	and.w	r3, r3, #1
 80038fc:	2b01      	cmp	r3, #1
 80038fe:	d115      	bne.n	800392c <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f103 020c 	add.w	r2, r3, #12
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800390c:	7812      	ldrb	r2, [r2, #0]
 800390e:	b2d2      	uxtb	r2, r2
 8003910:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003916:	1c5a      	adds	r2, r3, #1
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003920:	b29b      	uxth	r3, r3
 8003922:	3b01      	subs	r3, #1
 8003924:	b29a      	uxth	r2, r3
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	87da      	strh	r2, [r3, #62]	; 0x3e
 800392a:	e011      	b.n	8003950 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800392c:	f7fe fad2 	bl	8001ed4 <HAL_GetTick>
 8003930:	4602      	mov	r2, r0
 8003932:	693b      	ldr	r3, [r7, #16]
 8003934:	1ad3      	subs	r3, r2, r3
 8003936:	683a      	ldr	r2, [r7, #0]
 8003938:	429a      	cmp	r2, r3
 800393a:	d803      	bhi.n	8003944 <HAL_SPI_Receive+0x166>
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003942:	d102      	bne.n	800394a <HAL_SPI_Receive+0x16c>
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	2b00      	cmp	r3, #0
 8003948:	d102      	bne.n	8003950 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 800394a:	2303      	movs	r3, #3
 800394c:	75fb      	strb	r3, [r7, #23]
          goto error;
 800394e:	e04a      	b.n	80039e6 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003954:	b29b      	uxth	r3, r3
 8003956:	2b00      	cmp	r3, #0
 8003958:	d1cb      	bne.n	80038f2 <HAL_SPI_Receive+0x114>
 800395a:	e031      	b.n	80039c0 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	689b      	ldr	r3, [r3, #8]
 8003962:	f003 0301 	and.w	r3, r3, #1
 8003966:	2b01      	cmp	r3, #1
 8003968:	d113      	bne.n	8003992 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	68da      	ldr	r2, [r3, #12]
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003974:	b292      	uxth	r2, r2
 8003976:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800397c:	1c9a      	adds	r2, r3, #2
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003986:	b29b      	uxth	r3, r3
 8003988:	3b01      	subs	r3, #1
 800398a:	b29a      	uxth	r2, r3
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003990:	e011      	b.n	80039b6 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003992:	f7fe fa9f 	bl	8001ed4 <HAL_GetTick>
 8003996:	4602      	mov	r2, r0
 8003998:	693b      	ldr	r3, [r7, #16]
 800399a:	1ad3      	subs	r3, r2, r3
 800399c:	683a      	ldr	r2, [r7, #0]
 800399e:	429a      	cmp	r2, r3
 80039a0:	d803      	bhi.n	80039aa <HAL_SPI_Receive+0x1cc>
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039a8:	d102      	bne.n	80039b0 <HAL_SPI_Receive+0x1d2>
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d102      	bne.n	80039b6 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 80039b0:	2303      	movs	r3, #3
 80039b2:	75fb      	strb	r3, [r7, #23]
          goto error;
 80039b4:	e017      	b.n	80039e6 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80039ba:	b29b      	uxth	r3, r3
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d1cd      	bne.n	800395c <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80039c0:	693a      	ldr	r2, [r7, #16]
 80039c2:	6839      	ldr	r1, [r7, #0]
 80039c4:	68f8      	ldr	r0, [r7, #12]
 80039c6:	f000 fa45 	bl	8003e54 <SPI_EndRxTransaction>
 80039ca:	4603      	mov	r3, r0
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d002      	beq.n	80039d6 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	2220      	movs	r2, #32
 80039d4:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d002      	beq.n	80039e4 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 80039de:	2301      	movs	r3, #1
 80039e0:	75fb      	strb	r3, [r7, #23]
 80039e2:	e000      	b.n	80039e6 <HAL_SPI_Receive+0x208>
  }

error :
 80039e4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	2201      	movs	r2, #1
 80039ea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	2200      	movs	r2, #0
 80039f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80039f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80039f8:	4618      	mov	r0, r3
 80039fa:	3718      	adds	r7, #24
 80039fc:	46bd      	mov	sp, r7
 80039fe:	bd80      	pop	{r7, pc}

08003a00 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b08c      	sub	sp, #48	; 0x30
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	60f8      	str	r0, [r7, #12]
 8003a08:	60b9      	str	r1, [r7, #8]
 8003a0a:	607a      	str	r2, [r7, #4]
 8003a0c:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003a0e:	2301      	movs	r3, #1
 8003a10:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003a12:	2300      	movs	r3, #0
 8003a14:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003a1e:	2b01      	cmp	r3, #1
 8003a20:	d101      	bne.n	8003a26 <HAL_SPI_TransmitReceive+0x26>
 8003a22:	2302      	movs	r3, #2
 8003a24:	e18a      	b.n	8003d3c <HAL_SPI_TransmitReceive+0x33c>
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	2201      	movs	r2, #1
 8003a2a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003a2e:	f7fe fa51 	bl	8001ed4 <HAL_GetTick>
 8003a32:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003a3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	685b      	ldr	r3, [r3, #4]
 8003a42:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003a44:	887b      	ldrh	r3, [r7, #2]
 8003a46:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003a48:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003a4c:	2b01      	cmp	r3, #1
 8003a4e:	d00f      	beq.n	8003a70 <HAL_SPI_TransmitReceive+0x70>
 8003a50:	69fb      	ldr	r3, [r7, #28]
 8003a52:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003a56:	d107      	bne.n	8003a68 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	689b      	ldr	r3, [r3, #8]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d103      	bne.n	8003a68 <HAL_SPI_TransmitReceive+0x68>
 8003a60:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003a64:	2b04      	cmp	r3, #4
 8003a66:	d003      	beq.n	8003a70 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003a68:	2302      	movs	r3, #2
 8003a6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003a6e:	e15b      	b.n	8003d28 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003a70:	68bb      	ldr	r3, [r7, #8]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d005      	beq.n	8003a82 <HAL_SPI_TransmitReceive+0x82>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d002      	beq.n	8003a82 <HAL_SPI_TransmitReceive+0x82>
 8003a7c:	887b      	ldrh	r3, [r7, #2]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d103      	bne.n	8003a8a <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003a82:	2301      	movs	r3, #1
 8003a84:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003a88:	e14e      	b.n	8003d28 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003a90:	b2db      	uxtb	r3, r3
 8003a92:	2b04      	cmp	r3, #4
 8003a94:	d003      	beq.n	8003a9e <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	2205      	movs	r2, #5
 8003a9a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	687a      	ldr	r2, [r7, #4]
 8003aa8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	887a      	ldrh	r2, [r7, #2]
 8003aae:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	887a      	ldrh	r2, [r7, #2]
 8003ab4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	68ba      	ldr	r2, [r7, #8]
 8003aba:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	887a      	ldrh	r2, [r7, #2]
 8003ac0:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	887a      	ldrh	r2, [r7, #2]
 8003ac6:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	2200      	movs	r2, #0
 8003acc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ade:	2b40      	cmp	r3, #64	; 0x40
 8003ae0:	d007      	beq.n	8003af2 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	681a      	ldr	r2, [r3, #0]
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003af0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	68db      	ldr	r3, [r3, #12]
 8003af6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003afa:	d178      	bne.n	8003bee <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	685b      	ldr	r3, [r3, #4]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d002      	beq.n	8003b0a <HAL_SPI_TransmitReceive+0x10a>
 8003b04:	8b7b      	ldrh	r3, [r7, #26]
 8003b06:	2b01      	cmp	r3, #1
 8003b08:	d166      	bne.n	8003bd8 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b0e:	881a      	ldrh	r2, [r3, #0]
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b1a:	1c9a      	adds	r2, r3, #2
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b24:	b29b      	uxth	r3, r3
 8003b26:	3b01      	subs	r3, #1
 8003b28:	b29a      	uxth	r2, r3
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003b2e:	e053      	b.n	8003bd8 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	689b      	ldr	r3, [r3, #8]
 8003b36:	f003 0302 	and.w	r3, r3, #2
 8003b3a:	2b02      	cmp	r3, #2
 8003b3c:	d11b      	bne.n	8003b76 <HAL_SPI_TransmitReceive+0x176>
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b42:	b29b      	uxth	r3, r3
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d016      	beq.n	8003b76 <HAL_SPI_TransmitReceive+0x176>
 8003b48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b4a:	2b01      	cmp	r3, #1
 8003b4c:	d113      	bne.n	8003b76 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b52:	881a      	ldrh	r2, [r3, #0]
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b5e:	1c9a      	adds	r2, r3, #2
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b68:	b29b      	uxth	r3, r3
 8003b6a:	3b01      	subs	r3, #1
 8003b6c:	b29a      	uxth	r2, r3
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003b72:	2300      	movs	r3, #0
 8003b74:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	689b      	ldr	r3, [r3, #8]
 8003b7c:	f003 0301 	and.w	r3, r3, #1
 8003b80:	2b01      	cmp	r3, #1
 8003b82:	d119      	bne.n	8003bb8 <HAL_SPI_TransmitReceive+0x1b8>
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b88:	b29b      	uxth	r3, r3
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d014      	beq.n	8003bb8 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	68da      	ldr	r2, [r3, #12]
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b98:	b292      	uxth	r2, r2
 8003b9a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ba0:	1c9a      	adds	r2, r3, #2
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003baa:	b29b      	uxth	r3, r3
 8003bac:	3b01      	subs	r3, #1
 8003bae:	b29a      	uxth	r2, r3
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003bb4:	2301      	movs	r3, #1
 8003bb6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003bb8:	f7fe f98c 	bl	8001ed4 <HAL_GetTick>
 8003bbc:	4602      	mov	r2, r0
 8003bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bc0:	1ad3      	subs	r3, r2, r3
 8003bc2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003bc4:	429a      	cmp	r2, r3
 8003bc6:	d807      	bhi.n	8003bd8 <HAL_SPI_TransmitReceive+0x1d8>
 8003bc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bce:	d003      	beq.n	8003bd8 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8003bd0:	2303      	movs	r3, #3
 8003bd2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003bd6:	e0a7      	b.n	8003d28 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003bdc:	b29b      	uxth	r3, r3
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d1a6      	bne.n	8003b30 <HAL_SPI_TransmitReceive+0x130>
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003be6:	b29b      	uxth	r3, r3
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d1a1      	bne.n	8003b30 <HAL_SPI_TransmitReceive+0x130>
 8003bec:	e07c      	b.n	8003ce8 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	685b      	ldr	r3, [r3, #4]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d002      	beq.n	8003bfc <HAL_SPI_TransmitReceive+0x1fc>
 8003bf6:	8b7b      	ldrh	r3, [r7, #26]
 8003bf8:	2b01      	cmp	r3, #1
 8003bfa:	d16b      	bne.n	8003cd4 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	330c      	adds	r3, #12
 8003c06:	7812      	ldrb	r2, [r2, #0]
 8003c08:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c0e:	1c5a      	adds	r2, r3, #1
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c18:	b29b      	uxth	r3, r3
 8003c1a:	3b01      	subs	r3, #1
 8003c1c:	b29a      	uxth	r2, r3
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003c22:	e057      	b.n	8003cd4 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	689b      	ldr	r3, [r3, #8]
 8003c2a:	f003 0302 	and.w	r3, r3, #2
 8003c2e:	2b02      	cmp	r3, #2
 8003c30:	d11c      	bne.n	8003c6c <HAL_SPI_TransmitReceive+0x26c>
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c36:	b29b      	uxth	r3, r3
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d017      	beq.n	8003c6c <HAL_SPI_TransmitReceive+0x26c>
 8003c3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c3e:	2b01      	cmp	r3, #1
 8003c40:	d114      	bne.n	8003c6c <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	330c      	adds	r3, #12
 8003c4c:	7812      	ldrb	r2, [r2, #0]
 8003c4e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c54:	1c5a      	adds	r2, r3, #1
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c5e:	b29b      	uxth	r3, r3
 8003c60:	3b01      	subs	r3, #1
 8003c62:	b29a      	uxth	r2, r3
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003c68:	2300      	movs	r3, #0
 8003c6a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	689b      	ldr	r3, [r3, #8]
 8003c72:	f003 0301 	and.w	r3, r3, #1
 8003c76:	2b01      	cmp	r3, #1
 8003c78:	d119      	bne.n	8003cae <HAL_SPI_TransmitReceive+0x2ae>
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c7e:	b29b      	uxth	r3, r3
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d014      	beq.n	8003cae <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	68da      	ldr	r2, [r3, #12]
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c8e:	b2d2      	uxtb	r2, r2
 8003c90:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c96:	1c5a      	adds	r2, r3, #1
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ca0:	b29b      	uxth	r3, r3
 8003ca2:	3b01      	subs	r3, #1
 8003ca4:	b29a      	uxth	r2, r3
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003caa:	2301      	movs	r3, #1
 8003cac:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003cae:	f7fe f911 	bl	8001ed4 <HAL_GetTick>
 8003cb2:	4602      	mov	r2, r0
 8003cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cb6:	1ad3      	subs	r3, r2, r3
 8003cb8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003cba:	429a      	cmp	r2, r3
 8003cbc:	d803      	bhi.n	8003cc6 <HAL_SPI_TransmitReceive+0x2c6>
 8003cbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cc4:	d102      	bne.n	8003ccc <HAL_SPI_TransmitReceive+0x2cc>
 8003cc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d103      	bne.n	8003cd4 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8003ccc:	2303      	movs	r3, #3
 8003cce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003cd2:	e029      	b.n	8003d28 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003cd8:	b29b      	uxth	r3, r3
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d1a2      	bne.n	8003c24 <HAL_SPI_TransmitReceive+0x224>
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ce2:	b29b      	uxth	r3, r3
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d19d      	bne.n	8003c24 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003ce8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cea:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003cec:	68f8      	ldr	r0, [r7, #12]
 8003cee:	f000 f917 	bl	8003f20 <SPI_EndRxTxTransaction>
 8003cf2:	4603      	mov	r3, r0
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d006      	beq.n	8003d06 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8003cf8:	2301      	movs	r3, #1
 8003cfa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	2220      	movs	r2, #32
 8003d02:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003d04:	e010      	b.n	8003d28 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	689b      	ldr	r3, [r3, #8]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d10b      	bne.n	8003d26 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003d0e:	2300      	movs	r3, #0
 8003d10:	617b      	str	r3, [r7, #20]
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	68db      	ldr	r3, [r3, #12]
 8003d18:	617b      	str	r3, [r7, #20]
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	689b      	ldr	r3, [r3, #8]
 8003d20:	617b      	str	r3, [r7, #20]
 8003d22:	697b      	ldr	r3, [r7, #20]
 8003d24:	e000      	b.n	8003d28 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8003d26:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	2201      	movs	r2, #1
 8003d2c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	2200      	movs	r2, #0
 8003d34:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003d38:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	3730      	adds	r7, #48	; 0x30
 8003d40:	46bd      	mov	sp, r7
 8003d42:	bd80      	pop	{r7, pc}

08003d44 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b088      	sub	sp, #32
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	60f8      	str	r0, [r7, #12]
 8003d4c:	60b9      	str	r1, [r7, #8]
 8003d4e:	603b      	str	r3, [r7, #0]
 8003d50:	4613      	mov	r3, r2
 8003d52:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003d54:	f7fe f8be 	bl	8001ed4 <HAL_GetTick>
 8003d58:	4602      	mov	r2, r0
 8003d5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d5c:	1a9b      	subs	r3, r3, r2
 8003d5e:	683a      	ldr	r2, [r7, #0]
 8003d60:	4413      	add	r3, r2
 8003d62:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003d64:	f7fe f8b6 	bl	8001ed4 <HAL_GetTick>
 8003d68:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003d6a:	4b39      	ldr	r3, [pc, #228]	; (8003e50 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	015b      	lsls	r3, r3, #5
 8003d70:	0d1b      	lsrs	r3, r3, #20
 8003d72:	69fa      	ldr	r2, [r7, #28]
 8003d74:	fb02 f303 	mul.w	r3, r2, r3
 8003d78:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003d7a:	e054      	b.n	8003e26 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d82:	d050      	beq.n	8003e26 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003d84:	f7fe f8a6 	bl	8001ed4 <HAL_GetTick>
 8003d88:	4602      	mov	r2, r0
 8003d8a:	69bb      	ldr	r3, [r7, #24]
 8003d8c:	1ad3      	subs	r3, r2, r3
 8003d8e:	69fa      	ldr	r2, [r7, #28]
 8003d90:	429a      	cmp	r2, r3
 8003d92:	d902      	bls.n	8003d9a <SPI_WaitFlagStateUntilTimeout+0x56>
 8003d94:	69fb      	ldr	r3, [r7, #28]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d13d      	bne.n	8003e16 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	685a      	ldr	r2, [r3, #4]
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003da8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	685b      	ldr	r3, [r3, #4]
 8003dae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003db2:	d111      	bne.n	8003dd8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	689b      	ldr	r3, [r3, #8]
 8003db8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003dbc:	d004      	beq.n	8003dc8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	689b      	ldr	r3, [r3, #8]
 8003dc2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003dc6:	d107      	bne.n	8003dd8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	681a      	ldr	r2, [r3, #0]
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003dd6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ddc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003de0:	d10f      	bne.n	8003e02 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	681a      	ldr	r2, [r3, #0]
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003df0:	601a      	str	r2, [r3, #0]
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	681a      	ldr	r2, [r3, #0]
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003e00:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	2201      	movs	r2, #1
 8003e06:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003e12:	2303      	movs	r3, #3
 8003e14:	e017      	b.n	8003e46 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003e16:	697b      	ldr	r3, [r7, #20]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d101      	bne.n	8003e20 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003e1c:	2300      	movs	r3, #0
 8003e1e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003e20:	697b      	ldr	r3, [r7, #20]
 8003e22:	3b01      	subs	r3, #1
 8003e24:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	689a      	ldr	r2, [r3, #8]
 8003e2c:	68bb      	ldr	r3, [r7, #8]
 8003e2e:	4013      	ands	r3, r2
 8003e30:	68ba      	ldr	r2, [r7, #8]
 8003e32:	429a      	cmp	r2, r3
 8003e34:	bf0c      	ite	eq
 8003e36:	2301      	moveq	r3, #1
 8003e38:	2300      	movne	r3, #0
 8003e3a:	b2db      	uxtb	r3, r3
 8003e3c:	461a      	mov	r2, r3
 8003e3e:	79fb      	ldrb	r3, [r7, #7]
 8003e40:	429a      	cmp	r2, r3
 8003e42:	d19b      	bne.n	8003d7c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003e44:	2300      	movs	r3, #0
}
 8003e46:	4618      	mov	r0, r3
 8003e48:	3720      	adds	r7, #32
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	bd80      	pop	{r7, pc}
 8003e4e:	bf00      	nop
 8003e50:	20000000 	.word	0x20000000

08003e54 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b086      	sub	sp, #24
 8003e58:	af02      	add	r7, sp, #8
 8003e5a:	60f8      	str	r0, [r7, #12]
 8003e5c:	60b9      	str	r1, [r7, #8]
 8003e5e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	685b      	ldr	r3, [r3, #4]
 8003e64:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003e68:	d111      	bne.n	8003e8e <SPI_EndRxTransaction+0x3a>
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	689b      	ldr	r3, [r3, #8]
 8003e6e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e72:	d004      	beq.n	8003e7e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	689b      	ldr	r3, [r3, #8]
 8003e78:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e7c:	d107      	bne.n	8003e8e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	681a      	ldr	r2, [r3, #0]
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e8c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	685b      	ldr	r3, [r3, #4]
 8003e92:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003e96:	d12a      	bne.n	8003eee <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	689b      	ldr	r3, [r3, #8]
 8003e9c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ea0:	d012      	beq.n	8003ec8 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	9300      	str	r3, [sp, #0]
 8003ea6:	68bb      	ldr	r3, [r7, #8]
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	2180      	movs	r1, #128	; 0x80
 8003eac:	68f8      	ldr	r0, [r7, #12]
 8003eae:	f7ff ff49 	bl	8003d44 <SPI_WaitFlagStateUntilTimeout>
 8003eb2:	4603      	mov	r3, r0
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d02d      	beq.n	8003f14 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ebc:	f043 0220 	orr.w	r2, r3, #32
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8003ec4:	2303      	movs	r3, #3
 8003ec6:	e026      	b.n	8003f16 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	9300      	str	r3, [sp, #0]
 8003ecc:	68bb      	ldr	r3, [r7, #8]
 8003ece:	2200      	movs	r2, #0
 8003ed0:	2101      	movs	r1, #1
 8003ed2:	68f8      	ldr	r0, [r7, #12]
 8003ed4:	f7ff ff36 	bl	8003d44 <SPI_WaitFlagStateUntilTimeout>
 8003ed8:	4603      	mov	r3, r0
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d01a      	beq.n	8003f14 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ee2:	f043 0220 	orr.w	r2, r3, #32
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8003eea:	2303      	movs	r3, #3
 8003eec:	e013      	b.n	8003f16 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	9300      	str	r3, [sp, #0]
 8003ef2:	68bb      	ldr	r3, [r7, #8]
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	2101      	movs	r1, #1
 8003ef8:	68f8      	ldr	r0, [r7, #12]
 8003efa:	f7ff ff23 	bl	8003d44 <SPI_WaitFlagStateUntilTimeout>
 8003efe:	4603      	mov	r3, r0
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d007      	beq.n	8003f14 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f08:	f043 0220 	orr.w	r2, r3, #32
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003f10:	2303      	movs	r3, #3
 8003f12:	e000      	b.n	8003f16 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8003f14:	2300      	movs	r3, #0
}
 8003f16:	4618      	mov	r0, r3
 8003f18:	3710      	adds	r7, #16
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	bd80      	pop	{r7, pc}
	...

08003f20 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b088      	sub	sp, #32
 8003f24:	af02      	add	r7, sp, #8
 8003f26:	60f8      	str	r0, [r7, #12]
 8003f28:	60b9      	str	r1, [r7, #8]
 8003f2a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003f2c:	4b1b      	ldr	r3, [pc, #108]	; (8003f9c <SPI_EndRxTxTransaction+0x7c>)
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	4a1b      	ldr	r2, [pc, #108]	; (8003fa0 <SPI_EndRxTxTransaction+0x80>)
 8003f32:	fba2 2303 	umull	r2, r3, r2, r3
 8003f36:	0d5b      	lsrs	r3, r3, #21
 8003f38:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003f3c:	fb02 f303 	mul.w	r3, r2, r3
 8003f40:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	685b      	ldr	r3, [r3, #4]
 8003f46:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003f4a:	d112      	bne.n	8003f72 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	9300      	str	r3, [sp, #0]
 8003f50:	68bb      	ldr	r3, [r7, #8]
 8003f52:	2200      	movs	r2, #0
 8003f54:	2180      	movs	r1, #128	; 0x80
 8003f56:	68f8      	ldr	r0, [r7, #12]
 8003f58:	f7ff fef4 	bl	8003d44 <SPI_WaitFlagStateUntilTimeout>
 8003f5c:	4603      	mov	r3, r0
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d016      	beq.n	8003f90 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f66:	f043 0220 	orr.w	r2, r3, #32
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003f6e:	2303      	movs	r3, #3
 8003f70:	e00f      	b.n	8003f92 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003f72:	697b      	ldr	r3, [r7, #20]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d00a      	beq.n	8003f8e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003f78:	697b      	ldr	r3, [r7, #20]
 8003f7a:	3b01      	subs	r3, #1
 8003f7c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	689b      	ldr	r3, [r3, #8]
 8003f84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f88:	2b80      	cmp	r3, #128	; 0x80
 8003f8a:	d0f2      	beq.n	8003f72 <SPI_EndRxTxTransaction+0x52>
 8003f8c:	e000      	b.n	8003f90 <SPI_EndRxTxTransaction+0x70>
        break;
 8003f8e:	bf00      	nop
  }

  return HAL_OK;
 8003f90:	2300      	movs	r3, #0
}
 8003f92:	4618      	mov	r0, r3
 8003f94:	3718      	adds	r7, #24
 8003f96:	46bd      	mov	sp, r7
 8003f98:	bd80      	pop	{r7, pc}
 8003f9a:	bf00      	nop
 8003f9c:	20000000 	.word	0x20000000
 8003fa0:	165e9f81 	.word	0x165e9f81

08003fa4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b082      	sub	sp, #8
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d101      	bne.n	8003fb6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003fb2:	2301      	movs	r3, #1
 8003fb4:	e041      	b.n	800403a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fbc:	b2db      	uxtb	r3, r3
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d106      	bne.n	8003fd0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003fca:	6878      	ldr	r0, [r7, #4]
 8003fcc:	f7fd fbf2 	bl	80017b4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2202      	movs	r2, #2
 8003fd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681a      	ldr	r2, [r3, #0]
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	3304      	adds	r3, #4
 8003fe0:	4619      	mov	r1, r3
 8003fe2:	4610      	mov	r0, r2
 8003fe4:	f000 fdb0 	bl	8004b48 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2201      	movs	r2, #1
 8003fec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2201      	movs	r2, #1
 8003ff4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2201      	movs	r2, #1
 8003ffc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2201      	movs	r2, #1
 8004004:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2201      	movs	r2, #1
 800400c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2201      	movs	r2, #1
 8004014:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2201      	movs	r2, #1
 800401c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2201      	movs	r2, #1
 8004024:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2201      	movs	r2, #1
 800402c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2201      	movs	r2, #1
 8004034:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004038:	2300      	movs	r3, #0
}
 800403a:	4618      	mov	r0, r3
 800403c:	3708      	adds	r7, #8
 800403e:	46bd      	mov	sp, r7
 8004040:	bd80      	pop	{r7, pc}
	...

08004044 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004044:	b480      	push	{r7}
 8004046:	b085      	sub	sp, #20
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004052:	b2db      	uxtb	r3, r3
 8004054:	2b01      	cmp	r3, #1
 8004056:	d001      	beq.n	800405c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004058:	2301      	movs	r3, #1
 800405a:	e046      	b.n	80040ea <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2202      	movs	r2, #2
 8004060:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	4a23      	ldr	r2, [pc, #140]	; (80040f8 <HAL_TIM_Base_Start+0xb4>)
 800406a:	4293      	cmp	r3, r2
 800406c:	d022      	beq.n	80040b4 <HAL_TIM_Base_Start+0x70>
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004076:	d01d      	beq.n	80040b4 <HAL_TIM_Base_Start+0x70>
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	4a1f      	ldr	r2, [pc, #124]	; (80040fc <HAL_TIM_Base_Start+0xb8>)
 800407e:	4293      	cmp	r3, r2
 8004080:	d018      	beq.n	80040b4 <HAL_TIM_Base_Start+0x70>
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	4a1e      	ldr	r2, [pc, #120]	; (8004100 <HAL_TIM_Base_Start+0xbc>)
 8004088:	4293      	cmp	r3, r2
 800408a:	d013      	beq.n	80040b4 <HAL_TIM_Base_Start+0x70>
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	4a1c      	ldr	r2, [pc, #112]	; (8004104 <HAL_TIM_Base_Start+0xc0>)
 8004092:	4293      	cmp	r3, r2
 8004094:	d00e      	beq.n	80040b4 <HAL_TIM_Base_Start+0x70>
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	4a1b      	ldr	r2, [pc, #108]	; (8004108 <HAL_TIM_Base_Start+0xc4>)
 800409c:	4293      	cmp	r3, r2
 800409e:	d009      	beq.n	80040b4 <HAL_TIM_Base_Start+0x70>
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	4a19      	ldr	r2, [pc, #100]	; (800410c <HAL_TIM_Base_Start+0xc8>)
 80040a6:	4293      	cmp	r3, r2
 80040a8:	d004      	beq.n	80040b4 <HAL_TIM_Base_Start+0x70>
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	4a18      	ldr	r2, [pc, #96]	; (8004110 <HAL_TIM_Base_Start+0xcc>)
 80040b0:	4293      	cmp	r3, r2
 80040b2:	d111      	bne.n	80040d8 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	689b      	ldr	r3, [r3, #8]
 80040ba:	f003 0307 	and.w	r3, r3, #7
 80040be:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	2b06      	cmp	r3, #6
 80040c4:	d010      	beq.n	80040e8 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	681a      	ldr	r2, [r3, #0]
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f042 0201 	orr.w	r2, r2, #1
 80040d4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040d6:	e007      	b.n	80040e8 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	681a      	ldr	r2, [r3, #0]
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f042 0201 	orr.w	r2, r2, #1
 80040e6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80040e8:	2300      	movs	r3, #0
}
 80040ea:	4618      	mov	r0, r3
 80040ec:	3714      	adds	r7, #20
 80040ee:	46bd      	mov	sp, r7
 80040f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f4:	4770      	bx	lr
 80040f6:	bf00      	nop
 80040f8:	40010000 	.word	0x40010000
 80040fc:	40000400 	.word	0x40000400
 8004100:	40000800 	.word	0x40000800
 8004104:	40000c00 	.word	0x40000c00
 8004108:	40010400 	.word	0x40010400
 800410c:	40014000 	.word	0x40014000
 8004110:	40001800 	.word	0x40001800

08004114 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004114:	b480      	push	{r7}
 8004116:	b085      	sub	sp, #20
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004122:	b2db      	uxtb	r3, r3
 8004124:	2b01      	cmp	r3, #1
 8004126:	d001      	beq.n	800412c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004128:	2301      	movs	r3, #1
 800412a:	e04e      	b.n	80041ca <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2202      	movs	r2, #2
 8004130:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	68da      	ldr	r2, [r3, #12]
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f042 0201 	orr.w	r2, r2, #1
 8004142:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	4a23      	ldr	r2, [pc, #140]	; (80041d8 <HAL_TIM_Base_Start_IT+0xc4>)
 800414a:	4293      	cmp	r3, r2
 800414c:	d022      	beq.n	8004194 <HAL_TIM_Base_Start_IT+0x80>
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004156:	d01d      	beq.n	8004194 <HAL_TIM_Base_Start_IT+0x80>
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	4a1f      	ldr	r2, [pc, #124]	; (80041dc <HAL_TIM_Base_Start_IT+0xc8>)
 800415e:	4293      	cmp	r3, r2
 8004160:	d018      	beq.n	8004194 <HAL_TIM_Base_Start_IT+0x80>
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	4a1e      	ldr	r2, [pc, #120]	; (80041e0 <HAL_TIM_Base_Start_IT+0xcc>)
 8004168:	4293      	cmp	r3, r2
 800416a:	d013      	beq.n	8004194 <HAL_TIM_Base_Start_IT+0x80>
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	4a1c      	ldr	r2, [pc, #112]	; (80041e4 <HAL_TIM_Base_Start_IT+0xd0>)
 8004172:	4293      	cmp	r3, r2
 8004174:	d00e      	beq.n	8004194 <HAL_TIM_Base_Start_IT+0x80>
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	4a1b      	ldr	r2, [pc, #108]	; (80041e8 <HAL_TIM_Base_Start_IT+0xd4>)
 800417c:	4293      	cmp	r3, r2
 800417e:	d009      	beq.n	8004194 <HAL_TIM_Base_Start_IT+0x80>
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	4a19      	ldr	r2, [pc, #100]	; (80041ec <HAL_TIM_Base_Start_IT+0xd8>)
 8004186:	4293      	cmp	r3, r2
 8004188:	d004      	beq.n	8004194 <HAL_TIM_Base_Start_IT+0x80>
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	4a18      	ldr	r2, [pc, #96]	; (80041f0 <HAL_TIM_Base_Start_IT+0xdc>)
 8004190:	4293      	cmp	r3, r2
 8004192:	d111      	bne.n	80041b8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	689b      	ldr	r3, [r3, #8]
 800419a:	f003 0307 	and.w	r3, r3, #7
 800419e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	2b06      	cmp	r3, #6
 80041a4:	d010      	beq.n	80041c8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	681a      	ldr	r2, [r3, #0]
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f042 0201 	orr.w	r2, r2, #1
 80041b4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041b6:	e007      	b.n	80041c8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	681a      	ldr	r2, [r3, #0]
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f042 0201 	orr.w	r2, r2, #1
 80041c6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80041c8:	2300      	movs	r3, #0
}
 80041ca:	4618      	mov	r0, r3
 80041cc:	3714      	adds	r7, #20
 80041ce:	46bd      	mov	sp, r7
 80041d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d4:	4770      	bx	lr
 80041d6:	bf00      	nop
 80041d8:	40010000 	.word	0x40010000
 80041dc:	40000400 	.word	0x40000400
 80041e0:	40000800 	.word	0x40000800
 80041e4:	40000c00 	.word	0x40000c00
 80041e8:	40010400 	.word	0x40010400
 80041ec:	40014000 	.word	0x40014000
 80041f0:	40001800 	.word	0x40001800

080041f4 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80041f4:	b580      	push	{r7, lr}
 80041f6:	b082      	sub	sp, #8
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d101      	bne.n	8004206 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8004202:	2301      	movs	r3, #1
 8004204:	e041      	b.n	800428a <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800420c:	b2db      	uxtb	r3, r3
 800420e:	2b00      	cmp	r3, #0
 8004210:	d106      	bne.n	8004220 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	2200      	movs	r2, #0
 8004216:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800421a:	6878      	ldr	r0, [r7, #4]
 800421c:	f000 f839 	bl	8004292 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2202      	movs	r2, #2
 8004224:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681a      	ldr	r2, [r3, #0]
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	3304      	adds	r3, #4
 8004230:	4619      	mov	r1, r3
 8004232:	4610      	mov	r0, r2
 8004234:	f000 fc88 	bl	8004b48 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2201      	movs	r2, #1
 800423c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2201      	movs	r2, #1
 8004244:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2201      	movs	r2, #1
 800424c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2201      	movs	r2, #1
 8004254:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2201      	movs	r2, #1
 800425c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2201      	movs	r2, #1
 8004264:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2201      	movs	r2, #1
 800426c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2201      	movs	r2, #1
 8004274:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2201      	movs	r2, #1
 800427c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2201      	movs	r2, #1
 8004284:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004288:	2300      	movs	r3, #0
}
 800428a:	4618      	mov	r0, r3
 800428c:	3708      	adds	r7, #8
 800428e:	46bd      	mov	sp, r7
 8004290:	bd80      	pop	{r7, pc}

08004292 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8004292:	b480      	push	{r7}
 8004294:	b083      	sub	sp, #12
 8004296:	af00      	add	r7, sp, #0
 8004298:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 800429a:	bf00      	nop
 800429c:	370c      	adds	r7, #12
 800429e:	46bd      	mov	sp, r7
 80042a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a4:	4770      	bx	lr

080042a6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80042a6:	b580      	push	{r7, lr}
 80042a8:	b082      	sub	sp, #8
 80042aa:	af00      	add	r7, sp, #0
 80042ac:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d101      	bne.n	80042b8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80042b4:	2301      	movs	r3, #1
 80042b6:	e041      	b.n	800433c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042be:	b2db      	uxtb	r3, r3
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d106      	bne.n	80042d2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2200      	movs	r2, #0
 80042c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80042cc:	6878      	ldr	r0, [r7, #4]
 80042ce:	f000 f839 	bl	8004344 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	2202      	movs	r2, #2
 80042d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681a      	ldr	r2, [r3, #0]
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	3304      	adds	r3, #4
 80042e2:	4619      	mov	r1, r3
 80042e4:	4610      	mov	r0, r2
 80042e6:	f000 fc2f 	bl	8004b48 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	2201      	movs	r2, #1
 80042ee:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	2201      	movs	r2, #1
 80042f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	2201      	movs	r2, #1
 80042fe:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2201      	movs	r2, #1
 8004306:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	2201      	movs	r2, #1
 800430e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	2201      	movs	r2, #1
 8004316:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	2201      	movs	r2, #1
 800431e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	2201      	movs	r2, #1
 8004326:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	2201      	movs	r2, #1
 800432e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	2201      	movs	r2, #1
 8004336:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800433a:	2300      	movs	r3, #0
}
 800433c:	4618      	mov	r0, r3
 800433e:	3708      	adds	r7, #8
 8004340:	46bd      	mov	sp, r7
 8004342:	bd80      	pop	{r7, pc}

08004344 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004344:	b480      	push	{r7}
 8004346:	b083      	sub	sp, #12
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800434c:	bf00      	nop
 800434e:	370c      	adds	r7, #12
 8004350:	46bd      	mov	sp, r7
 8004352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004356:	4770      	bx	lr

08004358 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8004358:	b580      	push	{r7, lr}
 800435a:	b082      	sub	sp, #8
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d101      	bne.n	800436a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8004366:	2301      	movs	r3, #1
 8004368:	e041      	b.n	80043ee <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004370:	b2db      	uxtb	r3, r3
 8004372:	2b00      	cmp	r3, #0
 8004374:	d106      	bne.n	8004384 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	2200      	movs	r2, #0
 800437a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800437e:	6878      	ldr	r0, [r7, #4]
 8004380:	f000 f839 	bl	80043f6 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2202      	movs	r2, #2
 8004388:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681a      	ldr	r2, [r3, #0]
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	3304      	adds	r3, #4
 8004394:	4619      	mov	r1, r3
 8004396:	4610      	mov	r0, r2
 8004398:	f000 fbd6 	bl	8004b48 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2201      	movs	r2, #1
 80043a0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2201      	movs	r2, #1
 80043a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2201      	movs	r2, #1
 80043b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2201      	movs	r2, #1
 80043b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2201      	movs	r2, #1
 80043c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2201      	movs	r2, #1
 80043c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2201      	movs	r2, #1
 80043d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2201      	movs	r2, #1
 80043d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2201      	movs	r2, #1
 80043e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2201      	movs	r2, #1
 80043e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80043ec:	2300      	movs	r3, #0
}
 80043ee:	4618      	mov	r0, r3
 80043f0:	3708      	adds	r7, #8
 80043f2:	46bd      	mov	sp, r7
 80043f4:	bd80      	pop	{r7, pc}

080043f6 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80043f6:	b480      	push	{r7}
 80043f8:	b083      	sub	sp, #12
 80043fa:	af00      	add	r7, sp, #0
 80043fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80043fe:	bf00      	nop
 8004400:	370c      	adds	r7, #12
 8004402:	46bd      	mov	sp, r7
 8004404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004408:	4770      	bx	lr

0800440a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800440a:	b580      	push	{r7, lr}
 800440c:	b082      	sub	sp, #8
 800440e:	af00      	add	r7, sp, #0
 8004410:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	691b      	ldr	r3, [r3, #16]
 8004418:	f003 0302 	and.w	r3, r3, #2
 800441c:	2b02      	cmp	r3, #2
 800441e:	d122      	bne.n	8004466 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	68db      	ldr	r3, [r3, #12]
 8004426:	f003 0302 	and.w	r3, r3, #2
 800442a:	2b02      	cmp	r3, #2
 800442c:	d11b      	bne.n	8004466 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f06f 0202 	mvn.w	r2, #2
 8004436:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2201      	movs	r2, #1
 800443c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	699b      	ldr	r3, [r3, #24]
 8004444:	f003 0303 	and.w	r3, r3, #3
 8004448:	2b00      	cmp	r3, #0
 800444a:	d003      	beq.n	8004454 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800444c:	6878      	ldr	r0, [r7, #4]
 800444e:	f000 fb5d 	bl	8004b0c <HAL_TIM_IC_CaptureCallback>
 8004452:	e005      	b.n	8004460 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004454:	6878      	ldr	r0, [r7, #4]
 8004456:	f000 fb4f 	bl	8004af8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800445a:	6878      	ldr	r0, [r7, #4]
 800445c:	f000 fb60 	bl	8004b20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2200      	movs	r2, #0
 8004464:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	691b      	ldr	r3, [r3, #16]
 800446c:	f003 0304 	and.w	r3, r3, #4
 8004470:	2b04      	cmp	r3, #4
 8004472:	d122      	bne.n	80044ba <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	68db      	ldr	r3, [r3, #12]
 800447a:	f003 0304 	and.w	r3, r3, #4
 800447e:	2b04      	cmp	r3, #4
 8004480:	d11b      	bne.n	80044ba <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f06f 0204 	mvn.w	r2, #4
 800448a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2202      	movs	r2, #2
 8004490:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	699b      	ldr	r3, [r3, #24]
 8004498:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800449c:	2b00      	cmp	r3, #0
 800449e:	d003      	beq.n	80044a8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80044a0:	6878      	ldr	r0, [r7, #4]
 80044a2:	f000 fb33 	bl	8004b0c <HAL_TIM_IC_CaptureCallback>
 80044a6:	e005      	b.n	80044b4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80044a8:	6878      	ldr	r0, [r7, #4]
 80044aa:	f000 fb25 	bl	8004af8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044ae:	6878      	ldr	r0, [r7, #4]
 80044b0:	f000 fb36 	bl	8004b20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2200      	movs	r2, #0
 80044b8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	691b      	ldr	r3, [r3, #16]
 80044c0:	f003 0308 	and.w	r3, r3, #8
 80044c4:	2b08      	cmp	r3, #8
 80044c6:	d122      	bne.n	800450e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	68db      	ldr	r3, [r3, #12]
 80044ce:	f003 0308 	and.w	r3, r3, #8
 80044d2:	2b08      	cmp	r3, #8
 80044d4:	d11b      	bne.n	800450e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f06f 0208 	mvn.w	r2, #8
 80044de:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2204      	movs	r2, #4
 80044e4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	69db      	ldr	r3, [r3, #28]
 80044ec:	f003 0303 	and.w	r3, r3, #3
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d003      	beq.n	80044fc <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80044f4:	6878      	ldr	r0, [r7, #4]
 80044f6:	f000 fb09 	bl	8004b0c <HAL_TIM_IC_CaptureCallback>
 80044fa:	e005      	b.n	8004508 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80044fc:	6878      	ldr	r0, [r7, #4]
 80044fe:	f000 fafb 	bl	8004af8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004502:	6878      	ldr	r0, [r7, #4]
 8004504:	f000 fb0c 	bl	8004b20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2200      	movs	r2, #0
 800450c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	691b      	ldr	r3, [r3, #16]
 8004514:	f003 0310 	and.w	r3, r3, #16
 8004518:	2b10      	cmp	r3, #16
 800451a:	d122      	bne.n	8004562 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	68db      	ldr	r3, [r3, #12]
 8004522:	f003 0310 	and.w	r3, r3, #16
 8004526:	2b10      	cmp	r3, #16
 8004528:	d11b      	bne.n	8004562 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f06f 0210 	mvn.w	r2, #16
 8004532:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2208      	movs	r2, #8
 8004538:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	69db      	ldr	r3, [r3, #28]
 8004540:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004544:	2b00      	cmp	r3, #0
 8004546:	d003      	beq.n	8004550 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004548:	6878      	ldr	r0, [r7, #4]
 800454a:	f000 fadf 	bl	8004b0c <HAL_TIM_IC_CaptureCallback>
 800454e:	e005      	b.n	800455c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004550:	6878      	ldr	r0, [r7, #4]
 8004552:	f000 fad1 	bl	8004af8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004556:	6878      	ldr	r0, [r7, #4]
 8004558:	f000 fae2 	bl	8004b20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2200      	movs	r2, #0
 8004560:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	691b      	ldr	r3, [r3, #16]
 8004568:	f003 0301 	and.w	r3, r3, #1
 800456c:	2b01      	cmp	r3, #1
 800456e:	d10e      	bne.n	800458e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	68db      	ldr	r3, [r3, #12]
 8004576:	f003 0301 	and.w	r3, r3, #1
 800457a:	2b01      	cmp	r3, #1
 800457c:	d107      	bne.n	800458e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f06f 0201 	mvn.w	r2, #1
 8004586:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004588:	6878      	ldr	r0, [r7, #4]
 800458a:	f7fc ffdf 	bl	800154c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	691b      	ldr	r3, [r3, #16]
 8004594:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004598:	2b80      	cmp	r3, #128	; 0x80
 800459a:	d10e      	bne.n	80045ba <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	68db      	ldr	r3, [r3, #12]
 80045a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045a6:	2b80      	cmp	r3, #128	; 0x80
 80045a8:	d107      	bne.n	80045ba <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80045b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80045b4:	6878      	ldr	r0, [r7, #4]
 80045b6:	f000 ffb3 	bl	8005520 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	691b      	ldr	r3, [r3, #16]
 80045c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045c4:	2b40      	cmp	r3, #64	; 0x40
 80045c6:	d10e      	bne.n	80045e6 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	68db      	ldr	r3, [r3, #12]
 80045ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045d2:	2b40      	cmp	r3, #64	; 0x40
 80045d4:	d107      	bne.n	80045e6 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80045de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80045e0:	6878      	ldr	r0, [r7, #4]
 80045e2:	f000 faa7 	bl	8004b34 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	691b      	ldr	r3, [r3, #16]
 80045ec:	f003 0320 	and.w	r3, r3, #32
 80045f0:	2b20      	cmp	r3, #32
 80045f2:	d10e      	bne.n	8004612 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	68db      	ldr	r3, [r3, #12]
 80045fa:	f003 0320 	and.w	r3, r3, #32
 80045fe:	2b20      	cmp	r3, #32
 8004600:	d107      	bne.n	8004612 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f06f 0220 	mvn.w	r2, #32
 800460a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800460c:	6878      	ldr	r0, [r7, #4]
 800460e:	f000 ff7d 	bl	800550c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004612:	bf00      	nop
 8004614:	3708      	adds	r7, #8
 8004616:	46bd      	mov	sp, r7
 8004618:	bd80      	pop	{r7, pc}
	...

0800461c <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800461c:	b580      	push	{r7, lr}
 800461e:	b084      	sub	sp, #16
 8004620:	af00      	add	r7, sp, #0
 8004622:	60f8      	str	r0, [r7, #12]
 8004624:	60b9      	str	r1, [r7, #8]
 8004626:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800462e:	2b01      	cmp	r3, #1
 8004630:	d101      	bne.n	8004636 <HAL_TIM_OC_ConfigChannel+0x1a>
 8004632:	2302      	movs	r3, #2
 8004634:	e046      	b.n	80046c4 <HAL_TIM_OC_ConfigChannel+0xa8>
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	2201      	movs	r2, #1
 800463a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	2b0c      	cmp	r3, #12
 8004642:	d839      	bhi.n	80046b8 <HAL_TIM_OC_ConfigChannel+0x9c>
 8004644:	a201      	add	r2, pc, #4	; (adr r2, 800464c <HAL_TIM_OC_ConfigChannel+0x30>)
 8004646:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800464a:	bf00      	nop
 800464c:	08004681 	.word	0x08004681
 8004650:	080046b9 	.word	0x080046b9
 8004654:	080046b9 	.word	0x080046b9
 8004658:	080046b9 	.word	0x080046b9
 800465c:	0800468f 	.word	0x0800468f
 8004660:	080046b9 	.word	0x080046b9
 8004664:	080046b9 	.word	0x080046b9
 8004668:	080046b9 	.word	0x080046b9
 800466c:	0800469d 	.word	0x0800469d
 8004670:	080046b9 	.word	0x080046b9
 8004674:	080046b9 	.word	0x080046b9
 8004678:	080046b9 	.word	0x080046b9
 800467c:	080046ab 	.word	0x080046ab
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	68b9      	ldr	r1, [r7, #8]
 8004686:	4618      	mov	r0, r3
 8004688:	f000 fafe 	bl	8004c88 <TIM_OC1_SetConfig>
      break;
 800468c:	e015      	b.n	80046ba <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	68b9      	ldr	r1, [r7, #8]
 8004694:	4618      	mov	r0, r3
 8004696:	f000 fb67 	bl	8004d68 <TIM_OC2_SetConfig>
      break;
 800469a:	e00e      	b.n	80046ba <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	68b9      	ldr	r1, [r7, #8]
 80046a2:	4618      	mov	r0, r3
 80046a4:	f000 fbd6 	bl	8004e54 <TIM_OC3_SetConfig>
      break;
 80046a8:	e007      	b.n	80046ba <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	68b9      	ldr	r1, [r7, #8]
 80046b0:	4618      	mov	r0, r3
 80046b2:	f000 fc43 	bl	8004f3c <TIM_OC4_SetConfig>
      break;
 80046b6:	e000      	b.n	80046ba <HAL_TIM_OC_ConfigChannel+0x9e>
    }

    default:
      break;
 80046b8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	2200      	movs	r2, #0
 80046be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80046c2:	2300      	movs	r3, #0
}
 80046c4:	4618      	mov	r0, r3
 80046c6:	3710      	adds	r7, #16
 80046c8:	46bd      	mov	sp, r7
 80046ca:	bd80      	pop	{r7, pc}

080046cc <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b084      	sub	sp, #16
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	60f8      	str	r0, [r7, #12]
 80046d4:	60b9      	str	r1, [r7, #8]
 80046d6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80046de:	2b01      	cmp	r3, #1
 80046e0:	d101      	bne.n	80046e6 <HAL_TIM_IC_ConfigChannel+0x1a>
 80046e2:	2302      	movs	r3, #2
 80046e4:	e082      	b.n	80047ec <HAL_TIM_IC_ConfigChannel+0x120>
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	2201      	movs	r2, #1
 80046ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d11b      	bne.n	800472c <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	6818      	ldr	r0, [r3, #0]
 80046f8:	68bb      	ldr	r3, [r7, #8]
 80046fa:	6819      	ldr	r1, [r3, #0]
 80046fc:	68bb      	ldr	r3, [r7, #8]
 80046fe:	685a      	ldr	r2, [r3, #4]
 8004700:	68bb      	ldr	r3, [r7, #8]
 8004702:	68db      	ldr	r3, [r3, #12]
 8004704:	f000 fc70 	bl	8004fe8 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	699a      	ldr	r2, [r3, #24]
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f022 020c 	bic.w	r2, r2, #12
 8004716:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	6999      	ldr	r1, [r3, #24]
 800471e:	68bb      	ldr	r3, [r7, #8]
 8004720:	689a      	ldr	r2, [r3, #8]
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	430a      	orrs	r2, r1
 8004728:	619a      	str	r2, [r3, #24]
 800472a:	e05a      	b.n	80047e2 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2b04      	cmp	r3, #4
 8004730:	d11c      	bne.n	800476c <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	6818      	ldr	r0, [r3, #0]
 8004736:	68bb      	ldr	r3, [r7, #8]
 8004738:	6819      	ldr	r1, [r3, #0]
 800473a:	68bb      	ldr	r3, [r7, #8]
 800473c:	685a      	ldr	r2, [r3, #4]
 800473e:	68bb      	ldr	r3, [r7, #8]
 8004740:	68db      	ldr	r3, [r3, #12]
 8004742:	f000 fcf4 	bl	800512e <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	699a      	ldr	r2, [r3, #24]
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004754:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	6999      	ldr	r1, [r3, #24]
 800475c:	68bb      	ldr	r3, [r7, #8]
 800475e:	689b      	ldr	r3, [r3, #8]
 8004760:	021a      	lsls	r2, r3, #8
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	430a      	orrs	r2, r1
 8004768:	619a      	str	r2, [r3, #24]
 800476a:	e03a      	b.n	80047e2 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2b08      	cmp	r3, #8
 8004770:	d11b      	bne.n	80047aa <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	6818      	ldr	r0, [r3, #0]
 8004776:	68bb      	ldr	r3, [r7, #8]
 8004778:	6819      	ldr	r1, [r3, #0]
 800477a:	68bb      	ldr	r3, [r7, #8]
 800477c:	685a      	ldr	r2, [r3, #4]
 800477e:	68bb      	ldr	r3, [r7, #8]
 8004780:	68db      	ldr	r3, [r3, #12]
 8004782:	f000 fd41 	bl	8005208 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	69da      	ldr	r2, [r3, #28]
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f022 020c 	bic.w	r2, r2, #12
 8004794:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	69d9      	ldr	r1, [r3, #28]
 800479c:	68bb      	ldr	r3, [r7, #8]
 800479e:	689a      	ldr	r2, [r3, #8]
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	430a      	orrs	r2, r1
 80047a6:	61da      	str	r2, [r3, #28]
 80047a8:	e01b      	b.n	80047e2 <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	6818      	ldr	r0, [r3, #0]
 80047ae:	68bb      	ldr	r3, [r7, #8]
 80047b0:	6819      	ldr	r1, [r3, #0]
 80047b2:	68bb      	ldr	r3, [r7, #8]
 80047b4:	685a      	ldr	r2, [r3, #4]
 80047b6:	68bb      	ldr	r3, [r7, #8]
 80047b8:	68db      	ldr	r3, [r3, #12]
 80047ba:	f000 fd61 	bl	8005280 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	69da      	ldr	r2, [r3, #28]
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80047cc:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	69d9      	ldr	r1, [r3, #28]
 80047d4:	68bb      	ldr	r3, [r7, #8]
 80047d6:	689b      	ldr	r3, [r3, #8]
 80047d8:	021a      	lsls	r2, r3, #8
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	430a      	orrs	r2, r1
 80047e0:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	2200      	movs	r2, #0
 80047e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80047ea:	2300      	movs	r3, #0
}
 80047ec:	4618      	mov	r0, r3
 80047ee:	3710      	adds	r7, #16
 80047f0:	46bd      	mov	sp, r7
 80047f2:	bd80      	pop	{r7, pc}

080047f4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80047f4:	b580      	push	{r7, lr}
 80047f6:	b084      	sub	sp, #16
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	60f8      	str	r0, [r7, #12]
 80047fc:	60b9      	str	r1, [r7, #8]
 80047fe:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004806:	2b01      	cmp	r3, #1
 8004808:	d101      	bne.n	800480e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800480a:	2302      	movs	r3, #2
 800480c:	e0ac      	b.n	8004968 <HAL_TIM_PWM_ConfigChannel+0x174>
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	2201      	movs	r2, #1
 8004812:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	2b0c      	cmp	r3, #12
 800481a:	f200 809f 	bhi.w	800495c <HAL_TIM_PWM_ConfigChannel+0x168>
 800481e:	a201      	add	r2, pc, #4	; (adr r2, 8004824 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8004820:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004824:	08004859 	.word	0x08004859
 8004828:	0800495d 	.word	0x0800495d
 800482c:	0800495d 	.word	0x0800495d
 8004830:	0800495d 	.word	0x0800495d
 8004834:	08004899 	.word	0x08004899
 8004838:	0800495d 	.word	0x0800495d
 800483c:	0800495d 	.word	0x0800495d
 8004840:	0800495d 	.word	0x0800495d
 8004844:	080048db 	.word	0x080048db
 8004848:	0800495d 	.word	0x0800495d
 800484c:	0800495d 	.word	0x0800495d
 8004850:	0800495d 	.word	0x0800495d
 8004854:	0800491b 	.word	0x0800491b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	68b9      	ldr	r1, [r7, #8]
 800485e:	4618      	mov	r0, r3
 8004860:	f000 fa12 	bl	8004c88 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	699a      	ldr	r2, [r3, #24]
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f042 0208 	orr.w	r2, r2, #8
 8004872:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	699a      	ldr	r2, [r3, #24]
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f022 0204 	bic.w	r2, r2, #4
 8004882:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	6999      	ldr	r1, [r3, #24]
 800488a:	68bb      	ldr	r3, [r7, #8]
 800488c:	691a      	ldr	r2, [r3, #16]
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	430a      	orrs	r2, r1
 8004894:	619a      	str	r2, [r3, #24]
      break;
 8004896:	e062      	b.n	800495e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	68b9      	ldr	r1, [r7, #8]
 800489e:	4618      	mov	r0, r3
 80048a0:	f000 fa62 	bl	8004d68 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	699a      	ldr	r2, [r3, #24]
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80048b2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	699a      	ldr	r2, [r3, #24]
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80048c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	6999      	ldr	r1, [r3, #24]
 80048ca:	68bb      	ldr	r3, [r7, #8]
 80048cc:	691b      	ldr	r3, [r3, #16]
 80048ce:	021a      	lsls	r2, r3, #8
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	430a      	orrs	r2, r1
 80048d6:	619a      	str	r2, [r3, #24]
      break;
 80048d8:	e041      	b.n	800495e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	68b9      	ldr	r1, [r7, #8]
 80048e0:	4618      	mov	r0, r3
 80048e2:	f000 fab7 	bl	8004e54 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	69da      	ldr	r2, [r3, #28]
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f042 0208 	orr.w	r2, r2, #8
 80048f4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	69da      	ldr	r2, [r3, #28]
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f022 0204 	bic.w	r2, r2, #4
 8004904:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	69d9      	ldr	r1, [r3, #28]
 800490c:	68bb      	ldr	r3, [r7, #8]
 800490e:	691a      	ldr	r2, [r3, #16]
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	430a      	orrs	r2, r1
 8004916:	61da      	str	r2, [r3, #28]
      break;
 8004918:	e021      	b.n	800495e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	68b9      	ldr	r1, [r7, #8]
 8004920:	4618      	mov	r0, r3
 8004922:	f000 fb0b 	bl	8004f3c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	69da      	ldr	r2, [r3, #28]
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004934:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	69da      	ldr	r2, [r3, #28]
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004944:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	69d9      	ldr	r1, [r3, #28]
 800494c:	68bb      	ldr	r3, [r7, #8]
 800494e:	691b      	ldr	r3, [r3, #16]
 8004950:	021a      	lsls	r2, r3, #8
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	430a      	orrs	r2, r1
 8004958:	61da      	str	r2, [r3, #28]
      break;
 800495a:	e000      	b.n	800495e <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 800495c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	2200      	movs	r2, #0
 8004962:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004966:	2300      	movs	r3, #0
}
 8004968:	4618      	mov	r0, r3
 800496a:	3710      	adds	r7, #16
 800496c:	46bd      	mov	sp, r7
 800496e:	bd80      	pop	{r7, pc}

08004970 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004970:	b580      	push	{r7, lr}
 8004972:	b084      	sub	sp, #16
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
 8004978:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004980:	2b01      	cmp	r3, #1
 8004982:	d101      	bne.n	8004988 <HAL_TIM_ConfigClockSource+0x18>
 8004984:	2302      	movs	r3, #2
 8004986:	e0b3      	b.n	8004af0 <HAL_TIM_ConfigClockSource+0x180>
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2201      	movs	r2, #1
 800498c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2202      	movs	r2, #2
 8004994:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	689b      	ldr	r3, [r3, #8]
 800499e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80049a6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80049ae:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	68fa      	ldr	r2, [r7, #12]
 80049b6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80049c0:	d03e      	beq.n	8004a40 <HAL_TIM_ConfigClockSource+0xd0>
 80049c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80049c6:	f200 8087 	bhi.w	8004ad8 <HAL_TIM_ConfigClockSource+0x168>
 80049ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049ce:	f000 8085 	beq.w	8004adc <HAL_TIM_ConfigClockSource+0x16c>
 80049d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049d6:	d87f      	bhi.n	8004ad8 <HAL_TIM_ConfigClockSource+0x168>
 80049d8:	2b70      	cmp	r3, #112	; 0x70
 80049da:	d01a      	beq.n	8004a12 <HAL_TIM_ConfigClockSource+0xa2>
 80049dc:	2b70      	cmp	r3, #112	; 0x70
 80049de:	d87b      	bhi.n	8004ad8 <HAL_TIM_ConfigClockSource+0x168>
 80049e0:	2b60      	cmp	r3, #96	; 0x60
 80049e2:	d050      	beq.n	8004a86 <HAL_TIM_ConfigClockSource+0x116>
 80049e4:	2b60      	cmp	r3, #96	; 0x60
 80049e6:	d877      	bhi.n	8004ad8 <HAL_TIM_ConfigClockSource+0x168>
 80049e8:	2b50      	cmp	r3, #80	; 0x50
 80049ea:	d03c      	beq.n	8004a66 <HAL_TIM_ConfigClockSource+0xf6>
 80049ec:	2b50      	cmp	r3, #80	; 0x50
 80049ee:	d873      	bhi.n	8004ad8 <HAL_TIM_ConfigClockSource+0x168>
 80049f0:	2b40      	cmp	r3, #64	; 0x40
 80049f2:	d058      	beq.n	8004aa6 <HAL_TIM_ConfigClockSource+0x136>
 80049f4:	2b40      	cmp	r3, #64	; 0x40
 80049f6:	d86f      	bhi.n	8004ad8 <HAL_TIM_ConfigClockSource+0x168>
 80049f8:	2b30      	cmp	r3, #48	; 0x30
 80049fa:	d064      	beq.n	8004ac6 <HAL_TIM_ConfigClockSource+0x156>
 80049fc:	2b30      	cmp	r3, #48	; 0x30
 80049fe:	d86b      	bhi.n	8004ad8 <HAL_TIM_ConfigClockSource+0x168>
 8004a00:	2b20      	cmp	r3, #32
 8004a02:	d060      	beq.n	8004ac6 <HAL_TIM_ConfigClockSource+0x156>
 8004a04:	2b20      	cmp	r3, #32
 8004a06:	d867      	bhi.n	8004ad8 <HAL_TIM_ConfigClockSource+0x168>
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d05c      	beq.n	8004ac6 <HAL_TIM_ConfigClockSource+0x156>
 8004a0c:	2b10      	cmp	r3, #16
 8004a0e:	d05a      	beq.n	8004ac6 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004a10:	e062      	b.n	8004ad8 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6818      	ldr	r0, [r3, #0]
 8004a16:	683b      	ldr	r3, [r7, #0]
 8004a18:	6899      	ldr	r1, [r3, #8]
 8004a1a:	683b      	ldr	r3, [r7, #0]
 8004a1c:	685a      	ldr	r2, [r3, #4]
 8004a1e:	683b      	ldr	r3, [r7, #0]
 8004a20:	68db      	ldr	r3, [r3, #12]
 8004a22:	f000 fc85 	bl	8005330 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	689b      	ldr	r3, [r3, #8]
 8004a2c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004a34:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	68fa      	ldr	r2, [r7, #12]
 8004a3c:	609a      	str	r2, [r3, #8]
      break;
 8004a3e:	e04e      	b.n	8004ade <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	6818      	ldr	r0, [r3, #0]
 8004a44:	683b      	ldr	r3, [r7, #0]
 8004a46:	6899      	ldr	r1, [r3, #8]
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	685a      	ldr	r2, [r3, #4]
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	68db      	ldr	r3, [r3, #12]
 8004a50:	f000 fc6e 	bl	8005330 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	689a      	ldr	r2, [r3, #8]
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004a62:	609a      	str	r2, [r3, #8]
      break;
 8004a64:	e03b      	b.n	8004ade <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6818      	ldr	r0, [r3, #0]
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	6859      	ldr	r1, [r3, #4]
 8004a6e:	683b      	ldr	r3, [r7, #0]
 8004a70:	68db      	ldr	r3, [r3, #12]
 8004a72:	461a      	mov	r2, r3
 8004a74:	f000 fb2c 	bl	80050d0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	2150      	movs	r1, #80	; 0x50
 8004a7e:	4618      	mov	r0, r3
 8004a80:	f000 fc3b 	bl	80052fa <TIM_ITRx_SetConfig>
      break;
 8004a84:	e02b      	b.n	8004ade <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6818      	ldr	r0, [r3, #0]
 8004a8a:	683b      	ldr	r3, [r7, #0]
 8004a8c:	6859      	ldr	r1, [r3, #4]
 8004a8e:	683b      	ldr	r3, [r7, #0]
 8004a90:	68db      	ldr	r3, [r3, #12]
 8004a92:	461a      	mov	r2, r3
 8004a94:	f000 fb88 	bl	80051a8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	2160      	movs	r1, #96	; 0x60
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	f000 fc2b 	bl	80052fa <TIM_ITRx_SetConfig>
      break;
 8004aa4:	e01b      	b.n	8004ade <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6818      	ldr	r0, [r3, #0]
 8004aaa:	683b      	ldr	r3, [r7, #0]
 8004aac:	6859      	ldr	r1, [r3, #4]
 8004aae:	683b      	ldr	r3, [r7, #0]
 8004ab0:	68db      	ldr	r3, [r3, #12]
 8004ab2:	461a      	mov	r2, r3
 8004ab4:	f000 fb0c 	bl	80050d0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	2140      	movs	r1, #64	; 0x40
 8004abe:	4618      	mov	r0, r3
 8004ac0:	f000 fc1b 	bl	80052fa <TIM_ITRx_SetConfig>
      break;
 8004ac4:	e00b      	b.n	8004ade <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681a      	ldr	r2, [r3, #0]
 8004aca:	683b      	ldr	r3, [r7, #0]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	4619      	mov	r1, r3
 8004ad0:	4610      	mov	r0, r2
 8004ad2:	f000 fc12 	bl	80052fa <TIM_ITRx_SetConfig>
        break;
 8004ad6:	e002      	b.n	8004ade <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004ad8:	bf00      	nop
 8004ada:	e000      	b.n	8004ade <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004adc:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	2201      	movs	r2, #1
 8004ae2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	2200      	movs	r2, #0
 8004aea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004aee:	2300      	movs	r3, #0
}
 8004af0:	4618      	mov	r0, r3
 8004af2:	3710      	adds	r7, #16
 8004af4:	46bd      	mov	sp, r7
 8004af6:	bd80      	pop	{r7, pc}

08004af8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004af8:	b480      	push	{r7}
 8004afa:	b083      	sub	sp, #12
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004b00:	bf00      	nop
 8004b02:	370c      	adds	r7, #12
 8004b04:	46bd      	mov	sp, r7
 8004b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0a:	4770      	bx	lr

08004b0c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004b0c:	b480      	push	{r7}
 8004b0e:	b083      	sub	sp, #12
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004b14:	bf00      	nop
 8004b16:	370c      	adds	r7, #12
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1e:	4770      	bx	lr

08004b20 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004b20:	b480      	push	{r7}
 8004b22:	b083      	sub	sp, #12
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004b28:	bf00      	nop
 8004b2a:	370c      	adds	r7, #12
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b32:	4770      	bx	lr

08004b34 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004b34:	b480      	push	{r7}
 8004b36:	b083      	sub	sp, #12
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004b3c:	bf00      	nop
 8004b3e:	370c      	adds	r7, #12
 8004b40:	46bd      	mov	sp, r7
 8004b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b46:	4770      	bx	lr

08004b48 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004b48:	b480      	push	{r7}
 8004b4a:	b085      	sub	sp, #20
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
 8004b50:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	4a40      	ldr	r2, [pc, #256]	; (8004c5c <TIM_Base_SetConfig+0x114>)
 8004b5c:	4293      	cmp	r3, r2
 8004b5e:	d013      	beq.n	8004b88 <TIM_Base_SetConfig+0x40>
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b66:	d00f      	beq.n	8004b88 <TIM_Base_SetConfig+0x40>
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	4a3d      	ldr	r2, [pc, #244]	; (8004c60 <TIM_Base_SetConfig+0x118>)
 8004b6c:	4293      	cmp	r3, r2
 8004b6e:	d00b      	beq.n	8004b88 <TIM_Base_SetConfig+0x40>
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	4a3c      	ldr	r2, [pc, #240]	; (8004c64 <TIM_Base_SetConfig+0x11c>)
 8004b74:	4293      	cmp	r3, r2
 8004b76:	d007      	beq.n	8004b88 <TIM_Base_SetConfig+0x40>
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	4a3b      	ldr	r2, [pc, #236]	; (8004c68 <TIM_Base_SetConfig+0x120>)
 8004b7c:	4293      	cmp	r3, r2
 8004b7e:	d003      	beq.n	8004b88 <TIM_Base_SetConfig+0x40>
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	4a3a      	ldr	r2, [pc, #232]	; (8004c6c <TIM_Base_SetConfig+0x124>)
 8004b84:	4293      	cmp	r3, r2
 8004b86:	d108      	bne.n	8004b9a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b8e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	685b      	ldr	r3, [r3, #4]
 8004b94:	68fa      	ldr	r2, [r7, #12]
 8004b96:	4313      	orrs	r3, r2
 8004b98:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	4a2f      	ldr	r2, [pc, #188]	; (8004c5c <TIM_Base_SetConfig+0x114>)
 8004b9e:	4293      	cmp	r3, r2
 8004ba0:	d02b      	beq.n	8004bfa <TIM_Base_SetConfig+0xb2>
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ba8:	d027      	beq.n	8004bfa <TIM_Base_SetConfig+0xb2>
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	4a2c      	ldr	r2, [pc, #176]	; (8004c60 <TIM_Base_SetConfig+0x118>)
 8004bae:	4293      	cmp	r3, r2
 8004bb0:	d023      	beq.n	8004bfa <TIM_Base_SetConfig+0xb2>
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	4a2b      	ldr	r2, [pc, #172]	; (8004c64 <TIM_Base_SetConfig+0x11c>)
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	d01f      	beq.n	8004bfa <TIM_Base_SetConfig+0xb2>
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	4a2a      	ldr	r2, [pc, #168]	; (8004c68 <TIM_Base_SetConfig+0x120>)
 8004bbe:	4293      	cmp	r3, r2
 8004bc0:	d01b      	beq.n	8004bfa <TIM_Base_SetConfig+0xb2>
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	4a29      	ldr	r2, [pc, #164]	; (8004c6c <TIM_Base_SetConfig+0x124>)
 8004bc6:	4293      	cmp	r3, r2
 8004bc8:	d017      	beq.n	8004bfa <TIM_Base_SetConfig+0xb2>
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	4a28      	ldr	r2, [pc, #160]	; (8004c70 <TIM_Base_SetConfig+0x128>)
 8004bce:	4293      	cmp	r3, r2
 8004bd0:	d013      	beq.n	8004bfa <TIM_Base_SetConfig+0xb2>
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	4a27      	ldr	r2, [pc, #156]	; (8004c74 <TIM_Base_SetConfig+0x12c>)
 8004bd6:	4293      	cmp	r3, r2
 8004bd8:	d00f      	beq.n	8004bfa <TIM_Base_SetConfig+0xb2>
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	4a26      	ldr	r2, [pc, #152]	; (8004c78 <TIM_Base_SetConfig+0x130>)
 8004bde:	4293      	cmp	r3, r2
 8004be0:	d00b      	beq.n	8004bfa <TIM_Base_SetConfig+0xb2>
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	4a25      	ldr	r2, [pc, #148]	; (8004c7c <TIM_Base_SetConfig+0x134>)
 8004be6:	4293      	cmp	r3, r2
 8004be8:	d007      	beq.n	8004bfa <TIM_Base_SetConfig+0xb2>
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	4a24      	ldr	r2, [pc, #144]	; (8004c80 <TIM_Base_SetConfig+0x138>)
 8004bee:	4293      	cmp	r3, r2
 8004bf0:	d003      	beq.n	8004bfa <TIM_Base_SetConfig+0xb2>
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	4a23      	ldr	r2, [pc, #140]	; (8004c84 <TIM_Base_SetConfig+0x13c>)
 8004bf6:	4293      	cmp	r3, r2
 8004bf8:	d108      	bne.n	8004c0c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c00:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	68db      	ldr	r3, [r3, #12]
 8004c06:	68fa      	ldr	r2, [r7, #12]
 8004c08:	4313      	orrs	r3, r2
 8004c0a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	695b      	ldr	r3, [r3, #20]
 8004c16:	4313      	orrs	r3, r2
 8004c18:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	68fa      	ldr	r2, [r7, #12]
 8004c1e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	689a      	ldr	r2, [r3, #8]
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	681a      	ldr	r2, [r3, #0]
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	4a0a      	ldr	r2, [pc, #40]	; (8004c5c <TIM_Base_SetConfig+0x114>)
 8004c34:	4293      	cmp	r3, r2
 8004c36:	d003      	beq.n	8004c40 <TIM_Base_SetConfig+0xf8>
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	4a0c      	ldr	r2, [pc, #48]	; (8004c6c <TIM_Base_SetConfig+0x124>)
 8004c3c:	4293      	cmp	r3, r2
 8004c3e:	d103      	bne.n	8004c48 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	691a      	ldr	r2, [r3, #16]
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2201      	movs	r2, #1
 8004c4c:	615a      	str	r2, [r3, #20]
}
 8004c4e:	bf00      	nop
 8004c50:	3714      	adds	r7, #20
 8004c52:	46bd      	mov	sp, r7
 8004c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c58:	4770      	bx	lr
 8004c5a:	bf00      	nop
 8004c5c:	40010000 	.word	0x40010000
 8004c60:	40000400 	.word	0x40000400
 8004c64:	40000800 	.word	0x40000800
 8004c68:	40000c00 	.word	0x40000c00
 8004c6c:	40010400 	.word	0x40010400
 8004c70:	40014000 	.word	0x40014000
 8004c74:	40014400 	.word	0x40014400
 8004c78:	40014800 	.word	0x40014800
 8004c7c:	40001800 	.word	0x40001800
 8004c80:	40001c00 	.word	0x40001c00
 8004c84:	40002000 	.word	0x40002000

08004c88 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004c88:	b480      	push	{r7}
 8004c8a:	b087      	sub	sp, #28
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
 8004c90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6a1b      	ldr	r3, [r3, #32]
 8004c96:	f023 0201 	bic.w	r2, r3, #1
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6a1b      	ldr	r3, [r3, #32]
 8004ca2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	685b      	ldr	r3, [r3, #4]
 8004ca8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	699b      	ldr	r3, [r3, #24]
 8004cae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cb6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	f023 0303 	bic.w	r3, r3, #3
 8004cbe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004cc0:	683b      	ldr	r3, [r7, #0]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	68fa      	ldr	r2, [r7, #12]
 8004cc6:	4313      	orrs	r3, r2
 8004cc8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004cca:	697b      	ldr	r3, [r7, #20]
 8004ccc:	f023 0302 	bic.w	r3, r3, #2
 8004cd0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004cd2:	683b      	ldr	r3, [r7, #0]
 8004cd4:	689b      	ldr	r3, [r3, #8]
 8004cd6:	697a      	ldr	r2, [r7, #20]
 8004cd8:	4313      	orrs	r3, r2
 8004cda:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	4a20      	ldr	r2, [pc, #128]	; (8004d60 <TIM_OC1_SetConfig+0xd8>)
 8004ce0:	4293      	cmp	r3, r2
 8004ce2:	d003      	beq.n	8004cec <TIM_OC1_SetConfig+0x64>
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	4a1f      	ldr	r2, [pc, #124]	; (8004d64 <TIM_OC1_SetConfig+0xdc>)
 8004ce8:	4293      	cmp	r3, r2
 8004cea:	d10c      	bne.n	8004d06 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004cec:	697b      	ldr	r3, [r7, #20]
 8004cee:	f023 0308 	bic.w	r3, r3, #8
 8004cf2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	68db      	ldr	r3, [r3, #12]
 8004cf8:	697a      	ldr	r2, [r7, #20]
 8004cfa:	4313      	orrs	r3, r2
 8004cfc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004cfe:	697b      	ldr	r3, [r7, #20]
 8004d00:	f023 0304 	bic.w	r3, r3, #4
 8004d04:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	4a15      	ldr	r2, [pc, #84]	; (8004d60 <TIM_OC1_SetConfig+0xd8>)
 8004d0a:	4293      	cmp	r3, r2
 8004d0c:	d003      	beq.n	8004d16 <TIM_OC1_SetConfig+0x8e>
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	4a14      	ldr	r2, [pc, #80]	; (8004d64 <TIM_OC1_SetConfig+0xdc>)
 8004d12:	4293      	cmp	r3, r2
 8004d14:	d111      	bne.n	8004d3a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004d16:	693b      	ldr	r3, [r7, #16]
 8004d18:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004d1c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004d1e:	693b      	ldr	r3, [r7, #16]
 8004d20:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004d24:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004d26:	683b      	ldr	r3, [r7, #0]
 8004d28:	695b      	ldr	r3, [r3, #20]
 8004d2a:	693a      	ldr	r2, [r7, #16]
 8004d2c:	4313      	orrs	r3, r2
 8004d2e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	699b      	ldr	r3, [r3, #24]
 8004d34:	693a      	ldr	r2, [r7, #16]
 8004d36:	4313      	orrs	r3, r2
 8004d38:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	693a      	ldr	r2, [r7, #16]
 8004d3e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	68fa      	ldr	r2, [r7, #12]
 8004d44:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004d46:	683b      	ldr	r3, [r7, #0]
 8004d48:	685a      	ldr	r2, [r3, #4]
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	697a      	ldr	r2, [r7, #20]
 8004d52:	621a      	str	r2, [r3, #32]
}
 8004d54:	bf00      	nop
 8004d56:	371c      	adds	r7, #28
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5e:	4770      	bx	lr
 8004d60:	40010000 	.word	0x40010000
 8004d64:	40010400 	.word	0x40010400

08004d68 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004d68:	b480      	push	{r7}
 8004d6a:	b087      	sub	sp, #28
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]
 8004d70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6a1b      	ldr	r3, [r3, #32]
 8004d76:	f023 0210 	bic.w	r2, r3, #16
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	6a1b      	ldr	r3, [r3, #32]
 8004d82:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	685b      	ldr	r3, [r3, #4]
 8004d88:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	699b      	ldr	r3, [r3, #24]
 8004d8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d9e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	021b      	lsls	r3, r3, #8
 8004da6:	68fa      	ldr	r2, [r7, #12]
 8004da8:	4313      	orrs	r3, r2
 8004daa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004dac:	697b      	ldr	r3, [r7, #20]
 8004dae:	f023 0320 	bic.w	r3, r3, #32
 8004db2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	689b      	ldr	r3, [r3, #8]
 8004db8:	011b      	lsls	r3, r3, #4
 8004dba:	697a      	ldr	r2, [r7, #20]
 8004dbc:	4313      	orrs	r3, r2
 8004dbe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	4a22      	ldr	r2, [pc, #136]	; (8004e4c <TIM_OC2_SetConfig+0xe4>)
 8004dc4:	4293      	cmp	r3, r2
 8004dc6:	d003      	beq.n	8004dd0 <TIM_OC2_SetConfig+0x68>
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	4a21      	ldr	r2, [pc, #132]	; (8004e50 <TIM_OC2_SetConfig+0xe8>)
 8004dcc:	4293      	cmp	r3, r2
 8004dce:	d10d      	bne.n	8004dec <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004dd0:	697b      	ldr	r3, [r7, #20]
 8004dd2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004dd6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	68db      	ldr	r3, [r3, #12]
 8004ddc:	011b      	lsls	r3, r3, #4
 8004dde:	697a      	ldr	r2, [r7, #20]
 8004de0:	4313      	orrs	r3, r2
 8004de2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004de4:	697b      	ldr	r3, [r7, #20]
 8004de6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004dea:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	4a17      	ldr	r2, [pc, #92]	; (8004e4c <TIM_OC2_SetConfig+0xe4>)
 8004df0:	4293      	cmp	r3, r2
 8004df2:	d003      	beq.n	8004dfc <TIM_OC2_SetConfig+0x94>
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	4a16      	ldr	r2, [pc, #88]	; (8004e50 <TIM_OC2_SetConfig+0xe8>)
 8004df8:	4293      	cmp	r3, r2
 8004dfa:	d113      	bne.n	8004e24 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004dfc:	693b      	ldr	r3, [r7, #16]
 8004dfe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004e02:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004e04:	693b      	ldr	r3, [r7, #16]
 8004e06:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004e0a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	695b      	ldr	r3, [r3, #20]
 8004e10:	009b      	lsls	r3, r3, #2
 8004e12:	693a      	ldr	r2, [r7, #16]
 8004e14:	4313      	orrs	r3, r2
 8004e16:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004e18:	683b      	ldr	r3, [r7, #0]
 8004e1a:	699b      	ldr	r3, [r3, #24]
 8004e1c:	009b      	lsls	r3, r3, #2
 8004e1e:	693a      	ldr	r2, [r7, #16]
 8004e20:	4313      	orrs	r3, r2
 8004e22:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	693a      	ldr	r2, [r7, #16]
 8004e28:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	68fa      	ldr	r2, [r7, #12]
 8004e2e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004e30:	683b      	ldr	r3, [r7, #0]
 8004e32:	685a      	ldr	r2, [r3, #4]
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	697a      	ldr	r2, [r7, #20]
 8004e3c:	621a      	str	r2, [r3, #32]
}
 8004e3e:	bf00      	nop
 8004e40:	371c      	adds	r7, #28
 8004e42:	46bd      	mov	sp, r7
 8004e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e48:	4770      	bx	lr
 8004e4a:	bf00      	nop
 8004e4c:	40010000 	.word	0x40010000
 8004e50:	40010400 	.word	0x40010400

08004e54 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004e54:	b480      	push	{r7}
 8004e56:	b087      	sub	sp, #28
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
 8004e5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6a1b      	ldr	r3, [r3, #32]
 8004e62:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	6a1b      	ldr	r3, [r3, #32]
 8004e6e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	685b      	ldr	r3, [r3, #4]
 8004e74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	69db      	ldr	r3, [r3, #28]
 8004e7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	f023 0303 	bic.w	r3, r3, #3
 8004e8a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	68fa      	ldr	r2, [r7, #12]
 8004e92:	4313      	orrs	r3, r2
 8004e94:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004e96:	697b      	ldr	r3, [r7, #20]
 8004e98:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004e9c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004e9e:	683b      	ldr	r3, [r7, #0]
 8004ea0:	689b      	ldr	r3, [r3, #8]
 8004ea2:	021b      	lsls	r3, r3, #8
 8004ea4:	697a      	ldr	r2, [r7, #20]
 8004ea6:	4313      	orrs	r3, r2
 8004ea8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	4a21      	ldr	r2, [pc, #132]	; (8004f34 <TIM_OC3_SetConfig+0xe0>)
 8004eae:	4293      	cmp	r3, r2
 8004eb0:	d003      	beq.n	8004eba <TIM_OC3_SetConfig+0x66>
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	4a20      	ldr	r2, [pc, #128]	; (8004f38 <TIM_OC3_SetConfig+0xe4>)
 8004eb6:	4293      	cmp	r3, r2
 8004eb8:	d10d      	bne.n	8004ed6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004eba:	697b      	ldr	r3, [r7, #20]
 8004ebc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004ec0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	68db      	ldr	r3, [r3, #12]
 8004ec6:	021b      	lsls	r3, r3, #8
 8004ec8:	697a      	ldr	r2, [r7, #20]
 8004eca:	4313      	orrs	r3, r2
 8004ecc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004ece:	697b      	ldr	r3, [r7, #20]
 8004ed0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004ed4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	4a16      	ldr	r2, [pc, #88]	; (8004f34 <TIM_OC3_SetConfig+0xe0>)
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d003      	beq.n	8004ee6 <TIM_OC3_SetConfig+0x92>
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	4a15      	ldr	r2, [pc, #84]	; (8004f38 <TIM_OC3_SetConfig+0xe4>)
 8004ee2:	4293      	cmp	r3, r2
 8004ee4:	d113      	bne.n	8004f0e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004ee6:	693b      	ldr	r3, [r7, #16]
 8004ee8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004eec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004eee:	693b      	ldr	r3, [r7, #16]
 8004ef0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004ef4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004ef6:	683b      	ldr	r3, [r7, #0]
 8004ef8:	695b      	ldr	r3, [r3, #20]
 8004efa:	011b      	lsls	r3, r3, #4
 8004efc:	693a      	ldr	r2, [r7, #16]
 8004efe:	4313      	orrs	r3, r2
 8004f00:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004f02:	683b      	ldr	r3, [r7, #0]
 8004f04:	699b      	ldr	r3, [r3, #24]
 8004f06:	011b      	lsls	r3, r3, #4
 8004f08:	693a      	ldr	r2, [r7, #16]
 8004f0a:	4313      	orrs	r3, r2
 8004f0c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	693a      	ldr	r2, [r7, #16]
 8004f12:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	68fa      	ldr	r2, [r7, #12]
 8004f18:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004f1a:	683b      	ldr	r3, [r7, #0]
 8004f1c:	685a      	ldr	r2, [r3, #4]
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	697a      	ldr	r2, [r7, #20]
 8004f26:	621a      	str	r2, [r3, #32]
}
 8004f28:	bf00      	nop
 8004f2a:	371c      	adds	r7, #28
 8004f2c:	46bd      	mov	sp, r7
 8004f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f32:	4770      	bx	lr
 8004f34:	40010000 	.word	0x40010000
 8004f38:	40010400 	.word	0x40010400

08004f3c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004f3c:	b480      	push	{r7}
 8004f3e:	b087      	sub	sp, #28
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	6078      	str	r0, [r7, #4]
 8004f44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6a1b      	ldr	r3, [r3, #32]
 8004f4a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	6a1b      	ldr	r3, [r3, #32]
 8004f56:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	685b      	ldr	r3, [r3, #4]
 8004f5c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	69db      	ldr	r3, [r3, #28]
 8004f62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f72:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	021b      	lsls	r3, r3, #8
 8004f7a:	68fa      	ldr	r2, [r7, #12]
 8004f7c:	4313      	orrs	r3, r2
 8004f7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004f80:	693b      	ldr	r3, [r7, #16]
 8004f82:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004f86:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	689b      	ldr	r3, [r3, #8]
 8004f8c:	031b      	lsls	r3, r3, #12
 8004f8e:	693a      	ldr	r2, [r7, #16]
 8004f90:	4313      	orrs	r3, r2
 8004f92:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	4a12      	ldr	r2, [pc, #72]	; (8004fe0 <TIM_OC4_SetConfig+0xa4>)
 8004f98:	4293      	cmp	r3, r2
 8004f9a:	d003      	beq.n	8004fa4 <TIM_OC4_SetConfig+0x68>
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	4a11      	ldr	r2, [pc, #68]	; (8004fe4 <TIM_OC4_SetConfig+0xa8>)
 8004fa0:	4293      	cmp	r3, r2
 8004fa2:	d109      	bne.n	8004fb8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004fa4:	697b      	ldr	r3, [r7, #20]
 8004fa6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004faa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	695b      	ldr	r3, [r3, #20]
 8004fb0:	019b      	lsls	r3, r3, #6
 8004fb2:	697a      	ldr	r2, [r7, #20]
 8004fb4:	4313      	orrs	r3, r2
 8004fb6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	697a      	ldr	r2, [r7, #20]
 8004fbc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	68fa      	ldr	r2, [r7, #12]
 8004fc2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004fc4:	683b      	ldr	r3, [r7, #0]
 8004fc6:	685a      	ldr	r2, [r3, #4]
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	693a      	ldr	r2, [r7, #16]
 8004fd0:	621a      	str	r2, [r3, #32]
}
 8004fd2:	bf00      	nop
 8004fd4:	371c      	adds	r7, #28
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fdc:	4770      	bx	lr
 8004fde:	bf00      	nop
 8004fe0:	40010000 	.word	0x40010000
 8004fe4:	40010400 	.word	0x40010400

08004fe8 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004fe8:	b480      	push	{r7}
 8004fea:	b087      	sub	sp, #28
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	60f8      	str	r0, [r7, #12]
 8004ff0:	60b9      	str	r1, [r7, #8]
 8004ff2:	607a      	str	r2, [r7, #4]
 8004ff4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	6a1b      	ldr	r3, [r3, #32]
 8004ffa:	f023 0201 	bic.w	r2, r3, #1
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	699b      	ldr	r3, [r3, #24]
 8005006:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	6a1b      	ldr	r3, [r3, #32]
 800500c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	4a28      	ldr	r2, [pc, #160]	; (80050b4 <TIM_TI1_SetConfig+0xcc>)
 8005012:	4293      	cmp	r3, r2
 8005014:	d01b      	beq.n	800504e <TIM_TI1_SetConfig+0x66>
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800501c:	d017      	beq.n	800504e <TIM_TI1_SetConfig+0x66>
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	4a25      	ldr	r2, [pc, #148]	; (80050b8 <TIM_TI1_SetConfig+0xd0>)
 8005022:	4293      	cmp	r3, r2
 8005024:	d013      	beq.n	800504e <TIM_TI1_SetConfig+0x66>
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	4a24      	ldr	r2, [pc, #144]	; (80050bc <TIM_TI1_SetConfig+0xd4>)
 800502a:	4293      	cmp	r3, r2
 800502c:	d00f      	beq.n	800504e <TIM_TI1_SetConfig+0x66>
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	4a23      	ldr	r2, [pc, #140]	; (80050c0 <TIM_TI1_SetConfig+0xd8>)
 8005032:	4293      	cmp	r3, r2
 8005034:	d00b      	beq.n	800504e <TIM_TI1_SetConfig+0x66>
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	4a22      	ldr	r2, [pc, #136]	; (80050c4 <TIM_TI1_SetConfig+0xdc>)
 800503a:	4293      	cmp	r3, r2
 800503c:	d007      	beq.n	800504e <TIM_TI1_SetConfig+0x66>
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	4a21      	ldr	r2, [pc, #132]	; (80050c8 <TIM_TI1_SetConfig+0xe0>)
 8005042:	4293      	cmp	r3, r2
 8005044:	d003      	beq.n	800504e <TIM_TI1_SetConfig+0x66>
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	4a20      	ldr	r2, [pc, #128]	; (80050cc <TIM_TI1_SetConfig+0xe4>)
 800504a:	4293      	cmp	r3, r2
 800504c:	d101      	bne.n	8005052 <TIM_TI1_SetConfig+0x6a>
 800504e:	2301      	movs	r3, #1
 8005050:	e000      	b.n	8005054 <TIM_TI1_SetConfig+0x6c>
 8005052:	2300      	movs	r3, #0
 8005054:	2b00      	cmp	r3, #0
 8005056:	d008      	beq.n	800506a <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005058:	697b      	ldr	r3, [r7, #20]
 800505a:	f023 0303 	bic.w	r3, r3, #3
 800505e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005060:	697a      	ldr	r2, [r7, #20]
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	4313      	orrs	r3, r2
 8005066:	617b      	str	r3, [r7, #20]
 8005068:	e003      	b.n	8005072 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800506a:	697b      	ldr	r3, [r7, #20]
 800506c:	f043 0301 	orr.w	r3, r3, #1
 8005070:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005072:	697b      	ldr	r3, [r7, #20]
 8005074:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005078:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800507a:	683b      	ldr	r3, [r7, #0]
 800507c:	011b      	lsls	r3, r3, #4
 800507e:	b2db      	uxtb	r3, r3
 8005080:	697a      	ldr	r2, [r7, #20]
 8005082:	4313      	orrs	r3, r2
 8005084:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005086:	693b      	ldr	r3, [r7, #16]
 8005088:	f023 030a 	bic.w	r3, r3, #10
 800508c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800508e:	68bb      	ldr	r3, [r7, #8]
 8005090:	f003 030a 	and.w	r3, r3, #10
 8005094:	693a      	ldr	r2, [r7, #16]
 8005096:	4313      	orrs	r3, r2
 8005098:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	697a      	ldr	r2, [r7, #20]
 800509e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	693a      	ldr	r2, [r7, #16]
 80050a4:	621a      	str	r2, [r3, #32]
}
 80050a6:	bf00      	nop
 80050a8:	371c      	adds	r7, #28
 80050aa:	46bd      	mov	sp, r7
 80050ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b0:	4770      	bx	lr
 80050b2:	bf00      	nop
 80050b4:	40010000 	.word	0x40010000
 80050b8:	40000400 	.word	0x40000400
 80050bc:	40000800 	.word	0x40000800
 80050c0:	40000c00 	.word	0x40000c00
 80050c4:	40010400 	.word	0x40010400
 80050c8:	40014000 	.word	0x40014000
 80050cc:	40001800 	.word	0x40001800

080050d0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80050d0:	b480      	push	{r7}
 80050d2:	b087      	sub	sp, #28
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	60f8      	str	r0, [r7, #12]
 80050d8:	60b9      	str	r1, [r7, #8]
 80050da:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	6a1b      	ldr	r3, [r3, #32]
 80050e0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	6a1b      	ldr	r3, [r3, #32]
 80050e6:	f023 0201 	bic.w	r2, r3, #1
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	699b      	ldr	r3, [r3, #24]
 80050f2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80050f4:	693b      	ldr	r3, [r7, #16]
 80050f6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80050fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	011b      	lsls	r3, r3, #4
 8005100:	693a      	ldr	r2, [r7, #16]
 8005102:	4313      	orrs	r3, r2
 8005104:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005106:	697b      	ldr	r3, [r7, #20]
 8005108:	f023 030a 	bic.w	r3, r3, #10
 800510c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800510e:	697a      	ldr	r2, [r7, #20]
 8005110:	68bb      	ldr	r3, [r7, #8]
 8005112:	4313      	orrs	r3, r2
 8005114:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	693a      	ldr	r2, [r7, #16]
 800511a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	697a      	ldr	r2, [r7, #20]
 8005120:	621a      	str	r2, [r3, #32]
}
 8005122:	bf00      	nop
 8005124:	371c      	adds	r7, #28
 8005126:	46bd      	mov	sp, r7
 8005128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512c:	4770      	bx	lr

0800512e <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800512e:	b480      	push	{r7}
 8005130:	b087      	sub	sp, #28
 8005132:	af00      	add	r7, sp, #0
 8005134:	60f8      	str	r0, [r7, #12]
 8005136:	60b9      	str	r1, [r7, #8]
 8005138:	607a      	str	r2, [r7, #4]
 800513a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	6a1b      	ldr	r3, [r3, #32]
 8005140:	f023 0210 	bic.w	r2, r3, #16
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	699b      	ldr	r3, [r3, #24]
 800514c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	6a1b      	ldr	r3, [r3, #32]
 8005152:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8005154:	697b      	ldr	r3, [r7, #20]
 8005156:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800515a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	021b      	lsls	r3, r3, #8
 8005160:	697a      	ldr	r2, [r7, #20]
 8005162:	4313      	orrs	r3, r2
 8005164:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005166:	697b      	ldr	r3, [r7, #20]
 8005168:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800516c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800516e:	683b      	ldr	r3, [r7, #0]
 8005170:	031b      	lsls	r3, r3, #12
 8005172:	b29b      	uxth	r3, r3
 8005174:	697a      	ldr	r2, [r7, #20]
 8005176:	4313      	orrs	r3, r2
 8005178:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800517a:	693b      	ldr	r3, [r7, #16]
 800517c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005180:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8005182:	68bb      	ldr	r3, [r7, #8]
 8005184:	011b      	lsls	r3, r3, #4
 8005186:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800518a:	693a      	ldr	r2, [r7, #16]
 800518c:	4313      	orrs	r3, r2
 800518e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	697a      	ldr	r2, [r7, #20]
 8005194:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	693a      	ldr	r2, [r7, #16]
 800519a:	621a      	str	r2, [r3, #32]
}
 800519c:	bf00      	nop
 800519e:	371c      	adds	r7, #28
 80051a0:	46bd      	mov	sp, r7
 80051a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a6:	4770      	bx	lr

080051a8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80051a8:	b480      	push	{r7}
 80051aa:	b087      	sub	sp, #28
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	60f8      	str	r0, [r7, #12]
 80051b0:	60b9      	str	r1, [r7, #8]
 80051b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	6a1b      	ldr	r3, [r3, #32]
 80051b8:	f023 0210 	bic.w	r2, r3, #16
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	699b      	ldr	r3, [r3, #24]
 80051c4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	6a1b      	ldr	r3, [r3, #32]
 80051ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80051cc:	697b      	ldr	r3, [r7, #20]
 80051ce:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80051d2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	031b      	lsls	r3, r3, #12
 80051d8:	697a      	ldr	r2, [r7, #20]
 80051da:	4313      	orrs	r3, r2
 80051dc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80051de:	693b      	ldr	r3, [r7, #16]
 80051e0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80051e4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80051e6:	68bb      	ldr	r3, [r7, #8]
 80051e8:	011b      	lsls	r3, r3, #4
 80051ea:	693a      	ldr	r2, [r7, #16]
 80051ec:	4313      	orrs	r3, r2
 80051ee:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	697a      	ldr	r2, [r7, #20]
 80051f4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	693a      	ldr	r2, [r7, #16]
 80051fa:	621a      	str	r2, [r3, #32]
}
 80051fc:	bf00      	nop
 80051fe:	371c      	adds	r7, #28
 8005200:	46bd      	mov	sp, r7
 8005202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005206:	4770      	bx	lr

08005208 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005208:	b480      	push	{r7}
 800520a:	b087      	sub	sp, #28
 800520c:	af00      	add	r7, sp, #0
 800520e:	60f8      	str	r0, [r7, #12]
 8005210:	60b9      	str	r1, [r7, #8]
 8005212:	607a      	str	r2, [r7, #4]
 8005214:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	6a1b      	ldr	r3, [r3, #32]
 800521a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	69db      	ldr	r3, [r3, #28]
 8005226:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	6a1b      	ldr	r3, [r3, #32]
 800522c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800522e:	697b      	ldr	r3, [r7, #20]
 8005230:	f023 0303 	bic.w	r3, r3, #3
 8005234:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8005236:	697a      	ldr	r2, [r7, #20]
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	4313      	orrs	r3, r2
 800523c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800523e:	697b      	ldr	r3, [r7, #20]
 8005240:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005244:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8005246:	683b      	ldr	r3, [r7, #0]
 8005248:	011b      	lsls	r3, r3, #4
 800524a:	b2db      	uxtb	r3, r3
 800524c:	697a      	ldr	r2, [r7, #20]
 800524e:	4313      	orrs	r3, r2
 8005250:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8005252:	693b      	ldr	r3, [r7, #16]
 8005254:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8005258:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800525a:	68bb      	ldr	r3, [r7, #8]
 800525c:	021b      	lsls	r3, r3, #8
 800525e:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8005262:	693a      	ldr	r2, [r7, #16]
 8005264:	4313      	orrs	r3, r2
 8005266:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	697a      	ldr	r2, [r7, #20]
 800526c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	693a      	ldr	r2, [r7, #16]
 8005272:	621a      	str	r2, [r3, #32]
}
 8005274:	bf00      	nop
 8005276:	371c      	adds	r7, #28
 8005278:	46bd      	mov	sp, r7
 800527a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527e:	4770      	bx	lr

08005280 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005280:	b480      	push	{r7}
 8005282:	b087      	sub	sp, #28
 8005284:	af00      	add	r7, sp, #0
 8005286:	60f8      	str	r0, [r7, #12]
 8005288:	60b9      	str	r1, [r7, #8]
 800528a:	607a      	str	r2, [r7, #4]
 800528c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	6a1b      	ldr	r3, [r3, #32]
 8005292:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	69db      	ldr	r3, [r3, #28]
 800529e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	6a1b      	ldr	r3, [r3, #32]
 80052a4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80052a6:	697b      	ldr	r3, [r7, #20]
 80052a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80052ac:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	021b      	lsls	r3, r3, #8
 80052b2:	697a      	ldr	r2, [r7, #20]
 80052b4:	4313      	orrs	r3, r2
 80052b6:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80052b8:	697b      	ldr	r3, [r7, #20]
 80052ba:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80052be:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80052c0:	683b      	ldr	r3, [r7, #0]
 80052c2:	031b      	lsls	r3, r3, #12
 80052c4:	b29b      	uxth	r3, r3
 80052c6:	697a      	ldr	r2, [r7, #20]
 80052c8:	4313      	orrs	r3, r2
 80052ca:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80052cc:	693b      	ldr	r3, [r7, #16]
 80052ce:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80052d2:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80052d4:	68bb      	ldr	r3, [r7, #8]
 80052d6:	031b      	lsls	r3, r3, #12
 80052d8:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80052dc:	693a      	ldr	r2, [r7, #16]
 80052de:	4313      	orrs	r3, r2
 80052e0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	697a      	ldr	r2, [r7, #20]
 80052e6:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	693a      	ldr	r2, [r7, #16]
 80052ec:	621a      	str	r2, [r3, #32]
}
 80052ee:	bf00      	nop
 80052f0:	371c      	adds	r7, #28
 80052f2:	46bd      	mov	sp, r7
 80052f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f8:	4770      	bx	lr

080052fa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80052fa:	b480      	push	{r7}
 80052fc:	b085      	sub	sp, #20
 80052fe:	af00      	add	r7, sp, #0
 8005300:	6078      	str	r0, [r7, #4]
 8005302:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	689b      	ldr	r3, [r3, #8]
 8005308:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005310:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005312:	683a      	ldr	r2, [r7, #0]
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	4313      	orrs	r3, r2
 8005318:	f043 0307 	orr.w	r3, r3, #7
 800531c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	68fa      	ldr	r2, [r7, #12]
 8005322:	609a      	str	r2, [r3, #8]
}
 8005324:	bf00      	nop
 8005326:	3714      	adds	r7, #20
 8005328:	46bd      	mov	sp, r7
 800532a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532e:	4770      	bx	lr

08005330 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005330:	b480      	push	{r7}
 8005332:	b087      	sub	sp, #28
 8005334:	af00      	add	r7, sp, #0
 8005336:	60f8      	str	r0, [r7, #12]
 8005338:	60b9      	str	r1, [r7, #8]
 800533a:	607a      	str	r2, [r7, #4]
 800533c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	689b      	ldr	r3, [r3, #8]
 8005342:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005344:	697b      	ldr	r3, [r7, #20]
 8005346:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800534a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800534c:	683b      	ldr	r3, [r7, #0]
 800534e:	021a      	lsls	r2, r3, #8
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	431a      	orrs	r2, r3
 8005354:	68bb      	ldr	r3, [r7, #8]
 8005356:	4313      	orrs	r3, r2
 8005358:	697a      	ldr	r2, [r7, #20]
 800535a:	4313      	orrs	r3, r2
 800535c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	697a      	ldr	r2, [r7, #20]
 8005362:	609a      	str	r2, [r3, #8]
}
 8005364:	bf00      	nop
 8005366:	371c      	adds	r7, #28
 8005368:	46bd      	mov	sp, r7
 800536a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536e:	4770      	bx	lr

08005370 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005370:	b480      	push	{r7}
 8005372:	b085      	sub	sp, #20
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]
 8005378:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005380:	2b01      	cmp	r3, #1
 8005382:	d101      	bne.n	8005388 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005384:	2302      	movs	r3, #2
 8005386:	e05a      	b.n	800543e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2201      	movs	r2, #1
 800538c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2202      	movs	r2, #2
 8005394:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	685b      	ldr	r3, [r3, #4]
 800539e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	689b      	ldr	r3, [r3, #8]
 80053a6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053ae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80053b0:	683b      	ldr	r3, [r7, #0]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	68fa      	ldr	r2, [r7, #12]
 80053b6:	4313      	orrs	r3, r2
 80053b8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	68fa      	ldr	r2, [r7, #12]
 80053c0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	4a21      	ldr	r2, [pc, #132]	; (800544c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80053c8:	4293      	cmp	r3, r2
 80053ca:	d022      	beq.n	8005412 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053d4:	d01d      	beq.n	8005412 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	4a1d      	ldr	r2, [pc, #116]	; (8005450 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80053dc:	4293      	cmp	r3, r2
 80053de:	d018      	beq.n	8005412 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	4a1b      	ldr	r2, [pc, #108]	; (8005454 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80053e6:	4293      	cmp	r3, r2
 80053e8:	d013      	beq.n	8005412 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	4a1a      	ldr	r2, [pc, #104]	; (8005458 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80053f0:	4293      	cmp	r3, r2
 80053f2:	d00e      	beq.n	8005412 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	4a18      	ldr	r2, [pc, #96]	; (800545c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80053fa:	4293      	cmp	r3, r2
 80053fc:	d009      	beq.n	8005412 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	4a17      	ldr	r2, [pc, #92]	; (8005460 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005404:	4293      	cmp	r3, r2
 8005406:	d004      	beq.n	8005412 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	4a15      	ldr	r2, [pc, #84]	; (8005464 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800540e:	4293      	cmp	r3, r2
 8005410:	d10c      	bne.n	800542c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005412:	68bb      	ldr	r3, [r7, #8]
 8005414:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005418:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800541a:	683b      	ldr	r3, [r7, #0]
 800541c:	685b      	ldr	r3, [r3, #4]
 800541e:	68ba      	ldr	r2, [r7, #8]
 8005420:	4313      	orrs	r3, r2
 8005422:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	68ba      	ldr	r2, [r7, #8]
 800542a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2201      	movs	r2, #1
 8005430:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2200      	movs	r2, #0
 8005438:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800543c:	2300      	movs	r3, #0
}
 800543e:	4618      	mov	r0, r3
 8005440:	3714      	adds	r7, #20
 8005442:	46bd      	mov	sp, r7
 8005444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005448:	4770      	bx	lr
 800544a:	bf00      	nop
 800544c:	40010000 	.word	0x40010000
 8005450:	40000400 	.word	0x40000400
 8005454:	40000800 	.word	0x40000800
 8005458:	40000c00 	.word	0x40000c00
 800545c:	40010400 	.word	0x40010400
 8005460:	40014000 	.word	0x40014000
 8005464:	40001800 	.word	0x40001800

08005468 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005468:	b480      	push	{r7}
 800546a:	b085      	sub	sp, #20
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]
 8005470:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005472:	2300      	movs	r3, #0
 8005474:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800547c:	2b01      	cmp	r3, #1
 800547e:	d101      	bne.n	8005484 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005480:	2302      	movs	r3, #2
 8005482:	e03d      	b.n	8005500 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2201      	movs	r2, #1
 8005488:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005492:	683b      	ldr	r3, [r7, #0]
 8005494:	68db      	ldr	r3, [r3, #12]
 8005496:	4313      	orrs	r3, r2
 8005498:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80054a0:	683b      	ldr	r3, [r7, #0]
 80054a2:	689b      	ldr	r3, [r3, #8]
 80054a4:	4313      	orrs	r3, r2
 80054a6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80054ae:	683b      	ldr	r3, [r7, #0]
 80054b0:	685b      	ldr	r3, [r3, #4]
 80054b2:	4313      	orrs	r3, r2
 80054b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80054bc:	683b      	ldr	r3, [r7, #0]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	4313      	orrs	r3, r2
 80054c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80054ca:	683b      	ldr	r3, [r7, #0]
 80054cc:	691b      	ldr	r3, [r3, #16]
 80054ce:	4313      	orrs	r3, r2
 80054d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80054d8:	683b      	ldr	r3, [r7, #0]
 80054da:	695b      	ldr	r3, [r3, #20]
 80054dc:	4313      	orrs	r3, r2
 80054de:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80054e6:	683b      	ldr	r3, [r7, #0]
 80054e8:	69db      	ldr	r3, [r3, #28]
 80054ea:	4313      	orrs	r3, r2
 80054ec:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	68fa      	ldr	r2, [r7, #12]
 80054f4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	2200      	movs	r2, #0
 80054fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80054fe:	2300      	movs	r3, #0
}
 8005500:	4618      	mov	r0, r3
 8005502:	3714      	adds	r7, #20
 8005504:	46bd      	mov	sp, r7
 8005506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550a:	4770      	bx	lr

0800550c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800550c:	b480      	push	{r7}
 800550e:	b083      	sub	sp, #12
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005514:	bf00      	nop
 8005516:	370c      	adds	r7, #12
 8005518:	46bd      	mov	sp, r7
 800551a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551e:	4770      	bx	lr

08005520 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005520:	b480      	push	{r7}
 8005522:	b083      	sub	sp, #12
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005528:	bf00      	nop
 800552a:	370c      	adds	r7, #12
 800552c:	46bd      	mov	sp, r7
 800552e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005532:	4770      	bx	lr

08005534 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005534:	b580      	push	{r7, lr}
 8005536:	b082      	sub	sp, #8
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2b00      	cmp	r3, #0
 8005540:	d101      	bne.n	8005546 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005542:	2301      	movs	r3, #1
 8005544:	e03f      	b.n	80055c6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800554c:	b2db      	uxtb	r3, r3
 800554e:	2b00      	cmp	r3, #0
 8005550:	d106      	bne.n	8005560 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	2200      	movs	r2, #0
 8005556:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800555a:	6878      	ldr	r0, [r7, #4]
 800555c:	f7fc f9e6 	bl	800192c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2224      	movs	r2, #36	; 0x24
 8005564:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	68da      	ldr	r2, [r3, #12]
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005576:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005578:	6878      	ldr	r0, [r7, #4]
 800557a:	f000 f905 	bl	8005788 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	691a      	ldr	r2, [r3, #16]
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800558c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	695a      	ldr	r2, [r3, #20]
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800559c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	68da      	ldr	r2, [r3, #12]
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80055ac:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	2200      	movs	r2, #0
 80055b2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2220      	movs	r2, #32
 80055b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2220      	movs	r2, #32
 80055c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80055c4:	2300      	movs	r3, #0
}
 80055c6:	4618      	mov	r0, r3
 80055c8:	3708      	adds	r7, #8
 80055ca:	46bd      	mov	sp, r7
 80055cc:	bd80      	pop	{r7, pc}

080055ce <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80055ce:	b580      	push	{r7, lr}
 80055d0:	b08a      	sub	sp, #40	; 0x28
 80055d2:	af02      	add	r7, sp, #8
 80055d4:	60f8      	str	r0, [r7, #12]
 80055d6:	60b9      	str	r1, [r7, #8]
 80055d8:	603b      	str	r3, [r7, #0]
 80055da:	4613      	mov	r3, r2
 80055dc:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80055de:	2300      	movs	r3, #0
 80055e0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055e8:	b2db      	uxtb	r3, r3
 80055ea:	2b20      	cmp	r3, #32
 80055ec:	d17c      	bne.n	80056e8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80055ee:	68bb      	ldr	r3, [r7, #8]
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d002      	beq.n	80055fa <HAL_UART_Transmit+0x2c>
 80055f4:	88fb      	ldrh	r3, [r7, #6]
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d101      	bne.n	80055fe <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80055fa:	2301      	movs	r3, #1
 80055fc:	e075      	b.n	80056ea <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005604:	2b01      	cmp	r3, #1
 8005606:	d101      	bne.n	800560c <HAL_UART_Transmit+0x3e>
 8005608:	2302      	movs	r3, #2
 800560a:	e06e      	b.n	80056ea <HAL_UART_Transmit+0x11c>
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	2201      	movs	r2, #1
 8005610:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	2200      	movs	r2, #0
 8005618:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	2221      	movs	r2, #33	; 0x21
 800561e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005622:	f7fc fc57 	bl	8001ed4 <HAL_GetTick>
 8005626:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	88fa      	ldrh	r2, [r7, #6]
 800562c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	88fa      	ldrh	r2, [r7, #6]
 8005632:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	689b      	ldr	r3, [r3, #8]
 8005638:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800563c:	d108      	bne.n	8005650 <HAL_UART_Transmit+0x82>
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	691b      	ldr	r3, [r3, #16]
 8005642:	2b00      	cmp	r3, #0
 8005644:	d104      	bne.n	8005650 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005646:	2300      	movs	r3, #0
 8005648:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800564a:	68bb      	ldr	r3, [r7, #8]
 800564c:	61bb      	str	r3, [r7, #24]
 800564e:	e003      	b.n	8005658 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005650:	68bb      	ldr	r3, [r7, #8]
 8005652:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005654:	2300      	movs	r3, #0
 8005656:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	2200      	movs	r2, #0
 800565c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005660:	e02a      	b.n	80056b8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005662:	683b      	ldr	r3, [r7, #0]
 8005664:	9300      	str	r3, [sp, #0]
 8005666:	697b      	ldr	r3, [r7, #20]
 8005668:	2200      	movs	r2, #0
 800566a:	2180      	movs	r1, #128	; 0x80
 800566c:	68f8      	ldr	r0, [r7, #12]
 800566e:	f000 f840 	bl	80056f2 <UART_WaitOnFlagUntilTimeout>
 8005672:	4603      	mov	r3, r0
 8005674:	2b00      	cmp	r3, #0
 8005676:	d001      	beq.n	800567c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005678:	2303      	movs	r3, #3
 800567a:	e036      	b.n	80056ea <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800567c:	69fb      	ldr	r3, [r7, #28]
 800567e:	2b00      	cmp	r3, #0
 8005680:	d10b      	bne.n	800569a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005682:	69bb      	ldr	r3, [r7, #24]
 8005684:	881b      	ldrh	r3, [r3, #0]
 8005686:	461a      	mov	r2, r3
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005690:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005692:	69bb      	ldr	r3, [r7, #24]
 8005694:	3302      	adds	r3, #2
 8005696:	61bb      	str	r3, [r7, #24]
 8005698:	e007      	b.n	80056aa <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800569a:	69fb      	ldr	r3, [r7, #28]
 800569c:	781a      	ldrb	r2, [r3, #0]
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80056a4:	69fb      	ldr	r3, [r7, #28]
 80056a6:	3301      	adds	r3, #1
 80056a8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80056ae:	b29b      	uxth	r3, r3
 80056b0:	3b01      	subs	r3, #1
 80056b2:	b29a      	uxth	r2, r3
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80056bc:	b29b      	uxth	r3, r3
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d1cf      	bne.n	8005662 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80056c2:	683b      	ldr	r3, [r7, #0]
 80056c4:	9300      	str	r3, [sp, #0]
 80056c6:	697b      	ldr	r3, [r7, #20]
 80056c8:	2200      	movs	r2, #0
 80056ca:	2140      	movs	r1, #64	; 0x40
 80056cc:	68f8      	ldr	r0, [r7, #12]
 80056ce:	f000 f810 	bl	80056f2 <UART_WaitOnFlagUntilTimeout>
 80056d2:	4603      	mov	r3, r0
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d001      	beq.n	80056dc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80056d8:	2303      	movs	r3, #3
 80056da:	e006      	b.n	80056ea <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	2220      	movs	r2, #32
 80056e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80056e4:	2300      	movs	r3, #0
 80056e6:	e000      	b.n	80056ea <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80056e8:	2302      	movs	r3, #2
  }
}
 80056ea:	4618      	mov	r0, r3
 80056ec:	3720      	adds	r7, #32
 80056ee:	46bd      	mov	sp, r7
 80056f0:	bd80      	pop	{r7, pc}

080056f2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80056f2:	b580      	push	{r7, lr}
 80056f4:	b084      	sub	sp, #16
 80056f6:	af00      	add	r7, sp, #0
 80056f8:	60f8      	str	r0, [r7, #12]
 80056fa:	60b9      	str	r1, [r7, #8]
 80056fc:	603b      	str	r3, [r7, #0]
 80056fe:	4613      	mov	r3, r2
 8005700:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005702:	e02c      	b.n	800575e <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005704:	69bb      	ldr	r3, [r7, #24]
 8005706:	f1b3 3fff 	cmp.w	r3, #4294967295
 800570a:	d028      	beq.n	800575e <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800570c:	69bb      	ldr	r3, [r7, #24]
 800570e:	2b00      	cmp	r3, #0
 8005710:	d007      	beq.n	8005722 <UART_WaitOnFlagUntilTimeout+0x30>
 8005712:	f7fc fbdf 	bl	8001ed4 <HAL_GetTick>
 8005716:	4602      	mov	r2, r0
 8005718:	683b      	ldr	r3, [r7, #0]
 800571a:	1ad3      	subs	r3, r2, r3
 800571c:	69ba      	ldr	r2, [r7, #24]
 800571e:	429a      	cmp	r2, r3
 8005720:	d21d      	bcs.n	800575e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	68da      	ldr	r2, [r3, #12]
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005730:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	695a      	ldr	r2, [r3, #20]
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f022 0201 	bic.w	r2, r2, #1
 8005740:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	2220      	movs	r2, #32
 8005746:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	2220      	movs	r2, #32
 800574e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	2200      	movs	r2, #0
 8005756:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800575a:	2303      	movs	r3, #3
 800575c:	e00f      	b.n	800577e <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	681a      	ldr	r2, [r3, #0]
 8005764:	68bb      	ldr	r3, [r7, #8]
 8005766:	4013      	ands	r3, r2
 8005768:	68ba      	ldr	r2, [r7, #8]
 800576a:	429a      	cmp	r2, r3
 800576c:	bf0c      	ite	eq
 800576e:	2301      	moveq	r3, #1
 8005770:	2300      	movne	r3, #0
 8005772:	b2db      	uxtb	r3, r3
 8005774:	461a      	mov	r2, r3
 8005776:	79fb      	ldrb	r3, [r7, #7]
 8005778:	429a      	cmp	r2, r3
 800577a:	d0c3      	beq.n	8005704 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800577c:	2300      	movs	r3, #0
}
 800577e:	4618      	mov	r0, r3
 8005780:	3710      	adds	r7, #16
 8005782:	46bd      	mov	sp, r7
 8005784:	bd80      	pop	{r7, pc}
	...

08005788 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005788:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800578c:	b09f      	sub	sp, #124	; 0x7c
 800578e:	af00      	add	r7, sp, #0
 8005790:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005792:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	691b      	ldr	r3, [r3, #16]
 8005798:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800579c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800579e:	68d9      	ldr	r1, [r3, #12]
 80057a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80057a2:	681a      	ldr	r2, [r3, #0]
 80057a4:	ea40 0301 	orr.w	r3, r0, r1
 80057a8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80057aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80057ac:	689a      	ldr	r2, [r3, #8]
 80057ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80057b0:	691b      	ldr	r3, [r3, #16]
 80057b2:	431a      	orrs	r2, r3
 80057b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80057b6:	695b      	ldr	r3, [r3, #20]
 80057b8:	431a      	orrs	r2, r3
 80057ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80057bc:	69db      	ldr	r3, [r3, #28]
 80057be:	4313      	orrs	r3, r2
 80057c0:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80057c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	68db      	ldr	r3, [r3, #12]
 80057c8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80057cc:	f021 010c 	bic.w	r1, r1, #12
 80057d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80057d2:	681a      	ldr	r2, [r3, #0]
 80057d4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80057d6:	430b      	orrs	r3, r1
 80057d8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80057da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	695b      	ldr	r3, [r3, #20]
 80057e0:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80057e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80057e6:	6999      	ldr	r1, [r3, #24]
 80057e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80057ea:	681a      	ldr	r2, [r3, #0]
 80057ec:	ea40 0301 	orr.w	r3, r0, r1
 80057f0:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80057f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80057f4:	681a      	ldr	r2, [r3, #0]
 80057f6:	4bc5      	ldr	r3, [pc, #788]	; (8005b0c <UART_SetConfig+0x384>)
 80057f8:	429a      	cmp	r2, r3
 80057fa:	d004      	beq.n	8005806 <UART_SetConfig+0x7e>
 80057fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80057fe:	681a      	ldr	r2, [r3, #0]
 8005800:	4bc3      	ldr	r3, [pc, #780]	; (8005b10 <UART_SetConfig+0x388>)
 8005802:	429a      	cmp	r2, r3
 8005804:	d103      	bne.n	800580e <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005806:	f7fd fddf 	bl	80033c8 <HAL_RCC_GetPCLK2Freq>
 800580a:	6778      	str	r0, [r7, #116]	; 0x74
 800580c:	e002      	b.n	8005814 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800580e:	f7fd fdc7 	bl	80033a0 <HAL_RCC_GetPCLK1Freq>
 8005812:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005814:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005816:	69db      	ldr	r3, [r3, #28]
 8005818:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800581c:	f040 80b6 	bne.w	800598c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005820:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005822:	461c      	mov	r4, r3
 8005824:	f04f 0500 	mov.w	r5, #0
 8005828:	4622      	mov	r2, r4
 800582a:	462b      	mov	r3, r5
 800582c:	1891      	adds	r1, r2, r2
 800582e:	6439      	str	r1, [r7, #64]	; 0x40
 8005830:	415b      	adcs	r3, r3
 8005832:	647b      	str	r3, [r7, #68]	; 0x44
 8005834:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005838:	1912      	adds	r2, r2, r4
 800583a:	eb45 0303 	adc.w	r3, r5, r3
 800583e:	f04f 0000 	mov.w	r0, #0
 8005842:	f04f 0100 	mov.w	r1, #0
 8005846:	00d9      	lsls	r1, r3, #3
 8005848:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800584c:	00d0      	lsls	r0, r2, #3
 800584e:	4602      	mov	r2, r0
 8005850:	460b      	mov	r3, r1
 8005852:	1911      	adds	r1, r2, r4
 8005854:	6639      	str	r1, [r7, #96]	; 0x60
 8005856:	416b      	adcs	r3, r5
 8005858:	667b      	str	r3, [r7, #100]	; 0x64
 800585a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800585c:	685b      	ldr	r3, [r3, #4]
 800585e:	461a      	mov	r2, r3
 8005860:	f04f 0300 	mov.w	r3, #0
 8005864:	1891      	adds	r1, r2, r2
 8005866:	63b9      	str	r1, [r7, #56]	; 0x38
 8005868:	415b      	adcs	r3, r3
 800586a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800586c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005870:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8005874:	f7fa fcfc 	bl	8000270 <__aeabi_uldivmod>
 8005878:	4602      	mov	r2, r0
 800587a:	460b      	mov	r3, r1
 800587c:	4ba5      	ldr	r3, [pc, #660]	; (8005b14 <UART_SetConfig+0x38c>)
 800587e:	fba3 2302 	umull	r2, r3, r3, r2
 8005882:	095b      	lsrs	r3, r3, #5
 8005884:	011e      	lsls	r6, r3, #4
 8005886:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005888:	461c      	mov	r4, r3
 800588a:	f04f 0500 	mov.w	r5, #0
 800588e:	4622      	mov	r2, r4
 8005890:	462b      	mov	r3, r5
 8005892:	1891      	adds	r1, r2, r2
 8005894:	6339      	str	r1, [r7, #48]	; 0x30
 8005896:	415b      	adcs	r3, r3
 8005898:	637b      	str	r3, [r7, #52]	; 0x34
 800589a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800589e:	1912      	adds	r2, r2, r4
 80058a0:	eb45 0303 	adc.w	r3, r5, r3
 80058a4:	f04f 0000 	mov.w	r0, #0
 80058a8:	f04f 0100 	mov.w	r1, #0
 80058ac:	00d9      	lsls	r1, r3, #3
 80058ae:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80058b2:	00d0      	lsls	r0, r2, #3
 80058b4:	4602      	mov	r2, r0
 80058b6:	460b      	mov	r3, r1
 80058b8:	1911      	adds	r1, r2, r4
 80058ba:	65b9      	str	r1, [r7, #88]	; 0x58
 80058bc:	416b      	adcs	r3, r5
 80058be:	65fb      	str	r3, [r7, #92]	; 0x5c
 80058c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058c2:	685b      	ldr	r3, [r3, #4]
 80058c4:	461a      	mov	r2, r3
 80058c6:	f04f 0300 	mov.w	r3, #0
 80058ca:	1891      	adds	r1, r2, r2
 80058cc:	62b9      	str	r1, [r7, #40]	; 0x28
 80058ce:	415b      	adcs	r3, r3
 80058d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80058d2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80058d6:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80058da:	f7fa fcc9 	bl	8000270 <__aeabi_uldivmod>
 80058de:	4602      	mov	r2, r0
 80058e0:	460b      	mov	r3, r1
 80058e2:	4b8c      	ldr	r3, [pc, #560]	; (8005b14 <UART_SetConfig+0x38c>)
 80058e4:	fba3 1302 	umull	r1, r3, r3, r2
 80058e8:	095b      	lsrs	r3, r3, #5
 80058ea:	2164      	movs	r1, #100	; 0x64
 80058ec:	fb01 f303 	mul.w	r3, r1, r3
 80058f0:	1ad3      	subs	r3, r2, r3
 80058f2:	00db      	lsls	r3, r3, #3
 80058f4:	3332      	adds	r3, #50	; 0x32
 80058f6:	4a87      	ldr	r2, [pc, #540]	; (8005b14 <UART_SetConfig+0x38c>)
 80058f8:	fba2 2303 	umull	r2, r3, r2, r3
 80058fc:	095b      	lsrs	r3, r3, #5
 80058fe:	005b      	lsls	r3, r3, #1
 8005900:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005904:	441e      	add	r6, r3
 8005906:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005908:	4618      	mov	r0, r3
 800590a:	f04f 0100 	mov.w	r1, #0
 800590e:	4602      	mov	r2, r0
 8005910:	460b      	mov	r3, r1
 8005912:	1894      	adds	r4, r2, r2
 8005914:	623c      	str	r4, [r7, #32]
 8005916:	415b      	adcs	r3, r3
 8005918:	627b      	str	r3, [r7, #36]	; 0x24
 800591a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800591e:	1812      	adds	r2, r2, r0
 8005920:	eb41 0303 	adc.w	r3, r1, r3
 8005924:	f04f 0400 	mov.w	r4, #0
 8005928:	f04f 0500 	mov.w	r5, #0
 800592c:	00dd      	lsls	r5, r3, #3
 800592e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005932:	00d4      	lsls	r4, r2, #3
 8005934:	4622      	mov	r2, r4
 8005936:	462b      	mov	r3, r5
 8005938:	1814      	adds	r4, r2, r0
 800593a:	653c      	str	r4, [r7, #80]	; 0x50
 800593c:	414b      	adcs	r3, r1
 800593e:	657b      	str	r3, [r7, #84]	; 0x54
 8005940:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005942:	685b      	ldr	r3, [r3, #4]
 8005944:	461a      	mov	r2, r3
 8005946:	f04f 0300 	mov.w	r3, #0
 800594a:	1891      	adds	r1, r2, r2
 800594c:	61b9      	str	r1, [r7, #24]
 800594e:	415b      	adcs	r3, r3
 8005950:	61fb      	str	r3, [r7, #28]
 8005952:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005956:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800595a:	f7fa fc89 	bl	8000270 <__aeabi_uldivmod>
 800595e:	4602      	mov	r2, r0
 8005960:	460b      	mov	r3, r1
 8005962:	4b6c      	ldr	r3, [pc, #432]	; (8005b14 <UART_SetConfig+0x38c>)
 8005964:	fba3 1302 	umull	r1, r3, r3, r2
 8005968:	095b      	lsrs	r3, r3, #5
 800596a:	2164      	movs	r1, #100	; 0x64
 800596c:	fb01 f303 	mul.w	r3, r1, r3
 8005970:	1ad3      	subs	r3, r2, r3
 8005972:	00db      	lsls	r3, r3, #3
 8005974:	3332      	adds	r3, #50	; 0x32
 8005976:	4a67      	ldr	r2, [pc, #412]	; (8005b14 <UART_SetConfig+0x38c>)
 8005978:	fba2 2303 	umull	r2, r3, r2, r3
 800597c:	095b      	lsrs	r3, r3, #5
 800597e:	f003 0207 	and.w	r2, r3, #7
 8005982:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	4432      	add	r2, r6
 8005988:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800598a:	e0b9      	b.n	8005b00 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800598c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800598e:	461c      	mov	r4, r3
 8005990:	f04f 0500 	mov.w	r5, #0
 8005994:	4622      	mov	r2, r4
 8005996:	462b      	mov	r3, r5
 8005998:	1891      	adds	r1, r2, r2
 800599a:	6139      	str	r1, [r7, #16]
 800599c:	415b      	adcs	r3, r3
 800599e:	617b      	str	r3, [r7, #20]
 80059a0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80059a4:	1912      	adds	r2, r2, r4
 80059a6:	eb45 0303 	adc.w	r3, r5, r3
 80059aa:	f04f 0000 	mov.w	r0, #0
 80059ae:	f04f 0100 	mov.w	r1, #0
 80059b2:	00d9      	lsls	r1, r3, #3
 80059b4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80059b8:	00d0      	lsls	r0, r2, #3
 80059ba:	4602      	mov	r2, r0
 80059bc:	460b      	mov	r3, r1
 80059be:	eb12 0804 	adds.w	r8, r2, r4
 80059c2:	eb43 0905 	adc.w	r9, r3, r5
 80059c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80059c8:	685b      	ldr	r3, [r3, #4]
 80059ca:	4618      	mov	r0, r3
 80059cc:	f04f 0100 	mov.w	r1, #0
 80059d0:	f04f 0200 	mov.w	r2, #0
 80059d4:	f04f 0300 	mov.w	r3, #0
 80059d8:	008b      	lsls	r3, r1, #2
 80059da:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80059de:	0082      	lsls	r2, r0, #2
 80059e0:	4640      	mov	r0, r8
 80059e2:	4649      	mov	r1, r9
 80059e4:	f7fa fc44 	bl	8000270 <__aeabi_uldivmod>
 80059e8:	4602      	mov	r2, r0
 80059ea:	460b      	mov	r3, r1
 80059ec:	4b49      	ldr	r3, [pc, #292]	; (8005b14 <UART_SetConfig+0x38c>)
 80059ee:	fba3 2302 	umull	r2, r3, r3, r2
 80059f2:	095b      	lsrs	r3, r3, #5
 80059f4:	011e      	lsls	r6, r3, #4
 80059f6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80059f8:	4618      	mov	r0, r3
 80059fa:	f04f 0100 	mov.w	r1, #0
 80059fe:	4602      	mov	r2, r0
 8005a00:	460b      	mov	r3, r1
 8005a02:	1894      	adds	r4, r2, r2
 8005a04:	60bc      	str	r4, [r7, #8]
 8005a06:	415b      	adcs	r3, r3
 8005a08:	60fb      	str	r3, [r7, #12]
 8005a0a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005a0e:	1812      	adds	r2, r2, r0
 8005a10:	eb41 0303 	adc.w	r3, r1, r3
 8005a14:	f04f 0400 	mov.w	r4, #0
 8005a18:	f04f 0500 	mov.w	r5, #0
 8005a1c:	00dd      	lsls	r5, r3, #3
 8005a1e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005a22:	00d4      	lsls	r4, r2, #3
 8005a24:	4622      	mov	r2, r4
 8005a26:	462b      	mov	r3, r5
 8005a28:	1814      	adds	r4, r2, r0
 8005a2a:	64bc      	str	r4, [r7, #72]	; 0x48
 8005a2c:	414b      	adcs	r3, r1
 8005a2e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005a30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a32:	685b      	ldr	r3, [r3, #4]
 8005a34:	4618      	mov	r0, r3
 8005a36:	f04f 0100 	mov.w	r1, #0
 8005a3a:	f04f 0200 	mov.w	r2, #0
 8005a3e:	f04f 0300 	mov.w	r3, #0
 8005a42:	008b      	lsls	r3, r1, #2
 8005a44:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005a48:	0082      	lsls	r2, r0, #2
 8005a4a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8005a4e:	f7fa fc0f 	bl	8000270 <__aeabi_uldivmod>
 8005a52:	4602      	mov	r2, r0
 8005a54:	460b      	mov	r3, r1
 8005a56:	4b2f      	ldr	r3, [pc, #188]	; (8005b14 <UART_SetConfig+0x38c>)
 8005a58:	fba3 1302 	umull	r1, r3, r3, r2
 8005a5c:	095b      	lsrs	r3, r3, #5
 8005a5e:	2164      	movs	r1, #100	; 0x64
 8005a60:	fb01 f303 	mul.w	r3, r1, r3
 8005a64:	1ad3      	subs	r3, r2, r3
 8005a66:	011b      	lsls	r3, r3, #4
 8005a68:	3332      	adds	r3, #50	; 0x32
 8005a6a:	4a2a      	ldr	r2, [pc, #168]	; (8005b14 <UART_SetConfig+0x38c>)
 8005a6c:	fba2 2303 	umull	r2, r3, r2, r3
 8005a70:	095b      	lsrs	r3, r3, #5
 8005a72:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005a76:	441e      	add	r6, r3
 8005a78:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	f04f 0100 	mov.w	r1, #0
 8005a80:	4602      	mov	r2, r0
 8005a82:	460b      	mov	r3, r1
 8005a84:	1894      	adds	r4, r2, r2
 8005a86:	603c      	str	r4, [r7, #0]
 8005a88:	415b      	adcs	r3, r3
 8005a8a:	607b      	str	r3, [r7, #4]
 8005a8c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005a90:	1812      	adds	r2, r2, r0
 8005a92:	eb41 0303 	adc.w	r3, r1, r3
 8005a96:	f04f 0400 	mov.w	r4, #0
 8005a9a:	f04f 0500 	mov.w	r5, #0
 8005a9e:	00dd      	lsls	r5, r3, #3
 8005aa0:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005aa4:	00d4      	lsls	r4, r2, #3
 8005aa6:	4622      	mov	r2, r4
 8005aa8:	462b      	mov	r3, r5
 8005aaa:	eb12 0a00 	adds.w	sl, r2, r0
 8005aae:	eb43 0b01 	adc.w	fp, r3, r1
 8005ab2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ab4:	685b      	ldr	r3, [r3, #4]
 8005ab6:	4618      	mov	r0, r3
 8005ab8:	f04f 0100 	mov.w	r1, #0
 8005abc:	f04f 0200 	mov.w	r2, #0
 8005ac0:	f04f 0300 	mov.w	r3, #0
 8005ac4:	008b      	lsls	r3, r1, #2
 8005ac6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005aca:	0082      	lsls	r2, r0, #2
 8005acc:	4650      	mov	r0, sl
 8005ace:	4659      	mov	r1, fp
 8005ad0:	f7fa fbce 	bl	8000270 <__aeabi_uldivmod>
 8005ad4:	4602      	mov	r2, r0
 8005ad6:	460b      	mov	r3, r1
 8005ad8:	4b0e      	ldr	r3, [pc, #56]	; (8005b14 <UART_SetConfig+0x38c>)
 8005ada:	fba3 1302 	umull	r1, r3, r3, r2
 8005ade:	095b      	lsrs	r3, r3, #5
 8005ae0:	2164      	movs	r1, #100	; 0x64
 8005ae2:	fb01 f303 	mul.w	r3, r1, r3
 8005ae6:	1ad3      	subs	r3, r2, r3
 8005ae8:	011b      	lsls	r3, r3, #4
 8005aea:	3332      	adds	r3, #50	; 0x32
 8005aec:	4a09      	ldr	r2, [pc, #36]	; (8005b14 <UART_SetConfig+0x38c>)
 8005aee:	fba2 2303 	umull	r2, r3, r2, r3
 8005af2:	095b      	lsrs	r3, r3, #5
 8005af4:	f003 020f 	and.w	r2, r3, #15
 8005af8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	4432      	add	r2, r6
 8005afe:	609a      	str	r2, [r3, #8]
}
 8005b00:	bf00      	nop
 8005b02:	377c      	adds	r7, #124	; 0x7c
 8005b04:	46bd      	mov	sp, r7
 8005b06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b0a:	bf00      	nop
 8005b0c:	40011000 	.word	0x40011000
 8005b10:	40011400 	.word	0x40011400
 8005b14:	51eb851f 	.word	0x51eb851f

08005b18 <__NVIC_SetPriority>:
{
 8005b18:	b480      	push	{r7}
 8005b1a:	b083      	sub	sp, #12
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	4603      	mov	r3, r0
 8005b20:	6039      	str	r1, [r7, #0]
 8005b22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005b24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	db0a      	blt.n	8005b42 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005b2c:	683b      	ldr	r3, [r7, #0]
 8005b2e:	b2da      	uxtb	r2, r3
 8005b30:	490c      	ldr	r1, [pc, #48]	; (8005b64 <__NVIC_SetPriority+0x4c>)
 8005b32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b36:	0112      	lsls	r2, r2, #4
 8005b38:	b2d2      	uxtb	r2, r2
 8005b3a:	440b      	add	r3, r1
 8005b3c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8005b40:	e00a      	b.n	8005b58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005b42:	683b      	ldr	r3, [r7, #0]
 8005b44:	b2da      	uxtb	r2, r3
 8005b46:	4908      	ldr	r1, [pc, #32]	; (8005b68 <__NVIC_SetPriority+0x50>)
 8005b48:	79fb      	ldrb	r3, [r7, #7]
 8005b4a:	f003 030f 	and.w	r3, r3, #15
 8005b4e:	3b04      	subs	r3, #4
 8005b50:	0112      	lsls	r2, r2, #4
 8005b52:	b2d2      	uxtb	r2, r2
 8005b54:	440b      	add	r3, r1
 8005b56:	761a      	strb	r2, [r3, #24]
}
 8005b58:	bf00      	nop
 8005b5a:	370c      	adds	r7, #12
 8005b5c:	46bd      	mov	sp, r7
 8005b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b62:	4770      	bx	lr
 8005b64:	e000e100 	.word	0xe000e100
 8005b68:	e000ed00 	.word	0xe000ed00

08005b6c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8005b6c:	b580      	push	{r7, lr}
 8005b6e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8005b70:	4b05      	ldr	r3, [pc, #20]	; (8005b88 <SysTick_Handler+0x1c>)
 8005b72:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8005b74:	f001 fcfe 	bl	8007574 <xTaskGetSchedulerState>
 8005b78:	4603      	mov	r3, r0
 8005b7a:	2b01      	cmp	r3, #1
 8005b7c:	d001      	beq.n	8005b82 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8005b7e:	f002 fae3 	bl	8008148 <xPortSysTickHandler>
  }
}
 8005b82:	bf00      	nop
 8005b84:	bd80      	pop	{r7, pc}
 8005b86:	bf00      	nop
 8005b88:	e000e010 	.word	0xe000e010

08005b8c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005b8c:	b580      	push	{r7, lr}
 8005b8e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8005b90:	2100      	movs	r1, #0
 8005b92:	f06f 0004 	mvn.w	r0, #4
 8005b96:	f7ff ffbf 	bl	8005b18 <__NVIC_SetPriority>
#endif
}
 8005b9a:	bf00      	nop
 8005b9c:	bd80      	pop	{r7, pc}
	...

08005ba0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005ba0:	b480      	push	{r7}
 8005ba2:	b083      	sub	sp, #12
 8005ba4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005ba6:	f3ef 8305 	mrs	r3, IPSR
 8005baa:	603b      	str	r3, [r7, #0]
  return(result);
 8005bac:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d003      	beq.n	8005bba <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8005bb2:	f06f 0305 	mvn.w	r3, #5
 8005bb6:	607b      	str	r3, [r7, #4]
 8005bb8:	e00c      	b.n	8005bd4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005bba:	4b0a      	ldr	r3, [pc, #40]	; (8005be4 <osKernelInitialize+0x44>)
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d105      	bne.n	8005bce <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8005bc2:	4b08      	ldr	r3, [pc, #32]	; (8005be4 <osKernelInitialize+0x44>)
 8005bc4:	2201      	movs	r2, #1
 8005bc6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005bc8:	2300      	movs	r3, #0
 8005bca:	607b      	str	r3, [r7, #4]
 8005bcc:	e002      	b.n	8005bd4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8005bce:	f04f 33ff 	mov.w	r3, #4294967295
 8005bd2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005bd4:	687b      	ldr	r3, [r7, #4]
}
 8005bd6:	4618      	mov	r0, r3
 8005bd8:	370c      	adds	r7, #12
 8005bda:	46bd      	mov	sp, r7
 8005bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be0:	4770      	bx	lr
 8005be2:	bf00      	nop
 8005be4:	20000094 	.word	0x20000094

08005be8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005be8:	b580      	push	{r7, lr}
 8005bea:	b082      	sub	sp, #8
 8005bec:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005bee:	f3ef 8305 	mrs	r3, IPSR
 8005bf2:	603b      	str	r3, [r7, #0]
  return(result);
 8005bf4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d003      	beq.n	8005c02 <osKernelStart+0x1a>
    stat = osErrorISR;
 8005bfa:	f06f 0305 	mvn.w	r3, #5
 8005bfe:	607b      	str	r3, [r7, #4]
 8005c00:	e010      	b.n	8005c24 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8005c02:	4b0b      	ldr	r3, [pc, #44]	; (8005c30 <osKernelStart+0x48>)
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	2b01      	cmp	r3, #1
 8005c08:	d109      	bne.n	8005c1e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8005c0a:	f7ff ffbf 	bl	8005b8c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8005c0e:	4b08      	ldr	r3, [pc, #32]	; (8005c30 <osKernelStart+0x48>)
 8005c10:	2202      	movs	r2, #2
 8005c12:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005c14:	f001 f866 	bl	8006ce4 <vTaskStartScheduler>
      stat = osOK;
 8005c18:	2300      	movs	r3, #0
 8005c1a:	607b      	str	r3, [r7, #4]
 8005c1c:	e002      	b.n	8005c24 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8005c1e:	f04f 33ff 	mov.w	r3, #4294967295
 8005c22:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005c24:	687b      	ldr	r3, [r7, #4]
}
 8005c26:	4618      	mov	r0, r3
 8005c28:	3708      	adds	r7, #8
 8005c2a:	46bd      	mov	sp, r7
 8005c2c:	bd80      	pop	{r7, pc}
 8005c2e:	bf00      	nop
 8005c30:	20000094 	.word	0x20000094

08005c34 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005c34:	b580      	push	{r7, lr}
 8005c36:	b08e      	sub	sp, #56	; 0x38
 8005c38:	af04      	add	r7, sp, #16
 8005c3a:	60f8      	str	r0, [r7, #12]
 8005c3c:	60b9      	str	r1, [r7, #8]
 8005c3e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005c40:	2300      	movs	r3, #0
 8005c42:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005c44:	f3ef 8305 	mrs	r3, IPSR
 8005c48:	617b      	str	r3, [r7, #20]
  return(result);
 8005c4a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d17e      	bne.n	8005d4e <osThreadNew+0x11a>
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d07b      	beq.n	8005d4e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8005c56:	2380      	movs	r3, #128	; 0x80
 8005c58:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8005c5a:	2318      	movs	r3, #24
 8005c5c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8005c5e:	2300      	movs	r3, #0
 8005c60:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8005c62:	f04f 33ff 	mov.w	r3, #4294967295
 8005c66:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d045      	beq.n	8005cfa <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d002      	beq.n	8005c7c <osThreadNew+0x48>
        name = attr->name;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	699b      	ldr	r3, [r3, #24]
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d002      	beq.n	8005c8a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	699b      	ldr	r3, [r3, #24]
 8005c88:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005c8a:	69fb      	ldr	r3, [r7, #28]
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d008      	beq.n	8005ca2 <osThreadNew+0x6e>
 8005c90:	69fb      	ldr	r3, [r7, #28]
 8005c92:	2b38      	cmp	r3, #56	; 0x38
 8005c94:	d805      	bhi.n	8005ca2 <osThreadNew+0x6e>
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	685b      	ldr	r3, [r3, #4]
 8005c9a:	f003 0301 	and.w	r3, r3, #1
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d001      	beq.n	8005ca6 <osThreadNew+0x72>
        return (NULL);
 8005ca2:	2300      	movs	r3, #0
 8005ca4:	e054      	b.n	8005d50 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	695b      	ldr	r3, [r3, #20]
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d003      	beq.n	8005cb6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	695b      	ldr	r3, [r3, #20]
 8005cb2:	089b      	lsrs	r3, r3, #2
 8005cb4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	689b      	ldr	r3, [r3, #8]
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d00e      	beq.n	8005cdc <osThreadNew+0xa8>
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	68db      	ldr	r3, [r3, #12]
 8005cc2:	2b5b      	cmp	r3, #91	; 0x5b
 8005cc4:	d90a      	bls.n	8005cdc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d006      	beq.n	8005cdc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	695b      	ldr	r3, [r3, #20]
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d002      	beq.n	8005cdc <osThreadNew+0xa8>
        mem = 1;
 8005cd6:	2301      	movs	r3, #1
 8005cd8:	61bb      	str	r3, [r7, #24]
 8005cda:	e010      	b.n	8005cfe <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	689b      	ldr	r3, [r3, #8]
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d10c      	bne.n	8005cfe <osThreadNew+0xca>
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	68db      	ldr	r3, [r3, #12]
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d108      	bne.n	8005cfe <osThreadNew+0xca>
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	691b      	ldr	r3, [r3, #16]
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d104      	bne.n	8005cfe <osThreadNew+0xca>
          mem = 0;
 8005cf4:	2300      	movs	r3, #0
 8005cf6:	61bb      	str	r3, [r7, #24]
 8005cf8:	e001      	b.n	8005cfe <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8005cfa:	2300      	movs	r3, #0
 8005cfc:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005cfe:	69bb      	ldr	r3, [r7, #24]
 8005d00:	2b01      	cmp	r3, #1
 8005d02:	d110      	bne.n	8005d26 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8005d08:	687a      	ldr	r2, [r7, #4]
 8005d0a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005d0c:	9202      	str	r2, [sp, #8]
 8005d0e:	9301      	str	r3, [sp, #4]
 8005d10:	69fb      	ldr	r3, [r7, #28]
 8005d12:	9300      	str	r3, [sp, #0]
 8005d14:	68bb      	ldr	r3, [r7, #8]
 8005d16:	6a3a      	ldr	r2, [r7, #32]
 8005d18:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005d1a:	68f8      	ldr	r0, [r7, #12]
 8005d1c:	f000 fe0c 	bl	8006938 <xTaskCreateStatic>
 8005d20:	4603      	mov	r3, r0
 8005d22:	613b      	str	r3, [r7, #16]
 8005d24:	e013      	b.n	8005d4e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8005d26:	69bb      	ldr	r3, [r7, #24]
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d110      	bne.n	8005d4e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005d2c:	6a3b      	ldr	r3, [r7, #32]
 8005d2e:	b29a      	uxth	r2, r3
 8005d30:	f107 0310 	add.w	r3, r7, #16
 8005d34:	9301      	str	r3, [sp, #4]
 8005d36:	69fb      	ldr	r3, [r7, #28]
 8005d38:	9300      	str	r3, [sp, #0]
 8005d3a:	68bb      	ldr	r3, [r7, #8]
 8005d3c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005d3e:	68f8      	ldr	r0, [r7, #12]
 8005d40:	f000 fe57 	bl	80069f2 <xTaskCreate>
 8005d44:	4603      	mov	r3, r0
 8005d46:	2b01      	cmp	r3, #1
 8005d48:	d001      	beq.n	8005d4e <osThreadNew+0x11a>
            hTask = NULL;
 8005d4a:	2300      	movs	r3, #0
 8005d4c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005d4e:	693b      	ldr	r3, [r7, #16]
}
 8005d50:	4618      	mov	r0, r3
 8005d52:	3728      	adds	r7, #40	; 0x28
 8005d54:	46bd      	mov	sp, r7
 8005d56:	bd80      	pop	{r7, pc}

08005d58 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8005d58:	b580      	push	{r7, lr}
 8005d5a:	b084      	sub	sp, #16
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005d60:	f3ef 8305 	mrs	r3, IPSR
 8005d64:	60bb      	str	r3, [r7, #8]
  return(result);
 8005d66:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d003      	beq.n	8005d74 <osDelay+0x1c>
    stat = osErrorISR;
 8005d6c:	f06f 0305 	mvn.w	r3, #5
 8005d70:	60fb      	str	r3, [r7, #12]
 8005d72:	e007      	b.n	8005d84 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8005d74:	2300      	movs	r3, #0
 8005d76:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d002      	beq.n	8005d84 <osDelay+0x2c>
      vTaskDelay(ticks);
 8005d7e:	6878      	ldr	r0, [r7, #4]
 8005d80:	f000 ff7c 	bl	8006c7c <vTaskDelay>
    }
  }

  return (stat);
 8005d84:	68fb      	ldr	r3, [r7, #12]
}
 8005d86:	4618      	mov	r0, r3
 8005d88:	3710      	adds	r7, #16
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	bd80      	pop	{r7, pc}
	...

08005d90 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005d90:	b480      	push	{r7}
 8005d92:	b085      	sub	sp, #20
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	60f8      	str	r0, [r7, #12]
 8005d98:	60b9      	str	r1, [r7, #8]
 8005d9a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	4a07      	ldr	r2, [pc, #28]	; (8005dbc <vApplicationGetIdleTaskMemory+0x2c>)
 8005da0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005da2:	68bb      	ldr	r3, [r7, #8]
 8005da4:	4a06      	ldr	r2, [pc, #24]	; (8005dc0 <vApplicationGetIdleTaskMemory+0x30>)
 8005da6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	2280      	movs	r2, #128	; 0x80
 8005dac:	601a      	str	r2, [r3, #0]
}
 8005dae:	bf00      	nop
 8005db0:	3714      	adds	r7, #20
 8005db2:	46bd      	mov	sp, r7
 8005db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db8:	4770      	bx	lr
 8005dba:	bf00      	nop
 8005dbc:	20000098 	.word	0x20000098
 8005dc0:	200000f4 	.word	0x200000f4

08005dc4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005dc4:	b480      	push	{r7}
 8005dc6:	b085      	sub	sp, #20
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	60f8      	str	r0, [r7, #12]
 8005dcc:	60b9      	str	r1, [r7, #8]
 8005dce:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	4a07      	ldr	r2, [pc, #28]	; (8005df0 <vApplicationGetTimerTaskMemory+0x2c>)
 8005dd4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005dd6:	68bb      	ldr	r3, [r7, #8]
 8005dd8:	4a06      	ldr	r2, [pc, #24]	; (8005df4 <vApplicationGetTimerTaskMemory+0x30>)
 8005dda:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005de2:	601a      	str	r2, [r3, #0]
}
 8005de4:	bf00      	nop
 8005de6:	3714      	adds	r7, #20
 8005de8:	46bd      	mov	sp, r7
 8005dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dee:	4770      	bx	lr
 8005df0:	200002f4 	.word	0x200002f4
 8005df4:	20000350 	.word	0x20000350

08005df8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005df8:	b480      	push	{r7}
 8005dfa:	b083      	sub	sp, #12
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	f103 0208 	add.w	r2, r3, #8
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	f04f 32ff 	mov.w	r2, #4294967295
 8005e10:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	f103 0208 	add.w	r2, r3, #8
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	f103 0208 	add.w	r2, r3, #8
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	2200      	movs	r2, #0
 8005e2a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005e2c:	bf00      	nop
 8005e2e:	370c      	adds	r7, #12
 8005e30:	46bd      	mov	sp, r7
 8005e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e36:	4770      	bx	lr

08005e38 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005e38:	b480      	push	{r7}
 8005e3a:	b083      	sub	sp, #12
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	2200      	movs	r2, #0
 8005e44:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005e46:	bf00      	nop
 8005e48:	370c      	adds	r7, #12
 8005e4a:	46bd      	mov	sp, r7
 8005e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e50:	4770      	bx	lr

08005e52 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005e52:	b480      	push	{r7}
 8005e54:	b085      	sub	sp, #20
 8005e56:	af00      	add	r7, sp, #0
 8005e58:	6078      	str	r0, [r7, #4]
 8005e5a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	685b      	ldr	r3, [r3, #4]
 8005e60:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005e62:	683b      	ldr	r3, [r7, #0]
 8005e64:	68fa      	ldr	r2, [r7, #12]
 8005e66:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	689a      	ldr	r2, [r3, #8]
 8005e6c:	683b      	ldr	r3, [r7, #0]
 8005e6e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	689b      	ldr	r3, [r3, #8]
 8005e74:	683a      	ldr	r2, [r7, #0]
 8005e76:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	683a      	ldr	r2, [r7, #0]
 8005e7c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005e7e:	683b      	ldr	r3, [r7, #0]
 8005e80:	687a      	ldr	r2, [r7, #4]
 8005e82:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	1c5a      	adds	r2, r3, #1
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	601a      	str	r2, [r3, #0]
}
 8005e8e:	bf00      	nop
 8005e90:	3714      	adds	r7, #20
 8005e92:	46bd      	mov	sp, r7
 8005e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e98:	4770      	bx	lr

08005e9a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005e9a:	b480      	push	{r7}
 8005e9c:	b085      	sub	sp, #20
 8005e9e:	af00      	add	r7, sp, #0
 8005ea0:	6078      	str	r0, [r7, #4]
 8005ea2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005ea4:	683b      	ldr	r3, [r7, #0]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005eaa:	68bb      	ldr	r3, [r7, #8]
 8005eac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005eb0:	d103      	bne.n	8005eba <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	691b      	ldr	r3, [r3, #16]
 8005eb6:	60fb      	str	r3, [r7, #12]
 8005eb8:	e00c      	b.n	8005ed4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	3308      	adds	r3, #8
 8005ebe:	60fb      	str	r3, [r7, #12]
 8005ec0:	e002      	b.n	8005ec8 <vListInsert+0x2e>
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	685b      	ldr	r3, [r3, #4]
 8005ec6:	60fb      	str	r3, [r7, #12]
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	685b      	ldr	r3, [r3, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	68ba      	ldr	r2, [r7, #8]
 8005ed0:	429a      	cmp	r2, r3
 8005ed2:	d2f6      	bcs.n	8005ec2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	685a      	ldr	r2, [r3, #4]
 8005ed8:	683b      	ldr	r3, [r7, #0]
 8005eda:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005edc:	683b      	ldr	r3, [r7, #0]
 8005ede:	685b      	ldr	r3, [r3, #4]
 8005ee0:	683a      	ldr	r2, [r7, #0]
 8005ee2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005ee4:	683b      	ldr	r3, [r7, #0]
 8005ee6:	68fa      	ldr	r2, [r7, #12]
 8005ee8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	683a      	ldr	r2, [r7, #0]
 8005eee:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005ef0:	683b      	ldr	r3, [r7, #0]
 8005ef2:	687a      	ldr	r2, [r7, #4]
 8005ef4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	1c5a      	adds	r2, r3, #1
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	601a      	str	r2, [r3, #0]
}
 8005f00:	bf00      	nop
 8005f02:	3714      	adds	r7, #20
 8005f04:	46bd      	mov	sp, r7
 8005f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0a:	4770      	bx	lr

08005f0c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005f0c:	b480      	push	{r7}
 8005f0e:	b085      	sub	sp, #20
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	691b      	ldr	r3, [r3, #16]
 8005f18:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	685b      	ldr	r3, [r3, #4]
 8005f1e:	687a      	ldr	r2, [r7, #4]
 8005f20:	6892      	ldr	r2, [r2, #8]
 8005f22:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	689b      	ldr	r3, [r3, #8]
 8005f28:	687a      	ldr	r2, [r7, #4]
 8005f2a:	6852      	ldr	r2, [r2, #4]
 8005f2c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	685b      	ldr	r3, [r3, #4]
 8005f32:	687a      	ldr	r2, [r7, #4]
 8005f34:	429a      	cmp	r2, r3
 8005f36:	d103      	bne.n	8005f40 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	689a      	ldr	r2, [r3, #8]
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	2200      	movs	r2, #0
 8005f44:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	1e5a      	subs	r2, r3, #1
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	681b      	ldr	r3, [r3, #0]
}
 8005f54:	4618      	mov	r0, r3
 8005f56:	3714      	adds	r7, #20
 8005f58:	46bd      	mov	sp, r7
 8005f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5e:	4770      	bx	lr

08005f60 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005f60:	b580      	push	{r7, lr}
 8005f62:	b084      	sub	sp, #16
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	6078      	str	r0, [r7, #4]
 8005f68:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d10a      	bne.n	8005f8a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005f74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f78:	f383 8811 	msr	BASEPRI, r3
 8005f7c:	f3bf 8f6f 	isb	sy
 8005f80:	f3bf 8f4f 	dsb	sy
 8005f84:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005f86:	bf00      	nop
 8005f88:	e7fe      	b.n	8005f88 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005f8a:	f002 f84b 	bl	8008024 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	681a      	ldr	r2, [r3, #0]
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f96:	68f9      	ldr	r1, [r7, #12]
 8005f98:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005f9a:	fb01 f303 	mul.w	r3, r1, r3
 8005f9e:	441a      	add	r2, r3
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	2200      	movs	r2, #0
 8005fa8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	681a      	ldr	r2, [r3, #0]
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	681a      	ldr	r2, [r3, #0]
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fba:	3b01      	subs	r3, #1
 8005fbc:	68f9      	ldr	r1, [r7, #12]
 8005fbe:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005fc0:	fb01 f303 	mul.w	r3, r1, r3
 8005fc4:	441a      	add	r2, r3
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	22ff      	movs	r2, #255	; 0xff
 8005fce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	22ff      	movs	r2, #255	; 0xff
 8005fd6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005fda:	683b      	ldr	r3, [r7, #0]
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d114      	bne.n	800600a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	691b      	ldr	r3, [r3, #16]
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d01a      	beq.n	800601e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	3310      	adds	r3, #16
 8005fec:	4618      	mov	r0, r3
 8005fee:	f001 f903 	bl	80071f8 <xTaskRemoveFromEventList>
 8005ff2:	4603      	mov	r3, r0
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d012      	beq.n	800601e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005ff8:	4b0c      	ldr	r3, [pc, #48]	; (800602c <xQueueGenericReset+0xcc>)
 8005ffa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ffe:	601a      	str	r2, [r3, #0]
 8006000:	f3bf 8f4f 	dsb	sy
 8006004:	f3bf 8f6f 	isb	sy
 8006008:	e009      	b.n	800601e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	3310      	adds	r3, #16
 800600e:	4618      	mov	r0, r3
 8006010:	f7ff fef2 	bl	8005df8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	3324      	adds	r3, #36	; 0x24
 8006018:	4618      	mov	r0, r3
 800601a:	f7ff feed 	bl	8005df8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800601e:	f002 f831 	bl	8008084 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006022:	2301      	movs	r3, #1
}
 8006024:	4618      	mov	r0, r3
 8006026:	3710      	adds	r7, #16
 8006028:	46bd      	mov	sp, r7
 800602a:	bd80      	pop	{r7, pc}
 800602c:	e000ed04 	.word	0xe000ed04

08006030 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006030:	b580      	push	{r7, lr}
 8006032:	b08e      	sub	sp, #56	; 0x38
 8006034:	af02      	add	r7, sp, #8
 8006036:	60f8      	str	r0, [r7, #12]
 8006038:	60b9      	str	r1, [r7, #8]
 800603a:	607a      	str	r2, [r7, #4]
 800603c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	2b00      	cmp	r3, #0
 8006042:	d10a      	bne.n	800605a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8006044:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006048:	f383 8811 	msr	BASEPRI, r3
 800604c:	f3bf 8f6f 	isb	sy
 8006050:	f3bf 8f4f 	dsb	sy
 8006054:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006056:	bf00      	nop
 8006058:	e7fe      	b.n	8006058 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800605a:	683b      	ldr	r3, [r7, #0]
 800605c:	2b00      	cmp	r3, #0
 800605e:	d10a      	bne.n	8006076 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8006060:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006064:	f383 8811 	msr	BASEPRI, r3
 8006068:	f3bf 8f6f 	isb	sy
 800606c:	f3bf 8f4f 	dsb	sy
 8006070:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006072:	bf00      	nop
 8006074:	e7fe      	b.n	8006074 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	2b00      	cmp	r3, #0
 800607a:	d002      	beq.n	8006082 <xQueueGenericCreateStatic+0x52>
 800607c:	68bb      	ldr	r3, [r7, #8]
 800607e:	2b00      	cmp	r3, #0
 8006080:	d001      	beq.n	8006086 <xQueueGenericCreateStatic+0x56>
 8006082:	2301      	movs	r3, #1
 8006084:	e000      	b.n	8006088 <xQueueGenericCreateStatic+0x58>
 8006086:	2300      	movs	r3, #0
 8006088:	2b00      	cmp	r3, #0
 800608a:	d10a      	bne.n	80060a2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800608c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006090:	f383 8811 	msr	BASEPRI, r3
 8006094:	f3bf 8f6f 	isb	sy
 8006098:	f3bf 8f4f 	dsb	sy
 800609c:	623b      	str	r3, [r7, #32]
}
 800609e:	bf00      	nop
 80060a0:	e7fe      	b.n	80060a0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d102      	bne.n	80060ae <xQueueGenericCreateStatic+0x7e>
 80060a8:	68bb      	ldr	r3, [r7, #8]
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d101      	bne.n	80060b2 <xQueueGenericCreateStatic+0x82>
 80060ae:	2301      	movs	r3, #1
 80060b0:	e000      	b.n	80060b4 <xQueueGenericCreateStatic+0x84>
 80060b2:	2300      	movs	r3, #0
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d10a      	bne.n	80060ce <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80060b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060bc:	f383 8811 	msr	BASEPRI, r3
 80060c0:	f3bf 8f6f 	isb	sy
 80060c4:	f3bf 8f4f 	dsb	sy
 80060c8:	61fb      	str	r3, [r7, #28]
}
 80060ca:	bf00      	nop
 80060cc:	e7fe      	b.n	80060cc <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80060ce:	2350      	movs	r3, #80	; 0x50
 80060d0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80060d2:	697b      	ldr	r3, [r7, #20]
 80060d4:	2b50      	cmp	r3, #80	; 0x50
 80060d6:	d00a      	beq.n	80060ee <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80060d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060dc:	f383 8811 	msr	BASEPRI, r3
 80060e0:	f3bf 8f6f 	isb	sy
 80060e4:	f3bf 8f4f 	dsb	sy
 80060e8:	61bb      	str	r3, [r7, #24]
}
 80060ea:	bf00      	nop
 80060ec:	e7fe      	b.n	80060ec <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80060ee:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80060f0:	683b      	ldr	r3, [r7, #0]
 80060f2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80060f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d00d      	beq.n	8006116 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80060fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060fc:	2201      	movs	r2, #1
 80060fe:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006102:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8006106:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006108:	9300      	str	r3, [sp, #0]
 800610a:	4613      	mov	r3, r2
 800610c:	687a      	ldr	r2, [r7, #4]
 800610e:	68b9      	ldr	r1, [r7, #8]
 8006110:	68f8      	ldr	r0, [r7, #12]
 8006112:	f000 f805 	bl	8006120 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006116:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006118:	4618      	mov	r0, r3
 800611a:	3730      	adds	r7, #48	; 0x30
 800611c:	46bd      	mov	sp, r7
 800611e:	bd80      	pop	{r7, pc}

08006120 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006120:	b580      	push	{r7, lr}
 8006122:	b084      	sub	sp, #16
 8006124:	af00      	add	r7, sp, #0
 8006126:	60f8      	str	r0, [r7, #12]
 8006128:	60b9      	str	r1, [r7, #8]
 800612a:	607a      	str	r2, [r7, #4]
 800612c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800612e:	68bb      	ldr	r3, [r7, #8]
 8006130:	2b00      	cmp	r3, #0
 8006132:	d103      	bne.n	800613c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006134:	69bb      	ldr	r3, [r7, #24]
 8006136:	69ba      	ldr	r2, [r7, #24]
 8006138:	601a      	str	r2, [r3, #0]
 800613a:	e002      	b.n	8006142 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800613c:	69bb      	ldr	r3, [r7, #24]
 800613e:	687a      	ldr	r2, [r7, #4]
 8006140:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006142:	69bb      	ldr	r3, [r7, #24]
 8006144:	68fa      	ldr	r2, [r7, #12]
 8006146:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006148:	69bb      	ldr	r3, [r7, #24]
 800614a:	68ba      	ldr	r2, [r7, #8]
 800614c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800614e:	2101      	movs	r1, #1
 8006150:	69b8      	ldr	r0, [r7, #24]
 8006152:	f7ff ff05 	bl	8005f60 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006156:	69bb      	ldr	r3, [r7, #24]
 8006158:	78fa      	ldrb	r2, [r7, #3]
 800615a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800615e:	bf00      	nop
 8006160:	3710      	adds	r7, #16
 8006162:	46bd      	mov	sp, r7
 8006164:	bd80      	pop	{r7, pc}
	...

08006168 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006168:	b580      	push	{r7, lr}
 800616a:	b08e      	sub	sp, #56	; 0x38
 800616c:	af00      	add	r7, sp, #0
 800616e:	60f8      	str	r0, [r7, #12]
 8006170:	60b9      	str	r1, [r7, #8]
 8006172:	607a      	str	r2, [r7, #4]
 8006174:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006176:	2300      	movs	r3, #0
 8006178:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800617e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006180:	2b00      	cmp	r3, #0
 8006182:	d10a      	bne.n	800619a <xQueueGenericSend+0x32>
	__asm volatile
 8006184:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006188:	f383 8811 	msr	BASEPRI, r3
 800618c:	f3bf 8f6f 	isb	sy
 8006190:	f3bf 8f4f 	dsb	sy
 8006194:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006196:	bf00      	nop
 8006198:	e7fe      	b.n	8006198 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800619a:	68bb      	ldr	r3, [r7, #8]
 800619c:	2b00      	cmp	r3, #0
 800619e:	d103      	bne.n	80061a8 <xQueueGenericSend+0x40>
 80061a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d101      	bne.n	80061ac <xQueueGenericSend+0x44>
 80061a8:	2301      	movs	r3, #1
 80061aa:	e000      	b.n	80061ae <xQueueGenericSend+0x46>
 80061ac:	2300      	movs	r3, #0
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d10a      	bne.n	80061c8 <xQueueGenericSend+0x60>
	__asm volatile
 80061b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061b6:	f383 8811 	msr	BASEPRI, r3
 80061ba:	f3bf 8f6f 	isb	sy
 80061be:	f3bf 8f4f 	dsb	sy
 80061c2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80061c4:	bf00      	nop
 80061c6:	e7fe      	b.n	80061c6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80061c8:	683b      	ldr	r3, [r7, #0]
 80061ca:	2b02      	cmp	r3, #2
 80061cc:	d103      	bne.n	80061d6 <xQueueGenericSend+0x6e>
 80061ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061d2:	2b01      	cmp	r3, #1
 80061d4:	d101      	bne.n	80061da <xQueueGenericSend+0x72>
 80061d6:	2301      	movs	r3, #1
 80061d8:	e000      	b.n	80061dc <xQueueGenericSend+0x74>
 80061da:	2300      	movs	r3, #0
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d10a      	bne.n	80061f6 <xQueueGenericSend+0x8e>
	__asm volatile
 80061e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061e4:	f383 8811 	msr	BASEPRI, r3
 80061e8:	f3bf 8f6f 	isb	sy
 80061ec:	f3bf 8f4f 	dsb	sy
 80061f0:	623b      	str	r3, [r7, #32]
}
 80061f2:	bf00      	nop
 80061f4:	e7fe      	b.n	80061f4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80061f6:	f001 f9bd 	bl	8007574 <xTaskGetSchedulerState>
 80061fa:	4603      	mov	r3, r0
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d102      	bne.n	8006206 <xQueueGenericSend+0x9e>
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	2b00      	cmp	r3, #0
 8006204:	d101      	bne.n	800620a <xQueueGenericSend+0xa2>
 8006206:	2301      	movs	r3, #1
 8006208:	e000      	b.n	800620c <xQueueGenericSend+0xa4>
 800620a:	2300      	movs	r3, #0
 800620c:	2b00      	cmp	r3, #0
 800620e:	d10a      	bne.n	8006226 <xQueueGenericSend+0xbe>
	__asm volatile
 8006210:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006214:	f383 8811 	msr	BASEPRI, r3
 8006218:	f3bf 8f6f 	isb	sy
 800621c:	f3bf 8f4f 	dsb	sy
 8006220:	61fb      	str	r3, [r7, #28]
}
 8006222:	bf00      	nop
 8006224:	e7fe      	b.n	8006224 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006226:	f001 fefd 	bl	8008024 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800622a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800622c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800622e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006230:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006232:	429a      	cmp	r2, r3
 8006234:	d302      	bcc.n	800623c <xQueueGenericSend+0xd4>
 8006236:	683b      	ldr	r3, [r7, #0]
 8006238:	2b02      	cmp	r3, #2
 800623a:	d129      	bne.n	8006290 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800623c:	683a      	ldr	r2, [r7, #0]
 800623e:	68b9      	ldr	r1, [r7, #8]
 8006240:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006242:	f000 fa0b 	bl	800665c <prvCopyDataToQueue>
 8006246:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006248:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800624a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800624c:	2b00      	cmp	r3, #0
 800624e:	d010      	beq.n	8006272 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006250:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006252:	3324      	adds	r3, #36	; 0x24
 8006254:	4618      	mov	r0, r3
 8006256:	f000 ffcf 	bl	80071f8 <xTaskRemoveFromEventList>
 800625a:	4603      	mov	r3, r0
 800625c:	2b00      	cmp	r3, #0
 800625e:	d013      	beq.n	8006288 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006260:	4b3f      	ldr	r3, [pc, #252]	; (8006360 <xQueueGenericSend+0x1f8>)
 8006262:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006266:	601a      	str	r2, [r3, #0]
 8006268:	f3bf 8f4f 	dsb	sy
 800626c:	f3bf 8f6f 	isb	sy
 8006270:	e00a      	b.n	8006288 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006272:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006274:	2b00      	cmp	r3, #0
 8006276:	d007      	beq.n	8006288 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006278:	4b39      	ldr	r3, [pc, #228]	; (8006360 <xQueueGenericSend+0x1f8>)
 800627a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800627e:	601a      	str	r2, [r3, #0]
 8006280:	f3bf 8f4f 	dsb	sy
 8006284:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006288:	f001 fefc 	bl	8008084 <vPortExitCritical>
				return pdPASS;
 800628c:	2301      	movs	r3, #1
 800628e:	e063      	b.n	8006358 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	2b00      	cmp	r3, #0
 8006294:	d103      	bne.n	800629e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006296:	f001 fef5 	bl	8008084 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800629a:	2300      	movs	r3, #0
 800629c:	e05c      	b.n	8006358 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800629e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d106      	bne.n	80062b2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80062a4:	f107 0314 	add.w	r3, r7, #20
 80062a8:	4618      	mov	r0, r3
 80062aa:	f001 f809 	bl	80072c0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80062ae:	2301      	movs	r3, #1
 80062b0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80062b2:	f001 fee7 	bl	8008084 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80062b6:	f000 fd7b 	bl	8006db0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80062ba:	f001 feb3 	bl	8008024 <vPortEnterCritical>
 80062be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062c0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80062c4:	b25b      	sxtb	r3, r3
 80062c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062ca:	d103      	bne.n	80062d4 <xQueueGenericSend+0x16c>
 80062cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062ce:	2200      	movs	r2, #0
 80062d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80062d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062d6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80062da:	b25b      	sxtb	r3, r3
 80062dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062e0:	d103      	bne.n	80062ea <xQueueGenericSend+0x182>
 80062e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062e4:	2200      	movs	r2, #0
 80062e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80062ea:	f001 fecb 	bl	8008084 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80062ee:	1d3a      	adds	r2, r7, #4
 80062f0:	f107 0314 	add.w	r3, r7, #20
 80062f4:	4611      	mov	r1, r2
 80062f6:	4618      	mov	r0, r3
 80062f8:	f000 fff8 	bl	80072ec <xTaskCheckForTimeOut>
 80062fc:	4603      	mov	r3, r0
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d124      	bne.n	800634c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006302:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006304:	f000 faa2 	bl	800684c <prvIsQueueFull>
 8006308:	4603      	mov	r3, r0
 800630a:	2b00      	cmp	r3, #0
 800630c:	d018      	beq.n	8006340 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800630e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006310:	3310      	adds	r3, #16
 8006312:	687a      	ldr	r2, [r7, #4]
 8006314:	4611      	mov	r1, r2
 8006316:	4618      	mov	r0, r3
 8006318:	f000 ff1e 	bl	8007158 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800631c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800631e:	f000 fa2d 	bl	800677c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006322:	f000 fd53 	bl	8006dcc <xTaskResumeAll>
 8006326:	4603      	mov	r3, r0
 8006328:	2b00      	cmp	r3, #0
 800632a:	f47f af7c 	bne.w	8006226 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800632e:	4b0c      	ldr	r3, [pc, #48]	; (8006360 <xQueueGenericSend+0x1f8>)
 8006330:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006334:	601a      	str	r2, [r3, #0]
 8006336:	f3bf 8f4f 	dsb	sy
 800633a:	f3bf 8f6f 	isb	sy
 800633e:	e772      	b.n	8006226 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006340:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006342:	f000 fa1b 	bl	800677c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006346:	f000 fd41 	bl	8006dcc <xTaskResumeAll>
 800634a:	e76c      	b.n	8006226 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800634c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800634e:	f000 fa15 	bl	800677c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006352:	f000 fd3b 	bl	8006dcc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006356:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006358:	4618      	mov	r0, r3
 800635a:	3738      	adds	r7, #56	; 0x38
 800635c:	46bd      	mov	sp, r7
 800635e:	bd80      	pop	{r7, pc}
 8006360:	e000ed04 	.word	0xe000ed04

08006364 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006364:	b580      	push	{r7, lr}
 8006366:	b090      	sub	sp, #64	; 0x40
 8006368:	af00      	add	r7, sp, #0
 800636a:	60f8      	str	r0, [r7, #12]
 800636c:	60b9      	str	r1, [r7, #8]
 800636e:	607a      	str	r2, [r7, #4]
 8006370:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8006376:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006378:	2b00      	cmp	r3, #0
 800637a:	d10a      	bne.n	8006392 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800637c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006380:	f383 8811 	msr	BASEPRI, r3
 8006384:	f3bf 8f6f 	isb	sy
 8006388:	f3bf 8f4f 	dsb	sy
 800638c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800638e:	bf00      	nop
 8006390:	e7fe      	b.n	8006390 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006392:	68bb      	ldr	r3, [r7, #8]
 8006394:	2b00      	cmp	r3, #0
 8006396:	d103      	bne.n	80063a0 <xQueueGenericSendFromISR+0x3c>
 8006398:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800639a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800639c:	2b00      	cmp	r3, #0
 800639e:	d101      	bne.n	80063a4 <xQueueGenericSendFromISR+0x40>
 80063a0:	2301      	movs	r3, #1
 80063a2:	e000      	b.n	80063a6 <xQueueGenericSendFromISR+0x42>
 80063a4:	2300      	movs	r3, #0
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d10a      	bne.n	80063c0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80063aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063ae:	f383 8811 	msr	BASEPRI, r3
 80063b2:	f3bf 8f6f 	isb	sy
 80063b6:	f3bf 8f4f 	dsb	sy
 80063ba:	627b      	str	r3, [r7, #36]	; 0x24
}
 80063bc:	bf00      	nop
 80063be:	e7fe      	b.n	80063be <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80063c0:	683b      	ldr	r3, [r7, #0]
 80063c2:	2b02      	cmp	r3, #2
 80063c4:	d103      	bne.n	80063ce <xQueueGenericSendFromISR+0x6a>
 80063c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063ca:	2b01      	cmp	r3, #1
 80063cc:	d101      	bne.n	80063d2 <xQueueGenericSendFromISR+0x6e>
 80063ce:	2301      	movs	r3, #1
 80063d0:	e000      	b.n	80063d4 <xQueueGenericSendFromISR+0x70>
 80063d2:	2300      	movs	r3, #0
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d10a      	bne.n	80063ee <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80063d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063dc:	f383 8811 	msr	BASEPRI, r3
 80063e0:	f3bf 8f6f 	isb	sy
 80063e4:	f3bf 8f4f 	dsb	sy
 80063e8:	623b      	str	r3, [r7, #32]
}
 80063ea:	bf00      	nop
 80063ec:	e7fe      	b.n	80063ec <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80063ee:	f001 fefb 	bl	80081e8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80063f2:	f3ef 8211 	mrs	r2, BASEPRI
 80063f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063fa:	f383 8811 	msr	BASEPRI, r3
 80063fe:	f3bf 8f6f 	isb	sy
 8006402:	f3bf 8f4f 	dsb	sy
 8006406:	61fa      	str	r2, [r7, #28]
 8006408:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800640a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800640c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800640e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006410:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006412:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006414:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006416:	429a      	cmp	r2, r3
 8006418:	d302      	bcc.n	8006420 <xQueueGenericSendFromISR+0xbc>
 800641a:	683b      	ldr	r3, [r7, #0]
 800641c:	2b02      	cmp	r3, #2
 800641e:	d12f      	bne.n	8006480 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006420:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006422:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006426:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800642a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800642c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800642e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006430:	683a      	ldr	r2, [r7, #0]
 8006432:	68b9      	ldr	r1, [r7, #8]
 8006434:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006436:	f000 f911 	bl	800665c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800643a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800643e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006442:	d112      	bne.n	800646a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006444:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006448:	2b00      	cmp	r3, #0
 800644a:	d016      	beq.n	800647a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800644c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800644e:	3324      	adds	r3, #36	; 0x24
 8006450:	4618      	mov	r0, r3
 8006452:	f000 fed1 	bl	80071f8 <xTaskRemoveFromEventList>
 8006456:	4603      	mov	r3, r0
 8006458:	2b00      	cmp	r3, #0
 800645a:	d00e      	beq.n	800647a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	2b00      	cmp	r3, #0
 8006460:	d00b      	beq.n	800647a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	2201      	movs	r2, #1
 8006466:	601a      	str	r2, [r3, #0]
 8006468:	e007      	b.n	800647a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800646a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800646e:	3301      	adds	r3, #1
 8006470:	b2db      	uxtb	r3, r3
 8006472:	b25a      	sxtb	r2, r3
 8006474:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006476:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800647a:	2301      	movs	r3, #1
 800647c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800647e:	e001      	b.n	8006484 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006480:	2300      	movs	r3, #0
 8006482:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006484:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006486:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006488:	697b      	ldr	r3, [r7, #20]
 800648a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800648e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006490:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8006492:	4618      	mov	r0, r3
 8006494:	3740      	adds	r7, #64	; 0x40
 8006496:	46bd      	mov	sp, r7
 8006498:	bd80      	pop	{r7, pc}
	...

0800649c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800649c:	b580      	push	{r7, lr}
 800649e:	b08c      	sub	sp, #48	; 0x30
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	60f8      	str	r0, [r7, #12]
 80064a4:	60b9      	str	r1, [r7, #8]
 80064a6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80064a8:	2300      	movs	r3, #0
 80064aa:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80064b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d10a      	bne.n	80064cc <xQueueReceive+0x30>
	__asm volatile
 80064b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064ba:	f383 8811 	msr	BASEPRI, r3
 80064be:	f3bf 8f6f 	isb	sy
 80064c2:	f3bf 8f4f 	dsb	sy
 80064c6:	623b      	str	r3, [r7, #32]
}
 80064c8:	bf00      	nop
 80064ca:	e7fe      	b.n	80064ca <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80064cc:	68bb      	ldr	r3, [r7, #8]
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d103      	bne.n	80064da <xQueueReceive+0x3e>
 80064d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d101      	bne.n	80064de <xQueueReceive+0x42>
 80064da:	2301      	movs	r3, #1
 80064dc:	e000      	b.n	80064e0 <xQueueReceive+0x44>
 80064de:	2300      	movs	r3, #0
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d10a      	bne.n	80064fa <xQueueReceive+0x5e>
	__asm volatile
 80064e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064e8:	f383 8811 	msr	BASEPRI, r3
 80064ec:	f3bf 8f6f 	isb	sy
 80064f0:	f3bf 8f4f 	dsb	sy
 80064f4:	61fb      	str	r3, [r7, #28]
}
 80064f6:	bf00      	nop
 80064f8:	e7fe      	b.n	80064f8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80064fa:	f001 f83b 	bl	8007574 <xTaskGetSchedulerState>
 80064fe:	4603      	mov	r3, r0
 8006500:	2b00      	cmp	r3, #0
 8006502:	d102      	bne.n	800650a <xQueueReceive+0x6e>
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	2b00      	cmp	r3, #0
 8006508:	d101      	bne.n	800650e <xQueueReceive+0x72>
 800650a:	2301      	movs	r3, #1
 800650c:	e000      	b.n	8006510 <xQueueReceive+0x74>
 800650e:	2300      	movs	r3, #0
 8006510:	2b00      	cmp	r3, #0
 8006512:	d10a      	bne.n	800652a <xQueueReceive+0x8e>
	__asm volatile
 8006514:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006518:	f383 8811 	msr	BASEPRI, r3
 800651c:	f3bf 8f6f 	isb	sy
 8006520:	f3bf 8f4f 	dsb	sy
 8006524:	61bb      	str	r3, [r7, #24]
}
 8006526:	bf00      	nop
 8006528:	e7fe      	b.n	8006528 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800652a:	f001 fd7b 	bl	8008024 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800652e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006530:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006532:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006536:	2b00      	cmp	r3, #0
 8006538:	d01f      	beq.n	800657a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800653a:	68b9      	ldr	r1, [r7, #8]
 800653c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800653e:	f000 f8f7 	bl	8006730 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006544:	1e5a      	subs	r2, r3, #1
 8006546:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006548:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800654a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800654c:	691b      	ldr	r3, [r3, #16]
 800654e:	2b00      	cmp	r3, #0
 8006550:	d00f      	beq.n	8006572 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006552:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006554:	3310      	adds	r3, #16
 8006556:	4618      	mov	r0, r3
 8006558:	f000 fe4e 	bl	80071f8 <xTaskRemoveFromEventList>
 800655c:	4603      	mov	r3, r0
 800655e:	2b00      	cmp	r3, #0
 8006560:	d007      	beq.n	8006572 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006562:	4b3d      	ldr	r3, [pc, #244]	; (8006658 <xQueueReceive+0x1bc>)
 8006564:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006568:	601a      	str	r2, [r3, #0]
 800656a:	f3bf 8f4f 	dsb	sy
 800656e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006572:	f001 fd87 	bl	8008084 <vPortExitCritical>
				return pdPASS;
 8006576:	2301      	movs	r3, #1
 8006578:	e069      	b.n	800664e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	2b00      	cmp	r3, #0
 800657e:	d103      	bne.n	8006588 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006580:	f001 fd80 	bl	8008084 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006584:	2300      	movs	r3, #0
 8006586:	e062      	b.n	800664e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006588:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800658a:	2b00      	cmp	r3, #0
 800658c:	d106      	bne.n	800659c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800658e:	f107 0310 	add.w	r3, r7, #16
 8006592:	4618      	mov	r0, r3
 8006594:	f000 fe94 	bl	80072c0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006598:	2301      	movs	r3, #1
 800659a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800659c:	f001 fd72 	bl	8008084 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80065a0:	f000 fc06 	bl	8006db0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80065a4:	f001 fd3e 	bl	8008024 <vPortEnterCritical>
 80065a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065aa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80065ae:	b25b      	sxtb	r3, r3
 80065b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065b4:	d103      	bne.n	80065be <xQueueReceive+0x122>
 80065b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065b8:	2200      	movs	r2, #0
 80065ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80065be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065c0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80065c4:	b25b      	sxtb	r3, r3
 80065c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065ca:	d103      	bne.n	80065d4 <xQueueReceive+0x138>
 80065cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065ce:	2200      	movs	r2, #0
 80065d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80065d4:	f001 fd56 	bl	8008084 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80065d8:	1d3a      	adds	r2, r7, #4
 80065da:	f107 0310 	add.w	r3, r7, #16
 80065de:	4611      	mov	r1, r2
 80065e0:	4618      	mov	r0, r3
 80065e2:	f000 fe83 	bl	80072ec <xTaskCheckForTimeOut>
 80065e6:	4603      	mov	r3, r0
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d123      	bne.n	8006634 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80065ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80065ee:	f000 f917 	bl	8006820 <prvIsQueueEmpty>
 80065f2:	4603      	mov	r3, r0
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d017      	beq.n	8006628 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80065f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065fa:	3324      	adds	r3, #36	; 0x24
 80065fc:	687a      	ldr	r2, [r7, #4]
 80065fe:	4611      	mov	r1, r2
 8006600:	4618      	mov	r0, r3
 8006602:	f000 fda9 	bl	8007158 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006606:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006608:	f000 f8b8 	bl	800677c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800660c:	f000 fbde 	bl	8006dcc <xTaskResumeAll>
 8006610:	4603      	mov	r3, r0
 8006612:	2b00      	cmp	r3, #0
 8006614:	d189      	bne.n	800652a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8006616:	4b10      	ldr	r3, [pc, #64]	; (8006658 <xQueueReceive+0x1bc>)
 8006618:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800661c:	601a      	str	r2, [r3, #0]
 800661e:	f3bf 8f4f 	dsb	sy
 8006622:	f3bf 8f6f 	isb	sy
 8006626:	e780      	b.n	800652a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006628:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800662a:	f000 f8a7 	bl	800677c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800662e:	f000 fbcd 	bl	8006dcc <xTaskResumeAll>
 8006632:	e77a      	b.n	800652a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006634:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006636:	f000 f8a1 	bl	800677c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800663a:	f000 fbc7 	bl	8006dcc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800663e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006640:	f000 f8ee 	bl	8006820 <prvIsQueueEmpty>
 8006644:	4603      	mov	r3, r0
 8006646:	2b00      	cmp	r3, #0
 8006648:	f43f af6f 	beq.w	800652a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800664c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800664e:	4618      	mov	r0, r3
 8006650:	3730      	adds	r7, #48	; 0x30
 8006652:	46bd      	mov	sp, r7
 8006654:	bd80      	pop	{r7, pc}
 8006656:	bf00      	nop
 8006658:	e000ed04 	.word	0xe000ed04

0800665c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800665c:	b580      	push	{r7, lr}
 800665e:	b086      	sub	sp, #24
 8006660:	af00      	add	r7, sp, #0
 8006662:	60f8      	str	r0, [r7, #12]
 8006664:	60b9      	str	r1, [r7, #8]
 8006666:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006668:	2300      	movs	r3, #0
 800666a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006670:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006676:	2b00      	cmp	r3, #0
 8006678:	d10d      	bne.n	8006696 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	2b00      	cmp	r3, #0
 8006680:	d14d      	bne.n	800671e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	689b      	ldr	r3, [r3, #8]
 8006686:	4618      	mov	r0, r3
 8006688:	f000 ff92 	bl	80075b0 <xTaskPriorityDisinherit>
 800668c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	2200      	movs	r2, #0
 8006692:	609a      	str	r2, [r3, #8]
 8006694:	e043      	b.n	800671e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	2b00      	cmp	r3, #0
 800669a:	d119      	bne.n	80066d0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	6858      	ldr	r0, [r3, #4]
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066a4:	461a      	mov	r2, r3
 80066a6:	68b9      	ldr	r1, [r7, #8]
 80066a8:	f001 fff2 	bl	8008690 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	685a      	ldr	r2, [r3, #4]
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066b4:	441a      	add	r2, r3
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	685a      	ldr	r2, [r3, #4]
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	689b      	ldr	r3, [r3, #8]
 80066c2:	429a      	cmp	r2, r3
 80066c4:	d32b      	bcc.n	800671e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	681a      	ldr	r2, [r3, #0]
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	605a      	str	r2, [r3, #4]
 80066ce:	e026      	b.n	800671e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	68d8      	ldr	r0, [r3, #12]
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066d8:	461a      	mov	r2, r3
 80066da:	68b9      	ldr	r1, [r7, #8]
 80066dc:	f001 ffd8 	bl	8008690 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	68da      	ldr	r2, [r3, #12]
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066e8:	425b      	negs	r3, r3
 80066ea:	441a      	add	r2, r3
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	68da      	ldr	r2, [r3, #12]
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	429a      	cmp	r2, r3
 80066fa:	d207      	bcs.n	800670c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	689a      	ldr	r2, [r3, #8]
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006704:	425b      	negs	r3, r3
 8006706:	441a      	add	r2, r3
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	2b02      	cmp	r3, #2
 8006710:	d105      	bne.n	800671e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006712:	693b      	ldr	r3, [r7, #16]
 8006714:	2b00      	cmp	r3, #0
 8006716:	d002      	beq.n	800671e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006718:	693b      	ldr	r3, [r7, #16]
 800671a:	3b01      	subs	r3, #1
 800671c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800671e:	693b      	ldr	r3, [r7, #16]
 8006720:	1c5a      	adds	r2, r3, #1
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006726:	697b      	ldr	r3, [r7, #20]
}
 8006728:	4618      	mov	r0, r3
 800672a:	3718      	adds	r7, #24
 800672c:	46bd      	mov	sp, r7
 800672e:	bd80      	pop	{r7, pc}

08006730 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006730:	b580      	push	{r7, lr}
 8006732:	b082      	sub	sp, #8
 8006734:	af00      	add	r7, sp, #0
 8006736:	6078      	str	r0, [r7, #4]
 8006738:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800673e:	2b00      	cmp	r3, #0
 8006740:	d018      	beq.n	8006774 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	68da      	ldr	r2, [r3, #12]
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800674a:	441a      	add	r2, r3
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	68da      	ldr	r2, [r3, #12]
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	689b      	ldr	r3, [r3, #8]
 8006758:	429a      	cmp	r2, r3
 800675a:	d303      	bcc.n	8006764 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681a      	ldr	r2, [r3, #0]
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	68d9      	ldr	r1, [r3, #12]
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800676c:	461a      	mov	r2, r3
 800676e:	6838      	ldr	r0, [r7, #0]
 8006770:	f001 ff8e 	bl	8008690 <memcpy>
	}
}
 8006774:	bf00      	nop
 8006776:	3708      	adds	r7, #8
 8006778:	46bd      	mov	sp, r7
 800677a:	bd80      	pop	{r7, pc}

0800677c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800677c:	b580      	push	{r7, lr}
 800677e:	b084      	sub	sp, #16
 8006780:	af00      	add	r7, sp, #0
 8006782:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006784:	f001 fc4e 	bl	8008024 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800678e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006790:	e011      	b.n	80067b6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006796:	2b00      	cmp	r3, #0
 8006798:	d012      	beq.n	80067c0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	3324      	adds	r3, #36	; 0x24
 800679e:	4618      	mov	r0, r3
 80067a0:	f000 fd2a 	bl	80071f8 <xTaskRemoveFromEventList>
 80067a4:	4603      	mov	r3, r0
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d001      	beq.n	80067ae <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80067aa:	f000 fe01 	bl	80073b0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80067ae:	7bfb      	ldrb	r3, [r7, #15]
 80067b0:	3b01      	subs	r3, #1
 80067b2:	b2db      	uxtb	r3, r3
 80067b4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80067b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	dce9      	bgt.n	8006792 <prvUnlockQueue+0x16>
 80067be:	e000      	b.n	80067c2 <prvUnlockQueue+0x46>
					break;
 80067c0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	22ff      	movs	r2, #255	; 0xff
 80067c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80067ca:	f001 fc5b 	bl	8008084 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80067ce:	f001 fc29 	bl	8008024 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80067d8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80067da:	e011      	b.n	8006800 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	691b      	ldr	r3, [r3, #16]
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d012      	beq.n	800680a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	3310      	adds	r3, #16
 80067e8:	4618      	mov	r0, r3
 80067ea:	f000 fd05 	bl	80071f8 <xTaskRemoveFromEventList>
 80067ee:	4603      	mov	r3, r0
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d001      	beq.n	80067f8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80067f4:	f000 fddc 	bl	80073b0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80067f8:	7bbb      	ldrb	r3, [r7, #14]
 80067fa:	3b01      	subs	r3, #1
 80067fc:	b2db      	uxtb	r3, r3
 80067fe:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006800:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006804:	2b00      	cmp	r3, #0
 8006806:	dce9      	bgt.n	80067dc <prvUnlockQueue+0x60>
 8006808:	e000      	b.n	800680c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800680a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	22ff      	movs	r2, #255	; 0xff
 8006810:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006814:	f001 fc36 	bl	8008084 <vPortExitCritical>
}
 8006818:	bf00      	nop
 800681a:	3710      	adds	r7, #16
 800681c:	46bd      	mov	sp, r7
 800681e:	bd80      	pop	{r7, pc}

08006820 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006820:	b580      	push	{r7, lr}
 8006822:	b084      	sub	sp, #16
 8006824:	af00      	add	r7, sp, #0
 8006826:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006828:	f001 fbfc 	bl	8008024 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006830:	2b00      	cmp	r3, #0
 8006832:	d102      	bne.n	800683a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006834:	2301      	movs	r3, #1
 8006836:	60fb      	str	r3, [r7, #12]
 8006838:	e001      	b.n	800683e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800683a:	2300      	movs	r3, #0
 800683c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800683e:	f001 fc21 	bl	8008084 <vPortExitCritical>

	return xReturn;
 8006842:	68fb      	ldr	r3, [r7, #12]
}
 8006844:	4618      	mov	r0, r3
 8006846:	3710      	adds	r7, #16
 8006848:	46bd      	mov	sp, r7
 800684a:	bd80      	pop	{r7, pc}

0800684c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800684c:	b580      	push	{r7, lr}
 800684e:	b084      	sub	sp, #16
 8006850:	af00      	add	r7, sp, #0
 8006852:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006854:	f001 fbe6 	bl	8008024 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006860:	429a      	cmp	r2, r3
 8006862:	d102      	bne.n	800686a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006864:	2301      	movs	r3, #1
 8006866:	60fb      	str	r3, [r7, #12]
 8006868:	e001      	b.n	800686e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800686a:	2300      	movs	r3, #0
 800686c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800686e:	f001 fc09 	bl	8008084 <vPortExitCritical>

	return xReturn;
 8006872:	68fb      	ldr	r3, [r7, #12]
}
 8006874:	4618      	mov	r0, r3
 8006876:	3710      	adds	r7, #16
 8006878:	46bd      	mov	sp, r7
 800687a:	bd80      	pop	{r7, pc}

0800687c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800687c:	b480      	push	{r7}
 800687e:	b085      	sub	sp, #20
 8006880:	af00      	add	r7, sp, #0
 8006882:	6078      	str	r0, [r7, #4]
 8006884:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006886:	2300      	movs	r3, #0
 8006888:	60fb      	str	r3, [r7, #12]
 800688a:	e014      	b.n	80068b6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800688c:	4a0f      	ldr	r2, [pc, #60]	; (80068cc <vQueueAddToRegistry+0x50>)
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006894:	2b00      	cmp	r3, #0
 8006896:	d10b      	bne.n	80068b0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006898:	490c      	ldr	r1, [pc, #48]	; (80068cc <vQueueAddToRegistry+0x50>)
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	683a      	ldr	r2, [r7, #0]
 800689e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80068a2:	4a0a      	ldr	r2, [pc, #40]	; (80068cc <vQueueAddToRegistry+0x50>)
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	00db      	lsls	r3, r3, #3
 80068a8:	4413      	add	r3, r2
 80068aa:	687a      	ldr	r2, [r7, #4]
 80068ac:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80068ae:	e006      	b.n	80068be <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	3301      	adds	r3, #1
 80068b4:	60fb      	str	r3, [r7, #12]
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	2b07      	cmp	r3, #7
 80068ba:	d9e7      	bls.n	800688c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80068bc:	bf00      	nop
 80068be:	bf00      	nop
 80068c0:	3714      	adds	r7, #20
 80068c2:	46bd      	mov	sp, r7
 80068c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c8:	4770      	bx	lr
 80068ca:	bf00      	nop
 80068cc:	20004be0 	.word	0x20004be0

080068d0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80068d0:	b580      	push	{r7, lr}
 80068d2:	b086      	sub	sp, #24
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	60f8      	str	r0, [r7, #12]
 80068d8:	60b9      	str	r1, [r7, #8]
 80068da:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80068e0:	f001 fba0 	bl	8008024 <vPortEnterCritical>
 80068e4:	697b      	ldr	r3, [r7, #20]
 80068e6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80068ea:	b25b      	sxtb	r3, r3
 80068ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068f0:	d103      	bne.n	80068fa <vQueueWaitForMessageRestricted+0x2a>
 80068f2:	697b      	ldr	r3, [r7, #20]
 80068f4:	2200      	movs	r2, #0
 80068f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80068fa:	697b      	ldr	r3, [r7, #20]
 80068fc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006900:	b25b      	sxtb	r3, r3
 8006902:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006906:	d103      	bne.n	8006910 <vQueueWaitForMessageRestricted+0x40>
 8006908:	697b      	ldr	r3, [r7, #20]
 800690a:	2200      	movs	r2, #0
 800690c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006910:	f001 fbb8 	bl	8008084 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006914:	697b      	ldr	r3, [r7, #20]
 8006916:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006918:	2b00      	cmp	r3, #0
 800691a:	d106      	bne.n	800692a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800691c:	697b      	ldr	r3, [r7, #20]
 800691e:	3324      	adds	r3, #36	; 0x24
 8006920:	687a      	ldr	r2, [r7, #4]
 8006922:	68b9      	ldr	r1, [r7, #8]
 8006924:	4618      	mov	r0, r3
 8006926:	f000 fc3b 	bl	80071a0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800692a:	6978      	ldr	r0, [r7, #20]
 800692c:	f7ff ff26 	bl	800677c <prvUnlockQueue>
	}
 8006930:	bf00      	nop
 8006932:	3718      	adds	r7, #24
 8006934:	46bd      	mov	sp, r7
 8006936:	bd80      	pop	{r7, pc}

08006938 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006938:	b580      	push	{r7, lr}
 800693a:	b08e      	sub	sp, #56	; 0x38
 800693c:	af04      	add	r7, sp, #16
 800693e:	60f8      	str	r0, [r7, #12]
 8006940:	60b9      	str	r1, [r7, #8]
 8006942:	607a      	str	r2, [r7, #4]
 8006944:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006946:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006948:	2b00      	cmp	r3, #0
 800694a:	d10a      	bne.n	8006962 <xTaskCreateStatic+0x2a>
	__asm volatile
 800694c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006950:	f383 8811 	msr	BASEPRI, r3
 8006954:	f3bf 8f6f 	isb	sy
 8006958:	f3bf 8f4f 	dsb	sy
 800695c:	623b      	str	r3, [r7, #32]
}
 800695e:	bf00      	nop
 8006960:	e7fe      	b.n	8006960 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006962:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006964:	2b00      	cmp	r3, #0
 8006966:	d10a      	bne.n	800697e <xTaskCreateStatic+0x46>
	__asm volatile
 8006968:	f04f 0350 	mov.w	r3, #80	; 0x50
 800696c:	f383 8811 	msr	BASEPRI, r3
 8006970:	f3bf 8f6f 	isb	sy
 8006974:	f3bf 8f4f 	dsb	sy
 8006978:	61fb      	str	r3, [r7, #28]
}
 800697a:	bf00      	nop
 800697c:	e7fe      	b.n	800697c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800697e:	235c      	movs	r3, #92	; 0x5c
 8006980:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006982:	693b      	ldr	r3, [r7, #16]
 8006984:	2b5c      	cmp	r3, #92	; 0x5c
 8006986:	d00a      	beq.n	800699e <xTaskCreateStatic+0x66>
	__asm volatile
 8006988:	f04f 0350 	mov.w	r3, #80	; 0x50
 800698c:	f383 8811 	msr	BASEPRI, r3
 8006990:	f3bf 8f6f 	isb	sy
 8006994:	f3bf 8f4f 	dsb	sy
 8006998:	61bb      	str	r3, [r7, #24]
}
 800699a:	bf00      	nop
 800699c:	e7fe      	b.n	800699c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800699e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80069a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d01e      	beq.n	80069e4 <xTaskCreateStatic+0xac>
 80069a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d01b      	beq.n	80069e4 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80069ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069ae:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80069b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069b2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80069b4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80069b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069b8:	2202      	movs	r2, #2
 80069ba:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80069be:	2300      	movs	r3, #0
 80069c0:	9303      	str	r3, [sp, #12]
 80069c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069c4:	9302      	str	r3, [sp, #8]
 80069c6:	f107 0314 	add.w	r3, r7, #20
 80069ca:	9301      	str	r3, [sp, #4]
 80069cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069ce:	9300      	str	r3, [sp, #0]
 80069d0:	683b      	ldr	r3, [r7, #0]
 80069d2:	687a      	ldr	r2, [r7, #4]
 80069d4:	68b9      	ldr	r1, [r7, #8]
 80069d6:	68f8      	ldr	r0, [r7, #12]
 80069d8:	f000 f850 	bl	8006a7c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80069dc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80069de:	f000 f8dd 	bl	8006b9c <prvAddNewTaskToReadyList>
 80069e2:	e001      	b.n	80069e8 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80069e4:	2300      	movs	r3, #0
 80069e6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80069e8:	697b      	ldr	r3, [r7, #20]
	}
 80069ea:	4618      	mov	r0, r3
 80069ec:	3728      	adds	r7, #40	; 0x28
 80069ee:	46bd      	mov	sp, r7
 80069f0:	bd80      	pop	{r7, pc}

080069f2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80069f2:	b580      	push	{r7, lr}
 80069f4:	b08c      	sub	sp, #48	; 0x30
 80069f6:	af04      	add	r7, sp, #16
 80069f8:	60f8      	str	r0, [r7, #12]
 80069fa:	60b9      	str	r1, [r7, #8]
 80069fc:	603b      	str	r3, [r7, #0]
 80069fe:	4613      	mov	r3, r2
 8006a00:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006a02:	88fb      	ldrh	r3, [r7, #6]
 8006a04:	009b      	lsls	r3, r3, #2
 8006a06:	4618      	mov	r0, r3
 8006a08:	f001 fc2e 	bl	8008268 <pvPortMalloc>
 8006a0c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006a0e:	697b      	ldr	r3, [r7, #20]
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d00e      	beq.n	8006a32 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006a14:	205c      	movs	r0, #92	; 0x5c
 8006a16:	f001 fc27 	bl	8008268 <pvPortMalloc>
 8006a1a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006a1c:	69fb      	ldr	r3, [r7, #28]
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d003      	beq.n	8006a2a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006a22:	69fb      	ldr	r3, [r7, #28]
 8006a24:	697a      	ldr	r2, [r7, #20]
 8006a26:	631a      	str	r2, [r3, #48]	; 0x30
 8006a28:	e005      	b.n	8006a36 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006a2a:	6978      	ldr	r0, [r7, #20]
 8006a2c:	f001 fce8 	bl	8008400 <vPortFree>
 8006a30:	e001      	b.n	8006a36 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006a32:	2300      	movs	r3, #0
 8006a34:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006a36:	69fb      	ldr	r3, [r7, #28]
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d017      	beq.n	8006a6c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006a3c:	69fb      	ldr	r3, [r7, #28]
 8006a3e:	2200      	movs	r2, #0
 8006a40:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006a44:	88fa      	ldrh	r2, [r7, #6]
 8006a46:	2300      	movs	r3, #0
 8006a48:	9303      	str	r3, [sp, #12]
 8006a4a:	69fb      	ldr	r3, [r7, #28]
 8006a4c:	9302      	str	r3, [sp, #8]
 8006a4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a50:	9301      	str	r3, [sp, #4]
 8006a52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a54:	9300      	str	r3, [sp, #0]
 8006a56:	683b      	ldr	r3, [r7, #0]
 8006a58:	68b9      	ldr	r1, [r7, #8]
 8006a5a:	68f8      	ldr	r0, [r7, #12]
 8006a5c:	f000 f80e 	bl	8006a7c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006a60:	69f8      	ldr	r0, [r7, #28]
 8006a62:	f000 f89b 	bl	8006b9c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006a66:	2301      	movs	r3, #1
 8006a68:	61bb      	str	r3, [r7, #24]
 8006a6a:	e002      	b.n	8006a72 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006a6c:	f04f 33ff 	mov.w	r3, #4294967295
 8006a70:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006a72:	69bb      	ldr	r3, [r7, #24]
	}
 8006a74:	4618      	mov	r0, r3
 8006a76:	3720      	adds	r7, #32
 8006a78:	46bd      	mov	sp, r7
 8006a7a:	bd80      	pop	{r7, pc}

08006a7c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006a7c:	b580      	push	{r7, lr}
 8006a7e:	b088      	sub	sp, #32
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	60f8      	str	r0, [r7, #12]
 8006a84:	60b9      	str	r1, [r7, #8]
 8006a86:	607a      	str	r2, [r7, #4]
 8006a88:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006a8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a8c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	009b      	lsls	r3, r3, #2
 8006a92:	461a      	mov	r2, r3
 8006a94:	21a5      	movs	r1, #165	; 0xa5
 8006a96:	f001 fe09 	bl	80086ac <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006a9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a9c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006aa4:	3b01      	subs	r3, #1
 8006aa6:	009b      	lsls	r3, r3, #2
 8006aa8:	4413      	add	r3, r2
 8006aaa:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006aac:	69bb      	ldr	r3, [r7, #24]
 8006aae:	f023 0307 	bic.w	r3, r3, #7
 8006ab2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006ab4:	69bb      	ldr	r3, [r7, #24]
 8006ab6:	f003 0307 	and.w	r3, r3, #7
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d00a      	beq.n	8006ad4 <prvInitialiseNewTask+0x58>
	__asm volatile
 8006abe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ac2:	f383 8811 	msr	BASEPRI, r3
 8006ac6:	f3bf 8f6f 	isb	sy
 8006aca:	f3bf 8f4f 	dsb	sy
 8006ace:	617b      	str	r3, [r7, #20]
}
 8006ad0:	bf00      	nop
 8006ad2:	e7fe      	b.n	8006ad2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006ad4:	68bb      	ldr	r3, [r7, #8]
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d01f      	beq.n	8006b1a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006ada:	2300      	movs	r3, #0
 8006adc:	61fb      	str	r3, [r7, #28]
 8006ade:	e012      	b.n	8006b06 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006ae0:	68ba      	ldr	r2, [r7, #8]
 8006ae2:	69fb      	ldr	r3, [r7, #28]
 8006ae4:	4413      	add	r3, r2
 8006ae6:	7819      	ldrb	r1, [r3, #0]
 8006ae8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006aea:	69fb      	ldr	r3, [r7, #28]
 8006aec:	4413      	add	r3, r2
 8006aee:	3334      	adds	r3, #52	; 0x34
 8006af0:	460a      	mov	r2, r1
 8006af2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006af4:	68ba      	ldr	r2, [r7, #8]
 8006af6:	69fb      	ldr	r3, [r7, #28]
 8006af8:	4413      	add	r3, r2
 8006afa:	781b      	ldrb	r3, [r3, #0]
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d006      	beq.n	8006b0e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006b00:	69fb      	ldr	r3, [r7, #28]
 8006b02:	3301      	adds	r3, #1
 8006b04:	61fb      	str	r3, [r7, #28]
 8006b06:	69fb      	ldr	r3, [r7, #28]
 8006b08:	2b0f      	cmp	r3, #15
 8006b0a:	d9e9      	bls.n	8006ae0 <prvInitialiseNewTask+0x64>
 8006b0c:	e000      	b.n	8006b10 <prvInitialiseNewTask+0x94>
			{
				break;
 8006b0e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006b10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b12:	2200      	movs	r2, #0
 8006b14:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006b18:	e003      	b.n	8006b22 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006b1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b1c:	2200      	movs	r2, #0
 8006b1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006b22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b24:	2b37      	cmp	r3, #55	; 0x37
 8006b26:	d901      	bls.n	8006b2c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006b28:	2337      	movs	r3, #55	; 0x37
 8006b2a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006b2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b2e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006b30:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006b32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b34:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006b36:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006b38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b3a:	2200      	movs	r2, #0
 8006b3c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006b3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b40:	3304      	adds	r3, #4
 8006b42:	4618      	mov	r0, r3
 8006b44:	f7ff f978 	bl	8005e38 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006b48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b4a:	3318      	adds	r3, #24
 8006b4c:	4618      	mov	r0, r3
 8006b4e:	f7ff f973 	bl	8005e38 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006b52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b56:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006b58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b5a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006b5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b60:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006b62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b66:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006b68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b6a:	2200      	movs	r2, #0
 8006b6c:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006b6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b70:	2200      	movs	r2, #0
 8006b72:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006b76:	683a      	ldr	r2, [r7, #0]
 8006b78:	68f9      	ldr	r1, [r7, #12]
 8006b7a:	69b8      	ldr	r0, [r7, #24]
 8006b7c:	f001 f928 	bl	8007dd0 <pxPortInitialiseStack>
 8006b80:	4602      	mov	r2, r0
 8006b82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b84:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006b86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d002      	beq.n	8006b92 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006b8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b8e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b90:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006b92:	bf00      	nop
 8006b94:	3720      	adds	r7, #32
 8006b96:	46bd      	mov	sp, r7
 8006b98:	bd80      	pop	{r7, pc}
	...

08006b9c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006b9c:	b580      	push	{r7, lr}
 8006b9e:	b082      	sub	sp, #8
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006ba4:	f001 fa3e 	bl	8008024 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006ba8:	4b2d      	ldr	r3, [pc, #180]	; (8006c60 <prvAddNewTaskToReadyList+0xc4>)
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	3301      	adds	r3, #1
 8006bae:	4a2c      	ldr	r2, [pc, #176]	; (8006c60 <prvAddNewTaskToReadyList+0xc4>)
 8006bb0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006bb2:	4b2c      	ldr	r3, [pc, #176]	; (8006c64 <prvAddNewTaskToReadyList+0xc8>)
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d109      	bne.n	8006bce <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006bba:	4a2a      	ldr	r2, [pc, #168]	; (8006c64 <prvAddNewTaskToReadyList+0xc8>)
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006bc0:	4b27      	ldr	r3, [pc, #156]	; (8006c60 <prvAddNewTaskToReadyList+0xc4>)
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	2b01      	cmp	r3, #1
 8006bc6:	d110      	bne.n	8006bea <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006bc8:	f000 fc16 	bl	80073f8 <prvInitialiseTaskLists>
 8006bcc:	e00d      	b.n	8006bea <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006bce:	4b26      	ldr	r3, [pc, #152]	; (8006c68 <prvAddNewTaskToReadyList+0xcc>)
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d109      	bne.n	8006bea <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006bd6:	4b23      	ldr	r3, [pc, #140]	; (8006c64 <prvAddNewTaskToReadyList+0xc8>)
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006be0:	429a      	cmp	r2, r3
 8006be2:	d802      	bhi.n	8006bea <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006be4:	4a1f      	ldr	r2, [pc, #124]	; (8006c64 <prvAddNewTaskToReadyList+0xc8>)
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006bea:	4b20      	ldr	r3, [pc, #128]	; (8006c6c <prvAddNewTaskToReadyList+0xd0>)
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	3301      	adds	r3, #1
 8006bf0:	4a1e      	ldr	r2, [pc, #120]	; (8006c6c <prvAddNewTaskToReadyList+0xd0>)
 8006bf2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006bf4:	4b1d      	ldr	r3, [pc, #116]	; (8006c6c <prvAddNewTaskToReadyList+0xd0>)
 8006bf6:	681a      	ldr	r2, [r3, #0]
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c00:	4b1b      	ldr	r3, [pc, #108]	; (8006c70 <prvAddNewTaskToReadyList+0xd4>)
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	429a      	cmp	r2, r3
 8006c06:	d903      	bls.n	8006c10 <prvAddNewTaskToReadyList+0x74>
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c0c:	4a18      	ldr	r2, [pc, #96]	; (8006c70 <prvAddNewTaskToReadyList+0xd4>)
 8006c0e:	6013      	str	r3, [r2, #0]
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c14:	4613      	mov	r3, r2
 8006c16:	009b      	lsls	r3, r3, #2
 8006c18:	4413      	add	r3, r2
 8006c1a:	009b      	lsls	r3, r3, #2
 8006c1c:	4a15      	ldr	r2, [pc, #84]	; (8006c74 <prvAddNewTaskToReadyList+0xd8>)
 8006c1e:	441a      	add	r2, r3
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	3304      	adds	r3, #4
 8006c24:	4619      	mov	r1, r3
 8006c26:	4610      	mov	r0, r2
 8006c28:	f7ff f913 	bl	8005e52 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006c2c:	f001 fa2a 	bl	8008084 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006c30:	4b0d      	ldr	r3, [pc, #52]	; (8006c68 <prvAddNewTaskToReadyList+0xcc>)
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d00e      	beq.n	8006c56 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006c38:	4b0a      	ldr	r3, [pc, #40]	; (8006c64 <prvAddNewTaskToReadyList+0xc8>)
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c42:	429a      	cmp	r2, r3
 8006c44:	d207      	bcs.n	8006c56 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006c46:	4b0c      	ldr	r3, [pc, #48]	; (8006c78 <prvAddNewTaskToReadyList+0xdc>)
 8006c48:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c4c:	601a      	str	r2, [r3, #0]
 8006c4e:	f3bf 8f4f 	dsb	sy
 8006c52:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006c56:	bf00      	nop
 8006c58:	3708      	adds	r7, #8
 8006c5a:	46bd      	mov	sp, r7
 8006c5c:	bd80      	pop	{r7, pc}
 8006c5e:	bf00      	nop
 8006c60:	20000c24 	.word	0x20000c24
 8006c64:	20000750 	.word	0x20000750
 8006c68:	20000c30 	.word	0x20000c30
 8006c6c:	20000c40 	.word	0x20000c40
 8006c70:	20000c2c 	.word	0x20000c2c
 8006c74:	20000754 	.word	0x20000754
 8006c78:	e000ed04 	.word	0xe000ed04

08006c7c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006c7c:	b580      	push	{r7, lr}
 8006c7e:	b084      	sub	sp, #16
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006c84:	2300      	movs	r3, #0
 8006c86:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d017      	beq.n	8006cbe <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006c8e:	4b13      	ldr	r3, [pc, #76]	; (8006cdc <vTaskDelay+0x60>)
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d00a      	beq.n	8006cac <vTaskDelay+0x30>
	__asm volatile
 8006c96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c9a:	f383 8811 	msr	BASEPRI, r3
 8006c9e:	f3bf 8f6f 	isb	sy
 8006ca2:	f3bf 8f4f 	dsb	sy
 8006ca6:	60bb      	str	r3, [r7, #8]
}
 8006ca8:	bf00      	nop
 8006caa:	e7fe      	b.n	8006caa <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006cac:	f000 f880 	bl	8006db0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006cb0:	2100      	movs	r1, #0
 8006cb2:	6878      	ldr	r0, [r7, #4]
 8006cb4:	f000 fcea 	bl	800768c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006cb8:	f000 f888 	bl	8006dcc <xTaskResumeAll>
 8006cbc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d107      	bne.n	8006cd4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8006cc4:	4b06      	ldr	r3, [pc, #24]	; (8006ce0 <vTaskDelay+0x64>)
 8006cc6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006cca:	601a      	str	r2, [r3, #0]
 8006ccc:	f3bf 8f4f 	dsb	sy
 8006cd0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006cd4:	bf00      	nop
 8006cd6:	3710      	adds	r7, #16
 8006cd8:	46bd      	mov	sp, r7
 8006cda:	bd80      	pop	{r7, pc}
 8006cdc:	20000c4c 	.word	0x20000c4c
 8006ce0:	e000ed04 	.word	0xe000ed04

08006ce4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006ce4:	b580      	push	{r7, lr}
 8006ce6:	b08a      	sub	sp, #40	; 0x28
 8006ce8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006cea:	2300      	movs	r3, #0
 8006cec:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006cee:	2300      	movs	r3, #0
 8006cf0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006cf2:	463a      	mov	r2, r7
 8006cf4:	1d39      	adds	r1, r7, #4
 8006cf6:	f107 0308 	add.w	r3, r7, #8
 8006cfa:	4618      	mov	r0, r3
 8006cfc:	f7ff f848 	bl	8005d90 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006d00:	6839      	ldr	r1, [r7, #0]
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	68ba      	ldr	r2, [r7, #8]
 8006d06:	9202      	str	r2, [sp, #8]
 8006d08:	9301      	str	r3, [sp, #4]
 8006d0a:	2300      	movs	r3, #0
 8006d0c:	9300      	str	r3, [sp, #0]
 8006d0e:	2300      	movs	r3, #0
 8006d10:	460a      	mov	r2, r1
 8006d12:	4921      	ldr	r1, [pc, #132]	; (8006d98 <vTaskStartScheduler+0xb4>)
 8006d14:	4821      	ldr	r0, [pc, #132]	; (8006d9c <vTaskStartScheduler+0xb8>)
 8006d16:	f7ff fe0f 	bl	8006938 <xTaskCreateStatic>
 8006d1a:	4603      	mov	r3, r0
 8006d1c:	4a20      	ldr	r2, [pc, #128]	; (8006da0 <vTaskStartScheduler+0xbc>)
 8006d1e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006d20:	4b1f      	ldr	r3, [pc, #124]	; (8006da0 <vTaskStartScheduler+0xbc>)
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d002      	beq.n	8006d2e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006d28:	2301      	movs	r3, #1
 8006d2a:	617b      	str	r3, [r7, #20]
 8006d2c:	e001      	b.n	8006d32 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006d2e:	2300      	movs	r3, #0
 8006d30:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006d32:	697b      	ldr	r3, [r7, #20]
 8006d34:	2b01      	cmp	r3, #1
 8006d36:	d102      	bne.n	8006d3e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006d38:	f000 fcfc 	bl	8007734 <xTimerCreateTimerTask>
 8006d3c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006d3e:	697b      	ldr	r3, [r7, #20]
 8006d40:	2b01      	cmp	r3, #1
 8006d42:	d116      	bne.n	8006d72 <vTaskStartScheduler+0x8e>
	__asm volatile
 8006d44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d48:	f383 8811 	msr	BASEPRI, r3
 8006d4c:	f3bf 8f6f 	isb	sy
 8006d50:	f3bf 8f4f 	dsb	sy
 8006d54:	613b      	str	r3, [r7, #16]
}
 8006d56:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006d58:	4b12      	ldr	r3, [pc, #72]	; (8006da4 <vTaskStartScheduler+0xc0>)
 8006d5a:	f04f 32ff 	mov.w	r2, #4294967295
 8006d5e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006d60:	4b11      	ldr	r3, [pc, #68]	; (8006da8 <vTaskStartScheduler+0xc4>)
 8006d62:	2201      	movs	r2, #1
 8006d64:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006d66:	4b11      	ldr	r3, [pc, #68]	; (8006dac <vTaskStartScheduler+0xc8>)
 8006d68:	2200      	movs	r2, #0
 8006d6a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006d6c:	f001 f8b8 	bl	8007ee0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006d70:	e00e      	b.n	8006d90 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006d72:	697b      	ldr	r3, [r7, #20]
 8006d74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d78:	d10a      	bne.n	8006d90 <vTaskStartScheduler+0xac>
	__asm volatile
 8006d7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d7e:	f383 8811 	msr	BASEPRI, r3
 8006d82:	f3bf 8f6f 	isb	sy
 8006d86:	f3bf 8f4f 	dsb	sy
 8006d8a:	60fb      	str	r3, [r7, #12]
}
 8006d8c:	bf00      	nop
 8006d8e:	e7fe      	b.n	8006d8e <vTaskStartScheduler+0xaa>
}
 8006d90:	bf00      	nop
 8006d92:	3718      	adds	r7, #24
 8006d94:	46bd      	mov	sp, r7
 8006d96:	bd80      	pop	{r7, pc}
 8006d98:	08009b5c 	.word	0x08009b5c
 8006d9c:	080073c9 	.word	0x080073c9
 8006da0:	20000c48 	.word	0x20000c48
 8006da4:	20000c44 	.word	0x20000c44
 8006da8:	20000c30 	.word	0x20000c30
 8006dac:	20000c28 	.word	0x20000c28

08006db0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006db0:	b480      	push	{r7}
 8006db2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006db4:	4b04      	ldr	r3, [pc, #16]	; (8006dc8 <vTaskSuspendAll+0x18>)
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	3301      	adds	r3, #1
 8006dba:	4a03      	ldr	r2, [pc, #12]	; (8006dc8 <vTaskSuspendAll+0x18>)
 8006dbc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006dbe:	bf00      	nop
 8006dc0:	46bd      	mov	sp, r7
 8006dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc6:	4770      	bx	lr
 8006dc8:	20000c4c 	.word	0x20000c4c

08006dcc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006dcc:	b580      	push	{r7, lr}
 8006dce:	b084      	sub	sp, #16
 8006dd0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006dd2:	2300      	movs	r3, #0
 8006dd4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006dd6:	2300      	movs	r3, #0
 8006dd8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006dda:	4b42      	ldr	r3, [pc, #264]	; (8006ee4 <xTaskResumeAll+0x118>)
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d10a      	bne.n	8006df8 <xTaskResumeAll+0x2c>
	__asm volatile
 8006de2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006de6:	f383 8811 	msr	BASEPRI, r3
 8006dea:	f3bf 8f6f 	isb	sy
 8006dee:	f3bf 8f4f 	dsb	sy
 8006df2:	603b      	str	r3, [r7, #0]
}
 8006df4:	bf00      	nop
 8006df6:	e7fe      	b.n	8006df6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006df8:	f001 f914 	bl	8008024 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006dfc:	4b39      	ldr	r3, [pc, #228]	; (8006ee4 <xTaskResumeAll+0x118>)
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	3b01      	subs	r3, #1
 8006e02:	4a38      	ldr	r2, [pc, #224]	; (8006ee4 <xTaskResumeAll+0x118>)
 8006e04:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006e06:	4b37      	ldr	r3, [pc, #220]	; (8006ee4 <xTaskResumeAll+0x118>)
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d162      	bne.n	8006ed4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006e0e:	4b36      	ldr	r3, [pc, #216]	; (8006ee8 <xTaskResumeAll+0x11c>)
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d05e      	beq.n	8006ed4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006e16:	e02f      	b.n	8006e78 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006e18:	4b34      	ldr	r3, [pc, #208]	; (8006eec <xTaskResumeAll+0x120>)
 8006e1a:	68db      	ldr	r3, [r3, #12]
 8006e1c:	68db      	ldr	r3, [r3, #12]
 8006e1e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	3318      	adds	r3, #24
 8006e24:	4618      	mov	r0, r3
 8006e26:	f7ff f871 	bl	8005f0c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	3304      	adds	r3, #4
 8006e2e:	4618      	mov	r0, r3
 8006e30:	f7ff f86c 	bl	8005f0c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e38:	4b2d      	ldr	r3, [pc, #180]	; (8006ef0 <xTaskResumeAll+0x124>)
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	429a      	cmp	r2, r3
 8006e3e:	d903      	bls.n	8006e48 <xTaskResumeAll+0x7c>
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e44:	4a2a      	ldr	r2, [pc, #168]	; (8006ef0 <xTaskResumeAll+0x124>)
 8006e46:	6013      	str	r3, [r2, #0]
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e4c:	4613      	mov	r3, r2
 8006e4e:	009b      	lsls	r3, r3, #2
 8006e50:	4413      	add	r3, r2
 8006e52:	009b      	lsls	r3, r3, #2
 8006e54:	4a27      	ldr	r2, [pc, #156]	; (8006ef4 <xTaskResumeAll+0x128>)
 8006e56:	441a      	add	r2, r3
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	3304      	adds	r3, #4
 8006e5c:	4619      	mov	r1, r3
 8006e5e:	4610      	mov	r0, r2
 8006e60:	f7fe fff7 	bl	8005e52 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e68:	4b23      	ldr	r3, [pc, #140]	; (8006ef8 <xTaskResumeAll+0x12c>)
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e6e:	429a      	cmp	r2, r3
 8006e70:	d302      	bcc.n	8006e78 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8006e72:	4b22      	ldr	r3, [pc, #136]	; (8006efc <xTaskResumeAll+0x130>)
 8006e74:	2201      	movs	r2, #1
 8006e76:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006e78:	4b1c      	ldr	r3, [pc, #112]	; (8006eec <xTaskResumeAll+0x120>)
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d1cb      	bne.n	8006e18 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d001      	beq.n	8006e8a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006e86:	f000 fb55 	bl	8007534 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006e8a:	4b1d      	ldr	r3, [pc, #116]	; (8006f00 <xTaskResumeAll+0x134>)
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d010      	beq.n	8006eb8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006e96:	f000 f847 	bl	8006f28 <xTaskIncrementTick>
 8006e9a:	4603      	mov	r3, r0
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d002      	beq.n	8006ea6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8006ea0:	4b16      	ldr	r3, [pc, #88]	; (8006efc <xTaskResumeAll+0x130>)
 8006ea2:	2201      	movs	r2, #1
 8006ea4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	3b01      	subs	r3, #1
 8006eaa:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d1f1      	bne.n	8006e96 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8006eb2:	4b13      	ldr	r3, [pc, #76]	; (8006f00 <xTaskResumeAll+0x134>)
 8006eb4:	2200      	movs	r2, #0
 8006eb6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006eb8:	4b10      	ldr	r3, [pc, #64]	; (8006efc <xTaskResumeAll+0x130>)
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d009      	beq.n	8006ed4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006ec0:	2301      	movs	r3, #1
 8006ec2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006ec4:	4b0f      	ldr	r3, [pc, #60]	; (8006f04 <xTaskResumeAll+0x138>)
 8006ec6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006eca:	601a      	str	r2, [r3, #0]
 8006ecc:	f3bf 8f4f 	dsb	sy
 8006ed0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006ed4:	f001 f8d6 	bl	8008084 <vPortExitCritical>

	return xAlreadyYielded;
 8006ed8:	68bb      	ldr	r3, [r7, #8]
}
 8006eda:	4618      	mov	r0, r3
 8006edc:	3710      	adds	r7, #16
 8006ede:	46bd      	mov	sp, r7
 8006ee0:	bd80      	pop	{r7, pc}
 8006ee2:	bf00      	nop
 8006ee4:	20000c4c 	.word	0x20000c4c
 8006ee8:	20000c24 	.word	0x20000c24
 8006eec:	20000be4 	.word	0x20000be4
 8006ef0:	20000c2c 	.word	0x20000c2c
 8006ef4:	20000754 	.word	0x20000754
 8006ef8:	20000750 	.word	0x20000750
 8006efc:	20000c38 	.word	0x20000c38
 8006f00:	20000c34 	.word	0x20000c34
 8006f04:	e000ed04 	.word	0xe000ed04

08006f08 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006f08:	b480      	push	{r7}
 8006f0a:	b083      	sub	sp, #12
 8006f0c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006f0e:	4b05      	ldr	r3, [pc, #20]	; (8006f24 <xTaskGetTickCount+0x1c>)
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006f14:	687b      	ldr	r3, [r7, #4]
}
 8006f16:	4618      	mov	r0, r3
 8006f18:	370c      	adds	r7, #12
 8006f1a:	46bd      	mov	sp, r7
 8006f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f20:	4770      	bx	lr
 8006f22:	bf00      	nop
 8006f24:	20000c28 	.word	0x20000c28

08006f28 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006f28:	b580      	push	{r7, lr}
 8006f2a:	b086      	sub	sp, #24
 8006f2c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006f2e:	2300      	movs	r3, #0
 8006f30:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006f32:	4b4f      	ldr	r3, [pc, #316]	; (8007070 <xTaskIncrementTick+0x148>)
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	f040 808f 	bne.w	800705a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006f3c:	4b4d      	ldr	r3, [pc, #308]	; (8007074 <xTaskIncrementTick+0x14c>)
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	3301      	adds	r3, #1
 8006f42:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006f44:	4a4b      	ldr	r2, [pc, #300]	; (8007074 <xTaskIncrementTick+0x14c>)
 8006f46:	693b      	ldr	r3, [r7, #16]
 8006f48:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006f4a:	693b      	ldr	r3, [r7, #16]
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d120      	bne.n	8006f92 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006f50:	4b49      	ldr	r3, [pc, #292]	; (8007078 <xTaskIncrementTick+0x150>)
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d00a      	beq.n	8006f70 <xTaskIncrementTick+0x48>
	__asm volatile
 8006f5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f5e:	f383 8811 	msr	BASEPRI, r3
 8006f62:	f3bf 8f6f 	isb	sy
 8006f66:	f3bf 8f4f 	dsb	sy
 8006f6a:	603b      	str	r3, [r7, #0]
}
 8006f6c:	bf00      	nop
 8006f6e:	e7fe      	b.n	8006f6e <xTaskIncrementTick+0x46>
 8006f70:	4b41      	ldr	r3, [pc, #260]	; (8007078 <xTaskIncrementTick+0x150>)
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	60fb      	str	r3, [r7, #12]
 8006f76:	4b41      	ldr	r3, [pc, #260]	; (800707c <xTaskIncrementTick+0x154>)
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	4a3f      	ldr	r2, [pc, #252]	; (8007078 <xTaskIncrementTick+0x150>)
 8006f7c:	6013      	str	r3, [r2, #0]
 8006f7e:	4a3f      	ldr	r2, [pc, #252]	; (800707c <xTaskIncrementTick+0x154>)
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	6013      	str	r3, [r2, #0]
 8006f84:	4b3e      	ldr	r3, [pc, #248]	; (8007080 <xTaskIncrementTick+0x158>)
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	3301      	adds	r3, #1
 8006f8a:	4a3d      	ldr	r2, [pc, #244]	; (8007080 <xTaskIncrementTick+0x158>)
 8006f8c:	6013      	str	r3, [r2, #0]
 8006f8e:	f000 fad1 	bl	8007534 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006f92:	4b3c      	ldr	r3, [pc, #240]	; (8007084 <xTaskIncrementTick+0x15c>)
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	693a      	ldr	r2, [r7, #16]
 8006f98:	429a      	cmp	r2, r3
 8006f9a:	d349      	bcc.n	8007030 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006f9c:	4b36      	ldr	r3, [pc, #216]	; (8007078 <xTaskIncrementTick+0x150>)
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d104      	bne.n	8006fb0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006fa6:	4b37      	ldr	r3, [pc, #220]	; (8007084 <xTaskIncrementTick+0x15c>)
 8006fa8:	f04f 32ff 	mov.w	r2, #4294967295
 8006fac:	601a      	str	r2, [r3, #0]
					break;
 8006fae:	e03f      	b.n	8007030 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006fb0:	4b31      	ldr	r3, [pc, #196]	; (8007078 <xTaskIncrementTick+0x150>)
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	68db      	ldr	r3, [r3, #12]
 8006fb6:	68db      	ldr	r3, [r3, #12]
 8006fb8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006fba:	68bb      	ldr	r3, [r7, #8]
 8006fbc:	685b      	ldr	r3, [r3, #4]
 8006fbe:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006fc0:	693a      	ldr	r2, [r7, #16]
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	429a      	cmp	r2, r3
 8006fc6:	d203      	bcs.n	8006fd0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006fc8:	4a2e      	ldr	r2, [pc, #184]	; (8007084 <xTaskIncrementTick+0x15c>)
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006fce:	e02f      	b.n	8007030 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006fd0:	68bb      	ldr	r3, [r7, #8]
 8006fd2:	3304      	adds	r3, #4
 8006fd4:	4618      	mov	r0, r3
 8006fd6:	f7fe ff99 	bl	8005f0c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006fda:	68bb      	ldr	r3, [r7, #8]
 8006fdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d004      	beq.n	8006fec <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006fe2:	68bb      	ldr	r3, [r7, #8]
 8006fe4:	3318      	adds	r3, #24
 8006fe6:	4618      	mov	r0, r3
 8006fe8:	f7fe ff90 	bl	8005f0c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006fec:	68bb      	ldr	r3, [r7, #8]
 8006fee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ff0:	4b25      	ldr	r3, [pc, #148]	; (8007088 <xTaskIncrementTick+0x160>)
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	429a      	cmp	r2, r3
 8006ff6:	d903      	bls.n	8007000 <xTaskIncrementTick+0xd8>
 8006ff8:	68bb      	ldr	r3, [r7, #8]
 8006ffa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ffc:	4a22      	ldr	r2, [pc, #136]	; (8007088 <xTaskIncrementTick+0x160>)
 8006ffe:	6013      	str	r3, [r2, #0]
 8007000:	68bb      	ldr	r3, [r7, #8]
 8007002:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007004:	4613      	mov	r3, r2
 8007006:	009b      	lsls	r3, r3, #2
 8007008:	4413      	add	r3, r2
 800700a:	009b      	lsls	r3, r3, #2
 800700c:	4a1f      	ldr	r2, [pc, #124]	; (800708c <xTaskIncrementTick+0x164>)
 800700e:	441a      	add	r2, r3
 8007010:	68bb      	ldr	r3, [r7, #8]
 8007012:	3304      	adds	r3, #4
 8007014:	4619      	mov	r1, r3
 8007016:	4610      	mov	r0, r2
 8007018:	f7fe ff1b 	bl	8005e52 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800701c:	68bb      	ldr	r3, [r7, #8]
 800701e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007020:	4b1b      	ldr	r3, [pc, #108]	; (8007090 <xTaskIncrementTick+0x168>)
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007026:	429a      	cmp	r2, r3
 8007028:	d3b8      	bcc.n	8006f9c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800702a:	2301      	movs	r3, #1
 800702c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800702e:	e7b5      	b.n	8006f9c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007030:	4b17      	ldr	r3, [pc, #92]	; (8007090 <xTaskIncrementTick+0x168>)
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007036:	4915      	ldr	r1, [pc, #84]	; (800708c <xTaskIncrementTick+0x164>)
 8007038:	4613      	mov	r3, r2
 800703a:	009b      	lsls	r3, r3, #2
 800703c:	4413      	add	r3, r2
 800703e:	009b      	lsls	r3, r3, #2
 8007040:	440b      	add	r3, r1
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	2b01      	cmp	r3, #1
 8007046:	d901      	bls.n	800704c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8007048:	2301      	movs	r3, #1
 800704a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800704c:	4b11      	ldr	r3, [pc, #68]	; (8007094 <xTaskIncrementTick+0x16c>)
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	2b00      	cmp	r3, #0
 8007052:	d007      	beq.n	8007064 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8007054:	2301      	movs	r3, #1
 8007056:	617b      	str	r3, [r7, #20]
 8007058:	e004      	b.n	8007064 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800705a:	4b0f      	ldr	r3, [pc, #60]	; (8007098 <xTaskIncrementTick+0x170>)
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	3301      	adds	r3, #1
 8007060:	4a0d      	ldr	r2, [pc, #52]	; (8007098 <xTaskIncrementTick+0x170>)
 8007062:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007064:	697b      	ldr	r3, [r7, #20]
}
 8007066:	4618      	mov	r0, r3
 8007068:	3718      	adds	r7, #24
 800706a:	46bd      	mov	sp, r7
 800706c:	bd80      	pop	{r7, pc}
 800706e:	bf00      	nop
 8007070:	20000c4c 	.word	0x20000c4c
 8007074:	20000c28 	.word	0x20000c28
 8007078:	20000bdc 	.word	0x20000bdc
 800707c:	20000be0 	.word	0x20000be0
 8007080:	20000c3c 	.word	0x20000c3c
 8007084:	20000c44 	.word	0x20000c44
 8007088:	20000c2c 	.word	0x20000c2c
 800708c:	20000754 	.word	0x20000754
 8007090:	20000750 	.word	0x20000750
 8007094:	20000c38 	.word	0x20000c38
 8007098:	20000c34 	.word	0x20000c34

0800709c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800709c:	b480      	push	{r7}
 800709e:	b085      	sub	sp, #20
 80070a0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80070a2:	4b28      	ldr	r3, [pc, #160]	; (8007144 <vTaskSwitchContext+0xa8>)
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d003      	beq.n	80070b2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80070aa:	4b27      	ldr	r3, [pc, #156]	; (8007148 <vTaskSwitchContext+0xac>)
 80070ac:	2201      	movs	r2, #1
 80070ae:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80070b0:	e041      	b.n	8007136 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 80070b2:	4b25      	ldr	r3, [pc, #148]	; (8007148 <vTaskSwitchContext+0xac>)
 80070b4:	2200      	movs	r2, #0
 80070b6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80070b8:	4b24      	ldr	r3, [pc, #144]	; (800714c <vTaskSwitchContext+0xb0>)
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	60fb      	str	r3, [r7, #12]
 80070be:	e010      	b.n	80070e2 <vTaskSwitchContext+0x46>
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d10a      	bne.n	80070dc <vTaskSwitchContext+0x40>
	__asm volatile
 80070c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070ca:	f383 8811 	msr	BASEPRI, r3
 80070ce:	f3bf 8f6f 	isb	sy
 80070d2:	f3bf 8f4f 	dsb	sy
 80070d6:	607b      	str	r3, [r7, #4]
}
 80070d8:	bf00      	nop
 80070da:	e7fe      	b.n	80070da <vTaskSwitchContext+0x3e>
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	3b01      	subs	r3, #1
 80070e0:	60fb      	str	r3, [r7, #12]
 80070e2:	491b      	ldr	r1, [pc, #108]	; (8007150 <vTaskSwitchContext+0xb4>)
 80070e4:	68fa      	ldr	r2, [r7, #12]
 80070e6:	4613      	mov	r3, r2
 80070e8:	009b      	lsls	r3, r3, #2
 80070ea:	4413      	add	r3, r2
 80070ec:	009b      	lsls	r3, r3, #2
 80070ee:	440b      	add	r3, r1
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d0e4      	beq.n	80070c0 <vTaskSwitchContext+0x24>
 80070f6:	68fa      	ldr	r2, [r7, #12]
 80070f8:	4613      	mov	r3, r2
 80070fa:	009b      	lsls	r3, r3, #2
 80070fc:	4413      	add	r3, r2
 80070fe:	009b      	lsls	r3, r3, #2
 8007100:	4a13      	ldr	r2, [pc, #76]	; (8007150 <vTaskSwitchContext+0xb4>)
 8007102:	4413      	add	r3, r2
 8007104:	60bb      	str	r3, [r7, #8]
 8007106:	68bb      	ldr	r3, [r7, #8]
 8007108:	685b      	ldr	r3, [r3, #4]
 800710a:	685a      	ldr	r2, [r3, #4]
 800710c:	68bb      	ldr	r3, [r7, #8]
 800710e:	605a      	str	r2, [r3, #4]
 8007110:	68bb      	ldr	r3, [r7, #8]
 8007112:	685a      	ldr	r2, [r3, #4]
 8007114:	68bb      	ldr	r3, [r7, #8]
 8007116:	3308      	adds	r3, #8
 8007118:	429a      	cmp	r2, r3
 800711a:	d104      	bne.n	8007126 <vTaskSwitchContext+0x8a>
 800711c:	68bb      	ldr	r3, [r7, #8]
 800711e:	685b      	ldr	r3, [r3, #4]
 8007120:	685a      	ldr	r2, [r3, #4]
 8007122:	68bb      	ldr	r3, [r7, #8]
 8007124:	605a      	str	r2, [r3, #4]
 8007126:	68bb      	ldr	r3, [r7, #8]
 8007128:	685b      	ldr	r3, [r3, #4]
 800712a:	68db      	ldr	r3, [r3, #12]
 800712c:	4a09      	ldr	r2, [pc, #36]	; (8007154 <vTaskSwitchContext+0xb8>)
 800712e:	6013      	str	r3, [r2, #0]
 8007130:	4a06      	ldr	r2, [pc, #24]	; (800714c <vTaskSwitchContext+0xb0>)
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	6013      	str	r3, [r2, #0]
}
 8007136:	bf00      	nop
 8007138:	3714      	adds	r7, #20
 800713a:	46bd      	mov	sp, r7
 800713c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007140:	4770      	bx	lr
 8007142:	bf00      	nop
 8007144:	20000c4c 	.word	0x20000c4c
 8007148:	20000c38 	.word	0x20000c38
 800714c:	20000c2c 	.word	0x20000c2c
 8007150:	20000754 	.word	0x20000754
 8007154:	20000750 	.word	0x20000750

08007158 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007158:	b580      	push	{r7, lr}
 800715a:	b084      	sub	sp, #16
 800715c:	af00      	add	r7, sp, #0
 800715e:	6078      	str	r0, [r7, #4]
 8007160:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	2b00      	cmp	r3, #0
 8007166:	d10a      	bne.n	800717e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8007168:	f04f 0350 	mov.w	r3, #80	; 0x50
 800716c:	f383 8811 	msr	BASEPRI, r3
 8007170:	f3bf 8f6f 	isb	sy
 8007174:	f3bf 8f4f 	dsb	sy
 8007178:	60fb      	str	r3, [r7, #12]
}
 800717a:	bf00      	nop
 800717c:	e7fe      	b.n	800717c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800717e:	4b07      	ldr	r3, [pc, #28]	; (800719c <vTaskPlaceOnEventList+0x44>)
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	3318      	adds	r3, #24
 8007184:	4619      	mov	r1, r3
 8007186:	6878      	ldr	r0, [r7, #4]
 8007188:	f7fe fe87 	bl	8005e9a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800718c:	2101      	movs	r1, #1
 800718e:	6838      	ldr	r0, [r7, #0]
 8007190:	f000 fa7c 	bl	800768c <prvAddCurrentTaskToDelayedList>
}
 8007194:	bf00      	nop
 8007196:	3710      	adds	r7, #16
 8007198:	46bd      	mov	sp, r7
 800719a:	bd80      	pop	{r7, pc}
 800719c:	20000750 	.word	0x20000750

080071a0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80071a0:	b580      	push	{r7, lr}
 80071a2:	b086      	sub	sp, #24
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	60f8      	str	r0, [r7, #12]
 80071a8:	60b9      	str	r1, [r7, #8]
 80071aa:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d10a      	bne.n	80071c8 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80071b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071b6:	f383 8811 	msr	BASEPRI, r3
 80071ba:	f3bf 8f6f 	isb	sy
 80071be:	f3bf 8f4f 	dsb	sy
 80071c2:	617b      	str	r3, [r7, #20]
}
 80071c4:	bf00      	nop
 80071c6:	e7fe      	b.n	80071c6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80071c8:	4b0a      	ldr	r3, [pc, #40]	; (80071f4 <vTaskPlaceOnEventListRestricted+0x54>)
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	3318      	adds	r3, #24
 80071ce:	4619      	mov	r1, r3
 80071d0:	68f8      	ldr	r0, [r7, #12]
 80071d2:	f7fe fe3e 	bl	8005e52 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d002      	beq.n	80071e2 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80071dc:	f04f 33ff 	mov.w	r3, #4294967295
 80071e0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80071e2:	6879      	ldr	r1, [r7, #4]
 80071e4:	68b8      	ldr	r0, [r7, #8]
 80071e6:	f000 fa51 	bl	800768c <prvAddCurrentTaskToDelayedList>
	}
 80071ea:	bf00      	nop
 80071ec:	3718      	adds	r7, #24
 80071ee:	46bd      	mov	sp, r7
 80071f0:	bd80      	pop	{r7, pc}
 80071f2:	bf00      	nop
 80071f4:	20000750 	.word	0x20000750

080071f8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80071f8:	b580      	push	{r7, lr}
 80071fa:	b086      	sub	sp, #24
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	68db      	ldr	r3, [r3, #12]
 8007204:	68db      	ldr	r3, [r3, #12]
 8007206:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007208:	693b      	ldr	r3, [r7, #16]
 800720a:	2b00      	cmp	r3, #0
 800720c:	d10a      	bne.n	8007224 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800720e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007212:	f383 8811 	msr	BASEPRI, r3
 8007216:	f3bf 8f6f 	isb	sy
 800721a:	f3bf 8f4f 	dsb	sy
 800721e:	60fb      	str	r3, [r7, #12]
}
 8007220:	bf00      	nop
 8007222:	e7fe      	b.n	8007222 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007224:	693b      	ldr	r3, [r7, #16]
 8007226:	3318      	adds	r3, #24
 8007228:	4618      	mov	r0, r3
 800722a:	f7fe fe6f 	bl	8005f0c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800722e:	4b1e      	ldr	r3, [pc, #120]	; (80072a8 <xTaskRemoveFromEventList+0xb0>)
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	2b00      	cmp	r3, #0
 8007234:	d11d      	bne.n	8007272 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007236:	693b      	ldr	r3, [r7, #16]
 8007238:	3304      	adds	r3, #4
 800723a:	4618      	mov	r0, r3
 800723c:	f7fe fe66 	bl	8005f0c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007240:	693b      	ldr	r3, [r7, #16]
 8007242:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007244:	4b19      	ldr	r3, [pc, #100]	; (80072ac <xTaskRemoveFromEventList+0xb4>)
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	429a      	cmp	r2, r3
 800724a:	d903      	bls.n	8007254 <xTaskRemoveFromEventList+0x5c>
 800724c:	693b      	ldr	r3, [r7, #16]
 800724e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007250:	4a16      	ldr	r2, [pc, #88]	; (80072ac <xTaskRemoveFromEventList+0xb4>)
 8007252:	6013      	str	r3, [r2, #0]
 8007254:	693b      	ldr	r3, [r7, #16]
 8007256:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007258:	4613      	mov	r3, r2
 800725a:	009b      	lsls	r3, r3, #2
 800725c:	4413      	add	r3, r2
 800725e:	009b      	lsls	r3, r3, #2
 8007260:	4a13      	ldr	r2, [pc, #76]	; (80072b0 <xTaskRemoveFromEventList+0xb8>)
 8007262:	441a      	add	r2, r3
 8007264:	693b      	ldr	r3, [r7, #16]
 8007266:	3304      	adds	r3, #4
 8007268:	4619      	mov	r1, r3
 800726a:	4610      	mov	r0, r2
 800726c:	f7fe fdf1 	bl	8005e52 <vListInsertEnd>
 8007270:	e005      	b.n	800727e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007272:	693b      	ldr	r3, [r7, #16]
 8007274:	3318      	adds	r3, #24
 8007276:	4619      	mov	r1, r3
 8007278:	480e      	ldr	r0, [pc, #56]	; (80072b4 <xTaskRemoveFromEventList+0xbc>)
 800727a:	f7fe fdea 	bl	8005e52 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800727e:	693b      	ldr	r3, [r7, #16]
 8007280:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007282:	4b0d      	ldr	r3, [pc, #52]	; (80072b8 <xTaskRemoveFromEventList+0xc0>)
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007288:	429a      	cmp	r2, r3
 800728a:	d905      	bls.n	8007298 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800728c:	2301      	movs	r3, #1
 800728e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007290:	4b0a      	ldr	r3, [pc, #40]	; (80072bc <xTaskRemoveFromEventList+0xc4>)
 8007292:	2201      	movs	r2, #1
 8007294:	601a      	str	r2, [r3, #0]
 8007296:	e001      	b.n	800729c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8007298:	2300      	movs	r3, #0
 800729a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800729c:	697b      	ldr	r3, [r7, #20]
}
 800729e:	4618      	mov	r0, r3
 80072a0:	3718      	adds	r7, #24
 80072a2:	46bd      	mov	sp, r7
 80072a4:	bd80      	pop	{r7, pc}
 80072a6:	bf00      	nop
 80072a8:	20000c4c 	.word	0x20000c4c
 80072ac:	20000c2c 	.word	0x20000c2c
 80072b0:	20000754 	.word	0x20000754
 80072b4:	20000be4 	.word	0x20000be4
 80072b8:	20000750 	.word	0x20000750
 80072bc:	20000c38 	.word	0x20000c38

080072c0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80072c0:	b480      	push	{r7}
 80072c2:	b083      	sub	sp, #12
 80072c4:	af00      	add	r7, sp, #0
 80072c6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80072c8:	4b06      	ldr	r3, [pc, #24]	; (80072e4 <vTaskInternalSetTimeOutState+0x24>)
 80072ca:	681a      	ldr	r2, [r3, #0]
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80072d0:	4b05      	ldr	r3, [pc, #20]	; (80072e8 <vTaskInternalSetTimeOutState+0x28>)
 80072d2:	681a      	ldr	r2, [r3, #0]
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	605a      	str	r2, [r3, #4]
}
 80072d8:	bf00      	nop
 80072da:	370c      	adds	r7, #12
 80072dc:	46bd      	mov	sp, r7
 80072de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e2:	4770      	bx	lr
 80072e4:	20000c3c 	.word	0x20000c3c
 80072e8:	20000c28 	.word	0x20000c28

080072ec <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80072ec:	b580      	push	{r7, lr}
 80072ee:	b088      	sub	sp, #32
 80072f0:	af00      	add	r7, sp, #0
 80072f2:	6078      	str	r0, [r7, #4]
 80072f4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d10a      	bne.n	8007312 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80072fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007300:	f383 8811 	msr	BASEPRI, r3
 8007304:	f3bf 8f6f 	isb	sy
 8007308:	f3bf 8f4f 	dsb	sy
 800730c:	613b      	str	r3, [r7, #16]
}
 800730e:	bf00      	nop
 8007310:	e7fe      	b.n	8007310 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007312:	683b      	ldr	r3, [r7, #0]
 8007314:	2b00      	cmp	r3, #0
 8007316:	d10a      	bne.n	800732e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8007318:	f04f 0350 	mov.w	r3, #80	; 0x50
 800731c:	f383 8811 	msr	BASEPRI, r3
 8007320:	f3bf 8f6f 	isb	sy
 8007324:	f3bf 8f4f 	dsb	sy
 8007328:	60fb      	str	r3, [r7, #12]
}
 800732a:	bf00      	nop
 800732c:	e7fe      	b.n	800732c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800732e:	f000 fe79 	bl	8008024 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007332:	4b1d      	ldr	r3, [pc, #116]	; (80073a8 <xTaskCheckForTimeOut+0xbc>)
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	685b      	ldr	r3, [r3, #4]
 800733c:	69ba      	ldr	r2, [r7, #24]
 800733e:	1ad3      	subs	r3, r2, r3
 8007340:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007342:	683b      	ldr	r3, [r7, #0]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	f1b3 3fff 	cmp.w	r3, #4294967295
 800734a:	d102      	bne.n	8007352 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800734c:	2300      	movs	r3, #0
 800734e:	61fb      	str	r3, [r7, #28]
 8007350:	e023      	b.n	800739a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681a      	ldr	r2, [r3, #0]
 8007356:	4b15      	ldr	r3, [pc, #84]	; (80073ac <xTaskCheckForTimeOut+0xc0>)
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	429a      	cmp	r2, r3
 800735c:	d007      	beq.n	800736e <xTaskCheckForTimeOut+0x82>
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	685b      	ldr	r3, [r3, #4]
 8007362:	69ba      	ldr	r2, [r7, #24]
 8007364:	429a      	cmp	r2, r3
 8007366:	d302      	bcc.n	800736e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007368:	2301      	movs	r3, #1
 800736a:	61fb      	str	r3, [r7, #28]
 800736c:	e015      	b.n	800739a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800736e:	683b      	ldr	r3, [r7, #0]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	697a      	ldr	r2, [r7, #20]
 8007374:	429a      	cmp	r2, r3
 8007376:	d20b      	bcs.n	8007390 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007378:	683b      	ldr	r3, [r7, #0]
 800737a:	681a      	ldr	r2, [r3, #0]
 800737c:	697b      	ldr	r3, [r7, #20]
 800737e:	1ad2      	subs	r2, r2, r3
 8007380:	683b      	ldr	r3, [r7, #0]
 8007382:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007384:	6878      	ldr	r0, [r7, #4]
 8007386:	f7ff ff9b 	bl	80072c0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800738a:	2300      	movs	r3, #0
 800738c:	61fb      	str	r3, [r7, #28]
 800738e:	e004      	b.n	800739a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8007390:	683b      	ldr	r3, [r7, #0]
 8007392:	2200      	movs	r2, #0
 8007394:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007396:	2301      	movs	r3, #1
 8007398:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800739a:	f000 fe73 	bl	8008084 <vPortExitCritical>

	return xReturn;
 800739e:	69fb      	ldr	r3, [r7, #28]
}
 80073a0:	4618      	mov	r0, r3
 80073a2:	3720      	adds	r7, #32
 80073a4:	46bd      	mov	sp, r7
 80073a6:	bd80      	pop	{r7, pc}
 80073a8:	20000c28 	.word	0x20000c28
 80073ac:	20000c3c 	.word	0x20000c3c

080073b0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80073b0:	b480      	push	{r7}
 80073b2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80073b4:	4b03      	ldr	r3, [pc, #12]	; (80073c4 <vTaskMissedYield+0x14>)
 80073b6:	2201      	movs	r2, #1
 80073b8:	601a      	str	r2, [r3, #0]
}
 80073ba:	bf00      	nop
 80073bc:	46bd      	mov	sp, r7
 80073be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c2:	4770      	bx	lr
 80073c4:	20000c38 	.word	0x20000c38

080073c8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80073c8:	b580      	push	{r7, lr}
 80073ca:	b082      	sub	sp, #8
 80073cc:	af00      	add	r7, sp, #0
 80073ce:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80073d0:	f000 f852 	bl	8007478 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80073d4:	4b06      	ldr	r3, [pc, #24]	; (80073f0 <prvIdleTask+0x28>)
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	2b01      	cmp	r3, #1
 80073da:	d9f9      	bls.n	80073d0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80073dc:	4b05      	ldr	r3, [pc, #20]	; (80073f4 <prvIdleTask+0x2c>)
 80073de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80073e2:	601a      	str	r2, [r3, #0]
 80073e4:	f3bf 8f4f 	dsb	sy
 80073e8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80073ec:	e7f0      	b.n	80073d0 <prvIdleTask+0x8>
 80073ee:	bf00      	nop
 80073f0:	20000754 	.word	0x20000754
 80073f4:	e000ed04 	.word	0xe000ed04

080073f8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80073f8:	b580      	push	{r7, lr}
 80073fa:	b082      	sub	sp, #8
 80073fc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80073fe:	2300      	movs	r3, #0
 8007400:	607b      	str	r3, [r7, #4]
 8007402:	e00c      	b.n	800741e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007404:	687a      	ldr	r2, [r7, #4]
 8007406:	4613      	mov	r3, r2
 8007408:	009b      	lsls	r3, r3, #2
 800740a:	4413      	add	r3, r2
 800740c:	009b      	lsls	r3, r3, #2
 800740e:	4a12      	ldr	r2, [pc, #72]	; (8007458 <prvInitialiseTaskLists+0x60>)
 8007410:	4413      	add	r3, r2
 8007412:	4618      	mov	r0, r3
 8007414:	f7fe fcf0 	bl	8005df8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	3301      	adds	r3, #1
 800741c:	607b      	str	r3, [r7, #4]
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	2b37      	cmp	r3, #55	; 0x37
 8007422:	d9ef      	bls.n	8007404 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007424:	480d      	ldr	r0, [pc, #52]	; (800745c <prvInitialiseTaskLists+0x64>)
 8007426:	f7fe fce7 	bl	8005df8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800742a:	480d      	ldr	r0, [pc, #52]	; (8007460 <prvInitialiseTaskLists+0x68>)
 800742c:	f7fe fce4 	bl	8005df8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007430:	480c      	ldr	r0, [pc, #48]	; (8007464 <prvInitialiseTaskLists+0x6c>)
 8007432:	f7fe fce1 	bl	8005df8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007436:	480c      	ldr	r0, [pc, #48]	; (8007468 <prvInitialiseTaskLists+0x70>)
 8007438:	f7fe fcde 	bl	8005df8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800743c:	480b      	ldr	r0, [pc, #44]	; (800746c <prvInitialiseTaskLists+0x74>)
 800743e:	f7fe fcdb 	bl	8005df8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007442:	4b0b      	ldr	r3, [pc, #44]	; (8007470 <prvInitialiseTaskLists+0x78>)
 8007444:	4a05      	ldr	r2, [pc, #20]	; (800745c <prvInitialiseTaskLists+0x64>)
 8007446:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007448:	4b0a      	ldr	r3, [pc, #40]	; (8007474 <prvInitialiseTaskLists+0x7c>)
 800744a:	4a05      	ldr	r2, [pc, #20]	; (8007460 <prvInitialiseTaskLists+0x68>)
 800744c:	601a      	str	r2, [r3, #0]
}
 800744e:	bf00      	nop
 8007450:	3708      	adds	r7, #8
 8007452:	46bd      	mov	sp, r7
 8007454:	bd80      	pop	{r7, pc}
 8007456:	bf00      	nop
 8007458:	20000754 	.word	0x20000754
 800745c:	20000bb4 	.word	0x20000bb4
 8007460:	20000bc8 	.word	0x20000bc8
 8007464:	20000be4 	.word	0x20000be4
 8007468:	20000bf8 	.word	0x20000bf8
 800746c:	20000c10 	.word	0x20000c10
 8007470:	20000bdc 	.word	0x20000bdc
 8007474:	20000be0 	.word	0x20000be0

08007478 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007478:	b580      	push	{r7, lr}
 800747a:	b082      	sub	sp, #8
 800747c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800747e:	e019      	b.n	80074b4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007480:	f000 fdd0 	bl	8008024 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007484:	4b10      	ldr	r3, [pc, #64]	; (80074c8 <prvCheckTasksWaitingTermination+0x50>)
 8007486:	68db      	ldr	r3, [r3, #12]
 8007488:	68db      	ldr	r3, [r3, #12]
 800748a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	3304      	adds	r3, #4
 8007490:	4618      	mov	r0, r3
 8007492:	f7fe fd3b 	bl	8005f0c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007496:	4b0d      	ldr	r3, [pc, #52]	; (80074cc <prvCheckTasksWaitingTermination+0x54>)
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	3b01      	subs	r3, #1
 800749c:	4a0b      	ldr	r2, [pc, #44]	; (80074cc <prvCheckTasksWaitingTermination+0x54>)
 800749e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80074a0:	4b0b      	ldr	r3, [pc, #44]	; (80074d0 <prvCheckTasksWaitingTermination+0x58>)
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	3b01      	subs	r3, #1
 80074a6:	4a0a      	ldr	r2, [pc, #40]	; (80074d0 <prvCheckTasksWaitingTermination+0x58>)
 80074a8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80074aa:	f000 fdeb 	bl	8008084 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80074ae:	6878      	ldr	r0, [r7, #4]
 80074b0:	f000 f810 	bl	80074d4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80074b4:	4b06      	ldr	r3, [pc, #24]	; (80074d0 <prvCheckTasksWaitingTermination+0x58>)
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d1e1      	bne.n	8007480 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80074bc:	bf00      	nop
 80074be:	bf00      	nop
 80074c0:	3708      	adds	r7, #8
 80074c2:	46bd      	mov	sp, r7
 80074c4:	bd80      	pop	{r7, pc}
 80074c6:	bf00      	nop
 80074c8:	20000bf8 	.word	0x20000bf8
 80074cc:	20000c24 	.word	0x20000c24
 80074d0:	20000c0c 	.word	0x20000c0c

080074d4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80074d4:	b580      	push	{r7, lr}
 80074d6:	b084      	sub	sp, #16
 80074d8:	af00      	add	r7, sp, #0
 80074da:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d108      	bne.n	80074f8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074ea:	4618      	mov	r0, r3
 80074ec:	f000 ff88 	bl	8008400 <vPortFree>
				vPortFree( pxTCB );
 80074f0:	6878      	ldr	r0, [r7, #4]
 80074f2:	f000 ff85 	bl	8008400 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80074f6:	e018      	b.n	800752a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80074fe:	2b01      	cmp	r3, #1
 8007500:	d103      	bne.n	800750a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8007502:	6878      	ldr	r0, [r7, #4]
 8007504:	f000 ff7c 	bl	8008400 <vPortFree>
	}
 8007508:	e00f      	b.n	800752a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007510:	2b02      	cmp	r3, #2
 8007512:	d00a      	beq.n	800752a <prvDeleteTCB+0x56>
	__asm volatile
 8007514:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007518:	f383 8811 	msr	BASEPRI, r3
 800751c:	f3bf 8f6f 	isb	sy
 8007520:	f3bf 8f4f 	dsb	sy
 8007524:	60fb      	str	r3, [r7, #12]
}
 8007526:	bf00      	nop
 8007528:	e7fe      	b.n	8007528 <prvDeleteTCB+0x54>
	}
 800752a:	bf00      	nop
 800752c:	3710      	adds	r7, #16
 800752e:	46bd      	mov	sp, r7
 8007530:	bd80      	pop	{r7, pc}
	...

08007534 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007534:	b480      	push	{r7}
 8007536:	b083      	sub	sp, #12
 8007538:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800753a:	4b0c      	ldr	r3, [pc, #48]	; (800756c <prvResetNextTaskUnblockTime+0x38>)
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	2b00      	cmp	r3, #0
 8007542:	d104      	bne.n	800754e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007544:	4b0a      	ldr	r3, [pc, #40]	; (8007570 <prvResetNextTaskUnblockTime+0x3c>)
 8007546:	f04f 32ff 	mov.w	r2, #4294967295
 800754a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800754c:	e008      	b.n	8007560 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800754e:	4b07      	ldr	r3, [pc, #28]	; (800756c <prvResetNextTaskUnblockTime+0x38>)
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	68db      	ldr	r3, [r3, #12]
 8007554:	68db      	ldr	r3, [r3, #12]
 8007556:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	685b      	ldr	r3, [r3, #4]
 800755c:	4a04      	ldr	r2, [pc, #16]	; (8007570 <prvResetNextTaskUnblockTime+0x3c>)
 800755e:	6013      	str	r3, [r2, #0]
}
 8007560:	bf00      	nop
 8007562:	370c      	adds	r7, #12
 8007564:	46bd      	mov	sp, r7
 8007566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800756a:	4770      	bx	lr
 800756c:	20000bdc 	.word	0x20000bdc
 8007570:	20000c44 	.word	0x20000c44

08007574 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007574:	b480      	push	{r7}
 8007576:	b083      	sub	sp, #12
 8007578:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800757a:	4b0b      	ldr	r3, [pc, #44]	; (80075a8 <xTaskGetSchedulerState+0x34>)
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	2b00      	cmp	r3, #0
 8007580:	d102      	bne.n	8007588 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007582:	2301      	movs	r3, #1
 8007584:	607b      	str	r3, [r7, #4]
 8007586:	e008      	b.n	800759a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007588:	4b08      	ldr	r3, [pc, #32]	; (80075ac <xTaskGetSchedulerState+0x38>)
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	2b00      	cmp	r3, #0
 800758e:	d102      	bne.n	8007596 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007590:	2302      	movs	r3, #2
 8007592:	607b      	str	r3, [r7, #4]
 8007594:	e001      	b.n	800759a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007596:	2300      	movs	r3, #0
 8007598:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800759a:	687b      	ldr	r3, [r7, #4]
	}
 800759c:	4618      	mov	r0, r3
 800759e:	370c      	adds	r7, #12
 80075a0:	46bd      	mov	sp, r7
 80075a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a6:	4770      	bx	lr
 80075a8:	20000c30 	.word	0x20000c30
 80075ac:	20000c4c 	.word	0x20000c4c

080075b0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80075b0:	b580      	push	{r7, lr}
 80075b2:	b086      	sub	sp, #24
 80075b4:	af00      	add	r7, sp, #0
 80075b6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80075bc:	2300      	movs	r3, #0
 80075be:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d056      	beq.n	8007674 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80075c6:	4b2e      	ldr	r3, [pc, #184]	; (8007680 <xTaskPriorityDisinherit+0xd0>)
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	693a      	ldr	r2, [r7, #16]
 80075cc:	429a      	cmp	r2, r3
 80075ce:	d00a      	beq.n	80075e6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80075d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075d4:	f383 8811 	msr	BASEPRI, r3
 80075d8:	f3bf 8f6f 	isb	sy
 80075dc:	f3bf 8f4f 	dsb	sy
 80075e0:	60fb      	str	r3, [r7, #12]
}
 80075e2:	bf00      	nop
 80075e4:	e7fe      	b.n	80075e4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80075e6:	693b      	ldr	r3, [r7, #16]
 80075e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d10a      	bne.n	8007604 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80075ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075f2:	f383 8811 	msr	BASEPRI, r3
 80075f6:	f3bf 8f6f 	isb	sy
 80075fa:	f3bf 8f4f 	dsb	sy
 80075fe:	60bb      	str	r3, [r7, #8]
}
 8007600:	bf00      	nop
 8007602:	e7fe      	b.n	8007602 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8007604:	693b      	ldr	r3, [r7, #16]
 8007606:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007608:	1e5a      	subs	r2, r3, #1
 800760a:	693b      	ldr	r3, [r7, #16]
 800760c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800760e:	693b      	ldr	r3, [r7, #16]
 8007610:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007612:	693b      	ldr	r3, [r7, #16]
 8007614:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007616:	429a      	cmp	r2, r3
 8007618:	d02c      	beq.n	8007674 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800761a:	693b      	ldr	r3, [r7, #16]
 800761c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800761e:	2b00      	cmp	r3, #0
 8007620:	d128      	bne.n	8007674 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007622:	693b      	ldr	r3, [r7, #16]
 8007624:	3304      	adds	r3, #4
 8007626:	4618      	mov	r0, r3
 8007628:	f7fe fc70 	bl	8005f0c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800762c:	693b      	ldr	r3, [r7, #16]
 800762e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007630:	693b      	ldr	r3, [r7, #16]
 8007632:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007634:	693b      	ldr	r3, [r7, #16]
 8007636:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007638:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800763c:	693b      	ldr	r3, [r7, #16]
 800763e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007640:	693b      	ldr	r3, [r7, #16]
 8007642:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007644:	4b0f      	ldr	r3, [pc, #60]	; (8007684 <xTaskPriorityDisinherit+0xd4>)
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	429a      	cmp	r2, r3
 800764a:	d903      	bls.n	8007654 <xTaskPriorityDisinherit+0xa4>
 800764c:	693b      	ldr	r3, [r7, #16]
 800764e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007650:	4a0c      	ldr	r2, [pc, #48]	; (8007684 <xTaskPriorityDisinherit+0xd4>)
 8007652:	6013      	str	r3, [r2, #0]
 8007654:	693b      	ldr	r3, [r7, #16]
 8007656:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007658:	4613      	mov	r3, r2
 800765a:	009b      	lsls	r3, r3, #2
 800765c:	4413      	add	r3, r2
 800765e:	009b      	lsls	r3, r3, #2
 8007660:	4a09      	ldr	r2, [pc, #36]	; (8007688 <xTaskPriorityDisinherit+0xd8>)
 8007662:	441a      	add	r2, r3
 8007664:	693b      	ldr	r3, [r7, #16]
 8007666:	3304      	adds	r3, #4
 8007668:	4619      	mov	r1, r3
 800766a:	4610      	mov	r0, r2
 800766c:	f7fe fbf1 	bl	8005e52 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007670:	2301      	movs	r3, #1
 8007672:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007674:	697b      	ldr	r3, [r7, #20]
	}
 8007676:	4618      	mov	r0, r3
 8007678:	3718      	adds	r7, #24
 800767a:	46bd      	mov	sp, r7
 800767c:	bd80      	pop	{r7, pc}
 800767e:	bf00      	nop
 8007680:	20000750 	.word	0x20000750
 8007684:	20000c2c 	.word	0x20000c2c
 8007688:	20000754 	.word	0x20000754

0800768c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800768c:	b580      	push	{r7, lr}
 800768e:	b084      	sub	sp, #16
 8007690:	af00      	add	r7, sp, #0
 8007692:	6078      	str	r0, [r7, #4]
 8007694:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007696:	4b21      	ldr	r3, [pc, #132]	; (800771c <prvAddCurrentTaskToDelayedList+0x90>)
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800769c:	4b20      	ldr	r3, [pc, #128]	; (8007720 <prvAddCurrentTaskToDelayedList+0x94>)
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	3304      	adds	r3, #4
 80076a2:	4618      	mov	r0, r3
 80076a4:	f7fe fc32 	bl	8005f0c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076ae:	d10a      	bne.n	80076c6 <prvAddCurrentTaskToDelayedList+0x3a>
 80076b0:	683b      	ldr	r3, [r7, #0]
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d007      	beq.n	80076c6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80076b6:	4b1a      	ldr	r3, [pc, #104]	; (8007720 <prvAddCurrentTaskToDelayedList+0x94>)
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	3304      	adds	r3, #4
 80076bc:	4619      	mov	r1, r3
 80076be:	4819      	ldr	r0, [pc, #100]	; (8007724 <prvAddCurrentTaskToDelayedList+0x98>)
 80076c0:	f7fe fbc7 	bl	8005e52 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80076c4:	e026      	b.n	8007714 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80076c6:	68fa      	ldr	r2, [r7, #12]
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	4413      	add	r3, r2
 80076cc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80076ce:	4b14      	ldr	r3, [pc, #80]	; (8007720 <prvAddCurrentTaskToDelayedList+0x94>)
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	68ba      	ldr	r2, [r7, #8]
 80076d4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80076d6:	68ba      	ldr	r2, [r7, #8]
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	429a      	cmp	r2, r3
 80076dc:	d209      	bcs.n	80076f2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80076de:	4b12      	ldr	r3, [pc, #72]	; (8007728 <prvAddCurrentTaskToDelayedList+0x9c>)
 80076e0:	681a      	ldr	r2, [r3, #0]
 80076e2:	4b0f      	ldr	r3, [pc, #60]	; (8007720 <prvAddCurrentTaskToDelayedList+0x94>)
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	3304      	adds	r3, #4
 80076e8:	4619      	mov	r1, r3
 80076ea:	4610      	mov	r0, r2
 80076ec:	f7fe fbd5 	bl	8005e9a <vListInsert>
}
 80076f0:	e010      	b.n	8007714 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80076f2:	4b0e      	ldr	r3, [pc, #56]	; (800772c <prvAddCurrentTaskToDelayedList+0xa0>)
 80076f4:	681a      	ldr	r2, [r3, #0]
 80076f6:	4b0a      	ldr	r3, [pc, #40]	; (8007720 <prvAddCurrentTaskToDelayedList+0x94>)
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	3304      	adds	r3, #4
 80076fc:	4619      	mov	r1, r3
 80076fe:	4610      	mov	r0, r2
 8007700:	f7fe fbcb 	bl	8005e9a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007704:	4b0a      	ldr	r3, [pc, #40]	; (8007730 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	68ba      	ldr	r2, [r7, #8]
 800770a:	429a      	cmp	r2, r3
 800770c:	d202      	bcs.n	8007714 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800770e:	4a08      	ldr	r2, [pc, #32]	; (8007730 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007710:	68bb      	ldr	r3, [r7, #8]
 8007712:	6013      	str	r3, [r2, #0]
}
 8007714:	bf00      	nop
 8007716:	3710      	adds	r7, #16
 8007718:	46bd      	mov	sp, r7
 800771a:	bd80      	pop	{r7, pc}
 800771c:	20000c28 	.word	0x20000c28
 8007720:	20000750 	.word	0x20000750
 8007724:	20000c10 	.word	0x20000c10
 8007728:	20000be0 	.word	0x20000be0
 800772c:	20000bdc 	.word	0x20000bdc
 8007730:	20000c44 	.word	0x20000c44

08007734 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007734:	b580      	push	{r7, lr}
 8007736:	b08a      	sub	sp, #40	; 0x28
 8007738:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800773a:	2300      	movs	r3, #0
 800773c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800773e:	f000 fb07 	bl	8007d50 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007742:	4b1c      	ldr	r3, [pc, #112]	; (80077b4 <xTimerCreateTimerTask+0x80>)
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	2b00      	cmp	r3, #0
 8007748:	d021      	beq.n	800778e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800774a:	2300      	movs	r3, #0
 800774c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800774e:	2300      	movs	r3, #0
 8007750:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007752:	1d3a      	adds	r2, r7, #4
 8007754:	f107 0108 	add.w	r1, r7, #8
 8007758:	f107 030c 	add.w	r3, r7, #12
 800775c:	4618      	mov	r0, r3
 800775e:	f7fe fb31 	bl	8005dc4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007762:	6879      	ldr	r1, [r7, #4]
 8007764:	68bb      	ldr	r3, [r7, #8]
 8007766:	68fa      	ldr	r2, [r7, #12]
 8007768:	9202      	str	r2, [sp, #8]
 800776a:	9301      	str	r3, [sp, #4]
 800776c:	2302      	movs	r3, #2
 800776e:	9300      	str	r3, [sp, #0]
 8007770:	2300      	movs	r3, #0
 8007772:	460a      	mov	r2, r1
 8007774:	4910      	ldr	r1, [pc, #64]	; (80077b8 <xTimerCreateTimerTask+0x84>)
 8007776:	4811      	ldr	r0, [pc, #68]	; (80077bc <xTimerCreateTimerTask+0x88>)
 8007778:	f7ff f8de 	bl	8006938 <xTaskCreateStatic>
 800777c:	4603      	mov	r3, r0
 800777e:	4a10      	ldr	r2, [pc, #64]	; (80077c0 <xTimerCreateTimerTask+0x8c>)
 8007780:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007782:	4b0f      	ldr	r3, [pc, #60]	; (80077c0 <xTimerCreateTimerTask+0x8c>)
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	2b00      	cmp	r3, #0
 8007788:	d001      	beq.n	800778e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800778a:	2301      	movs	r3, #1
 800778c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800778e:	697b      	ldr	r3, [r7, #20]
 8007790:	2b00      	cmp	r3, #0
 8007792:	d10a      	bne.n	80077aa <xTimerCreateTimerTask+0x76>
	__asm volatile
 8007794:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007798:	f383 8811 	msr	BASEPRI, r3
 800779c:	f3bf 8f6f 	isb	sy
 80077a0:	f3bf 8f4f 	dsb	sy
 80077a4:	613b      	str	r3, [r7, #16]
}
 80077a6:	bf00      	nop
 80077a8:	e7fe      	b.n	80077a8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80077aa:	697b      	ldr	r3, [r7, #20]
}
 80077ac:	4618      	mov	r0, r3
 80077ae:	3718      	adds	r7, #24
 80077b0:	46bd      	mov	sp, r7
 80077b2:	bd80      	pop	{r7, pc}
 80077b4:	20000c80 	.word	0x20000c80
 80077b8:	08009b64 	.word	0x08009b64
 80077bc:	080078f9 	.word	0x080078f9
 80077c0:	20000c84 	.word	0x20000c84

080077c4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80077c4:	b580      	push	{r7, lr}
 80077c6:	b08a      	sub	sp, #40	; 0x28
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	60f8      	str	r0, [r7, #12]
 80077cc:	60b9      	str	r1, [r7, #8]
 80077ce:	607a      	str	r2, [r7, #4]
 80077d0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80077d2:	2300      	movs	r3, #0
 80077d4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d10a      	bne.n	80077f2 <xTimerGenericCommand+0x2e>
	__asm volatile
 80077dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077e0:	f383 8811 	msr	BASEPRI, r3
 80077e4:	f3bf 8f6f 	isb	sy
 80077e8:	f3bf 8f4f 	dsb	sy
 80077ec:	623b      	str	r3, [r7, #32]
}
 80077ee:	bf00      	nop
 80077f0:	e7fe      	b.n	80077f0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80077f2:	4b1a      	ldr	r3, [pc, #104]	; (800785c <xTimerGenericCommand+0x98>)
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d02a      	beq.n	8007850 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80077fa:	68bb      	ldr	r3, [r7, #8]
 80077fc:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007806:	68bb      	ldr	r3, [r7, #8]
 8007808:	2b05      	cmp	r3, #5
 800780a:	dc18      	bgt.n	800783e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800780c:	f7ff feb2 	bl	8007574 <xTaskGetSchedulerState>
 8007810:	4603      	mov	r3, r0
 8007812:	2b02      	cmp	r3, #2
 8007814:	d109      	bne.n	800782a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007816:	4b11      	ldr	r3, [pc, #68]	; (800785c <xTimerGenericCommand+0x98>)
 8007818:	6818      	ldr	r0, [r3, #0]
 800781a:	f107 0110 	add.w	r1, r7, #16
 800781e:	2300      	movs	r3, #0
 8007820:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007822:	f7fe fca1 	bl	8006168 <xQueueGenericSend>
 8007826:	6278      	str	r0, [r7, #36]	; 0x24
 8007828:	e012      	b.n	8007850 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800782a:	4b0c      	ldr	r3, [pc, #48]	; (800785c <xTimerGenericCommand+0x98>)
 800782c:	6818      	ldr	r0, [r3, #0]
 800782e:	f107 0110 	add.w	r1, r7, #16
 8007832:	2300      	movs	r3, #0
 8007834:	2200      	movs	r2, #0
 8007836:	f7fe fc97 	bl	8006168 <xQueueGenericSend>
 800783a:	6278      	str	r0, [r7, #36]	; 0x24
 800783c:	e008      	b.n	8007850 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800783e:	4b07      	ldr	r3, [pc, #28]	; (800785c <xTimerGenericCommand+0x98>)
 8007840:	6818      	ldr	r0, [r3, #0]
 8007842:	f107 0110 	add.w	r1, r7, #16
 8007846:	2300      	movs	r3, #0
 8007848:	683a      	ldr	r2, [r7, #0]
 800784a:	f7fe fd8b 	bl	8006364 <xQueueGenericSendFromISR>
 800784e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007852:	4618      	mov	r0, r3
 8007854:	3728      	adds	r7, #40	; 0x28
 8007856:	46bd      	mov	sp, r7
 8007858:	bd80      	pop	{r7, pc}
 800785a:	bf00      	nop
 800785c:	20000c80 	.word	0x20000c80

08007860 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007860:	b580      	push	{r7, lr}
 8007862:	b088      	sub	sp, #32
 8007864:	af02      	add	r7, sp, #8
 8007866:	6078      	str	r0, [r7, #4]
 8007868:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800786a:	4b22      	ldr	r3, [pc, #136]	; (80078f4 <prvProcessExpiredTimer+0x94>)
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	68db      	ldr	r3, [r3, #12]
 8007870:	68db      	ldr	r3, [r3, #12]
 8007872:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007874:	697b      	ldr	r3, [r7, #20]
 8007876:	3304      	adds	r3, #4
 8007878:	4618      	mov	r0, r3
 800787a:	f7fe fb47 	bl	8005f0c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800787e:	697b      	ldr	r3, [r7, #20]
 8007880:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007884:	f003 0304 	and.w	r3, r3, #4
 8007888:	2b00      	cmp	r3, #0
 800788a:	d022      	beq.n	80078d2 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800788c:	697b      	ldr	r3, [r7, #20]
 800788e:	699a      	ldr	r2, [r3, #24]
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	18d1      	adds	r1, r2, r3
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	683a      	ldr	r2, [r7, #0]
 8007898:	6978      	ldr	r0, [r7, #20]
 800789a:	f000 f8d1 	bl	8007a40 <prvInsertTimerInActiveList>
 800789e:	4603      	mov	r3, r0
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d01f      	beq.n	80078e4 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80078a4:	2300      	movs	r3, #0
 80078a6:	9300      	str	r3, [sp, #0]
 80078a8:	2300      	movs	r3, #0
 80078aa:	687a      	ldr	r2, [r7, #4]
 80078ac:	2100      	movs	r1, #0
 80078ae:	6978      	ldr	r0, [r7, #20]
 80078b0:	f7ff ff88 	bl	80077c4 <xTimerGenericCommand>
 80078b4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80078b6:	693b      	ldr	r3, [r7, #16]
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d113      	bne.n	80078e4 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80078bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078c0:	f383 8811 	msr	BASEPRI, r3
 80078c4:	f3bf 8f6f 	isb	sy
 80078c8:	f3bf 8f4f 	dsb	sy
 80078cc:	60fb      	str	r3, [r7, #12]
}
 80078ce:	bf00      	nop
 80078d0:	e7fe      	b.n	80078d0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80078d2:	697b      	ldr	r3, [r7, #20]
 80078d4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80078d8:	f023 0301 	bic.w	r3, r3, #1
 80078dc:	b2da      	uxtb	r2, r3
 80078de:	697b      	ldr	r3, [r7, #20]
 80078e0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80078e4:	697b      	ldr	r3, [r7, #20]
 80078e6:	6a1b      	ldr	r3, [r3, #32]
 80078e8:	6978      	ldr	r0, [r7, #20]
 80078ea:	4798      	blx	r3
}
 80078ec:	bf00      	nop
 80078ee:	3718      	adds	r7, #24
 80078f0:	46bd      	mov	sp, r7
 80078f2:	bd80      	pop	{r7, pc}
 80078f4:	20000c78 	.word	0x20000c78

080078f8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80078f8:	b580      	push	{r7, lr}
 80078fa:	b084      	sub	sp, #16
 80078fc:	af00      	add	r7, sp, #0
 80078fe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007900:	f107 0308 	add.w	r3, r7, #8
 8007904:	4618      	mov	r0, r3
 8007906:	f000 f857 	bl	80079b8 <prvGetNextExpireTime>
 800790a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800790c:	68bb      	ldr	r3, [r7, #8]
 800790e:	4619      	mov	r1, r3
 8007910:	68f8      	ldr	r0, [r7, #12]
 8007912:	f000 f803 	bl	800791c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007916:	f000 f8d5 	bl	8007ac4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800791a:	e7f1      	b.n	8007900 <prvTimerTask+0x8>

0800791c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800791c:	b580      	push	{r7, lr}
 800791e:	b084      	sub	sp, #16
 8007920:	af00      	add	r7, sp, #0
 8007922:	6078      	str	r0, [r7, #4]
 8007924:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007926:	f7ff fa43 	bl	8006db0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800792a:	f107 0308 	add.w	r3, r7, #8
 800792e:	4618      	mov	r0, r3
 8007930:	f000 f866 	bl	8007a00 <prvSampleTimeNow>
 8007934:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007936:	68bb      	ldr	r3, [r7, #8]
 8007938:	2b00      	cmp	r3, #0
 800793a:	d130      	bne.n	800799e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800793c:	683b      	ldr	r3, [r7, #0]
 800793e:	2b00      	cmp	r3, #0
 8007940:	d10a      	bne.n	8007958 <prvProcessTimerOrBlockTask+0x3c>
 8007942:	687a      	ldr	r2, [r7, #4]
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	429a      	cmp	r2, r3
 8007948:	d806      	bhi.n	8007958 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800794a:	f7ff fa3f 	bl	8006dcc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800794e:	68f9      	ldr	r1, [r7, #12]
 8007950:	6878      	ldr	r0, [r7, #4]
 8007952:	f7ff ff85 	bl	8007860 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007956:	e024      	b.n	80079a2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007958:	683b      	ldr	r3, [r7, #0]
 800795a:	2b00      	cmp	r3, #0
 800795c:	d008      	beq.n	8007970 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800795e:	4b13      	ldr	r3, [pc, #76]	; (80079ac <prvProcessTimerOrBlockTask+0x90>)
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	2b00      	cmp	r3, #0
 8007966:	d101      	bne.n	800796c <prvProcessTimerOrBlockTask+0x50>
 8007968:	2301      	movs	r3, #1
 800796a:	e000      	b.n	800796e <prvProcessTimerOrBlockTask+0x52>
 800796c:	2300      	movs	r3, #0
 800796e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007970:	4b0f      	ldr	r3, [pc, #60]	; (80079b0 <prvProcessTimerOrBlockTask+0x94>)
 8007972:	6818      	ldr	r0, [r3, #0]
 8007974:	687a      	ldr	r2, [r7, #4]
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	1ad3      	subs	r3, r2, r3
 800797a:	683a      	ldr	r2, [r7, #0]
 800797c:	4619      	mov	r1, r3
 800797e:	f7fe ffa7 	bl	80068d0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007982:	f7ff fa23 	bl	8006dcc <xTaskResumeAll>
 8007986:	4603      	mov	r3, r0
 8007988:	2b00      	cmp	r3, #0
 800798a:	d10a      	bne.n	80079a2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800798c:	4b09      	ldr	r3, [pc, #36]	; (80079b4 <prvProcessTimerOrBlockTask+0x98>)
 800798e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007992:	601a      	str	r2, [r3, #0]
 8007994:	f3bf 8f4f 	dsb	sy
 8007998:	f3bf 8f6f 	isb	sy
}
 800799c:	e001      	b.n	80079a2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800799e:	f7ff fa15 	bl	8006dcc <xTaskResumeAll>
}
 80079a2:	bf00      	nop
 80079a4:	3710      	adds	r7, #16
 80079a6:	46bd      	mov	sp, r7
 80079a8:	bd80      	pop	{r7, pc}
 80079aa:	bf00      	nop
 80079ac:	20000c7c 	.word	0x20000c7c
 80079b0:	20000c80 	.word	0x20000c80
 80079b4:	e000ed04 	.word	0xe000ed04

080079b8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80079b8:	b480      	push	{r7}
 80079ba:	b085      	sub	sp, #20
 80079bc:	af00      	add	r7, sp, #0
 80079be:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80079c0:	4b0e      	ldr	r3, [pc, #56]	; (80079fc <prvGetNextExpireTime+0x44>)
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d101      	bne.n	80079ce <prvGetNextExpireTime+0x16>
 80079ca:	2201      	movs	r2, #1
 80079cc:	e000      	b.n	80079d0 <prvGetNextExpireTime+0x18>
 80079ce:	2200      	movs	r2, #0
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d105      	bne.n	80079e8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80079dc:	4b07      	ldr	r3, [pc, #28]	; (80079fc <prvGetNextExpireTime+0x44>)
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	68db      	ldr	r3, [r3, #12]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	60fb      	str	r3, [r7, #12]
 80079e6:	e001      	b.n	80079ec <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80079e8:	2300      	movs	r3, #0
 80079ea:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80079ec:	68fb      	ldr	r3, [r7, #12]
}
 80079ee:	4618      	mov	r0, r3
 80079f0:	3714      	adds	r7, #20
 80079f2:	46bd      	mov	sp, r7
 80079f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f8:	4770      	bx	lr
 80079fa:	bf00      	nop
 80079fc:	20000c78 	.word	0x20000c78

08007a00 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007a00:	b580      	push	{r7, lr}
 8007a02:	b084      	sub	sp, #16
 8007a04:	af00      	add	r7, sp, #0
 8007a06:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007a08:	f7ff fa7e 	bl	8006f08 <xTaskGetTickCount>
 8007a0c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007a0e:	4b0b      	ldr	r3, [pc, #44]	; (8007a3c <prvSampleTimeNow+0x3c>)
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	68fa      	ldr	r2, [r7, #12]
 8007a14:	429a      	cmp	r2, r3
 8007a16:	d205      	bcs.n	8007a24 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007a18:	f000 f936 	bl	8007c88 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	2201      	movs	r2, #1
 8007a20:	601a      	str	r2, [r3, #0]
 8007a22:	e002      	b.n	8007a2a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	2200      	movs	r2, #0
 8007a28:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007a2a:	4a04      	ldr	r2, [pc, #16]	; (8007a3c <prvSampleTimeNow+0x3c>)
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007a30:	68fb      	ldr	r3, [r7, #12]
}
 8007a32:	4618      	mov	r0, r3
 8007a34:	3710      	adds	r7, #16
 8007a36:	46bd      	mov	sp, r7
 8007a38:	bd80      	pop	{r7, pc}
 8007a3a:	bf00      	nop
 8007a3c:	20000c88 	.word	0x20000c88

08007a40 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007a40:	b580      	push	{r7, lr}
 8007a42:	b086      	sub	sp, #24
 8007a44:	af00      	add	r7, sp, #0
 8007a46:	60f8      	str	r0, [r7, #12]
 8007a48:	60b9      	str	r1, [r7, #8]
 8007a4a:	607a      	str	r2, [r7, #4]
 8007a4c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007a4e:	2300      	movs	r3, #0
 8007a50:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	68ba      	ldr	r2, [r7, #8]
 8007a56:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	68fa      	ldr	r2, [r7, #12]
 8007a5c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007a5e:	68ba      	ldr	r2, [r7, #8]
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	429a      	cmp	r2, r3
 8007a64:	d812      	bhi.n	8007a8c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007a66:	687a      	ldr	r2, [r7, #4]
 8007a68:	683b      	ldr	r3, [r7, #0]
 8007a6a:	1ad2      	subs	r2, r2, r3
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	699b      	ldr	r3, [r3, #24]
 8007a70:	429a      	cmp	r2, r3
 8007a72:	d302      	bcc.n	8007a7a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007a74:	2301      	movs	r3, #1
 8007a76:	617b      	str	r3, [r7, #20]
 8007a78:	e01b      	b.n	8007ab2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007a7a:	4b10      	ldr	r3, [pc, #64]	; (8007abc <prvInsertTimerInActiveList+0x7c>)
 8007a7c:	681a      	ldr	r2, [r3, #0]
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	3304      	adds	r3, #4
 8007a82:	4619      	mov	r1, r3
 8007a84:	4610      	mov	r0, r2
 8007a86:	f7fe fa08 	bl	8005e9a <vListInsert>
 8007a8a:	e012      	b.n	8007ab2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007a8c:	687a      	ldr	r2, [r7, #4]
 8007a8e:	683b      	ldr	r3, [r7, #0]
 8007a90:	429a      	cmp	r2, r3
 8007a92:	d206      	bcs.n	8007aa2 <prvInsertTimerInActiveList+0x62>
 8007a94:	68ba      	ldr	r2, [r7, #8]
 8007a96:	683b      	ldr	r3, [r7, #0]
 8007a98:	429a      	cmp	r2, r3
 8007a9a:	d302      	bcc.n	8007aa2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007a9c:	2301      	movs	r3, #1
 8007a9e:	617b      	str	r3, [r7, #20]
 8007aa0:	e007      	b.n	8007ab2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007aa2:	4b07      	ldr	r3, [pc, #28]	; (8007ac0 <prvInsertTimerInActiveList+0x80>)
 8007aa4:	681a      	ldr	r2, [r3, #0]
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	3304      	adds	r3, #4
 8007aaa:	4619      	mov	r1, r3
 8007aac:	4610      	mov	r0, r2
 8007aae:	f7fe f9f4 	bl	8005e9a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007ab2:	697b      	ldr	r3, [r7, #20]
}
 8007ab4:	4618      	mov	r0, r3
 8007ab6:	3718      	adds	r7, #24
 8007ab8:	46bd      	mov	sp, r7
 8007aba:	bd80      	pop	{r7, pc}
 8007abc:	20000c7c 	.word	0x20000c7c
 8007ac0:	20000c78 	.word	0x20000c78

08007ac4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007ac4:	b580      	push	{r7, lr}
 8007ac6:	b08e      	sub	sp, #56	; 0x38
 8007ac8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007aca:	e0ca      	b.n	8007c62 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	da18      	bge.n	8007b04 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007ad2:	1d3b      	adds	r3, r7, #4
 8007ad4:	3304      	adds	r3, #4
 8007ad6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007ad8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d10a      	bne.n	8007af4 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8007ade:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ae2:	f383 8811 	msr	BASEPRI, r3
 8007ae6:	f3bf 8f6f 	isb	sy
 8007aea:	f3bf 8f4f 	dsb	sy
 8007aee:	61fb      	str	r3, [r7, #28]
}
 8007af0:	bf00      	nop
 8007af2:	e7fe      	b.n	8007af2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007af4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007afa:	6850      	ldr	r0, [r2, #4]
 8007afc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007afe:	6892      	ldr	r2, [r2, #8]
 8007b00:	4611      	mov	r1, r2
 8007b02:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	f2c0 80aa 	blt.w	8007c60 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007b10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b12:	695b      	ldr	r3, [r3, #20]
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d004      	beq.n	8007b22 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007b18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b1a:	3304      	adds	r3, #4
 8007b1c:	4618      	mov	r0, r3
 8007b1e:	f7fe f9f5 	bl	8005f0c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007b22:	463b      	mov	r3, r7
 8007b24:	4618      	mov	r0, r3
 8007b26:	f7ff ff6b 	bl	8007a00 <prvSampleTimeNow>
 8007b2a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	2b09      	cmp	r3, #9
 8007b30:	f200 8097 	bhi.w	8007c62 <prvProcessReceivedCommands+0x19e>
 8007b34:	a201      	add	r2, pc, #4	; (adr r2, 8007b3c <prvProcessReceivedCommands+0x78>)
 8007b36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b3a:	bf00      	nop
 8007b3c:	08007b65 	.word	0x08007b65
 8007b40:	08007b65 	.word	0x08007b65
 8007b44:	08007b65 	.word	0x08007b65
 8007b48:	08007bd9 	.word	0x08007bd9
 8007b4c:	08007bed 	.word	0x08007bed
 8007b50:	08007c37 	.word	0x08007c37
 8007b54:	08007b65 	.word	0x08007b65
 8007b58:	08007b65 	.word	0x08007b65
 8007b5c:	08007bd9 	.word	0x08007bd9
 8007b60:	08007bed 	.word	0x08007bed
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007b64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b66:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007b6a:	f043 0301 	orr.w	r3, r3, #1
 8007b6e:	b2da      	uxtb	r2, r3
 8007b70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b72:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007b76:	68ba      	ldr	r2, [r7, #8]
 8007b78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b7a:	699b      	ldr	r3, [r3, #24]
 8007b7c:	18d1      	adds	r1, r2, r3
 8007b7e:	68bb      	ldr	r3, [r7, #8]
 8007b80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b82:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007b84:	f7ff ff5c 	bl	8007a40 <prvInsertTimerInActiveList>
 8007b88:	4603      	mov	r3, r0
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d069      	beq.n	8007c62 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007b8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b90:	6a1b      	ldr	r3, [r3, #32]
 8007b92:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007b94:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007b96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b98:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007b9c:	f003 0304 	and.w	r3, r3, #4
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d05e      	beq.n	8007c62 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007ba4:	68ba      	ldr	r2, [r7, #8]
 8007ba6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ba8:	699b      	ldr	r3, [r3, #24]
 8007baa:	441a      	add	r2, r3
 8007bac:	2300      	movs	r3, #0
 8007bae:	9300      	str	r3, [sp, #0]
 8007bb0:	2300      	movs	r3, #0
 8007bb2:	2100      	movs	r1, #0
 8007bb4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007bb6:	f7ff fe05 	bl	80077c4 <xTimerGenericCommand>
 8007bba:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007bbc:	6a3b      	ldr	r3, [r7, #32]
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d14f      	bne.n	8007c62 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8007bc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bc6:	f383 8811 	msr	BASEPRI, r3
 8007bca:	f3bf 8f6f 	isb	sy
 8007bce:	f3bf 8f4f 	dsb	sy
 8007bd2:	61bb      	str	r3, [r7, #24]
}
 8007bd4:	bf00      	nop
 8007bd6:	e7fe      	b.n	8007bd6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007bd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bda:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007bde:	f023 0301 	bic.w	r3, r3, #1
 8007be2:	b2da      	uxtb	r2, r3
 8007be4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007be6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8007bea:	e03a      	b.n	8007c62 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007bec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bee:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007bf2:	f043 0301 	orr.w	r3, r3, #1
 8007bf6:	b2da      	uxtb	r2, r3
 8007bf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bfa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007bfe:	68ba      	ldr	r2, [r7, #8]
 8007c00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c02:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007c04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c06:	699b      	ldr	r3, [r3, #24]
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d10a      	bne.n	8007c22 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8007c0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c10:	f383 8811 	msr	BASEPRI, r3
 8007c14:	f3bf 8f6f 	isb	sy
 8007c18:	f3bf 8f4f 	dsb	sy
 8007c1c:	617b      	str	r3, [r7, #20]
}
 8007c1e:	bf00      	nop
 8007c20:	e7fe      	b.n	8007c20 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007c22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c24:	699a      	ldr	r2, [r3, #24]
 8007c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c28:	18d1      	adds	r1, r2, r3
 8007c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c2e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007c30:	f7ff ff06 	bl	8007a40 <prvInsertTimerInActiveList>
					break;
 8007c34:	e015      	b.n	8007c62 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007c36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c38:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007c3c:	f003 0302 	and.w	r3, r3, #2
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d103      	bne.n	8007c4c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8007c44:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007c46:	f000 fbdb 	bl	8008400 <vPortFree>
 8007c4a:	e00a      	b.n	8007c62 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007c4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c4e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007c52:	f023 0301 	bic.w	r3, r3, #1
 8007c56:	b2da      	uxtb	r2, r3
 8007c58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c5a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007c5e:	e000      	b.n	8007c62 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8007c60:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007c62:	4b08      	ldr	r3, [pc, #32]	; (8007c84 <prvProcessReceivedCommands+0x1c0>)
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	1d39      	adds	r1, r7, #4
 8007c68:	2200      	movs	r2, #0
 8007c6a:	4618      	mov	r0, r3
 8007c6c:	f7fe fc16 	bl	800649c <xQueueReceive>
 8007c70:	4603      	mov	r3, r0
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	f47f af2a 	bne.w	8007acc <prvProcessReceivedCommands+0x8>
	}
}
 8007c78:	bf00      	nop
 8007c7a:	bf00      	nop
 8007c7c:	3730      	adds	r7, #48	; 0x30
 8007c7e:	46bd      	mov	sp, r7
 8007c80:	bd80      	pop	{r7, pc}
 8007c82:	bf00      	nop
 8007c84:	20000c80 	.word	0x20000c80

08007c88 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007c88:	b580      	push	{r7, lr}
 8007c8a:	b088      	sub	sp, #32
 8007c8c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007c8e:	e048      	b.n	8007d22 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007c90:	4b2d      	ldr	r3, [pc, #180]	; (8007d48 <prvSwitchTimerLists+0xc0>)
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	68db      	ldr	r3, [r3, #12]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007c9a:	4b2b      	ldr	r3, [pc, #172]	; (8007d48 <prvSwitchTimerLists+0xc0>)
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	68db      	ldr	r3, [r3, #12]
 8007ca0:	68db      	ldr	r3, [r3, #12]
 8007ca2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	3304      	adds	r3, #4
 8007ca8:	4618      	mov	r0, r3
 8007caa:	f7fe f92f 	bl	8005f0c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	6a1b      	ldr	r3, [r3, #32]
 8007cb2:	68f8      	ldr	r0, [r7, #12]
 8007cb4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007cbc:	f003 0304 	and.w	r3, r3, #4
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d02e      	beq.n	8007d22 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	699b      	ldr	r3, [r3, #24]
 8007cc8:	693a      	ldr	r2, [r7, #16]
 8007cca:	4413      	add	r3, r2
 8007ccc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007cce:	68ba      	ldr	r2, [r7, #8]
 8007cd0:	693b      	ldr	r3, [r7, #16]
 8007cd2:	429a      	cmp	r2, r3
 8007cd4:	d90e      	bls.n	8007cf4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	68ba      	ldr	r2, [r7, #8]
 8007cda:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	68fa      	ldr	r2, [r7, #12]
 8007ce0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007ce2:	4b19      	ldr	r3, [pc, #100]	; (8007d48 <prvSwitchTimerLists+0xc0>)
 8007ce4:	681a      	ldr	r2, [r3, #0]
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	3304      	adds	r3, #4
 8007cea:	4619      	mov	r1, r3
 8007cec:	4610      	mov	r0, r2
 8007cee:	f7fe f8d4 	bl	8005e9a <vListInsert>
 8007cf2:	e016      	b.n	8007d22 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007cf4:	2300      	movs	r3, #0
 8007cf6:	9300      	str	r3, [sp, #0]
 8007cf8:	2300      	movs	r3, #0
 8007cfa:	693a      	ldr	r2, [r7, #16]
 8007cfc:	2100      	movs	r1, #0
 8007cfe:	68f8      	ldr	r0, [r7, #12]
 8007d00:	f7ff fd60 	bl	80077c4 <xTimerGenericCommand>
 8007d04:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d10a      	bne.n	8007d22 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8007d0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d10:	f383 8811 	msr	BASEPRI, r3
 8007d14:	f3bf 8f6f 	isb	sy
 8007d18:	f3bf 8f4f 	dsb	sy
 8007d1c:	603b      	str	r3, [r7, #0]
}
 8007d1e:	bf00      	nop
 8007d20:	e7fe      	b.n	8007d20 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007d22:	4b09      	ldr	r3, [pc, #36]	; (8007d48 <prvSwitchTimerLists+0xc0>)
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d1b1      	bne.n	8007c90 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007d2c:	4b06      	ldr	r3, [pc, #24]	; (8007d48 <prvSwitchTimerLists+0xc0>)
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007d32:	4b06      	ldr	r3, [pc, #24]	; (8007d4c <prvSwitchTimerLists+0xc4>)
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	4a04      	ldr	r2, [pc, #16]	; (8007d48 <prvSwitchTimerLists+0xc0>)
 8007d38:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007d3a:	4a04      	ldr	r2, [pc, #16]	; (8007d4c <prvSwitchTimerLists+0xc4>)
 8007d3c:	697b      	ldr	r3, [r7, #20]
 8007d3e:	6013      	str	r3, [r2, #0]
}
 8007d40:	bf00      	nop
 8007d42:	3718      	adds	r7, #24
 8007d44:	46bd      	mov	sp, r7
 8007d46:	bd80      	pop	{r7, pc}
 8007d48:	20000c78 	.word	0x20000c78
 8007d4c:	20000c7c 	.word	0x20000c7c

08007d50 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007d50:	b580      	push	{r7, lr}
 8007d52:	b082      	sub	sp, #8
 8007d54:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007d56:	f000 f965 	bl	8008024 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007d5a:	4b15      	ldr	r3, [pc, #84]	; (8007db0 <prvCheckForValidListAndQueue+0x60>)
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d120      	bne.n	8007da4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007d62:	4814      	ldr	r0, [pc, #80]	; (8007db4 <prvCheckForValidListAndQueue+0x64>)
 8007d64:	f7fe f848 	bl	8005df8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007d68:	4813      	ldr	r0, [pc, #76]	; (8007db8 <prvCheckForValidListAndQueue+0x68>)
 8007d6a:	f7fe f845 	bl	8005df8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007d6e:	4b13      	ldr	r3, [pc, #76]	; (8007dbc <prvCheckForValidListAndQueue+0x6c>)
 8007d70:	4a10      	ldr	r2, [pc, #64]	; (8007db4 <prvCheckForValidListAndQueue+0x64>)
 8007d72:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007d74:	4b12      	ldr	r3, [pc, #72]	; (8007dc0 <prvCheckForValidListAndQueue+0x70>)
 8007d76:	4a10      	ldr	r2, [pc, #64]	; (8007db8 <prvCheckForValidListAndQueue+0x68>)
 8007d78:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007d7a:	2300      	movs	r3, #0
 8007d7c:	9300      	str	r3, [sp, #0]
 8007d7e:	4b11      	ldr	r3, [pc, #68]	; (8007dc4 <prvCheckForValidListAndQueue+0x74>)
 8007d80:	4a11      	ldr	r2, [pc, #68]	; (8007dc8 <prvCheckForValidListAndQueue+0x78>)
 8007d82:	2110      	movs	r1, #16
 8007d84:	200a      	movs	r0, #10
 8007d86:	f7fe f953 	bl	8006030 <xQueueGenericCreateStatic>
 8007d8a:	4603      	mov	r3, r0
 8007d8c:	4a08      	ldr	r2, [pc, #32]	; (8007db0 <prvCheckForValidListAndQueue+0x60>)
 8007d8e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007d90:	4b07      	ldr	r3, [pc, #28]	; (8007db0 <prvCheckForValidListAndQueue+0x60>)
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d005      	beq.n	8007da4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007d98:	4b05      	ldr	r3, [pc, #20]	; (8007db0 <prvCheckForValidListAndQueue+0x60>)
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	490b      	ldr	r1, [pc, #44]	; (8007dcc <prvCheckForValidListAndQueue+0x7c>)
 8007d9e:	4618      	mov	r0, r3
 8007da0:	f7fe fd6c 	bl	800687c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007da4:	f000 f96e 	bl	8008084 <vPortExitCritical>
}
 8007da8:	bf00      	nop
 8007daa:	46bd      	mov	sp, r7
 8007dac:	bd80      	pop	{r7, pc}
 8007dae:	bf00      	nop
 8007db0:	20000c80 	.word	0x20000c80
 8007db4:	20000c50 	.word	0x20000c50
 8007db8:	20000c64 	.word	0x20000c64
 8007dbc:	20000c78 	.word	0x20000c78
 8007dc0:	20000c7c 	.word	0x20000c7c
 8007dc4:	20000d2c 	.word	0x20000d2c
 8007dc8:	20000c8c 	.word	0x20000c8c
 8007dcc:	08009b6c 	.word	0x08009b6c

08007dd0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007dd0:	b480      	push	{r7}
 8007dd2:	b085      	sub	sp, #20
 8007dd4:	af00      	add	r7, sp, #0
 8007dd6:	60f8      	str	r0, [r7, #12]
 8007dd8:	60b9      	str	r1, [r7, #8]
 8007dda:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	3b04      	subs	r3, #4
 8007de0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007de8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	3b04      	subs	r3, #4
 8007dee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007df0:	68bb      	ldr	r3, [r7, #8]
 8007df2:	f023 0201 	bic.w	r2, r3, #1
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	3b04      	subs	r3, #4
 8007dfe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007e00:	4a0c      	ldr	r2, [pc, #48]	; (8007e34 <pxPortInitialiseStack+0x64>)
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	3b14      	subs	r3, #20
 8007e0a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007e0c:	687a      	ldr	r2, [r7, #4]
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	3b04      	subs	r3, #4
 8007e16:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	f06f 0202 	mvn.w	r2, #2
 8007e1e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	3b20      	subs	r3, #32
 8007e24:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007e26:	68fb      	ldr	r3, [r7, #12]
}
 8007e28:	4618      	mov	r0, r3
 8007e2a:	3714      	adds	r7, #20
 8007e2c:	46bd      	mov	sp, r7
 8007e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e32:	4770      	bx	lr
 8007e34:	08007e39 	.word	0x08007e39

08007e38 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007e38:	b480      	push	{r7}
 8007e3a:	b085      	sub	sp, #20
 8007e3c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007e3e:	2300      	movs	r3, #0
 8007e40:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007e42:	4b12      	ldr	r3, [pc, #72]	; (8007e8c <prvTaskExitError+0x54>)
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e4a:	d00a      	beq.n	8007e62 <prvTaskExitError+0x2a>
	__asm volatile
 8007e4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e50:	f383 8811 	msr	BASEPRI, r3
 8007e54:	f3bf 8f6f 	isb	sy
 8007e58:	f3bf 8f4f 	dsb	sy
 8007e5c:	60fb      	str	r3, [r7, #12]
}
 8007e5e:	bf00      	nop
 8007e60:	e7fe      	b.n	8007e60 <prvTaskExitError+0x28>
	__asm volatile
 8007e62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e66:	f383 8811 	msr	BASEPRI, r3
 8007e6a:	f3bf 8f6f 	isb	sy
 8007e6e:	f3bf 8f4f 	dsb	sy
 8007e72:	60bb      	str	r3, [r7, #8]
}
 8007e74:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007e76:	bf00      	nop
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d0fc      	beq.n	8007e78 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007e7e:	bf00      	nop
 8007e80:	bf00      	nop
 8007e82:	3714      	adds	r7, #20
 8007e84:	46bd      	mov	sp, r7
 8007e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e8a:	4770      	bx	lr
 8007e8c:	2000000c 	.word	0x2000000c

08007e90 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007e90:	4b07      	ldr	r3, [pc, #28]	; (8007eb0 <pxCurrentTCBConst2>)
 8007e92:	6819      	ldr	r1, [r3, #0]
 8007e94:	6808      	ldr	r0, [r1, #0]
 8007e96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e9a:	f380 8809 	msr	PSP, r0
 8007e9e:	f3bf 8f6f 	isb	sy
 8007ea2:	f04f 0000 	mov.w	r0, #0
 8007ea6:	f380 8811 	msr	BASEPRI, r0
 8007eaa:	4770      	bx	lr
 8007eac:	f3af 8000 	nop.w

08007eb0 <pxCurrentTCBConst2>:
 8007eb0:	20000750 	.word	0x20000750
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007eb4:	bf00      	nop
 8007eb6:	bf00      	nop

08007eb8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007eb8:	4808      	ldr	r0, [pc, #32]	; (8007edc <prvPortStartFirstTask+0x24>)
 8007eba:	6800      	ldr	r0, [r0, #0]
 8007ebc:	6800      	ldr	r0, [r0, #0]
 8007ebe:	f380 8808 	msr	MSP, r0
 8007ec2:	f04f 0000 	mov.w	r0, #0
 8007ec6:	f380 8814 	msr	CONTROL, r0
 8007eca:	b662      	cpsie	i
 8007ecc:	b661      	cpsie	f
 8007ece:	f3bf 8f4f 	dsb	sy
 8007ed2:	f3bf 8f6f 	isb	sy
 8007ed6:	df00      	svc	0
 8007ed8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007eda:	bf00      	nop
 8007edc:	e000ed08 	.word	0xe000ed08

08007ee0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007ee0:	b580      	push	{r7, lr}
 8007ee2:	b086      	sub	sp, #24
 8007ee4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007ee6:	4b46      	ldr	r3, [pc, #280]	; (8008000 <xPortStartScheduler+0x120>)
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	4a46      	ldr	r2, [pc, #280]	; (8008004 <xPortStartScheduler+0x124>)
 8007eec:	4293      	cmp	r3, r2
 8007eee:	d10a      	bne.n	8007f06 <xPortStartScheduler+0x26>
	__asm volatile
 8007ef0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ef4:	f383 8811 	msr	BASEPRI, r3
 8007ef8:	f3bf 8f6f 	isb	sy
 8007efc:	f3bf 8f4f 	dsb	sy
 8007f00:	613b      	str	r3, [r7, #16]
}
 8007f02:	bf00      	nop
 8007f04:	e7fe      	b.n	8007f04 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007f06:	4b3e      	ldr	r3, [pc, #248]	; (8008000 <xPortStartScheduler+0x120>)
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	4a3f      	ldr	r2, [pc, #252]	; (8008008 <xPortStartScheduler+0x128>)
 8007f0c:	4293      	cmp	r3, r2
 8007f0e:	d10a      	bne.n	8007f26 <xPortStartScheduler+0x46>
	__asm volatile
 8007f10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f14:	f383 8811 	msr	BASEPRI, r3
 8007f18:	f3bf 8f6f 	isb	sy
 8007f1c:	f3bf 8f4f 	dsb	sy
 8007f20:	60fb      	str	r3, [r7, #12]
}
 8007f22:	bf00      	nop
 8007f24:	e7fe      	b.n	8007f24 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007f26:	4b39      	ldr	r3, [pc, #228]	; (800800c <xPortStartScheduler+0x12c>)
 8007f28:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007f2a:	697b      	ldr	r3, [r7, #20]
 8007f2c:	781b      	ldrb	r3, [r3, #0]
 8007f2e:	b2db      	uxtb	r3, r3
 8007f30:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007f32:	697b      	ldr	r3, [r7, #20]
 8007f34:	22ff      	movs	r2, #255	; 0xff
 8007f36:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007f38:	697b      	ldr	r3, [r7, #20]
 8007f3a:	781b      	ldrb	r3, [r3, #0]
 8007f3c:	b2db      	uxtb	r3, r3
 8007f3e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007f40:	78fb      	ldrb	r3, [r7, #3]
 8007f42:	b2db      	uxtb	r3, r3
 8007f44:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007f48:	b2da      	uxtb	r2, r3
 8007f4a:	4b31      	ldr	r3, [pc, #196]	; (8008010 <xPortStartScheduler+0x130>)
 8007f4c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007f4e:	4b31      	ldr	r3, [pc, #196]	; (8008014 <xPortStartScheduler+0x134>)
 8007f50:	2207      	movs	r2, #7
 8007f52:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007f54:	e009      	b.n	8007f6a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007f56:	4b2f      	ldr	r3, [pc, #188]	; (8008014 <xPortStartScheduler+0x134>)
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	3b01      	subs	r3, #1
 8007f5c:	4a2d      	ldr	r2, [pc, #180]	; (8008014 <xPortStartScheduler+0x134>)
 8007f5e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007f60:	78fb      	ldrb	r3, [r7, #3]
 8007f62:	b2db      	uxtb	r3, r3
 8007f64:	005b      	lsls	r3, r3, #1
 8007f66:	b2db      	uxtb	r3, r3
 8007f68:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007f6a:	78fb      	ldrb	r3, [r7, #3]
 8007f6c:	b2db      	uxtb	r3, r3
 8007f6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f72:	2b80      	cmp	r3, #128	; 0x80
 8007f74:	d0ef      	beq.n	8007f56 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007f76:	4b27      	ldr	r3, [pc, #156]	; (8008014 <xPortStartScheduler+0x134>)
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	f1c3 0307 	rsb	r3, r3, #7
 8007f7e:	2b04      	cmp	r3, #4
 8007f80:	d00a      	beq.n	8007f98 <xPortStartScheduler+0xb8>
	__asm volatile
 8007f82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f86:	f383 8811 	msr	BASEPRI, r3
 8007f8a:	f3bf 8f6f 	isb	sy
 8007f8e:	f3bf 8f4f 	dsb	sy
 8007f92:	60bb      	str	r3, [r7, #8]
}
 8007f94:	bf00      	nop
 8007f96:	e7fe      	b.n	8007f96 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007f98:	4b1e      	ldr	r3, [pc, #120]	; (8008014 <xPortStartScheduler+0x134>)
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	021b      	lsls	r3, r3, #8
 8007f9e:	4a1d      	ldr	r2, [pc, #116]	; (8008014 <xPortStartScheduler+0x134>)
 8007fa0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007fa2:	4b1c      	ldr	r3, [pc, #112]	; (8008014 <xPortStartScheduler+0x134>)
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007faa:	4a1a      	ldr	r2, [pc, #104]	; (8008014 <xPortStartScheduler+0x134>)
 8007fac:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	b2da      	uxtb	r2, r3
 8007fb2:	697b      	ldr	r3, [r7, #20]
 8007fb4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007fb6:	4b18      	ldr	r3, [pc, #96]	; (8008018 <xPortStartScheduler+0x138>)
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	4a17      	ldr	r2, [pc, #92]	; (8008018 <xPortStartScheduler+0x138>)
 8007fbc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007fc0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007fc2:	4b15      	ldr	r3, [pc, #84]	; (8008018 <xPortStartScheduler+0x138>)
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	4a14      	ldr	r2, [pc, #80]	; (8008018 <xPortStartScheduler+0x138>)
 8007fc8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007fcc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007fce:	f000 f8dd 	bl	800818c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007fd2:	4b12      	ldr	r3, [pc, #72]	; (800801c <xPortStartScheduler+0x13c>)
 8007fd4:	2200      	movs	r2, #0
 8007fd6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007fd8:	f000 f8fc 	bl	80081d4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007fdc:	4b10      	ldr	r3, [pc, #64]	; (8008020 <xPortStartScheduler+0x140>)
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	4a0f      	ldr	r2, [pc, #60]	; (8008020 <xPortStartScheduler+0x140>)
 8007fe2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007fe6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007fe8:	f7ff ff66 	bl	8007eb8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007fec:	f7ff f856 	bl	800709c <vTaskSwitchContext>
	prvTaskExitError();
 8007ff0:	f7ff ff22 	bl	8007e38 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007ff4:	2300      	movs	r3, #0
}
 8007ff6:	4618      	mov	r0, r3
 8007ff8:	3718      	adds	r7, #24
 8007ffa:	46bd      	mov	sp, r7
 8007ffc:	bd80      	pop	{r7, pc}
 8007ffe:	bf00      	nop
 8008000:	e000ed00 	.word	0xe000ed00
 8008004:	410fc271 	.word	0x410fc271
 8008008:	410fc270 	.word	0x410fc270
 800800c:	e000e400 	.word	0xe000e400
 8008010:	20000d7c 	.word	0x20000d7c
 8008014:	20000d80 	.word	0x20000d80
 8008018:	e000ed20 	.word	0xe000ed20
 800801c:	2000000c 	.word	0x2000000c
 8008020:	e000ef34 	.word	0xe000ef34

08008024 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008024:	b480      	push	{r7}
 8008026:	b083      	sub	sp, #12
 8008028:	af00      	add	r7, sp, #0
	__asm volatile
 800802a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800802e:	f383 8811 	msr	BASEPRI, r3
 8008032:	f3bf 8f6f 	isb	sy
 8008036:	f3bf 8f4f 	dsb	sy
 800803a:	607b      	str	r3, [r7, #4]
}
 800803c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800803e:	4b0f      	ldr	r3, [pc, #60]	; (800807c <vPortEnterCritical+0x58>)
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	3301      	adds	r3, #1
 8008044:	4a0d      	ldr	r2, [pc, #52]	; (800807c <vPortEnterCritical+0x58>)
 8008046:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008048:	4b0c      	ldr	r3, [pc, #48]	; (800807c <vPortEnterCritical+0x58>)
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	2b01      	cmp	r3, #1
 800804e:	d10f      	bne.n	8008070 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008050:	4b0b      	ldr	r3, [pc, #44]	; (8008080 <vPortEnterCritical+0x5c>)
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	b2db      	uxtb	r3, r3
 8008056:	2b00      	cmp	r3, #0
 8008058:	d00a      	beq.n	8008070 <vPortEnterCritical+0x4c>
	__asm volatile
 800805a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800805e:	f383 8811 	msr	BASEPRI, r3
 8008062:	f3bf 8f6f 	isb	sy
 8008066:	f3bf 8f4f 	dsb	sy
 800806a:	603b      	str	r3, [r7, #0]
}
 800806c:	bf00      	nop
 800806e:	e7fe      	b.n	800806e <vPortEnterCritical+0x4a>
	}
}
 8008070:	bf00      	nop
 8008072:	370c      	adds	r7, #12
 8008074:	46bd      	mov	sp, r7
 8008076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800807a:	4770      	bx	lr
 800807c:	2000000c 	.word	0x2000000c
 8008080:	e000ed04 	.word	0xe000ed04

08008084 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008084:	b480      	push	{r7}
 8008086:	b083      	sub	sp, #12
 8008088:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800808a:	4b12      	ldr	r3, [pc, #72]	; (80080d4 <vPortExitCritical+0x50>)
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	2b00      	cmp	r3, #0
 8008090:	d10a      	bne.n	80080a8 <vPortExitCritical+0x24>
	__asm volatile
 8008092:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008096:	f383 8811 	msr	BASEPRI, r3
 800809a:	f3bf 8f6f 	isb	sy
 800809e:	f3bf 8f4f 	dsb	sy
 80080a2:	607b      	str	r3, [r7, #4]
}
 80080a4:	bf00      	nop
 80080a6:	e7fe      	b.n	80080a6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80080a8:	4b0a      	ldr	r3, [pc, #40]	; (80080d4 <vPortExitCritical+0x50>)
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	3b01      	subs	r3, #1
 80080ae:	4a09      	ldr	r2, [pc, #36]	; (80080d4 <vPortExitCritical+0x50>)
 80080b0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80080b2:	4b08      	ldr	r3, [pc, #32]	; (80080d4 <vPortExitCritical+0x50>)
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d105      	bne.n	80080c6 <vPortExitCritical+0x42>
 80080ba:	2300      	movs	r3, #0
 80080bc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80080be:	683b      	ldr	r3, [r7, #0]
 80080c0:	f383 8811 	msr	BASEPRI, r3
}
 80080c4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80080c6:	bf00      	nop
 80080c8:	370c      	adds	r7, #12
 80080ca:	46bd      	mov	sp, r7
 80080cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d0:	4770      	bx	lr
 80080d2:	bf00      	nop
 80080d4:	2000000c 	.word	0x2000000c
	...

080080e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80080e0:	f3ef 8009 	mrs	r0, PSP
 80080e4:	f3bf 8f6f 	isb	sy
 80080e8:	4b15      	ldr	r3, [pc, #84]	; (8008140 <pxCurrentTCBConst>)
 80080ea:	681a      	ldr	r2, [r3, #0]
 80080ec:	f01e 0f10 	tst.w	lr, #16
 80080f0:	bf08      	it	eq
 80080f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80080f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080fa:	6010      	str	r0, [r2, #0]
 80080fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008100:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008104:	f380 8811 	msr	BASEPRI, r0
 8008108:	f3bf 8f4f 	dsb	sy
 800810c:	f3bf 8f6f 	isb	sy
 8008110:	f7fe ffc4 	bl	800709c <vTaskSwitchContext>
 8008114:	f04f 0000 	mov.w	r0, #0
 8008118:	f380 8811 	msr	BASEPRI, r0
 800811c:	bc09      	pop	{r0, r3}
 800811e:	6819      	ldr	r1, [r3, #0]
 8008120:	6808      	ldr	r0, [r1, #0]
 8008122:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008126:	f01e 0f10 	tst.w	lr, #16
 800812a:	bf08      	it	eq
 800812c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008130:	f380 8809 	msr	PSP, r0
 8008134:	f3bf 8f6f 	isb	sy
 8008138:	4770      	bx	lr
 800813a:	bf00      	nop
 800813c:	f3af 8000 	nop.w

08008140 <pxCurrentTCBConst>:
 8008140:	20000750 	.word	0x20000750
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008144:	bf00      	nop
 8008146:	bf00      	nop

08008148 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008148:	b580      	push	{r7, lr}
 800814a:	b082      	sub	sp, #8
 800814c:	af00      	add	r7, sp, #0
	__asm volatile
 800814e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008152:	f383 8811 	msr	BASEPRI, r3
 8008156:	f3bf 8f6f 	isb	sy
 800815a:	f3bf 8f4f 	dsb	sy
 800815e:	607b      	str	r3, [r7, #4]
}
 8008160:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008162:	f7fe fee1 	bl	8006f28 <xTaskIncrementTick>
 8008166:	4603      	mov	r3, r0
 8008168:	2b00      	cmp	r3, #0
 800816a:	d003      	beq.n	8008174 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800816c:	4b06      	ldr	r3, [pc, #24]	; (8008188 <xPortSysTickHandler+0x40>)
 800816e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008172:	601a      	str	r2, [r3, #0]
 8008174:	2300      	movs	r3, #0
 8008176:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008178:	683b      	ldr	r3, [r7, #0]
 800817a:	f383 8811 	msr	BASEPRI, r3
}
 800817e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008180:	bf00      	nop
 8008182:	3708      	adds	r7, #8
 8008184:	46bd      	mov	sp, r7
 8008186:	bd80      	pop	{r7, pc}
 8008188:	e000ed04 	.word	0xe000ed04

0800818c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800818c:	b480      	push	{r7}
 800818e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008190:	4b0b      	ldr	r3, [pc, #44]	; (80081c0 <vPortSetupTimerInterrupt+0x34>)
 8008192:	2200      	movs	r2, #0
 8008194:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008196:	4b0b      	ldr	r3, [pc, #44]	; (80081c4 <vPortSetupTimerInterrupt+0x38>)
 8008198:	2200      	movs	r2, #0
 800819a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800819c:	4b0a      	ldr	r3, [pc, #40]	; (80081c8 <vPortSetupTimerInterrupt+0x3c>)
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	4a0a      	ldr	r2, [pc, #40]	; (80081cc <vPortSetupTimerInterrupt+0x40>)
 80081a2:	fba2 2303 	umull	r2, r3, r2, r3
 80081a6:	099b      	lsrs	r3, r3, #6
 80081a8:	4a09      	ldr	r2, [pc, #36]	; (80081d0 <vPortSetupTimerInterrupt+0x44>)
 80081aa:	3b01      	subs	r3, #1
 80081ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80081ae:	4b04      	ldr	r3, [pc, #16]	; (80081c0 <vPortSetupTimerInterrupt+0x34>)
 80081b0:	2207      	movs	r2, #7
 80081b2:	601a      	str	r2, [r3, #0]
}
 80081b4:	bf00      	nop
 80081b6:	46bd      	mov	sp, r7
 80081b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081bc:	4770      	bx	lr
 80081be:	bf00      	nop
 80081c0:	e000e010 	.word	0xe000e010
 80081c4:	e000e018 	.word	0xe000e018
 80081c8:	20000000 	.word	0x20000000
 80081cc:	10624dd3 	.word	0x10624dd3
 80081d0:	e000e014 	.word	0xe000e014

080081d4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80081d4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80081e4 <vPortEnableVFP+0x10>
 80081d8:	6801      	ldr	r1, [r0, #0]
 80081da:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80081de:	6001      	str	r1, [r0, #0]
 80081e0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80081e2:	bf00      	nop
 80081e4:	e000ed88 	.word	0xe000ed88

080081e8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80081e8:	b480      	push	{r7}
 80081ea:	b085      	sub	sp, #20
 80081ec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80081ee:	f3ef 8305 	mrs	r3, IPSR
 80081f2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	2b0f      	cmp	r3, #15
 80081f8:	d914      	bls.n	8008224 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80081fa:	4a17      	ldr	r2, [pc, #92]	; (8008258 <vPortValidateInterruptPriority+0x70>)
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	4413      	add	r3, r2
 8008200:	781b      	ldrb	r3, [r3, #0]
 8008202:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008204:	4b15      	ldr	r3, [pc, #84]	; (800825c <vPortValidateInterruptPriority+0x74>)
 8008206:	781b      	ldrb	r3, [r3, #0]
 8008208:	7afa      	ldrb	r2, [r7, #11]
 800820a:	429a      	cmp	r2, r3
 800820c:	d20a      	bcs.n	8008224 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800820e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008212:	f383 8811 	msr	BASEPRI, r3
 8008216:	f3bf 8f6f 	isb	sy
 800821a:	f3bf 8f4f 	dsb	sy
 800821e:	607b      	str	r3, [r7, #4]
}
 8008220:	bf00      	nop
 8008222:	e7fe      	b.n	8008222 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008224:	4b0e      	ldr	r3, [pc, #56]	; (8008260 <vPortValidateInterruptPriority+0x78>)
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800822c:	4b0d      	ldr	r3, [pc, #52]	; (8008264 <vPortValidateInterruptPriority+0x7c>)
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	429a      	cmp	r2, r3
 8008232:	d90a      	bls.n	800824a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8008234:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008238:	f383 8811 	msr	BASEPRI, r3
 800823c:	f3bf 8f6f 	isb	sy
 8008240:	f3bf 8f4f 	dsb	sy
 8008244:	603b      	str	r3, [r7, #0]
}
 8008246:	bf00      	nop
 8008248:	e7fe      	b.n	8008248 <vPortValidateInterruptPriority+0x60>
	}
 800824a:	bf00      	nop
 800824c:	3714      	adds	r7, #20
 800824e:	46bd      	mov	sp, r7
 8008250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008254:	4770      	bx	lr
 8008256:	bf00      	nop
 8008258:	e000e3f0 	.word	0xe000e3f0
 800825c:	20000d7c 	.word	0x20000d7c
 8008260:	e000ed0c 	.word	0xe000ed0c
 8008264:	20000d80 	.word	0x20000d80

08008268 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008268:	b580      	push	{r7, lr}
 800826a:	b08a      	sub	sp, #40	; 0x28
 800826c:	af00      	add	r7, sp, #0
 800826e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008270:	2300      	movs	r3, #0
 8008272:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008274:	f7fe fd9c 	bl	8006db0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008278:	4b5b      	ldr	r3, [pc, #364]	; (80083e8 <pvPortMalloc+0x180>)
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	2b00      	cmp	r3, #0
 800827e:	d101      	bne.n	8008284 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008280:	f000 f920 	bl	80084c4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008284:	4b59      	ldr	r3, [pc, #356]	; (80083ec <pvPortMalloc+0x184>)
 8008286:	681a      	ldr	r2, [r3, #0]
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	4013      	ands	r3, r2
 800828c:	2b00      	cmp	r3, #0
 800828e:	f040 8093 	bne.w	80083b8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	2b00      	cmp	r3, #0
 8008296:	d01d      	beq.n	80082d4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8008298:	2208      	movs	r2, #8
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	4413      	add	r3, r2
 800829e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	f003 0307 	and.w	r3, r3, #7
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d014      	beq.n	80082d4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	f023 0307 	bic.w	r3, r3, #7
 80082b0:	3308      	adds	r3, #8
 80082b2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	f003 0307 	and.w	r3, r3, #7
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d00a      	beq.n	80082d4 <pvPortMalloc+0x6c>
	__asm volatile
 80082be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082c2:	f383 8811 	msr	BASEPRI, r3
 80082c6:	f3bf 8f6f 	isb	sy
 80082ca:	f3bf 8f4f 	dsb	sy
 80082ce:	617b      	str	r3, [r7, #20]
}
 80082d0:	bf00      	nop
 80082d2:	e7fe      	b.n	80082d2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d06e      	beq.n	80083b8 <pvPortMalloc+0x150>
 80082da:	4b45      	ldr	r3, [pc, #276]	; (80083f0 <pvPortMalloc+0x188>)
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	687a      	ldr	r2, [r7, #4]
 80082e0:	429a      	cmp	r2, r3
 80082e2:	d869      	bhi.n	80083b8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80082e4:	4b43      	ldr	r3, [pc, #268]	; (80083f4 <pvPortMalloc+0x18c>)
 80082e6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80082e8:	4b42      	ldr	r3, [pc, #264]	; (80083f4 <pvPortMalloc+0x18c>)
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80082ee:	e004      	b.n	80082fa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80082f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082f2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80082f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80082fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082fc:	685b      	ldr	r3, [r3, #4]
 80082fe:	687a      	ldr	r2, [r7, #4]
 8008300:	429a      	cmp	r2, r3
 8008302:	d903      	bls.n	800830c <pvPortMalloc+0xa4>
 8008304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	2b00      	cmp	r3, #0
 800830a:	d1f1      	bne.n	80082f0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800830c:	4b36      	ldr	r3, [pc, #216]	; (80083e8 <pvPortMalloc+0x180>)
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008312:	429a      	cmp	r2, r3
 8008314:	d050      	beq.n	80083b8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008316:	6a3b      	ldr	r3, [r7, #32]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	2208      	movs	r2, #8
 800831c:	4413      	add	r3, r2
 800831e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008322:	681a      	ldr	r2, [r3, #0]
 8008324:	6a3b      	ldr	r3, [r7, #32]
 8008326:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800832a:	685a      	ldr	r2, [r3, #4]
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	1ad2      	subs	r2, r2, r3
 8008330:	2308      	movs	r3, #8
 8008332:	005b      	lsls	r3, r3, #1
 8008334:	429a      	cmp	r2, r3
 8008336:	d91f      	bls.n	8008378 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008338:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	4413      	add	r3, r2
 800833e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008340:	69bb      	ldr	r3, [r7, #24]
 8008342:	f003 0307 	and.w	r3, r3, #7
 8008346:	2b00      	cmp	r3, #0
 8008348:	d00a      	beq.n	8008360 <pvPortMalloc+0xf8>
	__asm volatile
 800834a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800834e:	f383 8811 	msr	BASEPRI, r3
 8008352:	f3bf 8f6f 	isb	sy
 8008356:	f3bf 8f4f 	dsb	sy
 800835a:	613b      	str	r3, [r7, #16]
}
 800835c:	bf00      	nop
 800835e:	e7fe      	b.n	800835e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008362:	685a      	ldr	r2, [r3, #4]
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	1ad2      	subs	r2, r2, r3
 8008368:	69bb      	ldr	r3, [r7, #24]
 800836a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800836c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800836e:	687a      	ldr	r2, [r7, #4]
 8008370:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008372:	69b8      	ldr	r0, [r7, #24]
 8008374:	f000 f908 	bl	8008588 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008378:	4b1d      	ldr	r3, [pc, #116]	; (80083f0 <pvPortMalloc+0x188>)
 800837a:	681a      	ldr	r2, [r3, #0]
 800837c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800837e:	685b      	ldr	r3, [r3, #4]
 8008380:	1ad3      	subs	r3, r2, r3
 8008382:	4a1b      	ldr	r2, [pc, #108]	; (80083f0 <pvPortMalloc+0x188>)
 8008384:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008386:	4b1a      	ldr	r3, [pc, #104]	; (80083f0 <pvPortMalloc+0x188>)
 8008388:	681a      	ldr	r2, [r3, #0]
 800838a:	4b1b      	ldr	r3, [pc, #108]	; (80083f8 <pvPortMalloc+0x190>)
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	429a      	cmp	r2, r3
 8008390:	d203      	bcs.n	800839a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008392:	4b17      	ldr	r3, [pc, #92]	; (80083f0 <pvPortMalloc+0x188>)
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	4a18      	ldr	r2, [pc, #96]	; (80083f8 <pvPortMalloc+0x190>)
 8008398:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800839a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800839c:	685a      	ldr	r2, [r3, #4]
 800839e:	4b13      	ldr	r3, [pc, #76]	; (80083ec <pvPortMalloc+0x184>)
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	431a      	orrs	r2, r3
 80083a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083a6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80083a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083aa:	2200      	movs	r2, #0
 80083ac:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80083ae:	4b13      	ldr	r3, [pc, #76]	; (80083fc <pvPortMalloc+0x194>)
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	3301      	adds	r3, #1
 80083b4:	4a11      	ldr	r2, [pc, #68]	; (80083fc <pvPortMalloc+0x194>)
 80083b6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80083b8:	f7fe fd08 	bl	8006dcc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80083bc:	69fb      	ldr	r3, [r7, #28]
 80083be:	f003 0307 	and.w	r3, r3, #7
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d00a      	beq.n	80083dc <pvPortMalloc+0x174>
	__asm volatile
 80083c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083ca:	f383 8811 	msr	BASEPRI, r3
 80083ce:	f3bf 8f6f 	isb	sy
 80083d2:	f3bf 8f4f 	dsb	sy
 80083d6:	60fb      	str	r3, [r7, #12]
}
 80083d8:	bf00      	nop
 80083da:	e7fe      	b.n	80083da <pvPortMalloc+0x172>
	return pvReturn;
 80083dc:	69fb      	ldr	r3, [r7, #28]
}
 80083de:	4618      	mov	r0, r3
 80083e0:	3728      	adds	r7, #40	; 0x28
 80083e2:	46bd      	mov	sp, r7
 80083e4:	bd80      	pop	{r7, pc}
 80083e6:	bf00      	nop
 80083e8:	2000498c 	.word	0x2000498c
 80083ec:	200049a0 	.word	0x200049a0
 80083f0:	20004990 	.word	0x20004990
 80083f4:	20004984 	.word	0x20004984
 80083f8:	20004994 	.word	0x20004994
 80083fc:	20004998 	.word	0x20004998

08008400 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008400:	b580      	push	{r7, lr}
 8008402:	b086      	sub	sp, #24
 8008404:	af00      	add	r7, sp, #0
 8008406:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	2b00      	cmp	r3, #0
 8008410:	d04d      	beq.n	80084ae <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008412:	2308      	movs	r3, #8
 8008414:	425b      	negs	r3, r3
 8008416:	697a      	ldr	r2, [r7, #20]
 8008418:	4413      	add	r3, r2
 800841a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800841c:	697b      	ldr	r3, [r7, #20]
 800841e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008420:	693b      	ldr	r3, [r7, #16]
 8008422:	685a      	ldr	r2, [r3, #4]
 8008424:	4b24      	ldr	r3, [pc, #144]	; (80084b8 <vPortFree+0xb8>)
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	4013      	ands	r3, r2
 800842a:	2b00      	cmp	r3, #0
 800842c:	d10a      	bne.n	8008444 <vPortFree+0x44>
	__asm volatile
 800842e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008432:	f383 8811 	msr	BASEPRI, r3
 8008436:	f3bf 8f6f 	isb	sy
 800843a:	f3bf 8f4f 	dsb	sy
 800843e:	60fb      	str	r3, [r7, #12]
}
 8008440:	bf00      	nop
 8008442:	e7fe      	b.n	8008442 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008444:	693b      	ldr	r3, [r7, #16]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	2b00      	cmp	r3, #0
 800844a:	d00a      	beq.n	8008462 <vPortFree+0x62>
	__asm volatile
 800844c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008450:	f383 8811 	msr	BASEPRI, r3
 8008454:	f3bf 8f6f 	isb	sy
 8008458:	f3bf 8f4f 	dsb	sy
 800845c:	60bb      	str	r3, [r7, #8]
}
 800845e:	bf00      	nop
 8008460:	e7fe      	b.n	8008460 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008462:	693b      	ldr	r3, [r7, #16]
 8008464:	685a      	ldr	r2, [r3, #4]
 8008466:	4b14      	ldr	r3, [pc, #80]	; (80084b8 <vPortFree+0xb8>)
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	4013      	ands	r3, r2
 800846c:	2b00      	cmp	r3, #0
 800846e:	d01e      	beq.n	80084ae <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008470:	693b      	ldr	r3, [r7, #16]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	2b00      	cmp	r3, #0
 8008476:	d11a      	bne.n	80084ae <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008478:	693b      	ldr	r3, [r7, #16]
 800847a:	685a      	ldr	r2, [r3, #4]
 800847c:	4b0e      	ldr	r3, [pc, #56]	; (80084b8 <vPortFree+0xb8>)
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	43db      	mvns	r3, r3
 8008482:	401a      	ands	r2, r3
 8008484:	693b      	ldr	r3, [r7, #16]
 8008486:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008488:	f7fe fc92 	bl	8006db0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800848c:	693b      	ldr	r3, [r7, #16]
 800848e:	685a      	ldr	r2, [r3, #4]
 8008490:	4b0a      	ldr	r3, [pc, #40]	; (80084bc <vPortFree+0xbc>)
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	4413      	add	r3, r2
 8008496:	4a09      	ldr	r2, [pc, #36]	; (80084bc <vPortFree+0xbc>)
 8008498:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800849a:	6938      	ldr	r0, [r7, #16]
 800849c:	f000 f874 	bl	8008588 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80084a0:	4b07      	ldr	r3, [pc, #28]	; (80084c0 <vPortFree+0xc0>)
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	3301      	adds	r3, #1
 80084a6:	4a06      	ldr	r2, [pc, #24]	; (80084c0 <vPortFree+0xc0>)
 80084a8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80084aa:	f7fe fc8f 	bl	8006dcc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80084ae:	bf00      	nop
 80084b0:	3718      	adds	r7, #24
 80084b2:	46bd      	mov	sp, r7
 80084b4:	bd80      	pop	{r7, pc}
 80084b6:	bf00      	nop
 80084b8:	200049a0 	.word	0x200049a0
 80084bc:	20004990 	.word	0x20004990
 80084c0:	2000499c 	.word	0x2000499c

080084c4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80084c4:	b480      	push	{r7}
 80084c6:	b085      	sub	sp, #20
 80084c8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80084ca:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80084ce:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80084d0:	4b27      	ldr	r3, [pc, #156]	; (8008570 <prvHeapInit+0xac>)
 80084d2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	f003 0307 	and.w	r3, r3, #7
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d00c      	beq.n	80084f8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	3307      	adds	r3, #7
 80084e2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	f023 0307 	bic.w	r3, r3, #7
 80084ea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80084ec:	68ba      	ldr	r2, [r7, #8]
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	1ad3      	subs	r3, r2, r3
 80084f2:	4a1f      	ldr	r2, [pc, #124]	; (8008570 <prvHeapInit+0xac>)
 80084f4:	4413      	add	r3, r2
 80084f6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80084fc:	4a1d      	ldr	r2, [pc, #116]	; (8008574 <prvHeapInit+0xb0>)
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008502:	4b1c      	ldr	r3, [pc, #112]	; (8008574 <prvHeapInit+0xb0>)
 8008504:	2200      	movs	r2, #0
 8008506:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	68ba      	ldr	r2, [r7, #8]
 800850c:	4413      	add	r3, r2
 800850e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008510:	2208      	movs	r2, #8
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	1a9b      	subs	r3, r3, r2
 8008516:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	f023 0307 	bic.w	r3, r3, #7
 800851e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	4a15      	ldr	r2, [pc, #84]	; (8008578 <prvHeapInit+0xb4>)
 8008524:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008526:	4b14      	ldr	r3, [pc, #80]	; (8008578 <prvHeapInit+0xb4>)
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	2200      	movs	r2, #0
 800852c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800852e:	4b12      	ldr	r3, [pc, #72]	; (8008578 <prvHeapInit+0xb4>)
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	2200      	movs	r2, #0
 8008534:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800853a:	683b      	ldr	r3, [r7, #0]
 800853c:	68fa      	ldr	r2, [r7, #12]
 800853e:	1ad2      	subs	r2, r2, r3
 8008540:	683b      	ldr	r3, [r7, #0]
 8008542:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008544:	4b0c      	ldr	r3, [pc, #48]	; (8008578 <prvHeapInit+0xb4>)
 8008546:	681a      	ldr	r2, [r3, #0]
 8008548:	683b      	ldr	r3, [r7, #0]
 800854a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800854c:	683b      	ldr	r3, [r7, #0]
 800854e:	685b      	ldr	r3, [r3, #4]
 8008550:	4a0a      	ldr	r2, [pc, #40]	; (800857c <prvHeapInit+0xb8>)
 8008552:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008554:	683b      	ldr	r3, [r7, #0]
 8008556:	685b      	ldr	r3, [r3, #4]
 8008558:	4a09      	ldr	r2, [pc, #36]	; (8008580 <prvHeapInit+0xbc>)
 800855a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800855c:	4b09      	ldr	r3, [pc, #36]	; (8008584 <prvHeapInit+0xc0>)
 800855e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008562:	601a      	str	r2, [r3, #0]
}
 8008564:	bf00      	nop
 8008566:	3714      	adds	r7, #20
 8008568:	46bd      	mov	sp, r7
 800856a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800856e:	4770      	bx	lr
 8008570:	20000d84 	.word	0x20000d84
 8008574:	20004984 	.word	0x20004984
 8008578:	2000498c 	.word	0x2000498c
 800857c:	20004994 	.word	0x20004994
 8008580:	20004990 	.word	0x20004990
 8008584:	200049a0 	.word	0x200049a0

08008588 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008588:	b480      	push	{r7}
 800858a:	b085      	sub	sp, #20
 800858c:	af00      	add	r7, sp, #0
 800858e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008590:	4b28      	ldr	r3, [pc, #160]	; (8008634 <prvInsertBlockIntoFreeList+0xac>)
 8008592:	60fb      	str	r3, [r7, #12]
 8008594:	e002      	b.n	800859c <prvInsertBlockIntoFreeList+0x14>
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	60fb      	str	r3, [r7, #12]
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	687a      	ldr	r2, [r7, #4]
 80085a2:	429a      	cmp	r2, r3
 80085a4:	d8f7      	bhi.n	8008596 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	685b      	ldr	r3, [r3, #4]
 80085ae:	68ba      	ldr	r2, [r7, #8]
 80085b0:	4413      	add	r3, r2
 80085b2:	687a      	ldr	r2, [r7, #4]
 80085b4:	429a      	cmp	r2, r3
 80085b6:	d108      	bne.n	80085ca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	685a      	ldr	r2, [r3, #4]
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	685b      	ldr	r3, [r3, #4]
 80085c0:	441a      	add	r2, r3
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	685b      	ldr	r3, [r3, #4]
 80085d2:	68ba      	ldr	r2, [r7, #8]
 80085d4:	441a      	add	r2, r3
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	429a      	cmp	r2, r3
 80085dc:	d118      	bne.n	8008610 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	681a      	ldr	r2, [r3, #0]
 80085e2:	4b15      	ldr	r3, [pc, #84]	; (8008638 <prvInsertBlockIntoFreeList+0xb0>)
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	429a      	cmp	r2, r3
 80085e8:	d00d      	beq.n	8008606 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	685a      	ldr	r2, [r3, #4]
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	685b      	ldr	r3, [r3, #4]
 80085f4:	441a      	add	r2, r3
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	681a      	ldr	r2, [r3, #0]
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	601a      	str	r2, [r3, #0]
 8008604:	e008      	b.n	8008618 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008606:	4b0c      	ldr	r3, [pc, #48]	; (8008638 <prvInsertBlockIntoFreeList+0xb0>)
 8008608:	681a      	ldr	r2, [r3, #0]
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	601a      	str	r2, [r3, #0]
 800860e:	e003      	b.n	8008618 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	681a      	ldr	r2, [r3, #0]
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008618:	68fa      	ldr	r2, [r7, #12]
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	429a      	cmp	r2, r3
 800861e:	d002      	beq.n	8008626 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	687a      	ldr	r2, [r7, #4]
 8008624:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008626:	bf00      	nop
 8008628:	3714      	adds	r7, #20
 800862a:	46bd      	mov	sp, r7
 800862c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008630:	4770      	bx	lr
 8008632:	bf00      	nop
 8008634:	20004984 	.word	0x20004984
 8008638:	2000498c 	.word	0x2000498c

0800863c <__errno>:
 800863c:	4b01      	ldr	r3, [pc, #4]	; (8008644 <__errno+0x8>)
 800863e:	6818      	ldr	r0, [r3, #0]
 8008640:	4770      	bx	lr
 8008642:	bf00      	nop
 8008644:	20000010 	.word	0x20000010

08008648 <__libc_init_array>:
 8008648:	b570      	push	{r4, r5, r6, lr}
 800864a:	4d0d      	ldr	r5, [pc, #52]	; (8008680 <__libc_init_array+0x38>)
 800864c:	4c0d      	ldr	r4, [pc, #52]	; (8008684 <__libc_init_array+0x3c>)
 800864e:	1b64      	subs	r4, r4, r5
 8008650:	10a4      	asrs	r4, r4, #2
 8008652:	2600      	movs	r6, #0
 8008654:	42a6      	cmp	r6, r4
 8008656:	d109      	bne.n	800866c <__libc_init_array+0x24>
 8008658:	4d0b      	ldr	r5, [pc, #44]	; (8008688 <__libc_init_array+0x40>)
 800865a:	4c0c      	ldr	r4, [pc, #48]	; (800868c <__libc_init_array+0x44>)
 800865c:	f001 f9be 	bl	80099dc <_init>
 8008660:	1b64      	subs	r4, r4, r5
 8008662:	10a4      	asrs	r4, r4, #2
 8008664:	2600      	movs	r6, #0
 8008666:	42a6      	cmp	r6, r4
 8008668:	d105      	bne.n	8008676 <__libc_init_array+0x2e>
 800866a:	bd70      	pop	{r4, r5, r6, pc}
 800866c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008670:	4798      	blx	r3
 8008672:	3601      	adds	r6, #1
 8008674:	e7ee      	b.n	8008654 <__libc_init_array+0xc>
 8008676:	f855 3b04 	ldr.w	r3, [r5], #4
 800867a:	4798      	blx	r3
 800867c:	3601      	adds	r6, #1
 800867e:	e7f2      	b.n	8008666 <__libc_init_array+0x1e>
 8008680:	08009e74 	.word	0x08009e74
 8008684:	08009e74 	.word	0x08009e74
 8008688:	08009e74 	.word	0x08009e74
 800868c:	08009e78 	.word	0x08009e78

08008690 <memcpy>:
 8008690:	440a      	add	r2, r1
 8008692:	4291      	cmp	r1, r2
 8008694:	f100 33ff 	add.w	r3, r0, #4294967295
 8008698:	d100      	bne.n	800869c <memcpy+0xc>
 800869a:	4770      	bx	lr
 800869c:	b510      	push	{r4, lr}
 800869e:	f811 4b01 	ldrb.w	r4, [r1], #1
 80086a2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80086a6:	4291      	cmp	r1, r2
 80086a8:	d1f9      	bne.n	800869e <memcpy+0xe>
 80086aa:	bd10      	pop	{r4, pc}

080086ac <memset>:
 80086ac:	4402      	add	r2, r0
 80086ae:	4603      	mov	r3, r0
 80086b0:	4293      	cmp	r3, r2
 80086b2:	d100      	bne.n	80086b6 <memset+0xa>
 80086b4:	4770      	bx	lr
 80086b6:	f803 1b01 	strb.w	r1, [r3], #1
 80086ba:	e7f9      	b.n	80086b0 <memset+0x4>

080086bc <iprintf>:
 80086bc:	b40f      	push	{r0, r1, r2, r3}
 80086be:	4b0a      	ldr	r3, [pc, #40]	; (80086e8 <iprintf+0x2c>)
 80086c0:	b513      	push	{r0, r1, r4, lr}
 80086c2:	681c      	ldr	r4, [r3, #0]
 80086c4:	b124      	cbz	r4, 80086d0 <iprintf+0x14>
 80086c6:	69a3      	ldr	r3, [r4, #24]
 80086c8:	b913      	cbnz	r3, 80086d0 <iprintf+0x14>
 80086ca:	4620      	mov	r0, r4
 80086cc:	f000 fa7e 	bl	8008bcc <__sinit>
 80086d0:	ab05      	add	r3, sp, #20
 80086d2:	9a04      	ldr	r2, [sp, #16]
 80086d4:	68a1      	ldr	r1, [r4, #8]
 80086d6:	9301      	str	r3, [sp, #4]
 80086d8:	4620      	mov	r0, r4
 80086da:	f000 fdab 	bl	8009234 <_vfiprintf_r>
 80086de:	b002      	add	sp, #8
 80086e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80086e4:	b004      	add	sp, #16
 80086e6:	4770      	bx	lr
 80086e8:	20000010 	.word	0x20000010

080086ec <_puts_r>:
 80086ec:	b570      	push	{r4, r5, r6, lr}
 80086ee:	460e      	mov	r6, r1
 80086f0:	4605      	mov	r5, r0
 80086f2:	b118      	cbz	r0, 80086fc <_puts_r+0x10>
 80086f4:	6983      	ldr	r3, [r0, #24]
 80086f6:	b90b      	cbnz	r3, 80086fc <_puts_r+0x10>
 80086f8:	f000 fa68 	bl	8008bcc <__sinit>
 80086fc:	69ab      	ldr	r3, [r5, #24]
 80086fe:	68ac      	ldr	r4, [r5, #8]
 8008700:	b913      	cbnz	r3, 8008708 <_puts_r+0x1c>
 8008702:	4628      	mov	r0, r5
 8008704:	f000 fa62 	bl	8008bcc <__sinit>
 8008708:	4b2c      	ldr	r3, [pc, #176]	; (80087bc <_puts_r+0xd0>)
 800870a:	429c      	cmp	r4, r3
 800870c:	d120      	bne.n	8008750 <_puts_r+0x64>
 800870e:	686c      	ldr	r4, [r5, #4]
 8008710:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008712:	07db      	lsls	r3, r3, #31
 8008714:	d405      	bmi.n	8008722 <_puts_r+0x36>
 8008716:	89a3      	ldrh	r3, [r4, #12]
 8008718:	0598      	lsls	r0, r3, #22
 800871a:	d402      	bmi.n	8008722 <_puts_r+0x36>
 800871c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800871e:	f000 faf3 	bl	8008d08 <__retarget_lock_acquire_recursive>
 8008722:	89a3      	ldrh	r3, [r4, #12]
 8008724:	0719      	lsls	r1, r3, #28
 8008726:	d51d      	bpl.n	8008764 <_puts_r+0x78>
 8008728:	6923      	ldr	r3, [r4, #16]
 800872a:	b1db      	cbz	r3, 8008764 <_puts_r+0x78>
 800872c:	3e01      	subs	r6, #1
 800872e:	68a3      	ldr	r3, [r4, #8]
 8008730:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008734:	3b01      	subs	r3, #1
 8008736:	60a3      	str	r3, [r4, #8]
 8008738:	bb39      	cbnz	r1, 800878a <_puts_r+0x9e>
 800873a:	2b00      	cmp	r3, #0
 800873c:	da38      	bge.n	80087b0 <_puts_r+0xc4>
 800873e:	4622      	mov	r2, r4
 8008740:	210a      	movs	r1, #10
 8008742:	4628      	mov	r0, r5
 8008744:	f000 f868 	bl	8008818 <__swbuf_r>
 8008748:	3001      	adds	r0, #1
 800874a:	d011      	beq.n	8008770 <_puts_r+0x84>
 800874c:	250a      	movs	r5, #10
 800874e:	e011      	b.n	8008774 <_puts_r+0x88>
 8008750:	4b1b      	ldr	r3, [pc, #108]	; (80087c0 <_puts_r+0xd4>)
 8008752:	429c      	cmp	r4, r3
 8008754:	d101      	bne.n	800875a <_puts_r+0x6e>
 8008756:	68ac      	ldr	r4, [r5, #8]
 8008758:	e7da      	b.n	8008710 <_puts_r+0x24>
 800875a:	4b1a      	ldr	r3, [pc, #104]	; (80087c4 <_puts_r+0xd8>)
 800875c:	429c      	cmp	r4, r3
 800875e:	bf08      	it	eq
 8008760:	68ec      	ldreq	r4, [r5, #12]
 8008762:	e7d5      	b.n	8008710 <_puts_r+0x24>
 8008764:	4621      	mov	r1, r4
 8008766:	4628      	mov	r0, r5
 8008768:	f000 f8a8 	bl	80088bc <__swsetup_r>
 800876c:	2800      	cmp	r0, #0
 800876e:	d0dd      	beq.n	800872c <_puts_r+0x40>
 8008770:	f04f 35ff 	mov.w	r5, #4294967295
 8008774:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008776:	07da      	lsls	r2, r3, #31
 8008778:	d405      	bmi.n	8008786 <_puts_r+0x9a>
 800877a:	89a3      	ldrh	r3, [r4, #12]
 800877c:	059b      	lsls	r3, r3, #22
 800877e:	d402      	bmi.n	8008786 <_puts_r+0x9a>
 8008780:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008782:	f000 fac2 	bl	8008d0a <__retarget_lock_release_recursive>
 8008786:	4628      	mov	r0, r5
 8008788:	bd70      	pop	{r4, r5, r6, pc}
 800878a:	2b00      	cmp	r3, #0
 800878c:	da04      	bge.n	8008798 <_puts_r+0xac>
 800878e:	69a2      	ldr	r2, [r4, #24]
 8008790:	429a      	cmp	r2, r3
 8008792:	dc06      	bgt.n	80087a2 <_puts_r+0xb6>
 8008794:	290a      	cmp	r1, #10
 8008796:	d004      	beq.n	80087a2 <_puts_r+0xb6>
 8008798:	6823      	ldr	r3, [r4, #0]
 800879a:	1c5a      	adds	r2, r3, #1
 800879c:	6022      	str	r2, [r4, #0]
 800879e:	7019      	strb	r1, [r3, #0]
 80087a0:	e7c5      	b.n	800872e <_puts_r+0x42>
 80087a2:	4622      	mov	r2, r4
 80087a4:	4628      	mov	r0, r5
 80087a6:	f000 f837 	bl	8008818 <__swbuf_r>
 80087aa:	3001      	adds	r0, #1
 80087ac:	d1bf      	bne.n	800872e <_puts_r+0x42>
 80087ae:	e7df      	b.n	8008770 <_puts_r+0x84>
 80087b0:	6823      	ldr	r3, [r4, #0]
 80087b2:	250a      	movs	r5, #10
 80087b4:	1c5a      	adds	r2, r3, #1
 80087b6:	6022      	str	r2, [r4, #0]
 80087b8:	701d      	strb	r5, [r3, #0]
 80087ba:	e7db      	b.n	8008774 <_puts_r+0x88>
 80087bc:	08009df8 	.word	0x08009df8
 80087c0:	08009e18 	.word	0x08009e18
 80087c4:	08009dd8 	.word	0x08009dd8

080087c8 <puts>:
 80087c8:	4b02      	ldr	r3, [pc, #8]	; (80087d4 <puts+0xc>)
 80087ca:	4601      	mov	r1, r0
 80087cc:	6818      	ldr	r0, [r3, #0]
 80087ce:	f7ff bf8d 	b.w	80086ec <_puts_r>
 80087d2:	bf00      	nop
 80087d4:	20000010 	.word	0x20000010

080087d8 <siprintf>:
 80087d8:	b40e      	push	{r1, r2, r3}
 80087da:	b500      	push	{lr}
 80087dc:	b09c      	sub	sp, #112	; 0x70
 80087de:	ab1d      	add	r3, sp, #116	; 0x74
 80087e0:	9002      	str	r0, [sp, #8]
 80087e2:	9006      	str	r0, [sp, #24]
 80087e4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80087e8:	4809      	ldr	r0, [pc, #36]	; (8008810 <siprintf+0x38>)
 80087ea:	9107      	str	r1, [sp, #28]
 80087ec:	9104      	str	r1, [sp, #16]
 80087ee:	4909      	ldr	r1, [pc, #36]	; (8008814 <siprintf+0x3c>)
 80087f0:	f853 2b04 	ldr.w	r2, [r3], #4
 80087f4:	9105      	str	r1, [sp, #20]
 80087f6:	6800      	ldr	r0, [r0, #0]
 80087f8:	9301      	str	r3, [sp, #4]
 80087fa:	a902      	add	r1, sp, #8
 80087fc:	f000 fbf0 	bl	8008fe0 <_svfiprintf_r>
 8008800:	9b02      	ldr	r3, [sp, #8]
 8008802:	2200      	movs	r2, #0
 8008804:	701a      	strb	r2, [r3, #0]
 8008806:	b01c      	add	sp, #112	; 0x70
 8008808:	f85d eb04 	ldr.w	lr, [sp], #4
 800880c:	b003      	add	sp, #12
 800880e:	4770      	bx	lr
 8008810:	20000010 	.word	0x20000010
 8008814:	ffff0208 	.word	0xffff0208

08008818 <__swbuf_r>:
 8008818:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800881a:	460e      	mov	r6, r1
 800881c:	4614      	mov	r4, r2
 800881e:	4605      	mov	r5, r0
 8008820:	b118      	cbz	r0, 800882a <__swbuf_r+0x12>
 8008822:	6983      	ldr	r3, [r0, #24]
 8008824:	b90b      	cbnz	r3, 800882a <__swbuf_r+0x12>
 8008826:	f000 f9d1 	bl	8008bcc <__sinit>
 800882a:	4b21      	ldr	r3, [pc, #132]	; (80088b0 <__swbuf_r+0x98>)
 800882c:	429c      	cmp	r4, r3
 800882e:	d12b      	bne.n	8008888 <__swbuf_r+0x70>
 8008830:	686c      	ldr	r4, [r5, #4]
 8008832:	69a3      	ldr	r3, [r4, #24]
 8008834:	60a3      	str	r3, [r4, #8]
 8008836:	89a3      	ldrh	r3, [r4, #12]
 8008838:	071a      	lsls	r2, r3, #28
 800883a:	d52f      	bpl.n	800889c <__swbuf_r+0x84>
 800883c:	6923      	ldr	r3, [r4, #16]
 800883e:	b36b      	cbz	r3, 800889c <__swbuf_r+0x84>
 8008840:	6923      	ldr	r3, [r4, #16]
 8008842:	6820      	ldr	r0, [r4, #0]
 8008844:	1ac0      	subs	r0, r0, r3
 8008846:	6963      	ldr	r3, [r4, #20]
 8008848:	b2f6      	uxtb	r6, r6
 800884a:	4283      	cmp	r3, r0
 800884c:	4637      	mov	r7, r6
 800884e:	dc04      	bgt.n	800885a <__swbuf_r+0x42>
 8008850:	4621      	mov	r1, r4
 8008852:	4628      	mov	r0, r5
 8008854:	f000 f926 	bl	8008aa4 <_fflush_r>
 8008858:	bb30      	cbnz	r0, 80088a8 <__swbuf_r+0x90>
 800885a:	68a3      	ldr	r3, [r4, #8]
 800885c:	3b01      	subs	r3, #1
 800885e:	60a3      	str	r3, [r4, #8]
 8008860:	6823      	ldr	r3, [r4, #0]
 8008862:	1c5a      	adds	r2, r3, #1
 8008864:	6022      	str	r2, [r4, #0]
 8008866:	701e      	strb	r6, [r3, #0]
 8008868:	6963      	ldr	r3, [r4, #20]
 800886a:	3001      	adds	r0, #1
 800886c:	4283      	cmp	r3, r0
 800886e:	d004      	beq.n	800887a <__swbuf_r+0x62>
 8008870:	89a3      	ldrh	r3, [r4, #12]
 8008872:	07db      	lsls	r3, r3, #31
 8008874:	d506      	bpl.n	8008884 <__swbuf_r+0x6c>
 8008876:	2e0a      	cmp	r6, #10
 8008878:	d104      	bne.n	8008884 <__swbuf_r+0x6c>
 800887a:	4621      	mov	r1, r4
 800887c:	4628      	mov	r0, r5
 800887e:	f000 f911 	bl	8008aa4 <_fflush_r>
 8008882:	b988      	cbnz	r0, 80088a8 <__swbuf_r+0x90>
 8008884:	4638      	mov	r0, r7
 8008886:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008888:	4b0a      	ldr	r3, [pc, #40]	; (80088b4 <__swbuf_r+0x9c>)
 800888a:	429c      	cmp	r4, r3
 800888c:	d101      	bne.n	8008892 <__swbuf_r+0x7a>
 800888e:	68ac      	ldr	r4, [r5, #8]
 8008890:	e7cf      	b.n	8008832 <__swbuf_r+0x1a>
 8008892:	4b09      	ldr	r3, [pc, #36]	; (80088b8 <__swbuf_r+0xa0>)
 8008894:	429c      	cmp	r4, r3
 8008896:	bf08      	it	eq
 8008898:	68ec      	ldreq	r4, [r5, #12]
 800889a:	e7ca      	b.n	8008832 <__swbuf_r+0x1a>
 800889c:	4621      	mov	r1, r4
 800889e:	4628      	mov	r0, r5
 80088a0:	f000 f80c 	bl	80088bc <__swsetup_r>
 80088a4:	2800      	cmp	r0, #0
 80088a6:	d0cb      	beq.n	8008840 <__swbuf_r+0x28>
 80088a8:	f04f 37ff 	mov.w	r7, #4294967295
 80088ac:	e7ea      	b.n	8008884 <__swbuf_r+0x6c>
 80088ae:	bf00      	nop
 80088b0:	08009df8 	.word	0x08009df8
 80088b4:	08009e18 	.word	0x08009e18
 80088b8:	08009dd8 	.word	0x08009dd8

080088bc <__swsetup_r>:
 80088bc:	4b32      	ldr	r3, [pc, #200]	; (8008988 <__swsetup_r+0xcc>)
 80088be:	b570      	push	{r4, r5, r6, lr}
 80088c0:	681d      	ldr	r5, [r3, #0]
 80088c2:	4606      	mov	r6, r0
 80088c4:	460c      	mov	r4, r1
 80088c6:	b125      	cbz	r5, 80088d2 <__swsetup_r+0x16>
 80088c8:	69ab      	ldr	r3, [r5, #24]
 80088ca:	b913      	cbnz	r3, 80088d2 <__swsetup_r+0x16>
 80088cc:	4628      	mov	r0, r5
 80088ce:	f000 f97d 	bl	8008bcc <__sinit>
 80088d2:	4b2e      	ldr	r3, [pc, #184]	; (800898c <__swsetup_r+0xd0>)
 80088d4:	429c      	cmp	r4, r3
 80088d6:	d10f      	bne.n	80088f8 <__swsetup_r+0x3c>
 80088d8:	686c      	ldr	r4, [r5, #4]
 80088da:	89a3      	ldrh	r3, [r4, #12]
 80088dc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80088e0:	0719      	lsls	r1, r3, #28
 80088e2:	d42c      	bmi.n	800893e <__swsetup_r+0x82>
 80088e4:	06dd      	lsls	r5, r3, #27
 80088e6:	d411      	bmi.n	800890c <__swsetup_r+0x50>
 80088e8:	2309      	movs	r3, #9
 80088ea:	6033      	str	r3, [r6, #0]
 80088ec:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80088f0:	81a3      	strh	r3, [r4, #12]
 80088f2:	f04f 30ff 	mov.w	r0, #4294967295
 80088f6:	e03e      	b.n	8008976 <__swsetup_r+0xba>
 80088f8:	4b25      	ldr	r3, [pc, #148]	; (8008990 <__swsetup_r+0xd4>)
 80088fa:	429c      	cmp	r4, r3
 80088fc:	d101      	bne.n	8008902 <__swsetup_r+0x46>
 80088fe:	68ac      	ldr	r4, [r5, #8]
 8008900:	e7eb      	b.n	80088da <__swsetup_r+0x1e>
 8008902:	4b24      	ldr	r3, [pc, #144]	; (8008994 <__swsetup_r+0xd8>)
 8008904:	429c      	cmp	r4, r3
 8008906:	bf08      	it	eq
 8008908:	68ec      	ldreq	r4, [r5, #12]
 800890a:	e7e6      	b.n	80088da <__swsetup_r+0x1e>
 800890c:	0758      	lsls	r0, r3, #29
 800890e:	d512      	bpl.n	8008936 <__swsetup_r+0x7a>
 8008910:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008912:	b141      	cbz	r1, 8008926 <__swsetup_r+0x6a>
 8008914:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008918:	4299      	cmp	r1, r3
 800891a:	d002      	beq.n	8008922 <__swsetup_r+0x66>
 800891c:	4630      	mov	r0, r6
 800891e:	f000 fa59 	bl	8008dd4 <_free_r>
 8008922:	2300      	movs	r3, #0
 8008924:	6363      	str	r3, [r4, #52]	; 0x34
 8008926:	89a3      	ldrh	r3, [r4, #12]
 8008928:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800892c:	81a3      	strh	r3, [r4, #12]
 800892e:	2300      	movs	r3, #0
 8008930:	6063      	str	r3, [r4, #4]
 8008932:	6923      	ldr	r3, [r4, #16]
 8008934:	6023      	str	r3, [r4, #0]
 8008936:	89a3      	ldrh	r3, [r4, #12]
 8008938:	f043 0308 	orr.w	r3, r3, #8
 800893c:	81a3      	strh	r3, [r4, #12]
 800893e:	6923      	ldr	r3, [r4, #16]
 8008940:	b94b      	cbnz	r3, 8008956 <__swsetup_r+0x9a>
 8008942:	89a3      	ldrh	r3, [r4, #12]
 8008944:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008948:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800894c:	d003      	beq.n	8008956 <__swsetup_r+0x9a>
 800894e:	4621      	mov	r1, r4
 8008950:	4630      	mov	r0, r6
 8008952:	f000 f9ff 	bl	8008d54 <__smakebuf_r>
 8008956:	89a0      	ldrh	r0, [r4, #12]
 8008958:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800895c:	f010 0301 	ands.w	r3, r0, #1
 8008960:	d00a      	beq.n	8008978 <__swsetup_r+0xbc>
 8008962:	2300      	movs	r3, #0
 8008964:	60a3      	str	r3, [r4, #8]
 8008966:	6963      	ldr	r3, [r4, #20]
 8008968:	425b      	negs	r3, r3
 800896a:	61a3      	str	r3, [r4, #24]
 800896c:	6923      	ldr	r3, [r4, #16]
 800896e:	b943      	cbnz	r3, 8008982 <__swsetup_r+0xc6>
 8008970:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008974:	d1ba      	bne.n	80088ec <__swsetup_r+0x30>
 8008976:	bd70      	pop	{r4, r5, r6, pc}
 8008978:	0781      	lsls	r1, r0, #30
 800897a:	bf58      	it	pl
 800897c:	6963      	ldrpl	r3, [r4, #20]
 800897e:	60a3      	str	r3, [r4, #8]
 8008980:	e7f4      	b.n	800896c <__swsetup_r+0xb0>
 8008982:	2000      	movs	r0, #0
 8008984:	e7f7      	b.n	8008976 <__swsetup_r+0xba>
 8008986:	bf00      	nop
 8008988:	20000010 	.word	0x20000010
 800898c:	08009df8 	.word	0x08009df8
 8008990:	08009e18 	.word	0x08009e18
 8008994:	08009dd8 	.word	0x08009dd8

08008998 <__sflush_r>:
 8008998:	898a      	ldrh	r2, [r1, #12]
 800899a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800899e:	4605      	mov	r5, r0
 80089a0:	0710      	lsls	r0, r2, #28
 80089a2:	460c      	mov	r4, r1
 80089a4:	d458      	bmi.n	8008a58 <__sflush_r+0xc0>
 80089a6:	684b      	ldr	r3, [r1, #4]
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	dc05      	bgt.n	80089b8 <__sflush_r+0x20>
 80089ac:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	dc02      	bgt.n	80089b8 <__sflush_r+0x20>
 80089b2:	2000      	movs	r0, #0
 80089b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80089b8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80089ba:	2e00      	cmp	r6, #0
 80089bc:	d0f9      	beq.n	80089b2 <__sflush_r+0x1a>
 80089be:	2300      	movs	r3, #0
 80089c0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80089c4:	682f      	ldr	r7, [r5, #0]
 80089c6:	602b      	str	r3, [r5, #0]
 80089c8:	d032      	beq.n	8008a30 <__sflush_r+0x98>
 80089ca:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80089cc:	89a3      	ldrh	r3, [r4, #12]
 80089ce:	075a      	lsls	r2, r3, #29
 80089d0:	d505      	bpl.n	80089de <__sflush_r+0x46>
 80089d2:	6863      	ldr	r3, [r4, #4]
 80089d4:	1ac0      	subs	r0, r0, r3
 80089d6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80089d8:	b10b      	cbz	r3, 80089de <__sflush_r+0x46>
 80089da:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80089dc:	1ac0      	subs	r0, r0, r3
 80089de:	2300      	movs	r3, #0
 80089e0:	4602      	mov	r2, r0
 80089e2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80089e4:	6a21      	ldr	r1, [r4, #32]
 80089e6:	4628      	mov	r0, r5
 80089e8:	47b0      	blx	r6
 80089ea:	1c43      	adds	r3, r0, #1
 80089ec:	89a3      	ldrh	r3, [r4, #12]
 80089ee:	d106      	bne.n	80089fe <__sflush_r+0x66>
 80089f0:	6829      	ldr	r1, [r5, #0]
 80089f2:	291d      	cmp	r1, #29
 80089f4:	d82c      	bhi.n	8008a50 <__sflush_r+0xb8>
 80089f6:	4a2a      	ldr	r2, [pc, #168]	; (8008aa0 <__sflush_r+0x108>)
 80089f8:	40ca      	lsrs	r2, r1
 80089fa:	07d6      	lsls	r6, r2, #31
 80089fc:	d528      	bpl.n	8008a50 <__sflush_r+0xb8>
 80089fe:	2200      	movs	r2, #0
 8008a00:	6062      	str	r2, [r4, #4]
 8008a02:	04d9      	lsls	r1, r3, #19
 8008a04:	6922      	ldr	r2, [r4, #16]
 8008a06:	6022      	str	r2, [r4, #0]
 8008a08:	d504      	bpl.n	8008a14 <__sflush_r+0x7c>
 8008a0a:	1c42      	adds	r2, r0, #1
 8008a0c:	d101      	bne.n	8008a12 <__sflush_r+0x7a>
 8008a0e:	682b      	ldr	r3, [r5, #0]
 8008a10:	b903      	cbnz	r3, 8008a14 <__sflush_r+0x7c>
 8008a12:	6560      	str	r0, [r4, #84]	; 0x54
 8008a14:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008a16:	602f      	str	r7, [r5, #0]
 8008a18:	2900      	cmp	r1, #0
 8008a1a:	d0ca      	beq.n	80089b2 <__sflush_r+0x1a>
 8008a1c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008a20:	4299      	cmp	r1, r3
 8008a22:	d002      	beq.n	8008a2a <__sflush_r+0x92>
 8008a24:	4628      	mov	r0, r5
 8008a26:	f000 f9d5 	bl	8008dd4 <_free_r>
 8008a2a:	2000      	movs	r0, #0
 8008a2c:	6360      	str	r0, [r4, #52]	; 0x34
 8008a2e:	e7c1      	b.n	80089b4 <__sflush_r+0x1c>
 8008a30:	6a21      	ldr	r1, [r4, #32]
 8008a32:	2301      	movs	r3, #1
 8008a34:	4628      	mov	r0, r5
 8008a36:	47b0      	blx	r6
 8008a38:	1c41      	adds	r1, r0, #1
 8008a3a:	d1c7      	bne.n	80089cc <__sflush_r+0x34>
 8008a3c:	682b      	ldr	r3, [r5, #0]
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d0c4      	beq.n	80089cc <__sflush_r+0x34>
 8008a42:	2b1d      	cmp	r3, #29
 8008a44:	d001      	beq.n	8008a4a <__sflush_r+0xb2>
 8008a46:	2b16      	cmp	r3, #22
 8008a48:	d101      	bne.n	8008a4e <__sflush_r+0xb6>
 8008a4a:	602f      	str	r7, [r5, #0]
 8008a4c:	e7b1      	b.n	80089b2 <__sflush_r+0x1a>
 8008a4e:	89a3      	ldrh	r3, [r4, #12]
 8008a50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008a54:	81a3      	strh	r3, [r4, #12]
 8008a56:	e7ad      	b.n	80089b4 <__sflush_r+0x1c>
 8008a58:	690f      	ldr	r7, [r1, #16]
 8008a5a:	2f00      	cmp	r7, #0
 8008a5c:	d0a9      	beq.n	80089b2 <__sflush_r+0x1a>
 8008a5e:	0793      	lsls	r3, r2, #30
 8008a60:	680e      	ldr	r6, [r1, #0]
 8008a62:	bf08      	it	eq
 8008a64:	694b      	ldreq	r3, [r1, #20]
 8008a66:	600f      	str	r7, [r1, #0]
 8008a68:	bf18      	it	ne
 8008a6a:	2300      	movne	r3, #0
 8008a6c:	eba6 0807 	sub.w	r8, r6, r7
 8008a70:	608b      	str	r3, [r1, #8]
 8008a72:	f1b8 0f00 	cmp.w	r8, #0
 8008a76:	dd9c      	ble.n	80089b2 <__sflush_r+0x1a>
 8008a78:	6a21      	ldr	r1, [r4, #32]
 8008a7a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008a7c:	4643      	mov	r3, r8
 8008a7e:	463a      	mov	r2, r7
 8008a80:	4628      	mov	r0, r5
 8008a82:	47b0      	blx	r6
 8008a84:	2800      	cmp	r0, #0
 8008a86:	dc06      	bgt.n	8008a96 <__sflush_r+0xfe>
 8008a88:	89a3      	ldrh	r3, [r4, #12]
 8008a8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008a8e:	81a3      	strh	r3, [r4, #12]
 8008a90:	f04f 30ff 	mov.w	r0, #4294967295
 8008a94:	e78e      	b.n	80089b4 <__sflush_r+0x1c>
 8008a96:	4407      	add	r7, r0
 8008a98:	eba8 0800 	sub.w	r8, r8, r0
 8008a9c:	e7e9      	b.n	8008a72 <__sflush_r+0xda>
 8008a9e:	bf00      	nop
 8008aa0:	20400001 	.word	0x20400001

08008aa4 <_fflush_r>:
 8008aa4:	b538      	push	{r3, r4, r5, lr}
 8008aa6:	690b      	ldr	r3, [r1, #16]
 8008aa8:	4605      	mov	r5, r0
 8008aaa:	460c      	mov	r4, r1
 8008aac:	b913      	cbnz	r3, 8008ab4 <_fflush_r+0x10>
 8008aae:	2500      	movs	r5, #0
 8008ab0:	4628      	mov	r0, r5
 8008ab2:	bd38      	pop	{r3, r4, r5, pc}
 8008ab4:	b118      	cbz	r0, 8008abe <_fflush_r+0x1a>
 8008ab6:	6983      	ldr	r3, [r0, #24]
 8008ab8:	b90b      	cbnz	r3, 8008abe <_fflush_r+0x1a>
 8008aba:	f000 f887 	bl	8008bcc <__sinit>
 8008abe:	4b14      	ldr	r3, [pc, #80]	; (8008b10 <_fflush_r+0x6c>)
 8008ac0:	429c      	cmp	r4, r3
 8008ac2:	d11b      	bne.n	8008afc <_fflush_r+0x58>
 8008ac4:	686c      	ldr	r4, [r5, #4]
 8008ac6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d0ef      	beq.n	8008aae <_fflush_r+0xa>
 8008ace:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008ad0:	07d0      	lsls	r0, r2, #31
 8008ad2:	d404      	bmi.n	8008ade <_fflush_r+0x3a>
 8008ad4:	0599      	lsls	r1, r3, #22
 8008ad6:	d402      	bmi.n	8008ade <_fflush_r+0x3a>
 8008ad8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008ada:	f000 f915 	bl	8008d08 <__retarget_lock_acquire_recursive>
 8008ade:	4628      	mov	r0, r5
 8008ae0:	4621      	mov	r1, r4
 8008ae2:	f7ff ff59 	bl	8008998 <__sflush_r>
 8008ae6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008ae8:	07da      	lsls	r2, r3, #31
 8008aea:	4605      	mov	r5, r0
 8008aec:	d4e0      	bmi.n	8008ab0 <_fflush_r+0xc>
 8008aee:	89a3      	ldrh	r3, [r4, #12]
 8008af0:	059b      	lsls	r3, r3, #22
 8008af2:	d4dd      	bmi.n	8008ab0 <_fflush_r+0xc>
 8008af4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008af6:	f000 f908 	bl	8008d0a <__retarget_lock_release_recursive>
 8008afa:	e7d9      	b.n	8008ab0 <_fflush_r+0xc>
 8008afc:	4b05      	ldr	r3, [pc, #20]	; (8008b14 <_fflush_r+0x70>)
 8008afe:	429c      	cmp	r4, r3
 8008b00:	d101      	bne.n	8008b06 <_fflush_r+0x62>
 8008b02:	68ac      	ldr	r4, [r5, #8]
 8008b04:	e7df      	b.n	8008ac6 <_fflush_r+0x22>
 8008b06:	4b04      	ldr	r3, [pc, #16]	; (8008b18 <_fflush_r+0x74>)
 8008b08:	429c      	cmp	r4, r3
 8008b0a:	bf08      	it	eq
 8008b0c:	68ec      	ldreq	r4, [r5, #12]
 8008b0e:	e7da      	b.n	8008ac6 <_fflush_r+0x22>
 8008b10:	08009df8 	.word	0x08009df8
 8008b14:	08009e18 	.word	0x08009e18
 8008b18:	08009dd8 	.word	0x08009dd8

08008b1c <std>:
 8008b1c:	2300      	movs	r3, #0
 8008b1e:	b510      	push	{r4, lr}
 8008b20:	4604      	mov	r4, r0
 8008b22:	e9c0 3300 	strd	r3, r3, [r0]
 8008b26:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008b2a:	6083      	str	r3, [r0, #8]
 8008b2c:	8181      	strh	r1, [r0, #12]
 8008b2e:	6643      	str	r3, [r0, #100]	; 0x64
 8008b30:	81c2      	strh	r2, [r0, #14]
 8008b32:	6183      	str	r3, [r0, #24]
 8008b34:	4619      	mov	r1, r3
 8008b36:	2208      	movs	r2, #8
 8008b38:	305c      	adds	r0, #92	; 0x5c
 8008b3a:	f7ff fdb7 	bl	80086ac <memset>
 8008b3e:	4b05      	ldr	r3, [pc, #20]	; (8008b54 <std+0x38>)
 8008b40:	6263      	str	r3, [r4, #36]	; 0x24
 8008b42:	4b05      	ldr	r3, [pc, #20]	; (8008b58 <std+0x3c>)
 8008b44:	62a3      	str	r3, [r4, #40]	; 0x28
 8008b46:	4b05      	ldr	r3, [pc, #20]	; (8008b5c <std+0x40>)
 8008b48:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008b4a:	4b05      	ldr	r3, [pc, #20]	; (8008b60 <std+0x44>)
 8008b4c:	6224      	str	r4, [r4, #32]
 8008b4e:	6323      	str	r3, [r4, #48]	; 0x30
 8008b50:	bd10      	pop	{r4, pc}
 8008b52:	bf00      	nop
 8008b54:	080097dd 	.word	0x080097dd
 8008b58:	080097ff 	.word	0x080097ff
 8008b5c:	08009837 	.word	0x08009837
 8008b60:	0800985b 	.word	0x0800985b

08008b64 <_cleanup_r>:
 8008b64:	4901      	ldr	r1, [pc, #4]	; (8008b6c <_cleanup_r+0x8>)
 8008b66:	f000 b8af 	b.w	8008cc8 <_fwalk_reent>
 8008b6a:	bf00      	nop
 8008b6c:	08008aa5 	.word	0x08008aa5

08008b70 <__sfmoreglue>:
 8008b70:	b570      	push	{r4, r5, r6, lr}
 8008b72:	1e4a      	subs	r2, r1, #1
 8008b74:	2568      	movs	r5, #104	; 0x68
 8008b76:	4355      	muls	r5, r2
 8008b78:	460e      	mov	r6, r1
 8008b7a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008b7e:	f000 f979 	bl	8008e74 <_malloc_r>
 8008b82:	4604      	mov	r4, r0
 8008b84:	b140      	cbz	r0, 8008b98 <__sfmoreglue+0x28>
 8008b86:	2100      	movs	r1, #0
 8008b88:	e9c0 1600 	strd	r1, r6, [r0]
 8008b8c:	300c      	adds	r0, #12
 8008b8e:	60a0      	str	r0, [r4, #8]
 8008b90:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008b94:	f7ff fd8a 	bl	80086ac <memset>
 8008b98:	4620      	mov	r0, r4
 8008b9a:	bd70      	pop	{r4, r5, r6, pc}

08008b9c <__sfp_lock_acquire>:
 8008b9c:	4801      	ldr	r0, [pc, #4]	; (8008ba4 <__sfp_lock_acquire+0x8>)
 8008b9e:	f000 b8b3 	b.w	8008d08 <__retarget_lock_acquire_recursive>
 8008ba2:	bf00      	nop
 8008ba4:	20004c28 	.word	0x20004c28

08008ba8 <__sfp_lock_release>:
 8008ba8:	4801      	ldr	r0, [pc, #4]	; (8008bb0 <__sfp_lock_release+0x8>)
 8008baa:	f000 b8ae 	b.w	8008d0a <__retarget_lock_release_recursive>
 8008bae:	bf00      	nop
 8008bb0:	20004c28 	.word	0x20004c28

08008bb4 <__sinit_lock_acquire>:
 8008bb4:	4801      	ldr	r0, [pc, #4]	; (8008bbc <__sinit_lock_acquire+0x8>)
 8008bb6:	f000 b8a7 	b.w	8008d08 <__retarget_lock_acquire_recursive>
 8008bba:	bf00      	nop
 8008bbc:	20004c23 	.word	0x20004c23

08008bc0 <__sinit_lock_release>:
 8008bc0:	4801      	ldr	r0, [pc, #4]	; (8008bc8 <__sinit_lock_release+0x8>)
 8008bc2:	f000 b8a2 	b.w	8008d0a <__retarget_lock_release_recursive>
 8008bc6:	bf00      	nop
 8008bc8:	20004c23 	.word	0x20004c23

08008bcc <__sinit>:
 8008bcc:	b510      	push	{r4, lr}
 8008bce:	4604      	mov	r4, r0
 8008bd0:	f7ff fff0 	bl	8008bb4 <__sinit_lock_acquire>
 8008bd4:	69a3      	ldr	r3, [r4, #24]
 8008bd6:	b11b      	cbz	r3, 8008be0 <__sinit+0x14>
 8008bd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008bdc:	f7ff bff0 	b.w	8008bc0 <__sinit_lock_release>
 8008be0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008be4:	6523      	str	r3, [r4, #80]	; 0x50
 8008be6:	4b13      	ldr	r3, [pc, #76]	; (8008c34 <__sinit+0x68>)
 8008be8:	4a13      	ldr	r2, [pc, #76]	; (8008c38 <__sinit+0x6c>)
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	62a2      	str	r2, [r4, #40]	; 0x28
 8008bee:	42a3      	cmp	r3, r4
 8008bf0:	bf04      	itt	eq
 8008bf2:	2301      	moveq	r3, #1
 8008bf4:	61a3      	streq	r3, [r4, #24]
 8008bf6:	4620      	mov	r0, r4
 8008bf8:	f000 f820 	bl	8008c3c <__sfp>
 8008bfc:	6060      	str	r0, [r4, #4]
 8008bfe:	4620      	mov	r0, r4
 8008c00:	f000 f81c 	bl	8008c3c <__sfp>
 8008c04:	60a0      	str	r0, [r4, #8]
 8008c06:	4620      	mov	r0, r4
 8008c08:	f000 f818 	bl	8008c3c <__sfp>
 8008c0c:	2200      	movs	r2, #0
 8008c0e:	60e0      	str	r0, [r4, #12]
 8008c10:	2104      	movs	r1, #4
 8008c12:	6860      	ldr	r0, [r4, #4]
 8008c14:	f7ff ff82 	bl	8008b1c <std>
 8008c18:	68a0      	ldr	r0, [r4, #8]
 8008c1a:	2201      	movs	r2, #1
 8008c1c:	2109      	movs	r1, #9
 8008c1e:	f7ff ff7d 	bl	8008b1c <std>
 8008c22:	68e0      	ldr	r0, [r4, #12]
 8008c24:	2202      	movs	r2, #2
 8008c26:	2112      	movs	r1, #18
 8008c28:	f7ff ff78 	bl	8008b1c <std>
 8008c2c:	2301      	movs	r3, #1
 8008c2e:	61a3      	str	r3, [r4, #24]
 8008c30:	e7d2      	b.n	8008bd8 <__sinit+0xc>
 8008c32:	bf00      	nop
 8008c34:	08009dd4 	.word	0x08009dd4
 8008c38:	08008b65 	.word	0x08008b65

08008c3c <__sfp>:
 8008c3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c3e:	4607      	mov	r7, r0
 8008c40:	f7ff ffac 	bl	8008b9c <__sfp_lock_acquire>
 8008c44:	4b1e      	ldr	r3, [pc, #120]	; (8008cc0 <__sfp+0x84>)
 8008c46:	681e      	ldr	r6, [r3, #0]
 8008c48:	69b3      	ldr	r3, [r6, #24]
 8008c4a:	b913      	cbnz	r3, 8008c52 <__sfp+0x16>
 8008c4c:	4630      	mov	r0, r6
 8008c4e:	f7ff ffbd 	bl	8008bcc <__sinit>
 8008c52:	3648      	adds	r6, #72	; 0x48
 8008c54:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008c58:	3b01      	subs	r3, #1
 8008c5a:	d503      	bpl.n	8008c64 <__sfp+0x28>
 8008c5c:	6833      	ldr	r3, [r6, #0]
 8008c5e:	b30b      	cbz	r3, 8008ca4 <__sfp+0x68>
 8008c60:	6836      	ldr	r6, [r6, #0]
 8008c62:	e7f7      	b.n	8008c54 <__sfp+0x18>
 8008c64:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008c68:	b9d5      	cbnz	r5, 8008ca0 <__sfp+0x64>
 8008c6a:	4b16      	ldr	r3, [pc, #88]	; (8008cc4 <__sfp+0x88>)
 8008c6c:	60e3      	str	r3, [r4, #12]
 8008c6e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008c72:	6665      	str	r5, [r4, #100]	; 0x64
 8008c74:	f000 f847 	bl	8008d06 <__retarget_lock_init_recursive>
 8008c78:	f7ff ff96 	bl	8008ba8 <__sfp_lock_release>
 8008c7c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008c80:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008c84:	6025      	str	r5, [r4, #0]
 8008c86:	61a5      	str	r5, [r4, #24]
 8008c88:	2208      	movs	r2, #8
 8008c8a:	4629      	mov	r1, r5
 8008c8c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008c90:	f7ff fd0c 	bl	80086ac <memset>
 8008c94:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008c98:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008c9c:	4620      	mov	r0, r4
 8008c9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008ca0:	3468      	adds	r4, #104	; 0x68
 8008ca2:	e7d9      	b.n	8008c58 <__sfp+0x1c>
 8008ca4:	2104      	movs	r1, #4
 8008ca6:	4638      	mov	r0, r7
 8008ca8:	f7ff ff62 	bl	8008b70 <__sfmoreglue>
 8008cac:	4604      	mov	r4, r0
 8008cae:	6030      	str	r0, [r6, #0]
 8008cb0:	2800      	cmp	r0, #0
 8008cb2:	d1d5      	bne.n	8008c60 <__sfp+0x24>
 8008cb4:	f7ff ff78 	bl	8008ba8 <__sfp_lock_release>
 8008cb8:	230c      	movs	r3, #12
 8008cba:	603b      	str	r3, [r7, #0]
 8008cbc:	e7ee      	b.n	8008c9c <__sfp+0x60>
 8008cbe:	bf00      	nop
 8008cc0:	08009dd4 	.word	0x08009dd4
 8008cc4:	ffff0001 	.word	0xffff0001

08008cc8 <_fwalk_reent>:
 8008cc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008ccc:	4606      	mov	r6, r0
 8008cce:	4688      	mov	r8, r1
 8008cd0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008cd4:	2700      	movs	r7, #0
 8008cd6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008cda:	f1b9 0901 	subs.w	r9, r9, #1
 8008cde:	d505      	bpl.n	8008cec <_fwalk_reent+0x24>
 8008ce0:	6824      	ldr	r4, [r4, #0]
 8008ce2:	2c00      	cmp	r4, #0
 8008ce4:	d1f7      	bne.n	8008cd6 <_fwalk_reent+0xe>
 8008ce6:	4638      	mov	r0, r7
 8008ce8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008cec:	89ab      	ldrh	r3, [r5, #12]
 8008cee:	2b01      	cmp	r3, #1
 8008cf0:	d907      	bls.n	8008d02 <_fwalk_reent+0x3a>
 8008cf2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008cf6:	3301      	adds	r3, #1
 8008cf8:	d003      	beq.n	8008d02 <_fwalk_reent+0x3a>
 8008cfa:	4629      	mov	r1, r5
 8008cfc:	4630      	mov	r0, r6
 8008cfe:	47c0      	blx	r8
 8008d00:	4307      	orrs	r7, r0
 8008d02:	3568      	adds	r5, #104	; 0x68
 8008d04:	e7e9      	b.n	8008cda <_fwalk_reent+0x12>

08008d06 <__retarget_lock_init_recursive>:
 8008d06:	4770      	bx	lr

08008d08 <__retarget_lock_acquire_recursive>:
 8008d08:	4770      	bx	lr

08008d0a <__retarget_lock_release_recursive>:
 8008d0a:	4770      	bx	lr

08008d0c <__swhatbuf_r>:
 8008d0c:	b570      	push	{r4, r5, r6, lr}
 8008d0e:	460e      	mov	r6, r1
 8008d10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d14:	2900      	cmp	r1, #0
 8008d16:	b096      	sub	sp, #88	; 0x58
 8008d18:	4614      	mov	r4, r2
 8008d1a:	461d      	mov	r5, r3
 8008d1c:	da07      	bge.n	8008d2e <__swhatbuf_r+0x22>
 8008d1e:	2300      	movs	r3, #0
 8008d20:	602b      	str	r3, [r5, #0]
 8008d22:	89b3      	ldrh	r3, [r6, #12]
 8008d24:	061a      	lsls	r2, r3, #24
 8008d26:	d410      	bmi.n	8008d4a <__swhatbuf_r+0x3e>
 8008d28:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008d2c:	e00e      	b.n	8008d4c <__swhatbuf_r+0x40>
 8008d2e:	466a      	mov	r2, sp
 8008d30:	f000 fdba 	bl	80098a8 <_fstat_r>
 8008d34:	2800      	cmp	r0, #0
 8008d36:	dbf2      	blt.n	8008d1e <__swhatbuf_r+0x12>
 8008d38:	9a01      	ldr	r2, [sp, #4]
 8008d3a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008d3e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008d42:	425a      	negs	r2, r3
 8008d44:	415a      	adcs	r2, r3
 8008d46:	602a      	str	r2, [r5, #0]
 8008d48:	e7ee      	b.n	8008d28 <__swhatbuf_r+0x1c>
 8008d4a:	2340      	movs	r3, #64	; 0x40
 8008d4c:	2000      	movs	r0, #0
 8008d4e:	6023      	str	r3, [r4, #0]
 8008d50:	b016      	add	sp, #88	; 0x58
 8008d52:	bd70      	pop	{r4, r5, r6, pc}

08008d54 <__smakebuf_r>:
 8008d54:	898b      	ldrh	r3, [r1, #12]
 8008d56:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008d58:	079d      	lsls	r5, r3, #30
 8008d5a:	4606      	mov	r6, r0
 8008d5c:	460c      	mov	r4, r1
 8008d5e:	d507      	bpl.n	8008d70 <__smakebuf_r+0x1c>
 8008d60:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008d64:	6023      	str	r3, [r4, #0]
 8008d66:	6123      	str	r3, [r4, #16]
 8008d68:	2301      	movs	r3, #1
 8008d6a:	6163      	str	r3, [r4, #20]
 8008d6c:	b002      	add	sp, #8
 8008d6e:	bd70      	pop	{r4, r5, r6, pc}
 8008d70:	ab01      	add	r3, sp, #4
 8008d72:	466a      	mov	r2, sp
 8008d74:	f7ff ffca 	bl	8008d0c <__swhatbuf_r>
 8008d78:	9900      	ldr	r1, [sp, #0]
 8008d7a:	4605      	mov	r5, r0
 8008d7c:	4630      	mov	r0, r6
 8008d7e:	f000 f879 	bl	8008e74 <_malloc_r>
 8008d82:	b948      	cbnz	r0, 8008d98 <__smakebuf_r+0x44>
 8008d84:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008d88:	059a      	lsls	r2, r3, #22
 8008d8a:	d4ef      	bmi.n	8008d6c <__smakebuf_r+0x18>
 8008d8c:	f023 0303 	bic.w	r3, r3, #3
 8008d90:	f043 0302 	orr.w	r3, r3, #2
 8008d94:	81a3      	strh	r3, [r4, #12]
 8008d96:	e7e3      	b.n	8008d60 <__smakebuf_r+0xc>
 8008d98:	4b0d      	ldr	r3, [pc, #52]	; (8008dd0 <__smakebuf_r+0x7c>)
 8008d9a:	62b3      	str	r3, [r6, #40]	; 0x28
 8008d9c:	89a3      	ldrh	r3, [r4, #12]
 8008d9e:	6020      	str	r0, [r4, #0]
 8008da0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008da4:	81a3      	strh	r3, [r4, #12]
 8008da6:	9b00      	ldr	r3, [sp, #0]
 8008da8:	6163      	str	r3, [r4, #20]
 8008daa:	9b01      	ldr	r3, [sp, #4]
 8008dac:	6120      	str	r0, [r4, #16]
 8008dae:	b15b      	cbz	r3, 8008dc8 <__smakebuf_r+0x74>
 8008db0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008db4:	4630      	mov	r0, r6
 8008db6:	f000 fd89 	bl	80098cc <_isatty_r>
 8008dba:	b128      	cbz	r0, 8008dc8 <__smakebuf_r+0x74>
 8008dbc:	89a3      	ldrh	r3, [r4, #12]
 8008dbe:	f023 0303 	bic.w	r3, r3, #3
 8008dc2:	f043 0301 	orr.w	r3, r3, #1
 8008dc6:	81a3      	strh	r3, [r4, #12]
 8008dc8:	89a0      	ldrh	r0, [r4, #12]
 8008dca:	4305      	orrs	r5, r0
 8008dcc:	81a5      	strh	r5, [r4, #12]
 8008dce:	e7cd      	b.n	8008d6c <__smakebuf_r+0x18>
 8008dd0:	08008b65 	.word	0x08008b65

08008dd4 <_free_r>:
 8008dd4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008dd6:	2900      	cmp	r1, #0
 8008dd8:	d048      	beq.n	8008e6c <_free_r+0x98>
 8008dda:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008dde:	9001      	str	r0, [sp, #4]
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	f1a1 0404 	sub.w	r4, r1, #4
 8008de6:	bfb8      	it	lt
 8008de8:	18e4      	addlt	r4, r4, r3
 8008dea:	f000 fdab 	bl	8009944 <__malloc_lock>
 8008dee:	4a20      	ldr	r2, [pc, #128]	; (8008e70 <_free_r+0x9c>)
 8008df0:	9801      	ldr	r0, [sp, #4]
 8008df2:	6813      	ldr	r3, [r2, #0]
 8008df4:	4615      	mov	r5, r2
 8008df6:	b933      	cbnz	r3, 8008e06 <_free_r+0x32>
 8008df8:	6063      	str	r3, [r4, #4]
 8008dfa:	6014      	str	r4, [r2, #0]
 8008dfc:	b003      	add	sp, #12
 8008dfe:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008e02:	f000 bda5 	b.w	8009950 <__malloc_unlock>
 8008e06:	42a3      	cmp	r3, r4
 8008e08:	d90b      	bls.n	8008e22 <_free_r+0x4e>
 8008e0a:	6821      	ldr	r1, [r4, #0]
 8008e0c:	1862      	adds	r2, r4, r1
 8008e0e:	4293      	cmp	r3, r2
 8008e10:	bf04      	itt	eq
 8008e12:	681a      	ldreq	r2, [r3, #0]
 8008e14:	685b      	ldreq	r3, [r3, #4]
 8008e16:	6063      	str	r3, [r4, #4]
 8008e18:	bf04      	itt	eq
 8008e1a:	1852      	addeq	r2, r2, r1
 8008e1c:	6022      	streq	r2, [r4, #0]
 8008e1e:	602c      	str	r4, [r5, #0]
 8008e20:	e7ec      	b.n	8008dfc <_free_r+0x28>
 8008e22:	461a      	mov	r2, r3
 8008e24:	685b      	ldr	r3, [r3, #4]
 8008e26:	b10b      	cbz	r3, 8008e2c <_free_r+0x58>
 8008e28:	42a3      	cmp	r3, r4
 8008e2a:	d9fa      	bls.n	8008e22 <_free_r+0x4e>
 8008e2c:	6811      	ldr	r1, [r2, #0]
 8008e2e:	1855      	adds	r5, r2, r1
 8008e30:	42a5      	cmp	r5, r4
 8008e32:	d10b      	bne.n	8008e4c <_free_r+0x78>
 8008e34:	6824      	ldr	r4, [r4, #0]
 8008e36:	4421      	add	r1, r4
 8008e38:	1854      	adds	r4, r2, r1
 8008e3a:	42a3      	cmp	r3, r4
 8008e3c:	6011      	str	r1, [r2, #0]
 8008e3e:	d1dd      	bne.n	8008dfc <_free_r+0x28>
 8008e40:	681c      	ldr	r4, [r3, #0]
 8008e42:	685b      	ldr	r3, [r3, #4]
 8008e44:	6053      	str	r3, [r2, #4]
 8008e46:	4421      	add	r1, r4
 8008e48:	6011      	str	r1, [r2, #0]
 8008e4a:	e7d7      	b.n	8008dfc <_free_r+0x28>
 8008e4c:	d902      	bls.n	8008e54 <_free_r+0x80>
 8008e4e:	230c      	movs	r3, #12
 8008e50:	6003      	str	r3, [r0, #0]
 8008e52:	e7d3      	b.n	8008dfc <_free_r+0x28>
 8008e54:	6825      	ldr	r5, [r4, #0]
 8008e56:	1961      	adds	r1, r4, r5
 8008e58:	428b      	cmp	r3, r1
 8008e5a:	bf04      	itt	eq
 8008e5c:	6819      	ldreq	r1, [r3, #0]
 8008e5e:	685b      	ldreq	r3, [r3, #4]
 8008e60:	6063      	str	r3, [r4, #4]
 8008e62:	bf04      	itt	eq
 8008e64:	1949      	addeq	r1, r1, r5
 8008e66:	6021      	streq	r1, [r4, #0]
 8008e68:	6054      	str	r4, [r2, #4]
 8008e6a:	e7c7      	b.n	8008dfc <_free_r+0x28>
 8008e6c:	b003      	add	sp, #12
 8008e6e:	bd30      	pop	{r4, r5, pc}
 8008e70:	200049a4 	.word	0x200049a4

08008e74 <_malloc_r>:
 8008e74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e76:	1ccd      	adds	r5, r1, #3
 8008e78:	f025 0503 	bic.w	r5, r5, #3
 8008e7c:	3508      	adds	r5, #8
 8008e7e:	2d0c      	cmp	r5, #12
 8008e80:	bf38      	it	cc
 8008e82:	250c      	movcc	r5, #12
 8008e84:	2d00      	cmp	r5, #0
 8008e86:	4606      	mov	r6, r0
 8008e88:	db01      	blt.n	8008e8e <_malloc_r+0x1a>
 8008e8a:	42a9      	cmp	r1, r5
 8008e8c:	d903      	bls.n	8008e96 <_malloc_r+0x22>
 8008e8e:	230c      	movs	r3, #12
 8008e90:	6033      	str	r3, [r6, #0]
 8008e92:	2000      	movs	r0, #0
 8008e94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008e96:	f000 fd55 	bl	8009944 <__malloc_lock>
 8008e9a:	4921      	ldr	r1, [pc, #132]	; (8008f20 <_malloc_r+0xac>)
 8008e9c:	680a      	ldr	r2, [r1, #0]
 8008e9e:	4614      	mov	r4, r2
 8008ea0:	b99c      	cbnz	r4, 8008eca <_malloc_r+0x56>
 8008ea2:	4f20      	ldr	r7, [pc, #128]	; (8008f24 <_malloc_r+0xb0>)
 8008ea4:	683b      	ldr	r3, [r7, #0]
 8008ea6:	b923      	cbnz	r3, 8008eb2 <_malloc_r+0x3e>
 8008ea8:	4621      	mov	r1, r4
 8008eaa:	4630      	mov	r0, r6
 8008eac:	f000 fc86 	bl	80097bc <_sbrk_r>
 8008eb0:	6038      	str	r0, [r7, #0]
 8008eb2:	4629      	mov	r1, r5
 8008eb4:	4630      	mov	r0, r6
 8008eb6:	f000 fc81 	bl	80097bc <_sbrk_r>
 8008eba:	1c43      	adds	r3, r0, #1
 8008ebc:	d123      	bne.n	8008f06 <_malloc_r+0x92>
 8008ebe:	230c      	movs	r3, #12
 8008ec0:	6033      	str	r3, [r6, #0]
 8008ec2:	4630      	mov	r0, r6
 8008ec4:	f000 fd44 	bl	8009950 <__malloc_unlock>
 8008ec8:	e7e3      	b.n	8008e92 <_malloc_r+0x1e>
 8008eca:	6823      	ldr	r3, [r4, #0]
 8008ecc:	1b5b      	subs	r3, r3, r5
 8008ece:	d417      	bmi.n	8008f00 <_malloc_r+0x8c>
 8008ed0:	2b0b      	cmp	r3, #11
 8008ed2:	d903      	bls.n	8008edc <_malloc_r+0x68>
 8008ed4:	6023      	str	r3, [r4, #0]
 8008ed6:	441c      	add	r4, r3
 8008ed8:	6025      	str	r5, [r4, #0]
 8008eda:	e004      	b.n	8008ee6 <_malloc_r+0x72>
 8008edc:	6863      	ldr	r3, [r4, #4]
 8008ede:	42a2      	cmp	r2, r4
 8008ee0:	bf0c      	ite	eq
 8008ee2:	600b      	streq	r3, [r1, #0]
 8008ee4:	6053      	strne	r3, [r2, #4]
 8008ee6:	4630      	mov	r0, r6
 8008ee8:	f000 fd32 	bl	8009950 <__malloc_unlock>
 8008eec:	f104 000b 	add.w	r0, r4, #11
 8008ef0:	1d23      	adds	r3, r4, #4
 8008ef2:	f020 0007 	bic.w	r0, r0, #7
 8008ef6:	1ac2      	subs	r2, r0, r3
 8008ef8:	d0cc      	beq.n	8008e94 <_malloc_r+0x20>
 8008efa:	1a1b      	subs	r3, r3, r0
 8008efc:	50a3      	str	r3, [r4, r2]
 8008efe:	e7c9      	b.n	8008e94 <_malloc_r+0x20>
 8008f00:	4622      	mov	r2, r4
 8008f02:	6864      	ldr	r4, [r4, #4]
 8008f04:	e7cc      	b.n	8008ea0 <_malloc_r+0x2c>
 8008f06:	1cc4      	adds	r4, r0, #3
 8008f08:	f024 0403 	bic.w	r4, r4, #3
 8008f0c:	42a0      	cmp	r0, r4
 8008f0e:	d0e3      	beq.n	8008ed8 <_malloc_r+0x64>
 8008f10:	1a21      	subs	r1, r4, r0
 8008f12:	4630      	mov	r0, r6
 8008f14:	f000 fc52 	bl	80097bc <_sbrk_r>
 8008f18:	3001      	adds	r0, #1
 8008f1a:	d1dd      	bne.n	8008ed8 <_malloc_r+0x64>
 8008f1c:	e7cf      	b.n	8008ebe <_malloc_r+0x4a>
 8008f1e:	bf00      	nop
 8008f20:	200049a4 	.word	0x200049a4
 8008f24:	200049a8 	.word	0x200049a8

08008f28 <__ssputs_r>:
 8008f28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008f2c:	688e      	ldr	r6, [r1, #8]
 8008f2e:	429e      	cmp	r6, r3
 8008f30:	4682      	mov	sl, r0
 8008f32:	460c      	mov	r4, r1
 8008f34:	4690      	mov	r8, r2
 8008f36:	461f      	mov	r7, r3
 8008f38:	d838      	bhi.n	8008fac <__ssputs_r+0x84>
 8008f3a:	898a      	ldrh	r2, [r1, #12]
 8008f3c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008f40:	d032      	beq.n	8008fa8 <__ssputs_r+0x80>
 8008f42:	6825      	ldr	r5, [r4, #0]
 8008f44:	6909      	ldr	r1, [r1, #16]
 8008f46:	eba5 0901 	sub.w	r9, r5, r1
 8008f4a:	6965      	ldr	r5, [r4, #20]
 8008f4c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008f50:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008f54:	3301      	adds	r3, #1
 8008f56:	444b      	add	r3, r9
 8008f58:	106d      	asrs	r5, r5, #1
 8008f5a:	429d      	cmp	r5, r3
 8008f5c:	bf38      	it	cc
 8008f5e:	461d      	movcc	r5, r3
 8008f60:	0553      	lsls	r3, r2, #21
 8008f62:	d531      	bpl.n	8008fc8 <__ssputs_r+0xa0>
 8008f64:	4629      	mov	r1, r5
 8008f66:	f7ff ff85 	bl	8008e74 <_malloc_r>
 8008f6a:	4606      	mov	r6, r0
 8008f6c:	b950      	cbnz	r0, 8008f84 <__ssputs_r+0x5c>
 8008f6e:	230c      	movs	r3, #12
 8008f70:	f8ca 3000 	str.w	r3, [sl]
 8008f74:	89a3      	ldrh	r3, [r4, #12]
 8008f76:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008f7a:	81a3      	strh	r3, [r4, #12]
 8008f7c:	f04f 30ff 	mov.w	r0, #4294967295
 8008f80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f84:	6921      	ldr	r1, [r4, #16]
 8008f86:	464a      	mov	r2, r9
 8008f88:	f7ff fb82 	bl	8008690 <memcpy>
 8008f8c:	89a3      	ldrh	r3, [r4, #12]
 8008f8e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008f92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008f96:	81a3      	strh	r3, [r4, #12]
 8008f98:	6126      	str	r6, [r4, #16]
 8008f9a:	6165      	str	r5, [r4, #20]
 8008f9c:	444e      	add	r6, r9
 8008f9e:	eba5 0509 	sub.w	r5, r5, r9
 8008fa2:	6026      	str	r6, [r4, #0]
 8008fa4:	60a5      	str	r5, [r4, #8]
 8008fa6:	463e      	mov	r6, r7
 8008fa8:	42be      	cmp	r6, r7
 8008faa:	d900      	bls.n	8008fae <__ssputs_r+0x86>
 8008fac:	463e      	mov	r6, r7
 8008fae:	4632      	mov	r2, r6
 8008fb0:	6820      	ldr	r0, [r4, #0]
 8008fb2:	4641      	mov	r1, r8
 8008fb4:	f000 fcac 	bl	8009910 <memmove>
 8008fb8:	68a3      	ldr	r3, [r4, #8]
 8008fba:	6822      	ldr	r2, [r4, #0]
 8008fbc:	1b9b      	subs	r3, r3, r6
 8008fbe:	4432      	add	r2, r6
 8008fc0:	60a3      	str	r3, [r4, #8]
 8008fc2:	6022      	str	r2, [r4, #0]
 8008fc4:	2000      	movs	r0, #0
 8008fc6:	e7db      	b.n	8008f80 <__ssputs_r+0x58>
 8008fc8:	462a      	mov	r2, r5
 8008fca:	f000 fcc7 	bl	800995c <_realloc_r>
 8008fce:	4606      	mov	r6, r0
 8008fd0:	2800      	cmp	r0, #0
 8008fd2:	d1e1      	bne.n	8008f98 <__ssputs_r+0x70>
 8008fd4:	6921      	ldr	r1, [r4, #16]
 8008fd6:	4650      	mov	r0, sl
 8008fd8:	f7ff fefc 	bl	8008dd4 <_free_r>
 8008fdc:	e7c7      	b.n	8008f6e <__ssputs_r+0x46>
	...

08008fe0 <_svfiprintf_r>:
 8008fe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fe4:	4698      	mov	r8, r3
 8008fe6:	898b      	ldrh	r3, [r1, #12]
 8008fe8:	061b      	lsls	r3, r3, #24
 8008fea:	b09d      	sub	sp, #116	; 0x74
 8008fec:	4607      	mov	r7, r0
 8008fee:	460d      	mov	r5, r1
 8008ff0:	4614      	mov	r4, r2
 8008ff2:	d50e      	bpl.n	8009012 <_svfiprintf_r+0x32>
 8008ff4:	690b      	ldr	r3, [r1, #16]
 8008ff6:	b963      	cbnz	r3, 8009012 <_svfiprintf_r+0x32>
 8008ff8:	2140      	movs	r1, #64	; 0x40
 8008ffa:	f7ff ff3b 	bl	8008e74 <_malloc_r>
 8008ffe:	6028      	str	r0, [r5, #0]
 8009000:	6128      	str	r0, [r5, #16]
 8009002:	b920      	cbnz	r0, 800900e <_svfiprintf_r+0x2e>
 8009004:	230c      	movs	r3, #12
 8009006:	603b      	str	r3, [r7, #0]
 8009008:	f04f 30ff 	mov.w	r0, #4294967295
 800900c:	e0d1      	b.n	80091b2 <_svfiprintf_r+0x1d2>
 800900e:	2340      	movs	r3, #64	; 0x40
 8009010:	616b      	str	r3, [r5, #20]
 8009012:	2300      	movs	r3, #0
 8009014:	9309      	str	r3, [sp, #36]	; 0x24
 8009016:	2320      	movs	r3, #32
 8009018:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800901c:	f8cd 800c 	str.w	r8, [sp, #12]
 8009020:	2330      	movs	r3, #48	; 0x30
 8009022:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80091cc <_svfiprintf_r+0x1ec>
 8009026:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800902a:	f04f 0901 	mov.w	r9, #1
 800902e:	4623      	mov	r3, r4
 8009030:	469a      	mov	sl, r3
 8009032:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009036:	b10a      	cbz	r2, 800903c <_svfiprintf_r+0x5c>
 8009038:	2a25      	cmp	r2, #37	; 0x25
 800903a:	d1f9      	bne.n	8009030 <_svfiprintf_r+0x50>
 800903c:	ebba 0b04 	subs.w	fp, sl, r4
 8009040:	d00b      	beq.n	800905a <_svfiprintf_r+0x7a>
 8009042:	465b      	mov	r3, fp
 8009044:	4622      	mov	r2, r4
 8009046:	4629      	mov	r1, r5
 8009048:	4638      	mov	r0, r7
 800904a:	f7ff ff6d 	bl	8008f28 <__ssputs_r>
 800904e:	3001      	adds	r0, #1
 8009050:	f000 80aa 	beq.w	80091a8 <_svfiprintf_r+0x1c8>
 8009054:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009056:	445a      	add	r2, fp
 8009058:	9209      	str	r2, [sp, #36]	; 0x24
 800905a:	f89a 3000 	ldrb.w	r3, [sl]
 800905e:	2b00      	cmp	r3, #0
 8009060:	f000 80a2 	beq.w	80091a8 <_svfiprintf_r+0x1c8>
 8009064:	2300      	movs	r3, #0
 8009066:	f04f 32ff 	mov.w	r2, #4294967295
 800906a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800906e:	f10a 0a01 	add.w	sl, sl, #1
 8009072:	9304      	str	r3, [sp, #16]
 8009074:	9307      	str	r3, [sp, #28]
 8009076:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800907a:	931a      	str	r3, [sp, #104]	; 0x68
 800907c:	4654      	mov	r4, sl
 800907e:	2205      	movs	r2, #5
 8009080:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009084:	4851      	ldr	r0, [pc, #324]	; (80091cc <_svfiprintf_r+0x1ec>)
 8009086:	f7f7 f8a3 	bl	80001d0 <memchr>
 800908a:	9a04      	ldr	r2, [sp, #16]
 800908c:	b9d8      	cbnz	r0, 80090c6 <_svfiprintf_r+0xe6>
 800908e:	06d0      	lsls	r0, r2, #27
 8009090:	bf44      	itt	mi
 8009092:	2320      	movmi	r3, #32
 8009094:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009098:	0711      	lsls	r1, r2, #28
 800909a:	bf44      	itt	mi
 800909c:	232b      	movmi	r3, #43	; 0x2b
 800909e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80090a2:	f89a 3000 	ldrb.w	r3, [sl]
 80090a6:	2b2a      	cmp	r3, #42	; 0x2a
 80090a8:	d015      	beq.n	80090d6 <_svfiprintf_r+0xf6>
 80090aa:	9a07      	ldr	r2, [sp, #28]
 80090ac:	4654      	mov	r4, sl
 80090ae:	2000      	movs	r0, #0
 80090b0:	f04f 0c0a 	mov.w	ip, #10
 80090b4:	4621      	mov	r1, r4
 80090b6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80090ba:	3b30      	subs	r3, #48	; 0x30
 80090bc:	2b09      	cmp	r3, #9
 80090be:	d94e      	bls.n	800915e <_svfiprintf_r+0x17e>
 80090c0:	b1b0      	cbz	r0, 80090f0 <_svfiprintf_r+0x110>
 80090c2:	9207      	str	r2, [sp, #28]
 80090c4:	e014      	b.n	80090f0 <_svfiprintf_r+0x110>
 80090c6:	eba0 0308 	sub.w	r3, r0, r8
 80090ca:	fa09 f303 	lsl.w	r3, r9, r3
 80090ce:	4313      	orrs	r3, r2
 80090d0:	9304      	str	r3, [sp, #16]
 80090d2:	46a2      	mov	sl, r4
 80090d4:	e7d2      	b.n	800907c <_svfiprintf_r+0x9c>
 80090d6:	9b03      	ldr	r3, [sp, #12]
 80090d8:	1d19      	adds	r1, r3, #4
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	9103      	str	r1, [sp, #12]
 80090de:	2b00      	cmp	r3, #0
 80090e0:	bfbb      	ittet	lt
 80090e2:	425b      	neglt	r3, r3
 80090e4:	f042 0202 	orrlt.w	r2, r2, #2
 80090e8:	9307      	strge	r3, [sp, #28]
 80090ea:	9307      	strlt	r3, [sp, #28]
 80090ec:	bfb8      	it	lt
 80090ee:	9204      	strlt	r2, [sp, #16]
 80090f0:	7823      	ldrb	r3, [r4, #0]
 80090f2:	2b2e      	cmp	r3, #46	; 0x2e
 80090f4:	d10c      	bne.n	8009110 <_svfiprintf_r+0x130>
 80090f6:	7863      	ldrb	r3, [r4, #1]
 80090f8:	2b2a      	cmp	r3, #42	; 0x2a
 80090fa:	d135      	bne.n	8009168 <_svfiprintf_r+0x188>
 80090fc:	9b03      	ldr	r3, [sp, #12]
 80090fe:	1d1a      	adds	r2, r3, #4
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	9203      	str	r2, [sp, #12]
 8009104:	2b00      	cmp	r3, #0
 8009106:	bfb8      	it	lt
 8009108:	f04f 33ff 	movlt.w	r3, #4294967295
 800910c:	3402      	adds	r4, #2
 800910e:	9305      	str	r3, [sp, #20]
 8009110:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80091dc <_svfiprintf_r+0x1fc>
 8009114:	7821      	ldrb	r1, [r4, #0]
 8009116:	2203      	movs	r2, #3
 8009118:	4650      	mov	r0, sl
 800911a:	f7f7 f859 	bl	80001d0 <memchr>
 800911e:	b140      	cbz	r0, 8009132 <_svfiprintf_r+0x152>
 8009120:	2340      	movs	r3, #64	; 0x40
 8009122:	eba0 000a 	sub.w	r0, r0, sl
 8009126:	fa03 f000 	lsl.w	r0, r3, r0
 800912a:	9b04      	ldr	r3, [sp, #16]
 800912c:	4303      	orrs	r3, r0
 800912e:	3401      	adds	r4, #1
 8009130:	9304      	str	r3, [sp, #16]
 8009132:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009136:	4826      	ldr	r0, [pc, #152]	; (80091d0 <_svfiprintf_r+0x1f0>)
 8009138:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800913c:	2206      	movs	r2, #6
 800913e:	f7f7 f847 	bl	80001d0 <memchr>
 8009142:	2800      	cmp	r0, #0
 8009144:	d038      	beq.n	80091b8 <_svfiprintf_r+0x1d8>
 8009146:	4b23      	ldr	r3, [pc, #140]	; (80091d4 <_svfiprintf_r+0x1f4>)
 8009148:	bb1b      	cbnz	r3, 8009192 <_svfiprintf_r+0x1b2>
 800914a:	9b03      	ldr	r3, [sp, #12]
 800914c:	3307      	adds	r3, #7
 800914e:	f023 0307 	bic.w	r3, r3, #7
 8009152:	3308      	adds	r3, #8
 8009154:	9303      	str	r3, [sp, #12]
 8009156:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009158:	4433      	add	r3, r6
 800915a:	9309      	str	r3, [sp, #36]	; 0x24
 800915c:	e767      	b.n	800902e <_svfiprintf_r+0x4e>
 800915e:	fb0c 3202 	mla	r2, ip, r2, r3
 8009162:	460c      	mov	r4, r1
 8009164:	2001      	movs	r0, #1
 8009166:	e7a5      	b.n	80090b4 <_svfiprintf_r+0xd4>
 8009168:	2300      	movs	r3, #0
 800916a:	3401      	adds	r4, #1
 800916c:	9305      	str	r3, [sp, #20]
 800916e:	4619      	mov	r1, r3
 8009170:	f04f 0c0a 	mov.w	ip, #10
 8009174:	4620      	mov	r0, r4
 8009176:	f810 2b01 	ldrb.w	r2, [r0], #1
 800917a:	3a30      	subs	r2, #48	; 0x30
 800917c:	2a09      	cmp	r2, #9
 800917e:	d903      	bls.n	8009188 <_svfiprintf_r+0x1a8>
 8009180:	2b00      	cmp	r3, #0
 8009182:	d0c5      	beq.n	8009110 <_svfiprintf_r+0x130>
 8009184:	9105      	str	r1, [sp, #20]
 8009186:	e7c3      	b.n	8009110 <_svfiprintf_r+0x130>
 8009188:	fb0c 2101 	mla	r1, ip, r1, r2
 800918c:	4604      	mov	r4, r0
 800918e:	2301      	movs	r3, #1
 8009190:	e7f0      	b.n	8009174 <_svfiprintf_r+0x194>
 8009192:	ab03      	add	r3, sp, #12
 8009194:	9300      	str	r3, [sp, #0]
 8009196:	462a      	mov	r2, r5
 8009198:	4b0f      	ldr	r3, [pc, #60]	; (80091d8 <_svfiprintf_r+0x1f8>)
 800919a:	a904      	add	r1, sp, #16
 800919c:	4638      	mov	r0, r7
 800919e:	f3af 8000 	nop.w
 80091a2:	1c42      	adds	r2, r0, #1
 80091a4:	4606      	mov	r6, r0
 80091a6:	d1d6      	bne.n	8009156 <_svfiprintf_r+0x176>
 80091a8:	89ab      	ldrh	r3, [r5, #12]
 80091aa:	065b      	lsls	r3, r3, #25
 80091ac:	f53f af2c 	bmi.w	8009008 <_svfiprintf_r+0x28>
 80091b0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80091b2:	b01d      	add	sp, #116	; 0x74
 80091b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091b8:	ab03      	add	r3, sp, #12
 80091ba:	9300      	str	r3, [sp, #0]
 80091bc:	462a      	mov	r2, r5
 80091be:	4b06      	ldr	r3, [pc, #24]	; (80091d8 <_svfiprintf_r+0x1f8>)
 80091c0:	a904      	add	r1, sp, #16
 80091c2:	4638      	mov	r0, r7
 80091c4:	f000 f9d4 	bl	8009570 <_printf_i>
 80091c8:	e7eb      	b.n	80091a2 <_svfiprintf_r+0x1c2>
 80091ca:	bf00      	nop
 80091cc:	08009e38 	.word	0x08009e38
 80091d0:	08009e42 	.word	0x08009e42
 80091d4:	00000000 	.word	0x00000000
 80091d8:	08008f29 	.word	0x08008f29
 80091dc:	08009e3e 	.word	0x08009e3e

080091e0 <__sfputc_r>:
 80091e0:	6893      	ldr	r3, [r2, #8]
 80091e2:	3b01      	subs	r3, #1
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	b410      	push	{r4}
 80091e8:	6093      	str	r3, [r2, #8]
 80091ea:	da08      	bge.n	80091fe <__sfputc_r+0x1e>
 80091ec:	6994      	ldr	r4, [r2, #24]
 80091ee:	42a3      	cmp	r3, r4
 80091f0:	db01      	blt.n	80091f6 <__sfputc_r+0x16>
 80091f2:	290a      	cmp	r1, #10
 80091f4:	d103      	bne.n	80091fe <__sfputc_r+0x1e>
 80091f6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80091fa:	f7ff bb0d 	b.w	8008818 <__swbuf_r>
 80091fe:	6813      	ldr	r3, [r2, #0]
 8009200:	1c58      	adds	r0, r3, #1
 8009202:	6010      	str	r0, [r2, #0]
 8009204:	7019      	strb	r1, [r3, #0]
 8009206:	4608      	mov	r0, r1
 8009208:	f85d 4b04 	ldr.w	r4, [sp], #4
 800920c:	4770      	bx	lr

0800920e <__sfputs_r>:
 800920e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009210:	4606      	mov	r6, r0
 8009212:	460f      	mov	r7, r1
 8009214:	4614      	mov	r4, r2
 8009216:	18d5      	adds	r5, r2, r3
 8009218:	42ac      	cmp	r4, r5
 800921a:	d101      	bne.n	8009220 <__sfputs_r+0x12>
 800921c:	2000      	movs	r0, #0
 800921e:	e007      	b.n	8009230 <__sfputs_r+0x22>
 8009220:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009224:	463a      	mov	r2, r7
 8009226:	4630      	mov	r0, r6
 8009228:	f7ff ffda 	bl	80091e0 <__sfputc_r>
 800922c:	1c43      	adds	r3, r0, #1
 800922e:	d1f3      	bne.n	8009218 <__sfputs_r+0xa>
 8009230:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009234 <_vfiprintf_r>:
 8009234:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009238:	460d      	mov	r5, r1
 800923a:	b09d      	sub	sp, #116	; 0x74
 800923c:	4614      	mov	r4, r2
 800923e:	4698      	mov	r8, r3
 8009240:	4606      	mov	r6, r0
 8009242:	b118      	cbz	r0, 800924c <_vfiprintf_r+0x18>
 8009244:	6983      	ldr	r3, [r0, #24]
 8009246:	b90b      	cbnz	r3, 800924c <_vfiprintf_r+0x18>
 8009248:	f7ff fcc0 	bl	8008bcc <__sinit>
 800924c:	4b89      	ldr	r3, [pc, #548]	; (8009474 <_vfiprintf_r+0x240>)
 800924e:	429d      	cmp	r5, r3
 8009250:	d11b      	bne.n	800928a <_vfiprintf_r+0x56>
 8009252:	6875      	ldr	r5, [r6, #4]
 8009254:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009256:	07d9      	lsls	r1, r3, #31
 8009258:	d405      	bmi.n	8009266 <_vfiprintf_r+0x32>
 800925a:	89ab      	ldrh	r3, [r5, #12]
 800925c:	059a      	lsls	r2, r3, #22
 800925e:	d402      	bmi.n	8009266 <_vfiprintf_r+0x32>
 8009260:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009262:	f7ff fd51 	bl	8008d08 <__retarget_lock_acquire_recursive>
 8009266:	89ab      	ldrh	r3, [r5, #12]
 8009268:	071b      	lsls	r3, r3, #28
 800926a:	d501      	bpl.n	8009270 <_vfiprintf_r+0x3c>
 800926c:	692b      	ldr	r3, [r5, #16]
 800926e:	b9eb      	cbnz	r3, 80092ac <_vfiprintf_r+0x78>
 8009270:	4629      	mov	r1, r5
 8009272:	4630      	mov	r0, r6
 8009274:	f7ff fb22 	bl	80088bc <__swsetup_r>
 8009278:	b1c0      	cbz	r0, 80092ac <_vfiprintf_r+0x78>
 800927a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800927c:	07dc      	lsls	r4, r3, #31
 800927e:	d50e      	bpl.n	800929e <_vfiprintf_r+0x6a>
 8009280:	f04f 30ff 	mov.w	r0, #4294967295
 8009284:	b01d      	add	sp, #116	; 0x74
 8009286:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800928a:	4b7b      	ldr	r3, [pc, #492]	; (8009478 <_vfiprintf_r+0x244>)
 800928c:	429d      	cmp	r5, r3
 800928e:	d101      	bne.n	8009294 <_vfiprintf_r+0x60>
 8009290:	68b5      	ldr	r5, [r6, #8]
 8009292:	e7df      	b.n	8009254 <_vfiprintf_r+0x20>
 8009294:	4b79      	ldr	r3, [pc, #484]	; (800947c <_vfiprintf_r+0x248>)
 8009296:	429d      	cmp	r5, r3
 8009298:	bf08      	it	eq
 800929a:	68f5      	ldreq	r5, [r6, #12]
 800929c:	e7da      	b.n	8009254 <_vfiprintf_r+0x20>
 800929e:	89ab      	ldrh	r3, [r5, #12]
 80092a0:	0598      	lsls	r0, r3, #22
 80092a2:	d4ed      	bmi.n	8009280 <_vfiprintf_r+0x4c>
 80092a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80092a6:	f7ff fd30 	bl	8008d0a <__retarget_lock_release_recursive>
 80092aa:	e7e9      	b.n	8009280 <_vfiprintf_r+0x4c>
 80092ac:	2300      	movs	r3, #0
 80092ae:	9309      	str	r3, [sp, #36]	; 0x24
 80092b0:	2320      	movs	r3, #32
 80092b2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80092b6:	f8cd 800c 	str.w	r8, [sp, #12]
 80092ba:	2330      	movs	r3, #48	; 0x30
 80092bc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009480 <_vfiprintf_r+0x24c>
 80092c0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80092c4:	f04f 0901 	mov.w	r9, #1
 80092c8:	4623      	mov	r3, r4
 80092ca:	469a      	mov	sl, r3
 80092cc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80092d0:	b10a      	cbz	r2, 80092d6 <_vfiprintf_r+0xa2>
 80092d2:	2a25      	cmp	r2, #37	; 0x25
 80092d4:	d1f9      	bne.n	80092ca <_vfiprintf_r+0x96>
 80092d6:	ebba 0b04 	subs.w	fp, sl, r4
 80092da:	d00b      	beq.n	80092f4 <_vfiprintf_r+0xc0>
 80092dc:	465b      	mov	r3, fp
 80092de:	4622      	mov	r2, r4
 80092e0:	4629      	mov	r1, r5
 80092e2:	4630      	mov	r0, r6
 80092e4:	f7ff ff93 	bl	800920e <__sfputs_r>
 80092e8:	3001      	adds	r0, #1
 80092ea:	f000 80aa 	beq.w	8009442 <_vfiprintf_r+0x20e>
 80092ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80092f0:	445a      	add	r2, fp
 80092f2:	9209      	str	r2, [sp, #36]	; 0x24
 80092f4:	f89a 3000 	ldrb.w	r3, [sl]
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	f000 80a2 	beq.w	8009442 <_vfiprintf_r+0x20e>
 80092fe:	2300      	movs	r3, #0
 8009300:	f04f 32ff 	mov.w	r2, #4294967295
 8009304:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009308:	f10a 0a01 	add.w	sl, sl, #1
 800930c:	9304      	str	r3, [sp, #16]
 800930e:	9307      	str	r3, [sp, #28]
 8009310:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009314:	931a      	str	r3, [sp, #104]	; 0x68
 8009316:	4654      	mov	r4, sl
 8009318:	2205      	movs	r2, #5
 800931a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800931e:	4858      	ldr	r0, [pc, #352]	; (8009480 <_vfiprintf_r+0x24c>)
 8009320:	f7f6 ff56 	bl	80001d0 <memchr>
 8009324:	9a04      	ldr	r2, [sp, #16]
 8009326:	b9d8      	cbnz	r0, 8009360 <_vfiprintf_r+0x12c>
 8009328:	06d1      	lsls	r1, r2, #27
 800932a:	bf44      	itt	mi
 800932c:	2320      	movmi	r3, #32
 800932e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009332:	0713      	lsls	r3, r2, #28
 8009334:	bf44      	itt	mi
 8009336:	232b      	movmi	r3, #43	; 0x2b
 8009338:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800933c:	f89a 3000 	ldrb.w	r3, [sl]
 8009340:	2b2a      	cmp	r3, #42	; 0x2a
 8009342:	d015      	beq.n	8009370 <_vfiprintf_r+0x13c>
 8009344:	9a07      	ldr	r2, [sp, #28]
 8009346:	4654      	mov	r4, sl
 8009348:	2000      	movs	r0, #0
 800934a:	f04f 0c0a 	mov.w	ip, #10
 800934e:	4621      	mov	r1, r4
 8009350:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009354:	3b30      	subs	r3, #48	; 0x30
 8009356:	2b09      	cmp	r3, #9
 8009358:	d94e      	bls.n	80093f8 <_vfiprintf_r+0x1c4>
 800935a:	b1b0      	cbz	r0, 800938a <_vfiprintf_r+0x156>
 800935c:	9207      	str	r2, [sp, #28]
 800935e:	e014      	b.n	800938a <_vfiprintf_r+0x156>
 8009360:	eba0 0308 	sub.w	r3, r0, r8
 8009364:	fa09 f303 	lsl.w	r3, r9, r3
 8009368:	4313      	orrs	r3, r2
 800936a:	9304      	str	r3, [sp, #16]
 800936c:	46a2      	mov	sl, r4
 800936e:	e7d2      	b.n	8009316 <_vfiprintf_r+0xe2>
 8009370:	9b03      	ldr	r3, [sp, #12]
 8009372:	1d19      	adds	r1, r3, #4
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	9103      	str	r1, [sp, #12]
 8009378:	2b00      	cmp	r3, #0
 800937a:	bfbb      	ittet	lt
 800937c:	425b      	neglt	r3, r3
 800937e:	f042 0202 	orrlt.w	r2, r2, #2
 8009382:	9307      	strge	r3, [sp, #28]
 8009384:	9307      	strlt	r3, [sp, #28]
 8009386:	bfb8      	it	lt
 8009388:	9204      	strlt	r2, [sp, #16]
 800938a:	7823      	ldrb	r3, [r4, #0]
 800938c:	2b2e      	cmp	r3, #46	; 0x2e
 800938e:	d10c      	bne.n	80093aa <_vfiprintf_r+0x176>
 8009390:	7863      	ldrb	r3, [r4, #1]
 8009392:	2b2a      	cmp	r3, #42	; 0x2a
 8009394:	d135      	bne.n	8009402 <_vfiprintf_r+0x1ce>
 8009396:	9b03      	ldr	r3, [sp, #12]
 8009398:	1d1a      	adds	r2, r3, #4
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	9203      	str	r2, [sp, #12]
 800939e:	2b00      	cmp	r3, #0
 80093a0:	bfb8      	it	lt
 80093a2:	f04f 33ff 	movlt.w	r3, #4294967295
 80093a6:	3402      	adds	r4, #2
 80093a8:	9305      	str	r3, [sp, #20]
 80093aa:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009490 <_vfiprintf_r+0x25c>
 80093ae:	7821      	ldrb	r1, [r4, #0]
 80093b0:	2203      	movs	r2, #3
 80093b2:	4650      	mov	r0, sl
 80093b4:	f7f6 ff0c 	bl	80001d0 <memchr>
 80093b8:	b140      	cbz	r0, 80093cc <_vfiprintf_r+0x198>
 80093ba:	2340      	movs	r3, #64	; 0x40
 80093bc:	eba0 000a 	sub.w	r0, r0, sl
 80093c0:	fa03 f000 	lsl.w	r0, r3, r0
 80093c4:	9b04      	ldr	r3, [sp, #16]
 80093c6:	4303      	orrs	r3, r0
 80093c8:	3401      	adds	r4, #1
 80093ca:	9304      	str	r3, [sp, #16]
 80093cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80093d0:	482c      	ldr	r0, [pc, #176]	; (8009484 <_vfiprintf_r+0x250>)
 80093d2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80093d6:	2206      	movs	r2, #6
 80093d8:	f7f6 fefa 	bl	80001d0 <memchr>
 80093dc:	2800      	cmp	r0, #0
 80093de:	d03f      	beq.n	8009460 <_vfiprintf_r+0x22c>
 80093e0:	4b29      	ldr	r3, [pc, #164]	; (8009488 <_vfiprintf_r+0x254>)
 80093e2:	bb1b      	cbnz	r3, 800942c <_vfiprintf_r+0x1f8>
 80093e4:	9b03      	ldr	r3, [sp, #12]
 80093e6:	3307      	adds	r3, #7
 80093e8:	f023 0307 	bic.w	r3, r3, #7
 80093ec:	3308      	adds	r3, #8
 80093ee:	9303      	str	r3, [sp, #12]
 80093f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80093f2:	443b      	add	r3, r7
 80093f4:	9309      	str	r3, [sp, #36]	; 0x24
 80093f6:	e767      	b.n	80092c8 <_vfiprintf_r+0x94>
 80093f8:	fb0c 3202 	mla	r2, ip, r2, r3
 80093fc:	460c      	mov	r4, r1
 80093fe:	2001      	movs	r0, #1
 8009400:	e7a5      	b.n	800934e <_vfiprintf_r+0x11a>
 8009402:	2300      	movs	r3, #0
 8009404:	3401      	adds	r4, #1
 8009406:	9305      	str	r3, [sp, #20]
 8009408:	4619      	mov	r1, r3
 800940a:	f04f 0c0a 	mov.w	ip, #10
 800940e:	4620      	mov	r0, r4
 8009410:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009414:	3a30      	subs	r2, #48	; 0x30
 8009416:	2a09      	cmp	r2, #9
 8009418:	d903      	bls.n	8009422 <_vfiprintf_r+0x1ee>
 800941a:	2b00      	cmp	r3, #0
 800941c:	d0c5      	beq.n	80093aa <_vfiprintf_r+0x176>
 800941e:	9105      	str	r1, [sp, #20]
 8009420:	e7c3      	b.n	80093aa <_vfiprintf_r+0x176>
 8009422:	fb0c 2101 	mla	r1, ip, r1, r2
 8009426:	4604      	mov	r4, r0
 8009428:	2301      	movs	r3, #1
 800942a:	e7f0      	b.n	800940e <_vfiprintf_r+0x1da>
 800942c:	ab03      	add	r3, sp, #12
 800942e:	9300      	str	r3, [sp, #0]
 8009430:	462a      	mov	r2, r5
 8009432:	4b16      	ldr	r3, [pc, #88]	; (800948c <_vfiprintf_r+0x258>)
 8009434:	a904      	add	r1, sp, #16
 8009436:	4630      	mov	r0, r6
 8009438:	f3af 8000 	nop.w
 800943c:	4607      	mov	r7, r0
 800943e:	1c78      	adds	r0, r7, #1
 8009440:	d1d6      	bne.n	80093f0 <_vfiprintf_r+0x1bc>
 8009442:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009444:	07d9      	lsls	r1, r3, #31
 8009446:	d405      	bmi.n	8009454 <_vfiprintf_r+0x220>
 8009448:	89ab      	ldrh	r3, [r5, #12]
 800944a:	059a      	lsls	r2, r3, #22
 800944c:	d402      	bmi.n	8009454 <_vfiprintf_r+0x220>
 800944e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009450:	f7ff fc5b 	bl	8008d0a <__retarget_lock_release_recursive>
 8009454:	89ab      	ldrh	r3, [r5, #12]
 8009456:	065b      	lsls	r3, r3, #25
 8009458:	f53f af12 	bmi.w	8009280 <_vfiprintf_r+0x4c>
 800945c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800945e:	e711      	b.n	8009284 <_vfiprintf_r+0x50>
 8009460:	ab03      	add	r3, sp, #12
 8009462:	9300      	str	r3, [sp, #0]
 8009464:	462a      	mov	r2, r5
 8009466:	4b09      	ldr	r3, [pc, #36]	; (800948c <_vfiprintf_r+0x258>)
 8009468:	a904      	add	r1, sp, #16
 800946a:	4630      	mov	r0, r6
 800946c:	f000 f880 	bl	8009570 <_printf_i>
 8009470:	e7e4      	b.n	800943c <_vfiprintf_r+0x208>
 8009472:	bf00      	nop
 8009474:	08009df8 	.word	0x08009df8
 8009478:	08009e18 	.word	0x08009e18
 800947c:	08009dd8 	.word	0x08009dd8
 8009480:	08009e38 	.word	0x08009e38
 8009484:	08009e42 	.word	0x08009e42
 8009488:	00000000 	.word	0x00000000
 800948c:	0800920f 	.word	0x0800920f
 8009490:	08009e3e 	.word	0x08009e3e

08009494 <_printf_common>:
 8009494:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009498:	4616      	mov	r6, r2
 800949a:	4699      	mov	r9, r3
 800949c:	688a      	ldr	r2, [r1, #8]
 800949e:	690b      	ldr	r3, [r1, #16]
 80094a0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80094a4:	4293      	cmp	r3, r2
 80094a6:	bfb8      	it	lt
 80094a8:	4613      	movlt	r3, r2
 80094aa:	6033      	str	r3, [r6, #0]
 80094ac:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80094b0:	4607      	mov	r7, r0
 80094b2:	460c      	mov	r4, r1
 80094b4:	b10a      	cbz	r2, 80094ba <_printf_common+0x26>
 80094b6:	3301      	adds	r3, #1
 80094b8:	6033      	str	r3, [r6, #0]
 80094ba:	6823      	ldr	r3, [r4, #0]
 80094bc:	0699      	lsls	r1, r3, #26
 80094be:	bf42      	ittt	mi
 80094c0:	6833      	ldrmi	r3, [r6, #0]
 80094c2:	3302      	addmi	r3, #2
 80094c4:	6033      	strmi	r3, [r6, #0]
 80094c6:	6825      	ldr	r5, [r4, #0]
 80094c8:	f015 0506 	ands.w	r5, r5, #6
 80094cc:	d106      	bne.n	80094dc <_printf_common+0x48>
 80094ce:	f104 0a19 	add.w	sl, r4, #25
 80094d2:	68e3      	ldr	r3, [r4, #12]
 80094d4:	6832      	ldr	r2, [r6, #0]
 80094d6:	1a9b      	subs	r3, r3, r2
 80094d8:	42ab      	cmp	r3, r5
 80094da:	dc26      	bgt.n	800952a <_printf_common+0x96>
 80094dc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80094e0:	1e13      	subs	r3, r2, #0
 80094e2:	6822      	ldr	r2, [r4, #0]
 80094e4:	bf18      	it	ne
 80094e6:	2301      	movne	r3, #1
 80094e8:	0692      	lsls	r2, r2, #26
 80094ea:	d42b      	bmi.n	8009544 <_printf_common+0xb0>
 80094ec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80094f0:	4649      	mov	r1, r9
 80094f2:	4638      	mov	r0, r7
 80094f4:	47c0      	blx	r8
 80094f6:	3001      	adds	r0, #1
 80094f8:	d01e      	beq.n	8009538 <_printf_common+0xa4>
 80094fa:	6823      	ldr	r3, [r4, #0]
 80094fc:	68e5      	ldr	r5, [r4, #12]
 80094fe:	6832      	ldr	r2, [r6, #0]
 8009500:	f003 0306 	and.w	r3, r3, #6
 8009504:	2b04      	cmp	r3, #4
 8009506:	bf08      	it	eq
 8009508:	1aad      	subeq	r5, r5, r2
 800950a:	68a3      	ldr	r3, [r4, #8]
 800950c:	6922      	ldr	r2, [r4, #16]
 800950e:	bf0c      	ite	eq
 8009510:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009514:	2500      	movne	r5, #0
 8009516:	4293      	cmp	r3, r2
 8009518:	bfc4      	itt	gt
 800951a:	1a9b      	subgt	r3, r3, r2
 800951c:	18ed      	addgt	r5, r5, r3
 800951e:	2600      	movs	r6, #0
 8009520:	341a      	adds	r4, #26
 8009522:	42b5      	cmp	r5, r6
 8009524:	d11a      	bne.n	800955c <_printf_common+0xc8>
 8009526:	2000      	movs	r0, #0
 8009528:	e008      	b.n	800953c <_printf_common+0xa8>
 800952a:	2301      	movs	r3, #1
 800952c:	4652      	mov	r2, sl
 800952e:	4649      	mov	r1, r9
 8009530:	4638      	mov	r0, r7
 8009532:	47c0      	blx	r8
 8009534:	3001      	adds	r0, #1
 8009536:	d103      	bne.n	8009540 <_printf_common+0xac>
 8009538:	f04f 30ff 	mov.w	r0, #4294967295
 800953c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009540:	3501      	adds	r5, #1
 8009542:	e7c6      	b.n	80094d2 <_printf_common+0x3e>
 8009544:	18e1      	adds	r1, r4, r3
 8009546:	1c5a      	adds	r2, r3, #1
 8009548:	2030      	movs	r0, #48	; 0x30
 800954a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800954e:	4422      	add	r2, r4
 8009550:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009554:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009558:	3302      	adds	r3, #2
 800955a:	e7c7      	b.n	80094ec <_printf_common+0x58>
 800955c:	2301      	movs	r3, #1
 800955e:	4622      	mov	r2, r4
 8009560:	4649      	mov	r1, r9
 8009562:	4638      	mov	r0, r7
 8009564:	47c0      	blx	r8
 8009566:	3001      	adds	r0, #1
 8009568:	d0e6      	beq.n	8009538 <_printf_common+0xa4>
 800956a:	3601      	adds	r6, #1
 800956c:	e7d9      	b.n	8009522 <_printf_common+0x8e>
	...

08009570 <_printf_i>:
 8009570:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009574:	460c      	mov	r4, r1
 8009576:	4691      	mov	r9, r2
 8009578:	7e27      	ldrb	r7, [r4, #24]
 800957a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800957c:	2f78      	cmp	r7, #120	; 0x78
 800957e:	4680      	mov	r8, r0
 8009580:	469a      	mov	sl, r3
 8009582:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009586:	d807      	bhi.n	8009598 <_printf_i+0x28>
 8009588:	2f62      	cmp	r7, #98	; 0x62
 800958a:	d80a      	bhi.n	80095a2 <_printf_i+0x32>
 800958c:	2f00      	cmp	r7, #0
 800958e:	f000 80d8 	beq.w	8009742 <_printf_i+0x1d2>
 8009592:	2f58      	cmp	r7, #88	; 0x58
 8009594:	f000 80a3 	beq.w	80096de <_printf_i+0x16e>
 8009598:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800959c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80095a0:	e03a      	b.n	8009618 <_printf_i+0xa8>
 80095a2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80095a6:	2b15      	cmp	r3, #21
 80095a8:	d8f6      	bhi.n	8009598 <_printf_i+0x28>
 80095aa:	a001      	add	r0, pc, #4	; (adr r0, 80095b0 <_printf_i+0x40>)
 80095ac:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80095b0:	08009609 	.word	0x08009609
 80095b4:	0800961d 	.word	0x0800961d
 80095b8:	08009599 	.word	0x08009599
 80095bc:	08009599 	.word	0x08009599
 80095c0:	08009599 	.word	0x08009599
 80095c4:	08009599 	.word	0x08009599
 80095c8:	0800961d 	.word	0x0800961d
 80095cc:	08009599 	.word	0x08009599
 80095d0:	08009599 	.word	0x08009599
 80095d4:	08009599 	.word	0x08009599
 80095d8:	08009599 	.word	0x08009599
 80095dc:	08009729 	.word	0x08009729
 80095e0:	0800964d 	.word	0x0800964d
 80095e4:	0800970b 	.word	0x0800970b
 80095e8:	08009599 	.word	0x08009599
 80095ec:	08009599 	.word	0x08009599
 80095f0:	0800974b 	.word	0x0800974b
 80095f4:	08009599 	.word	0x08009599
 80095f8:	0800964d 	.word	0x0800964d
 80095fc:	08009599 	.word	0x08009599
 8009600:	08009599 	.word	0x08009599
 8009604:	08009713 	.word	0x08009713
 8009608:	680b      	ldr	r3, [r1, #0]
 800960a:	1d1a      	adds	r2, r3, #4
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	600a      	str	r2, [r1, #0]
 8009610:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009614:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009618:	2301      	movs	r3, #1
 800961a:	e0a3      	b.n	8009764 <_printf_i+0x1f4>
 800961c:	6825      	ldr	r5, [r4, #0]
 800961e:	6808      	ldr	r0, [r1, #0]
 8009620:	062e      	lsls	r6, r5, #24
 8009622:	f100 0304 	add.w	r3, r0, #4
 8009626:	d50a      	bpl.n	800963e <_printf_i+0xce>
 8009628:	6805      	ldr	r5, [r0, #0]
 800962a:	600b      	str	r3, [r1, #0]
 800962c:	2d00      	cmp	r5, #0
 800962e:	da03      	bge.n	8009638 <_printf_i+0xc8>
 8009630:	232d      	movs	r3, #45	; 0x2d
 8009632:	426d      	negs	r5, r5
 8009634:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009638:	485e      	ldr	r0, [pc, #376]	; (80097b4 <_printf_i+0x244>)
 800963a:	230a      	movs	r3, #10
 800963c:	e019      	b.n	8009672 <_printf_i+0x102>
 800963e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8009642:	6805      	ldr	r5, [r0, #0]
 8009644:	600b      	str	r3, [r1, #0]
 8009646:	bf18      	it	ne
 8009648:	b22d      	sxthne	r5, r5
 800964a:	e7ef      	b.n	800962c <_printf_i+0xbc>
 800964c:	680b      	ldr	r3, [r1, #0]
 800964e:	6825      	ldr	r5, [r4, #0]
 8009650:	1d18      	adds	r0, r3, #4
 8009652:	6008      	str	r0, [r1, #0]
 8009654:	0628      	lsls	r0, r5, #24
 8009656:	d501      	bpl.n	800965c <_printf_i+0xec>
 8009658:	681d      	ldr	r5, [r3, #0]
 800965a:	e002      	b.n	8009662 <_printf_i+0xf2>
 800965c:	0669      	lsls	r1, r5, #25
 800965e:	d5fb      	bpl.n	8009658 <_printf_i+0xe8>
 8009660:	881d      	ldrh	r5, [r3, #0]
 8009662:	4854      	ldr	r0, [pc, #336]	; (80097b4 <_printf_i+0x244>)
 8009664:	2f6f      	cmp	r7, #111	; 0x6f
 8009666:	bf0c      	ite	eq
 8009668:	2308      	moveq	r3, #8
 800966a:	230a      	movne	r3, #10
 800966c:	2100      	movs	r1, #0
 800966e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009672:	6866      	ldr	r6, [r4, #4]
 8009674:	60a6      	str	r6, [r4, #8]
 8009676:	2e00      	cmp	r6, #0
 8009678:	bfa2      	ittt	ge
 800967a:	6821      	ldrge	r1, [r4, #0]
 800967c:	f021 0104 	bicge.w	r1, r1, #4
 8009680:	6021      	strge	r1, [r4, #0]
 8009682:	b90d      	cbnz	r5, 8009688 <_printf_i+0x118>
 8009684:	2e00      	cmp	r6, #0
 8009686:	d04d      	beq.n	8009724 <_printf_i+0x1b4>
 8009688:	4616      	mov	r6, r2
 800968a:	fbb5 f1f3 	udiv	r1, r5, r3
 800968e:	fb03 5711 	mls	r7, r3, r1, r5
 8009692:	5dc7      	ldrb	r7, [r0, r7]
 8009694:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009698:	462f      	mov	r7, r5
 800969a:	42bb      	cmp	r3, r7
 800969c:	460d      	mov	r5, r1
 800969e:	d9f4      	bls.n	800968a <_printf_i+0x11a>
 80096a0:	2b08      	cmp	r3, #8
 80096a2:	d10b      	bne.n	80096bc <_printf_i+0x14c>
 80096a4:	6823      	ldr	r3, [r4, #0]
 80096a6:	07df      	lsls	r7, r3, #31
 80096a8:	d508      	bpl.n	80096bc <_printf_i+0x14c>
 80096aa:	6923      	ldr	r3, [r4, #16]
 80096ac:	6861      	ldr	r1, [r4, #4]
 80096ae:	4299      	cmp	r1, r3
 80096b0:	bfde      	ittt	le
 80096b2:	2330      	movle	r3, #48	; 0x30
 80096b4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80096b8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80096bc:	1b92      	subs	r2, r2, r6
 80096be:	6122      	str	r2, [r4, #16]
 80096c0:	f8cd a000 	str.w	sl, [sp]
 80096c4:	464b      	mov	r3, r9
 80096c6:	aa03      	add	r2, sp, #12
 80096c8:	4621      	mov	r1, r4
 80096ca:	4640      	mov	r0, r8
 80096cc:	f7ff fee2 	bl	8009494 <_printf_common>
 80096d0:	3001      	adds	r0, #1
 80096d2:	d14c      	bne.n	800976e <_printf_i+0x1fe>
 80096d4:	f04f 30ff 	mov.w	r0, #4294967295
 80096d8:	b004      	add	sp, #16
 80096da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80096de:	4835      	ldr	r0, [pc, #212]	; (80097b4 <_printf_i+0x244>)
 80096e0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80096e4:	6823      	ldr	r3, [r4, #0]
 80096e6:	680e      	ldr	r6, [r1, #0]
 80096e8:	061f      	lsls	r7, r3, #24
 80096ea:	f856 5b04 	ldr.w	r5, [r6], #4
 80096ee:	600e      	str	r6, [r1, #0]
 80096f0:	d514      	bpl.n	800971c <_printf_i+0x1ac>
 80096f2:	07d9      	lsls	r1, r3, #31
 80096f4:	bf44      	itt	mi
 80096f6:	f043 0320 	orrmi.w	r3, r3, #32
 80096fa:	6023      	strmi	r3, [r4, #0]
 80096fc:	b91d      	cbnz	r5, 8009706 <_printf_i+0x196>
 80096fe:	6823      	ldr	r3, [r4, #0]
 8009700:	f023 0320 	bic.w	r3, r3, #32
 8009704:	6023      	str	r3, [r4, #0]
 8009706:	2310      	movs	r3, #16
 8009708:	e7b0      	b.n	800966c <_printf_i+0xfc>
 800970a:	6823      	ldr	r3, [r4, #0]
 800970c:	f043 0320 	orr.w	r3, r3, #32
 8009710:	6023      	str	r3, [r4, #0]
 8009712:	2378      	movs	r3, #120	; 0x78
 8009714:	4828      	ldr	r0, [pc, #160]	; (80097b8 <_printf_i+0x248>)
 8009716:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800971a:	e7e3      	b.n	80096e4 <_printf_i+0x174>
 800971c:	065e      	lsls	r6, r3, #25
 800971e:	bf48      	it	mi
 8009720:	b2ad      	uxthmi	r5, r5
 8009722:	e7e6      	b.n	80096f2 <_printf_i+0x182>
 8009724:	4616      	mov	r6, r2
 8009726:	e7bb      	b.n	80096a0 <_printf_i+0x130>
 8009728:	680b      	ldr	r3, [r1, #0]
 800972a:	6826      	ldr	r6, [r4, #0]
 800972c:	6960      	ldr	r0, [r4, #20]
 800972e:	1d1d      	adds	r5, r3, #4
 8009730:	600d      	str	r5, [r1, #0]
 8009732:	0635      	lsls	r5, r6, #24
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	d501      	bpl.n	800973c <_printf_i+0x1cc>
 8009738:	6018      	str	r0, [r3, #0]
 800973a:	e002      	b.n	8009742 <_printf_i+0x1d2>
 800973c:	0671      	lsls	r1, r6, #25
 800973e:	d5fb      	bpl.n	8009738 <_printf_i+0x1c8>
 8009740:	8018      	strh	r0, [r3, #0]
 8009742:	2300      	movs	r3, #0
 8009744:	6123      	str	r3, [r4, #16]
 8009746:	4616      	mov	r6, r2
 8009748:	e7ba      	b.n	80096c0 <_printf_i+0x150>
 800974a:	680b      	ldr	r3, [r1, #0]
 800974c:	1d1a      	adds	r2, r3, #4
 800974e:	600a      	str	r2, [r1, #0]
 8009750:	681e      	ldr	r6, [r3, #0]
 8009752:	6862      	ldr	r2, [r4, #4]
 8009754:	2100      	movs	r1, #0
 8009756:	4630      	mov	r0, r6
 8009758:	f7f6 fd3a 	bl	80001d0 <memchr>
 800975c:	b108      	cbz	r0, 8009762 <_printf_i+0x1f2>
 800975e:	1b80      	subs	r0, r0, r6
 8009760:	6060      	str	r0, [r4, #4]
 8009762:	6863      	ldr	r3, [r4, #4]
 8009764:	6123      	str	r3, [r4, #16]
 8009766:	2300      	movs	r3, #0
 8009768:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800976c:	e7a8      	b.n	80096c0 <_printf_i+0x150>
 800976e:	6923      	ldr	r3, [r4, #16]
 8009770:	4632      	mov	r2, r6
 8009772:	4649      	mov	r1, r9
 8009774:	4640      	mov	r0, r8
 8009776:	47d0      	blx	sl
 8009778:	3001      	adds	r0, #1
 800977a:	d0ab      	beq.n	80096d4 <_printf_i+0x164>
 800977c:	6823      	ldr	r3, [r4, #0]
 800977e:	079b      	lsls	r3, r3, #30
 8009780:	d413      	bmi.n	80097aa <_printf_i+0x23a>
 8009782:	68e0      	ldr	r0, [r4, #12]
 8009784:	9b03      	ldr	r3, [sp, #12]
 8009786:	4298      	cmp	r0, r3
 8009788:	bfb8      	it	lt
 800978a:	4618      	movlt	r0, r3
 800978c:	e7a4      	b.n	80096d8 <_printf_i+0x168>
 800978e:	2301      	movs	r3, #1
 8009790:	4632      	mov	r2, r6
 8009792:	4649      	mov	r1, r9
 8009794:	4640      	mov	r0, r8
 8009796:	47d0      	blx	sl
 8009798:	3001      	adds	r0, #1
 800979a:	d09b      	beq.n	80096d4 <_printf_i+0x164>
 800979c:	3501      	adds	r5, #1
 800979e:	68e3      	ldr	r3, [r4, #12]
 80097a0:	9903      	ldr	r1, [sp, #12]
 80097a2:	1a5b      	subs	r3, r3, r1
 80097a4:	42ab      	cmp	r3, r5
 80097a6:	dcf2      	bgt.n	800978e <_printf_i+0x21e>
 80097a8:	e7eb      	b.n	8009782 <_printf_i+0x212>
 80097aa:	2500      	movs	r5, #0
 80097ac:	f104 0619 	add.w	r6, r4, #25
 80097b0:	e7f5      	b.n	800979e <_printf_i+0x22e>
 80097b2:	bf00      	nop
 80097b4:	08009e49 	.word	0x08009e49
 80097b8:	08009e5a 	.word	0x08009e5a

080097bc <_sbrk_r>:
 80097bc:	b538      	push	{r3, r4, r5, lr}
 80097be:	4d06      	ldr	r5, [pc, #24]	; (80097d8 <_sbrk_r+0x1c>)
 80097c0:	2300      	movs	r3, #0
 80097c2:	4604      	mov	r4, r0
 80097c4:	4608      	mov	r0, r1
 80097c6:	602b      	str	r3, [r5, #0]
 80097c8:	f7f8 f9ee 	bl	8001ba8 <_sbrk>
 80097cc:	1c43      	adds	r3, r0, #1
 80097ce:	d102      	bne.n	80097d6 <_sbrk_r+0x1a>
 80097d0:	682b      	ldr	r3, [r5, #0]
 80097d2:	b103      	cbz	r3, 80097d6 <_sbrk_r+0x1a>
 80097d4:	6023      	str	r3, [r4, #0]
 80097d6:	bd38      	pop	{r3, r4, r5, pc}
 80097d8:	20004c2c 	.word	0x20004c2c

080097dc <__sread>:
 80097dc:	b510      	push	{r4, lr}
 80097de:	460c      	mov	r4, r1
 80097e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80097e4:	f000 f8e0 	bl	80099a8 <_read_r>
 80097e8:	2800      	cmp	r0, #0
 80097ea:	bfab      	itete	ge
 80097ec:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80097ee:	89a3      	ldrhlt	r3, [r4, #12]
 80097f0:	181b      	addge	r3, r3, r0
 80097f2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80097f6:	bfac      	ite	ge
 80097f8:	6563      	strge	r3, [r4, #84]	; 0x54
 80097fa:	81a3      	strhlt	r3, [r4, #12]
 80097fc:	bd10      	pop	{r4, pc}

080097fe <__swrite>:
 80097fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009802:	461f      	mov	r7, r3
 8009804:	898b      	ldrh	r3, [r1, #12]
 8009806:	05db      	lsls	r3, r3, #23
 8009808:	4605      	mov	r5, r0
 800980a:	460c      	mov	r4, r1
 800980c:	4616      	mov	r6, r2
 800980e:	d505      	bpl.n	800981c <__swrite+0x1e>
 8009810:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009814:	2302      	movs	r3, #2
 8009816:	2200      	movs	r2, #0
 8009818:	f000 f868 	bl	80098ec <_lseek_r>
 800981c:	89a3      	ldrh	r3, [r4, #12]
 800981e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009822:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009826:	81a3      	strh	r3, [r4, #12]
 8009828:	4632      	mov	r2, r6
 800982a:	463b      	mov	r3, r7
 800982c:	4628      	mov	r0, r5
 800982e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009832:	f000 b817 	b.w	8009864 <_write_r>

08009836 <__sseek>:
 8009836:	b510      	push	{r4, lr}
 8009838:	460c      	mov	r4, r1
 800983a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800983e:	f000 f855 	bl	80098ec <_lseek_r>
 8009842:	1c43      	adds	r3, r0, #1
 8009844:	89a3      	ldrh	r3, [r4, #12]
 8009846:	bf15      	itete	ne
 8009848:	6560      	strne	r0, [r4, #84]	; 0x54
 800984a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800984e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009852:	81a3      	strheq	r3, [r4, #12]
 8009854:	bf18      	it	ne
 8009856:	81a3      	strhne	r3, [r4, #12]
 8009858:	bd10      	pop	{r4, pc}

0800985a <__sclose>:
 800985a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800985e:	f000 b813 	b.w	8009888 <_close_r>
	...

08009864 <_write_r>:
 8009864:	b538      	push	{r3, r4, r5, lr}
 8009866:	4d07      	ldr	r5, [pc, #28]	; (8009884 <_write_r+0x20>)
 8009868:	4604      	mov	r4, r0
 800986a:	4608      	mov	r0, r1
 800986c:	4611      	mov	r1, r2
 800986e:	2200      	movs	r2, #0
 8009870:	602a      	str	r2, [r5, #0]
 8009872:	461a      	mov	r2, r3
 8009874:	f7f8 f947 	bl	8001b06 <_write>
 8009878:	1c43      	adds	r3, r0, #1
 800987a:	d102      	bne.n	8009882 <_write_r+0x1e>
 800987c:	682b      	ldr	r3, [r5, #0]
 800987e:	b103      	cbz	r3, 8009882 <_write_r+0x1e>
 8009880:	6023      	str	r3, [r4, #0]
 8009882:	bd38      	pop	{r3, r4, r5, pc}
 8009884:	20004c2c 	.word	0x20004c2c

08009888 <_close_r>:
 8009888:	b538      	push	{r3, r4, r5, lr}
 800988a:	4d06      	ldr	r5, [pc, #24]	; (80098a4 <_close_r+0x1c>)
 800988c:	2300      	movs	r3, #0
 800988e:	4604      	mov	r4, r0
 8009890:	4608      	mov	r0, r1
 8009892:	602b      	str	r3, [r5, #0]
 8009894:	f7f8 f953 	bl	8001b3e <_close>
 8009898:	1c43      	adds	r3, r0, #1
 800989a:	d102      	bne.n	80098a2 <_close_r+0x1a>
 800989c:	682b      	ldr	r3, [r5, #0]
 800989e:	b103      	cbz	r3, 80098a2 <_close_r+0x1a>
 80098a0:	6023      	str	r3, [r4, #0]
 80098a2:	bd38      	pop	{r3, r4, r5, pc}
 80098a4:	20004c2c 	.word	0x20004c2c

080098a8 <_fstat_r>:
 80098a8:	b538      	push	{r3, r4, r5, lr}
 80098aa:	4d07      	ldr	r5, [pc, #28]	; (80098c8 <_fstat_r+0x20>)
 80098ac:	2300      	movs	r3, #0
 80098ae:	4604      	mov	r4, r0
 80098b0:	4608      	mov	r0, r1
 80098b2:	4611      	mov	r1, r2
 80098b4:	602b      	str	r3, [r5, #0]
 80098b6:	f7f8 f94e 	bl	8001b56 <_fstat>
 80098ba:	1c43      	adds	r3, r0, #1
 80098bc:	d102      	bne.n	80098c4 <_fstat_r+0x1c>
 80098be:	682b      	ldr	r3, [r5, #0]
 80098c0:	b103      	cbz	r3, 80098c4 <_fstat_r+0x1c>
 80098c2:	6023      	str	r3, [r4, #0]
 80098c4:	bd38      	pop	{r3, r4, r5, pc}
 80098c6:	bf00      	nop
 80098c8:	20004c2c 	.word	0x20004c2c

080098cc <_isatty_r>:
 80098cc:	b538      	push	{r3, r4, r5, lr}
 80098ce:	4d06      	ldr	r5, [pc, #24]	; (80098e8 <_isatty_r+0x1c>)
 80098d0:	2300      	movs	r3, #0
 80098d2:	4604      	mov	r4, r0
 80098d4:	4608      	mov	r0, r1
 80098d6:	602b      	str	r3, [r5, #0]
 80098d8:	f7f8 f94d 	bl	8001b76 <_isatty>
 80098dc:	1c43      	adds	r3, r0, #1
 80098de:	d102      	bne.n	80098e6 <_isatty_r+0x1a>
 80098e0:	682b      	ldr	r3, [r5, #0]
 80098e2:	b103      	cbz	r3, 80098e6 <_isatty_r+0x1a>
 80098e4:	6023      	str	r3, [r4, #0]
 80098e6:	bd38      	pop	{r3, r4, r5, pc}
 80098e8:	20004c2c 	.word	0x20004c2c

080098ec <_lseek_r>:
 80098ec:	b538      	push	{r3, r4, r5, lr}
 80098ee:	4d07      	ldr	r5, [pc, #28]	; (800990c <_lseek_r+0x20>)
 80098f0:	4604      	mov	r4, r0
 80098f2:	4608      	mov	r0, r1
 80098f4:	4611      	mov	r1, r2
 80098f6:	2200      	movs	r2, #0
 80098f8:	602a      	str	r2, [r5, #0]
 80098fa:	461a      	mov	r2, r3
 80098fc:	f7f8 f946 	bl	8001b8c <_lseek>
 8009900:	1c43      	adds	r3, r0, #1
 8009902:	d102      	bne.n	800990a <_lseek_r+0x1e>
 8009904:	682b      	ldr	r3, [r5, #0]
 8009906:	b103      	cbz	r3, 800990a <_lseek_r+0x1e>
 8009908:	6023      	str	r3, [r4, #0]
 800990a:	bd38      	pop	{r3, r4, r5, pc}
 800990c:	20004c2c 	.word	0x20004c2c

08009910 <memmove>:
 8009910:	4288      	cmp	r0, r1
 8009912:	b510      	push	{r4, lr}
 8009914:	eb01 0402 	add.w	r4, r1, r2
 8009918:	d902      	bls.n	8009920 <memmove+0x10>
 800991a:	4284      	cmp	r4, r0
 800991c:	4623      	mov	r3, r4
 800991e:	d807      	bhi.n	8009930 <memmove+0x20>
 8009920:	1e43      	subs	r3, r0, #1
 8009922:	42a1      	cmp	r1, r4
 8009924:	d008      	beq.n	8009938 <memmove+0x28>
 8009926:	f811 2b01 	ldrb.w	r2, [r1], #1
 800992a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800992e:	e7f8      	b.n	8009922 <memmove+0x12>
 8009930:	4402      	add	r2, r0
 8009932:	4601      	mov	r1, r0
 8009934:	428a      	cmp	r2, r1
 8009936:	d100      	bne.n	800993a <memmove+0x2a>
 8009938:	bd10      	pop	{r4, pc}
 800993a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800993e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009942:	e7f7      	b.n	8009934 <memmove+0x24>

08009944 <__malloc_lock>:
 8009944:	4801      	ldr	r0, [pc, #4]	; (800994c <__malloc_lock+0x8>)
 8009946:	f7ff b9df 	b.w	8008d08 <__retarget_lock_acquire_recursive>
 800994a:	bf00      	nop
 800994c:	20004c24 	.word	0x20004c24

08009950 <__malloc_unlock>:
 8009950:	4801      	ldr	r0, [pc, #4]	; (8009958 <__malloc_unlock+0x8>)
 8009952:	f7ff b9da 	b.w	8008d0a <__retarget_lock_release_recursive>
 8009956:	bf00      	nop
 8009958:	20004c24 	.word	0x20004c24

0800995c <_realloc_r>:
 800995c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800995e:	4607      	mov	r7, r0
 8009960:	4614      	mov	r4, r2
 8009962:	460e      	mov	r6, r1
 8009964:	b921      	cbnz	r1, 8009970 <_realloc_r+0x14>
 8009966:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800996a:	4611      	mov	r1, r2
 800996c:	f7ff ba82 	b.w	8008e74 <_malloc_r>
 8009970:	b922      	cbnz	r2, 800997c <_realloc_r+0x20>
 8009972:	f7ff fa2f 	bl	8008dd4 <_free_r>
 8009976:	4625      	mov	r5, r4
 8009978:	4628      	mov	r0, r5
 800997a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800997c:	f000 f826 	bl	80099cc <_malloc_usable_size_r>
 8009980:	42a0      	cmp	r0, r4
 8009982:	d20f      	bcs.n	80099a4 <_realloc_r+0x48>
 8009984:	4621      	mov	r1, r4
 8009986:	4638      	mov	r0, r7
 8009988:	f7ff fa74 	bl	8008e74 <_malloc_r>
 800998c:	4605      	mov	r5, r0
 800998e:	2800      	cmp	r0, #0
 8009990:	d0f2      	beq.n	8009978 <_realloc_r+0x1c>
 8009992:	4631      	mov	r1, r6
 8009994:	4622      	mov	r2, r4
 8009996:	f7fe fe7b 	bl	8008690 <memcpy>
 800999a:	4631      	mov	r1, r6
 800999c:	4638      	mov	r0, r7
 800999e:	f7ff fa19 	bl	8008dd4 <_free_r>
 80099a2:	e7e9      	b.n	8009978 <_realloc_r+0x1c>
 80099a4:	4635      	mov	r5, r6
 80099a6:	e7e7      	b.n	8009978 <_realloc_r+0x1c>

080099a8 <_read_r>:
 80099a8:	b538      	push	{r3, r4, r5, lr}
 80099aa:	4d07      	ldr	r5, [pc, #28]	; (80099c8 <_read_r+0x20>)
 80099ac:	4604      	mov	r4, r0
 80099ae:	4608      	mov	r0, r1
 80099b0:	4611      	mov	r1, r2
 80099b2:	2200      	movs	r2, #0
 80099b4:	602a      	str	r2, [r5, #0]
 80099b6:	461a      	mov	r2, r3
 80099b8:	f7f8 f888 	bl	8001acc <_read>
 80099bc:	1c43      	adds	r3, r0, #1
 80099be:	d102      	bne.n	80099c6 <_read_r+0x1e>
 80099c0:	682b      	ldr	r3, [r5, #0]
 80099c2:	b103      	cbz	r3, 80099c6 <_read_r+0x1e>
 80099c4:	6023      	str	r3, [r4, #0]
 80099c6:	bd38      	pop	{r3, r4, r5, pc}
 80099c8:	20004c2c 	.word	0x20004c2c

080099cc <_malloc_usable_size_r>:
 80099cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80099d0:	1f18      	subs	r0, r3, #4
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	bfbc      	itt	lt
 80099d6:	580b      	ldrlt	r3, [r1, r0]
 80099d8:	18c0      	addlt	r0, r0, r3
 80099da:	4770      	bx	lr

080099dc <_init>:
 80099dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099de:	bf00      	nop
 80099e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80099e2:	bc08      	pop	{r3}
 80099e4:	469e      	mov	lr, r3
 80099e6:	4770      	bx	lr

080099e8 <_fini>:
 80099e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099ea:	bf00      	nop
 80099ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80099ee:	bc08      	pop	{r3}
 80099f0:	469e      	mov	lr, r3
 80099f2:	4770      	bx	lr
