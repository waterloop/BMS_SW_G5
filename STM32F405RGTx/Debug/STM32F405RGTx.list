
STM32F405RGTx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007a00  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000019c  08007b90  08007b90  00017b90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007d2c  08007d2c  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08007d2c  08007d2c  00017d2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007d34  08007d34  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007d34  08007d34  00017d34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007d38  08007d38  00017d38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08007d3c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004bbc  20000074  08007db0  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004c30  08007db0  00024c30  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00025549  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004423  00000000  00000000  000455ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001950  00000000  00000000  00049a10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000017b8  00000000  00000000  0004b360  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024b17  00000000  00000000  0004cb18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001bc10  00000000  00000000  0007162f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dca93  00000000  00000000  0008d23f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00169cd2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000070e0  00000000  00000000  00169d28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007b78 	.word	0x08007b78

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08007b78 	.word	0x08007b78

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b96e 	b.w	80004c4 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	468c      	mov	ip, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	f040 8083 	bne.w	8000316 <__udivmoddi4+0x116>
 8000210:	428a      	cmp	r2, r1
 8000212:	4617      	mov	r7, r2
 8000214:	d947      	bls.n	80002a6 <__udivmoddi4+0xa6>
 8000216:	fab2 f282 	clz	r2, r2
 800021a:	b142      	cbz	r2, 800022e <__udivmoddi4+0x2e>
 800021c:	f1c2 0020 	rsb	r0, r2, #32
 8000220:	fa24 f000 	lsr.w	r0, r4, r0
 8000224:	4091      	lsls	r1, r2
 8000226:	4097      	lsls	r7, r2
 8000228:	ea40 0c01 	orr.w	ip, r0, r1
 800022c:	4094      	lsls	r4, r2
 800022e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000232:	0c23      	lsrs	r3, r4, #16
 8000234:	fbbc f6f8 	udiv	r6, ip, r8
 8000238:	fa1f fe87 	uxth.w	lr, r7
 800023c:	fb08 c116 	mls	r1, r8, r6, ip
 8000240:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000244:	fb06 f10e 	mul.w	r1, r6, lr
 8000248:	4299      	cmp	r1, r3
 800024a:	d909      	bls.n	8000260 <__udivmoddi4+0x60>
 800024c:	18fb      	adds	r3, r7, r3
 800024e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000252:	f080 8119 	bcs.w	8000488 <__udivmoddi4+0x288>
 8000256:	4299      	cmp	r1, r3
 8000258:	f240 8116 	bls.w	8000488 <__udivmoddi4+0x288>
 800025c:	3e02      	subs	r6, #2
 800025e:	443b      	add	r3, r7
 8000260:	1a5b      	subs	r3, r3, r1
 8000262:	b2a4      	uxth	r4, r4
 8000264:	fbb3 f0f8 	udiv	r0, r3, r8
 8000268:	fb08 3310 	mls	r3, r8, r0, r3
 800026c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000270:	fb00 fe0e 	mul.w	lr, r0, lr
 8000274:	45a6      	cmp	lr, r4
 8000276:	d909      	bls.n	800028c <__udivmoddi4+0x8c>
 8000278:	193c      	adds	r4, r7, r4
 800027a:	f100 33ff 	add.w	r3, r0, #4294967295
 800027e:	f080 8105 	bcs.w	800048c <__udivmoddi4+0x28c>
 8000282:	45a6      	cmp	lr, r4
 8000284:	f240 8102 	bls.w	800048c <__udivmoddi4+0x28c>
 8000288:	3802      	subs	r0, #2
 800028a:	443c      	add	r4, r7
 800028c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000290:	eba4 040e 	sub.w	r4, r4, lr
 8000294:	2600      	movs	r6, #0
 8000296:	b11d      	cbz	r5, 80002a0 <__udivmoddi4+0xa0>
 8000298:	40d4      	lsrs	r4, r2
 800029a:	2300      	movs	r3, #0
 800029c:	e9c5 4300 	strd	r4, r3, [r5]
 80002a0:	4631      	mov	r1, r6
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	b902      	cbnz	r2, 80002aa <__udivmoddi4+0xaa>
 80002a8:	deff      	udf	#255	; 0xff
 80002aa:	fab2 f282 	clz	r2, r2
 80002ae:	2a00      	cmp	r2, #0
 80002b0:	d150      	bne.n	8000354 <__udivmoddi4+0x154>
 80002b2:	1bcb      	subs	r3, r1, r7
 80002b4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b8:	fa1f f887 	uxth.w	r8, r7
 80002bc:	2601      	movs	r6, #1
 80002be:	fbb3 fcfe 	udiv	ip, r3, lr
 80002c2:	0c21      	lsrs	r1, r4, #16
 80002c4:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002cc:	fb08 f30c 	mul.w	r3, r8, ip
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d907      	bls.n	80002e4 <__udivmoddi4+0xe4>
 80002d4:	1879      	adds	r1, r7, r1
 80002d6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002da:	d202      	bcs.n	80002e2 <__udivmoddi4+0xe2>
 80002dc:	428b      	cmp	r3, r1
 80002de:	f200 80e9 	bhi.w	80004b4 <__udivmoddi4+0x2b4>
 80002e2:	4684      	mov	ip, r0
 80002e4:	1ac9      	subs	r1, r1, r3
 80002e6:	b2a3      	uxth	r3, r4
 80002e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80002ec:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002f4:	fb08 f800 	mul.w	r8, r8, r0
 80002f8:	45a0      	cmp	r8, r4
 80002fa:	d907      	bls.n	800030c <__udivmoddi4+0x10c>
 80002fc:	193c      	adds	r4, r7, r4
 80002fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000302:	d202      	bcs.n	800030a <__udivmoddi4+0x10a>
 8000304:	45a0      	cmp	r8, r4
 8000306:	f200 80d9 	bhi.w	80004bc <__udivmoddi4+0x2bc>
 800030a:	4618      	mov	r0, r3
 800030c:	eba4 0408 	sub.w	r4, r4, r8
 8000310:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000314:	e7bf      	b.n	8000296 <__udivmoddi4+0x96>
 8000316:	428b      	cmp	r3, r1
 8000318:	d909      	bls.n	800032e <__udivmoddi4+0x12e>
 800031a:	2d00      	cmp	r5, #0
 800031c:	f000 80b1 	beq.w	8000482 <__udivmoddi4+0x282>
 8000320:	2600      	movs	r6, #0
 8000322:	e9c5 0100 	strd	r0, r1, [r5]
 8000326:	4630      	mov	r0, r6
 8000328:	4631      	mov	r1, r6
 800032a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800032e:	fab3 f683 	clz	r6, r3
 8000332:	2e00      	cmp	r6, #0
 8000334:	d14a      	bne.n	80003cc <__udivmoddi4+0x1cc>
 8000336:	428b      	cmp	r3, r1
 8000338:	d302      	bcc.n	8000340 <__udivmoddi4+0x140>
 800033a:	4282      	cmp	r2, r0
 800033c:	f200 80b8 	bhi.w	80004b0 <__udivmoddi4+0x2b0>
 8000340:	1a84      	subs	r4, r0, r2
 8000342:	eb61 0103 	sbc.w	r1, r1, r3
 8000346:	2001      	movs	r0, #1
 8000348:	468c      	mov	ip, r1
 800034a:	2d00      	cmp	r5, #0
 800034c:	d0a8      	beq.n	80002a0 <__udivmoddi4+0xa0>
 800034e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000352:	e7a5      	b.n	80002a0 <__udivmoddi4+0xa0>
 8000354:	f1c2 0320 	rsb	r3, r2, #32
 8000358:	fa20 f603 	lsr.w	r6, r0, r3
 800035c:	4097      	lsls	r7, r2
 800035e:	fa01 f002 	lsl.w	r0, r1, r2
 8000362:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000366:	40d9      	lsrs	r1, r3
 8000368:	4330      	orrs	r0, r6
 800036a:	0c03      	lsrs	r3, r0, #16
 800036c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000370:	fa1f f887 	uxth.w	r8, r7
 8000374:	fb0e 1116 	mls	r1, lr, r6, r1
 8000378:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800037c:	fb06 f108 	mul.w	r1, r6, r8
 8000380:	4299      	cmp	r1, r3
 8000382:	fa04 f402 	lsl.w	r4, r4, r2
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x19c>
 8000388:	18fb      	adds	r3, r7, r3
 800038a:	f106 3cff 	add.w	ip, r6, #4294967295
 800038e:	f080 808d 	bcs.w	80004ac <__udivmoddi4+0x2ac>
 8000392:	4299      	cmp	r1, r3
 8000394:	f240 808a 	bls.w	80004ac <__udivmoddi4+0x2ac>
 8000398:	3e02      	subs	r6, #2
 800039a:	443b      	add	r3, r7
 800039c:	1a5b      	subs	r3, r3, r1
 800039e:	b281      	uxth	r1, r0
 80003a0:	fbb3 f0fe 	udiv	r0, r3, lr
 80003a4:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ac:	fb00 f308 	mul.w	r3, r0, r8
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0x1c4>
 80003b4:	1879      	adds	r1, r7, r1
 80003b6:	f100 3cff 	add.w	ip, r0, #4294967295
 80003ba:	d273      	bcs.n	80004a4 <__udivmoddi4+0x2a4>
 80003bc:	428b      	cmp	r3, r1
 80003be:	d971      	bls.n	80004a4 <__udivmoddi4+0x2a4>
 80003c0:	3802      	subs	r0, #2
 80003c2:	4439      	add	r1, r7
 80003c4:	1acb      	subs	r3, r1, r3
 80003c6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003ca:	e778      	b.n	80002be <__udivmoddi4+0xbe>
 80003cc:	f1c6 0c20 	rsb	ip, r6, #32
 80003d0:	fa03 f406 	lsl.w	r4, r3, r6
 80003d4:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d8:	431c      	orrs	r4, r3
 80003da:	fa20 f70c 	lsr.w	r7, r0, ip
 80003de:	fa01 f306 	lsl.w	r3, r1, r6
 80003e2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003e6:	fa21 f10c 	lsr.w	r1, r1, ip
 80003ea:	431f      	orrs	r7, r3
 80003ec:	0c3b      	lsrs	r3, r7, #16
 80003ee:	fbb1 f9fe 	udiv	r9, r1, lr
 80003f2:	fa1f f884 	uxth.w	r8, r4
 80003f6:	fb0e 1119 	mls	r1, lr, r9, r1
 80003fa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003fe:	fb09 fa08 	mul.w	sl, r9, r8
 8000402:	458a      	cmp	sl, r1
 8000404:	fa02 f206 	lsl.w	r2, r2, r6
 8000408:	fa00 f306 	lsl.w	r3, r0, r6
 800040c:	d908      	bls.n	8000420 <__udivmoddi4+0x220>
 800040e:	1861      	adds	r1, r4, r1
 8000410:	f109 30ff 	add.w	r0, r9, #4294967295
 8000414:	d248      	bcs.n	80004a8 <__udivmoddi4+0x2a8>
 8000416:	458a      	cmp	sl, r1
 8000418:	d946      	bls.n	80004a8 <__udivmoddi4+0x2a8>
 800041a:	f1a9 0902 	sub.w	r9, r9, #2
 800041e:	4421      	add	r1, r4
 8000420:	eba1 010a 	sub.w	r1, r1, sl
 8000424:	b2bf      	uxth	r7, r7
 8000426:	fbb1 f0fe 	udiv	r0, r1, lr
 800042a:	fb0e 1110 	mls	r1, lr, r0, r1
 800042e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000432:	fb00 f808 	mul.w	r8, r0, r8
 8000436:	45b8      	cmp	r8, r7
 8000438:	d907      	bls.n	800044a <__udivmoddi4+0x24a>
 800043a:	19e7      	adds	r7, r4, r7
 800043c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000440:	d22e      	bcs.n	80004a0 <__udivmoddi4+0x2a0>
 8000442:	45b8      	cmp	r8, r7
 8000444:	d92c      	bls.n	80004a0 <__udivmoddi4+0x2a0>
 8000446:	3802      	subs	r0, #2
 8000448:	4427      	add	r7, r4
 800044a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800044e:	eba7 0708 	sub.w	r7, r7, r8
 8000452:	fba0 8902 	umull	r8, r9, r0, r2
 8000456:	454f      	cmp	r7, r9
 8000458:	46c6      	mov	lr, r8
 800045a:	4649      	mov	r1, r9
 800045c:	d31a      	bcc.n	8000494 <__udivmoddi4+0x294>
 800045e:	d017      	beq.n	8000490 <__udivmoddi4+0x290>
 8000460:	b15d      	cbz	r5, 800047a <__udivmoddi4+0x27a>
 8000462:	ebb3 020e 	subs.w	r2, r3, lr
 8000466:	eb67 0701 	sbc.w	r7, r7, r1
 800046a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800046e:	40f2      	lsrs	r2, r6
 8000470:	ea4c 0202 	orr.w	r2, ip, r2
 8000474:	40f7      	lsrs	r7, r6
 8000476:	e9c5 2700 	strd	r2, r7, [r5]
 800047a:	2600      	movs	r6, #0
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	462e      	mov	r6, r5
 8000484:	4628      	mov	r0, r5
 8000486:	e70b      	b.n	80002a0 <__udivmoddi4+0xa0>
 8000488:	4606      	mov	r6, r0
 800048a:	e6e9      	b.n	8000260 <__udivmoddi4+0x60>
 800048c:	4618      	mov	r0, r3
 800048e:	e6fd      	b.n	800028c <__udivmoddi4+0x8c>
 8000490:	4543      	cmp	r3, r8
 8000492:	d2e5      	bcs.n	8000460 <__udivmoddi4+0x260>
 8000494:	ebb8 0e02 	subs.w	lr, r8, r2
 8000498:	eb69 0104 	sbc.w	r1, r9, r4
 800049c:	3801      	subs	r0, #1
 800049e:	e7df      	b.n	8000460 <__udivmoddi4+0x260>
 80004a0:	4608      	mov	r0, r1
 80004a2:	e7d2      	b.n	800044a <__udivmoddi4+0x24a>
 80004a4:	4660      	mov	r0, ip
 80004a6:	e78d      	b.n	80003c4 <__udivmoddi4+0x1c4>
 80004a8:	4681      	mov	r9, r0
 80004aa:	e7b9      	b.n	8000420 <__udivmoddi4+0x220>
 80004ac:	4666      	mov	r6, ip
 80004ae:	e775      	b.n	800039c <__udivmoddi4+0x19c>
 80004b0:	4630      	mov	r0, r6
 80004b2:	e74a      	b.n	800034a <__udivmoddi4+0x14a>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	4439      	add	r1, r7
 80004ba:	e713      	b.n	80002e4 <__udivmoddi4+0xe4>
 80004bc:	3802      	subs	r0, #2
 80004be:	443c      	add	r4, r7
 80004c0:	e724      	b.n	800030c <__udivmoddi4+0x10c>
 80004c2:	bf00      	nop

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <__io_putchar>:
#if BMS_DEBUG
#include "bms_tests.h"
#endif

// override __io_putchar from the STL to enable UART printing
void __io_putchar(uint8_t ch) {
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b082      	sub	sp, #8
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	4603      	mov	r3, r0
 80004d0:	71fb      	strb	r3, [r7, #7]
	HAL_UART_Transmit(&huart1, &ch, 1, 500);
 80004d2:	1df9      	adds	r1, r7, #7
 80004d4:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80004d8:	2201      	movs	r2, #1
 80004da:	4803      	ldr	r0, [pc, #12]	; (80004e8 <__io_putchar+0x20>)
 80004dc:	f003 fe0b 	bl	80040f6 <HAL_UART_Transmit>
}
 80004e0:	bf00      	nop
 80004e2:	3708      	adds	r7, #8
 80004e4:	46bd      	mov	sp, r7
 80004e6:	bd80      	pop	{r7, pc}
 80004e8:	20004a40 	.word	0x20004a40

080004ec <bms_entry>:

int bms_entry() {	
 80004ec:	b580      	push	{r7, lr}
 80004ee:	af00      	add	r7, sp, #0
	printf("starting timers...\r\n");
 80004f0:	4810      	ldr	r0, [pc, #64]	; (8000534 <bms_entry+0x48>)
 80004f2:	f006 fee9 	bl	80072c8 <puts>
	start_timers();
 80004f6:	f000 ff19 	bl	800132c <start_timers>

	printf("initializing RTOS kernel...\r\n");
 80004fa:	480f      	ldr	r0, [pc, #60]	; (8000538 <bms_entry+0x4c>)
 80004fc:	f006 fee4 	bl	80072c8 <puts>
	osKernelInitialize();
 8000500:	f004 f8e2 	bl	80046c8 <osKernelInitialize>

	printf("starting RTOS threads...\r\n");
 8000504:	480d      	ldr	r0, [pc, #52]	; (800053c <bms_entry+0x50>)
 8000506:	f006 fedf 	bl	80072c8 <puts>
	osThreadNew(ext_led_blink_thread, NULL, &ext_led_blink_thread_attrs);
 800050a:	4a0d      	ldr	r2, [pc, #52]	; (8000540 <bms_entry+0x54>)
 800050c:	2100      	movs	r1, #0
 800050e:	480d      	ldr	r0, [pc, #52]	; (8000544 <bms_entry+0x58>)
 8000510:	f004 f924 	bl	800475c <osThreadNew>
	osThreadNew(rtos_heartbeat_logger_thread, NULL, &rtos_heartbeat_logger_thread_attrs);
 8000514:	4a0c      	ldr	r2, [pc, #48]	; (8000548 <bms_entry+0x5c>)
 8000516:	2100      	movs	r1, #0
 8000518:	480c      	ldr	r0, [pc, #48]	; (800054c <bms_entry+0x60>)
 800051a:	f004 f91f 	bl	800475c <osThreadNew>
	// osThreadNew(measurements_thread_fn, NULL, &measurements_thread_attrs);

	printf("starting RTOS scheduler...\r\n");
 800051e:	480c      	ldr	r0, [pc, #48]	; (8000550 <bms_entry+0x64>)
 8000520:	f006 fed2 	bl	80072c8 <puts>
	osKernelStart();
 8000524:	f004 f8f4 	bl	8004710 <osKernelStart>

	// should never reach this point, since we have handed control of execution over to the RTOS
	Error_Handler();
 8000528:	f000 fb9c 	bl	8000c64 <Error_Handler>

	return 0;
 800052c:	2300      	movs	r3, #0
}
 800052e:	4618      	mov	r0, r3
 8000530:	bd80      	pop	{r7, pc}
 8000532:	bf00      	nop
 8000534:	08007b90 	.word	0x08007b90
 8000538:	08007ba4 	.word	0x08007ba4
 800053c:	08007bc4 	.word	0x08007bc4
 8000540:	08007c80 	.word	0x08007c80
 8000544:	08001341 	.word	0x08001341
 8000548:	08007ca4 	.word	0x08007ca4
 800054c:	08001361 	.word	0x08001361
 8000550:	08007be0 	.word	0x08007be0

08000554 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000558:	f000 ff3a 	bl	80013d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800055c:	f000 f816 	bl	800058c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000560:	f000 fae4 	bl	8000b2c <MX_GPIO_Init>
  MX_TIM2_Init();
 8000564:	f000 f9fc 	bl	8000960 <MX_TIM2_Init>
  MX_ADC1_Init();
 8000568:	f000 f87a 	bl	8000660 <MX_ADC1_Init>
  MX_SPI1_Init();
 800056c:	f000 f900 	bl	8000770 <MX_SPI1_Init>
  MX_TIM1_Init();
 8000570:	f000 f934 	bl	80007dc <MX_TIM1_Init>
  MX_TIM3_Init();
 8000574:	f000 fa40 	bl	80009f8 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8000578:	f000 faae 	bl	8000ad8 <MX_USART1_UART_Init>
  MX_CAN1_Init();
 800057c:	f000 f8c2 	bl	8000704 <MX_CAN1_Init>
  /* USER CODE BEGIN 2 */
  return bms_entry();
 8000580:	f7ff ffb4 	bl	80004ec <bms_entry>
 8000584:	4603      	mov	r3, r0
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}
 8000586:	4618      	mov	r0, r3
 8000588:	bd80      	pop	{r7, pc}
	...

0800058c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b094      	sub	sp, #80	; 0x50
 8000590:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000592:	f107 0320 	add.w	r3, r7, #32
 8000596:	2230      	movs	r2, #48	; 0x30
 8000598:	2100      	movs	r1, #0
 800059a:	4618      	mov	r0, r3
 800059c:	f006 fe1e 	bl	80071dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005a0:	f107 030c 	add.w	r3, r7, #12
 80005a4:	2200      	movs	r2, #0
 80005a6:	601a      	str	r2, [r3, #0]
 80005a8:	605a      	str	r2, [r3, #4]
 80005aa:	609a      	str	r2, [r3, #8]
 80005ac:	60da      	str	r2, [r3, #12]
 80005ae:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005b0:	2300      	movs	r3, #0
 80005b2:	60bb      	str	r3, [r7, #8]
 80005b4:	4b28      	ldr	r3, [pc, #160]	; (8000658 <SystemClock_Config+0xcc>)
 80005b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005b8:	4a27      	ldr	r2, [pc, #156]	; (8000658 <SystemClock_Config+0xcc>)
 80005ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005be:	6413      	str	r3, [r2, #64]	; 0x40
 80005c0:	4b25      	ldr	r3, [pc, #148]	; (8000658 <SystemClock_Config+0xcc>)
 80005c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005c8:	60bb      	str	r3, [r7, #8]
 80005ca:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005cc:	2300      	movs	r3, #0
 80005ce:	607b      	str	r3, [r7, #4]
 80005d0:	4b22      	ldr	r3, [pc, #136]	; (800065c <SystemClock_Config+0xd0>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	4a21      	ldr	r2, [pc, #132]	; (800065c <SystemClock_Config+0xd0>)
 80005d6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005da:	6013      	str	r3, [r2, #0]
 80005dc:	4b1f      	ldr	r3, [pc, #124]	; (800065c <SystemClock_Config+0xd0>)
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80005e4:	607b      	str	r3, [r7, #4]
 80005e6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005e8:	2301      	movs	r3, #1
 80005ea:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005ec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005f0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005f2:	2302      	movs	r3, #2
 80005f4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005f6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80005fc:	2308      	movs	r3, #8
 80005fe:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 160;
 8000600:	23a0      	movs	r3, #160	; 0xa0
 8000602:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000604:	2302      	movs	r3, #2
 8000606:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000608:	2304      	movs	r3, #4
 800060a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800060c:	f107 0320 	add.w	r3, r7, #32
 8000610:	4618      	mov	r0, r3
 8000612:	f001 fd2f 	bl	8002074 <HAL_RCC_OscConfig>
 8000616:	4603      	mov	r3, r0
 8000618:	2b00      	cmp	r3, #0
 800061a:	d001      	beq.n	8000620 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800061c:	f000 fb22 	bl	8000c64 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000620:	230f      	movs	r3, #15
 8000622:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000624:	2302      	movs	r3, #2
 8000626:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000628:	2300      	movs	r3, #0
 800062a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800062c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000630:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000632:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000636:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000638:	f107 030c 	add.w	r3, r7, #12
 800063c:	2105      	movs	r1, #5
 800063e:	4618      	mov	r0, r3
 8000640:	f001 ff90 	bl	8002564 <HAL_RCC_ClockConfig>
 8000644:	4603      	mov	r3, r0
 8000646:	2b00      	cmp	r3, #0
 8000648:	d001      	beq.n	800064e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800064a:	f000 fb0b 	bl	8000c64 <Error_Handler>
  }
}
 800064e:	bf00      	nop
 8000650:	3750      	adds	r7, #80	; 0x50
 8000652:	46bd      	mov	sp, r7
 8000654:	bd80      	pop	{r7, pc}
 8000656:	bf00      	nop
 8000658:	40023800 	.word	0x40023800
 800065c:	40007000 	.word	0x40007000

08000660 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b084      	sub	sp, #16
 8000664:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000666:	463b      	mov	r3, r7
 8000668:	2200      	movs	r2, #0
 800066a:	601a      	str	r2, [r3, #0]
 800066c:	605a      	str	r2, [r3, #4]
 800066e:	609a      	str	r2, [r3, #8]
 8000670:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000672:	4b21      	ldr	r3, [pc, #132]	; (80006f8 <MX_ADC1_Init+0x98>)
 8000674:	4a21      	ldr	r2, [pc, #132]	; (80006fc <MX_ADC1_Init+0x9c>)
 8000676:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000678:	4b1f      	ldr	r3, [pc, #124]	; (80006f8 <MX_ADC1_Init+0x98>)
 800067a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800067e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000680:	4b1d      	ldr	r3, [pc, #116]	; (80006f8 <MX_ADC1_Init+0x98>)
 8000682:	2200      	movs	r2, #0
 8000684:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000686:	4b1c      	ldr	r3, [pc, #112]	; (80006f8 <MX_ADC1_Init+0x98>)
 8000688:	2200      	movs	r2, #0
 800068a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800068c:	4b1a      	ldr	r3, [pc, #104]	; (80006f8 <MX_ADC1_Init+0x98>)
 800068e:	2200      	movs	r2, #0
 8000690:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000692:	4b19      	ldr	r3, [pc, #100]	; (80006f8 <MX_ADC1_Init+0x98>)
 8000694:	2200      	movs	r2, #0
 8000696:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800069a:	4b17      	ldr	r3, [pc, #92]	; (80006f8 <MX_ADC1_Init+0x98>)
 800069c:	2200      	movs	r2, #0
 800069e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006a0:	4b15      	ldr	r3, [pc, #84]	; (80006f8 <MX_ADC1_Init+0x98>)
 80006a2:	4a17      	ldr	r2, [pc, #92]	; (8000700 <MX_ADC1_Init+0xa0>)
 80006a4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006a6:	4b14      	ldr	r3, [pc, #80]	; (80006f8 <MX_ADC1_Init+0x98>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80006ac:	4b12      	ldr	r3, [pc, #72]	; (80006f8 <MX_ADC1_Init+0x98>)
 80006ae:	2201      	movs	r2, #1
 80006b0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80006b2:	4b11      	ldr	r3, [pc, #68]	; (80006f8 <MX_ADC1_Init+0x98>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006ba:	4b0f      	ldr	r3, [pc, #60]	; (80006f8 <MX_ADC1_Init+0x98>)
 80006bc:	2201      	movs	r2, #1
 80006be:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80006c0:	480d      	ldr	r0, [pc, #52]	; (80006f8 <MX_ADC1_Init+0x98>)
 80006c2:	f000 fec7 	bl	8001454 <HAL_ADC_Init>
 80006c6:	4603      	mov	r3, r0
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d001      	beq.n	80006d0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80006cc:	f000 faca 	bl	8000c64 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80006d0:	2301      	movs	r3, #1
 80006d2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80006d4:	2301      	movs	r3, #1
 80006d6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80006d8:	2300      	movs	r3, #0
 80006da:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006dc:	463b      	mov	r3, r7
 80006de:	4619      	mov	r1, r3
 80006e0:	4805      	ldr	r0, [pc, #20]	; (80006f8 <MX_ADC1_Init+0x98>)
 80006e2:	f000 fefb 	bl	80014dc <HAL_ADC_ConfigChannel>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d001      	beq.n	80006f0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80006ec:	f000 faba 	bl	8000c64 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006f0:	bf00      	nop
 80006f2:	3710      	adds	r7, #16
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bd80      	pop	{r7, pc}
 80006f8:	200049f8 	.word	0x200049f8
 80006fc:	40012000 	.word	0x40012000
 8000700:	0f000001 	.word	0x0f000001

08000704 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000708:	4b17      	ldr	r3, [pc, #92]	; (8000768 <MX_CAN1_Init+0x64>)
 800070a:	4a18      	ldr	r2, [pc, #96]	; (800076c <MX_CAN1_Init+0x68>)
 800070c:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 5;
 800070e:	4b16      	ldr	r3, [pc, #88]	; (8000768 <MX_CAN1_Init+0x64>)
 8000710:	2205      	movs	r2, #5
 8000712:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000714:	4b14      	ldr	r3, [pc, #80]	; (8000768 <MX_CAN1_Init+0x64>)
 8000716:	2200      	movs	r2, #0
 8000718:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800071a:	4b13      	ldr	r3, [pc, #76]	; (8000768 <MX_CAN1_Init+0x64>)
 800071c:	2200      	movs	r2, #0
 800071e:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_13TQ;
 8000720:	4b11      	ldr	r3, [pc, #68]	; (8000768 <MX_CAN1_Init+0x64>)
 8000722:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 8000726:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000728:	4b0f      	ldr	r3, [pc, #60]	; (8000768 <MX_CAN1_Init+0x64>)
 800072a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800072e:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000730:	4b0d      	ldr	r3, [pc, #52]	; (8000768 <MX_CAN1_Init+0x64>)
 8000732:	2200      	movs	r2, #0
 8000734:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000736:	4b0c      	ldr	r3, [pc, #48]	; (8000768 <MX_CAN1_Init+0x64>)
 8000738:	2200      	movs	r2, #0
 800073a:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800073c:	4b0a      	ldr	r3, [pc, #40]	; (8000768 <MX_CAN1_Init+0x64>)
 800073e:	2200      	movs	r2, #0
 8000740:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000742:	4b09      	ldr	r3, [pc, #36]	; (8000768 <MX_CAN1_Init+0x64>)
 8000744:	2200      	movs	r2, #0
 8000746:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000748:	4b07      	ldr	r3, [pc, #28]	; (8000768 <MX_CAN1_Init+0x64>)
 800074a:	2200      	movs	r2, #0
 800074c:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800074e:	4b06      	ldr	r3, [pc, #24]	; (8000768 <MX_CAN1_Init+0x64>)
 8000750:	2200      	movs	r2, #0
 8000752:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000754:	4804      	ldr	r0, [pc, #16]	; (8000768 <MX_CAN1_Init+0x64>)
 8000756:	f001 f8df 	bl	8001918 <HAL_CAN_Init>
 800075a:	4603      	mov	r3, r0
 800075c:	2b00      	cmp	r3, #0
 800075e:	d001      	beq.n	8000764 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8000760:	f000 fa80 	bl	8000c64 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000764:	bf00      	nop
 8000766:	bd80      	pop	{r7, pc}
 8000768:	20004b6c 	.word	0x20004b6c
 800076c:	40006400 	.word	0x40006400

08000770 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000774:	4b17      	ldr	r3, [pc, #92]	; (80007d4 <MX_SPI1_Init+0x64>)
 8000776:	4a18      	ldr	r2, [pc, #96]	; (80007d8 <MX_SPI1_Init+0x68>)
 8000778:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800077a:	4b16      	ldr	r3, [pc, #88]	; (80007d4 <MX_SPI1_Init+0x64>)
 800077c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000780:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000782:	4b14      	ldr	r3, [pc, #80]	; (80007d4 <MX_SPI1_Init+0x64>)
 8000784:	2200      	movs	r2, #0
 8000786:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000788:	4b12      	ldr	r3, [pc, #72]	; (80007d4 <MX_SPI1_Init+0x64>)
 800078a:	2200      	movs	r2, #0
 800078c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800078e:	4b11      	ldr	r3, [pc, #68]	; (80007d4 <MX_SPI1_Init+0x64>)
 8000790:	2200      	movs	r2, #0
 8000792:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000794:	4b0f      	ldr	r3, [pc, #60]	; (80007d4 <MX_SPI1_Init+0x64>)
 8000796:	2200      	movs	r2, #0
 8000798:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800079a:	4b0e      	ldr	r3, [pc, #56]	; (80007d4 <MX_SPI1_Init+0x64>)
 800079c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007a0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80007a2:	4b0c      	ldr	r3, [pc, #48]	; (80007d4 <MX_SPI1_Init+0x64>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007a8:	4b0a      	ldr	r3, [pc, #40]	; (80007d4 <MX_SPI1_Init+0x64>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80007ae:	4b09      	ldr	r3, [pc, #36]	; (80007d4 <MX_SPI1_Init+0x64>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007b4:	4b07      	ldr	r3, [pc, #28]	; (80007d4 <MX_SPI1_Init+0x64>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80007ba:	4b06      	ldr	r3, [pc, #24]	; (80007d4 <MX_SPI1_Init+0x64>)
 80007bc:	220a      	movs	r2, #10
 80007be:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80007c0:	4804      	ldr	r0, [pc, #16]	; (80007d4 <MX_SPI1_Init+0x64>)
 80007c2:	f002 f8fb 	bl	80029bc <HAL_SPI_Init>
 80007c6:	4603      	mov	r3, r0
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d001      	beq.n	80007d0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80007cc:	f000 fa4a 	bl	8000c64 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80007d0:	bf00      	nop
 80007d2:	bd80      	pop	{r7, pc}
 80007d4:	20004acc 	.word	0x20004acc
 80007d8:	40013000 	.word	0x40013000

080007dc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b096      	sub	sp, #88	; 0x58
 80007e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007e2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80007e6:	2200      	movs	r2, #0
 80007e8:	601a      	str	r2, [r3, #0]
 80007ea:	605a      	str	r2, [r3, #4]
 80007ec:	609a      	str	r2, [r3, #8]
 80007ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007f0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80007f4:	2200      	movs	r2, #0
 80007f6:	601a      	str	r2, [r3, #0]
 80007f8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80007fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007fe:	2200      	movs	r2, #0
 8000800:	601a      	str	r2, [r3, #0]
 8000802:	605a      	str	r2, [r3, #4]
 8000804:	609a      	str	r2, [r3, #8]
 8000806:	60da      	str	r2, [r3, #12]
 8000808:	611a      	str	r2, [r3, #16]
 800080a:	615a      	str	r2, [r3, #20]
 800080c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800080e:	1d3b      	adds	r3, r7, #4
 8000810:	2220      	movs	r2, #32
 8000812:	2100      	movs	r1, #0
 8000814:	4618      	mov	r0, r3
 8000816:	f006 fce1 	bl	80071dc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800081a:	4b4f      	ldr	r3, [pc, #316]	; (8000958 <MX_TIM1_Init+0x17c>)
 800081c:	4a4f      	ldr	r2, [pc, #316]	; (800095c <MX_TIM1_Init+0x180>)
 800081e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 159;
 8000820:	4b4d      	ldr	r3, [pc, #308]	; (8000958 <MX_TIM1_Init+0x17c>)
 8000822:	229f      	movs	r2, #159	; 0x9f
 8000824:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000826:	4b4c      	ldr	r3, [pc, #304]	; (8000958 <MX_TIM1_Init+0x17c>)
 8000828:	2200      	movs	r2, #0
 800082a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800082c:	4b4a      	ldr	r3, [pc, #296]	; (8000958 <MX_TIM1_Init+0x17c>)
 800082e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000832:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000834:	4b48      	ldr	r3, [pc, #288]	; (8000958 <MX_TIM1_Init+0x17c>)
 8000836:	2200      	movs	r2, #0
 8000838:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800083a:	4b47      	ldr	r3, [pc, #284]	; (8000958 <MX_TIM1_Init+0x17c>)
 800083c:	2200      	movs	r2, #0
 800083e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000840:	4b45      	ldr	r3, [pc, #276]	; (8000958 <MX_TIM1_Init+0x17c>)
 8000842:	2200      	movs	r2, #0
 8000844:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000846:	4844      	ldr	r0, [pc, #272]	; (8000958 <MX_TIM1_Init+0x17c>)
 8000848:	f002 f941 	bl	8002ace <HAL_TIM_Base_Init>
 800084c:	4603      	mov	r3, r0
 800084e:	2b00      	cmp	r3, #0
 8000850:	d001      	beq.n	8000856 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000852:	f000 fa07 	bl	8000c64 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000856:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800085a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800085c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000860:	4619      	mov	r1, r3
 8000862:	483d      	ldr	r0, [pc, #244]	; (8000958 <MX_TIM1_Init+0x17c>)
 8000864:	f002 fe18 	bl	8003498 <HAL_TIM_ConfigClockSource>
 8000868:	4603      	mov	r3, r0
 800086a:	2b00      	cmp	r3, #0
 800086c:	d001      	beq.n	8000872 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800086e:	f000 f9f9 	bl	8000c64 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000872:	4839      	ldr	r0, [pc, #228]	; (8000958 <MX_TIM1_Init+0x17c>)
 8000874:	f002 faab 	bl	8002dce <HAL_TIM_PWM_Init>
 8000878:	4603      	mov	r3, r0
 800087a:	2b00      	cmp	r3, #0
 800087c:	d001      	beq.n	8000882 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800087e:	f000 f9f1 	bl	8000c64 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8000882:	4835      	ldr	r0, [pc, #212]	; (8000958 <MX_TIM1_Init+0x17c>)
 8000884:	f002 fa4a 	bl	8002d1c <HAL_TIM_OC_Init>
 8000888:	4603      	mov	r3, r0
 800088a:	2b00      	cmp	r3, #0
 800088c:	d001      	beq.n	8000892 <MX_TIM1_Init+0xb6>
  {
    Error_Handler();
 800088e:	f000 f9e9 	bl	8000c64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000892:	2300      	movs	r3, #0
 8000894:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000896:	2300      	movs	r3, #0
 8000898:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800089a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800089e:	4619      	mov	r1, r3
 80008a0:	482d      	ldr	r0, [pc, #180]	; (8000958 <MX_TIM1_Init+0x17c>)
 80008a2:	f003 faf9 	bl	8003e98 <HAL_TIMEx_MasterConfigSynchronization>
 80008a6:	4603      	mov	r3, r0
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d001      	beq.n	80008b0 <MX_TIM1_Init+0xd4>
  {
    Error_Handler();
 80008ac:	f000 f9da 	bl	8000c64 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80008b0:	2360      	movs	r3, #96	; 0x60
 80008b2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80008b4:	2300      	movs	r3, #0
 80008b6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80008b8:	2300      	movs	r3, #0
 80008ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80008bc:	2300      	movs	r3, #0
 80008be:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80008c0:	2300      	movs	r3, #0
 80008c2:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80008c4:	2300      	movs	r3, #0
 80008c6:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80008c8:	2300      	movs	r3, #0
 80008ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80008cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008d0:	2200      	movs	r2, #0
 80008d2:	4619      	mov	r1, r3
 80008d4:	4820      	ldr	r0, [pc, #128]	; (8000958 <MX_TIM1_Init+0x17c>)
 80008d6:	f002 fd21 	bl	800331c <HAL_TIM_PWM_ConfigChannel>
 80008da:	4603      	mov	r3, r0
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d001      	beq.n	80008e4 <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 80008e0:	f000 f9c0 	bl	8000c64 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80008e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008e8:	2204      	movs	r2, #4
 80008ea:	4619      	mov	r1, r3
 80008ec:	481a      	ldr	r0, [pc, #104]	; (8000958 <MX_TIM1_Init+0x17c>)
 80008ee:	f002 fd15 	bl	800331c <HAL_TIM_PWM_ConfigChannel>
 80008f2:	4603      	mov	r3, r0
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d001      	beq.n	80008fc <MX_TIM1_Init+0x120>
  {
    Error_Handler();
 80008f8:	f000 f9b4 	bl	8000c64 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80008fc:	2300      	movs	r3, #0
 80008fe:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000900:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000904:	2208      	movs	r2, #8
 8000906:	4619      	mov	r1, r3
 8000908:	4813      	ldr	r0, [pc, #76]	; (8000958 <MX_TIM1_Init+0x17c>)
 800090a:	f002 fc1b 	bl	8003144 <HAL_TIM_OC_ConfigChannel>
 800090e:	4603      	mov	r3, r0
 8000910:	2b00      	cmp	r3, #0
 8000912:	d001      	beq.n	8000918 <MX_TIM1_Init+0x13c>
  {
    Error_Handler();
 8000914:	f000 f9a6 	bl	8000c64 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000918:	2300      	movs	r3, #0
 800091a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800091c:	2300      	movs	r3, #0
 800091e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000920:	2300      	movs	r3, #0
 8000922:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000924:	2300      	movs	r3, #0
 8000926:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000928:	2300      	movs	r3, #0
 800092a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800092c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000930:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000932:	2300      	movs	r3, #0
 8000934:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000936:	1d3b      	adds	r3, r7, #4
 8000938:	4619      	mov	r1, r3
 800093a:	4807      	ldr	r0, [pc, #28]	; (8000958 <MX_TIM1_Init+0x17c>)
 800093c:	f003 fb28 	bl	8003f90 <HAL_TIMEx_ConfigBreakDeadTime>
 8000940:	4603      	mov	r3, r0
 8000942:	2b00      	cmp	r3, #0
 8000944:	d001      	beq.n	800094a <MX_TIM1_Init+0x16e>
  {
    Error_Handler();
 8000946:	f000 f98d 	bl	8000c64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800094a:	4803      	ldr	r0, [pc, #12]	; (8000958 <MX_TIM1_Init+0x17c>)
 800094c:	f000 fb2e 	bl	8000fac <HAL_TIM_MspPostInit>

}
 8000950:	bf00      	nop
 8000952:	3758      	adds	r7, #88	; 0x58
 8000954:	46bd      	mov	sp, r7
 8000956:	bd80      	pop	{r7, pc}
 8000958:	20004a84 	.word	0x20004a84
 800095c:	40010000 	.word	0x40010000

08000960 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b086      	sub	sp, #24
 8000964:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000966:	f107 0308 	add.w	r3, r7, #8
 800096a:	2200      	movs	r2, #0
 800096c:	601a      	str	r2, [r3, #0]
 800096e:	605a      	str	r2, [r3, #4]
 8000970:	609a      	str	r2, [r3, #8]
 8000972:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000974:	463b      	mov	r3, r7
 8000976:	2200      	movs	r2, #0
 8000978:	601a      	str	r2, [r3, #0]
 800097a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800097c:	4b1d      	ldr	r3, [pc, #116]	; (80009f4 <MX_TIM2_Init+0x94>)
 800097e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000982:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 79;
 8000984:	4b1b      	ldr	r3, [pc, #108]	; (80009f4 <MX_TIM2_Init+0x94>)
 8000986:	224f      	movs	r2, #79	; 0x4f
 8000988:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800098a:	4b1a      	ldr	r3, [pc, #104]	; (80009f4 <MX_TIM2_Init+0x94>)
 800098c:	2200      	movs	r2, #0
 800098e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000990:	4b18      	ldr	r3, [pc, #96]	; (80009f4 <MX_TIM2_Init+0x94>)
 8000992:	f04f 32ff 	mov.w	r2, #4294967295
 8000996:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000998:	4b16      	ldr	r3, [pc, #88]	; (80009f4 <MX_TIM2_Init+0x94>)
 800099a:	2200      	movs	r2, #0
 800099c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800099e:	4b15      	ldr	r3, [pc, #84]	; (80009f4 <MX_TIM2_Init+0x94>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80009a4:	4813      	ldr	r0, [pc, #76]	; (80009f4 <MX_TIM2_Init+0x94>)
 80009a6:	f002 f892 	bl	8002ace <HAL_TIM_Base_Init>
 80009aa:	4603      	mov	r3, r0
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d001      	beq.n	80009b4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80009b0:	f000 f958 	bl	8000c64 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009b8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80009ba:	f107 0308 	add.w	r3, r7, #8
 80009be:	4619      	mov	r1, r3
 80009c0:	480c      	ldr	r0, [pc, #48]	; (80009f4 <MX_TIM2_Init+0x94>)
 80009c2:	f002 fd69 	bl	8003498 <HAL_TIM_ConfigClockSource>
 80009c6:	4603      	mov	r3, r0
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d001      	beq.n	80009d0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80009cc:	f000 f94a 	bl	8000c64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009d0:	2300      	movs	r3, #0
 80009d2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009d4:	2300      	movs	r3, #0
 80009d6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80009d8:	463b      	mov	r3, r7
 80009da:	4619      	mov	r1, r3
 80009dc:	4805      	ldr	r0, [pc, #20]	; (80009f4 <MX_TIM2_Init+0x94>)
 80009de:	f003 fa5b 	bl	8003e98 <HAL_TIMEx_MasterConfigSynchronization>
 80009e2:	4603      	mov	r3, r0
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d001      	beq.n	80009ec <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80009e8:	f000 f93c 	bl	8000c64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80009ec:	bf00      	nop
 80009ee:	3718      	adds	r7, #24
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bd80      	pop	{r7, pc}
 80009f4:	20004b24 	.word	0x20004b24

080009f8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b08a      	sub	sp, #40	; 0x28
 80009fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009fe:	f107 0318 	add.w	r3, r7, #24
 8000a02:	2200      	movs	r2, #0
 8000a04:	601a      	str	r2, [r3, #0]
 8000a06:	605a      	str	r2, [r3, #4]
 8000a08:	609a      	str	r2, [r3, #8]
 8000a0a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a0c:	f107 0310 	add.w	r3, r7, #16
 8000a10:	2200      	movs	r2, #0
 8000a12:	601a      	str	r2, [r3, #0]
 8000a14:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000a16:	463b      	mov	r3, r7
 8000a18:	2200      	movs	r2, #0
 8000a1a:	601a      	str	r2, [r3, #0]
 8000a1c:	605a      	str	r2, [r3, #4]
 8000a1e:	609a      	str	r2, [r3, #8]
 8000a20:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000a22:	4b2b      	ldr	r3, [pc, #172]	; (8000ad0 <MX_TIM3_Init+0xd8>)
 8000a24:	4a2b      	ldr	r2, [pc, #172]	; (8000ad4 <MX_TIM3_Init+0xdc>)
 8000a26:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000a28:	4b29      	ldr	r3, [pc, #164]	; (8000ad0 <MX_TIM3_Init+0xd8>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a2e:	4b28      	ldr	r3, [pc, #160]	; (8000ad0 <MX_TIM3_Init+0xd8>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000a34:	4b26      	ldr	r3, [pc, #152]	; (8000ad0 <MX_TIM3_Init+0xd8>)
 8000a36:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000a3a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a3c:	4b24      	ldr	r3, [pc, #144]	; (8000ad0 <MX_TIM3_Init+0xd8>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a42:	4b23      	ldr	r3, [pc, #140]	; (8000ad0 <MX_TIM3_Init+0xd8>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000a48:	4821      	ldr	r0, [pc, #132]	; (8000ad0 <MX_TIM3_Init+0xd8>)
 8000a4a:	f002 f840 	bl	8002ace <HAL_TIM_Base_Init>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d001      	beq.n	8000a58 <MX_TIM3_Init+0x60>
  {
    Error_Handler();
 8000a54:	f000 f906 	bl	8000c64 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a58:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a5c:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000a5e:	f107 0318 	add.w	r3, r7, #24
 8000a62:	4619      	mov	r1, r3
 8000a64:	481a      	ldr	r0, [pc, #104]	; (8000ad0 <MX_TIM3_Init+0xd8>)
 8000a66:	f002 fd17 	bl	8003498 <HAL_TIM_ConfigClockSource>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d001      	beq.n	8000a74 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8000a70:	f000 f8f8 	bl	8000c64 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8000a74:	4816      	ldr	r0, [pc, #88]	; (8000ad0 <MX_TIM3_Init+0xd8>)
 8000a76:	f002 fa03 	bl	8002e80 <HAL_TIM_IC_Init>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d001      	beq.n	8000a84 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8000a80:	f000 f8f0 	bl	8000c64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a84:	2300      	movs	r3, #0
 8000a86:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000a8c:	f107 0310 	add.w	r3, r7, #16
 8000a90:	4619      	mov	r1, r3
 8000a92:	480f      	ldr	r0, [pc, #60]	; (8000ad0 <MX_TIM3_Init+0xd8>)
 8000a94:	f003 fa00 	bl	8003e98 <HAL_TIMEx_MasterConfigSynchronization>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d001      	beq.n	8000aa2 <MX_TIM3_Init+0xaa>
  {
    Error_Handler();
 8000a9e:	f000 f8e1 	bl	8000c64 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000aa6:	2301      	movs	r3, #1
 8000aa8:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000ab2:	463b      	mov	r3, r7
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	4619      	mov	r1, r3
 8000ab8:	4805      	ldr	r0, [pc, #20]	; (8000ad0 <MX_TIM3_Init+0xd8>)
 8000aba:	f002 fb9b 	bl	80031f4 <HAL_TIM_IC_ConfigChannel>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d001      	beq.n	8000ac8 <MX_TIM3_Init+0xd0>
  {
    Error_Handler();
 8000ac4:	f000 f8ce 	bl	8000c64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000ac8:	bf00      	nop
 8000aca:	3728      	adds	r7, #40	; 0x28
 8000acc:	46bd      	mov	sp, r7
 8000ace:	bd80      	pop	{r7, pc}
 8000ad0:	200049b0 	.word	0x200049b0
 8000ad4:	40000400 	.word	0x40000400

08000ad8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000adc:	4b11      	ldr	r3, [pc, #68]	; (8000b24 <MX_USART1_UART_Init+0x4c>)
 8000ade:	4a12      	ldr	r2, [pc, #72]	; (8000b28 <MX_USART1_UART_Init+0x50>)
 8000ae0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000ae2:	4b10      	ldr	r3, [pc, #64]	; (8000b24 <MX_USART1_UART_Init+0x4c>)
 8000ae4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ae8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000aea:	4b0e      	ldr	r3, [pc, #56]	; (8000b24 <MX_USART1_UART_Init+0x4c>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000af0:	4b0c      	ldr	r3, [pc, #48]	; (8000b24 <MX_USART1_UART_Init+0x4c>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000af6:	4b0b      	ldr	r3, [pc, #44]	; (8000b24 <MX_USART1_UART_Init+0x4c>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000afc:	4b09      	ldr	r3, [pc, #36]	; (8000b24 <MX_USART1_UART_Init+0x4c>)
 8000afe:	220c      	movs	r2, #12
 8000b00:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b02:	4b08      	ldr	r3, [pc, #32]	; (8000b24 <MX_USART1_UART_Init+0x4c>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b08:	4b06      	ldr	r3, [pc, #24]	; (8000b24 <MX_USART1_UART_Init+0x4c>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000b0e:	4805      	ldr	r0, [pc, #20]	; (8000b24 <MX_USART1_UART_Init+0x4c>)
 8000b10:	f003 faa4 	bl	800405c <HAL_UART_Init>
 8000b14:	4603      	mov	r3, r0
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d001      	beq.n	8000b1e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000b1a:	f000 f8a3 	bl	8000c64 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000b1e:	bf00      	nop
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	bf00      	nop
 8000b24:	20004a40 	.word	0x20004a40
 8000b28:	40011000 	.word	0x40011000

08000b2c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b08a      	sub	sp, #40	; 0x28
 8000b30:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b32:	f107 0314 	add.w	r3, r7, #20
 8000b36:	2200      	movs	r2, #0
 8000b38:	601a      	str	r2, [r3, #0]
 8000b3a:	605a      	str	r2, [r3, #4]
 8000b3c:	609a      	str	r2, [r3, #8]
 8000b3e:	60da      	str	r2, [r3, #12]
 8000b40:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b42:	2300      	movs	r3, #0
 8000b44:	613b      	str	r3, [r7, #16]
 8000b46:	4b3a      	ldr	r3, [pc, #232]	; (8000c30 <MX_GPIO_Init+0x104>)
 8000b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4a:	4a39      	ldr	r2, [pc, #228]	; (8000c30 <MX_GPIO_Init+0x104>)
 8000b4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b50:	6313      	str	r3, [r2, #48]	; 0x30
 8000b52:	4b37      	ldr	r3, [pc, #220]	; (8000c30 <MX_GPIO_Init+0x104>)
 8000b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b5a:	613b      	str	r3, [r7, #16]
 8000b5c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b5e:	2300      	movs	r3, #0
 8000b60:	60fb      	str	r3, [r7, #12]
 8000b62:	4b33      	ldr	r3, [pc, #204]	; (8000c30 <MX_GPIO_Init+0x104>)
 8000b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b66:	4a32      	ldr	r2, [pc, #200]	; (8000c30 <MX_GPIO_Init+0x104>)
 8000b68:	f043 0304 	orr.w	r3, r3, #4
 8000b6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b6e:	4b30      	ldr	r3, [pc, #192]	; (8000c30 <MX_GPIO_Init+0x104>)
 8000b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b72:	f003 0304 	and.w	r3, r3, #4
 8000b76:	60fb      	str	r3, [r7, #12]
 8000b78:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	60bb      	str	r3, [r7, #8]
 8000b7e:	4b2c      	ldr	r3, [pc, #176]	; (8000c30 <MX_GPIO_Init+0x104>)
 8000b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b82:	4a2b      	ldr	r2, [pc, #172]	; (8000c30 <MX_GPIO_Init+0x104>)
 8000b84:	f043 0301 	orr.w	r3, r3, #1
 8000b88:	6313      	str	r3, [r2, #48]	; 0x30
 8000b8a:	4b29      	ldr	r3, [pc, #164]	; (8000c30 <MX_GPIO_Init+0x104>)
 8000b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8e:	f003 0301 	and.w	r3, r3, #1
 8000b92:	60bb      	str	r3, [r7, #8]
 8000b94:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b96:	2300      	movs	r3, #0
 8000b98:	607b      	str	r3, [r7, #4]
 8000b9a:	4b25      	ldr	r3, [pc, #148]	; (8000c30 <MX_GPIO_Init+0x104>)
 8000b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9e:	4a24      	ldr	r2, [pc, #144]	; (8000c30 <MX_GPIO_Init+0x104>)
 8000ba0:	f043 0302 	orr.w	r3, r3, #2
 8000ba4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ba6:	4b22      	ldr	r3, [pc, #136]	; (8000c30 <MX_GPIO_Init+0x104>)
 8000ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000baa:	f003 0302 	and.w	r3, r3, #2
 8000bae:	607b      	str	r3, [r7, #4]
 8000bb0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	2110      	movs	r1, #16
 8000bb6:	481f      	ldr	r0, [pc, #124]	; (8000c34 <MX_GPIO_Init+0x108>)
 8000bb8:	f001 fa28 	bl	800200c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS2_GPIO_Port, CS2_Pin, GPIO_PIN_RESET);
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	2110      	movs	r1, #16
 8000bc0:	481d      	ldr	r0, [pc, #116]	; (8000c38 <MX_GPIO_Init+0x10c>)
 8000bc2:	f001 fa23 	bl	800200c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CONTACTOR_Pin|PRECHARGE_Pin|EXT_LED_Pin, GPIO_PIN_RESET);
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	f240 4106 	movw	r1, #1030	; 0x406
 8000bcc:	481b      	ldr	r0, [pc, #108]	; (8000c3c <MX_GPIO_Init+0x110>)
 8000bce:	f001 fa1d 	bl	800200c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CS_Pin */
  GPIO_InitStruct.Pin = CS_Pin;
 8000bd2:	2310      	movs	r3, #16
 8000bd4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bd6:	2301      	movs	r3, #1
 8000bd8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bde:	2300      	movs	r3, #0
 8000be0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CS_GPIO_Port, &GPIO_InitStruct);
 8000be2:	f107 0314 	add.w	r3, r7, #20
 8000be6:	4619      	mov	r1, r3
 8000be8:	4812      	ldr	r0, [pc, #72]	; (8000c34 <MX_GPIO_Init+0x108>)
 8000bea:	f001 f873 	bl	8001cd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS2_Pin */
  GPIO_InitStruct.Pin = CS2_Pin;
 8000bee:	2310      	movs	r3, #16
 8000bf0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bf2:	2301      	movs	r3, #1
 8000bf4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CS2_GPIO_Port, &GPIO_InitStruct);
 8000bfe:	f107 0314 	add.w	r3, r7, #20
 8000c02:	4619      	mov	r1, r3
 8000c04:	480c      	ldr	r0, [pc, #48]	; (8000c38 <MX_GPIO_Init+0x10c>)
 8000c06:	f001 f865 	bl	8001cd4 <HAL_GPIO_Init>

  /*Configure GPIO pins : CONTACTOR_Pin PRECHARGE_Pin EXT_LED_Pin */
  GPIO_InitStruct.Pin = CONTACTOR_Pin|PRECHARGE_Pin|EXT_LED_Pin;
 8000c0a:	f240 4306 	movw	r3, #1030	; 0x406
 8000c0e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c10:	2301      	movs	r3, #1
 8000c12:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c14:	2300      	movs	r3, #0
 8000c16:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c1c:	f107 0314 	add.w	r3, r7, #20
 8000c20:	4619      	mov	r1, r3
 8000c22:	4806      	ldr	r0, [pc, #24]	; (8000c3c <MX_GPIO_Init+0x110>)
 8000c24:	f001 f856 	bl	8001cd4 <HAL_GPIO_Init>

}
 8000c28:	bf00      	nop
 8000c2a:	3728      	adds	r7, #40	; 0x28
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bd80      	pop	{r7, pc}
 8000c30:	40023800 	.word	0x40023800
 8000c34:	40020000 	.word	0x40020000
 8000c38:	40020800 	.word	0x40020800
 8000c3c:	40020400 	.word	0x40020400

08000c40 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b082      	sub	sp, #8
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM9) {
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	4a04      	ldr	r2, [pc, #16]	; (8000c60 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000c4e:	4293      	cmp	r3, r2
 8000c50:	d101      	bne.n	8000c56 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000c52:	f000 fbdf 	bl	8001414 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000c56:	bf00      	nop
 8000c58:	3708      	adds	r7, #8
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	40014000 	.word	0x40014000

08000c64 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c64:	b480      	push	{r7}
 8000c66:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c68:	b672      	cpsid	i
}
 8000c6a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c6c:	e7fe      	b.n	8000c6c <Error_Handler+0x8>
	...

08000c70 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b082      	sub	sp, #8
 8000c74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c76:	2300      	movs	r3, #0
 8000c78:	607b      	str	r3, [r7, #4]
 8000c7a:	4b12      	ldr	r3, [pc, #72]	; (8000cc4 <HAL_MspInit+0x54>)
 8000c7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c7e:	4a11      	ldr	r2, [pc, #68]	; (8000cc4 <HAL_MspInit+0x54>)
 8000c80:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c84:	6453      	str	r3, [r2, #68]	; 0x44
 8000c86:	4b0f      	ldr	r3, [pc, #60]	; (8000cc4 <HAL_MspInit+0x54>)
 8000c88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c8e:	607b      	str	r3, [r7, #4]
 8000c90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c92:	2300      	movs	r3, #0
 8000c94:	603b      	str	r3, [r7, #0]
 8000c96:	4b0b      	ldr	r3, [pc, #44]	; (8000cc4 <HAL_MspInit+0x54>)
 8000c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c9a:	4a0a      	ldr	r2, [pc, #40]	; (8000cc4 <HAL_MspInit+0x54>)
 8000c9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ca0:	6413      	str	r3, [r2, #64]	; 0x40
 8000ca2:	4b08      	ldr	r3, [pc, #32]	; (8000cc4 <HAL_MspInit+0x54>)
 8000ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ca6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000caa:	603b      	str	r3, [r7, #0]
 8000cac:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000cae:	2200      	movs	r2, #0
 8000cb0:	210f      	movs	r1, #15
 8000cb2:	f06f 0001 	mvn.w	r0, #1
 8000cb6:	f000 ffe3 	bl	8001c80 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cba:	bf00      	nop
 8000cbc:	3708      	adds	r7, #8
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd80      	pop	{r7, pc}
 8000cc2:	bf00      	nop
 8000cc4:	40023800 	.word	0x40023800

08000cc8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b08a      	sub	sp, #40	; 0x28
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cd0:	f107 0314 	add.w	r3, r7, #20
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	601a      	str	r2, [r3, #0]
 8000cd8:	605a      	str	r2, [r3, #4]
 8000cda:	609a      	str	r2, [r3, #8]
 8000cdc:	60da      	str	r2, [r3, #12]
 8000cde:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	4a24      	ldr	r2, [pc, #144]	; (8000d78 <HAL_ADC_MspInit+0xb0>)
 8000ce6:	4293      	cmp	r3, r2
 8000ce8:	d141      	bne.n	8000d6e <HAL_ADC_MspInit+0xa6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000cea:	2300      	movs	r3, #0
 8000cec:	613b      	str	r3, [r7, #16]
 8000cee:	4b23      	ldr	r3, [pc, #140]	; (8000d7c <HAL_ADC_MspInit+0xb4>)
 8000cf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cf2:	4a22      	ldr	r2, [pc, #136]	; (8000d7c <HAL_ADC_MspInit+0xb4>)
 8000cf4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cf8:	6453      	str	r3, [r2, #68]	; 0x44
 8000cfa:	4b20      	ldr	r3, [pc, #128]	; (8000d7c <HAL_ADC_MspInit+0xb4>)
 8000cfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d02:	613b      	str	r3, [r7, #16]
 8000d04:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d06:	2300      	movs	r3, #0
 8000d08:	60fb      	str	r3, [r7, #12]
 8000d0a:	4b1c      	ldr	r3, [pc, #112]	; (8000d7c <HAL_ADC_MspInit+0xb4>)
 8000d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d0e:	4a1b      	ldr	r2, [pc, #108]	; (8000d7c <HAL_ADC_MspInit+0xb4>)
 8000d10:	f043 0304 	orr.w	r3, r3, #4
 8000d14:	6313      	str	r3, [r2, #48]	; 0x30
 8000d16:	4b19      	ldr	r3, [pc, #100]	; (8000d7c <HAL_ADC_MspInit+0xb4>)
 8000d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d1a:	f003 0304 	and.w	r3, r3, #4
 8000d1e:	60fb      	str	r3, [r7, #12]
 8000d20:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d22:	2300      	movs	r3, #0
 8000d24:	60bb      	str	r3, [r7, #8]
 8000d26:	4b15      	ldr	r3, [pc, #84]	; (8000d7c <HAL_ADC_MspInit+0xb4>)
 8000d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d2a:	4a14      	ldr	r2, [pc, #80]	; (8000d7c <HAL_ADC_MspInit+0xb4>)
 8000d2c:	f043 0301 	orr.w	r3, r3, #1
 8000d30:	6313      	str	r3, [r2, #48]	; 0x30
 8000d32:	4b12      	ldr	r3, [pc, #72]	; (8000d7c <HAL_ADC_MspInit+0xb4>)
 8000d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d36:	f003 0301 	and.w	r3, r3, #1
 8000d3a:	60bb      	str	r3, [r7, #8]
 8000d3c:	68bb      	ldr	r3, [r7, #8]
    PC1     ------> ADC1_IN11
    PC2     ------> ADC1_IN12
    PC3     ------> ADC1_IN13
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = ADC1_IN10_CURRENT_SENSE_Pin|ADC1_IN11_VBATT_Pin|ADC1_IN12_MC_CAP_Pin|ADC1_IN13_CONTACTOR_Pin;
 8000d3e:	230f      	movs	r3, #15
 8000d40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d42:	2303      	movs	r3, #3
 8000d44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d46:	2300      	movs	r3, #0
 8000d48:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d4a:	f107 0314 	add.w	r3, r7, #20
 8000d4e:	4619      	mov	r1, r3
 8000d50:	480b      	ldr	r0, [pc, #44]	; (8000d80 <HAL_ADC_MspInit+0xb8>)
 8000d52:	f000 ffbf 	bl	8001cd4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC1_IN1_BUCK_TEMP_Pin;
 8000d56:	2302      	movs	r3, #2
 8000d58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d5a:	2303      	movs	r3, #3
 8000d5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ADC1_IN1_BUCK_TEMP_GPIO_Port, &GPIO_InitStruct);
 8000d62:	f107 0314 	add.w	r3, r7, #20
 8000d66:	4619      	mov	r1, r3
 8000d68:	4806      	ldr	r0, [pc, #24]	; (8000d84 <HAL_ADC_MspInit+0xbc>)
 8000d6a:	f000 ffb3 	bl	8001cd4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000d6e:	bf00      	nop
 8000d70:	3728      	adds	r7, #40	; 0x28
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	bf00      	nop
 8000d78:	40012000 	.word	0x40012000
 8000d7c:	40023800 	.word	0x40023800
 8000d80:	40020800 	.word	0x40020800
 8000d84:	40020000 	.word	0x40020000

08000d88 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b08a      	sub	sp, #40	; 0x28
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d90:	f107 0314 	add.w	r3, r7, #20
 8000d94:	2200      	movs	r2, #0
 8000d96:	601a      	str	r2, [r3, #0]
 8000d98:	605a      	str	r2, [r3, #4]
 8000d9a:	609a      	str	r2, [r3, #8]
 8000d9c:	60da      	str	r2, [r3, #12]
 8000d9e:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	4a19      	ldr	r2, [pc, #100]	; (8000e0c <HAL_CAN_MspInit+0x84>)
 8000da6:	4293      	cmp	r3, r2
 8000da8:	d12c      	bne.n	8000e04 <HAL_CAN_MspInit+0x7c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000daa:	2300      	movs	r3, #0
 8000dac:	613b      	str	r3, [r7, #16]
 8000dae:	4b18      	ldr	r3, [pc, #96]	; (8000e10 <HAL_CAN_MspInit+0x88>)
 8000db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000db2:	4a17      	ldr	r2, [pc, #92]	; (8000e10 <HAL_CAN_MspInit+0x88>)
 8000db4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000db8:	6413      	str	r3, [r2, #64]	; 0x40
 8000dba:	4b15      	ldr	r3, [pc, #84]	; (8000e10 <HAL_CAN_MspInit+0x88>)
 8000dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000dc2:	613b      	str	r3, [r7, #16]
 8000dc4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	60fb      	str	r3, [r7, #12]
 8000dca:	4b11      	ldr	r3, [pc, #68]	; (8000e10 <HAL_CAN_MspInit+0x88>)
 8000dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dce:	4a10      	ldr	r2, [pc, #64]	; (8000e10 <HAL_CAN_MspInit+0x88>)
 8000dd0:	f043 0301 	orr.w	r3, r3, #1
 8000dd4:	6313      	str	r3, [r2, #48]	; 0x30
 8000dd6:	4b0e      	ldr	r3, [pc, #56]	; (8000e10 <HAL_CAN_MspInit+0x88>)
 8000dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dda:	f003 0301 	and.w	r3, r3, #1
 8000dde:	60fb      	str	r3, [r7, #12]
 8000de0:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000de2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000de6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000de8:	2302      	movs	r3, #2
 8000dea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dec:	2300      	movs	r3, #0
 8000dee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000df0:	2303      	movs	r3, #3
 8000df2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000df4:	2309      	movs	r3, #9
 8000df6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000df8:	f107 0314 	add.w	r3, r7, #20
 8000dfc:	4619      	mov	r1, r3
 8000dfe:	4805      	ldr	r0, [pc, #20]	; (8000e14 <HAL_CAN_MspInit+0x8c>)
 8000e00:	f000 ff68 	bl	8001cd4 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000e04:	bf00      	nop
 8000e06:	3728      	adds	r7, #40	; 0x28
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bd80      	pop	{r7, pc}
 8000e0c:	40006400 	.word	0x40006400
 8000e10:	40023800 	.word	0x40023800
 8000e14:	40020000 	.word	0x40020000

08000e18 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b08a      	sub	sp, #40	; 0x28
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e20:	f107 0314 	add.w	r3, r7, #20
 8000e24:	2200      	movs	r2, #0
 8000e26:	601a      	str	r2, [r3, #0]
 8000e28:	605a      	str	r2, [r3, #4]
 8000e2a:	609a      	str	r2, [r3, #8]
 8000e2c:	60da      	str	r2, [r3, #12]
 8000e2e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	4a19      	ldr	r2, [pc, #100]	; (8000e9c <HAL_SPI_MspInit+0x84>)
 8000e36:	4293      	cmp	r3, r2
 8000e38:	d12b      	bne.n	8000e92 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	613b      	str	r3, [r7, #16]
 8000e3e:	4b18      	ldr	r3, [pc, #96]	; (8000ea0 <HAL_SPI_MspInit+0x88>)
 8000e40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e42:	4a17      	ldr	r2, [pc, #92]	; (8000ea0 <HAL_SPI_MspInit+0x88>)
 8000e44:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000e48:	6453      	str	r3, [r2, #68]	; 0x44
 8000e4a:	4b15      	ldr	r3, [pc, #84]	; (8000ea0 <HAL_SPI_MspInit+0x88>)
 8000e4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e4e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e52:	613b      	str	r3, [r7, #16]
 8000e54:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e56:	2300      	movs	r3, #0
 8000e58:	60fb      	str	r3, [r7, #12]
 8000e5a:	4b11      	ldr	r3, [pc, #68]	; (8000ea0 <HAL_SPI_MspInit+0x88>)
 8000e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e5e:	4a10      	ldr	r2, [pc, #64]	; (8000ea0 <HAL_SPI_MspInit+0x88>)
 8000e60:	f043 0301 	orr.w	r3, r3, #1
 8000e64:	6313      	str	r3, [r2, #48]	; 0x30
 8000e66:	4b0e      	ldr	r3, [pc, #56]	; (8000ea0 <HAL_SPI_MspInit+0x88>)
 8000e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e6a:	f003 0301 	and.w	r3, r3, #1
 8000e6e:	60fb      	str	r3, [r7, #12]
 8000e70:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000e72:	23e0      	movs	r3, #224	; 0xe0
 8000e74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e76:	2302      	movs	r3, #2
 8000e78:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e7e:	2303      	movs	r3, #3
 8000e80:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000e82:	2305      	movs	r3, #5
 8000e84:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e86:	f107 0314 	add.w	r3, r7, #20
 8000e8a:	4619      	mov	r1, r3
 8000e8c:	4805      	ldr	r0, [pc, #20]	; (8000ea4 <HAL_SPI_MspInit+0x8c>)
 8000e8e:	f000 ff21 	bl	8001cd4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000e92:	bf00      	nop
 8000e94:	3728      	adds	r7, #40	; 0x28
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	40013000 	.word	0x40013000
 8000ea0:	40023800 	.word	0x40023800
 8000ea4:	40020000 	.word	0x40020000

08000ea8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b08c      	sub	sp, #48	; 0x30
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eb0:	f107 031c 	add.w	r3, r7, #28
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	601a      	str	r2, [r3, #0]
 8000eb8:	605a      	str	r2, [r3, #4]
 8000eba:	609a      	str	r2, [r3, #8]
 8000ebc:	60da      	str	r2, [r3, #12]
 8000ebe:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	4a35      	ldr	r2, [pc, #212]	; (8000f9c <HAL_TIM_Base_MspInit+0xf4>)
 8000ec6:	4293      	cmp	r3, r2
 8000ec8:	d116      	bne.n	8000ef8 <HAL_TIM_Base_MspInit+0x50>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000eca:	2300      	movs	r3, #0
 8000ecc:	61bb      	str	r3, [r7, #24]
 8000ece:	4b34      	ldr	r3, [pc, #208]	; (8000fa0 <HAL_TIM_Base_MspInit+0xf8>)
 8000ed0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ed2:	4a33      	ldr	r2, [pc, #204]	; (8000fa0 <HAL_TIM_Base_MspInit+0xf8>)
 8000ed4:	f043 0301 	orr.w	r3, r3, #1
 8000ed8:	6453      	str	r3, [r2, #68]	; 0x44
 8000eda:	4b31      	ldr	r3, [pc, #196]	; (8000fa0 <HAL_TIM_Base_MspInit+0xf8>)
 8000edc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ede:	f003 0301 	and.w	r3, r3, #1
 8000ee2:	61bb      	str	r3, [r7, #24]
 8000ee4:	69bb      	ldr	r3, [r7, #24]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	2100      	movs	r1, #0
 8000eea:	2018      	movs	r0, #24
 8000eec:	f000 fec8 	bl	8001c80 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8000ef0:	2018      	movs	r0, #24
 8000ef2:	f000 fee1 	bl	8001cb8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000ef6:	e04c      	b.n	8000f92 <HAL_TIM_Base_MspInit+0xea>
  else if(htim_base->Instance==TIM2)
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000f00:	d10e      	bne.n	8000f20 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000f02:	2300      	movs	r3, #0
 8000f04:	617b      	str	r3, [r7, #20]
 8000f06:	4b26      	ldr	r3, [pc, #152]	; (8000fa0 <HAL_TIM_Base_MspInit+0xf8>)
 8000f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f0a:	4a25      	ldr	r2, [pc, #148]	; (8000fa0 <HAL_TIM_Base_MspInit+0xf8>)
 8000f0c:	f043 0301 	orr.w	r3, r3, #1
 8000f10:	6413      	str	r3, [r2, #64]	; 0x40
 8000f12:	4b23      	ldr	r3, [pc, #140]	; (8000fa0 <HAL_TIM_Base_MspInit+0xf8>)
 8000f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f16:	f003 0301 	and.w	r3, r3, #1
 8000f1a:	617b      	str	r3, [r7, #20]
 8000f1c:	697b      	ldr	r3, [r7, #20]
}
 8000f1e:	e038      	b.n	8000f92 <HAL_TIM_Base_MspInit+0xea>
  else if(htim_base->Instance==TIM3)
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	4a1f      	ldr	r2, [pc, #124]	; (8000fa4 <HAL_TIM_Base_MspInit+0xfc>)
 8000f26:	4293      	cmp	r3, r2
 8000f28:	d133      	bne.n	8000f92 <HAL_TIM_Base_MspInit+0xea>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	613b      	str	r3, [r7, #16]
 8000f2e:	4b1c      	ldr	r3, [pc, #112]	; (8000fa0 <HAL_TIM_Base_MspInit+0xf8>)
 8000f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f32:	4a1b      	ldr	r2, [pc, #108]	; (8000fa0 <HAL_TIM_Base_MspInit+0xf8>)
 8000f34:	f043 0302 	orr.w	r3, r3, #2
 8000f38:	6413      	str	r3, [r2, #64]	; 0x40
 8000f3a:	4b19      	ldr	r3, [pc, #100]	; (8000fa0 <HAL_TIM_Base_MspInit+0xf8>)
 8000f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f3e:	f003 0302 	and.w	r3, r3, #2
 8000f42:	613b      	str	r3, [r7, #16]
 8000f44:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f46:	2300      	movs	r3, #0
 8000f48:	60fb      	str	r3, [r7, #12]
 8000f4a:	4b15      	ldr	r3, [pc, #84]	; (8000fa0 <HAL_TIM_Base_MspInit+0xf8>)
 8000f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4e:	4a14      	ldr	r2, [pc, #80]	; (8000fa0 <HAL_TIM_Base_MspInit+0xf8>)
 8000f50:	f043 0304 	orr.w	r3, r3, #4
 8000f54:	6313      	str	r3, [r2, #48]	; 0x30
 8000f56:	4b12      	ldr	r3, [pc, #72]	; (8000fa0 <HAL_TIM_Base_MspInit+0xf8>)
 8000f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f5a:	f003 0304 	and.w	r3, r3, #4
 8000f5e:	60fb      	str	r3, [r7, #12]
 8000f60:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TIM3_CH1_IMD_IN_Pin;
 8000f62:	2340      	movs	r3, #64	; 0x40
 8000f64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f66:	2302      	movs	r3, #2
 8000f68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000f72:	2302      	movs	r3, #2
 8000f74:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(TIM3_CH1_IMD_IN_GPIO_Port, &GPIO_InitStruct);
 8000f76:	f107 031c 	add.w	r3, r7, #28
 8000f7a:	4619      	mov	r1, r3
 8000f7c:	480a      	ldr	r0, [pc, #40]	; (8000fa8 <HAL_TIM_Base_MspInit+0x100>)
 8000f7e:	f000 fea9 	bl	8001cd4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8000f82:	2200      	movs	r2, #0
 8000f84:	2105      	movs	r1, #5
 8000f86:	201d      	movs	r0, #29
 8000f88:	f000 fe7a 	bl	8001c80 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000f8c:	201d      	movs	r0, #29
 8000f8e:	f000 fe93 	bl	8001cb8 <HAL_NVIC_EnableIRQ>
}
 8000f92:	bf00      	nop
 8000f94:	3730      	adds	r7, #48	; 0x30
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	40010000 	.word	0x40010000
 8000fa0:	40023800 	.word	0x40023800
 8000fa4:	40000400 	.word	0x40000400
 8000fa8:	40020800 	.word	0x40020800

08000fac <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b088      	sub	sp, #32
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fb4:	f107 030c 	add.w	r3, r7, #12
 8000fb8:	2200      	movs	r2, #0
 8000fba:	601a      	str	r2, [r3, #0]
 8000fbc:	605a      	str	r2, [r3, #4]
 8000fbe:	609a      	str	r2, [r3, #8]
 8000fc0:	60da      	str	r2, [r3, #12]
 8000fc2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	4a12      	ldr	r2, [pc, #72]	; (8001014 <HAL_TIM_MspPostInit+0x68>)
 8000fca:	4293      	cmp	r3, r2
 8000fcc:	d11e      	bne.n	800100c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fce:	2300      	movs	r3, #0
 8000fd0:	60bb      	str	r3, [r7, #8]
 8000fd2:	4b11      	ldr	r3, [pc, #68]	; (8001018 <HAL_TIM_MspPostInit+0x6c>)
 8000fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd6:	4a10      	ldr	r2, [pc, #64]	; (8001018 <HAL_TIM_MspPostInit+0x6c>)
 8000fd8:	f043 0301 	orr.w	r3, r3, #1
 8000fdc:	6313      	str	r3, [r2, #48]	; 0x30
 8000fde:	4b0e      	ldr	r3, [pc, #56]	; (8001018 <HAL_TIM_MspPostInit+0x6c>)
 8000fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe2:	f003 0301 	and.w	r3, r3, #1
 8000fe6:	60bb      	str	r3, [r7, #8]
 8000fe8:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = TIM1_CH1_BLUE_Pin|TIM1_CH2_GREEN_Pin|TIM1_CH3_RED_Pin;
 8000fea:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8000fee:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ff0:	2302      	movs	r3, #2
 8000ff2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000ffc:	2301      	movs	r3, #1
 8000ffe:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001000:	f107 030c 	add.w	r3, r7, #12
 8001004:	4619      	mov	r1, r3
 8001006:	4805      	ldr	r0, [pc, #20]	; (800101c <HAL_TIM_MspPostInit+0x70>)
 8001008:	f000 fe64 	bl	8001cd4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800100c:	bf00      	nop
 800100e:	3720      	adds	r7, #32
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}
 8001014:	40010000 	.word	0x40010000
 8001018:	40023800 	.word	0x40023800
 800101c:	40020000 	.word	0x40020000

08001020 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b08a      	sub	sp, #40	; 0x28
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001028:	f107 0314 	add.w	r3, r7, #20
 800102c:	2200      	movs	r2, #0
 800102e:	601a      	str	r2, [r3, #0]
 8001030:	605a      	str	r2, [r3, #4]
 8001032:	609a      	str	r2, [r3, #8]
 8001034:	60da      	str	r2, [r3, #12]
 8001036:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	4a19      	ldr	r2, [pc, #100]	; (80010a4 <HAL_UART_MspInit+0x84>)
 800103e:	4293      	cmp	r3, r2
 8001040:	d12b      	bne.n	800109a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001042:	2300      	movs	r3, #0
 8001044:	613b      	str	r3, [r7, #16]
 8001046:	4b18      	ldr	r3, [pc, #96]	; (80010a8 <HAL_UART_MspInit+0x88>)
 8001048:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800104a:	4a17      	ldr	r2, [pc, #92]	; (80010a8 <HAL_UART_MspInit+0x88>)
 800104c:	f043 0310 	orr.w	r3, r3, #16
 8001050:	6453      	str	r3, [r2, #68]	; 0x44
 8001052:	4b15      	ldr	r3, [pc, #84]	; (80010a8 <HAL_UART_MspInit+0x88>)
 8001054:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001056:	f003 0310 	and.w	r3, r3, #16
 800105a:	613b      	str	r3, [r7, #16]
 800105c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800105e:	2300      	movs	r3, #0
 8001060:	60fb      	str	r3, [r7, #12]
 8001062:	4b11      	ldr	r3, [pc, #68]	; (80010a8 <HAL_UART_MspInit+0x88>)
 8001064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001066:	4a10      	ldr	r2, [pc, #64]	; (80010a8 <HAL_UART_MspInit+0x88>)
 8001068:	f043 0302 	orr.w	r3, r3, #2
 800106c:	6313      	str	r3, [r2, #48]	; 0x30
 800106e:	4b0e      	ldr	r3, [pc, #56]	; (80010a8 <HAL_UART_MspInit+0x88>)
 8001070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001072:	f003 0302 	and.w	r3, r3, #2
 8001076:	60fb      	str	r3, [r7, #12]
 8001078:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800107a:	23c0      	movs	r3, #192	; 0xc0
 800107c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800107e:	2302      	movs	r3, #2
 8001080:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001082:	2300      	movs	r3, #0
 8001084:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001086:	2303      	movs	r3, #3
 8001088:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800108a:	2307      	movs	r3, #7
 800108c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800108e:	f107 0314 	add.w	r3, r7, #20
 8001092:	4619      	mov	r1, r3
 8001094:	4805      	ldr	r0, [pc, #20]	; (80010ac <HAL_UART_MspInit+0x8c>)
 8001096:	f000 fe1d 	bl	8001cd4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800109a:	bf00      	nop
 800109c:	3728      	adds	r7, #40	; 0x28
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	40011000 	.word	0x40011000
 80010a8:	40023800 	.word	0x40023800
 80010ac:	40020400 	.word	0x40020400

080010b0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b08c      	sub	sp, #48	; 0x30
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80010b8:	2300      	movs	r3, #0
 80010ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80010bc:	2300      	movs	r3, #0
 80010be:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM9 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, TickPriority ,0);
 80010c0:	2200      	movs	r2, #0
 80010c2:	6879      	ldr	r1, [r7, #4]
 80010c4:	2018      	movs	r0, #24
 80010c6:	f000 fddb 	bl	8001c80 <HAL_NVIC_SetPriority>

  /* Enable the TIM9 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 80010ca:	2018      	movs	r0, #24
 80010cc:	f000 fdf4 	bl	8001cb8 <HAL_NVIC_EnableIRQ>
  /* Enable TIM9 clock */
  __HAL_RCC_TIM9_CLK_ENABLE();
 80010d0:	2300      	movs	r3, #0
 80010d2:	60fb      	str	r3, [r7, #12]
 80010d4:	4b1f      	ldr	r3, [pc, #124]	; (8001154 <HAL_InitTick+0xa4>)
 80010d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010d8:	4a1e      	ldr	r2, [pc, #120]	; (8001154 <HAL_InitTick+0xa4>)
 80010da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010de:	6453      	str	r3, [r2, #68]	; 0x44
 80010e0:	4b1c      	ldr	r3, [pc, #112]	; (8001154 <HAL_InitTick+0xa4>)
 80010e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010e8:	60fb      	str	r3, [r7, #12]
 80010ea:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80010ec:	f107 0210 	add.w	r2, r7, #16
 80010f0:	f107 0314 	add.w	r3, r7, #20
 80010f4:	4611      	mov	r1, r2
 80010f6:	4618      	mov	r0, r3
 80010f8:	f001 fc2e 	bl	8002958 <HAL_RCC_GetClockConfig>

  /* Compute TIM9 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 80010fc:	f001 fc18 	bl	8002930 <HAL_RCC_GetPCLK2Freq>
 8001100:	4603      	mov	r3, r0
 8001102:	005b      	lsls	r3, r3, #1
 8001104:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM9 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001106:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001108:	4a13      	ldr	r2, [pc, #76]	; (8001158 <HAL_InitTick+0xa8>)
 800110a:	fba2 2303 	umull	r2, r3, r2, r3
 800110e:	0c9b      	lsrs	r3, r3, #18
 8001110:	3b01      	subs	r3, #1
 8001112:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM9 */
  htim9.Instance = TIM9;
 8001114:	4b11      	ldr	r3, [pc, #68]	; (800115c <HAL_InitTick+0xac>)
 8001116:	4a12      	ldr	r2, [pc, #72]	; (8001160 <HAL_InitTick+0xb0>)
 8001118:	601a      	str	r2, [r3, #0]
  + Period = [(TIM9CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim9.Init.Period = (1000000U / 1000U) - 1U;
 800111a:	4b10      	ldr	r3, [pc, #64]	; (800115c <HAL_InitTick+0xac>)
 800111c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001120:	60da      	str	r2, [r3, #12]
  htim9.Init.Prescaler = uwPrescalerValue;
 8001122:	4a0e      	ldr	r2, [pc, #56]	; (800115c <HAL_InitTick+0xac>)
 8001124:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001126:	6053      	str	r3, [r2, #4]
  htim9.Init.ClockDivision = 0;
 8001128:	4b0c      	ldr	r3, [pc, #48]	; (800115c <HAL_InitTick+0xac>)
 800112a:	2200      	movs	r2, #0
 800112c:	611a      	str	r2, [r3, #16]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 800112e:	4b0b      	ldr	r3, [pc, #44]	; (800115c <HAL_InitTick+0xac>)
 8001130:	2200      	movs	r2, #0
 8001132:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim9) == HAL_OK)
 8001134:	4809      	ldr	r0, [pc, #36]	; (800115c <HAL_InitTick+0xac>)
 8001136:	f001 fcca 	bl	8002ace <HAL_TIM_Base_Init>
 800113a:	4603      	mov	r3, r0
 800113c:	2b00      	cmp	r3, #0
 800113e:	d104      	bne.n	800114a <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim9);
 8001140:	4806      	ldr	r0, [pc, #24]	; (800115c <HAL_InitTick+0xac>)
 8001142:	f001 fd7b 	bl	8002c3c <HAL_TIM_Base_Start_IT>
 8001146:	4603      	mov	r3, r0
 8001148:	e000      	b.n	800114c <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 800114a:	2301      	movs	r3, #1
}
 800114c:	4618      	mov	r0, r3
 800114e:	3730      	adds	r7, #48	; 0x30
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}
 8001154:	40023800 	.word	0x40023800
 8001158:	431bde83 	.word	0x431bde83
 800115c:	20004b94 	.word	0x20004b94
 8001160:	40014000 	.word	0x40014000

08001164 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001164:	b480      	push	{r7}
 8001166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001168:	e7fe      	b.n	8001168 <NMI_Handler+0x4>

0800116a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800116a:	b480      	push	{r7}
 800116c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800116e:	e7fe      	b.n	800116e <HardFault_Handler+0x4>

08001170 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001170:	b480      	push	{r7}
 8001172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001174:	e7fe      	b.n	8001174 <MemManage_Handler+0x4>

08001176 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001176:	b480      	push	{r7}
 8001178:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800117a:	e7fe      	b.n	800117a <BusFault_Handler+0x4>

0800117c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800117c:	b480      	push	{r7}
 800117e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001180:	e7fe      	b.n	8001180 <UsageFault_Handler+0x4>

08001182 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001182:	b480      	push	{r7}
 8001184:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001186:	bf00      	nop
 8001188:	46bd      	mov	sp, r7
 800118a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118e:	4770      	bx	lr

08001190 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001194:	4803      	ldr	r0, [pc, #12]	; (80011a4 <TIM1_BRK_TIM9_IRQHandler+0x14>)
 8001196:	f001 fecc 	bl	8002f32 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim9);
 800119a:	4803      	ldr	r0, [pc, #12]	; (80011a8 <TIM1_BRK_TIM9_IRQHandler+0x18>)
 800119c:	f001 fec9 	bl	8002f32 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 80011a0:	bf00      	nop
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	20004a84 	.word	0x20004a84
 80011a8:	20004b94 	.word	0x20004b94

080011ac <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80011b0:	4802      	ldr	r0, [pc, #8]	; (80011bc <TIM3_IRQHandler+0x10>)
 80011b2:	f001 febe 	bl	8002f32 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80011b6:	bf00      	nop
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	200049b0 	.word	0x200049b0

080011c0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b086      	sub	sp, #24
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	60f8      	str	r0, [r7, #12]
 80011c8:	60b9      	str	r1, [r7, #8]
 80011ca:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011cc:	2300      	movs	r3, #0
 80011ce:	617b      	str	r3, [r7, #20]
 80011d0:	e00a      	b.n	80011e8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80011d2:	f3af 8000 	nop.w
 80011d6:	4601      	mov	r1, r0
 80011d8:	68bb      	ldr	r3, [r7, #8]
 80011da:	1c5a      	adds	r2, r3, #1
 80011dc:	60ba      	str	r2, [r7, #8]
 80011de:	b2ca      	uxtb	r2, r1
 80011e0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011e2:	697b      	ldr	r3, [r7, #20]
 80011e4:	3301      	adds	r3, #1
 80011e6:	617b      	str	r3, [r7, #20]
 80011e8:	697a      	ldr	r2, [r7, #20]
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	429a      	cmp	r2, r3
 80011ee:	dbf0      	blt.n	80011d2 <_read+0x12>
	}

return len;
 80011f0:	687b      	ldr	r3, [r7, #4]
}
 80011f2:	4618      	mov	r0, r3
 80011f4:	3718      	adds	r7, #24
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}

080011fa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80011fa:	b580      	push	{r7, lr}
 80011fc:	b086      	sub	sp, #24
 80011fe:	af00      	add	r7, sp, #0
 8001200:	60f8      	str	r0, [r7, #12]
 8001202:	60b9      	str	r1, [r7, #8]
 8001204:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001206:	2300      	movs	r3, #0
 8001208:	617b      	str	r3, [r7, #20]
 800120a:	e009      	b.n	8001220 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800120c:	68bb      	ldr	r3, [r7, #8]
 800120e:	1c5a      	adds	r2, r3, #1
 8001210:	60ba      	str	r2, [r7, #8]
 8001212:	781b      	ldrb	r3, [r3, #0]
 8001214:	4618      	mov	r0, r3
 8001216:	f7ff f957 	bl	80004c8 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800121a:	697b      	ldr	r3, [r7, #20]
 800121c:	3301      	adds	r3, #1
 800121e:	617b      	str	r3, [r7, #20]
 8001220:	697a      	ldr	r2, [r7, #20]
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	429a      	cmp	r2, r3
 8001226:	dbf1      	blt.n	800120c <_write+0x12>
	}
	return len;
 8001228:	687b      	ldr	r3, [r7, #4]
}
 800122a:	4618      	mov	r0, r3
 800122c:	3718      	adds	r7, #24
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}

08001232 <_close>:

int _close(int file)
{
 8001232:	b480      	push	{r7}
 8001234:	b083      	sub	sp, #12
 8001236:	af00      	add	r7, sp, #0
 8001238:	6078      	str	r0, [r7, #4]
	return -1;
 800123a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800123e:	4618      	mov	r0, r3
 8001240:	370c      	adds	r7, #12
 8001242:	46bd      	mov	sp, r7
 8001244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001248:	4770      	bx	lr

0800124a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800124a:	b480      	push	{r7}
 800124c:	b083      	sub	sp, #12
 800124e:	af00      	add	r7, sp, #0
 8001250:	6078      	str	r0, [r7, #4]
 8001252:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800125a:	605a      	str	r2, [r3, #4]
	return 0;
 800125c:	2300      	movs	r3, #0
}
 800125e:	4618      	mov	r0, r3
 8001260:	370c      	adds	r7, #12
 8001262:	46bd      	mov	sp, r7
 8001264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001268:	4770      	bx	lr

0800126a <_isatty>:

int _isatty(int file)
{
 800126a:	b480      	push	{r7}
 800126c:	b083      	sub	sp, #12
 800126e:	af00      	add	r7, sp, #0
 8001270:	6078      	str	r0, [r7, #4]
	return 1;
 8001272:	2301      	movs	r3, #1
}
 8001274:	4618      	mov	r0, r3
 8001276:	370c      	adds	r7, #12
 8001278:	46bd      	mov	sp, r7
 800127a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127e:	4770      	bx	lr

08001280 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001280:	b480      	push	{r7}
 8001282:	b085      	sub	sp, #20
 8001284:	af00      	add	r7, sp, #0
 8001286:	60f8      	str	r0, [r7, #12]
 8001288:	60b9      	str	r1, [r7, #8]
 800128a:	607a      	str	r2, [r7, #4]
	return 0;
 800128c:	2300      	movs	r3, #0
}
 800128e:	4618      	mov	r0, r3
 8001290:	3714      	adds	r7, #20
 8001292:	46bd      	mov	sp, r7
 8001294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001298:	4770      	bx	lr
	...

0800129c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b086      	sub	sp, #24
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80012a4:	4a14      	ldr	r2, [pc, #80]	; (80012f8 <_sbrk+0x5c>)
 80012a6:	4b15      	ldr	r3, [pc, #84]	; (80012fc <_sbrk+0x60>)
 80012a8:	1ad3      	subs	r3, r2, r3
 80012aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80012ac:	697b      	ldr	r3, [r7, #20]
 80012ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80012b0:	4b13      	ldr	r3, [pc, #76]	; (8001300 <_sbrk+0x64>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d102      	bne.n	80012be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80012b8:	4b11      	ldr	r3, [pc, #68]	; (8001300 <_sbrk+0x64>)
 80012ba:	4a12      	ldr	r2, [pc, #72]	; (8001304 <_sbrk+0x68>)
 80012bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80012be:	4b10      	ldr	r3, [pc, #64]	; (8001300 <_sbrk+0x64>)
 80012c0:	681a      	ldr	r2, [r3, #0]
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	4413      	add	r3, r2
 80012c6:	693a      	ldr	r2, [r7, #16]
 80012c8:	429a      	cmp	r2, r3
 80012ca:	d207      	bcs.n	80012dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80012cc:	f005 ff4e 	bl	800716c <__errno>
 80012d0:	4603      	mov	r3, r0
 80012d2:	220c      	movs	r2, #12
 80012d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80012d6:	f04f 33ff 	mov.w	r3, #4294967295
 80012da:	e009      	b.n	80012f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80012dc:	4b08      	ldr	r3, [pc, #32]	; (8001300 <_sbrk+0x64>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80012e2:	4b07      	ldr	r3, [pc, #28]	; (8001300 <_sbrk+0x64>)
 80012e4:	681a      	ldr	r2, [r3, #0]
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	4413      	add	r3, r2
 80012ea:	4a05      	ldr	r2, [pc, #20]	; (8001300 <_sbrk+0x64>)
 80012ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80012ee:	68fb      	ldr	r3, [r7, #12]
}
 80012f0:	4618      	mov	r0, r3
 80012f2:	3718      	adds	r7, #24
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bd80      	pop	{r7, pc}
 80012f8:	20020000 	.word	0x20020000
 80012fc:	00000400 	.word	0x00000400
 8001300:	20000090 	.word	0x20000090
 8001304:	20004c30 	.word	0x20004c30

08001308 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001308:	b480      	push	{r7}
 800130a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800130c:	4b06      	ldr	r3, [pc, #24]	; (8001328 <SystemInit+0x20>)
 800130e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001312:	4a05      	ldr	r2, [pc, #20]	; (8001328 <SystemInit+0x20>)
 8001314:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001318:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800131c:	bf00      	nop
 800131e:	46bd      	mov	sp, r7
 8001320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001324:	4770      	bx	lr
 8001326:	bf00      	nop
 8001328:	e000ed00 	.word	0xe000ed00

0800132c <start_timers>:
#include <stdint.h>
#include "peripherals.h"
#include "timer_utils.h"

void start_timers() {
 800132c:	b580      	push	{r7, lr}
 800132e:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start(&htim2);
 8001330:	4802      	ldr	r0, [pc, #8]	; (800133c <start_timers+0x10>)
 8001332:	f001 fc1b 	bl	8002b6c <HAL_TIM_Base_Start>
}
 8001336:	bf00      	nop
 8001338:	bd80      	pop	{r7, pc}
 800133a:	bf00      	nop
 800133c:	20004b24 	.word	0x20004b24

08001340 <ext_led_blink_thread>:
const osThreadAttr_t ext_led_blink_thread_attrs = {
	.name = "ext_led_blink_thread",
	.priority = (osPriority_t)osPriorityIdle
};

void ext_led_blink_thread(void* arg) {
 8001340:	b580      	push	{r7, lr}
 8001342:	b082      	sub	sp, #8
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
	while (1) {
		HAL_GPIO_TogglePin(GPIOB, CONTACTOR_Pin);
 8001348:	2102      	movs	r1, #2
 800134a:	4804      	ldr	r0, [pc, #16]	; (800135c <ext_led_blink_thread+0x1c>)
 800134c:	f000 fe77 	bl	800203e <HAL_GPIO_TogglePin>
		osDelay(1000);
 8001350:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001354:	f003 fa94 	bl	8004880 <osDelay>
		HAL_GPIO_TogglePin(GPIOB, CONTACTOR_Pin);
 8001358:	e7f6      	b.n	8001348 <ext_led_blink_thread+0x8>
 800135a:	bf00      	nop
 800135c:	40020400 	.word	0x40020400

08001360 <rtos_heartbeat_logger_thread>:

const osThreadAttr_t rtos_heartbeat_logger_thread_attrs = {
	.name = "rtos_heartbeat_logger_thread",
	.priority = (osPriority_t)osPriorityIdle
};
void rtos_heartbeat_logger_thread(void* arg) {
 8001360:	b580      	push	{r7, lr}
 8001362:	b082      	sub	sp, #8
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
	while (1) {
		printf("rtos is still running... \r\n");
 8001368:	4803      	ldr	r0, [pc, #12]	; (8001378 <rtos_heartbeat_logger_thread+0x18>)
 800136a:	f005 ffad 	bl	80072c8 <puts>
		osDelay(10000);
 800136e:	f242 7010 	movw	r0, #10000	; 0x2710
 8001372:	f003 fa85 	bl	8004880 <osDelay>
		printf("rtos is still running... \r\n");
 8001376:	e7f7      	b.n	8001368 <rtos_heartbeat_logger_thread+0x8>
 8001378:	08007c34 	.word	0x08007c34

0800137c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800137c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80013b4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001380:	480d      	ldr	r0, [pc, #52]	; (80013b8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001382:	490e      	ldr	r1, [pc, #56]	; (80013bc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001384:	4a0e      	ldr	r2, [pc, #56]	; (80013c0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001386:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001388:	e002      	b.n	8001390 <LoopCopyDataInit>

0800138a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800138a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800138c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800138e:	3304      	adds	r3, #4

08001390 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001390:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001392:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001394:	d3f9      	bcc.n	800138a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001396:	4a0b      	ldr	r2, [pc, #44]	; (80013c4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001398:	4c0b      	ldr	r4, [pc, #44]	; (80013c8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800139a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800139c:	e001      	b.n	80013a2 <LoopFillZerobss>

0800139e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800139e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013a0:	3204      	adds	r2, #4

080013a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013a4:	d3fb      	bcc.n	800139e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80013a6:	f7ff ffaf 	bl	8001308 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80013aa:	f005 fee5 	bl	8007178 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80013ae:	f7ff f8d1 	bl	8000554 <main>
  bx  lr    
 80013b2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80013b4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80013b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013bc:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80013c0:	08007d3c 	.word	0x08007d3c
  ldr r2, =_sbss
 80013c4:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80013c8:	20004c30 	.word	0x20004c30

080013cc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80013cc:	e7fe      	b.n	80013cc <ADC_IRQHandler>
	...

080013d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80013d4:	4b0e      	ldr	r3, [pc, #56]	; (8001410 <HAL_Init+0x40>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	4a0d      	ldr	r2, [pc, #52]	; (8001410 <HAL_Init+0x40>)
 80013da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80013de:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80013e0:	4b0b      	ldr	r3, [pc, #44]	; (8001410 <HAL_Init+0x40>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	4a0a      	ldr	r2, [pc, #40]	; (8001410 <HAL_Init+0x40>)
 80013e6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80013ea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013ec:	4b08      	ldr	r3, [pc, #32]	; (8001410 <HAL_Init+0x40>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	4a07      	ldr	r2, [pc, #28]	; (8001410 <HAL_Init+0x40>)
 80013f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013f6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013f8:	2003      	movs	r0, #3
 80013fa:	f000 fc36 	bl	8001c6a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013fe:	2000      	movs	r0, #0
 8001400:	f7ff fe56 	bl	80010b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001404:	f7ff fc34 	bl	8000c70 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001408:	2300      	movs	r3, #0
}
 800140a:	4618      	mov	r0, r3
 800140c:	bd80      	pop	{r7, pc}
 800140e:	bf00      	nop
 8001410:	40023c00 	.word	0x40023c00

08001414 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001414:	b480      	push	{r7}
 8001416:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001418:	4b06      	ldr	r3, [pc, #24]	; (8001434 <HAL_IncTick+0x20>)
 800141a:	781b      	ldrb	r3, [r3, #0]
 800141c:	461a      	mov	r2, r3
 800141e:	4b06      	ldr	r3, [pc, #24]	; (8001438 <HAL_IncTick+0x24>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	4413      	add	r3, r2
 8001424:	4a04      	ldr	r2, [pc, #16]	; (8001438 <HAL_IncTick+0x24>)
 8001426:	6013      	str	r3, [r2, #0]
}
 8001428:	bf00      	nop
 800142a:	46bd      	mov	sp, r7
 800142c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001430:	4770      	bx	lr
 8001432:	bf00      	nop
 8001434:	20000008 	.word	0x20000008
 8001438:	20004bdc 	.word	0x20004bdc

0800143c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800143c:	b480      	push	{r7}
 800143e:	af00      	add	r7, sp, #0
  return uwTick;
 8001440:	4b03      	ldr	r3, [pc, #12]	; (8001450 <HAL_GetTick+0x14>)
 8001442:	681b      	ldr	r3, [r3, #0]
}
 8001444:	4618      	mov	r0, r3
 8001446:	46bd      	mov	sp, r7
 8001448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144c:	4770      	bx	lr
 800144e:	bf00      	nop
 8001450:	20004bdc 	.word	0x20004bdc

08001454 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b084      	sub	sp, #16
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800145c:	2300      	movs	r3, #0
 800145e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	2b00      	cmp	r3, #0
 8001464:	d101      	bne.n	800146a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001466:	2301      	movs	r3, #1
 8001468:	e033      	b.n	80014d2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800146e:	2b00      	cmp	r3, #0
 8001470:	d109      	bne.n	8001486 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001472:	6878      	ldr	r0, [r7, #4]
 8001474:	f7ff fc28 	bl	8000cc8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	2200      	movs	r2, #0
 800147c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	2200      	movs	r2, #0
 8001482:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800148a:	f003 0310 	and.w	r3, r3, #16
 800148e:	2b00      	cmp	r3, #0
 8001490:	d118      	bne.n	80014c4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001496:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800149a:	f023 0302 	bic.w	r3, r3, #2
 800149e:	f043 0202 	orr.w	r2, r3, #2
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80014a6:	6878      	ldr	r0, [r7, #4]
 80014a8:	f000 f93a 	bl	8001720 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	2200      	movs	r2, #0
 80014b0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014b6:	f023 0303 	bic.w	r3, r3, #3
 80014ba:	f043 0201 	orr.w	r2, r3, #1
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	641a      	str	r2, [r3, #64]	; 0x40
 80014c2:	e001      	b.n	80014c8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80014c4:	2301      	movs	r3, #1
 80014c6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	2200      	movs	r2, #0
 80014cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80014d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80014d2:	4618      	mov	r0, r3
 80014d4:	3710      	adds	r7, #16
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}
	...

080014dc <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80014dc:	b480      	push	{r7}
 80014de:	b085      	sub	sp, #20
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
 80014e4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80014e6:	2300      	movs	r3, #0
 80014e8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80014f0:	2b01      	cmp	r3, #1
 80014f2:	d101      	bne.n	80014f8 <HAL_ADC_ConfigChannel+0x1c>
 80014f4:	2302      	movs	r3, #2
 80014f6:	e105      	b.n	8001704 <HAL_ADC_ConfigChannel+0x228>
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	2201      	movs	r2, #1
 80014fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	2b09      	cmp	r3, #9
 8001506:	d925      	bls.n	8001554 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	68d9      	ldr	r1, [r3, #12]
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	b29b      	uxth	r3, r3
 8001514:	461a      	mov	r2, r3
 8001516:	4613      	mov	r3, r2
 8001518:	005b      	lsls	r3, r3, #1
 800151a:	4413      	add	r3, r2
 800151c:	3b1e      	subs	r3, #30
 800151e:	2207      	movs	r2, #7
 8001520:	fa02 f303 	lsl.w	r3, r2, r3
 8001524:	43da      	mvns	r2, r3
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	400a      	ands	r2, r1
 800152c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	68d9      	ldr	r1, [r3, #12]
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	689a      	ldr	r2, [r3, #8]
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	b29b      	uxth	r3, r3
 800153e:	4618      	mov	r0, r3
 8001540:	4603      	mov	r3, r0
 8001542:	005b      	lsls	r3, r3, #1
 8001544:	4403      	add	r3, r0
 8001546:	3b1e      	subs	r3, #30
 8001548:	409a      	lsls	r2, r3
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	430a      	orrs	r2, r1
 8001550:	60da      	str	r2, [r3, #12]
 8001552:	e022      	b.n	800159a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	6919      	ldr	r1, [r3, #16]
 800155a:	683b      	ldr	r3, [r7, #0]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	b29b      	uxth	r3, r3
 8001560:	461a      	mov	r2, r3
 8001562:	4613      	mov	r3, r2
 8001564:	005b      	lsls	r3, r3, #1
 8001566:	4413      	add	r3, r2
 8001568:	2207      	movs	r2, #7
 800156a:	fa02 f303 	lsl.w	r3, r2, r3
 800156e:	43da      	mvns	r2, r3
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	400a      	ands	r2, r1
 8001576:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	6919      	ldr	r1, [r3, #16]
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	689a      	ldr	r2, [r3, #8]
 8001582:	683b      	ldr	r3, [r7, #0]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	b29b      	uxth	r3, r3
 8001588:	4618      	mov	r0, r3
 800158a:	4603      	mov	r3, r0
 800158c:	005b      	lsls	r3, r3, #1
 800158e:	4403      	add	r3, r0
 8001590:	409a      	lsls	r2, r3
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	430a      	orrs	r2, r1
 8001598:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	685b      	ldr	r3, [r3, #4]
 800159e:	2b06      	cmp	r3, #6
 80015a0:	d824      	bhi.n	80015ec <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	685a      	ldr	r2, [r3, #4]
 80015ac:	4613      	mov	r3, r2
 80015ae:	009b      	lsls	r3, r3, #2
 80015b0:	4413      	add	r3, r2
 80015b2:	3b05      	subs	r3, #5
 80015b4:	221f      	movs	r2, #31
 80015b6:	fa02 f303 	lsl.w	r3, r2, r3
 80015ba:	43da      	mvns	r2, r3
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	400a      	ands	r2, r1
 80015c2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	b29b      	uxth	r3, r3
 80015d0:	4618      	mov	r0, r3
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	685a      	ldr	r2, [r3, #4]
 80015d6:	4613      	mov	r3, r2
 80015d8:	009b      	lsls	r3, r3, #2
 80015da:	4413      	add	r3, r2
 80015dc:	3b05      	subs	r3, #5
 80015de:	fa00 f203 	lsl.w	r2, r0, r3
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	430a      	orrs	r2, r1
 80015e8:	635a      	str	r2, [r3, #52]	; 0x34
 80015ea:	e04c      	b.n	8001686 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	2b0c      	cmp	r3, #12
 80015f2:	d824      	bhi.n	800163e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80015fa:	683b      	ldr	r3, [r7, #0]
 80015fc:	685a      	ldr	r2, [r3, #4]
 80015fe:	4613      	mov	r3, r2
 8001600:	009b      	lsls	r3, r3, #2
 8001602:	4413      	add	r3, r2
 8001604:	3b23      	subs	r3, #35	; 0x23
 8001606:	221f      	movs	r2, #31
 8001608:	fa02 f303 	lsl.w	r3, r2, r3
 800160c:	43da      	mvns	r2, r3
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	400a      	ands	r2, r1
 8001614:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	b29b      	uxth	r3, r3
 8001622:	4618      	mov	r0, r3
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	685a      	ldr	r2, [r3, #4]
 8001628:	4613      	mov	r3, r2
 800162a:	009b      	lsls	r3, r3, #2
 800162c:	4413      	add	r3, r2
 800162e:	3b23      	subs	r3, #35	; 0x23
 8001630:	fa00 f203 	lsl.w	r2, r0, r3
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	430a      	orrs	r2, r1
 800163a:	631a      	str	r2, [r3, #48]	; 0x30
 800163c:	e023      	b.n	8001686 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	685a      	ldr	r2, [r3, #4]
 8001648:	4613      	mov	r3, r2
 800164a:	009b      	lsls	r3, r3, #2
 800164c:	4413      	add	r3, r2
 800164e:	3b41      	subs	r3, #65	; 0x41
 8001650:	221f      	movs	r2, #31
 8001652:	fa02 f303 	lsl.w	r3, r2, r3
 8001656:	43da      	mvns	r2, r3
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	400a      	ands	r2, r1
 800165e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	b29b      	uxth	r3, r3
 800166c:	4618      	mov	r0, r3
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	685a      	ldr	r2, [r3, #4]
 8001672:	4613      	mov	r3, r2
 8001674:	009b      	lsls	r3, r3, #2
 8001676:	4413      	add	r3, r2
 8001678:	3b41      	subs	r3, #65	; 0x41
 800167a:	fa00 f203 	lsl.w	r2, r0, r3
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	430a      	orrs	r2, r1
 8001684:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001686:	4b22      	ldr	r3, [pc, #136]	; (8001710 <HAL_ADC_ConfigChannel+0x234>)
 8001688:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	4a21      	ldr	r2, [pc, #132]	; (8001714 <HAL_ADC_ConfigChannel+0x238>)
 8001690:	4293      	cmp	r3, r2
 8001692:	d109      	bne.n	80016a8 <HAL_ADC_ConfigChannel+0x1cc>
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	2b12      	cmp	r3, #18
 800169a:	d105      	bne.n	80016a8 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	685b      	ldr	r3, [r3, #4]
 80016a0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	4a19      	ldr	r2, [pc, #100]	; (8001714 <HAL_ADC_ConfigChannel+0x238>)
 80016ae:	4293      	cmp	r3, r2
 80016b0:	d123      	bne.n	80016fa <HAL_ADC_ConfigChannel+0x21e>
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	2b10      	cmp	r3, #16
 80016b8:	d003      	beq.n	80016c2 <HAL_ADC_ConfigChannel+0x1e6>
 80016ba:	683b      	ldr	r3, [r7, #0]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	2b11      	cmp	r3, #17
 80016c0:	d11b      	bne.n	80016fa <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	685b      	ldr	r3, [r3, #4]
 80016c6:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	2b10      	cmp	r3, #16
 80016d4:	d111      	bne.n	80016fa <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80016d6:	4b10      	ldr	r3, [pc, #64]	; (8001718 <HAL_ADC_ConfigChannel+0x23c>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	4a10      	ldr	r2, [pc, #64]	; (800171c <HAL_ADC_ConfigChannel+0x240>)
 80016dc:	fba2 2303 	umull	r2, r3, r2, r3
 80016e0:	0c9a      	lsrs	r2, r3, #18
 80016e2:	4613      	mov	r3, r2
 80016e4:	009b      	lsls	r3, r3, #2
 80016e6:	4413      	add	r3, r2
 80016e8:	005b      	lsls	r3, r3, #1
 80016ea:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80016ec:	e002      	b.n	80016f4 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80016ee:	68bb      	ldr	r3, [r7, #8]
 80016f0:	3b01      	subs	r3, #1
 80016f2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80016f4:	68bb      	ldr	r3, [r7, #8]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d1f9      	bne.n	80016ee <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	2200      	movs	r2, #0
 80016fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001702:	2300      	movs	r3, #0
}
 8001704:	4618      	mov	r0, r3
 8001706:	3714      	adds	r7, #20
 8001708:	46bd      	mov	sp, r7
 800170a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170e:	4770      	bx	lr
 8001710:	40012300 	.word	0x40012300
 8001714:	40012000 	.word	0x40012000
 8001718:	20000000 	.word	0x20000000
 800171c:	431bde83 	.word	0x431bde83

08001720 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001720:	b480      	push	{r7}
 8001722:	b085      	sub	sp, #20
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001728:	4b79      	ldr	r3, [pc, #484]	; (8001910 <ADC_Init+0x1f0>)
 800172a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	685b      	ldr	r3, [r3, #4]
 8001730:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	685a      	ldr	r2, [r3, #4]
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	685b      	ldr	r3, [r3, #4]
 8001740:	431a      	orrs	r2, r3
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	685a      	ldr	r2, [r3, #4]
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001754:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	6859      	ldr	r1, [r3, #4]
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	691b      	ldr	r3, [r3, #16]
 8001760:	021a      	lsls	r2, r3, #8
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	430a      	orrs	r2, r1
 8001768:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	685a      	ldr	r2, [r3, #4]
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001778:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	6859      	ldr	r1, [r3, #4]
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	689a      	ldr	r2, [r3, #8]
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	430a      	orrs	r2, r1
 800178a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	689a      	ldr	r2, [r3, #8]
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800179a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	6899      	ldr	r1, [r3, #8]
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	68da      	ldr	r2, [r3, #12]
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	430a      	orrs	r2, r1
 80017ac:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017b2:	4a58      	ldr	r2, [pc, #352]	; (8001914 <ADC_Init+0x1f4>)
 80017b4:	4293      	cmp	r3, r2
 80017b6:	d022      	beq.n	80017fe <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	689a      	ldr	r2, [r3, #8]
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80017c6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	6899      	ldr	r1, [r3, #8]
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	430a      	orrs	r2, r1
 80017d8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	689a      	ldr	r2, [r3, #8]
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80017e8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	6899      	ldr	r1, [r3, #8]
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	430a      	orrs	r2, r1
 80017fa:	609a      	str	r2, [r3, #8]
 80017fc:	e00f      	b.n	800181e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	689a      	ldr	r2, [r3, #8]
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800180c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	689a      	ldr	r2, [r3, #8]
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800181c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	689a      	ldr	r2, [r3, #8]
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f022 0202 	bic.w	r2, r2, #2
 800182c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	6899      	ldr	r1, [r3, #8]
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	7e1b      	ldrb	r3, [r3, #24]
 8001838:	005a      	lsls	r2, r3, #1
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	430a      	orrs	r2, r1
 8001840:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001848:	2b00      	cmp	r3, #0
 800184a:	d01b      	beq.n	8001884 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	685a      	ldr	r2, [r3, #4]
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800185a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	685a      	ldr	r2, [r3, #4]
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800186a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	6859      	ldr	r1, [r3, #4]
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001876:	3b01      	subs	r3, #1
 8001878:	035a      	lsls	r2, r3, #13
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	430a      	orrs	r2, r1
 8001880:	605a      	str	r2, [r3, #4]
 8001882:	e007      	b.n	8001894 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	685a      	ldr	r2, [r3, #4]
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001892:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80018a2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	69db      	ldr	r3, [r3, #28]
 80018ae:	3b01      	subs	r3, #1
 80018b0:	051a      	lsls	r2, r3, #20
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	430a      	orrs	r2, r1
 80018b8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	689a      	ldr	r2, [r3, #8]
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80018c8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	6899      	ldr	r1, [r3, #8]
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80018d6:	025a      	lsls	r2, r3, #9
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	430a      	orrs	r2, r1
 80018de:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	689a      	ldr	r2, [r3, #8]
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80018ee:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	6899      	ldr	r1, [r3, #8]
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	695b      	ldr	r3, [r3, #20]
 80018fa:	029a      	lsls	r2, r3, #10
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	430a      	orrs	r2, r1
 8001902:	609a      	str	r2, [r3, #8]
}
 8001904:	bf00      	nop
 8001906:	3714      	adds	r7, #20
 8001908:	46bd      	mov	sp, r7
 800190a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190e:	4770      	bx	lr
 8001910:	40012300 	.word	0x40012300
 8001914:	0f000001 	.word	0x0f000001

08001918 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b084      	sub	sp, #16
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	2b00      	cmp	r3, #0
 8001924:	d101      	bne.n	800192a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001926:	2301      	movs	r3, #1
 8001928:	e0ed      	b.n	8001b06 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001930:	b2db      	uxtb	r3, r3
 8001932:	2b00      	cmp	r3, #0
 8001934:	d102      	bne.n	800193c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001936:	6878      	ldr	r0, [r7, #4]
 8001938:	f7ff fa26 	bl	8000d88 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	681a      	ldr	r2, [r3, #0]
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f022 0202 	bic.w	r2, r2, #2
 800194a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800194c:	f7ff fd76 	bl	800143c <HAL_GetTick>
 8001950:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001952:	e012      	b.n	800197a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001954:	f7ff fd72 	bl	800143c <HAL_GetTick>
 8001958:	4602      	mov	r2, r0
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	1ad3      	subs	r3, r2, r3
 800195e:	2b0a      	cmp	r3, #10
 8001960:	d90b      	bls.n	800197a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001966:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	2205      	movs	r2, #5
 8001972:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001976:	2301      	movs	r3, #1
 8001978:	e0c5      	b.n	8001b06 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	f003 0302 	and.w	r3, r3, #2
 8001984:	2b00      	cmp	r3, #0
 8001986:	d1e5      	bne.n	8001954 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	681a      	ldr	r2, [r3, #0]
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f042 0201 	orr.w	r2, r2, #1
 8001996:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001998:	f7ff fd50 	bl	800143c <HAL_GetTick>
 800199c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800199e:	e012      	b.n	80019c6 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80019a0:	f7ff fd4c 	bl	800143c <HAL_GetTick>
 80019a4:	4602      	mov	r2, r0
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	1ad3      	subs	r3, r2, r3
 80019aa:	2b0a      	cmp	r3, #10
 80019ac:	d90b      	bls.n	80019c6 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019b2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	2205      	movs	r2, #5
 80019be:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80019c2:	2301      	movs	r3, #1
 80019c4:	e09f      	b.n	8001b06 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	685b      	ldr	r3, [r3, #4]
 80019cc:	f003 0301 	and.w	r3, r3, #1
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d0e5      	beq.n	80019a0 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	7e1b      	ldrb	r3, [r3, #24]
 80019d8:	2b01      	cmp	r3, #1
 80019da:	d108      	bne.n	80019ee <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	681a      	ldr	r2, [r3, #0]
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80019ea:	601a      	str	r2, [r3, #0]
 80019ec:	e007      	b.n	80019fe <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	681a      	ldr	r2, [r3, #0]
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80019fc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	7e5b      	ldrb	r3, [r3, #25]
 8001a02:	2b01      	cmp	r3, #1
 8001a04:	d108      	bne.n	8001a18 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	681a      	ldr	r2, [r3, #0]
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001a14:	601a      	str	r2, [r3, #0]
 8001a16:	e007      	b.n	8001a28 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	681a      	ldr	r2, [r3, #0]
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001a26:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	7e9b      	ldrb	r3, [r3, #26]
 8001a2c:	2b01      	cmp	r3, #1
 8001a2e:	d108      	bne.n	8001a42 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	681a      	ldr	r2, [r3, #0]
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f042 0220 	orr.w	r2, r2, #32
 8001a3e:	601a      	str	r2, [r3, #0]
 8001a40:	e007      	b.n	8001a52 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	681a      	ldr	r2, [r3, #0]
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f022 0220 	bic.w	r2, r2, #32
 8001a50:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	7edb      	ldrb	r3, [r3, #27]
 8001a56:	2b01      	cmp	r3, #1
 8001a58:	d108      	bne.n	8001a6c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	681a      	ldr	r2, [r3, #0]
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f022 0210 	bic.w	r2, r2, #16
 8001a68:	601a      	str	r2, [r3, #0]
 8001a6a:	e007      	b.n	8001a7c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	681a      	ldr	r2, [r3, #0]
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f042 0210 	orr.w	r2, r2, #16
 8001a7a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	7f1b      	ldrb	r3, [r3, #28]
 8001a80:	2b01      	cmp	r3, #1
 8001a82:	d108      	bne.n	8001a96 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	681a      	ldr	r2, [r3, #0]
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f042 0208 	orr.w	r2, r2, #8
 8001a92:	601a      	str	r2, [r3, #0]
 8001a94:	e007      	b.n	8001aa6 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	681a      	ldr	r2, [r3, #0]
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f022 0208 	bic.w	r2, r2, #8
 8001aa4:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	7f5b      	ldrb	r3, [r3, #29]
 8001aaa:	2b01      	cmp	r3, #1
 8001aac:	d108      	bne.n	8001ac0 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	681a      	ldr	r2, [r3, #0]
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f042 0204 	orr.w	r2, r2, #4
 8001abc:	601a      	str	r2, [r3, #0]
 8001abe:	e007      	b.n	8001ad0 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	681a      	ldr	r2, [r3, #0]
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f022 0204 	bic.w	r2, r2, #4
 8001ace:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	689a      	ldr	r2, [r3, #8]
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	68db      	ldr	r3, [r3, #12]
 8001ad8:	431a      	orrs	r2, r3
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	691b      	ldr	r3, [r3, #16]
 8001ade:	431a      	orrs	r2, r3
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	695b      	ldr	r3, [r3, #20]
 8001ae4:	ea42 0103 	orr.w	r1, r2, r3
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	1e5a      	subs	r2, r3, #1
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	430a      	orrs	r2, r1
 8001af4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	2200      	movs	r2, #0
 8001afa:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	2201      	movs	r2, #1
 8001b00:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001b04:	2300      	movs	r3, #0
}
 8001b06:	4618      	mov	r0, r3
 8001b08:	3710      	adds	r7, #16
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bd80      	pop	{r7, pc}
	...

08001b10 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b10:	b480      	push	{r7}
 8001b12:	b085      	sub	sp, #20
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	f003 0307 	and.w	r3, r3, #7
 8001b1e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b20:	4b0c      	ldr	r3, [pc, #48]	; (8001b54 <__NVIC_SetPriorityGrouping+0x44>)
 8001b22:	68db      	ldr	r3, [r3, #12]
 8001b24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b26:	68ba      	ldr	r2, [r7, #8]
 8001b28:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b2c:	4013      	ands	r3, r2
 8001b2e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b34:	68bb      	ldr	r3, [r7, #8]
 8001b36:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b38:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b42:	4a04      	ldr	r2, [pc, #16]	; (8001b54 <__NVIC_SetPriorityGrouping+0x44>)
 8001b44:	68bb      	ldr	r3, [r7, #8]
 8001b46:	60d3      	str	r3, [r2, #12]
}
 8001b48:	bf00      	nop
 8001b4a:	3714      	adds	r7, #20
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b52:	4770      	bx	lr
 8001b54:	e000ed00 	.word	0xe000ed00

08001b58 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b5c:	4b04      	ldr	r3, [pc, #16]	; (8001b70 <__NVIC_GetPriorityGrouping+0x18>)
 8001b5e:	68db      	ldr	r3, [r3, #12]
 8001b60:	0a1b      	lsrs	r3, r3, #8
 8001b62:	f003 0307 	and.w	r3, r3, #7
}
 8001b66:	4618      	mov	r0, r3
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6e:	4770      	bx	lr
 8001b70:	e000ed00 	.word	0xe000ed00

08001b74 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b74:	b480      	push	{r7}
 8001b76:	b083      	sub	sp, #12
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	db0b      	blt.n	8001b9e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b86:	79fb      	ldrb	r3, [r7, #7]
 8001b88:	f003 021f 	and.w	r2, r3, #31
 8001b8c:	4907      	ldr	r1, [pc, #28]	; (8001bac <__NVIC_EnableIRQ+0x38>)
 8001b8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b92:	095b      	lsrs	r3, r3, #5
 8001b94:	2001      	movs	r0, #1
 8001b96:	fa00 f202 	lsl.w	r2, r0, r2
 8001b9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001b9e:	bf00      	nop
 8001ba0:	370c      	adds	r7, #12
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba8:	4770      	bx	lr
 8001baa:	bf00      	nop
 8001bac:	e000e100 	.word	0xe000e100

08001bb0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	b083      	sub	sp, #12
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	6039      	str	r1, [r7, #0]
 8001bba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	db0a      	blt.n	8001bda <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	b2da      	uxtb	r2, r3
 8001bc8:	490c      	ldr	r1, [pc, #48]	; (8001bfc <__NVIC_SetPriority+0x4c>)
 8001bca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bce:	0112      	lsls	r2, r2, #4
 8001bd0:	b2d2      	uxtb	r2, r2
 8001bd2:	440b      	add	r3, r1
 8001bd4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001bd8:	e00a      	b.n	8001bf0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	b2da      	uxtb	r2, r3
 8001bde:	4908      	ldr	r1, [pc, #32]	; (8001c00 <__NVIC_SetPriority+0x50>)
 8001be0:	79fb      	ldrb	r3, [r7, #7]
 8001be2:	f003 030f 	and.w	r3, r3, #15
 8001be6:	3b04      	subs	r3, #4
 8001be8:	0112      	lsls	r2, r2, #4
 8001bea:	b2d2      	uxtb	r2, r2
 8001bec:	440b      	add	r3, r1
 8001bee:	761a      	strb	r2, [r3, #24]
}
 8001bf0:	bf00      	nop
 8001bf2:	370c      	adds	r7, #12
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfa:	4770      	bx	lr
 8001bfc:	e000e100 	.word	0xe000e100
 8001c00:	e000ed00 	.word	0xe000ed00

08001c04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c04:	b480      	push	{r7}
 8001c06:	b089      	sub	sp, #36	; 0x24
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	60f8      	str	r0, [r7, #12]
 8001c0c:	60b9      	str	r1, [r7, #8]
 8001c0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	f003 0307 	and.w	r3, r3, #7
 8001c16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c18:	69fb      	ldr	r3, [r7, #28]
 8001c1a:	f1c3 0307 	rsb	r3, r3, #7
 8001c1e:	2b04      	cmp	r3, #4
 8001c20:	bf28      	it	cs
 8001c22:	2304      	movcs	r3, #4
 8001c24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c26:	69fb      	ldr	r3, [r7, #28]
 8001c28:	3304      	adds	r3, #4
 8001c2a:	2b06      	cmp	r3, #6
 8001c2c:	d902      	bls.n	8001c34 <NVIC_EncodePriority+0x30>
 8001c2e:	69fb      	ldr	r3, [r7, #28]
 8001c30:	3b03      	subs	r3, #3
 8001c32:	e000      	b.n	8001c36 <NVIC_EncodePriority+0x32>
 8001c34:	2300      	movs	r3, #0
 8001c36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c38:	f04f 32ff 	mov.w	r2, #4294967295
 8001c3c:	69bb      	ldr	r3, [r7, #24]
 8001c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c42:	43da      	mvns	r2, r3
 8001c44:	68bb      	ldr	r3, [r7, #8]
 8001c46:	401a      	ands	r2, r3
 8001c48:	697b      	ldr	r3, [r7, #20]
 8001c4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c4c:	f04f 31ff 	mov.w	r1, #4294967295
 8001c50:	697b      	ldr	r3, [r7, #20]
 8001c52:	fa01 f303 	lsl.w	r3, r1, r3
 8001c56:	43d9      	mvns	r1, r3
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c5c:	4313      	orrs	r3, r2
         );
}
 8001c5e:	4618      	mov	r0, r3
 8001c60:	3724      	adds	r7, #36	; 0x24
 8001c62:	46bd      	mov	sp, r7
 8001c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c68:	4770      	bx	lr

08001c6a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c6a:	b580      	push	{r7, lr}
 8001c6c:	b082      	sub	sp, #8
 8001c6e:	af00      	add	r7, sp, #0
 8001c70:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c72:	6878      	ldr	r0, [r7, #4]
 8001c74:	f7ff ff4c 	bl	8001b10 <__NVIC_SetPriorityGrouping>
}
 8001c78:	bf00      	nop
 8001c7a:	3708      	adds	r7, #8
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	bd80      	pop	{r7, pc}

08001c80 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b086      	sub	sp, #24
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	4603      	mov	r3, r0
 8001c88:	60b9      	str	r1, [r7, #8]
 8001c8a:	607a      	str	r2, [r7, #4]
 8001c8c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c92:	f7ff ff61 	bl	8001b58 <__NVIC_GetPriorityGrouping>
 8001c96:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c98:	687a      	ldr	r2, [r7, #4]
 8001c9a:	68b9      	ldr	r1, [r7, #8]
 8001c9c:	6978      	ldr	r0, [r7, #20]
 8001c9e:	f7ff ffb1 	bl	8001c04 <NVIC_EncodePriority>
 8001ca2:	4602      	mov	r2, r0
 8001ca4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ca8:	4611      	mov	r1, r2
 8001caa:	4618      	mov	r0, r3
 8001cac:	f7ff ff80 	bl	8001bb0 <__NVIC_SetPriority>
}
 8001cb0:	bf00      	nop
 8001cb2:	3718      	adds	r7, #24
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bd80      	pop	{r7, pc}

08001cb8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b082      	sub	sp, #8
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001cc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	f7ff ff54 	bl	8001b74 <__NVIC_EnableIRQ>
}
 8001ccc:	bf00      	nop
 8001cce:	3708      	adds	r7, #8
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	bd80      	pop	{r7, pc}

08001cd4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	b089      	sub	sp, #36	; 0x24
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
 8001cdc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001cea:	2300      	movs	r3, #0
 8001cec:	61fb      	str	r3, [r7, #28]
 8001cee:	e16b      	b.n	8001fc8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001cf0:	2201      	movs	r2, #1
 8001cf2:	69fb      	ldr	r3, [r7, #28]
 8001cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	697a      	ldr	r2, [r7, #20]
 8001d00:	4013      	ands	r3, r2
 8001d02:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001d04:	693a      	ldr	r2, [r7, #16]
 8001d06:	697b      	ldr	r3, [r7, #20]
 8001d08:	429a      	cmp	r2, r3
 8001d0a:	f040 815a 	bne.w	8001fc2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	f003 0303 	and.w	r3, r3, #3
 8001d16:	2b01      	cmp	r3, #1
 8001d18:	d005      	beq.n	8001d26 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	685b      	ldr	r3, [r3, #4]
 8001d1e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d22:	2b02      	cmp	r3, #2
 8001d24:	d130      	bne.n	8001d88 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	689b      	ldr	r3, [r3, #8]
 8001d2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001d2c:	69fb      	ldr	r3, [r7, #28]
 8001d2e:	005b      	lsls	r3, r3, #1
 8001d30:	2203      	movs	r2, #3
 8001d32:	fa02 f303 	lsl.w	r3, r2, r3
 8001d36:	43db      	mvns	r3, r3
 8001d38:	69ba      	ldr	r2, [r7, #24]
 8001d3a:	4013      	ands	r3, r2
 8001d3c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	68da      	ldr	r2, [r3, #12]
 8001d42:	69fb      	ldr	r3, [r7, #28]
 8001d44:	005b      	lsls	r3, r3, #1
 8001d46:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4a:	69ba      	ldr	r2, [r7, #24]
 8001d4c:	4313      	orrs	r3, r2
 8001d4e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	69ba      	ldr	r2, [r7, #24]
 8001d54:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d5c:	2201      	movs	r2, #1
 8001d5e:	69fb      	ldr	r3, [r7, #28]
 8001d60:	fa02 f303 	lsl.w	r3, r2, r3
 8001d64:	43db      	mvns	r3, r3
 8001d66:	69ba      	ldr	r2, [r7, #24]
 8001d68:	4013      	ands	r3, r2
 8001d6a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	091b      	lsrs	r3, r3, #4
 8001d72:	f003 0201 	and.w	r2, r3, #1
 8001d76:	69fb      	ldr	r3, [r7, #28]
 8001d78:	fa02 f303 	lsl.w	r3, r2, r3
 8001d7c:	69ba      	ldr	r2, [r7, #24]
 8001d7e:	4313      	orrs	r3, r2
 8001d80:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	69ba      	ldr	r2, [r7, #24]
 8001d86:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	f003 0303 	and.w	r3, r3, #3
 8001d90:	2b03      	cmp	r3, #3
 8001d92:	d017      	beq.n	8001dc4 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	68db      	ldr	r3, [r3, #12]
 8001d98:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001d9a:	69fb      	ldr	r3, [r7, #28]
 8001d9c:	005b      	lsls	r3, r3, #1
 8001d9e:	2203      	movs	r2, #3
 8001da0:	fa02 f303 	lsl.w	r3, r2, r3
 8001da4:	43db      	mvns	r3, r3
 8001da6:	69ba      	ldr	r2, [r7, #24]
 8001da8:	4013      	ands	r3, r2
 8001daa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	689a      	ldr	r2, [r3, #8]
 8001db0:	69fb      	ldr	r3, [r7, #28]
 8001db2:	005b      	lsls	r3, r3, #1
 8001db4:	fa02 f303 	lsl.w	r3, r2, r3
 8001db8:	69ba      	ldr	r2, [r7, #24]
 8001dba:	4313      	orrs	r3, r2
 8001dbc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	69ba      	ldr	r2, [r7, #24]
 8001dc2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	f003 0303 	and.w	r3, r3, #3
 8001dcc:	2b02      	cmp	r3, #2
 8001dce:	d123      	bne.n	8001e18 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001dd0:	69fb      	ldr	r3, [r7, #28]
 8001dd2:	08da      	lsrs	r2, r3, #3
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	3208      	adds	r2, #8
 8001dd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ddc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001dde:	69fb      	ldr	r3, [r7, #28]
 8001de0:	f003 0307 	and.w	r3, r3, #7
 8001de4:	009b      	lsls	r3, r3, #2
 8001de6:	220f      	movs	r2, #15
 8001de8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dec:	43db      	mvns	r3, r3
 8001dee:	69ba      	ldr	r2, [r7, #24]
 8001df0:	4013      	ands	r3, r2
 8001df2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	691a      	ldr	r2, [r3, #16]
 8001df8:	69fb      	ldr	r3, [r7, #28]
 8001dfa:	f003 0307 	and.w	r3, r3, #7
 8001dfe:	009b      	lsls	r3, r3, #2
 8001e00:	fa02 f303 	lsl.w	r3, r2, r3
 8001e04:	69ba      	ldr	r2, [r7, #24]
 8001e06:	4313      	orrs	r3, r2
 8001e08:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001e0a:	69fb      	ldr	r3, [r7, #28]
 8001e0c:	08da      	lsrs	r2, r3, #3
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	3208      	adds	r2, #8
 8001e12:	69b9      	ldr	r1, [r7, #24]
 8001e14:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001e1e:	69fb      	ldr	r3, [r7, #28]
 8001e20:	005b      	lsls	r3, r3, #1
 8001e22:	2203      	movs	r2, #3
 8001e24:	fa02 f303 	lsl.w	r3, r2, r3
 8001e28:	43db      	mvns	r3, r3
 8001e2a:	69ba      	ldr	r2, [r7, #24]
 8001e2c:	4013      	ands	r3, r2
 8001e2e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	f003 0203 	and.w	r2, r3, #3
 8001e38:	69fb      	ldr	r3, [r7, #28]
 8001e3a:	005b      	lsls	r3, r3, #1
 8001e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e40:	69ba      	ldr	r2, [r7, #24]
 8001e42:	4313      	orrs	r3, r2
 8001e44:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	69ba      	ldr	r2, [r7, #24]
 8001e4a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	f000 80b4 	beq.w	8001fc2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	60fb      	str	r3, [r7, #12]
 8001e5e:	4b60      	ldr	r3, [pc, #384]	; (8001fe0 <HAL_GPIO_Init+0x30c>)
 8001e60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e62:	4a5f      	ldr	r2, [pc, #380]	; (8001fe0 <HAL_GPIO_Init+0x30c>)
 8001e64:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e68:	6453      	str	r3, [r2, #68]	; 0x44
 8001e6a:	4b5d      	ldr	r3, [pc, #372]	; (8001fe0 <HAL_GPIO_Init+0x30c>)
 8001e6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e72:	60fb      	str	r3, [r7, #12]
 8001e74:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e76:	4a5b      	ldr	r2, [pc, #364]	; (8001fe4 <HAL_GPIO_Init+0x310>)
 8001e78:	69fb      	ldr	r3, [r7, #28]
 8001e7a:	089b      	lsrs	r3, r3, #2
 8001e7c:	3302      	adds	r3, #2
 8001e7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e82:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001e84:	69fb      	ldr	r3, [r7, #28]
 8001e86:	f003 0303 	and.w	r3, r3, #3
 8001e8a:	009b      	lsls	r3, r3, #2
 8001e8c:	220f      	movs	r2, #15
 8001e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e92:	43db      	mvns	r3, r3
 8001e94:	69ba      	ldr	r2, [r7, #24]
 8001e96:	4013      	ands	r3, r2
 8001e98:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	4a52      	ldr	r2, [pc, #328]	; (8001fe8 <HAL_GPIO_Init+0x314>)
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d02b      	beq.n	8001efa <HAL_GPIO_Init+0x226>
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	4a51      	ldr	r2, [pc, #324]	; (8001fec <HAL_GPIO_Init+0x318>)
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d025      	beq.n	8001ef6 <HAL_GPIO_Init+0x222>
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	4a50      	ldr	r2, [pc, #320]	; (8001ff0 <HAL_GPIO_Init+0x31c>)
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d01f      	beq.n	8001ef2 <HAL_GPIO_Init+0x21e>
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	4a4f      	ldr	r2, [pc, #316]	; (8001ff4 <HAL_GPIO_Init+0x320>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d019      	beq.n	8001eee <HAL_GPIO_Init+0x21a>
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	4a4e      	ldr	r2, [pc, #312]	; (8001ff8 <HAL_GPIO_Init+0x324>)
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d013      	beq.n	8001eea <HAL_GPIO_Init+0x216>
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	4a4d      	ldr	r2, [pc, #308]	; (8001ffc <HAL_GPIO_Init+0x328>)
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d00d      	beq.n	8001ee6 <HAL_GPIO_Init+0x212>
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	4a4c      	ldr	r2, [pc, #304]	; (8002000 <HAL_GPIO_Init+0x32c>)
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d007      	beq.n	8001ee2 <HAL_GPIO_Init+0x20e>
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	4a4b      	ldr	r2, [pc, #300]	; (8002004 <HAL_GPIO_Init+0x330>)
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d101      	bne.n	8001ede <HAL_GPIO_Init+0x20a>
 8001eda:	2307      	movs	r3, #7
 8001edc:	e00e      	b.n	8001efc <HAL_GPIO_Init+0x228>
 8001ede:	2308      	movs	r3, #8
 8001ee0:	e00c      	b.n	8001efc <HAL_GPIO_Init+0x228>
 8001ee2:	2306      	movs	r3, #6
 8001ee4:	e00a      	b.n	8001efc <HAL_GPIO_Init+0x228>
 8001ee6:	2305      	movs	r3, #5
 8001ee8:	e008      	b.n	8001efc <HAL_GPIO_Init+0x228>
 8001eea:	2304      	movs	r3, #4
 8001eec:	e006      	b.n	8001efc <HAL_GPIO_Init+0x228>
 8001eee:	2303      	movs	r3, #3
 8001ef0:	e004      	b.n	8001efc <HAL_GPIO_Init+0x228>
 8001ef2:	2302      	movs	r3, #2
 8001ef4:	e002      	b.n	8001efc <HAL_GPIO_Init+0x228>
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	e000      	b.n	8001efc <HAL_GPIO_Init+0x228>
 8001efa:	2300      	movs	r3, #0
 8001efc:	69fa      	ldr	r2, [r7, #28]
 8001efe:	f002 0203 	and.w	r2, r2, #3
 8001f02:	0092      	lsls	r2, r2, #2
 8001f04:	4093      	lsls	r3, r2
 8001f06:	69ba      	ldr	r2, [r7, #24]
 8001f08:	4313      	orrs	r3, r2
 8001f0a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f0c:	4935      	ldr	r1, [pc, #212]	; (8001fe4 <HAL_GPIO_Init+0x310>)
 8001f0e:	69fb      	ldr	r3, [r7, #28]
 8001f10:	089b      	lsrs	r3, r3, #2
 8001f12:	3302      	adds	r3, #2
 8001f14:	69ba      	ldr	r2, [r7, #24]
 8001f16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f1a:	4b3b      	ldr	r3, [pc, #236]	; (8002008 <HAL_GPIO_Init+0x334>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f20:	693b      	ldr	r3, [r7, #16]
 8001f22:	43db      	mvns	r3, r3
 8001f24:	69ba      	ldr	r2, [r7, #24]
 8001f26:	4013      	ands	r3, r2
 8001f28:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	685b      	ldr	r3, [r3, #4]
 8001f2e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d003      	beq.n	8001f3e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001f36:	69ba      	ldr	r2, [r7, #24]
 8001f38:	693b      	ldr	r3, [r7, #16]
 8001f3a:	4313      	orrs	r3, r2
 8001f3c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001f3e:	4a32      	ldr	r2, [pc, #200]	; (8002008 <HAL_GPIO_Init+0x334>)
 8001f40:	69bb      	ldr	r3, [r7, #24]
 8001f42:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001f44:	4b30      	ldr	r3, [pc, #192]	; (8002008 <HAL_GPIO_Init+0x334>)
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f4a:	693b      	ldr	r3, [r7, #16]
 8001f4c:	43db      	mvns	r3, r3
 8001f4e:	69ba      	ldr	r2, [r7, #24]
 8001f50:	4013      	ands	r3, r2
 8001f52:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d003      	beq.n	8001f68 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001f60:	69ba      	ldr	r2, [r7, #24]
 8001f62:	693b      	ldr	r3, [r7, #16]
 8001f64:	4313      	orrs	r3, r2
 8001f66:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001f68:	4a27      	ldr	r2, [pc, #156]	; (8002008 <HAL_GPIO_Init+0x334>)
 8001f6a:	69bb      	ldr	r3, [r7, #24]
 8001f6c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f6e:	4b26      	ldr	r3, [pc, #152]	; (8002008 <HAL_GPIO_Init+0x334>)
 8001f70:	689b      	ldr	r3, [r3, #8]
 8001f72:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f74:	693b      	ldr	r3, [r7, #16]
 8001f76:	43db      	mvns	r3, r3
 8001f78:	69ba      	ldr	r2, [r7, #24]
 8001f7a:	4013      	ands	r3, r2
 8001f7c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	685b      	ldr	r3, [r3, #4]
 8001f82:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d003      	beq.n	8001f92 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001f8a:	69ba      	ldr	r2, [r7, #24]
 8001f8c:	693b      	ldr	r3, [r7, #16]
 8001f8e:	4313      	orrs	r3, r2
 8001f90:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001f92:	4a1d      	ldr	r2, [pc, #116]	; (8002008 <HAL_GPIO_Init+0x334>)
 8001f94:	69bb      	ldr	r3, [r7, #24]
 8001f96:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f98:	4b1b      	ldr	r3, [pc, #108]	; (8002008 <HAL_GPIO_Init+0x334>)
 8001f9a:	68db      	ldr	r3, [r3, #12]
 8001f9c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f9e:	693b      	ldr	r3, [r7, #16]
 8001fa0:	43db      	mvns	r3, r3
 8001fa2:	69ba      	ldr	r2, [r7, #24]
 8001fa4:	4013      	ands	r3, r2
 8001fa6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d003      	beq.n	8001fbc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001fb4:	69ba      	ldr	r2, [r7, #24]
 8001fb6:	693b      	ldr	r3, [r7, #16]
 8001fb8:	4313      	orrs	r3, r2
 8001fba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001fbc:	4a12      	ldr	r2, [pc, #72]	; (8002008 <HAL_GPIO_Init+0x334>)
 8001fbe:	69bb      	ldr	r3, [r7, #24]
 8001fc0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001fc2:	69fb      	ldr	r3, [r7, #28]
 8001fc4:	3301      	adds	r3, #1
 8001fc6:	61fb      	str	r3, [r7, #28]
 8001fc8:	69fb      	ldr	r3, [r7, #28]
 8001fca:	2b0f      	cmp	r3, #15
 8001fcc:	f67f ae90 	bls.w	8001cf0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001fd0:	bf00      	nop
 8001fd2:	bf00      	nop
 8001fd4:	3724      	adds	r7, #36	; 0x24
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fdc:	4770      	bx	lr
 8001fde:	bf00      	nop
 8001fe0:	40023800 	.word	0x40023800
 8001fe4:	40013800 	.word	0x40013800
 8001fe8:	40020000 	.word	0x40020000
 8001fec:	40020400 	.word	0x40020400
 8001ff0:	40020800 	.word	0x40020800
 8001ff4:	40020c00 	.word	0x40020c00
 8001ff8:	40021000 	.word	0x40021000
 8001ffc:	40021400 	.word	0x40021400
 8002000:	40021800 	.word	0x40021800
 8002004:	40021c00 	.word	0x40021c00
 8002008:	40013c00 	.word	0x40013c00

0800200c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800200c:	b480      	push	{r7}
 800200e:	b083      	sub	sp, #12
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
 8002014:	460b      	mov	r3, r1
 8002016:	807b      	strh	r3, [r7, #2]
 8002018:	4613      	mov	r3, r2
 800201a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800201c:	787b      	ldrb	r3, [r7, #1]
 800201e:	2b00      	cmp	r3, #0
 8002020:	d003      	beq.n	800202a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002022:	887a      	ldrh	r2, [r7, #2]
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002028:	e003      	b.n	8002032 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800202a:	887b      	ldrh	r3, [r7, #2]
 800202c:	041a      	lsls	r2, r3, #16
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	619a      	str	r2, [r3, #24]
}
 8002032:	bf00      	nop
 8002034:	370c      	adds	r7, #12
 8002036:	46bd      	mov	sp, r7
 8002038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203c:	4770      	bx	lr

0800203e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800203e:	b480      	push	{r7}
 8002040:	b085      	sub	sp, #20
 8002042:	af00      	add	r7, sp, #0
 8002044:	6078      	str	r0, [r7, #4]
 8002046:	460b      	mov	r3, r1
 8002048:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	695b      	ldr	r3, [r3, #20]
 800204e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002050:	887a      	ldrh	r2, [r7, #2]
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	4013      	ands	r3, r2
 8002056:	041a      	lsls	r2, r3, #16
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	43d9      	mvns	r1, r3
 800205c:	887b      	ldrh	r3, [r7, #2]
 800205e:	400b      	ands	r3, r1
 8002060:	431a      	orrs	r2, r3
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	619a      	str	r2, [r3, #24]
}
 8002066:	bf00      	nop
 8002068:	3714      	adds	r7, #20
 800206a:	46bd      	mov	sp, r7
 800206c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002070:	4770      	bx	lr
	...

08002074 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b086      	sub	sp, #24
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2b00      	cmp	r3, #0
 8002080:	d101      	bne.n	8002086 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002082:	2301      	movs	r3, #1
 8002084:	e264      	b.n	8002550 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f003 0301 	and.w	r3, r3, #1
 800208e:	2b00      	cmp	r3, #0
 8002090:	d075      	beq.n	800217e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002092:	4ba3      	ldr	r3, [pc, #652]	; (8002320 <HAL_RCC_OscConfig+0x2ac>)
 8002094:	689b      	ldr	r3, [r3, #8]
 8002096:	f003 030c 	and.w	r3, r3, #12
 800209a:	2b04      	cmp	r3, #4
 800209c:	d00c      	beq.n	80020b8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800209e:	4ba0      	ldr	r3, [pc, #640]	; (8002320 <HAL_RCC_OscConfig+0x2ac>)
 80020a0:	689b      	ldr	r3, [r3, #8]
 80020a2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80020a6:	2b08      	cmp	r3, #8
 80020a8:	d112      	bne.n	80020d0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80020aa:	4b9d      	ldr	r3, [pc, #628]	; (8002320 <HAL_RCC_OscConfig+0x2ac>)
 80020ac:	685b      	ldr	r3, [r3, #4]
 80020ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020b2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80020b6:	d10b      	bne.n	80020d0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020b8:	4b99      	ldr	r3, [pc, #612]	; (8002320 <HAL_RCC_OscConfig+0x2ac>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d05b      	beq.n	800217c <HAL_RCC_OscConfig+0x108>
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d157      	bne.n	800217c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80020cc:	2301      	movs	r3, #1
 80020ce:	e23f      	b.n	8002550 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	685b      	ldr	r3, [r3, #4]
 80020d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020d8:	d106      	bne.n	80020e8 <HAL_RCC_OscConfig+0x74>
 80020da:	4b91      	ldr	r3, [pc, #580]	; (8002320 <HAL_RCC_OscConfig+0x2ac>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	4a90      	ldr	r2, [pc, #576]	; (8002320 <HAL_RCC_OscConfig+0x2ac>)
 80020e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020e4:	6013      	str	r3, [r2, #0]
 80020e6:	e01d      	b.n	8002124 <HAL_RCC_OscConfig+0xb0>
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80020f0:	d10c      	bne.n	800210c <HAL_RCC_OscConfig+0x98>
 80020f2:	4b8b      	ldr	r3, [pc, #556]	; (8002320 <HAL_RCC_OscConfig+0x2ac>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	4a8a      	ldr	r2, [pc, #552]	; (8002320 <HAL_RCC_OscConfig+0x2ac>)
 80020f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80020fc:	6013      	str	r3, [r2, #0]
 80020fe:	4b88      	ldr	r3, [pc, #544]	; (8002320 <HAL_RCC_OscConfig+0x2ac>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	4a87      	ldr	r2, [pc, #540]	; (8002320 <HAL_RCC_OscConfig+0x2ac>)
 8002104:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002108:	6013      	str	r3, [r2, #0]
 800210a:	e00b      	b.n	8002124 <HAL_RCC_OscConfig+0xb0>
 800210c:	4b84      	ldr	r3, [pc, #528]	; (8002320 <HAL_RCC_OscConfig+0x2ac>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4a83      	ldr	r2, [pc, #524]	; (8002320 <HAL_RCC_OscConfig+0x2ac>)
 8002112:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002116:	6013      	str	r3, [r2, #0]
 8002118:	4b81      	ldr	r3, [pc, #516]	; (8002320 <HAL_RCC_OscConfig+0x2ac>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4a80      	ldr	r2, [pc, #512]	; (8002320 <HAL_RCC_OscConfig+0x2ac>)
 800211e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002122:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	2b00      	cmp	r3, #0
 800212a:	d013      	beq.n	8002154 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800212c:	f7ff f986 	bl	800143c <HAL_GetTick>
 8002130:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002132:	e008      	b.n	8002146 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002134:	f7ff f982 	bl	800143c <HAL_GetTick>
 8002138:	4602      	mov	r2, r0
 800213a:	693b      	ldr	r3, [r7, #16]
 800213c:	1ad3      	subs	r3, r2, r3
 800213e:	2b64      	cmp	r3, #100	; 0x64
 8002140:	d901      	bls.n	8002146 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002142:	2303      	movs	r3, #3
 8002144:	e204      	b.n	8002550 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002146:	4b76      	ldr	r3, [pc, #472]	; (8002320 <HAL_RCC_OscConfig+0x2ac>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800214e:	2b00      	cmp	r3, #0
 8002150:	d0f0      	beq.n	8002134 <HAL_RCC_OscConfig+0xc0>
 8002152:	e014      	b.n	800217e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002154:	f7ff f972 	bl	800143c <HAL_GetTick>
 8002158:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800215a:	e008      	b.n	800216e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800215c:	f7ff f96e 	bl	800143c <HAL_GetTick>
 8002160:	4602      	mov	r2, r0
 8002162:	693b      	ldr	r3, [r7, #16]
 8002164:	1ad3      	subs	r3, r2, r3
 8002166:	2b64      	cmp	r3, #100	; 0x64
 8002168:	d901      	bls.n	800216e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800216a:	2303      	movs	r3, #3
 800216c:	e1f0      	b.n	8002550 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800216e:	4b6c      	ldr	r3, [pc, #432]	; (8002320 <HAL_RCC_OscConfig+0x2ac>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002176:	2b00      	cmp	r3, #0
 8002178:	d1f0      	bne.n	800215c <HAL_RCC_OscConfig+0xe8>
 800217a:	e000      	b.n	800217e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800217c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f003 0302 	and.w	r3, r3, #2
 8002186:	2b00      	cmp	r3, #0
 8002188:	d063      	beq.n	8002252 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800218a:	4b65      	ldr	r3, [pc, #404]	; (8002320 <HAL_RCC_OscConfig+0x2ac>)
 800218c:	689b      	ldr	r3, [r3, #8]
 800218e:	f003 030c 	and.w	r3, r3, #12
 8002192:	2b00      	cmp	r3, #0
 8002194:	d00b      	beq.n	80021ae <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002196:	4b62      	ldr	r3, [pc, #392]	; (8002320 <HAL_RCC_OscConfig+0x2ac>)
 8002198:	689b      	ldr	r3, [r3, #8]
 800219a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800219e:	2b08      	cmp	r3, #8
 80021a0:	d11c      	bne.n	80021dc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80021a2:	4b5f      	ldr	r3, [pc, #380]	; (8002320 <HAL_RCC_OscConfig+0x2ac>)
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d116      	bne.n	80021dc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021ae:	4b5c      	ldr	r3, [pc, #368]	; (8002320 <HAL_RCC_OscConfig+0x2ac>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f003 0302 	and.w	r3, r3, #2
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d005      	beq.n	80021c6 <HAL_RCC_OscConfig+0x152>
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	68db      	ldr	r3, [r3, #12]
 80021be:	2b01      	cmp	r3, #1
 80021c0:	d001      	beq.n	80021c6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80021c2:	2301      	movs	r3, #1
 80021c4:	e1c4      	b.n	8002550 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021c6:	4b56      	ldr	r3, [pc, #344]	; (8002320 <HAL_RCC_OscConfig+0x2ac>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	691b      	ldr	r3, [r3, #16]
 80021d2:	00db      	lsls	r3, r3, #3
 80021d4:	4952      	ldr	r1, [pc, #328]	; (8002320 <HAL_RCC_OscConfig+0x2ac>)
 80021d6:	4313      	orrs	r3, r2
 80021d8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021da:	e03a      	b.n	8002252 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	68db      	ldr	r3, [r3, #12]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d020      	beq.n	8002226 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80021e4:	4b4f      	ldr	r3, [pc, #316]	; (8002324 <HAL_RCC_OscConfig+0x2b0>)
 80021e6:	2201      	movs	r2, #1
 80021e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021ea:	f7ff f927 	bl	800143c <HAL_GetTick>
 80021ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021f0:	e008      	b.n	8002204 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80021f2:	f7ff f923 	bl	800143c <HAL_GetTick>
 80021f6:	4602      	mov	r2, r0
 80021f8:	693b      	ldr	r3, [r7, #16]
 80021fa:	1ad3      	subs	r3, r2, r3
 80021fc:	2b02      	cmp	r3, #2
 80021fe:	d901      	bls.n	8002204 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002200:	2303      	movs	r3, #3
 8002202:	e1a5      	b.n	8002550 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002204:	4b46      	ldr	r3, [pc, #280]	; (8002320 <HAL_RCC_OscConfig+0x2ac>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f003 0302 	and.w	r3, r3, #2
 800220c:	2b00      	cmp	r3, #0
 800220e:	d0f0      	beq.n	80021f2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002210:	4b43      	ldr	r3, [pc, #268]	; (8002320 <HAL_RCC_OscConfig+0x2ac>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	691b      	ldr	r3, [r3, #16]
 800221c:	00db      	lsls	r3, r3, #3
 800221e:	4940      	ldr	r1, [pc, #256]	; (8002320 <HAL_RCC_OscConfig+0x2ac>)
 8002220:	4313      	orrs	r3, r2
 8002222:	600b      	str	r3, [r1, #0]
 8002224:	e015      	b.n	8002252 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002226:	4b3f      	ldr	r3, [pc, #252]	; (8002324 <HAL_RCC_OscConfig+0x2b0>)
 8002228:	2200      	movs	r2, #0
 800222a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800222c:	f7ff f906 	bl	800143c <HAL_GetTick>
 8002230:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002232:	e008      	b.n	8002246 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002234:	f7ff f902 	bl	800143c <HAL_GetTick>
 8002238:	4602      	mov	r2, r0
 800223a:	693b      	ldr	r3, [r7, #16]
 800223c:	1ad3      	subs	r3, r2, r3
 800223e:	2b02      	cmp	r3, #2
 8002240:	d901      	bls.n	8002246 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002242:	2303      	movs	r3, #3
 8002244:	e184      	b.n	8002550 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002246:	4b36      	ldr	r3, [pc, #216]	; (8002320 <HAL_RCC_OscConfig+0x2ac>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f003 0302 	and.w	r3, r3, #2
 800224e:	2b00      	cmp	r3, #0
 8002250:	d1f0      	bne.n	8002234 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f003 0308 	and.w	r3, r3, #8
 800225a:	2b00      	cmp	r3, #0
 800225c:	d030      	beq.n	80022c0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	695b      	ldr	r3, [r3, #20]
 8002262:	2b00      	cmp	r3, #0
 8002264:	d016      	beq.n	8002294 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002266:	4b30      	ldr	r3, [pc, #192]	; (8002328 <HAL_RCC_OscConfig+0x2b4>)
 8002268:	2201      	movs	r2, #1
 800226a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800226c:	f7ff f8e6 	bl	800143c <HAL_GetTick>
 8002270:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002272:	e008      	b.n	8002286 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002274:	f7ff f8e2 	bl	800143c <HAL_GetTick>
 8002278:	4602      	mov	r2, r0
 800227a:	693b      	ldr	r3, [r7, #16]
 800227c:	1ad3      	subs	r3, r2, r3
 800227e:	2b02      	cmp	r3, #2
 8002280:	d901      	bls.n	8002286 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002282:	2303      	movs	r3, #3
 8002284:	e164      	b.n	8002550 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002286:	4b26      	ldr	r3, [pc, #152]	; (8002320 <HAL_RCC_OscConfig+0x2ac>)
 8002288:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800228a:	f003 0302 	and.w	r3, r3, #2
 800228e:	2b00      	cmp	r3, #0
 8002290:	d0f0      	beq.n	8002274 <HAL_RCC_OscConfig+0x200>
 8002292:	e015      	b.n	80022c0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002294:	4b24      	ldr	r3, [pc, #144]	; (8002328 <HAL_RCC_OscConfig+0x2b4>)
 8002296:	2200      	movs	r2, #0
 8002298:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800229a:	f7ff f8cf 	bl	800143c <HAL_GetTick>
 800229e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022a0:	e008      	b.n	80022b4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80022a2:	f7ff f8cb 	bl	800143c <HAL_GetTick>
 80022a6:	4602      	mov	r2, r0
 80022a8:	693b      	ldr	r3, [r7, #16]
 80022aa:	1ad3      	subs	r3, r2, r3
 80022ac:	2b02      	cmp	r3, #2
 80022ae:	d901      	bls.n	80022b4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80022b0:	2303      	movs	r3, #3
 80022b2:	e14d      	b.n	8002550 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022b4:	4b1a      	ldr	r3, [pc, #104]	; (8002320 <HAL_RCC_OscConfig+0x2ac>)
 80022b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022b8:	f003 0302 	and.w	r3, r3, #2
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d1f0      	bne.n	80022a2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f003 0304 	and.w	r3, r3, #4
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	f000 80a0 	beq.w	800240e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022ce:	2300      	movs	r3, #0
 80022d0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80022d2:	4b13      	ldr	r3, [pc, #76]	; (8002320 <HAL_RCC_OscConfig+0x2ac>)
 80022d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d10f      	bne.n	80022fe <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022de:	2300      	movs	r3, #0
 80022e0:	60bb      	str	r3, [r7, #8]
 80022e2:	4b0f      	ldr	r3, [pc, #60]	; (8002320 <HAL_RCC_OscConfig+0x2ac>)
 80022e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022e6:	4a0e      	ldr	r2, [pc, #56]	; (8002320 <HAL_RCC_OscConfig+0x2ac>)
 80022e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022ec:	6413      	str	r3, [r2, #64]	; 0x40
 80022ee:	4b0c      	ldr	r3, [pc, #48]	; (8002320 <HAL_RCC_OscConfig+0x2ac>)
 80022f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022f6:	60bb      	str	r3, [r7, #8]
 80022f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80022fa:	2301      	movs	r3, #1
 80022fc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022fe:	4b0b      	ldr	r3, [pc, #44]	; (800232c <HAL_RCC_OscConfig+0x2b8>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002306:	2b00      	cmp	r3, #0
 8002308:	d121      	bne.n	800234e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800230a:	4b08      	ldr	r3, [pc, #32]	; (800232c <HAL_RCC_OscConfig+0x2b8>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	4a07      	ldr	r2, [pc, #28]	; (800232c <HAL_RCC_OscConfig+0x2b8>)
 8002310:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002314:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002316:	f7ff f891 	bl	800143c <HAL_GetTick>
 800231a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800231c:	e011      	b.n	8002342 <HAL_RCC_OscConfig+0x2ce>
 800231e:	bf00      	nop
 8002320:	40023800 	.word	0x40023800
 8002324:	42470000 	.word	0x42470000
 8002328:	42470e80 	.word	0x42470e80
 800232c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002330:	f7ff f884 	bl	800143c <HAL_GetTick>
 8002334:	4602      	mov	r2, r0
 8002336:	693b      	ldr	r3, [r7, #16]
 8002338:	1ad3      	subs	r3, r2, r3
 800233a:	2b02      	cmp	r3, #2
 800233c:	d901      	bls.n	8002342 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800233e:	2303      	movs	r3, #3
 8002340:	e106      	b.n	8002550 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002342:	4b85      	ldr	r3, [pc, #532]	; (8002558 <HAL_RCC_OscConfig+0x4e4>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800234a:	2b00      	cmp	r3, #0
 800234c:	d0f0      	beq.n	8002330 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	689b      	ldr	r3, [r3, #8]
 8002352:	2b01      	cmp	r3, #1
 8002354:	d106      	bne.n	8002364 <HAL_RCC_OscConfig+0x2f0>
 8002356:	4b81      	ldr	r3, [pc, #516]	; (800255c <HAL_RCC_OscConfig+0x4e8>)
 8002358:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800235a:	4a80      	ldr	r2, [pc, #512]	; (800255c <HAL_RCC_OscConfig+0x4e8>)
 800235c:	f043 0301 	orr.w	r3, r3, #1
 8002360:	6713      	str	r3, [r2, #112]	; 0x70
 8002362:	e01c      	b.n	800239e <HAL_RCC_OscConfig+0x32a>
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	689b      	ldr	r3, [r3, #8]
 8002368:	2b05      	cmp	r3, #5
 800236a:	d10c      	bne.n	8002386 <HAL_RCC_OscConfig+0x312>
 800236c:	4b7b      	ldr	r3, [pc, #492]	; (800255c <HAL_RCC_OscConfig+0x4e8>)
 800236e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002370:	4a7a      	ldr	r2, [pc, #488]	; (800255c <HAL_RCC_OscConfig+0x4e8>)
 8002372:	f043 0304 	orr.w	r3, r3, #4
 8002376:	6713      	str	r3, [r2, #112]	; 0x70
 8002378:	4b78      	ldr	r3, [pc, #480]	; (800255c <HAL_RCC_OscConfig+0x4e8>)
 800237a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800237c:	4a77      	ldr	r2, [pc, #476]	; (800255c <HAL_RCC_OscConfig+0x4e8>)
 800237e:	f043 0301 	orr.w	r3, r3, #1
 8002382:	6713      	str	r3, [r2, #112]	; 0x70
 8002384:	e00b      	b.n	800239e <HAL_RCC_OscConfig+0x32a>
 8002386:	4b75      	ldr	r3, [pc, #468]	; (800255c <HAL_RCC_OscConfig+0x4e8>)
 8002388:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800238a:	4a74      	ldr	r2, [pc, #464]	; (800255c <HAL_RCC_OscConfig+0x4e8>)
 800238c:	f023 0301 	bic.w	r3, r3, #1
 8002390:	6713      	str	r3, [r2, #112]	; 0x70
 8002392:	4b72      	ldr	r3, [pc, #456]	; (800255c <HAL_RCC_OscConfig+0x4e8>)
 8002394:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002396:	4a71      	ldr	r2, [pc, #452]	; (800255c <HAL_RCC_OscConfig+0x4e8>)
 8002398:	f023 0304 	bic.w	r3, r3, #4
 800239c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	689b      	ldr	r3, [r3, #8]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d015      	beq.n	80023d2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023a6:	f7ff f849 	bl	800143c <HAL_GetTick>
 80023aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023ac:	e00a      	b.n	80023c4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80023ae:	f7ff f845 	bl	800143c <HAL_GetTick>
 80023b2:	4602      	mov	r2, r0
 80023b4:	693b      	ldr	r3, [r7, #16]
 80023b6:	1ad3      	subs	r3, r2, r3
 80023b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80023bc:	4293      	cmp	r3, r2
 80023be:	d901      	bls.n	80023c4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80023c0:	2303      	movs	r3, #3
 80023c2:	e0c5      	b.n	8002550 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023c4:	4b65      	ldr	r3, [pc, #404]	; (800255c <HAL_RCC_OscConfig+0x4e8>)
 80023c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023c8:	f003 0302 	and.w	r3, r3, #2
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d0ee      	beq.n	80023ae <HAL_RCC_OscConfig+0x33a>
 80023d0:	e014      	b.n	80023fc <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023d2:	f7ff f833 	bl	800143c <HAL_GetTick>
 80023d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023d8:	e00a      	b.n	80023f0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80023da:	f7ff f82f 	bl	800143c <HAL_GetTick>
 80023de:	4602      	mov	r2, r0
 80023e0:	693b      	ldr	r3, [r7, #16]
 80023e2:	1ad3      	subs	r3, r2, r3
 80023e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80023e8:	4293      	cmp	r3, r2
 80023ea:	d901      	bls.n	80023f0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80023ec:	2303      	movs	r3, #3
 80023ee:	e0af      	b.n	8002550 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023f0:	4b5a      	ldr	r3, [pc, #360]	; (800255c <HAL_RCC_OscConfig+0x4e8>)
 80023f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023f4:	f003 0302 	and.w	r3, r3, #2
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d1ee      	bne.n	80023da <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80023fc:	7dfb      	ldrb	r3, [r7, #23]
 80023fe:	2b01      	cmp	r3, #1
 8002400:	d105      	bne.n	800240e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002402:	4b56      	ldr	r3, [pc, #344]	; (800255c <HAL_RCC_OscConfig+0x4e8>)
 8002404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002406:	4a55      	ldr	r2, [pc, #340]	; (800255c <HAL_RCC_OscConfig+0x4e8>)
 8002408:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800240c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	699b      	ldr	r3, [r3, #24]
 8002412:	2b00      	cmp	r3, #0
 8002414:	f000 809b 	beq.w	800254e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002418:	4b50      	ldr	r3, [pc, #320]	; (800255c <HAL_RCC_OscConfig+0x4e8>)
 800241a:	689b      	ldr	r3, [r3, #8]
 800241c:	f003 030c 	and.w	r3, r3, #12
 8002420:	2b08      	cmp	r3, #8
 8002422:	d05c      	beq.n	80024de <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	699b      	ldr	r3, [r3, #24]
 8002428:	2b02      	cmp	r3, #2
 800242a:	d141      	bne.n	80024b0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800242c:	4b4c      	ldr	r3, [pc, #304]	; (8002560 <HAL_RCC_OscConfig+0x4ec>)
 800242e:	2200      	movs	r2, #0
 8002430:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002432:	f7ff f803 	bl	800143c <HAL_GetTick>
 8002436:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002438:	e008      	b.n	800244c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800243a:	f7fe ffff 	bl	800143c <HAL_GetTick>
 800243e:	4602      	mov	r2, r0
 8002440:	693b      	ldr	r3, [r7, #16]
 8002442:	1ad3      	subs	r3, r2, r3
 8002444:	2b02      	cmp	r3, #2
 8002446:	d901      	bls.n	800244c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002448:	2303      	movs	r3, #3
 800244a:	e081      	b.n	8002550 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800244c:	4b43      	ldr	r3, [pc, #268]	; (800255c <HAL_RCC_OscConfig+0x4e8>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002454:	2b00      	cmp	r3, #0
 8002456:	d1f0      	bne.n	800243a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	69da      	ldr	r2, [r3, #28]
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6a1b      	ldr	r3, [r3, #32]
 8002460:	431a      	orrs	r2, r3
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002466:	019b      	lsls	r3, r3, #6
 8002468:	431a      	orrs	r2, r3
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800246e:	085b      	lsrs	r3, r3, #1
 8002470:	3b01      	subs	r3, #1
 8002472:	041b      	lsls	r3, r3, #16
 8002474:	431a      	orrs	r2, r3
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800247a:	061b      	lsls	r3, r3, #24
 800247c:	4937      	ldr	r1, [pc, #220]	; (800255c <HAL_RCC_OscConfig+0x4e8>)
 800247e:	4313      	orrs	r3, r2
 8002480:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002482:	4b37      	ldr	r3, [pc, #220]	; (8002560 <HAL_RCC_OscConfig+0x4ec>)
 8002484:	2201      	movs	r2, #1
 8002486:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002488:	f7fe ffd8 	bl	800143c <HAL_GetTick>
 800248c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800248e:	e008      	b.n	80024a2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002490:	f7fe ffd4 	bl	800143c <HAL_GetTick>
 8002494:	4602      	mov	r2, r0
 8002496:	693b      	ldr	r3, [r7, #16]
 8002498:	1ad3      	subs	r3, r2, r3
 800249a:	2b02      	cmp	r3, #2
 800249c:	d901      	bls.n	80024a2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800249e:	2303      	movs	r3, #3
 80024a0:	e056      	b.n	8002550 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024a2:	4b2e      	ldr	r3, [pc, #184]	; (800255c <HAL_RCC_OscConfig+0x4e8>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d0f0      	beq.n	8002490 <HAL_RCC_OscConfig+0x41c>
 80024ae:	e04e      	b.n	800254e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024b0:	4b2b      	ldr	r3, [pc, #172]	; (8002560 <HAL_RCC_OscConfig+0x4ec>)
 80024b2:	2200      	movs	r2, #0
 80024b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024b6:	f7fe ffc1 	bl	800143c <HAL_GetTick>
 80024ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024bc:	e008      	b.n	80024d0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024be:	f7fe ffbd 	bl	800143c <HAL_GetTick>
 80024c2:	4602      	mov	r2, r0
 80024c4:	693b      	ldr	r3, [r7, #16]
 80024c6:	1ad3      	subs	r3, r2, r3
 80024c8:	2b02      	cmp	r3, #2
 80024ca:	d901      	bls.n	80024d0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80024cc:	2303      	movs	r3, #3
 80024ce:	e03f      	b.n	8002550 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024d0:	4b22      	ldr	r3, [pc, #136]	; (800255c <HAL_RCC_OscConfig+0x4e8>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d1f0      	bne.n	80024be <HAL_RCC_OscConfig+0x44a>
 80024dc:	e037      	b.n	800254e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	699b      	ldr	r3, [r3, #24]
 80024e2:	2b01      	cmp	r3, #1
 80024e4:	d101      	bne.n	80024ea <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80024e6:	2301      	movs	r3, #1
 80024e8:	e032      	b.n	8002550 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80024ea:	4b1c      	ldr	r3, [pc, #112]	; (800255c <HAL_RCC_OscConfig+0x4e8>)
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	699b      	ldr	r3, [r3, #24]
 80024f4:	2b01      	cmp	r3, #1
 80024f6:	d028      	beq.n	800254a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002502:	429a      	cmp	r2, r3
 8002504:	d121      	bne.n	800254a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002510:	429a      	cmp	r2, r3
 8002512:	d11a      	bne.n	800254a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002514:	68fa      	ldr	r2, [r7, #12]
 8002516:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800251a:	4013      	ands	r3, r2
 800251c:	687a      	ldr	r2, [r7, #4]
 800251e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002520:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002522:	4293      	cmp	r3, r2
 8002524:	d111      	bne.n	800254a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002530:	085b      	lsrs	r3, r3, #1
 8002532:	3b01      	subs	r3, #1
 8002534:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002536:	429a      	cmp	r2, r3
 8002538:	d107      	bne.n	800254a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002544:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002546:	429a      	cmp	r2, r3
 8002548:	d001      	beq.n	800254e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800254a:	2301      	movs	r3, #1
 800254c:	e000      	b.n	8002550 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800254e:	2300      	movs	r3, #0
}
 8002550:	4618      	mov	r0, r3
 8002552:	3718      	adds	r7, #24
 8002554:	46bd      	mov	sp, r7
 8002556:	bd80      	pop	{r7, pc}
 8002558:	40007000 	.word	0x40007000
 800255c:	40023800 	.word	0x40023800
 8002560:	42470060 	.word	0x42470060

08002564 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b084      	sub	sp, #16
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
 800256c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d101      	bne.n	8002578 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002574:	2301      	movs	r3, #1
 8002576:	e0cc      	b.n	8002712 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002578:	4b68      	ldr	r3, [pc, #416]	; (800271c <HAL_RCC_ClockConfig+0x1b8>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f003 0307 	and.w	r3, r3, #7
 8002580:	683a      	ldr	r2, [r7, #0]
 8002582:	429a      	cmp	r2, r3
 8002584:	d90c      	bls.n	80025a0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002586:	4b65      	ldr	r3, [pc, #404]	; (800271c <HAL_RCC_ClockConfig+0x1b8>)
 8002588:	683a      	ldr	r2, [r7, #0]
 800258a:	b2d2      	uxtb	r2, r2
 800258c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800258e:	4b63      	ldr	r3, [pc, #396]	; (800271c <HAL_RCC_ClockConfig+0x1b8>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f003 0307 	and.w	r3, r3, #7
 8002596:	683a      	ldr	r2, [r7, #0]
 8002598:	429a      	cmp	r2, r3
 800259a:	d001      	beq.n	80025a0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800259c:	2301      	movs	r3, #1
 800259e:	e0b8      	b.n	8002712 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f003 0302 	and.w	r3, r3, #2
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d020      	beq.n	80025ee <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f003 0304 	and.w	r3, r3, #4
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d005      	beq.n	80025c4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80025b8:	4b59      	ldr	r3, [pc, #356]	; (8002720 <HAL_RCC_ClockConfig+0x1bc>)
 80025ba:	689b      	ldr	r3, [r3, #8]
 80025bc:	4a58      	ldr	r2, [pc, #352]	; (8002720 <HAL_RCC_ClockConfig+0x1bc>)
 80025be:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80025c2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f003 0308 	and.w	r3, r3, #8
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d005      	beq.n	80025dc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80025d0:	4b53      	ldr	r3, [pc, #332]	; (8002720 <HAL_RCC_ClockConfig+0x1bc>)
 80025d2:	689b      	ldr	r3, [r3, #8]
 80025d4:	4a52      	ldr	r2, [pc, #328]	; (8002720 <HAL_RCC_ClockConfig+0x1bc>)
 80025d6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80025da:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025dc:	4b50      	ldr	r3, [pc, #320]	; (8002720 <HAL_RCC_ClockConfig+0x1bc>)
 80025de:	689b      	ldr	r3, [r3, #8]
 80025e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	689b      	ldr	r3, [r3, #8]
 80025e8:	494d      	ldr	r1, [pc, #308]	; (8002720 <HAL_RCC_ClockConfig+0x1bc>)
 80025ea:	4313      	orrs	r3, r2
 80025ec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f003 0301 	and.w	r3, r3, #1
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d044      	beq.n	8002684 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	685b      	ldr	r3, [r3, #4]
 80025fe:	2b01      	cmp	r3, #1
 8002600:	d107      	bne.n	8002612 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002602:	4b47      	ldr	r3, [pc, #284]	; (8002720 <HAL_RCC_ClockConfig+0x1bc>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800260a:	2b00      	cmp	r3, #0
 800260c:	d119      	bne.n	8002642 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800260e:	2301      	movs	r3, #1
 8002610:	e07f      	b.n	8002712 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	685b      	ldr	r3, [r3, #4]
 8002616:	2b02      	cmp	r3, #2
 8002618:	d003      	beq.n	8002622 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800261e:	2b03      	cmp	r3, #3
 8002620:	d107      	bne.n	8002632 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002622:	4b3f      	ldr	r3, [pc, #252]	; (8002720 <HAL_RCC_ClockConfig+0x1bc>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800262a:	2b00      	cmp	r3, #0
 800262c:	d109      	bne.n	8002642 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800262e:	2301      	movs	r3, #1
 8002630:	e06f      	b.n	8002712 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002632:	4b3b      	ldr	r3, [pc, #236]	; (8002720 <HAL_RCC_ClockConfig+0x1bc>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f003 0302 	and.w	r3, r3, #2
 800263a:	2b00      	cmp	r3, #0
 800263c:	d101      	bne.n	8002642 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800263e:	2301      	movs	r3, #1
 8002640:	e067      	b.n	8002712 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002642:	4b37      	ldr	r3, [pc, #220]	; (8002720 <HAL_RCC_ClockConfig+0x1bc>)
 8002644:	689b      	ldr	r3, [r3, #8]
 8002646:	f023 0203 	bic.w	r2, r3, #3
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	685b      	ldr	r3, [r3, #4]
 800264e:	4934      	ldr	r1, [pc, #208]	; (8002720 <HAL_RCC_ClockConfig+0x1bc>)
 8002650:	4313      	orrs	r3, r2
 8002652:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002654:	f7fe fef2 	bl	800143c <HAL_GetTick>
 8002658:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800265a:	e00a      	b.n	8002672 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800265c:	f7fe feee 	bl	800143c <HAL_GetTick>
 8002660:	4602      	mov	r2, r0
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	1ad3      	subs	r3, r2, r3
 8002666:	f241 3288 	movw	r2, #5000	; 0x1388
 800266a:	4293      	cmp	r3, r2
 800266c:	d901      	bls.n	8002672 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800266e:	2303      	movs	r3, #3
 8002670:	e04f      	b.n	8002712 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002672:	4b2b      	ldr	r3, [pc, #172]	; (8002720 <HAL_RCC_ClockConfig+0x1bc>)
 8002674:	689b      	ldr	r3, [r3, #8]
 8002676:	f003 020c 	and.w	r2, r3, #12
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	009b      	lsls	r3, r3, #2
 8002680:	429a      	cmp	r2, r3
 8002682:	d1eb      	bne.n	800265c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002684:	4b25      	ldr	r3, [pc, #148]	; (800271c <HAL_RCC_ClockConfig+0x1b8>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f003 0307 	and.w	r3, r3, #7
 800268c:	683a      	ldr	r2, [r7, #0]
 800268e:	429a      	cmp	r2, r3
 8002690:	d20c      	bcs.n	80026ac <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002692:	4b22      	ldr	r3, [pc, #136]	; (800271c <HAL_RCC_ClockConfig+0x1b8>)
 8002694:	683a      	ldr	r2, [r7, #0]
 8002696:	b2d2      	uxtb	r2, r2
 8002698:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800269a:	4b20      	ldr	r3, [pc, #128]	; (800271c <HAL_RCC_ClockConfig+0x1b8>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f003 0307 	and.w	r3, r3, #7
 80026a2:	683a      	ldr	r2, [r7, #0]
 80026a4:	429a      	cmp	r2, r3
 80026a6:	d001      	beq.n	80026ac <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80026a8:	2301      	movs	r3, #1
 80026aa:	e032      	b.n	8002712 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f003 0304 	and.w	r3, r3, #4
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d008      	beq.n	80026ca <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80026b8:	4b19      	ldr	r3, [pc, #100]	; (8002720 <HAL_RCC_ClockConfig+0x1bc>)
 80026ba:	689b      	ldr	r3, [r3, #8]
 80026bc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	68db      	ldr	r3, [r3, #12]
 80026c4:	4916      	ldr	r1, [pc, #88]	; (8002720 <HAL_RCC_ClockConfig+0x1bc>)
 80026c6:	4313      	orrs	r3, r2
 80026c8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f003 0308 	and.w	r3, r3, #8
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d009      	beq.n	80026ea <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80026d6:	4b12      	ldr	r3, [pc, #72]	; (8002720 <HAL_RCC_ClockConfig+0x1bc>)
 80026d8:	689b      	ldr	r3, [r3, #8]
 80026da:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	691b      	ldr	r3, [r3, #16]
 80026e2:	00db      	lsls	r3, r3, #3
 80026e4:	490e      	ldr	r1, [pc, #56]	; (8002720 <HAL_RCC_ClockConfig+0x1bc>)
 80026e6:	4313      	orrs	r3, r2
 80026e8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80026ea:	f000 f821 	bl	8002730 <HAL_RCC_GetSysClockFreq>
 80026ee:	4602      	mov	r2, r0
 80026f0:	4b0b      	ldr	r3, [pc, #44]	; (8002720 <HAL_RCC_ClockConfig+0x1bc>)
 80026f2:	689b      	ldr	r3, [r3, #8]
 80026f4:	091b      	lsrs	r3, r3, #4
 80026f6:	f003 030f 	and.w	r3, r3, #15
 80026fa:	490a      	ldr	r1, [pc, #40]	; (8002724 <HAL_RCC_ClockConfig+0x1c0>)
 80026fc:	5ccb      	ldrb	r3, [r1, r3]
 80026fe:	fa22 f303 	lsr.w	r3, r2, r3
 8002702:	4a09      	ldr	r2, [pc, #36]	; (8002728 <HAL_RCC_ClockConfig+0x1c4>)
 8002704:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002706:	4b09      	ldr	r3, [pc, #36]	; (800272c <HAL_RCC_ClockConfig+0x1c8>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4618      	mov	r0, r3
 800270c:	f7fe fcd0 	bl	80010b0 <HAL_InitTick>

  return HAL_OK;
 8002710:	2300      	movs	r3, #0
}
 8002712:	4618      	mov	r0, r3
 8002714:	3710      	adds	r7, #16
 8002716:	46bd      	mov	sp, r7
 8002718:	bd80      	pop	{r7, pc}
 800271a:	bf00      	nop
 800271c:	40023c00 	.word	0x40023c00
 8002720:	40023800 	.word	0x40023800
 8002724:	08007c68 	.word	0x08007c68
 8002728:	20000000 	.word	0x20000000
 800272c:	20000004 	.word	0x20000004

08002730 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002730:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002734:	b084      	sub	sp, #16
 8002736:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002738:	2300      	movs	r3, #0
 800273a:	607b      	str	r3, [r7, #4]
 800273c:	2300      	movs	r3, #0
 800273e:	60fb      	str	r3, [r7, #12]
 8002740:	2300      	movs	r3, #0
 8002742:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002744:	2300      	movs	r3, #0
 8002746:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002748:	4b67      	ldr	r3, [pc, #412]	; (80028e8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800274a:	689b      	ldr	r3, [r3, #8]
 800274c:	f003 030c 	and.w	r3, r3, #12
 8002750:	2b08      	cmp	r3, #8
 8002752:	d00d      	beq.n	8002770 <HAL_RCC_GetSysClockFreq+0x40>
 8002754:	2b08      	cmp	r3, #8
 8002756:	f200 80bd 	bhi.w	80028d4 <HAL_RCC_GetSysClockFreq+0x1a4>
 800275a:	2b00      	cmp	r3, #0
 800275c:	d002      	beq.n	8002764 <HAL_RCC_GetSysClockFreq+0x34>
 800275e:	2b04      	cmp	r3, #4
 8002760:	d003      	beq.n	800276a <HAL_RCC_GetSysClockFreq+0x3a>
 8002762:	e0b7      	b.n	80028d4 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002764:	4b61      	ldr	r3, [pc, #388]	; (80028ec <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002766:	60bb      	str	r3, [r7, #8]
       break;
 8002768:	e0b7      	b.n	80028da <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800276a:	4b60      	ldr	r3, [pc, #384]	; (80028ec <HAL_RCC_GetSysClockFreq+0x1bc>)
 800276c:	60bb      	str	r3, [r7, #8]
      break;
 800276e:	e0b4      	b.n	80028da <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002770:	4b5d      	ldr	r3, [pc, #372]	; (80028e8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002772:	685b      	ldr	r3, [r3, #4]
 8002774:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002778:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800277a:	4b5b      	ldr	r3, [pc, #364]	; (80028e8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002782:	2b00      	cmp	r3, #0
 8002784:	d04d      	beq.n	8002822 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002786:	4b58      	ldr	r3, [pc, #352]	; (80028e8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	099b      	lsrs	r3, r3, #6
 800278c:	461a      	mov	r2, r3
 800278e:	f04f 0300 	mov.w	r3, #0
 8002792:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002796:	f04f 0100 	mov.w	r1, #0
 800279a:	ea02 0800 	and.w	r8, r2, r0
 800279e:	ea03 0901 	and.w	r9, r3, r1
 80027a2:	4640      	mov	r0, r8
 80027a4:	4649      	mov	r1, r9
 80027a6:	f04f 0200 	mov.w	r2, #0
 80027aa:	f04f 0300 	mov.w	r3, #0
 80027ae:	014b      	lsls	r3, r1, #5
 80027b0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80027b4:	0142      	lsls	r2, r0, #5
 80027b6:	4610      	mov	r0, r2
 80027b8:	4619      	mov	r1, r3
 80027ba:	ebb0 0008 	subs.w	r0, r0, r8
 80027be:	eb61 0109 	sbc.w	r1, r1, r9
 80027c2:	f04f 0200 	mov.w	r2, #0
 80027c6:	f04f 0300 	mov.w	r3, #0
 80027ca:	018b      	lsls	r3, r1, #6
 80027cc:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80027d0:	0182      	lsls	r2, r0, #6
 80027d2:	1a12      	subs	r2, r2, r0
 80027d4:	eb63 0301 	sbc.w	r3, r3, r1
 80027d8:	f04f 0000 	mov.w	r0, #0
 80027dc:	f04f 0100 	mov.w	r1, #0
 80027e0:	00d9      	lsls	r1, r3, #3
 80027e2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80027e6:	00d0      	lsls	r0, r2, #3
 80027e8:	4602      	mov	r2, r0
 80027ea:	460b      	mov	r3, r1
 80027ec:	eb12 0208 	adds.w	r2, r2, r8
 80027f0:	eb43 0309 	adc.w	r3, r3, r9
 80027f4:	f04f 0000 	mov.w	r0, #0
 80027f8:	f04f 0100 	mov.w	r1, #0
 80027fc:	0299      	lsls	r1, r3, #10
 80027fe:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002802:	0290      	lsls	r0, r2, #10
 8002804:	4602      	mov	r2, r0
 8002806:	460b      	mov	r3, r1
 8002808:	4610      	mov	r0, r2
 800280a:	4619      	mov	r1, r3
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	461a      	mov	r2, r3
 8002810:	f04f 0300 	mov.w	r3, #0
 8002814:	f7fd fcdc 	bl	80001d0 <__aeabi_uldivmod>
 8002818:	4602      	mov	r2, r0
 800281a:	460b      	mov	r3, r1
 800281c:	4613      	mov	r3, r2
 800281e:	60fb      	str	r3, [r7, #12]
 8002820:	e04a      	b.n	80028b8 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002822:	4b31      	ldr	r3, [pc, #196]	; (80028e8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	099b      	lsrs	r3, r3, #6
 8002828:	461a      	mov	r2, r3
 800282a:	f04f 0300 	mov.w	r3, #0
 800282e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002832:	f04f 0100 	mov.w	r1, #0
 8002836:	ea02 0400 	and.w	r4, r2, r0
 800283a:	ea03 0501 	and.w	r5, r3, r1
 800283e:	4620      	mov	r0, r4
 8002840:	4629      	mov	r1, r5
 8002842:	f04f 0200 	mov.w	r2, #0
 8002846:	f04f 0300 	mov.w	r3, #0
 800284a:	014b      	lsls	r3, r1, #5
 800284c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002850:	0142      	lsls	r2, r0, #5
 8002852:	4610      	mov	r0, r2
 8002854:	4619      	mov	r1, r3
 8002856:	1b00      	subs	r0, r0, r4
 8002858:	eb61 0105 	sbc.w	r1, r1, r5
 800285c:	f04f 0200 	mov.w	r2, #0
 8002860:	f04f 0300 	mov.w	r3, #0
 8002864:	018b      	lsls	r3, r1, #6
 8002866:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800286a:	0182      	lsls	r2, r0, #6
 800286c:	1a12      	subs	r2, r2, r0
 800286e:	eb63 0301 	sbc.w	r3, r3, r1
 8002872:	f04f 0000 	mov.w	r0, #0
 8002876:	f04f 0100 	mov.w	r1, #0
 800287a:	00d9      	lsls	r1, r3, #3
 800287c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002880:	00d0      	lsls	r0, r2, #3
 8002882:	4602      	mov	r2, r0
 8002884:	460b      	mov	r3, r1
 8002886:	1912      	adds	r2, r2, r4
 8002888:	eb45 0303 	adc.w	r3, r5, r3
 800288c:	f04f 0000 	mov.w	r0, #0
 8002890:	f04f 0100 	mov.w	r1, #0
 8002894:	0299      	lsls	r1, r3, #10
 8002896:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800289a:	0290      	lsls	r0, r2, #10
 800289c:	4602      	mov	r2, r0
 800289e:	460b      	mov	r3, r1
 80028a0:	4610      	mov	r0, r2
 80028a2:	4619      	mov	r1, r3
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	461a      	mov	r2, r3
 80028a8:	f04f 0300 	mov.w	r3, #0
 80028ac:	f7fd fc90 	bl	80001d0 <__aeabi_uldivmod>
 80028b0:	4602      	mov	r2, r0
 80028b2:	460b      	mov	r3, r1
 80028b4:	4613      	mov	r3, r2
 80028b6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80028b8:	4b0b      	ldr	r3, [pc, #44]	; (80028e8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	0c1b      	lsrs	r3, r3, #16
 80028be:	f003 0303 	and.w	r3, r3, #3
 80028c2:	3301      	adds	r3, #1
 80028c4:	005b      	lsls	r3, r3, #1
 80028c6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80028c8:	68fa      	ldr	r2, [r7, #12]
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80028d0:	60bb      	str	r3, [r7, #8]
      break;
 80028d2:	e002      	b.n	80028da <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80028d4:	4b05      	ldr	r3, [pc, #20]	; (80028ec <HAL_RCC_GetSysClockFreq+0x1bc>)
 80028d6:	60bb      	str	r3, [r7, #8]
      break;
 80028d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80028da:	68bb      	ldr	r3, [r7, #8]
}
 80028dc:	4618      	mov	r0, r3
 80028de:	3710      	adds	r7, #16
 80028e0:	46bd      	mov	sp, r7
 80028e2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80028e6:	bf00      	nop
 80028e8:	40023800 	.word	0x40023800
 80028ec:	00f42400 	.word	0x00f42400

080028f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80028f0:	b480      	push	{r7}
 80028f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80028f4:	4b03      	ldr	r3, [pc, #12]	; (8002904 <HAL_RCC_GetHCLKFreq+0x14>)
 80028f6:	681b      	ldr	r3, [r3, #0]
}
 80028f8:	4618      	mov	r0, r3
 80028fa:	46bd      	mov	sp, r7
 80028fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002900:	4770      	bx	lr
 8002902:	bf00      	nop
 8002904:	20000000 	.word	0x20000000

08002908 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800290c:	f7ff fff0 	bl	80028f0 <HAL_RCC_GetHCLKFreq>
 8002910:	4602      	mov	r2, r0
 8002912:	4b05      	ldr	r3, [pc, #20]	; (8002928 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002914:	689b      	ldr	r3, [r3, #8]
 8002916:	0a9b      	lsrs	r3, r3, #10
 8002918:	f003 0307 	and.w	r3, r3, #7
 800291c:	4903      	ldr	r1, [pc, #12]	; (800292c <HAL_RCC_GetPCLK1Freq+0x24>)
 800291e:	5ccb      	ldrb	r3, [r1, r3]
 8002920:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002924:	4618      	mov	r0, r3
 8002926:	bd80      	pop	{r7, pc}
 8002928:	40023800 	.word	0x40023800
 800292c:	08007c78 	.word	0x08007c78

08002930 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002934:	f7ff ffdc 	bl	80028f0 <HAL_RCC_GetHCLKFreq>
 8002938:	4602      	mov	r2, r0
 800293a:	4b05      	ldr	r3, [pc, #20]	; (8002950 <HAL_RCC_GetPCLK2Freq+0x20>)
 800293c:	689b      	ldr	r3, [r3, #8]
 800293e:	0b5b      	lsrs	r3, r3, #13
 8002940:	f003 0307 	and.w	r3, r3, #7
 8002944:	4903      	ldr	r1, [pc, #12]	; (8002954 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002946:	5ccb      	ldrb	r3, [r1, r3]
 8002948:	fa22 f303 	lsr.w	r3, r2, r3
}
 800294c:	4618      	mov	r0, r3
 800294e:	bd80      	pop	{r7, pc}
 8002950:	40023800 	.word	0x40023800
 8002954:	08007c78 	.word	0x08007c78

08002958 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002958:	b480      	push	{r7}
 800295a:	b083      	sub	sp, #12
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
 8002960:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	220f      	movs	r2, #15
 8002966:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002968:	4b12      	ldr	r3, [pc, #72]	; (80029b4 <HAL_RCC_GetClockConfig+0x5c>)
 800296a:	689b      	ldr	r3, [r3, #8]
 800296c:	f003 0203 	and.w	r2, r3, #3
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002974:	4b0f      	ldr	r3, [pc, #60]	; (80029b4 <HAL_RCC_GetClockConfig+0x5c>)
 8002976:	689b      	ldr	r3, [r3, #8]
 8002978:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002980:	4b0c      	ldr	r3, [pc, #48]	; (80029b4 <HAL_RCC_GetClockConfig+0x5c>)
 8002982:	689b      	ldr	r3, [r3, #8]
 8002984:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800298c:	4b09      	ldr	r3, [pc, #36]	; (80029b4 <HAL_RCC_GetClockConfig+0x5c>)
 800298e:	689b      	ldr	r3, [r3, #8]
 8002990:	08db      	lsrs	r3, r3, #3
 8002992:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800299a:	4b07      	ldr	r3, [pc, #28]	; (80029b8 <HAL_RCC_GetClockConfig+0x60>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f003 0207 	and.w	r2, r3, #7
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	601a      	str	r2, [r3, #0]
}
 80029a6:	bf00      	nop
 80029a8:	370c      	adds	r7, #12
 80029aa:	46bd      	mov	sp, r7
 80029ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b0:	4770      	bx	lr
 80029b2:	bf00      	nop
 80029b4:	40023800 	.word	0x40023800
 80029b8:	40023c00 	.word	0x40023c00

080029bc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b082      	sub	sp, #8
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d101      	bne.n	80029ce <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80029ca:	2301      	movs	r3, #1
 80029cc:	e07b      	b.n	8002ac6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d108      	bne.n	80029e8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	685b      	ldr	r3, [r3, #4]
 80029da:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80029de:	d009      	beq.n	80029f4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2200      	movs	r2, #0
 80029e4:	61da      	str	r2, [r3, #28]
 80029e6:	e005      	b.n	80029f4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2200      	movs	r2, #0
 80029ec:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	2200      	movs	r2, #0
 80029f2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2200      	movs	r2, #0
 80029f8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002a00:	b2db      	uxtb	r3, r3
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d106      	bne.n	8002a14 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2200      	movs	r2, #0
 8002a0a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002a0e:	6878      	ldr	r0, [r7, #4]
 8002a10:	f7fe fa02 	bl	8000e18 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2202      	movs	r2, #2
 8002a18:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	681a      	ldr	r2, [r3, #0]
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002a2a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	685b      	ldr	r3, [r3, #4]
 8002a30:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	689b      	ldr	r3, [r3, #8]
 8002a38:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002a3c:	431a      	orrs	r2, r3
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	68db      	ldr	r3, [r3, #12]
 8002a42:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a46:	431a      	orrs	r2, r3
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	691b      	ldr	r3, [r3, #16]
 8002a4c:	f003 0302 	and.w	r3, r3, #2
 8002a50:	431a      	orrs	r2, r3
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	695b      	ldr	r3, [r3, #20]
 8002a56:	f003 0301 	and.w	r3, r3, #1
 8002a5a:	431a      	orrs	r2, r3
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	699b      	ldr	r3, [r3, #24]
 8002a60:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a64:	431a      	orrs	r2, r3
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	69db      	ldr	r3, [r3, #28]
 8002a6a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002a6e:	431a      	orrs	r2, r3
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6a1b      	ldr	r3, [r3, #32]
 8002a74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a78:	ea42 0103 	orr.w	r1, r2, r3
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a80:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	430a      	orrs	r2, r1
 8002a8a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	699b      	ldr	r3, [r3, #24]
 8002a90:	0c1b      	lsrs	r3, r3, #16
 8002a92:	f003 0104 	and.w	r1, r3, #4
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a9a:	f003 0210 	and.w	r2, r3, #16
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	430a      	orrs	r2, r1
 8002aa4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	69da      	ldr	r2, [r3, #28]
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002ab4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	2200      	movs	r2, #0
 8002aba:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2201      	movs	r2, #1
 8002ac0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002ac4:	2300      	movs	r3, #0
}
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	3708      	adds	r7, #8
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bd80      	pop	{r7, pc}

08002ace <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002ace:	b580      	push	{r7, lr}
 8002ad0:	b082      	sub	sp, #8
 8002ad2:	af00      	add	r7, sp, #0
 8002ad4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d101      	bne.n	8002ae0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002adc:	2301      	movs	r3, #1
 8002ade:	e041      	b.n	8002b64 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ae6:	b2db      	uxtb	r3, r3
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d106      	bne.n	8002afa <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2200      	movs	r2, #0
 8002af0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002af4:	6878      	ldr	r0, [r7, #4]
 8002af6:	f7fe f9d7 	bl	8000ea8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2202      	movs	r2, #2
 8002afe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681a      	ldr	r2, [r3, #0]
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	3304      	adds	r3, #4
 8002b0a:	4619      	mov	r1, r3
 8002b0c:	4610      	mov	r0, r2
 8002b0e:	f000 fdaf 	bl	8003670 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	2201      	movs	r2, #1
 8002b16:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2201      	movs	r2, #1
 8002b1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	2201      	movs	r2, #1
 8002b26:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	2201      	movs	r2, #1
 8002b2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	2201      	movs	r2, #1
 8002b36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2201      	movs	r2, #1
 8002b3e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	2201      	movs	r2, #1
 8002b46:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2201      	movs	r2, #1
 8002b4e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	2201      	movs	r2, #1
 8002b56:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2201      	movs	r2, #1
 8002b5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002b62:	2300      	movs	r3, #0
}
 8002b64:	4618      	mov	r0, r3
 8002b66:	3708      	adds	r7, #8
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	bd80      	pop	{r7, pc}

08002b6c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	b085      	sub	sp, #20
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b7a:	b2db      	uxtb	r3, r3
 8002b7c:	2b01      	cmp	r3, #1
 8002b7e:	d001      	beq.n	8002b84 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002b80:	2301      	movs	r3, #1
 8002b82:	e046      	b.n	8002c12 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2202      	movs	r2, #2
 8002b88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4a23      	ldr	r2, [pc, #140]	; (8002c20 <HAL_TIM_Base_Start+0xb4>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d022      	beq.n	8002bdc <HAL_TIM_Base_Start+0x70>
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b9e:	d01d      	beq.n	8002bdc <HAL_TIM_Base_Start+0x70>
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4a1f      	ldr	r2, [pc, #124]	; (8002c24 <HAL_TIM_Base_Start+0xb8>)
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d018      	beq.n	8002bdc <HAL_TIM_Base_Start+0x70>
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	4a1e      	ldr	r2, [pc, #120]	; (8002c28 <HAL_TIM_Base_Start+0xbc>)
 8002bb0:	4293      	cmp	r3, r2
 8002bb2:	d013      	beq.n	8002bdc <HAL_TIM_Base_Start+0x70>
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4a1c      	ldr	r2, [pc, #112]	; (8002c2c <HAL_TIM_Base_Start+0xc0>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d00e      	beq.n	8002bdc <HAL_TIM_Base_Start+0x70>
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	4a1b      	ldr	r2, [pc, #108]	; (8002c30 <HAL_TIM_Base_Start+0xc4>)
 8002bc4:	4293      	cmp	r3, r2
 8002bc6:	d009      	beq.n	8002bdc <HAL_TIM_Base_Start+0x70>
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4a19      	ldr	r2, [pc, #100]	; (8002c34 <HAL_TIM_Base_Start+0xc8>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d004      	beq.n	8002bdc <HAL_TIM_Base_Start+0x70>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4a18      	ldr	r2, [pc, #96]	; (8002c38 <HAL_TIM_Base_Start+0xcc>)
 8002bd8:	4293      	cmp	r3, r2
 8002bda:	d111      	bne.n	8002c00 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	689b      	ldr	r3, [r3, #8]
 8002be2:	f003 0307 	and.w	r3, r3, #7
 8002be6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	2b06      	cmp	r3, #6
 8002bec:	d010      	beq.n	8002c10 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	681a      	ldr	r2, [r3, #0]
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f042 0201 	orr.w	r2, r2, #1
 8002bfc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002bfe:	e007      	b.n	8002c10 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	681a      	ldr	r2, [r3, #0]
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f042 0201 	orr.w	r2, r2, #1
 8002c0e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002c10:	2300      	movs	r3, #0
}
 8002c12:	4618      	mov	r0, r3
 8002c14:	3714      	adds	r7, #20
 8002c16:	46bd      	mov	sp, r7
 8002c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1c:	4770      	bx	lr
 8002c1e:	bf00      	nop
 8002c20:	40010000 	.word	0x40010000
 8002c24:	40000400 	.word	0x40000400
 8002c28:	40000800 	.word	0x40000800
 8002c2c:	40000c00 	.word	0x40000c00
 8002c30:	40010400 	.word	0x40010400
 8002c34:	40014000 	.word	0x40014000
 8002c38:	40001800 	.word	0x40001800

08002c3c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	b085      	sub	sp, #20
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c4a:	b2db      	uxtb	r3, r3
 8002c4c:	2b01      	cmp	r3, #1
 8002c4e:	d001      	beq.n	8002c54 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002c50:	2301      	movs	r3, #1
 8002c52:	e04e      	b.n	8002cf2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2202      	movs	r2, #2
 8002c58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	68da      	ldr	r2, [r3, #12]
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f042 0201 	orr.w	r2, r2, #1
 8002c6a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4a23      	ldr	r2, [pc, #140]	; (8002d00 <HAL_TIM_Base_Start_IT+0xc4>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d022      	beq.n	8002cbc <HAL_TIM_Base_Start_IT+0x80>
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c7e:	d01d      	beq.n	8002cbc <HAL_TIM_Base_Start_IT+0x80>
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4a1f      	ldr	r2, [pc, #124]	; (8002d04 <HAL_TIM_Base_Start_IT+0xc8>)
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d018      	beq.n	8002cbc <HAL_TIM_Base_Start_IT+0x80>
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4a1e      	ldr	r2, [pc, #120]	; (8002d08 <HAL_TIM_Base_Start_IT+0xcc>)
 8002c90:	4293      	cmp	r3, r2
 8002c92:	d013      	beq.n	8002cbc <HAL_TIM_Base_Start_IT+0x80>
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	4a1c      	ldr	r2, [pc, #112]	; (8002d0c <HAL_TIM_Base_Start_IT+0xd0>)
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d00e      	beq.n	8002cbc <HAL_TIM_Base_Start_IT+0x80>
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	4a1b      	ldr	r2, [pc, #108]	; (8002d10 <HAL_TIM_Base_Start_IT+0xd4>)
 8002ca4:	4293      	cmp	r3, r2
 8002ca6:	d009      	beq.n	8002cbc <HAL_TIM_Base_Start_IT+0x80>
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4a19      	ldr	r2, [pc, #100]	; (8002d14 <HAL_TIM_Base_Start_IT+0xd8>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d004      	beq.n	8002cbc <HAL_TIM_Base_Start_IT+0x80>
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	4a18      	ldr	r2, [pc, #96]	; (8002d18 <HAL_TIM_Base_Start_IT+0xdc>)
 8002cb8:	4293      	cmp	r3, r2
 8002cba:	d111      	bne.n	8002ce0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	689b      	ldr	r3, [r3, #8]
 8002cc2:	f003 0307 	and.w	r3, r3, #7
 8002cc6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	2b06      	cmp	r3, #6
 8002ccc:	d010      	beq.n	8002cf0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	681a      	ldr	r2, [r3, #0]
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f042 0201 	orr.w	r2, r2, #1
 8002cdc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002cde:	e007      	b.n	8002cf0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	681a      	ldr	r2, [r3, #0]
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f042 0201 	orr.w	r2, r2, #1
 8002cee:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002cf0:	2300      	movs	r3, #0
}
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	3714      	adds	r7, #20
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfc:	4770      	bx	lr
 8002cfe:	bf00      	nop
 8002d00:	40010000 	.word	0x40010000
 8002d04:	40000400 	.word	0x40000400
 8002d08:	40000800 	.word	0x40000800
 8002d0c:	40000c00 	.word	0x40000c00
 8002d10:	40010400 	.word	0x40010400
 8002d14:	40014000 	.word	0x40014000
 8002d18:	40001800 	.word	0x40001800

08002d1c <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b082      	sub	sp, #8
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d101      	bne.n	8002d2e <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	e041      	b.n	8002db2 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d34:	b2db      	uxtb	r3, r3
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d106      	bne.n	8002d48 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8002d42:	6878      	ldr	r0, [r7, #4]
 8002d44:	f000 f839 	bl	8002dba <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2202      	movs	r2, #2
 8002d4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681a      	ldr	r2, [r3, #0]
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	3304      	adds	r3, #4
 8002d58:	4619      	mov	r1, r3
 8002d5a:	4610      	mov	r0, r2
 8002d5c:	f000 fc88 	bl	8003670 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2201      	movs	r2, #1
 8002d64:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2201      	movs	r2, #1
 8002d6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2201      	movs	r2, #1
 8002d74:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2201      	movs	r2, #1
 8002d7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2201      	movs	r2, #1
 8002d84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2201      	movs	r2, #1
 8002d8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2201      	movs	r2, #1
 8002d94:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2201      	movs	r2, #1
 8002d9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2201      	movs	r2, #1
 8002da4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2201      	movs	r2, #1
 8002dac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002db0:	2300      	movs	r3, #0
}
 8002db2:	4618      	mov	r0, r3
 8002db4:	3708      	adds	r7, #8
 8002db6:	46bd      	mov	sp, r7
 8002db8:	bd80      	pop	{r7, pc}

08002dba <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8002dba:	b480      	push	{r7}
 8002dbc:	b083      	sub	sp, #12
 8002dbe:	af00      	add	r7, sp, #0
 8002dc0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8002dc2:	bf00      	nop
 8002dc4:	370c      	adds	r7, #12
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dcc:	4770      	bx	lr

08002dce <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002dce:	b580      	push	{r7, lr}
 8002dd0:	b082      	sub	sp, #8
 8002dd2:	af00      	add	r7, sp, #0
 8002dd4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d101      	bne.n	8002de0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002ddc:	2301      	movs	r3, #1
 8002dde:	e041      	b.n	8002e64 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002de6:	b2db      	uxtb	r3, r3
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d106      	bne.n	8002dfa <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2200      	movs	r2, #0
 8002df0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002df4:	6878      	ldr	r0, [r7, #4]
 8002df6:	f000 f839 	bl	8002e6c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	2202      	movs	r2, #2
 8002dfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681a      	ldr	r2, [r3, #0]
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	3304      	adds	r3, #4
 8002e0a:	4619      	mov	r1, r3
 8002e0c:	4610      	mov	r0, r2
 8002e0e:	f000 fc2f 	bl	8003670 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	2201      	movs	r2, #1
 8002e16:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2201      	movs	r2, #1
 8002e1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2201      	movs	r2, #1
 8002e26:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2201      	movs	r2, #1
 8002e2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	2201      	movs	r2, #1
 8002e36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2201      	movs	r2, #1
 8002e3e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2201      	movs	r2, #1
 8002e46:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2201      	movs	r2, #1
 8002e4e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2201      	movs	r2, #1
 8002e56:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	2201      	movs	r2, #1
 8002e5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002e62:	2300      	movs	r3, #0
}
 8002e64:	4618      	mov	r0, r3
 8002e66:	3708      	adds	r7, #8
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	bd80      	pop	{r7, pc}

08002e6c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002e6c:	b480      	push	{r7}
 8002e6e:	b083      	sub	sp, #12
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002e74:	bf00      	nop
 8002e76:	370c      	adds	r7, #12
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7e:	4770      	bx	lr

08002e80 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b082      	sub	sp, #8
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d101      	bne.n	8002e92 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8002e8e:	2301      	movs	r3, #1
 8002e90:	e041      	b.n	8002f16 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e98:	b2db      	uxtb	r3, r3
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d106      	bne.n	8002eac <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8002ea6:	6878      	ldr	r0, [r7, #4]
 8002ea8:	f000 f839 	bl	8002f1e <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2202      	movs	r2, #2
 8002eb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681a      	ldr	r2, [r3, #0]
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	3304      	adds	r3, #4
 8002ebc:	4619      	mov	r1, r3
 8002ebe:	4610      	mov	r0, r2
 8002ec0:	f000 fbd6 	bl	8003670 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2201      	movs	r2, #1
 8002ec8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2201      	movs	r2, #1
 8002ed0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2201      	movs	r2, #1
 8002ed8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2201      	movs	r2, #1
 8002ee0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2201      	movs	r2, #1
 8002ee8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2201      	movs	r2, #1
 8002ef0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2201      	movs	r2, #1
 8002ef8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2201      	movs	r2, #1
 8002f00:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2201      	movs	r2, #1
 8002f08:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2201      	movs	r2, #1
 8002f10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002f14:	2300      	movs	r3, #0
}
 8002f16:	4618      	mov	r0, r3
 8002f18:	3708      	adds	r7, #8
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	bd80      	pop	{r7, pc}

08002f1e <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8002f1e:	b480      	push	{r7}
 8002f20:	b083      	sub	sp, #12
 8002f22:	af00      	add	r7, sp, #0
 8002f24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8002f26:	bf00      	nop
 8002f28:	370c      	adds	r7, #12
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f30:	4770      	bx	lr

08002f32 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002f32:	b580      	push	{r7, lr}
 8002f34:	b082      	sub	sp, #8
 8002f36:	af00      	add	r7, sp, #0
 8002f38:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	691b      	ldr	r3, [r3, #16]
 8002f40:	f003 0302 	and.w	r3, r3, #2
 8002f44:	2b02      	cmp	r3, #2
 8002f46:	d122      	bne.n	8002f8e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	68db      	ldr	r3, [r3, #12]
 8002f4e:	f003 0302 	and.w	r3, r3, #2
 8002f52:	2b02      	cmp	r3, #2
 8002f54:	d11b      	bne.n	8002f8e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f06f 0202 	mvn.w	r2, #2
 8002f5e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2201      	movs	r2, #1
 8002f64:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	699b      	ldr	r3, [r3, #24]
 8002f6c:	f003 0303 	and.w	r3, r3, #3
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d003      	beq.n	8002f7c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002f74:	6878      	ldr	r0, [r7, #4]
 8002f76:	f000 fb5d 	bl	8003634 <HAL_TIM_IC_CaptureCallback>
 8002f7a:	e005      	b.n	8002f88 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f7c:	6878      	ldr	r0, [r7, #4]
 8002f7e:	f000 fb4f 	bl	8003620 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f82:	6878      	ldr	r0, [r7, #4]
 8002f84:	f000 fb60 	bl	8003648 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	691b      	ldr	r3, [r3, #16]
 8002f94:	f003 0304 	and.w	r3, r3, #4
 8002f98:	2b04      	cmp	r3, #4
 8002f9a:	d122      	bne.n	8002fe2 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	68db      	ldr	r3, [r3, #12]
 8002fa2:	f003 0304 	and.w	r3, r3, #4
 8002fa6:	2b04      	cmp	r3, #4
 8002fa8:	d11b      	bne.n	8002fe2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f06f 0204 	mvn.w	r2, #4
 8002fb2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2202      	movs	r2, #2
 8002fb8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	699b      	ldr	r3, [r3, #24]
 8002fc0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d003      	beq.n	8002fd0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002fc8:	6878      	ldr	r0, [r7, #4]
 8002fca:	f000 fb33 	bl	8003634 <HAL_TIM_IC_CaptureCallback>
 8002fce:	e005      	b.n	8002fdc <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fd0:	6878      	ldr	r0, [r7, #4]
 8002fd2:	f000 fb25 	bl	8003620 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fd6:	6878      	ldr	r0, [r7, #4]
 8002fd8:	f000 fb36 	bl	8003648 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2200      	movs	r2, #0
 8002fe0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	691b      	ldr	r3, [r3, #16]
 8002fe8:	f003 0308 	and.w	r3, r3, #8
 8002fec:	2b08      	cmp	r3, #8
 8002fee:	d122      	bne.n	8003036 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	68db      	ldr	r3, [r3, #12]
 8002ff6:	f003 0308 	and.w	r3, r3, #8
 8002ffa:	2b08      	cmp	r3, #8
 8002ffc:	d11b      	bne.n	8003036 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f06f 0208 	mvn.w	r2, #8
 8003006:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2204      	movs	r2, #4
 800300c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	69db      	ldr	r3, [r3, #28]
 8003014:	f003 0303 	and.w	r3, r3, #3
 8003018:	2b00      	cmp	r3, #0
 800301a:	d003      	beq.n	8003024 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800301c:	6878      	ldr	r0, [r7, #4]
 800301e:	f000 fb09 	bl	8003634 <HAL_TIM_IC_CaptureCallback>
 8003022:	e005      	b.n	8003030 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003024:	6878      	ldr	r0, [r7, #4]
 8003026:	f000 fafb 	bl	8003620 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800302a:	6878      	ldr	r0, [r7, #4]
 800302c:	f000 fb0c 	bl	8003648 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2200      	movs	r2, #0
 8003034:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	691b      	ldr	r3, [r3, #16]
 800303c:	f003 0310 	and.w	r3, r3, #16
 8003040:	2b10      	cmp	r3, #16
 8003042:	d122      	bne.n	800308a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	68db      	ldr	r3, [r3, #12]
 800304a:	f003 0310 	and.w	r3, r3, #16
 800304e:	2b10      	cmp	r3, #16
 8003050:	d11b      	bne.n	800308a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f06f 0210 	mvn.w	r2, #16
 800305a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2208      	movs	r2, #8
 8003060:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	69db      	ldr	r3, [r3, #28]
 8003068:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800306c:	2b00      	cmp	r3, #0
 800306e:	d003      	beq.n	8003078 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003070:	6878      	ldr	r0, [r7, #4]
 8003072:	f000 fadf 	bl	8003634 <HAL_TIM_IC_CaptureCallback>
 8003076:	e005      	b.n	8003084 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003078:	6878      	ldr	r0, [r7, #4]
 800307a:	f000 fad1 	bl	8003620 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800307e:	6878      	ldr	r0, [r7, #4]
 8003080:	f000 fae2 	bl	8003648 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2200      	movs	r2, #0
 8003088:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	691b      	ldr	r3, [r3, #16]
 8003090:	f003 0301 	and.w	r3, r3, #1
 8003094:	2b01      	cmp	r3, #1
 8003096:	d10e      	bne.n	80030b6 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	68db      	ldr	r3, [r3, #12]
 800309e:	f003 0301 	and.w	r3, r3, #1
 80030a2:	2b01      	cmp	r3, #1
 80030a4:	d107      	bne.n	80030b6 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f06f 0201 	mvn.w	r2, #1
 80030ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80030b0:	6878      	ldr	r0, [r7, #4]
 80030b2:	f7fd fdc5 	bl	8000c40 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	691b      	ldr	r3, [r3, #16]
 80030bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030c0:	2b80      	cmp	r3, #128	; 0x80
 80030c2:	d10e      	bne.n	80030e2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	68db      	ldr	r3, [r3, #12]
 80030ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030ce:	2b80      	cmp	r3, #128	; 0x80
 80030d0:	d107      	bne.n	80030e2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80030da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80030dc:	6878      	ldr	r0, [r7, #4]
 80030de:	f000 ffb3 	bl	8004048 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	691b      	ldr	r3, [r3, #16]
 80030e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030ec:	2b40      	cmp	r3, #64	; 0x40
 80030ee:	d10e      	bne.n	800310e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	68db      	ldr	r3, [r3, #12]
 80030f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030fa:	2b40      	cmp	r3, #64	; 0x40
 80030fc:	d107      	bne.n	800310e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003106:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003108:	6878      	ldr	r0, [r7, #4]
 800310a:	f000 faa7 	bl	800365c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	691b      	ldr	r3, [r3, #16]
 8003114:	f003 0320 	and.w	r3, r3, #32
 8003118:	2b20      	cmp	r3, #32
 800311a:	d10e      	bne.n	800313a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	68db      	ldr	r3, [r3, #12]
 8003122:	f003 0320 	and.w	r3, r3, #32
 8003126:	2b20      	cmp	r3, #32
 8003128:	d107      	bne.n	800313a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f06f 0220 	mvn.w	r2, #32
 8003132:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003134:	6878      	ldr	r0, [r7, #4]
 8003136:	f000 ff7d 	bl	8004034 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800313a:	bf00      	nop
 800313c:	3708      	adds	r7, #8
 800313e:	46bd      	mov	sp, r7
 8003140:	bd80      	pop	{r7, pc}
	...

08003144 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b084      	sub	sp, #16
 8003148:	af00      	add	r7, sp, #0
 800314a:	60f8      	str	r0, [r7, #12]
 800314c:	60b9      	str	r1, [r7, #8]
 800314e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003156:	2b01      	cmp	r3, #1
 8003158:	d101      	bne.n	800315e <HAL_TIM_OC_ConfigChannel+0x1a>
 800315a:	2302      	movs	r3, #2
 800315c:	e046      	b.n	80031ec <HAL_TIM_OC_ConfigChannel+0xa8>
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	2201      	movs	r2, #1
 8003162:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	2b0c      	cmp	r3, #12
 800316a:	d839      	bhi.n	80031e0 <HAL_TIM_OC_ConfigChannel+0x9c>
 800316c:	a201      	add	r2, pc, #4	; (adr r2, 8003174 <HAL_TIM_OC_ConfigChannel+0x30>)
 800316e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003172:	bf00      	nop
 8003174:	080031a9 	.word	0x080031a9
 8003178:	080031e1 	.word	0x080031e1
 800317c:	080031e1 	.word	0x080031e1
 8003180:	080031e1 	.word	0x080031e1
 8003184:	080031b7 	.word	0x080031b7
 8003188:	080031e1 	.word	0x080031e1
 800318c:	080031e1 	.word	0x080031e1
 8003190:	080031e1 	.word	0x080031e1
 8003194:	080031c5 	.word	0x080031c5
 8003198:	080031e1 	.word	0x080031e1
 800319c:	080031e1 	.word	0x080031e1
 80031a0:	080031e1 	.word	0x080031e1
 80031a4:	080031d3 	.word	0x080031d3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	68b9      	ldr	r1, [r7, #8]
 80031ae:	4618      	mov	r0, r3
 80031b0:	f000 fafe 	bl	80037b0 <TIM_OC1_SetConfig>
      break;
 80031b4:	e015      	b.n	80031e2 <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	68b9      	ldr	r1, [r7, #8]
 80031bc:	4618      	mov	r0, r3
 80031be:	f000 fb67 	bl	8003890 <TIM_OC2_SetConfig>
      break;
 80031c2:	e00e      	b.n	80031e2 <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	68b9      	ldr	r1, [r7, #8]
 80031ca:	4618      	mov	r0, r3
 80031cc:	f000 fbd6 	bl	800397c <TIM_OC3_SetConfig>
      break;
 80031d0:	e007      	b.n	80031e2 <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	68b9      	ldr	r1, [r7, #8]
 80031d8:	4618      	mov	r0, r3
 80031da:	f000 fc43 	bl	8003a64 <TIM_OC4_SetConfig>
      break;
 80031de:	e000      	b.n	80031e2 <HAL_TIM_OC_ConfigChannel+0x9e>
    }

    default:
      break;
 80031e0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	2200      	movs	r2, #0
 80031e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80031ea:	2300      	movs	r3, #0
}
 80031ec:	4618      	mov	r0, r3
 80031ee:	3710      	adds	r7, #16
 80031f0:	46bd      	mov	sp, r7
 80031f2:	bd80      	pop	{r7, pc}

080031f4 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b084      	sub	sp, #16
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	60f8      	str	r0, [r7, #12]
 80031fc:	60b9      	str	r1, [r7, #8]
 80031fe:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003206:	2b01      	cmp	r3, #1
 8003208:	d101      	bne.n	800320e <HAL_TIM_IC_ConfigChannel+0x1a>
 800320a:	2302      	movs	r3, #2
 800320c:	e082      	b.n	8003314 <HAL_TIM_IC_ConfigChannel+0x120>
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	2201      	movs	r2, #1
 8003212:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2b00      	cmp	r3, #0
 800321a:	d11b      	bne.n	8003254 <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	6818      	ldr	r0, [r3, #0]
 8003220:	68bb      	ldr	r3, [r7, #8]
 8003222:	6819      	ldr	r1, [r3, #0]
 8003224:	68bb      	ldr	r3, [r7, #8]
 8003226:	685a      	ldr	r2, [r3, #4]
 8003228:	68bb      	ldr	r3, [r7, #8]
 800322a:	68db      	ldr	r3, [r3, #12]
 800322c:	f000 fc70 	bl	8003b10 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	699a      	ldr	r2, [r3, #24]
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f022 020c 	bic.w	r2, r2, #12
 800323e:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	6999      	ldr	r1, [r3, #24]
 8003246:	68bb      	ldr	r3, [r7, #8]
 8003248:	689a      	ldr	r2, [r3, #8]
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	430a      	orrs	r2, r1
 8003250:	619a      	str	r2, [r3, #24]
 8003252:	e05a      	b.n	800330a <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2b04      	cmp	r3, #4
 8003258:	d11c      	bne.n	8003294 <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	6818      	ldr	r0, [r3, #0]
 800325e:	68bb      	ldr	r3, [r7, #8]
 8003260:	6819      	ldr	r1, [r3, #0]
 8003262:	68bb      	ldr	r3, [r7, #8]
 8003264:	685a      	ldr	r2, [r3, #4]
 8003266:	68bb      	ldr	r3, [r7, #8]
 8003268:	68db      	ldr	r3, [r3, #12]
 800326a:	f000 fcf4 	bl	8003c56 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	699a      	ldr	r2, [r3, #24]
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800327c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	6999      	ldr	r1, [r3, #24]
 8003284:	68bb      	ldr	r3, [r7, #8]
 8003286:	689b      	ldr	r3, [r3, #8]
 8003288:	021a      	lsls	r2, r3, #8
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	430a      	orrs	r2, r1
 8003290:	619a      	str	r2, [r3, #24]
 8003292:	e03a      	b.n	800330a <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2b08      	cmp	r3, #8
 8003298:	d11b      	bne.n	80032d2 <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	6818      	ldr	r0, [r3, #0]
 800329e:	68bb      	ldr	r3, [r7, #8]
 80032a0:	6819      	ldr	r1, [r3, #0]
 80032a2:	68bb      	ldr	r3, [r7, #8]
 80032a4:	685a      	ldr	r2, [r3, #4]
 80032a6:	68bb      	ldr	r3, [r7, #8]
 80032a8:	68db      	ldr	r3, [r3, #12]
 80032aa:	f000 fd41 	bl	8003d30 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	69da      	ldr	r2, [r3, #28]
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f022 020c 	bic.w	r2, r2, #12
 80032bc:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	69d9      	ldr	r1, [r3, #28]
 80032c4:	68bb      	ldr	r3, [r7, #8]
 80032c6:	689a      	ldr	r2, [r3, #8]
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	430a      	orrs	r2, r1
 80032ce:	61da      	str	r2, [r3, #28]
 80032d0:	e01b      	b.n	800330a <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	6818      	ldr	r0, [r3, #0]
 80032d6:	68bb      	ldr	r3, [r7, #8]
 80032d8:	6819      	ldr	r1, [r3, #0]
 80032da:	68bb      	ldr	r3, [r7, #8]
 80032dc:	685a      	ldr	r2, [r3, #4]
 80032de:	68bb      	ldr	r3, [r7, #8]
 80032e0:	68db      	ldr	r3, [r3, #12]
 80032e2:	f000 fd61 	bl	8003da8 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	69da      	ldr	r2, [r3, #28]
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80032f4:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	69d9      	ldr	r1, [r3, #28]
 80032fc:	68bb      	ldr	r3, [r7, #8]
 80032fe:	689b      	ldr	r3, [r3, #8]
 8003300:	021a      	lsls	r2, r3, #8
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	430a      	orrs	r2, r1
 8003308:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	2200      	movs	r2, #0
 800330e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003312:	2300      	movs	r3, #0
}
 8003314:	4618      	mov	r0, r3
 8003316:	3710      	adds	r7, #16
 8003318:	46bd      	mov	sp, r7
 800331a:	bd80      	pop	{r7, pc}

0800331c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b084      	sub	sp, #16
 8003320:	af00      	add	r7, sp, #0
 8003322:	60f8      	str	r0, [r7, #12]
 8003324:	60b9      	str	r1, [r7, #8]
 8003326:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800332e:	2b01      	cmp	r3, #1
 8003330:	d101      	bne.n	8003336 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003332:	2302      	movs	r3, #2
 8003334:	e0ac      	b.n	8003490 <HAL_TIM_PWM_ConfigChannel+0x174>
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	2201      	movs	r2, #1
 800333a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	2b0c      	cmp	r3, #12
 8003342:	f200 809f 	bhi.w	8003484 <HAL_TIM_PWM_ConfigChannel+0x168>
 8003346:	a201      	add	r2, pc, #4	; (adr r2, 800334c <HAL_TIM_PWM_ConfigChannel+0x30>)
 8003348:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800334c:	08003381 	.word	0x08003381
 8003350:	08003485 	.word	0x08003485
 8003354:	08003485 	.word	0x08003485
 8003358:	08003485 	.word	0x08003485
 800335c:	080033c1 	.word	0x080033c1
 8003360:	08003485 	.word	0x08003485
 8003364:	08003485 	.word	0x08003485
 8003368:	08003485 	.word	0x08003485
 800336c:	08003403 	.word	0x08003403
 8003370:	08003485 	.word	0x08003485
 8003374:	08003485 	.word	0x08003485
 8003378:	08003485 	.word	0x08003485
 800337c:	08003443 	.word	0x08003443
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	68b9      	ldr	r1, [r7, #8]
 8003386:	4618      	mov	r0, r3
 8003388:	f000 fa12 	bl	80037b0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	699a      	ldr	r2, [r3, #24]
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f042 0208 	orr.w	r2, r2, #8
 800339a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	699a      	ldr	r2, [r3, #24]
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f022 0204 	bic.w	r2, r2, #4
 80033aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	6999      	ldr	r1, [r3, #24]
 80033b2:	68bb      	ldr	r3, [r7, #8]
 80033b4:	691a      	ldr	r2, [r3, #16]
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	430a      	orrs	r2, r1
 80033bc:	619a      	str	r2, [r3, #24]
      break;
 80033be:	e062      	b.n	8003486 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	68b9      	ldr	r1, [r7, #8]
 80033c6:	4618      	mov	r0, r3
 80033c8:	f000 fa62 	bl	8003890 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	699a      	ldr	r2, [r3, #24]
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80033da:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	699a      	ldr	r2, [r3, #24]
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80033ea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	6999      	ldr	r1, [r3, #24]
 80033f2:	68bb      	ldr	r3, [r7, #8]
 80033f4:	691b      	ldr	r3, [r3, #16]
 80033f6:	021a      	lsls	r2, r3, #8
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	430a      	orrs	r2, r1
 80033fe:	619a      	str	r2, [r3, #24]
      break;
 8003400:	e041      	b.n	8003486 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	68b9      	ldr	r1, [r7, #8]
 8003408:	4618      	mov	r0, r3
 800340a:	f000 fab7 	bl	800397c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	69da      	ldr	r2, [r3, #28]
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f042 0208 	orr.w	r2, r2, #8
 800341c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	69da      	ldr	r2, [r3, #28]
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f022 0204 	bic.w	r2, r2, #4
 800342c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	69d9      	ldr	r1, [r3, #28]
 8003434:	68bb      	ldr	r3, [r7, #8]
 8003436:	691a      	ldr	r2, [r3, #16]
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	430a      	orrs	r2, r1
 800343e:	61da      	str	r2, [r3, #28]
      break;
 8003440:	e021      	b.n	8003486 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	68b9      	ldr	r1, [r7, #8]
 8003448:	4618      	mov	r0, r3
 800344a:	f000 fb0b 	bl	8003a64 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	69da      	ldr	r2, [r3, #28]
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800345c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	69da      	ldr	r2, [r3, #28]
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800346c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	69d9      	ldr	r1, [r3, #28]
 8003474:	68bb      	ldr	r3, [r7, #8]
 8003476:	691b      	ldr	r3, [r3, #16]
 8003478:	021a      	lsls	r2, r3, #8
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	430a      	orrs	r2, r1
 8003480:	61da      	str	r2, [r3, #28]
      break;
 8003482:	e000      	b.n	8003486 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8003484:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	2200      	movs	r2, #0
 800348a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800348e:	2300      	movs	r3, #0
}
 8003490:	4618      	mov	r0, r3
 8003492:	3710      	adds	r7, #16
 8003494:	46bd      	mov	sp, r7
 8003496:	bd80      	pop	{r7, pc}

08003498 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b084      	sub	sp, #16
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
 80034a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034a8:	2b01      	cmp	r3, #1
 80034aa:	d101      	bne.n	80034b0 <HAL_TIM_ConfigClockSource+0x18>
 80034ac:	2302      	movs	r3, #2
 80034ae:	e0b3      	b.n	8003618 <HAL_TIM_ConfigClockSource+0x180>
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2201      	movs	r2, #1
 80034b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2202      	movs	r2, #2
 80034bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	689b      	ldr	r3, [r3, #8]
 80034c6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80034ce:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80034d6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	68fa      	ldr	r2, [r7, #12]
 80034de:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80034e8:	d03e      	beq.n	8003568 <HAL_TIM_ConfigClockSource+0xd0>
 80034ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80034ee:	f200 8087 	bhi.w	8003600 <HAL_TIM_ConfigClockSource+0x168>
 80034f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034f6:	f000 8085 	beq.w	8003604 <HAL_TIM_ConfigClockSource+0x16c>
 80034fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034fe:	d87f      	bhi.n	8003600 <HAL_TIM_ConfigClockSource+0x168>
 8003500:	2b70      	cmp	r3, #112	; 0x70
 8003502:	d01a      	beq.n	800353a <HAL_TIM_ConfigClockSource+0xa2>
 8003504:	2b70      	cmp	r3, #112	; 0x70
 8003506:	d87b      	bhi.n	8003600 <HAL_TIM_ConfigClockSource+0x168>
 8003508:	2b60      	cmp	r3, #96	; 0x60
 800350a:	d050      	beq.n	80035ae <HAL_TIM_ConfigClockSource+0x116>
 800350c:	2b60      	cmp	r3, #96	; 0x60
 800350e:	d877      	bhi.n	8003600 <HAL_TIM_ConfigClockSource+0x168>
 8003510:	2b50      	cmp	r3, #80	; 0x50
 8003512:	d03c      	beq.n	800358e <HAL_TIM_ConfigClockSource+0xf6>
 8003514:	2b50      	cmp	r3, #80	; 0x50
 8003516:	d873      	bhi.n	8003600 <HAL_TIM_ConfigClockSource+0x168>
 8003518:	2b40      	cmp	r3, #64	; 0x40
 800351a:	d058      	beq.n	80035ce <HAL_TIM_ConfigClockSource+0x136>
 800351c:	2b40      	cmp	r3, #64	; 0x40
 800351e:	d86f      	bhi.n	8003600 <HAL_TIM_ConfigClockSource+0x168>
 8003520:	2b30      	cmp	r3, #48	; 0x30
 8003522:	d064      	beq.n	80035ee <HAL_TIM_ConfigClockSource+0x156>
 8003524:	2b30      	cmp	r3, #48	; 0x30
 8003526:	d86b      	bhi.n	8003600 <HAL_TIM_ConfigClockSource+0x168>
 8003528:	2b20      	cmp	r3, #32
 800352a:	d060      	beq.n	80035ee <HAL_TIM_ConfigClockSource+0x156>
 800352c:	2b20      	cmp	r3, #32
 800352e:	d867      	bhi.n	8003600 <HAL_TIM_ConfigClockSource+0x168>
 8003530:	2b00      	cmp	r3, #0
 8003532:	d05c      	beq.n	80035ee <HAL_TIM_ConfigClockSource+0x156>
 8003534:	2b10      	cmp	r3, #16
 8003536:	d05a      	beq.n	80035ee <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003538:	e062      	b.n	8003600 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6818      	ldr	r0, [r3, #0]
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	6899      	ldr	r1, [r3, #8]
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	685a      	ldr	r2, [r3, #4]
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	68db      	ldr	r3, [r3, #12]
 800354a:	f000 fc85 	bl	8003e58 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	689b      	ldr	r3, [r3, #8]
 8003554:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800355c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	68fa      	ldr	r2, [r7, #12]
 8003564:	609a      	str	r2, [r3, #8]
      break;
 8003566:	e04e      	b.n	8003606 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6818      	ldr	r0, [r3, #0]
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	6899      	ldr	r1, [r3, #8]
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	685a      	ldr	r2, [r3, #4]
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	68db      	ldr	r3, [r3, #12]
 8003578:	f000 fc6e 	bl	8003e58 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	689a      	ldr	r2, [r3, #8]
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800358a:	609a      	str	r2, [r3, #8]
      break;
 800358c:	e03b      	b.n	8003606 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6818      	ldr	r0, [r3, #0]
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	6859      	ldr	r1, [r3, #4]
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	68db      	ldr	r3, [r3, #12]
 800359a:	461a      	mov	r2, r3
 800359c:	f000 fb2c 	bl	8003bf8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	2150      	movs	r1, #80	; 0x50
 80035a6:	4618      	mov	r0, r3
 80035a8:	f000 fc3b 	bl	8003e22 <TIM_ITRx_SetConfig>
      break;
 80035ac:	e02b      	b.n	8003606 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6818      	ldr	r0, [r3, #0]
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	6859      	ldr	r1, [r3, #4]
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	68db      	ldr	r3, [r3, #12]
 80035ba:	461a      	mov	r2, r3
 80035bc:	f000 fb88 	bl	8003cd0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	2160      	movs	r1, #96	; 0x60
 80035c6:	4618      	mov	r0, r3
 80035c8:	f000 fc2b 	bl	8003e22 <TIM_ITRx_SetConfig>
      break;
 80035cc:	e01b      	b.n	8003606 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6818      	ldr	r0, [r3, #0]
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	6859      	ldr	r1, [r3, #4]
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	68db      	ldr	r3, [r3, #12]
 80035da:	461a      	mov	r2, r3
 80035dc:	f000 fb0c 	bl	8003bf8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	2140      	movs	r1, #64	; 0x40
 80035e6:	4618      	mov	r0, r3
 80035e8:	f000 fc1b 	bl	8003e22 <TIM_ITRx_SetConfig>
      break;
 80035ec:	e00b      	b.n	8003606 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681a      	ldr	r2, [r3, #0]
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	4619      	mov	r1, r3
 80035f8:	4610      	mov	r0, r2
 80035fa:	f000 fc12 	bl	8003e22 <TIM_ITRx_SetConfig>
        break;
 80035fe:	e002      	b.n	8003606 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003600:	bf00      	nop
 8003602:	e000      	b.n	8003606 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003604:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	2201      	movs	r2, #1
 800360a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	2200      	movs	r2, #0
 8003612:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003616:	2300      	movs	r3, #0
}
 8003618:	4618      	mov	r0, r3
 800361a:	3710      	adds	r7, #16
 800361c:	46bd      	mov	sp, r7
 800361e:	bd80      	pop	{r7, pc}

08003620 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003620:	b480      	push	{r7}
 8003622:	b083      	sub	sp, #12
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003628:	bf00      	nop
 800362a:	370c      	adds	r7, #12
 800362c:	46bd      	mov	sp, r7
 800362e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003632:	4770      	bx	lr

08003634 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003634:	b480      	push	{r7}
 8003636:	b083      	sub	sp, #12
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800363c:	bf00      	nop
 800363e:	370c      	adds	r7, #12
 8003640:	46bd      	mov	sp, r7
 8003642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003646:	4770      	bx	lr

08003648 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003648:	b480      	push	{r7}
 800364a:	b083      	sub	sp, #12
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003650:	bf00      	nop
 8003652:	370c      	adds	r7, #12
 8003654:	46bd      	mov	sp, r7
 8003656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365a:	4770      	bx	lr

0800365c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800365c:	b480      	push	{r7}
 800365e:	b083      	sub	sp, #12
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003664:	bf00      	nop
 8003666:	370c      	adds	r7, #12
 8003668:	46bd      	mov	sp, r7
 800366a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366e:	4770      	bx	lr

08003670 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003670:	b480      	push	{r7}
 8003672:	b085      	sub	sp, #20
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
 8003678:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	4a40      	ldr	r2, [pc, #256]	; (8003784 <TIM_Base_SetConfig+0x114>)
 8003684:	4293      	cmp	r3, r2
 8003686:	d013      	beq.n	80036b0 <TIM_Base_SetConfig+0x40>
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800368e:	d00f      	beq.n	80036b0 <TIM_Base_SetConfig+0x40>
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	4a3d      	ldr	r2, [pc, #244]	; (8003788 <TIM_Base_SetConfig+0x118>)
 8003694:	4293      	cmp	r3, r2
 8003696:	d00b      	beq.n	80036b0 <TIM_Base_SetConfig+0x40>
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	4a3c      	ldr	r2, [pc, #240]	; (800378c <TIM_Base_SetConfig+0x11c>)
 800369c:	4293      	cmp	r3, r2
 800369e:	d007      	beq.n	80036b0 <TIM_Base_SetConfig+0x40>
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	4a3b      	ldr	r2, [pc, #236]	; (8003790 <TIM_Base_SetConfig+0x120>)
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d003      	beq.n	80036b0 <TIM_Base_SetConfig+0x40>
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	4a3a      	ldr	r2, [pc, #232]	; (8003794 <TIM_Base_SetConfig+0x124>)
 80036ac:	4293      	cmp	r3, r2
 80036ae:	d108      	bne.n	80036c2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	685b      	ldr	r3, [r3, #4]
 80036bc:	68fa      	ldr	r2, [r7, #12]
 80036be:	4313      	orrs	r3, r2
 80036c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	4a2f      	ldr	r2, [pc, #188]	; (8003784 <TIM_Base_SetConfig+0x114>)
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d02b      	beq.n	8003722 <TIM_Base_SetConfig+0xb2>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036d0:	d027      	beq.n	8003722 <TIM_Base_SetConfig+0xb2>
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	4a2c      	ldr	r2, [pc, #176]	; (8003788 <TIM_Base_SetConfig+0x118>)
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d023      	beq.n	8003722 <TIM_Base_SetConfig+0xb2>
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	4a2b      	ldr	r2, [pc, #172]	; (800378c <TIM_Base_SetConfig+0x11c>)
 80036de:	4293      	cmp	r3, r2
 80036e0:	d01f      	beq.n	8003722 <TIM_Base_SetConfig+0xb2>
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	4a2a      	ldr	r2, [pc, #168]	; (8003790 <TIM_Base_SetConfig+0x120>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d01b      	beq.n	8003722 <TIM_Base_SetConfig+0xb2>
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	4a29      	ldr	r2, [pc, #164]	; (8003794 <TIM_Base_SetConfig+0x124>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d017      	beq.n	8003722 <TIM_Base_SetConfig+0xb2>
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	4a28      	ldr	r2, [pc, #160]	; (8003798 <TIM_Base_SetConfig+0x128>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d013      	beq.n	8003722 <TIM_Base_SetConfig+0xb2>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	4a27      	ldr	r2, [pc, #156]	; (800379c <TIM_Base_SetConfig+0x12c>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	d00f      	beq.n	8003722 <TIM_Base_SetConfig+0xb2>
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	4a26      	ldr	r2, [pc, #152]	; (80037a0 <TIM_Base_SetConfig+0x130>)
 8003706:	4293      	cmp	r3, r2
 8003708:	d00b      	beq.n	8003722 <TIM_Base_SetConfig+0xb2>
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	4a25      	ldr	r2, [pc, #148]	; (80037a4 <TIM_Base_SetConfig+0x134>)
 800370e:	4293      	cmp	r3, r2
 8003710:	d007      	beq.n	8003722 <TIM_Base_SetConfig+0xb2>
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	4a24      	ldr	r2, [pc, #144]	; (80037a8 <TIM_Base_SetConfig+0x138>)
 8003716:	4293      	cmp	r3, r2
 8003718:	d003      	beq.n	8003722 <TIM_Base_SetConfig+0xb2>
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	4a23      	ldr	r2, [pc, #140]	; (80037ac <TIM_Base_SetConfig+0x13c>)
 800371e:	4293      	cmp	r3, r2
 8003720:	d108      	bne.n	8003734 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003728:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	68db      	ldr	r3, [r3, #12]
 800372e:	68fa      	ldr	r2, [r7, #12]
 8003730:	4313      	orrs	r3, r2
 8003732:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	695b      	ldr	r3, [r3, #20]
 800373e:	4313      	orrs	r3, r2
 8003740:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	68fa      	ldr	r2, [r7, #12]
 8003746:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	689a      	ldr	r2, [r3, #8]
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	681a      	ldr	r2, [r3, #0]
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	4a0a      	ldr	r2, [pc, #40]	; (8003784 <TIM_Base_SetConfig+0x114>)
 800375c:	4293      	cmp	r3, r2
 800375e:	d003      	beq.n	8003768 <TIM_Base_SetConfig+0xf8>
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	4a0c      	ldr	r2, [pc, #48]	; (8003794 <TIM_Base_SetConfig+0x124>)
 8003764:	4293      	cmp	r3, r2
 8003766:	d103      	bne.n	8003770 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	691a      	ldr	r2, [r3, #16]
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2201      	movs	r2, #1
 8003774:	615a      	str	r2, [r3, #20]
}
 8003776:	bf00      	nop
 8003778:	3714      	adds	r7, #20
 800377a:	46bd      	mov	sp, r7
 800377c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003780:	4770      	bx	lr
 8003782:	bf00      	nop
 8003784:	40010000 	.word	0x40010000
 8003788:	40000400 	.word	0x40000400
 800378c:	40000800 	.word	0x40000800
 8003790:	40000c00 	.word	0x40000c00
 8003794:	40010400 	.word	0x40010400
 8003798:	40014000 	.word	0x40014000
 800379c:	40014400 	.word	0x40014400
 80037a0:	40014800 	.word	0x40014800
 80037a4:	40001800 	.word	0x40001800
 80037a8:	40001c00 	.word	0x40001c00
 80037ac:	40002000 	.word	0x40002000

080037b0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80037b0:	b480      	push	{r7}
 80037b2:	b087      	sub	sp, #28
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
 80037b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6a1b      	ldr	r3, [r3, #32]
 80037be:	f023 0201 	bic.w	r2, r3, #1
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6a1b      	ldr	r3, [r3, #32]
 80037ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	685b      	ldr	r3, [r3, #4]
 80037d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	699b      	ldr	r3, [r3, #24]
 80037d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	f023 0303 	bic.w	r3, r3, #3
 80037e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	68fa      	ldr	r2, [r7, #12]
 80037ee:	4313      	orrs	r3, r2
 80037f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80037f2:	697b      	ldr	r3, [r7, #20]
 80037f4:	f023 0302 	bic.w	r3, r3, #2
 80037f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	689b      	ldr	r3, [r3, #8]
 80037fe:	697a      	ldr	r2, [r7, #20]
 8003800:	4313      	orrs	r3, r2
 8003802:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	4a20      	ldr	r2, [pc, #128]	; (8003888 <TIM_OC1_SetConfig+0xd8>)
 8003808:	4293      	cmp	r3, r2
 800380a:	d003      	beq.n	8003814 <TIM_OC1_SetConfig+0x64>
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	4a1f      	ldr	r2, [pc, #124]	; (800388c <TIM_OC1_SetConfig+0xdc>)
 8003810:	4293      	cmp	r3, r2
 8003812:	d10c      	bne.n	800382e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003814:	697b      	ldr	r3, [r7, #20]
 8003816:	f023 0308 	bic.w	r3, r3, #8
 800381a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	68db      	ldr	r3, [r3, #12]
 8003820:	697a      	ldr	r2, [r7, #20]
 8003822:	4313      	orrs	r3, r2
 8003824:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003826:	697b      	ldr	r3, [r7, #20]
 8003828:	f023 0304 	bic.w	r3, r3, #4
 800382c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	4a15      	ldr	r2, [pc, #84]	; (8003888 <TIM_OC1_SetConfig+0xd8>)
 8003832:	4293      	cmp	r3, r2
 8003834:	d003      	beq.n	800383e <TIM_OC1_SetConfig+0x8e>
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	4a14      	ldr	r2, [pc, #80]	; (800388c <TIM_OC1_SetConfig+0xdc>)
 800383a:	4293      	cmp	r3, r2
 800383c:	d111      	bne.n	8003862 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800383e:	693b      	ldr	r3, [r7, #16]
 8003840:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003844:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003846:	693b      	ldr	r3, [r7, #16]
 8003848:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800384c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	695b      	ldr	r3, [r3, #20]
 8003852:	693a      	ldr	r2, [r7, #16]
 8003854:	4313      	orrs	r3, r2
 8003856:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	699b      	ldr	r3, [r3, #24]
 800385c:	693a      	ldr	r2, [r7, #16]
 800385e:	4313      	orrs	r3, r2
 8003860:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	693a      	ldr	r2, [r7, #16]
 8003866:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	68fa      	ldr	r2, [r7, #12]
 800386c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	685a      	ldr	r2, [r3, #4]
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	697a      	ldr	r2, [r7, #20]
 800387a:	621a      	str	r2, [r3, #32]
}
 800387c:	bf00      	nop
 800387e:	371c      	adds	r7, #28
 8003880:	46bd      	mov	sp, r7
 8003882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003886:	4770      	bx	lr
 8003888:	40010000 	.word	0x40010000
 800388c:	40010400 	.word	0x40010400

08003890 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003890:	b480      	push	{r7}
 8003892:	b087      	sub	sp, #28
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
 8003898:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6a1b      	ldr	r3, [r3, #32]
 800389e:	f023 0210 	bic.w	r2, r3, #16
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6a1b      	ldr	r3, [r3, #32]
 80038aa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	685b      	ldr	r3, [r3, #4]
 80038b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	699b      	ldr	r3, [r3, #24]
 80038b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80038be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	021b      	lsls	r3, r3, #8
 80038ce:	68fa      	ldr	r2, [r7, #12]
 80038d0:	4313      	orrs	r3, r2
 80038d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80038d4:	697b      	ldr	r3, [r7, #20]
 80038d6:	f023 0320 	bic.w	r3, r3, #32
 80038da:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	689b      	ldr	r3, [r3, #8]
 80038e0:	011b      	lsls	r3, r3, #4
 80038e2:	697a      	ldr	r2, [r7, #20]
 80038e4:	4313      	orrs	r3, r2
 80038e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	4a22      	ldr	r2, [pc, #136]	; (8003974 <TIM_OC2_SetConfig+0xe4>)
 80038ec:	4293      	cmp	r3, r2
 80038ee:	d003      	beq.n	80038f8 <TIM_OC2_SetConfig+0x68>
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	4a21      	ldr	r2, [pc, #132]	; (8003978 <TIM_OC2_SetConfig+0xe8>)
 80038f4:	4293      	cmp	r3, r2
 80038f6:	d10d      	bne.n	8003914 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80038f8:	697b      	ldr	r3, [r7, #20]
 80038fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80038fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	68db      	ldr	r3, [r3, #12]
 8003904:	011b      	lsls	r3, r3, #4
 8003906:	697a      	ldr	r2, [r7, #20]
 8003908:	4313      	orrs	r3, r2
 800390a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800390c:	697b      	ldr	r3, [r7, #20]
 800390e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003912:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	4a17      	ldr	r2, [pc, #92]	; (8003974 <TIM_OC2_SetConfig+0xe4>)
 8003918:	4293      	cmp	r3, r2
 800391a:	d003      	beq.n	8003924 <TIM_OC2_SetConfig+0x94>
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	4a16      	ldr	r2, [pc, #88]	; (8003978 <TIM_OC2_SetConfig+0xe8>)
 8003920:	4293      	cmp	r3, r2
 8003922:	d113      	bne.n	800394c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003924:	693b      	ldr	r3, [r7, #16]
 8003926:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800392a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800392c:	693b      	ldr	r3, [r7, #16]
 800392e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003932:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	695b      	ldr	r3, [r3, #20]
 8003938:	009b      	lsls	r3, r3, #2
 800393a:	693a      	ldr	r2, [r7, #16]
 800393c:	4313      	orrs	r3, r2
 800393e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	699b      	ldr	r3, [r3, #24]
 8003944:	009b      	lsls	r3, r3, #2
 8003946:	693a      	ldr	r2, [r7, #16]
 8003948:	4313      	orrs	r3, r2
 800394a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	693a      	ldr	r2, [r7, #16]
 8003950:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	68fa      	ldr	r2, [r7, #12]
 8003956:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	685a      	ldr	r2, [r3, #4]
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	697a      	ldr	r2, [r7, #20]
 8003964:	621a      	str	r2, [r3, #32]
}
 8003966:	bf00      	nop
 8003968:	371c      	adds	r7, #28
 800396a:	46bd      	mov	sp, r7
 800396c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003970:	4770      	bx	lr
 8003972:	bf00      	nop
 8003974:	40010000 	.word	0x40010000
 8003978:	40010400 	.word	0x40010400

0800397c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800397c:	b480      	push	{r7}
 800397e:	b087      	sub	sp, #28
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
 8003984:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6a1b      	ldr	r3, [r3, #32]
 800398a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6a1b      	ldr	r3, [r3, #32]
 8003996:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	685b      	ldr	r3, [r3, #4]
 800399c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	69db      	ldr	r3, [r3, #28]
 80039a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	f023 0303 	bic.w	r3, r3, #3
 80039b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	68fa      	ldr	r2, [r7, #12]
 80039ba:	4313      	orrs	r3, r2
 80039bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80039be:	697b      	ldr	r3, [r7, #20]
 80039c0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80039c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	689b      	ldr	r3, [r3, #8]
 80039ca:	021b      	lsls	r3, r3, #8
 80039cc:	697a      	ldr	r2, [r7, #20]
 80039ce:	4313      	orrs	r3, r2
 80039d0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	4a21      	ldr	r2, [pc, #132]	; (8003a5c <TIM_OC3_SetConfig+0xe0>)
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d003      	beq.n	80039e2 <TIM_OC3_SetConfig+0x66>
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	4a20      	ldr	r2, [pc, #128]	; (8003a60 <TIM_OC3_SetConfig+0xe4>)
 80039de:	4293      	cmp	r3, r2
 80039e0:	d10d      	bne.n	80039fe <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80039e2:	697b      	ldr	r3, [r7, #20]
 80039e4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80039e8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	68db      	ldr	r3, [r3, #12]
 80039ee:	021b      	lsls	r3, r3, #8
 80039f0:	697a      	ldr	r2, [r7, #20]
 80039f2:	4313      	orrs	r3, r2
 80039f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80039f6:	697b      	ldr	r3, [r7, #20]
 80039f8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80039fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	4a16      	ldr	r2, [pc, #88]	; (8003a5c <TIM_OC3_SetConfig+0xe0>)
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d003      	beq.n	8003a0e <TIM_OC3_SetConfig+0x92>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	4a15      	ldr	r2, [pc, #84]	; (8003a60 <TIM_OC3_SetConfig+0xe4>)
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d113      	bne.n	8003a36 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003a0e:	693b      	ldr	r3, [r7, #16]
 8003a10:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003a14:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003a16:	693b      	ldr	r3, [r7, #16]
 8003a18:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003a1c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	695b      	ldr	r3, [r3, #20]
 8003a22:	011b      	lsls	r3, r3, #4
 8003a24:	693a      	ldr	r2, [r7, #16]
 8003a26:	4313      	orrs	r3, r2
 8003a28:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	699b      	ldr	r3, [r3, #24]
 8003a2e:	011b      	lsls	r3, r3, #4
 8003a30:	693a      	ldr	r2, [r7, #16]
 8003a32:	4313      	orrs	r3, r2
 8003a34:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	693a      	ldr	r2, [r7, #16]
 8003a3a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	68fa      	ldr	r2, [r7, #12]
 8003a40:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	685a      	ldr	r2, [r3, #4]
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	697a      	ldr	r2, [r7, #20]
 8003a4e:	621a      	str	r2, [r3, #32]
}
 8003a50:	bf00      	nop
 8003a52:	371c      	adds	r7, #28
 8003a54:	46bd      	mov	sp, r7
 8003a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5a:	4770      	bx	lr
 8003a5c:	40010000 	.word	0x40010000
 8003a60:	40010400 	.word	0x40010400

08003a64 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003a64:	b480      	push	{r7}
 8003a66:	b087      	sub	sp, #28
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
 8003a6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6a1b      	ldr	r3, [r3, #32]
 8003a72:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6a1b      	ldr	r3, [r3, #32]
 8003a7e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	685b      	ldr	r3, [r3, #4]
 8003a84:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	69db      	ldr	r3, [r3, #28]
 8003a8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a9a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	021b      	lsls	r3, r3, #8
 8003aa2:	68fa      	ldr	r2, [r7, #12]
 8003aa4:	4313      	orrs	r3, r2
 8003aa6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003aa8:	693b      	ldr	r3, [r7, #16]
 8003aaa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003aae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	689b      	ldr	r3, [r3, #8]
 8003ab4:	031b      	lsls	r3, r3, #12
 8003ab6:	693a      	ldr	r2, [r7, #16]
 8003ab8:	4313      	orrs	r3, r2
 8003aba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	4a12      	ldr	r2, [pc, #72]	; (8003b08 <TIM_OC4_SetConfig+0xa4>)
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	d003      	beq.n	8003acc <TIM_OC4_SetConfig+0x68>
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	4a11      	ldr	r2, [pc, #68]	; (8003b0c <TIM_OC4_SetConfig+0xa8>)
 8003ac8:	4293      	cmp	r3, r2
 8003aca:	d109      	bne.n	8003ae0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003acc:	697b      	ldr	r3, [r7, #20]
 8003ace:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003ad2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	695b      	ldr	r3, [r3, #20]
 8003ad8:	019b      	lsls	r3, r3, #6
 8003ada:	697a      	ldr	r2, [r7, #20]
 8003adc:	4313      	orrs	r3, r2
 8003ade:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	697a      	ldr	r2, [r7, #20]
 8003ae4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	68fa      	ldr	r2, [r7, #12]
 8003aea:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	685a      	ldr	r2, [r3, #4]
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	693a      	ldr	r2, [r7, #16]
 8003af8:	621a      	str	r2, [r3, #32]
}
 8003afa:	bf00      	nop
 8003afc:	371c      	adds	r7, #28
 8003afe:	46bd      	mov	sp, r7
 8003b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b04:	4770      	bx	lr
 8003b06:	bf00      	nop
 8003b08:	40010000 	.word	0x40010000
 8003b0c:	40010400 	.word	0x40010400

08003b10 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8003b10:	b480      	push	{r7}
 8003b12:	b087      	sub	sp, #28
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	60f8      	str	r0, [r7, #12]
 8003b18:	60b9      	str	r1, [r7, #8]
 8003b1a:	607a      	str	r2, [r7, #4]
 8003b1c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	6a1b      	ldr	r3, [r3, #32]
 8003b22:	f023 0201 	bic.w	r2, r3, #1
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	699b      	ldr	r3, [r3, #24]
 8003b2e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	6a1b      	ldr	r3, [r3, #32]
 8003b34:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	4a28      	ldr	r2, [pc, #160]	; (8003bdc <TIM_TI1_SetConfig+0xcc>)
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d01b      	beq.n	8003b76 <TIM_TI1_SetConfig+0x66>
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b44:	d017      	beq.n	8003b76 <TIM_TI1_SetConfig+0x66>
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	4a25      	ldr	r2, [pc, #148]	; (8003be0 <TIM_TI1_SetConfig+0xd0>)
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	d013      	beq.n	8003b76 <TIM_TI1_SetConfig+0x66>
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	4a24      	ldr	r2, [pc, #144]	; (8003be4 <TIM_TI1_SetConfig+0xd4>)
 8003b52:	4293      	cmp	r3, r2
 8003b54:	d00f      	beq.n	8003b76 <TIM_TI1_SetConfig+0x66>
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	4a23      	ldr	r2, [pc, #140]	; (8003be8 <TIM_TI1_SetConfig+0xd8>)
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	d00b      	beq.n	8003b76 <TIM_TI1_SetConfig+0x66>
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	4a22      	ldr	r2, [pc, #136]	; (8003bec <TIM_TI1_SetConfig+0xdc>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d007      	beq.n	8003b76 <TIM_TI1_SetConfig+0x66>
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	4a21      	ldr	r2, [pc, #132]	; (8003bf0 <TIM_TI1_SetConfig+0xe0>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d003      	beq.n	8003b76 <TIM_TI1_SetConfig+0x66>
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	4a20      	ldr	r2, [pc, #128]	; (8003bf4 <TIM_TI1_SetConfig+0xe4>)
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d101      	bne.n	8003b7a <TIM_TI1_SetConfig+0x6a>
 8003b76:	2301      	movs	r3, #1
 8003b78:	e000      	b.n	8003b7c <TIM_TI1_SetConfig+0x6c>
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d008      	beq.n	8003b92 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8003b80:	697b      	ldr	r3, [r7, #20]
 8003b82:	f023 0303 	bic.w	r3, r3, #3
 8003b86:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8003b88:	697a      	ldr	r2, [r7, #20]
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	4313      	orrs	r3, r2
 8003b8e:	617b      	str	r3, [r7, #20]
 8003b90:	e003      	b.n	8003b9a <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8003b92:	697b      	ldr	r3, [r7, #20]
 8003b94:	f043 0301 	orr.w	r3, r3, #1
 8003b98:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003b9a:	697b      	ldr	r3, [r7, #20]
 8003b9c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003ba0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	011b      	lsls	r3, r3, #4
 8003ba6:	b2db      	uxtb	r3, r3
 8003ba8:	697a      	ldr	r2, [r7, #20]
 8003baa:	4313      	orrs	r3, r2
 8003bac:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003bae:	693b      	ldr	r3, [r7, #16]
 8003bb0:	f023 030a 	bic.w	r3, r3, #10
 8003bb4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8003bb6:	68bb      	ldr	r3, [r7, #8]
 8003bb8:	f003 030a 	and.w	r3, r3, #10
 8003bbc:	693a      	ldr	r2, [r7, #16]
 8003bbe:	4313      	orrs	r3, r2
 8003bc0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	697a      	ldr	r2, [r7, #20]
 8003bc6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	693a      	ldr	r2, [r7, #16]
 8003bcc:	621a      	str	r2, [r3, #32]
}
 8003bce:	bf00      	nop
 8003bd0:	371c      	adds	r7, #28
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd8:	4770      	bx	lr
 8003bda:	bf00      	nop
 8003bdc:	40010000 	.word	0x40010000
 8003be0:	40000400 	.word	0x40000400
 8003be4:	40000800 	.word	0x40000800
 8003be8:	40000c00 	.word	0x40000c00
 8003bec:	40010400 	.word	0x40010400
 8003bf0:	40014000 	.word	0x40014000
 8003bf4:	40001800 	.word	0x40001800

08003bf8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003bf8:	b480      	push	{r7}
 8003bfa:	b087      	sub	sp, #28
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	60f8      	str	r0, [r7, #12]
 8003c00:	60b9      	str	r1, [r7, #8]
 8003c02:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	6a1b      	ldr	r3, [r3, #32]
 8003c08:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	6a1b      	ldr	r3, [r3, #32]
 8003c0e:	f023 0201 	bic.w	r2, r3, #1
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	699b      	ldr	r3, [r3, #24]
 8003c1a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003c1c:	693b      	ldr	r3, [r7, #16]
 8003c1e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003c22:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	011b      	lsls	r3, r3, #4
 8003c28:	693a      	ldr	r2, [r7, #16]
 8003c2a:	4313      	orrs	r3, r2
 8003c2c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003c2e:	697b      	ldr	r3, [r7, #20]
 8003c30:	f023 030a 	bic.w	r3, r3, #10
 8003c34:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003c36:	697a      	ldr	r2, [r7, #20]
 8003c38:	68bb      	ldr	r3, [r7, #8]
 8003c3a:	4313      	orrs	r3, r2
 8003c3c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	693a      	ldr	r2, [r7, #16]
 8003c42:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	697a      	ldr	r2, [r7, #20]
 8003c48:	621a      	str	r2, [r3, #32]
}
 8003c4a:	bf00      	nop
 8003c4c:	371c      	adds	r7, #28
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c54:	4770      	bx	lr

08003c56 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003c56:	b480      	push	{r7}
 8003c58:	b087      	sub	sp, #28
 8003c5a:	af00      	add	r7, sp, #0
 8003c5c:	60f8      	str	r0, [r7, #12]
 8003c5e:	60b9      	str	r1, [r7, #8]
 8003c60:	607a      	str	r2, [r7, #4]
 8003c62:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	6a1b      	ldr	r3, [r3, #32]
 8003c68:	f023 0210 	bic.w	r2, r3, #16
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	699b      	ldr	r3, [r3, #24]
 8003c74:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	6a1b      	ldr	r3, [r3, #32]
 8003c7a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8003c7c:	697b      	ldr	r3, [r7, #20]
 8003c7e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c82:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	021b      	lsls	r3, r3, #8
 8003c88:	697a      	ldr	r2, [r7, #20]
 8003c8a:	4313      	orrs	r3, r2
 8003c8c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003c8e:	697b      	ldr	r3, [r7, #20]
 8003c90:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003c94:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	031b      	lsls	r3, r3, #12
 8003c9a:	b29b      	uxth	r3, r3
 8003c9c:	697a      	ldr	r2, [r7, #20]
 8003c9e:	4313      	orrs	r3, r2
 8003ca0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003ca2:	693b      	ldr	r3, [r7, #16]
 8003ca4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003ca8:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8003caa:	68bb      	ldr	r3, [r7, #8]
 8003cac:	011b      	lsls	r3, r3, #4
 8003cae:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8003cb2:	693a      	ldr	r2, [r7, #16]
 8003cb4:	4313      	orrs	r3, r2
 8003cb6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	697a      	ldr	r2, [r7, #20]
 8003cbc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	693a      	ldr	r2, [r7, #16]
 8003cc2:	621a      	str	r2, [r3, #32]
}
 8003cc4:	bf00      	nop
 8003cc6:	371c      	adds	r7, #28
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cce:	4770      	bx	lr

08003cd0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003cd0:	b480      	push	{r7}
 8003cd2:	b087      	sub	sp, #28
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	60f8      	str	r0, [r7, #12]
 8003cd8:	60b9      	str	r1, [r7, #8]
 8003cda:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	6a1b      	ldr	r3, [r3, #32]
 8003ce0:	f023 0210 	bic.w	r2, r3, #16
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	699b      	ldr	r3, [r3, #24]
 8003cec:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	6a1b      	ldr	r3, [r3, #32]
 8003cf2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003cf4:	697b      	ldr	r3, [r7, #20]
 8003cf6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003cfa:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	031b      	lsls	r3, r3, #12
 8003d00:	697a      	ldr	r2, [r7, #20]
 8003d02:	4313      	orrs	r3, r2
 8003d04:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003d06:	693b      	ldr	r3, [r7, #16]
 8003d08:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003d0c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003d0e:	68bb      	ldr	r3, [r7, #8]
 8003d10:	011b      	lsls	r3, r3, #4
 8003d12:	693a      	ldr	r2, [r7, #16]
 8003d14:	4313      	orrs	r3, r2
 8003d16:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	697a      	ldr	r2, [r7, #20]
 8003d1c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	693a      	ldr	r2, [r7, #16]
 8003d22:	621a      	str	r2, [r3, #32]
}
 8003d24:	bf00      	nop
 8003d26:	371c      	adds	r7, #28
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2e:	4770      	bx	lr

08003d30 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003d30:	b480      	push	{r7}
 8003d32:	b087      	sub	sp, #28
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	60f8      	str	r0, [r7, #12]
 8003d38:	60b9      	str	r1, [r7, #8]
 8003d3a:	607a      	str	r2, [r7, #4]
 8003d3c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	6a1b      	ldr	r3, [r3, #32]
 8003d42:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	69db      	ldr	r3, [r3, #28]
 8003d4e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	6a1b      	ldr	r3, [r3, #32]
 8003d54:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8003d56:	697b      	ldr	r3, [r7, #20]
 8003d58:	f023 0303 	bic.w	r3, r3, #3
 8003d5c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8003d5e:	697a      	ldr	r2, [r7, #20]
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	4313      	orrs	r3, r2
 8003d64:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8003d66:	697b      	ldr	r3, [r7, #20]
 8003d68:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003d6c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8003d6e:	683b      	ldr	r3, [r7, #0]
 8003d70:	011b      	lsls	r3, r3, #4
 8003d72:	b2db      	uxtb	r3, r3
 8003d74:	697a      	ldr	r2, [r7, #20]
 8003d76:	4313      	orrs	r3, r2
 8003d78:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8003d7a:	693b      	ldr	r3, [r7, #16]
 8003d7c:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8003d80:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8003d82:	68bb      	ldr	r3, [r7, #8]
 8003d84:	021b      	lsls	r3, r3, #8
 8003d86:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8003d8a:	693a      	ldr	r2, [r7, #16]
 8003d8c:	4313      	orrs	r3, r2
 8003d8e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	697a      	ldr	r2, [r7, #20]
 8003d94:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	693a      	ldr	r2, [r7, #16]
 8003d9a:	621a      	str	r2, [r3, #32]
}
 8003d9c:	bf00      	nop
 8003d9e:	371c      	adds	r7, #28
 8003da0:	46bd      	mov	sp, r7
 8003da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da6:	4770      	bx	lr

08003da8 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003da8:	b480      	push	{r7}
 8003daa:	b087      	sub	sp, #28
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	60f8      	str	r0, [r7, #12]
 8003db0:	60b9      	str	r1, [r7, #8]
 8003db2:	607a      	str	r2, [r7, #4]
 8003db4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	6a1b      	ldr	r3, [r3, #32]
 8003dba:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	69db      	ldr	r3, [r3, #28]
 8003dc6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	6a1b      	ldr	r3, [r3, #32]
 8003dcc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8003dce:	697b      	ldr	r3, [r7, #20]
 8003dd0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003dd4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	021b      	lsls	r3, r3, #8
 8003dda:	697a      	ldr	r2, [r7, #20]
 8003ddc:	4313      	orrs	r3, r2
 8003dde:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8003de0:	697b      	ldr	r3, [r7, #20]
 8003de2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003de6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	031b      	lsls	r3, r3, #12
 8003dec:	b29b      	uxth	r3, r3
 8003dee:	697a      	ldr	r2, [r7, #20]
 8003df0:	4313      	orrs	r3, r2
 8003df2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8003df4:	693b      	ldr	r3, [r7, #16]
 8003df6:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8003dfa:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8003dfc:	68bb      	ldr	r3, [r7, #8]
 8003dfe:	031b      	lsls	r3, r3, #12
 8003e00:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8003e04:	693a      	ldr	r2, [r7, #16]
 8003e06:	4313      	orrs	r3, r2
 8003e08:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	697a      	ldr	r2, [r7, #20]
 8003e0e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	693a      	ldr	r2, [r7, #16]
 8003e14:	621a      	str	r2, [r3, #32]
}
 8003e16:	bf00      	nop
 8003e18:	371c      	adds	r7, #28
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e20:	4770      	bx	lr

08003e22 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003e22:	b480      	push	{r7}
 8003e24:	b085      	sub	sp, #20
 8003e26:	af00      	add	r7, sp, #0
 8003e28:	6078      	str	r0, [r7, #4]
 8003e2a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	689b      	ldr	r3, [r3, #8]
 8003e30:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e38:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003e3a:	683a      	ldr	r2, [r7, #0]
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	4313      	orrs	r3, r2
 8003e40:	f043 0307 	orr.w	r3, r3, #7
 8003e44:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	68fa      	ldr	r2, [r7, #12]
 8003e4a:	609a      	str	r2, [r3, #8]
}
 8003e4c:	bf00      	nop
 8003e4e:	3714      	adds	r7, #20
 8003e50:	46bd      	mov	sp, r7
 8003e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e56:	4770      	bx	lr

08003e58 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003e58:	b480      	push	{r7}
 8003e5a:	b087      	sub	sp, #28
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	60f8      	str	r0, [r7, #12]
 8003e60:	60b9      	str	r1, [r7, #8]
 8003e62:	607a      	str	r2, [r7, #4]
 8003e64:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	689b      	ldr	r3, [r3, #8]
 8003e6a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e6c:	697b      	ldr	r3, [r7, #20]
 8003e6e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003e72:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	021a      	lsls	r2, r3, #8
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	431a      	orrs	r2, r3
 8003e7c:	68bb      	ldr	r3, [r7, #8]
 8003e7e:	4313      	orrs	r3, r2
 8003e80:	697a      	ldr	r2, [r7, #20]
 8003e82:	4313      	orrs	r3, r2
 8003e84:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	697a      	ldr	r2, [r7, #20]
 8003e8a:	609a      	str	r2, [r3, #8]
}
 8003e8c:	bf00      	nop
 8003e8e:	371c      	adds	r7, #28
 8003e90:	46bd      	mov	sp, r7
 8003e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e96:	4770      	bx	lr

08003e98 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003e98:	b480      	push	{r7}
 8003e9a:	b085      	sub	sp, #20
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
 8003ea0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ea8:	2b01      	cmp	r3, #1
 8003eaa:	d101      	bne.n	8003eb0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003eac:	2302      	movs	r3, #2
 8003eae:	e05a      	b.n	8003f66 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2201      	movs	r2, #1
 8003eb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2202      	movs	r2, #2
 8003ebc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	685b      	ldr	r3, [r3, #4]
 8003ec6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	689b      	ldr	r3, [r3, #8]
 8003ece:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ed6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	68fa      	ldr	r2, [r7, #12]
 8003ede:	4313      	orrs	r3, r2
 8003ee0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	68fa      	ldr	r2, [r7, #12]
 8003ee8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	4a21      	ldr	r2, [pc, #132]	; (8003f74 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	d022      	beq.n	8003f3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003efc:	d01d      	beq.n	8003f3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	4a1d      	ldr	r2, [pc, #116]	; (8003f78 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003f04:	4293      	cmp	r3, r2
 8003f06:	d018      	beq.n	8003f3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	4a1b      	ldr	r2, [pc, #108]	; (8003f7c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d013      	beq.n	8003f3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	4a1a      	ldr	r2, [pc, #104]	; (8003f80 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d00e      	beq.n	8003f3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	4a18      	ldr	r2, [pc, #96]	; (8003f84 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d009      	beq.n	8003f3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	4a17      	ldr	r2, [pc, #92]	; (8003f88 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d004      	beq.n	8003f3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	4a15      	ldr	r2, [pc, #84]	; (8003f8c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d10c      	bne.n	8003f54 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003f3a:	68bb      	ldr	r3, [r7, #8]
 8003f3c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003f40:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	685b      	ldr	r3, [r3, #4]
 8003f46:	68ba      	ldr	r2, [r7, #8]
 8003f48:	4313      	orrs	r3, r2
 8003f4a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	68ba      	ldr	r2, [r7, #8]
 8003f52:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2201      	movs	r2, #1
 8003f58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2200      	movs	r2, #0
 8003f60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003f64:	2300      	movs	r3, #0
}
 8003f66:	4618      	mov	r0, r3
 8003f68:	3714      	adds	r7, #20
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f70:	4770      	bx	lr
 8003f72:	bf00      	nop
 8003f74:	40010000 	.word	0x40010000
 8003f78:	40000400 	.word	0x40000400
 8003f7c:	40000800 	.word	0x40000800
 8003f80:	40000c00 	.word	0x40000c00
 8003f84:	40010400 	.word	0x40010400
 8003f88:	40014000 	.word	0x40014000
 8003f8c:	40001800 	.word	0x40001800

08003f90 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003f90:	b480      	push	{r7}
 8003f92:	b085      	sub	sp, #20
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
 8003f98:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003fa4:	2b01      	cmp	r3, #1
 8003fa6:	d101      	bne.n	8003fac <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003fa8:	2302      	movs	r3, #2
 8003faa:	e03d      	b.n	8004028 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2201      	movs	r2, #1
 8003fb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	68db      	ldr	r3, [r3, #12]
 8003fbe:	4313      	orrs	r3, r2
 8003fc0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	689b      	ldr	r3, [r3, #8]
 8003fcc:	4313      	orrs	r3, r2
 8003fce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003fd6:	683b      	ldr	r3, [r7, #0]
 8003fd8:	685b      	ldr	r3, [r3, #4]
 8003fda:	4313      	orrs	r3, r2
 8003fdc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	4313      	orrs	r3, r2
 8003fea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	691b      	ldr	r3, [r3, #16]
 8003ff6:	4313      	orrs	r3, r2
 8003ff8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004000:	683b      	ldr	r3, [r7, #0]
 8004002:	695b      	ldr	r3, [r3, #20]
 8004004:	4313      	orrs	r3, r2
 8004006:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	69db      	ldr	r3, [r3, #28]
 8004012:	4313      	orrs	r3, r2
 8004014:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	68fa      	ldr	r2, [r7, #12]
 800401c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	2200      	movs	r2, #0
 8004022:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004026:	2300      	movs	r3, #0
}
 8004028:	4618      	mov	r0, r3
 800402a:	3714      	adds	r7, #20
 800402c:	46bd      	mov	sp, r7
 800402e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004032:	4770      	bx	lr

08004034 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004034:	b480      	push	{r7}
 8004036:	b083      	sub	sp, #12
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800403c:	bf00      	nop
 800403e:	370c      	adds	r7, #12
 8004040:	46bd      	mov	sp, r7
 8004042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004046:	4770      	bx	lr

08004048 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004048:	b480      	push	{r7}
 800404a:	b083      	sub	sp, #12
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004050:	bf00      	nop
 8004052:	370c      	adds	r7, #12
 8004054:	46bd      	mov	sp, r7
 8004056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405a:	4770      	bx	lr

0800405c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800405c:	b580      	push	{r7, lr}
 800405e:	b082      	sub	sp, #8
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2b00      	cmp	r3, #0
 8004068:	d101      	bne.n	800406e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800406a:	2301      	movs	r3, #1
 800406c:	e03f      	b.n	80040ee <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004074:	b2db      	uxtb	r3, r3
 8004076:	2b00      	cmp	r3, #0
 8004078:	d106      	bne.n	8004088 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	2200      	movs	r2, #0
 800407e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004082:	6878      	ldr	r0, [r7, #4]
 8004084:	f7fc ffcc 	bl	8001020 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2224      	movs	r2, #36	; 0x24
 800408c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	68da      	ldr	r2, [r3, #12]
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800409e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80040a0:	6878      	ldr	r0, [r7, #4]
 80040a2:	f000 f905 	bl	80042b0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	691a      	ldr	r2, [r3, #16]
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80040b4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	695a      	ldr	r2, [r3, #20]
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80040c4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	68da      	ldr	r2, [r3, #12]
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80040d4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2200      	movs	r2, #0
 80040da:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2220      	movs	r2, #32
 80040e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2220      	movs	r2, #32
 80040e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80040ec:	2300      	movs	r3, #0
}
 80040ee:	4618      	mov	r0, r3
 80040f0:	3708      	adds	r7, #8
 80040f2:	46bd      	mov	sp, r7
 80040f4:	bd80      	pop	{r7, pc}

080040f6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80040f6:	b580      	push	{r7, lr}
 80040f8:	b08a      	sub	sp, #40	; 0x28
 80040fa:	af02      	add	r7, sp, #8
 80040fc:	60f8      	str	r0, [r7, #12]
 80040fe:	60b9      	str	r1, [r7, #8]
 8004100:	603b      	str	r3, [r7, #0]
 8004102:	4613      	mov	r3, r2
 8004104:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004106:	2300      	movs	r3, #0
 8004108:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004110:	b2db      	uxtb	r3, r3
 8004112:	2b20      	cmp	r3, #32
 8004114:	d17c      	bne.n	8004210 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004116:	68bb      	ldr	r3, [r7, #8]
 8004118:	2b00      	cmp	r3, #0
 800411a:	d002      	beq.n	8004122 <HAL_UART_Transmit+0x2c>
 800411c:	88fb      	ldrh	r3, [r7, #6]
 800411e:	2b00      	cmp	r3, #0
 8004120:	d101      	bne.n	8004126 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004122:	2301      	movs	r3, #1
 8004124:	e075      	b.n	8004212 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800412c:	2b01      	cmp	r3, #1
 800412e:	d101      	bne.n	8004134 <HAL_UART_Transmit+0x3e>
 8004130:	2302      	movs	r3, #2
 8004132:	e06e      	b.n	8004212 <HAL_UART_Transmit+0x11c>
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	2201      	movs	r2, #1
 8004138:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	2200      	movs	r2, #0
 8004140:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	2221      	movs	r2, #33	; 0x21
 8004146:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800414a:	f7fd f977 	bl	800143c <HAL_GetTick>
 800414e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	88fa      	ldrh	r2, [r7, #6]
 8004154:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	88fa      	ldrh	r2, [r7, #6]
 800415a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	689b      	ldr	r3, [r3, #8]
 8004160:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004164:	d108      	bne.n	8004178 <HAL_UART_Transmit+0x82>
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	691b      	ldr	r3, [r3, #16]
 800416a:	2b00      	cmp	r3, #0
 800416c:	d104      	bne.n	8004178 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800416e:	2300      	movs	r3, #0
 8004170:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004172:	68bb      	ldr	r3, [r7, #8]
 8004174:	61bb      	str	r3, [r7, #24]
 8004176:	e003      	b.n	8004180 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004178:	68bb      	ldr	r3, [r7, #8]
 800417a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800417c:	2300      	movs	r3, #0
 800417e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	2200      	movs	r2, #0
 8004184:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004188:	e02a      	b.n	80041e0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	9300      	str	r3, [sp, #0]
 800418e:	697b      	ldr	r3, [r7, #20]
 8004190:	2200      	movs	r2, #0
 8004192:	2180      	movs	r1, #128	; 0x80
 8004194:	68f8      	ldr	r0, [r7, #12]
 8004196:	f000 f840 	bl	800421a <UART_WaitOnFlagUntilTimeout>
 800419a:	4603      	mov	r3, r0
 800419c:	2b00      	cmp	r3, #0
 800419e:	d001      	beq.n	80041a4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80041a0:	2303      	movs	r3, #3
 80041a2:	e036      	b.n	8004212 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80041a4:	69fb      	ldr	r3, [r7, #28]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d10b      	bne.n	80041c2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80041aa:	69bb      	ldr	r3, [r7, #24]
 80041ac:	881b      	ldrh	r3, [r3, #0]
 80041ae:	461a      	mov	r2, r3
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80041b8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80041ba:	69bb      	ldr	r3, [r7, #24]
 80041bc:	3302      	adds	r3, #2
 80041be:	61bb      	str	r3, [r7, #24]
 80041c0:	e007      	b.n	80041d2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80041c2:	69fb      	ldr	r3, [r7, #28]
 80041c4:	781a      	ldrb	r2, [r3, #0]
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80041cc:	69fb      	ldr	r3, [r7, #28]
 80041ce:	3301      	adds	r3, #1
 80041d0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80041d6:	b29b      	uxth	r3, r3
 80041d8:	3b01      	subs	r3, #1
 80041da:	b29a      	uxth	r2, r3
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80041e4:	b29b      	uxth	r3, r3
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d1cf      	bne.n	800418a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	9300      	str	r3, [sp, #0]
 80041ee:	697b      	ldr	r3, [r7, #20]
 80041f0:	2200      	movs	r2, #0
 80041f2:	2140      	movs	r1, #64	; 0x40
 80041f4:	68f8      	ldr	r0, [r7, #12]
 80041f6:	f000 f810 	bl	800421a <UART_WaitOnFlagUntilTimeout>
 80041fa:	4603      	mov	r3, r0
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d001      	beq.n	8004204 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004200:	2303      	movs	r3, #3
 8004202:	e006      	b.n	8004212 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	2220      	movs	r2, #32
 8004208:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800420c:	2300      	movs	r3, #0
 800420e:	e000      	b.n	8004212 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004210:	2302      	movs	r3, #2
  }
}
 8004212:	4618      	mov	r0, r3
 8004214:	3720      	adds	r7, #32
 8004216:	46bd      	mov	sp, r7
 8004218:	bd80      	pop	{r7, pc}

0800421a <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800421a:	b580      	push	{r7, lr}
 800421c:	b084      	sub	sp, #16
 800421e:	af00      	add	r7, sp, #0
 8004220:	60f8      	str	r0, [r7, #12]
 8004222:	60b9      	str	r1, [r7, #8]
 8004224:	603b      	str	r3, [r7, #0]
 8004226:	4613      	mov	r3, r2
 8004228:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800422a:	e02c      	b.n	8004286 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800422c:	69bb      	ldr	r3, [r7, #24]
 800422e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004232:	d028      	beq.n	8004286 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004234:	69bb      	ldr	r3, [r7, #24]
 8004236:	2b00      	cmp	r3, #0
 8004238:	d007      	beq.n	800424a <UART_WaitOnFlagUntilTimeout+0x30>
 800423a:	f7fd f8ff 	bl	800143c <HAL_GetTick>
 800423e:	4602      	mov	r2, r0
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	1ad3      	subs	r3, r2, r3
 8004244:	69ba      	ldr	r2, [r7, #24]
 8004246:	429a      	cmp	r2, r3
 8004248:	d21d      	bcs.n	8004286 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	68da      	ldr	r2, [r3, #12]
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004258:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	695a      	ldr	r2, [r3, #20]
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f022 0201 	bic.w	r2, r2, #1
 8004268:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	2220      	movs	r2, #32
 800426e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	2220      	movs	r2, #32
 8004276:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	2200      	movs	r2, #0
 800427e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004282:	2303      	movs	r3, #3
 8004284:	e00f      	b.n	80042a6 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	681a      	ldr	r2, [r3, #0]
 800428c:	68bb      	ldr	r3, [r7, #8]
 800428e:	4013      	ands	r3, r2
 8004290:	68ba      	ldr	r2, [r7, #8]
 8004292:	429a      	cmp	r2, r3
 8004294:	bf0c      	ite	eq
 8004296:	2301      	moveq	r3, #1
 8004298:	2300      	movne	r3, #0
 800429a:	b2db      	uxtb	r3, r3
 800429c:	461a      	mov	r2, r3
 800429e:	79fb      	ldrb	r3, [r7, #7]
 80042a0:	429a      	cmp	r2, r3
 80042a2:	d0c3      	beq.n	800422c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80042a4:	2300      	movs	r3, #0
}
 80042a6:	4618      	mov	r0, r3
 80042a8:	3710      	adds	r7, #16
 80042aa:	46bd      	mov	sp, r7
 80042ac:	bd80      	pop	{r7, pc}
	...

080042b0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80042b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80042b4:	b09f      	sub	sp, #124	; 0x7c
 80042b6:	af00      	add	r7, sp, #0
 80042b8:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80042ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	691b      	ldr	r3, [r3, #16]
 80042c0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80042c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042c6:	68d9      	ldr	r1, [r3, #12]
 80042c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042ca:	681a      	ldr	r2, [r3, #0]
 80042cc:	ea40 0301 	orr.w	r3, r0, r1
 80042d0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80042d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042d4:	689a      	ldr	r2, [r3, #8]
 80042d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042d8:	691b      	ldr	r3, [r3, #16]
 80042da:	431a      	orrs	r2, r3
 80042dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042de:	695b      	ldr	r3, [r3, #20]
 80042e0:	431a      	orrs	r2, r3
 80042e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042e4:	69db      	ldr	r3, [r3, #28]
 80042e6:	4313      	orrs	r3, r2
 80042e8:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80042ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	68db      	ldr	r3, [r3, #12]
 80042f0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80042f4:	f021 010c 	bic.w	r1, r1, #12
 80042f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042fa:	681a      	ldr	r2, [r3, #0]
 80042fc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80042fe:	430b      	orrs	r3, r1
 8004300:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004302:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	695b      	ldr	r3, [r3, #20]
 8004308:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800430c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800430e:	6999      	ldr	r1, [r3, #24]
 8004310:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004312:	681a      	ldr	r2, [r3, #0]
 8004314:	ea40 0301 	orr.w	r3, r0, r1
 8004318:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800431a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800431c:	681a      	ldr	r2, [r3, #0]
 800431e:	4bc5      	ldr	r3, [pc, #788]	; (8004634 <UART_SetConfig+0x384>)
 8004320:	429a      	cmp	r2, r3
 8004322:	d004      	beq.n	800432e <UART_SetConfig+0x7e>
 8004324:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004326:	681a      	ldr	r2, [r3, #0]
 8004328:	4bc3      	ldr	r3, [pc, #780]	; (8004638 <UART_SetConfig+0x388>)
 800432a:	429a      	cmp	r2, r3
 800432c:	d103      	bne.n	8004336 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800432e:	f7fe faff 	bl	8002930 <HAL_RCC_GetPCLK2Freq>
 8004332:	6778      	str	r0, [r7, #116]	; 0x74
 8004334:	e002      	b.n	800433c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004336:	f7fe fae7 	bl	8002908 <HAL_RCC_GetPCLK1Freq>
 800433a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800433c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800433e:	69db      	ldr	r3, [r3, #28]
 8004340:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004344:	f040 80b6 	bne.w	80044b4 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004348:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800434a:	461c      	mov	r4, r3
 800434c:	f04f 0500 	mov.w	r5, #0
 8004350:	4622      	mov	r2, r4
 8004352:	462b      	mov	r3, r5
 8004354:	1891      	adds	r1, r2, r2
 8004356:	6439      	str	r1, [r7, #64]	; 0x40
 8004358:	415b      	adcs	r3, r3
 800435a:	647b      	str	r3, [r7, #68]	; 0x44
 800435c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004360:	1912      	adds	r2, r2, r4
 8004362:	eb45 0303 	adc.w	r3, r5, r3
 8004366:	f04f 0000 	mov.w	r0, #0
 800436a:	f04f 0100 	mov.w	r1, #0
 800436e:	00d9      	lsls	r1, r3, #3
 8004370:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004374:	00d0      	lsls	r0, r2, #3
 8004376:	4602      	mov	r2, r0
 8004378:	460b      	mov	r3, r1
 800437a:	1911      	adds	r1, r2, r4
 800437c:	6639      	str	r1, [r7, #96]	; 0x60
 800437e:	416b      	adcs	r3, r5
 8004380:	667b      	str	r3, [r7, #100]	; 0x64
 8004382:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004384:	685b      	ldr	r3, [r3, #4]
 8004386:	461a      	mov	r2, r3
 8004388:	f04f 0300 	mov.w	r3, #0
 800438c:	1891      	adds	r1, r2, r2
 800438e:	63b9      	str	r1, [r7, #56]	; 0x38
 8004390:	415b      	adcs	r3, r3
 8004392:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004394:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004398:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800439c:	f7fb ff18 	bl	80001d0 <__aeabi_uldivmod>
 80043a0:	4602      	mov	r2, r0
 80043a2:	460b      	mov	r3, r1
 80043a4:	4ba5      	ldr	r3, [pc, #660]	; (800463c <UART_SetConfig+0x38c>)
 80043a6:	fba3 2302 	umull	r2, r3, r3, r2
 80043aa:	095b      	lsrs	r3, r3, #5
 80043ac:	011e      	lsls	r6, r3, #4
 80043ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80043b0:	461c      	mov	r4, r3
 80043b2:	f04f 0500 	mov.w	r5, #0
 80043b6:	4622      	mov	r2, r4
 80043b8:	462b      	mov	r3, r5
 80043ba:	1891      	adds	r1, r2, r2
 80043bc:	6339      	str	r1, [r7, #48]	; 0x30
 80043be:	415b      	adcs	r3, r3
 80043c0:	637b      	str	r3, [r7, #52]	; 0x34
 80043c2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80043c6:	1912      	adds	r2, r2, r4
 80043c8:	eb45 0303 	adc.w	r3, r5, r3
 80043cc:	f04f 0000 	mov.w	r0, #0
 80043d0:	f04f 0100 	mov.w	r1, #0
 80043d4:	00d9      	lsls	r1, r3, #3
 80043d6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80043da:	00d0      	lsls	r0, r2, #3
 80043dc:	4602      	mov	r2, r0
 80043de:	460b      	mov	r3, r1
 80043e0:	1911      	adds	r1, r2, r4
 80043e2:	65b9      	str	r1, [r7, #88]	; 0x58
 80043e4:	416b      	adcs	r3, r5
 80043e6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80043e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043ea:	685b      	ldr	r3, [r3, #4]
 80043ec:	461a      	mov	r2, r3
 80043ee:	f04f 0300 	mov.w	r3, #0
 80043f2:	1891      	adds	r1, r2, r2
 80043f4:	62b9      	str	r1, [r7, #40]	; 0x28
 80043f6:	415b      	adcs	r3, r3
 80043f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80043fa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80043fe:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8004402:	f7fb fee5 	bl	80001d0 <__aeabi_uldivmod>
 8004406:	4602      	mov	r2, r0
 8004408:	460b      	mov	r3, r1
 800440a:	4b8c      	ldr	r3, [pc, #560]	; (800463c <UART_SetConfig+0x38c>)
 800440c:	fba3 1302 	umull	r1, r3, r3, r2
 8004410:	095b      	lsrs	r3, r3, #5
 8004412:	2164      	movs	r1, #100	; 0x64
 8004414:	fb01 f303 	mul.w	r3, r1, r3
 8004418:	1ad3      	subs	r3, r2, r3
 800441a:	00db      	lsls	r3, r3, #3
 800441c:	3332      	adds	r3, #50	; 0x32
 800441e:	4a87      	ldr	r2, [pc, #540]	; (800463c <UART_SetConfig+0x38c>)
 8004420:	fba2 2303 	umull	r2, r3, r2, r3
 8004424:	095b      	lsrs	r3, r3, #5
 8004426:	005b      	lsls	r3, r3, #1
 8004428:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800442c:	441e      	add	r6, r3
 800442e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004430:	4618      	mov	r0, r3
 8004432:	f04f 0100 	mov.w	r1, #0
 8004436:	4602      	mov	r2, r0
 8004438:	460b      	mov	r3, r1
 800443a:	1894      	adds	r4, r2, r2
 800443c:	623c      	str	r4, [r7, #32]
 800443e:	415b      	adcs	r3, r3
 8004440:	627b      	str	r3, [r7, #36]	; 0x24
 8004442:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004446:	1812      	adds	r2, r2, r0
 8004448:	eb41 0303 	adc.w	r3, r1, r3
 800444c:	f04f 0400 	mov.w	r4, #0
 8004450:	f04f 0500 	mov.w	r5, #0
 8004454:	00dd      	lsls	r5, r3, #3
 8004456:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800445a:	00d4      	lsls	r4, r2, #3
 800445c:	4622      	mov	r2, r4
 800445e:	462b      	mov	r3, r5
 8004460:	1814      	adds	r4, r2, r0
 8004462:	653c      	str	r4, [r7, #80]	; 0x50
 8004464:	414b      	adcs	r3, r1
 8004466:	657b      	str	r3, [r7, #84]	; 0x54
 8004468:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800446a:	685b      	ldr	r3, [r3, #4]
 800446c:	461a      	mov	r2, r3
 800446e:	f04f 0300 	mov.w	r3, #0
 8004472:	1891      	adds	r1, r2, r2
 8004474:	61b9      	str	r1, [r7, #24]
 8004476:	415b      	adcs	r3, r3
 8004478:	61fb      	str	r3, [r7, #28]
 800447a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800447e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8004482:	f7fb fea5 	bl	80001d0 <__aeabi_uldivmod>
 8004486:	4602      	mov	r2, r0
 8004488:	460b      	mov	r3, r1
 800448a:	4b6c      	ldr	r3, [pc, #432]	; (800463c <UART_SetConfig+0x38c>)
 800448c:	fba3 1302 	umull	r1, r3, r3, r2
 8004490:	095b      	lsrs	r3, r3, #5
 8004492:	2164      	movs	r1, #100	; 0x64
 8004494:	fb01 f303 	mul.w	r3, r1, r3
 8004498:	1ad3      	subs	r3, r2, r3
 800449a:	00db      	lsls	r3, r3, #3
 800449c:	3332      	adds	r3, #50	; 0x32
 800449e:	4a67      	ldr	r2, [pc, #412]	; (800463c <UART_SetConfig+0x38c>)
 80044a0:	fba2 2303 	umull	r2, r3, r2, r3
 80044a4:	095b      	lsrs	r3, r3, #5
 80044a6:	f003 0207 	and.w	r2, r3, #7
 80044aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	4432      	add	r2, r6
 80044b0:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80044b2:	e0b9      	b.n	8004628 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80044b4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80044b6:	461c      	mov	r4, r3
 80044b8:	f04f 0500 	mov.w	r5, #0
 80044bc:	4622      	mov	r2, r4
 80044be:	462b      	mov	r3, r5
 80044c0:	1891      	adds	r1, r2, r2
 80044c2:	6139      	str	r1, [r7, #16]
 80044c4:	415b      	adcs	r3, r3
 80044c6:	617b      	str	r3, [r7, #20]
 80044c8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80044cc:	1912      	adds	r2, r2, r4
 80044ce:	eb45 0303 	adc.w	r3, r5, r3
 80044d2:	f04f 0000 	mov.w	r0, #0
 80044d6:	f04f 0100 	mov.w	r1, #0
 80044da:	00d9      	lsls	r1, r3, #3
 80044dc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80044e0:	00d0      	lsls	r0, r2, #3
 80044e2:	4602      	mov	r2, r0
 80044e4:	460b      	mov	r3, r1
 80044e6:	eb12 0804 	adds.w	r8, r2, r4
 80044ea:	eb43 0905 	adc.w	r9, r3, r5
 80044ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044f0:	685b      	ldr	r3, [r3, #4]
 80044f2:	4618      	mov	r0, r3
 80044f4:	f04f 0100 	mov.w	r1, #0
 80044f8:	f04f 0200 	mov.w	r2, #0
 80044fc:	f04f 0300 	mov.w	r3, #0
 8004500:	008b      	lsls	r3, r1, #2
 8004502:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004506:	0082      	lsls	r2, r0, #2
 8004508:	4640      	mov	r0, r8
 800450a:	4649      	mov	r1, r9
 800450c:	f7fb fe60 	bl	80001d0 <__aeabi_uldivmod>
 8004510:	4602      	mov	r2, r0
 8004512:	460b      	mov	r3, r1
 8004514:	4b49      	ldr	r3, [pc, #292]	; (800463c <UART_SetConfig+0x38c>)
 8004516:	fba3 2302 	umull	r2, r3, r3, r2
 800451a:	095b      	lsrs	r3, r3, #5
 800451c:	011e      	lsls	r6, r3, #4
 800451e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004520:	4618      	mov	r0, r3
 8004522:	f04f 0100 	mov.w	r1, #0
 8004526:	4602      	mov	r2, r0
 8004528:	460b      	mov	r3, r1
 800452a:	1894      	adds	r4, r2, r2
 800452c:	60bc      	str	r4, [r7, #8]
 800452e:	415b      	adcs	r3, r3
 8004530:	60fb      	str	r3, [r7, #12]
 8004532:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004536:	1812      	adds	r2, r2, r0
 8004538:	eb41 0303 	adc.w	r3, r1, r3
 800453c:	f04f 0400 	mov.w	r4, #0
 8004540:	f04f 0500 	mov.w	r5, #0
 8004544:	00dd      	lsls	r5, r3, #3
 8004546:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800454a:	00d4      	lsls	r4, r2, #3
 800454c:	4622      	mov	r2, r4
 800454e:	462b      	mov	r3, r5
 8004550:	1814      	adds	r4, r2, r0
 8004552:	64bc      	str	r4, [r7, #72]	; 0x48
 8004554:	414b      	adcs	r3, r1
 8004556:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004558:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800455a:	685b      	ldr	r3, [r3, #4]
 800455c:	4618      	mov	r0, r3
 800455e:	f04f 0100 	mov.w	r1, #0
 8004562:	f04f 0200 	mov.w	r2, #0
 8004566:	f04f 0300 	mov.w	r3, #0
 800456a:	008b      	lsls	r3, r1, #2
 800456c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004570:	0082      	lsls	r2, r0, #2
 8004572:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8004576:	f7fb fe2b 	bl	80001d0 <__aeabi_uldivmod>
 800457a:	4602      	mov	r2, r0
 800457c:	460b      	mov	r3, r1
 800457e:	4b2f      	ldr	r3, [pc, #188]	; (800463c <UART_SetConfig+0x38c>)
 8004580:	fba3 1302 	umull	r1, r3, r3, r2
 8004584:	095b      	lsrs	r3, r3, #5
 8004586:	2164      	movs	r1, #100	; 0x64
 8004588:	fb01 f303 	mul.w	r3, r1, r3
 800458c:	1ad3      	subs	r3, r2, r3
 800458e:	011b      	lsls	r3, r3, #4
 8004590:	3332      	adds	r3, #50	; 0x32
 8004592:	4a2a      	ldr	r2, [pc, #168]	; (800463c <UART_SetConfig+0x38c>)
 8004594:	fba2 2303 	umull	r2, r3, r2, r3
 8004598:	095b      	lsrs	r3, r3, #5
 800459a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800459e:	441e      	add	r6, r3
 80045a0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80045a2:	4618      	mov	r0, r3
 80045a4:	f04f 0100 	mov.w	r1, #0
 80045a8:	4602      	mov	r2, r0
 80045aa:	460b      	mov	r3, r1
 80045ac:	1894      	adds	r4, r2, r2
 80045ae:	603c      	str	r4, [r7, #0]
 80045b0:	415b      	adcs	r3, r3
 80045b2:	607b      	str	r3, [r7, #4]
 80045b4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80045b8:	1812      	adds	r2, r2, r0
 80045ba:	eb41 0303 	adc.w	r3, r1, r3
 80045be:	f04f 0400 	mov.w	r4, #0
 80045c2:	f04f 0500 	mov.w	r5, #0
 80045c6:	00dd      	lsls	r5, r3, #3
 80045c8:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80045cc:	00d4      	lsls	r4, r2, #3
 80045ce:	4622      	mov	r2, r4
 80045d0:	462b      	mov	r3, r5
 80045d2:	eb12 0a00 	adds.w	sl, r2, r0
 80045d6:	eb43 0b01 	adc.w	fp, r3, r1
 80045da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80045dc:	685b      	ldr	r3, [r3, #4]
 80045de:	4618      	mov	r0, r3
 80045e0:	f04f 0100 	mov.w	r1, #0
 80045e4:	f04f 0200 	mov.w	r2, #0
 80045e8:	f04f 0300 	mov.w	r3, #0
 80045ec:	008b      	lsls	r3, r1, #2
 80045ee:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80045f2:	0082      	lsls	r2, r0, #2
 80045f4:	4650      	mov	r0, sl
 80045f6:	4659      	mov	r1, fp
 80045f8:	f7fb fdea 	bl	80001d0 <__aeabi_uldivmod>
 80045fc:	4602      	mov	r2, r0
 80045fe:	460b      	mov	r3, r1
 8004600:	4b0e      	ldr	r3, [pc, #56]	; (800463c <UART_SetConfig+0x38c>)
 8004602:	fba3 1302 	umull	r1, r3, r3, r2
 8004606:	095b      	lsrs	r3, r3, #5
 8004608:	2164      	movs	r1, #100	; 0x64
 800460a:	fb01 f303 	mul.w	r3, r1, r3
 800460e:	1ad3      	subs	r3, r2, r3
 8004610:	011b      	lsls	r3, r3, #4
 8004612:	3332      	adds	r3, #50	; 0x32
 8004614:	4a09      	ldr	r2, [pc, #36]	; (800463c <UART_SetConfig+0x38c>)
 8004616:	fba2 2303 	umull	r2, r3, r2, r3
 800461a:	095b      	lsrs	r3, r3, #5
 800461c:	f003 020f 	and.w	r2, r3, #15
 8004620:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	4432      	add	r2, r6
 8004626:	609a      	str	r2, [r3, #8]
}
 8004628:	bf00      	nop
 800462a:	377c      	adds	r7, #124	; 0x7c
 800462c:	46bd      	mov	sp, r7
 800462e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004632:	bf00      	nop
 8004634:	40011000 	.word	0x40011000
 8004638:	40011400 	.word	0x40011400
 800463c:	51eb851f 	.word	0x51eb851f

08004640 <__NVIC_SetPriority>:
{
 8004640:	b480      	push	{r7}
 8004642:	b083      	sub	sp, #12
 8004644:	af00      	add	r7, sp, #0
 8004646:	4603      	mov	r3, r0
 8004648:	6039      	str	r1, [r7, #0]
 800464a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800464c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004650:	2b00      	cmp	r3, #0
 8004652:	db0a      	blt.n	800466a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	b2da      	uxtb	r2, r3
 8004658:	490c      	ldr	r1, [pc, #48]	; (800468c <__NVIC_SetPriority+0x4c>)
 800465a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800465e:	0112      	lsls	r2, r2, #4
 8004660:	b2d2      	uxtb	r2, r2
 8004662:	440b      	add	r3, r1
 8004664:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004668:	e00a      	b.n	8004680 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	b2da      	uxtb	r2, r3
 800466e:	4908      	ldr	r1, [pc, #32]	; (8004690 <__NVIC_SetPriority+0x50>)
 8004670:	79fb      	ldrb	r3, [r7, #7]
 8004672:	f003 030f 	and.w	r3, r3, #15
 8004676:	3b04      	subs	r3, #4
 8004678:	0112      	lsls	r2, r2, #4
 800467a:	b2d2      	uxtb	r2, r2
 800467c:	440b      	add	r3, r1
 800467e:	761a      	strb	r2, [r3, #24]
}
 8004680:	bf00      	nop
 8004682:	370c      	adds	r7, #12
 8004684:	46bd      	mov	sp, r7
 8004686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468a:	4770      	bx	lr
 800468c:	e000e100 	.word	0xe000e100
 8004690:	e000ed00 	.word	0xe000ed00

08004694 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8004694:	b580      	push	{r7, lr}
 8004696:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8004698:	4b05      	ldr	r3, [pc, #20]	; (80046b0 <SysTick_Handler+0x1c>)
 800469a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800469c:	f001 fcfe 	bl	800609c <xTaskGetSchedulerState>
 80046a0:	4603      	mov	r3, r0
 80046a2:	2b01      	cmp	r3, #1
 80046a4:	d001      	beq.n	80046aa <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80046a6:	f002 fae7 	bl	8006c78 <xPortSysTickHandler>
  }
}
 80046aa:	bf00      	nop
 80046ac:	bd80      	pop	{r7, pc}
 80046ae:	bf00      	nop
 80046b0:	e000e010 	.word	0xe000e010

080046b4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80046b4:	b580      	push	{r7, lr}
 80046b6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80046b8:	2100      	movs	r1, #0
 80046ba:	f06f 0004 	mvn.w	r0, #4
 80046be:	f7ff ffbf 	bl	8004640 <__NVIC_SetPriority>
#endif
}
 80046c2:	bf00      	nop
 80046c4:	bd80      	pop	{r7, pc}
	...

080046c8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80046c8:	b480      	push	{r7}
 80046ca:	b083      	sub	sp, #12
 80046cc:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80046ce:	f3ef 8305 	mrs	r3, IPSR
 80046d2:	603b      	str	r3, [r7, #0]
  return(result);
 80046d4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d003      	beq.n	80046e2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80046da:	f06f 0305 	mvn.w	r3, #5
 80046de:	607b      	str	r3, [r7, #4]
 80046e0:	e00c      	b.n	80046fc <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80046e2:	4b0a      	ldr	r3, [pc, #40]	; (800470c <osKernelInitialize+0x44>)
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d105      	bne.n	80046f6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80046ea:	4b08      	ldr	r3, [pc, #32]	; (800470c <osKernelInitialize+0x44>)
 80046ec:	2201      	movs	r2, #1
 80046ee:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80046f0:	2300      	movs	r3, #0
 80046f2:	607b      	str	r3, [r7, #4]
 80046f4:	e002      	b.n	80046fc <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80046f6:	f04f 33ff 	mov.w	r3, #4294967295
 80046fa:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80046fc:	687b      	ldr	r3, [r7, #4]
}
 80046fe:	4618      	mov	r0, r3
 8004700:	370c      	adds	r7, #12
 8004702:	46bd      	mov	sp, r7
 8004704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004708:	4770      	bx	lr
 800470a:	bf00      	nop
 800470c:	20000094 	.word	0x20000094

08004710 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004710:	b580      	push	{r7, lr}
 8004712:	b082      	sub	sp, #8
 8004714:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004716:	f3ef 8305 	mrs	r3, IPSR
 800471a:	603b      	str	r3, [r7, #0]
  return(result);
 800471c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800471e:	2b00      	cmp	r3, #0
 8004720:	d003      	beq.n	800472a <osKernelStart+0x1a>
    stat = osErrorISR;
 8004722:	f06f 0305 	mvn.w	r3, #5
 8004726:	607b      	str	r3, [r7, #4]
 8004728:	e010      	b.n	800474c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800472a:	4b0b      	ldr	r3, [pc, #44]	; (8004758 <osKernelStart+0x48>)
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	2b01      	cmp	r3, #1
 8004730:	d109      	bne.n	8004746 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8004732:	f7ff ffbf 	bl	80046b4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8004736:	4b08      	ldr	r3, [pc, #32]	; (8004758 <osKernelStart+0x48>)
 8004738:	2202      	movs	r2, #2
 800473a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800473c:	f001 f866 	bl	800580c <vTaskStartScheduler>
      stat = osOK;
 8004740:	2300      	movs	r3, #0
 8004742:	607b      	str	r3, [r7, #4]
 8004744:	e002      	b.n	800474c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8004746:	f04f 33ff 	mov.w	r3, #4294967295
 800474a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800474c:	687b      	ldr	r3, [r7, #4]
}
 800474e:	4618      	mov	r0, r3
 8004750:	3708      	adds	r7, #8
 8004752:	46bd      	mov	sp, r7
 8004754:	bd80      	pop	{r7, pc}
 8004756:	bf00      	nop
 8004758:	20000094 	.word	0x20000094

0800475c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800475c:	b580      	push	{r7, lr}
 800475e:	b08e      	sub	sp, #56	; 0x38
 8004760:	af04      	add	r7, sp, #16
 8004762:	60f8      	str	r0, [r7, #12]
 8004764:	60b9      	str	r1, [r7, #8]
 8004766:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004768:	2300      	movs	r3, #0
 800476a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800476c:	f3ef 8305 	mrs	r3, IPSR
 8004770:	617b      	str	r3, [r7, #20]
  return(result);
 8004772:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8004774:	2b00      	cmp	r3, #0
 8004776:	d17e      	bne.n	8004876 <osThreadNew+0x11a>
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	2b00      	cmp	r3, #0
 800477c:	d07b      	beq.n	8004876 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800477e:	2380      	movs	r3, #128	; 0x80
 8004780:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8004782:	2318      	movs	r3, #24
 8004784:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8004786:	2300      	movs	r3, #0
 8004788:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800478a:	f04f 33ff 	mov.w	r3, #4294967295
 800478e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2b00      	cmp	r3, #0
 8004794:	d045      	beq.n	8004822 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	2b00      	cmp	r3, #0
 800479c:	d002      	beq.n	80047a4 <osThreadNew+0x48>
        name = attr->name;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	699b      	ldr	r3, [r3, #24]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d002      	beq.n	80047b2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	699b      	ldr	r3, [r3, #24]
 80047b0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80047b2:	69fb      	ldr	r3, [r7, #28]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d008      	beq.n	80047ca <osThreadNew+0x6e>
 80047b8:	69fb      	ldr	r3, [r7, #28]
 80047ba:	2b38      	cmp	r3, #56	; 0x38
 80047bc:	d805      	bhi.n	80047ca <osThreadNew+0x6e>
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	685b      	ldr	r3, [r3, #4]
 80047c2:	f003 0301 	and.w	r3, r3, #1
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d001      	beq.n	80047ce <osThreadNew+0x72>
        return (NULL);
 80047ca:	2300      	movs	r3, #0
 80047cc:	e054      	b.n	8004878 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	695b      	ldr	r3, [r3, #20]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d003      	beq.n	80047de <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	695b      	ldr	r3, [r3, #20]
 80047da:	089b      	lsrs	r3, r3, #2
 80047dc:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	689b      	ldr	r3, [r3, #8]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d00e      	beq.n	8004804 <osThreadNew+0xa8>
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	68db      	ldr	r3, [r3, #12]
 80047ea:	2b5b      	cmp	r3, #91	; 0x5b
 80047ec:	d90a      	bls.n	8004804 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d006      	beq.n	8004804 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	695b      	ldr	r3, [r3, #20]
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d002      	beq.n	8004804 <osThreadNew+0xa8>
        mem = 1;
 80047fe:	2301      	movs	r3, #1
 8004800:	61bb      	str	r3, [r7, #24]
 8004802:	e010      	b.n	8004826 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	689b      	ldr	r3, [r3, #8]
 8004808:	2b00      	cmp	r3, #0
 800480a:	d10c      	bne.n	8004826 <osThreadNew+0xca>
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	68db      	ldr	r3, [r3, #12]
 8004810:	2b00      	cmp	r3, #0
 8004812:	d108      	bne.n	8004826 <osThreadNew+0xca>
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	691b      	ldr	r3, [r3, #16]
 8004818:	2b00      	cmp	r3, #0
 800481a:	d104      	bne.n	8004826 <osThreadNew+0xca>
          mem = 0;
 800481c:	2300      	movs	r3, #0
 800481e:	61bb      	str	r3, [r7, #24]
 8004820:	e001      	b.n	8004826 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8004822:	2300      	movs	r3, #0
 8004824:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8004826:	69bb      	ldr	r3, [r7, #24]
 8004828:	2b01      	cmp	r3, #1
 800482a:	d110      	bne.n	800484e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8004830:	687a      	ldr	r2, [r7, #4]
 8004832:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004834:	9202      	str	r2, [sp, #8]
 8004836:	9301      	str	r3, [sp, #4]
 8004838:	69fb      	ldr	r3, [r7, #28]
 800483a:	9300      	str	r3, [sp, #0]
 800483c:	68bb      	ldr	r3, [r7, #8]
 800483e:	6a3a      	ldr	r2, [r7, #32]
 8004840:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004842:	68f8      	ldr	r0, [r7, #12]
 8004844:	f000 fe0c 	bl	8005460 <xTaskCreateStatic>
 8004848:	4603      	mov	r3, r0
 800484a:	613b      	str	r3, [r7, #16]
 800484c:	e013      	b.n	8004876 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800484e:	69bb      	ldr	r3, [r7, #24]
 8004850:	2b00      	cmp	r3, #0
 8004852:	d110      	bne.n	8004876 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004854:	6a3b      	ldr	r3, [r7, #32]
 8004856:	b29a      	uxth	r2, r3
 8004858:	f107 0310 	add.w	r3, r7, #16
 800485c:	9301      	str	r3, [sp, #4]
 800485e:	69fb      	ldr	r3, [r7, #28]
 8004860:	9300      	str	r3, [sp, #0]
 8004862:	68bb      	ldr	r3, [r7, #8]
 8004864:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004866:	68f8      	ldr	r0, [r7, #12]
 8004868:	f000 fe57 	bl	800551a <xTaskCreate>
 800486c:	4603      	mov	r3, r0
 800486e:	2b01      	cmp	r3, #1
 8004870:	d001      	beq.n	8004876 <osThreadNew+0x11a>
            hTask = NULL;
 8004872:	2300      	movs	r3, #0
 8004874:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004876:	693b      	ldr	r3, [r7, #16]
}
 8004878:	4618      	mov	r0, r3
 800487a:	3728      	adds	r7, #40	; 0x28
 800487c:	46bd      	mov	sp, r7
 800487e:	bd80      	pop	{r7, pc}

08004880 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8004880:	b580      	push	{r7, lr}
 8004882:	b084      	sub	sp, #16
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004888:	f3ef 8305 	mrs	r3, IPSR
 800488c:	60bb      	str	r3, [r7, #8]
  return(result);
 800488e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004890:	2b00      	cmp	r3, #0
 8004892:	d003      	beq.n	800489c <osDelay+0x1c>
    stat = osErrorISR;
 8004894:	f06f 0305 	mvn.w	r3, #5
 8004898:	60fb      	str	r3, [r7, #12]
 800489a:	e007      	b.n	80048ac <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800489c:	2300      	movs	r3, #0
 800489e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d002      	beq.n	80048ac <osDelay+0x2c>
      vTaskDelay(ticks);
 80048a6:	6878      	ldr	r0, [r7, #4]
 80048a8:	f000 ff7c 	bl	80057a4 <vTaskDelay>
    }
  }

  return (stat);
 80048ac:	68fb      	ldr	r3, [r7, #12]
}
 80048ae:	4618      	mov	r0, r3
 80048b0:	3710      	adds	r7, #16
 80048b2:	46bd      	mov	sp, r7
 80048b4:	bd80      	pop	{r7, pc}
	...

080048b8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80048b8:	b480      	push	{r7}
 80048ba:	b085      	sub	sp, #20
 80048bc:	af00      	add	r7, sp, #0
 80048be:	60f8      	str	r0, [r7, #12]
 80048c0:	60b9      	str	r1, [r7, #8]
 80048c2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	4a07      	ldr	r2, [pc, #28]	; (80048e4 <vApplicationGetIdleTaskMemory+0x2c>)
 80048c8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80048ca:	68bb      	ldr	r3, [r7, #8]
 80048cc:	4a06      	ldr	r2, [pc, #24]	; (80048e8 <vApplicationGetIdleTaskMemory+0x30>)
 80048ce:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2280      	movs	r2, #128	; 0x80
 80048d4:	601a      	str	r2, [r3, #0]
}
 80048d6:	bf00      	nop
 80048d8:	3714      	adds	r7, #20
 80048da:	46bd      	mov	sp, r7
 80048dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e0:	4770      	bx	lr
 80048e2:	bf00      	nop
 80048e4:	20000098 	.word	0x20000098
 80048e8:	200000f4 	.word	0x200000f4

080048ec <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80048ec:	b480      	push	{r7}
 80048ee:	b085      	sub	sp, #20
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	60f8      	str	r0, [r7, #12]
 80048f4:	60b9      	str	r1, [r7, #8]
 80048f6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	4a07      	ldr	r2, [pc, #28]	; (8004918 <vApplicationGetTimerTaskMemory+0x2c>)
 80048fc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80048fe:	68bb      	ldr	r3, [r7, #8]
 8004900:	4a06      	ldr	r2, [pc, #24]	; (800491c <vApplicationGetTimerTaskMemory+0x30>)
 8004902:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	f44f 7280 	mov.w	r2, #256	; 0x100
 800490a:	601a      	str	r2, [r3, #0]
}
 800490c:	bf00      	nop
 800490e:	3714      	adds	r7, #20
 8004910:	46bd      	mov	sp, r7
 8004912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004916:	4770      	bx	lr
 8004918:	200002f4 	.word	0x200002f4
 800491c:	20000350 	.word	0x20000350

08004920 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004920:	b480      	push	{r7}
 8004922:	b083      	sub	sp, #12
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	f103 0208 	add.w	r2, r3, #8
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	f04f 32ff 	mov.w	r2, #4294967295
 8004938:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	f103 0208 	add.w	r2, r3, #8
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	f103 0208 	add.w	r2, r3, #8
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	2200      	movs	r2, #0
 8004952:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004954:	bf00      	nop
 8004956:	370c      	adds	r7, #12
 8004958:	46bd      	mov	sp, r7
 800495a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495e:	4770      	bx	lr

08004960 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004960:	b480      	push	{r7}
 8004962:	b083      	sub	sp, #12
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2200      	movs	r2, #0
 800496c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800496e:	bf00      	nop
 8004970:	370c      	adds	r7, #12
 8004972:	46bd      	mov	sp, r7
 8004974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004978:	4770      	bx	lr

0800497a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800497a:	b480      	push	{r7}
 800497c:	b085      	sub	sp, #20
 800497e:	af00      	add	r7, sp, #0
 8004980:	6078      	str	r0, [r7, #4]
 8004982:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	685b      	ldr	r3, [r3, #4]
 8004988:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800498a:	683b      	ldr	r3, [r7, #0]
 800498c:	68fa      	ldr	r2, [r7, #12]
 800498e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	689a      	ldr	r2, [r3, #8]
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	689b      	ldr	r3, [r3, #8]
 800499c:	683a      	ldr	r2, [r7, #0]
 800499e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	683a      	ldr	r2, [r7, #0]
 80049a4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80049a6:	683b      	ldr	r3, [r7, #0]
 80049a8:	687a      	ldr	r2, [r7, #4]
 80049aa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	1c5a      	adds	r2, r3, #1
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	601a      	str	r2, [r3, #0]
}
 80049b6:	bf00      	nop
 80049b8:	3714      	adds	r7, #20
 80049ba:	46bd      	mov	sp, r7
 80049bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c0:	4770      	bx	lr

080049c2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80049c2:	b480      	push	{r7}
 80049c4:	b085      	sub	sp, #20
 80049c6:	af00      	add	r7, sp, #0
 80049c8:	6078      	str	r0, [r7, #4]
 80049ca:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80049cc:	683b      	ldr	r3, [r7, #0]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80049d2:	68bb      	ldr	r3, [r7, #8]
 80049d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049d8:	d103      	bne.n	80049e2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	691b      	ldr	r3, [r3, #16]
 80049de:	60fb      	str	r3, [r7, #12]
 80049e0:	e00c      	b.n	80049fc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	3308      	adds	r3, #8
 80049e6:	60fb      	str	r3, [r7, #12]
 80049e8:	e002      	b.n	80049f0 <vListInsert+0x2e>
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	685b      	ldr	r3, [r3, #4]
 80049ee:	60fb      	str	r3, [r7, #12]
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	685b      	ldr	r3, [r3, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	68ba      	ldr	r2, [r7, #8]
 80049f8:	429a      	cmp	r2, r3
 80049fa:	d2f6      	bcs.n	80049ea <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	685a      	ldr	r2, [r3, #4]
 8004a00:	683b      	ldr	r3, [r7, #0]
 8004a02:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004a04:	683b      	ldr	r3, [r7, #0]
 8004a06:	685b      	ldr	r3, [r3, #4]
 8004a08:	683a      	ldr	r2, [r7, #0]
 8004a0a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	68fa      	ldr	r2, [r7, #12]
 8004a10:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	683a      	ldr	r2, [r7, #0]
 8004a16:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	687a      	ldr	r2, [r7, #4]
 8004a1c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	1c5a      	adds	r2, r3, #1
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	601a      	str	r2, [r3, #0]
}
 8004a28:	bf00      	nop
 8004a2a:	3714      	adds	r7, #20
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a32:	4770      	bx	lr

08004a34 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004a34:	b480      	push	{r7}
 8004a36:	b085      	sub	sp, #20
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	691b      	ldr	r3, [r3, #16]
 8004a40:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	685b      	ldr	r3, [r3, #4]
 8004a46:	687a      	ldr	r2, [r7, #4]
 8004a48:	6892      	ldr	r2, [r2, #8]
 8004a4a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	689b      	ldr	r3, [r3, #8]
 8004a50:	687a      	ldr	r2, [r7, #4]
 8004a52:	6852      	ldr	r2, [r2, #4]
 8004a54:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	685b      	ldr	r3, [r3, #4]
 8004a5a:	687a      	ldr	r2, [r7, #4]
 8004a5c:	429a      	cmp	r2, r3
 8004a5e:	d103      	bne.n	8004a68 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	689a      	ldr	r2, [r3, #8]
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	1e5a      	subs	r2, r3, #1
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	681b      	ldr	r3, [r3, #0]
}
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	3714      	adds	r7, #20
 8004a80:	46bd      	mov	sp, r7
 8004a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a86:	4770      	bx	lr

08004a88 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	b084      	sub	sp, #16
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]
 8004a90:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d10a      	bne.n	8004ab2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004a9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004aa0:	f383 8811 	msr	BASEPRI, r3
 8004aa4:	f3bf 8f6f 	isb	sy
 8004aa8:	f3bf 8f4f 	dsb	sy
 8004aac:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004aae:	bf00      	nop
 8004ab0:	e7fe      	b.n	8004ab0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004ab2:	f002 f84f 	bl	8006b54 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	681a      	ldr	r2, [r3, #0]
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004abe:	68f9      	ldr	r1, [r7, #12]
 8004ac0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004ac2:	fb01 f303 	mul.w	r3, r1, r3
 8004ac6:	441a      	add	r2, r3
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	2200      	movs	r2, #0
 8004ad0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	681a      	ldr	r2, [r3, #0]
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	681a      	ldr	r2, [r3, #0]
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ae2:	3b01      	subs	r3, #1
 8004ae4:	68f9      	ldr	r1, [r7, #12]
 8004ae6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004ae8:	fb01 f303 	mul.w	r3, r1, r3
 8004aec:	441a      	add	r2, r3
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	22ff      	movs	r2, #255	; 0xff
 8004af6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	22ff      	movs	r2, #255	; 0xff
 8004afe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004b02:	683b      	ldr	r3, [r7, #0]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d114      	bne.n	8004b32 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	691b      	ldr	r3, [r3, #16]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d01a      	beq.n	8004b46 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	3310      	adds	r3, #16
 8004b14:	4618      	mov	r0, r3
 8004b16:	f001 f903 	bl	8005d20 <xTaskRemoveFromEventList>
 8004b1a:	4603      	mov	r3, r0
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d012      	beq.n	8004b46 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004b20:	4b0c      	ldr	r3, [pc, #48]	; (8004b54 <xQueueGenericReset+0xcc>)
 8004b22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b26:	601a      	str	r2, [r3, #0]
 8004b28:	f3bf 8f4f 	dsb	sy
 8004b2c:	f3bf 8f6f 	isb	sy
 8004b30:	e009      	b.n	8004b46 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	3310      	adds	r3, #16
 8004b36:	4618      	mov	r0, r3
 8004b38:	f7ff fef2 	bl	8004920 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	3324      	adds	r3, #36	; 0x24
 8004b40:	4618      	mov	r0, r3
 8004b42:	f7ff feed 	bl	8004920 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004b46:	f002 f835 	bl	8006bb4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004b4a:	2301      	movs	r3, #1
}
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	3710      	adds	r7, #16
 8004b50:	46bd      	mov	sp, r7
 8004b52:	bd80      	pop	{r7, pc}
 8004b54:	e000ed04 	.word	0xe000ed04

08004b58 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	b08e      	sub	sp, #56	; 0x38
 8004b5c:	af02      	add	r7, sp, #8
 8004b5e:	60f8      	str	r0, [r7, #12]
 8004b60:	60b9      	str	r1, [r7, #8]
 8004b62:	607a      	str	r2, [r7, #4]
 8004b64:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d10a      	bne.n	8004b82 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8004b6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b70:	f383 8811 	msr	BASEPRI, r3
 8004b74:	f3bf 8f6f 	isb	sy
 8004b78:	f3bf 8f4f 	dsb	sy
 8004b7c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004b7e:	bf00      	nop
 8004b80:	e7fe      	b.n	8004b80 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004b82:	683b      	ldr	r3, [r7, #0]
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d10a      	bne.n	8004b9e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8004b88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b8c:	f383 8811 	msr	BASEPRI, r3
 8004b90:	f3bf 8f6f 	isb	sy
 8004b94:	f3bf 8f4f 	dsb	sy
 8004b98:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004b9a:	bf00      	nop
 8004b9c:	e7fe      	b.n	8004b9c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d002      	beq.n	8004baa <xQueueGenericCreateStatic+0x52>
 8004ba4:	68bb      	ldr	r3, [r7, #8]
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d001      	beq.n	8004bae <xQueueGenericCreateStatic+0x56>
 8004baa:	2301      	movs	r3, #1
 8004bac:	e000      	b.n	8004bb0 <xQueueGenericCreateStatic+0x58>
 8004bae:	2300      	movs	r3, #0
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d10a      	bne.n	8004bca <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8004bb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bb8:	f383 8811 	msr	BASEPRI, r3
 8004bbc:	f3bf 8f6f 	isb	sy
 8004bc0:	f3bf 8f4f 	dsb	sy
 8004bc4:	623b      	str	r3, [r7, #32]
}
 8004bc6:	bf00      	nop
 8004bc8:	e7fe      	b.n	8004bc8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d102      	bne.n	8004bd6 <xQueueGenericCreateStatic+0x7e>
 8004bd0:	68bb      	ldr	r3, [r7, #8]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d101      	bne.n	8004bda <xQueueGenericCreateStatic+0x82>
 8004bd6:	2301      	movs	r3, #1
 8004bd8:	e000      	b.n	8004bdc <xQueueGenericCreateStatic+0x84>
 8004bda:	2300      	movs	r3, #0
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d10a      	bne.n	8004bf6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8004be0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004be4:	f383 8811 	msr	BASEPRI, r3
 8004be8:	f3bf 8f6f 	isb	sy
 8004bec:	f3bf 8f4f 	dsb	sy
 8004bf0:	61fb      	str	r3, [r7, #28]
}
 8004bf2:	bf00      	nop
 8004bf4:	e7fe      	b.n	8004bf4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004bf6:	2350      	movs	r3, #80	; 0x50
 8004bf8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004bfa:	697b      	ldr	r3, [r7, #20]
 8004bfc:	2b50      	cmp	r3, #80	; 0x50
 8004bfe:	d00a      	beq.n	8004c16 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8004c00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c04:	f383 8811 	msr	BASEPRI, r3
 8004c08:	f3bf 8f6f 	isb	sy
 8004c0c:	f3bf 8f4f 	dsb	sy
 8004c10:	61bb      	str	r3, [r7, #24]
}
 8004c12:	bf00      	nop
 8004c14:	e7fe      	b.n	8004c14 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004c16:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004c18:	683b      	ldr	r3, [r7, #0]
 8004c1a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004c1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d00d      	beq.n	8004c3e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004c22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c24:	2201      	movs	r2, #1
 8004c26:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004c2a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004c2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c30:	9300      	str	r3, [sp, #0]
 8004c32:	4613      	mov	r3, r2
 8004c34:	687a      	ldr	r2, [r7, #4]
 8004c36:	68b9      	ldr	r1, [r7, #8]
 8004c38:	68f8      	ldr	r0, [r7, #12]
 8004c3a:	f000 f805 	bl	8004c48 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004c3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004c40:	4618      	mov	r0, r3
 8004c42:	3730      	adds	r7, #48	; 0x30
 8004c44:	46bd      	mov	sp, r7
 8004c46:	bd80      	pop	{r7, pc}

08004c48 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b084      	sub	sp, #16
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	60f8      	str	r0, [r7, #12]
 8004c50:	60b9      	str	r1, [r7, #8]
 8004c52:	607a      	str	r2, [r7, #4]
 8004c54:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004c56:	68bb      	ldr	r3, [r7, #8]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d103      	bne.n	8004c64 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004c5c:	69bb      	ldr	r3, [r7, #24]
 8004c5e:	69ba      	ldr	r2, [r7, #24]
 8004c60:	601a      	str	r2, [r3, #0]
 8004c62:	e002      	b.n	8004c6a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004c64:	69bb      	ldr	r3, [r7, #24]
 8004c66:	687a      	ldr	r2, [r7, #4]
 8004c68:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004c6a:	69bb      	ldr	r3, [r7, #24]
 8004c6c:	68fa      	ldr	r2, [r7, #12]
 8004c6e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004c70:	69bb      	ldr	r3, [r7, #24]
 8004c72:	68ba      	ldr	r2, [r7, #8]
 8004c74:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004c76:	2101      	movs	r1, #1
 8004c78:	69b8      	ldr	r0, [r7, #24]
 8004c7a:	f7ff ff05 	bl	8004a88 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004c7e:	69bb      	ldr	r3, [r7, #24]
 8004c80:	78fa      	ldrb	r2, [r7, #3]
 8004c82:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004c86:	bf00      	nop
 8004c88:	3710      	adds	r7, #16
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	bd80      	pop	{r7, pc}
	...

08004c90 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	b08e      	sub	sp, #56	; 0x38
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	60f8      	str	r0, [r7, #12]
 8004c98:	60b9      	str	r1, [r7, #8]
 8004c9a:	607a      	str	r2, [r7, #4]
 8004c9c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004c9e:	2300      	movs	r3, #0
 8004ca0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004ca6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d10a      	bne.n	8004cc2 <xQueueGenericSend+0x32>
	__asm volatile
 8004cac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cb0:	f383 8811 	msr	BASEPRI, r3
 8004cb4:	f3bf 8f6f 	isb	sy
 8004cb8:	f3bf 8f4f 	dsb	sy
 8004cbc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004cbe:	bf00      	nop
 8004cc0:	e7fe      	b.n	8004cc0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004cc2:	68bb      	ldr	r3, [r7, #8]
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d103      	bne.n	8004cd0 <xQueueGenericSend+0x40>
 8004cc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d101      	bne.n	8004cd4 <xQueueGenericSend+0x44>
 8004cd0:	2301      	movs	r3, #1
 8004cd2:	e000      	b.n	8004cd6 <xQueueGenericSend+0x46>
 8004cd4:	2300      	movs	r3, #0
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d10a      	bne.n	8004cf0 <xQueueGenericSend+0x60>
	__asm volatile
 8004cda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cde:	f383 8811 	msr	BASEPRI, r3
 8004ce2:	f3bf 8f6f 	isb	sy
 8004ce6:	f3bf 8f4f 	dsb	sy
 8004cea:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004cec:	bf00      	nop
 8004cee:	e7fe      	b.n	8004cee <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004cf0:	683b      	ldr	r3, [r7, #0]
 8004cf2:	2b02      	cmp	r3, #2
 8004cf4:	d103      	bne.n	8004cfe <xQueueGenericSend+0x6e>
 8004cf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cf8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cfa:	2b01      	cmp	r3, #1
 8004cfc:	d101      	bne.n	8004d02 <xQueueGenericSend+0x72>
 8004cfe:	2301      	movs	r3, #1
 8004d00:	e000      	b.n	8004d04 <xQueueGenericSend+0x74>
 8004d02:	2300      	movs	r3, #0
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d10a      	bne.n	8004d1e <xQueueGenericSend+0x8e>
	__asm volatile
 8004d08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d0c:	f383 8811 	msr	BASEPRI, r3
 8004d10:	f3bf 8f6f 	isb	sy
 8004d14:	f3bf 8f4f 	dsb	sy
 8004d18:	623b      	str	r3, [r7, #32]
}
 8004d1a:	bf00      	nop
 8004d1c:	e7fe      	b.n	8004d1c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004d1e:	f001 f9bd 	bl	800609c <xTaskGetSchedulerState>
 8004d22:	4603      	mov	r3, r0
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d102      	bne.n	8004d2e <xQueueGenericSend+0x9e>
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d101      	bne.n	8004d32 <xQueueGenericSend+0xa2>
 8004d2e:	2301      	movs	r3, #1
 8004d30:	e000      	b.n	8004d34 <xQueueGenericSend+0xa4>
 8004d32:	2300      	movs	r3, #0
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d10a      	bne.n	8004d4e <xQueueGenericSend+0xbe>
	__asm volatile
 8004d38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d3c:	f383 8811 	msr	BASEPRI, r3
 8004d40:	f3bf 8f6f 	isb	sy
 8004d44:	f3bf 8f4f 	dsb	sy
 8004d48:	61fb      	str	r3, [r7, #28]
}
 8004d4a:	bf00      	nop
 8004d4c:	e7fe      	b.n	8004d4c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004d4e:	f001 ff01 	bl	8006b54 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004d52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d54:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004d56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d5a:	429a      	cmp	r2, r3
 8004d5c:	d302      	bcc.n	8004d64 <xQueueGenericSend+0xd4>
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	2b02      	cmp	r3, #2
 8004d62:	d129      	bne.n	8004db8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004d64:	683a      	ldr	r2, [r7, #0]
 8004d66:	68b9      	ldr	r1, [r7, #8]
 8004d68:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004d6a:	f000 fa0b 	bl	8005184 <prvCopyDataToQueue>
 8004d6e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004d70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d010      	beq.n	8004d9a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004d78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d7a:	3324      	adds	r3, #36	; 0x24
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	f000 ffcf 	bl	8005d20 <xTaskRemoveFromEventList>
 8004d82:	4603      	mov	r3, r0
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d013      	beq.n	8004db0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004d88:	4b3f      	ldr	r3, [pc, #252]	; (8004e88 <xQueueGenericSend+0x1f8>)
 8004d8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d8e:	601a      	str	r2, [r3, #0]
 8004d90:	f3bf 8f4f 	dsb	sy
 8004d94:	f3bf 8f6f 	isb	sy
 8004d98:	e00a      	b.n	8004db0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004d9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d007      	beq.n	8004db0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004da0:	4b39      	ldr	r3, [pc, #228]	; (8004e88 <xQueueGenericSend+0x1f8>)
 8004da2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004da6:	601a      	str	r2, [r3, #0]
 8004da8:	f3bf 8f4f 	dsb	sy
 8004dac:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004db0:	f001 ff00 	bl	8006bb4 <vPortExitCritical>
				return pdPASS;
 8004db4:	2301      	movs	r3, #1
 8004db6:	e063      	b.n	8004e80 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d103      	bne.n	8004dc6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004dbe:	f001 fef9 	bl	8006bb4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	e05c      	b.n	8004e80 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004dc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d106      	bne.n	8004dda <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004dcc:	f107 0314 	add.w	r3, r7, #20
 8004dd0:	4618      	mov	r0, r3
 8004dd2:	f001 f809 	bl	8005de8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004dd6:	2301      	movs	r3, #1
 8004dd8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004dda:	f001 feeb 	bl	8006bb4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004dde:	f000 fd7b 	bl	80058d8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004de2:	f001 feb7 	bl	8006b54 <vPortEnterCritical>
 8004de6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004de8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004dec:	b25b      	sxtb	r3, r3
 8004dee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004df2:	d103      	bne.n	8004dfc <xQueueGenericSend+0x16c>
 8004df4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004df6:	2200      	movs	r2, #0
 8004df8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004dfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dfe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004e02:	b25b      	sxtb	r3, r3
 8004e04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e08:	d103      	bne.n	8004e12 <xQueueGenericSend+0x182>
 8004e0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004e12:	f001 fecf 	bl	8006bb4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004e16:	1d3a      	adds	r2, r7, #4
 8004e18:	f107 0314 	add.w	r3, r7, #20
 8004e1c:	4611      	mov	r1, r2
 8004e1e:	4618      	mov	r0, r3
 8004e20:	f000 fff8 	bl	8005e14 <xTaskCheckForTimeOut>
 8004e24:	4603      	mov	r3, r0
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d124      	bne.n	8004e74 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004e2a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004e2c:	f000 faa2 	bl	8005374 <prvIsQueueFull>
 8004e30:	4603      	mov	r3, r0
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d018      	beq.n	8004e68 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004e36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e38:	3310      	adds	r3, #16
 8004e3a:	687a      	ldr	r2, [r7, #4]
 8004e3c:	4611      	mov	r1, r2
 8004e3e:	4618      	mov	r0, r3
 8004e40:	f000 ff1e 	bl	8005c80 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004e44:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004e46:	f000 fa2d 	bl	80052a4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004e4a:	f000 fd53 	bl	80058f4 <xTaskResumeAll>
 8004e4e:	4603      	mov	r3, r0
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	f47f af7c 	bne.w	8004d4e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8004e56:	4b0c      	ldr	r3, [pc, #48]	; (8004e88 <xQueueGenericSend+0x1f8>)
 8004e58:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e5c:	601a      	str	r2, [r3, #0]
 8004e5e:	f3bf 8f4f 	dsb	sy
 8004e62:	f3bf 8f6f 	isb	sy
 8004e66:	e772      	b.n	8004d4e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004e68:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004e6a:	f000 fa1b 	bl	80052a4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004e6e:	f000 fd41 	bl	80058f4 <xTaskResumeAll>
 8004e72:	e76c      	b.n	8004d4e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004e74:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004e76:	f000 fa15 	bl	80052a4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004e7a:	f000 fd3b 	bl	80058f4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004e7e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004e80:	4618      	mov	r0, r3
 8004e82:	3738      	adds	r7, #56	; 0x38
 8004e84:	46bd      	mov	sp, r7
 8004e86:	bd80      	pop	{r7, pc}
 8004e88:	e000ed04 	.word	0xe000ed04

08004e8c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	b090      	sub	sp, #64	; 0x40
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	60f8      	str	r0, [r7, #12]
 8004e94:	60b9      	str	r1, [r7, #8]
 8004e96:	607a      	str	r2, [r7, #4]
 8004e98:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8004e9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d10a      	bne.n	8004eba <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8004ea4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ea8:	f383 8811 	msr	BASEPRI, r3
 8004eac:	f3bf 8f6f 	isb	sy
 8004eb0:	f3bf 8f4f 	dsb	sy
 8004eb4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004eb6:	bf00      	nop
 8004eb8:	e7fe      	b.n	8004eb8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004eba:	68bb      	ldr	r3, [r7, #8]
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d103      	bne.n	8004ec8 <xQueueGenericSendFromISR+0x3c>
 8004ec0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ec2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d101      	bne.n	8004ecc <xQueueGenericSendFromISR+0x40>
 8004ec8:	2301      	movs	r3, #1
 8004eca:	e000      	b.n	8004ece <xQueueGenericSendFromISR+0x42>
 8004ecc:	2300      	movs	r3, #0
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d10a      	bne.n	8004ee8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8004ed2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ed6:	f383 8811 	msr	BASEPRI, r3
 8004eda:	f3bf 8f6f 	isb	sy
 8004ede:	f3bf 8f4f 	dsb	sy
 8004ee2:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004ee4:	bf00      	nop
 8004ee6:	e7fe      	b.n	8004ee6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	2b02      	cmp	r3, #2
 8004eec:	d103      	bne.n	8004ef6 <xQueueGenericSendFromISR+0x6a>
 8004eee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ef0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ef2:	2b01      	cmp	r3, #1
 8004ef4:	d101      	bne.n	8004efa <xQueueGenericSendFromISR+0x6e>
 8004ef6:	2301      	movs	r3, #1
 8004ef8:	e000      	b.n	8004efc <xQueueGenericSendFromISR+0x70>
 8004efa:	2300      	movs	r3, #0
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d10a      	bne.n	8004f16 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8004f00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f04:	f383 8811 	msr	BASEPRI, r3
 8004f08:	f3bf 8f6f 	isb	sy
 8004f0c:	f3bf 8f4f 	dsb	sy
 8004f10:	623b      	str	r3, [r7, #32]
}
 8004f12:	bf00      	nop
 8004f14:	e7fe      	b.n	8004f14 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004f16:	f001 feff 	bl	8006d18 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004f1a:	f3ef 8211 	mrs	r2, BASEPRI
 8004f1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f22:	f383 8811 	msr	BASEPRI, r3
 8004f26:	f3bf 8f6f 	isb	sy
 8004f2a:	f3bf 8f4f 	dsb	sy
 8004f2e:	61fa      	str	r2, [r7, #28]
 8004f30:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004f32:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004f34:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004f36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f38:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f3e:	429a      	cmp	r2, r3
 8004f40:	d302      	bcc.n	8004f48 <xQueueGenericSendFromISR+0xbc>
 8004f42:	683b      	ldr	r3, [r7, #0]
 8004f44:	2b02      	cmp	r3, #2
 8004f46:	d12f      	bne.n	8004fa8 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004f48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f4a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004f4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004f52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f56:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004f58:	683a      	ldr	r2, [r7, #0]
 8004f5a:	68b9      	ldr	r1, [r7, #8]
 8004f5c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004f5e:	f000 f911 	bl	8005184 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004f62:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8004f66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f6a:	d112      	bne.n	8004f92 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004f6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d016      	beq.n	8004fa2 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004f74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f76:	3324      	adds	r3, #36	; 0x24
 8004f78:	4618      	mov	r0, r3
 8004f7a:	f000 fed1 	bl	8005d20 <xTaskRemoveFromEventList>
 8004f7e:	4603      	mov	r3, r0
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d00e      	beq.n	8004fa2 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d00b      	beq.n	8004fa2 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	2201      	movs	r2, #1
 8004f8e:	601a      	str	r2, [r3, #0]
 8004f90:	e007      	b.n	8004fa2 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004f92:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004f96:	3301      	adds	r3, #1
 8004f98:	b2db      	uxtb	r3, r3
 8004f9a:	b25a      	sxtb	r2, r3
 8004f9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f9e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004fa2:	2301      	movs	r3, #1
 8004fa4:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8004fa6:	e001      	b.n	8004fac <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004fa8:	2300      	movs	r3, #0
 8004faa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004fac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fae:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004fb0:	697b      	ldr	r3, [r7, #20]
 8004fb2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004fb6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004fb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8004fba:	4618      	mov	r0, r3
 8004fbc:	3740      	adds	r7, #64	; 0x40
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	bd80      	pop	{r7, pc}
	...

08004fc4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004fc4:	b580      	push	{r7, lr}
 8004fc6:	b08c      	sub	sp, #48	; 0x30
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	60f8      	str	r0, [r7, #12]
 8004fcc:	60b9      	str	r1, [r7, #8]
 8004fce:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004fd0:	2300      	movs	r3, #0
 8004fd2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004fd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d10a      	bne.n	8004ff4 <xQueueReceive+0x30>
	__asm volatile
 8004fde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fe2:	f383 8811 	msr	BASEPRI, r3
 8004fe6:	f3bf 8f6f 	isb	sy
 8004fea:	f3bf 8f4f 	dsb	sy
 8004fee:	623b      	str	r3, [r7, #32]
}
 8004ff0:	bf00      	nop
 8004ff2:	e7fe      	b.n	8004ff2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004ff4:	68bb      	ldr	r3, [r7, #8]
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d103      	bne.n	8005002 <xQueueReceive+0x3e>
 8004ffa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d101      	bne.n	8005006 <xQueueReceive+0x42>
 8005002:	2301      	movs	r3, #1
 8005004:	e000      	b.n	8005008 <xQueueReceive+0x44>
 8005006:	2300      	movs	r3, #0
 8005008:	2b00      	cmp	r3, #0
 800500a:	d10a      	bne.n	8005022 <xQueueReceive+0x5e>
	__asm volatile
 800500c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005010:	f383 8811 	msr	BASEPRI, r3
 8005014:	f3bf 8f6f 	isb	sy
 8005018:	f3bf 8f4f 	dsb	sy
 800501c:	61fb      	str	r3, [r7, #28]
}
 800501e:	bf00      	nop
 8005020:	e7fe      	b.n	8005020 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005022:	f001 f83b 	bl	800609c <xTaskGetSchedulerState>
 8005026:	4603      	mov	r3, r0
 8005028:	2b00      	cmp	r3, #0
 800502a:	d102      	bne.n	8005032 <xQueueReceive+0x6e>
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2b00      	cmp	r3, #0
 8005030:	d101      	bne.n	8005036 <xQueueReceive+0x72>
 8005032:	2301      	movs	r3, #1
 8005034:	e000      	b.n	8005038 <xQueueReceive+0x74>
 8005036:	2300      	movs	r3, #0
 8005038:	2b00      	cmp	r3, #0
 800503a:	d10a      	bne.n	8005052 <xQueueReceive+0x8e>
	__asm volatile
 800503c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005040:	f383 8811 	msr	BASEPRI, r3
 8005044:	f3bf 8f6f 	isb	sy
 8005048:	f3bf 8f4f 	dsb	sy
 800504c:	61bb      	str	r3, [r7, #24]
}
 800504e:	bf00      	nop
 8005050:	e7fe      	b.n	8005050 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005052:	f001 fd7f 	bl	8006b54 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005056:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005058:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800505a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800505c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800505e:	2b00      	cmp	r3, #0
 8005060:	d01f      	beq.n	80050a2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005062:	68b9      	ldr	r1, [r7, #8]
 8005064:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005066:	f000 f8f7 	bl	8005258 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800506a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800506c:	1e5a      	subs	r2, r3, #1
 800506e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005070:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005072:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005074:	691b      	ldr	r3, [r3, #16]
 8005076:	2b00      	cmp	r3, #0
 8005078:	d00f      	beq.n	800509a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800507a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800507c:	3310      	adds	r3, #16
 800507e:	4618      	mov	r0, r3
 8005080:	f000 fe4e 	bl	8005d20 <xTaskRemoveFromEventList>
 8005084:	4603      	mov	r3, r0
 8005086:	2b00      	cmp	r3, #0
 8005088:	d007      	beq.n	800509a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800508a:	4b3d      	ldr	r3, [pc, #244]	; (8005180 <xQueueReceive+0x1bc>)
 800508c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005090:	601a      	str	r2, [r3, #0]
 8005092:	f3bf 8f4f 	dsb	sy
 8005096:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800509a:	f001 fd8b 	bl	8006bb4 <vPortExitCritical>
				return pdPASS;
 800509e:	2301      	movs	r3, #1
 80050a0:	e069      	b.n	8005176 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d103      	bne.n	80050b0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80050a8:	f001 fd84 	bl	8006bb4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80050ac:	2300      	movs	r3, #0
 80050ae:	e062      	b.n	8005176 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80050b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d106      	bne.n	80050c4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80050b6:	f107 0310 	add.w	r3, r7, #16
 80050ba:	4618      	mov	r0, r3
 80050bc:	f000 fe94 	bl	8005de8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80050c0:	2301      	movs	r3, #1
 80050c2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80050c4:	f001 fd76 	bl	8006bb4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80050c8:	f000 fc06 	bl	80058d8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80050cc:	f001 fd42 	bl	8006b54 <vPortEnterCritical>
 80050d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050d2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80050d6:	b25b      	sxtb	r3, r3
 80050d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050dc:	d103      	bne.n	80050e6 <xQueueReceive+0x122>
 80050de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050e0:	2200      	movs	r2, #0
 80050e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80050e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050e8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80050ec:	b25b      	sxtb	r3, r3
 80050ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050f2:	d103      	bne.n	80050fc <xQueueReceive+0x138>
 80050f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050f6:	2200      	movs	r2, #0
 80050f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80050fc:	f001 fd5a 	bl	8006bb4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005100:	1d3a      	adds	r2, r7, #4
 8005102:	f107 0310 	add.w	r3, r7, #16
 8005106:	4611      	mov	r1, r2
 8005108:	4618      	mov	r0, r3
 800510a:	f000 fe83 	bl	8005e14 <xTaskCheckForTimeOut>
 800510e:	4603      	mov	r3, r0
 8005110:	2b00      	cmp	r3, #0
 8005112:	d123      	bne.n	800515c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005114:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005116:	f000 f917 	bl	8005348 <prvIsQueueEmpty>
 800511a:	4603      	mov	r3, r0
 800511c:	2b00      	cmp	r3, #0
 800511e:	d017      	beq.n	8005150 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005120:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005122:	3324      	adds	r3, #36	; 0x24
 8005124:	687a      	ldr	r2, [r7, #4]
 8005126:	4611      	mov	r1, r2
 8005128:	4618      	mov	r0, r3
 800512a:	f000 fda9 	bl	8005c80 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800512e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005130:	f000 f8b8 	bl	80052a4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005134:	f000 fbde 	bl	80058f4 <xTaskResumeAll>
 8005138:	4603      	mov	r3, r0
 800513a:	2b00      	cmp	r3, #0
 800513c:	d189      	bne.n	8005052 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800513e:	4b10      	ldr	r3, [pc, #64]	; (8005180 <xQueueReceive+0x1bc>)
 8005140:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005144:	601a      	str	r2, [r3, #0]
 8005146:	f3bf 8f4f 	dsb	sy
 800514a:	f3bf 8f6f 	isb	sy
 800514e:	e780      	b.n	8005052 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005150:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005152:	f000 f8a7 	bl	80052a4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005156:	f000 fbcd 	bl	80058f4 <xTaskResumeAll>
 800515a:	e77a      	b.n	8005052 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800515c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800515e:	f000 f8a1 	bl	80052a4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005162:	f000 fbc7 	bl	80058f4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005166:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005168:	f000 f8ee 	bl	8005348 <prvIsQueueEmpty>
 800516c:	4603      	mov	r3, r0
 800516e:	2b00      	cmp	r3, #0
 8005170:	f43f af6f 	beq.w	8005052 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005174:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005176:	4618      	mov	r0, r3
 8005178:	3730      	adds	r7, #48	; 0x30
 800517a:	46bd      	mov	sp, r7
 800517c:	bd80      	pop	{r7, pc}
 800517e:	bf00      	nop
 8005180:	e000ed04 	.word	0xe000ed04

08005184 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005184:	b580      	push	{r7, lr}
 8005186:	b086      	sub	sp, #24
 8005188:	af00      	add	r7, sp, #0
 800518a:	60f8      	str	r0, [r7, #12]
 800518c:	60b9      	str	r1, [r7, #8]
 800518e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005190:	2300      	movs	r3, #0
 8005192:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005198:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d10d      	bne.n	80051be <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d14d      	bne.n	8005246 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	689b      	ldr	r3, [r3, #8]
 80051ae:	4618      	mov	r0, r3
 80051b0:	f000 ff92 	bl	80060d8 <xTaskPriorityDisinherit>
 80051b4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	2200      	movs	r2, #0
 80051ba:	609a      	str	r2, [r3, #8]
 80051bc:	e043      	b.n	8005246 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d119      	bne.n	80051f8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	6858      	ldr	r0, [r3, #4]
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051cc:	461a      	mov	r2, r3
 80051ce:	68b9      	ldr	r1, [r7, #8]
 80051d0:	f001 fff6 	bl	80071c0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	685a      	ldr	r2, [r3, #4]
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051dc:	441a      	add	r2, r3
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	685a      	ldr	r2, [r3, #4]
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	689b      	ldr	r3, [r3, #8]
 80051ea:	429a      	cmp	r2, r3
 80051ec:	d32b      	bcc.n	8005246 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	681a      	ldr	r2, [r3, #0]
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	605a      	str	r2, [r3, #4]
 80051f6:	e026      	b.n	8005246 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	68d8      	ldr	r0, [r3, #12]
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005200:	461a      	mov	r2, r3
 8005202:	68b9      	ldr	r1, [r7, #8]
 8005204:	f001 ffdc 	bl	80071c0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	68da      	ldr	r2, [r3, #12]
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005210:	425b      	negs	r3, r3
 8005212:	441a      	add	r2, r3
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	68da      	ldr	r2, [r3, #12]
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	429a      	cmp	r2, r3
 8005222:	d207      	bcs.n	8005234 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	689a      	ldr	r2, [r3, #8]
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800522c:	425b      	negs	r3, r3
 800522e:	441a      	add	r2, r3
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2b02      	cmp	r3, #2
 8005238:	d105      	bne.n	8005246 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800523a:	693b      	ldr	r3, [r7, #16]
 800523c:	2b00      	cmp	r3, #0
 800523e:	d002      	beq.n	8005246 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005240:	693b      	ldr	r3, [r7, #16]
 8005242:	3b01      	subs	r3, #1
 8005244:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005246:	693b      	ldr	r3, [r7, #16]
 8005248:	1c5a      	adds	r2, r3, #1
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800524e:	697b      	ldr	r3, [r7, #20]
}
 8005250:	4618      	mov	r0, r3
 8005252:	3718      	adds	r7, #24
 8005254:	46bd      	mov	sp, r7
 8005256:	bd80      	pop	{r7, pc}

08005258 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005258:	b580      	push	{r7, lr}
 800525a:	b082      	sub	sp, #8
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
 8005260:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005266:	2b00      	cmp	r3, #0
 8005268:	d018      	beq.n	800529c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	68da      	ldr	r2, [r3, #12]
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005272:	441a      	add	r2, r3
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	68da      	ldr	r2, [r3, #12]
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	689b      	ldr	r3, [r3, #8]
 8005280:	429a      	cmp	r2, r3
 8005282:	d303      	bcc.n	800528c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681a      	ldr	r2, [r3, #0]
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	68d9      	ldr	r1, [r3, #12]
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005294:	461a      	mov	r2, r3
 8005296:	6838      	ldr	r0, [r7, #0]
 8005298:	f001 ff92 	bl	80071c0 <memcpy>
	}
}
 800529c:	bf00      	nop
 800529e:	3708      	adds	r7, #8
 80052a0:	46bd      	mov	sp, r7
 80052a2:	bd80      	pop	{r7, pc}

080052a4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80052a4:	b580      	push	{r7, lr}
 80052a6:	b084      	sub	sp, #16
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80052ac:	f001 fc52 	bl	8006b54 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80052b6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80052b8:	e011      	b.n	80052de <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d012      	beq.n	80052e8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	3324      	adds	r3, #36	; 0x24
 80052c6:	4618      	mov	r0, r3
 80052c8:	f000 fd2a 	bl	8005d20 <xTaskRemoveFromEventList>
 80052cc:	4603      	mov	r3, r0
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d001      	beq.n	80052d6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80052d2:	f000 fe01 	bl	8005ed8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80052d6:	7bfb      	ldrb	r3, [r7, #15]
 80052d8:	3b01      	subs	r3, #1
 80052da:	b2db      	uxtb	r3, r3
 80052dc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80052de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	dce9      	bgt.n	80052ba <prvUnlockQueue+0x16>
 80052e6:	e000      	b.n	80052ea <prvUnlockQueue+0x46>
					break;
 80052e8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	22ff      	movs	r2, #255	; 0xff
 80052ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80052f2:	f001 fc5f 	bl	8006bb4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80052f6:	f001 fc2d 	bl	8006b54 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005300:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005302:	e011      	b.n	8005328 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	691b      	ldr	r3, [r3, #16]
 8005308:	2b00      	cmp	r3, #0
 800530a:	d012      	beq.n	8005332 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	3310      	adds	r3, #16
 8005310:	4618      	mov	r0, r3
 8005312:	f000 fd05 	bl	8005d20 <xTaskRemoveFromEventList>
 8005316:	4603      	mov	r3, r0
 8005318:	2b00      	cmp	r3, #0
 800531a:	d001      	beq.n	8005320 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800531c:	f000 fddc 	bl	8005ed8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005320:	7bbb      	ldrb	r3, [r7, #14]
 8005322:	3b01      	subs	r3, #1
 8005324:	b2db      	uxtb	r3, r3
 8005326:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005328:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800532c:	2b00      	cmp	r3, #0
 800532e:	dce9      	bgt.n	8005304 <prvUnlockQueue+0x60>
 8005330:	e000      	b.n	8005334 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005332:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	22ff      	movs	r2, #255	; 0xff
 8005338:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800533c:	f001 fc3a 	bl	8006bb4 <vPortExitCritical>
}
 8005340:	bf00      	nop
 8005342:	3710      	adds	r7, #16
 8005344:	46bd      	mov	sp, r7
 8005346:	bd80      	pop	{r7, pc}

08005348 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005348:	b580      	push	{r7, lr}
 800534a:	b084      	sub	sp, #16
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005350:	f001 fc00 	bl	8006b54 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005358:	2b00      	cmp	r3, #0
 800535a:	d102      	bne.n	8005362 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800535c:	2301      	movs	r3, #1
 800535e:	60fb      	str	r3, [r7, #12]
 8005360:	e001      	b.n	8005366 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005362:	2300      	movs	r3, #0
 8005364:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005366:	f001 fc25 	bl	8006bb4 <vPortExitCritical>

	return xReturn;
 800536a:	68fb      	ldr	r3, [r7, #12]
}
 800536c:	4618      	mov	r0, r3
 800536e:	3710      	adds	r7, #16
 8005370:	46bd      	mov	sp, r7
 8005372:	bd80      	pop	{r7, pc}

08005374 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005374:	b580      	push	{r7, lr}
 8005376:	b084      	sub	sp, #16
 8005378:	af00      	add	r7, sp, #0
 800537a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800537c:	f001 fbea 	bl	8006b54 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005388:	429a      	cmp	r2, r3
 800538a:	d102      	bne.n	8005392 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800538c:	2301      	movs	r3, #1
 800538e:	60fb      	str	r3, [r7, #12]
 8005390:	e001      	b.n	8005396 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005392:	2300      	movs	r3, #0
 8005394:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005396:	f001 fc0d 	bl	8006bb4 <vPortExitCritical>

	return xReturn;
 800539a:	68fb      	ldr	r3, [r7, #12]
}
 800539c:	4618      	mov	r0, r3
 800539e:	3710      	adds	r7, #16
 80053a0:	46bd      	mov	sp, r7
 80053a2:	bd80      	pop	{r7, pc}

080053a4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80053a4:	b480      	push	{r7}
 80053a6:	b085      	sub	sp, #20
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	6078      	str	r0, [r7, #4]
 80053ac:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80053ae:	2300      	movs	r3, #0
 80053b0:	60fb      	str	r3, [r7, #12]
 80053b2:	e014      	b.n	80053de <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80053b4:	4a0f      	ldr	r2, [pc, #60]	; (80053f4 <vQueueAddToRegistry+0x50>)
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d10b      	bne.n	80053d8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80053c0:	490c      	ldr	r1, [pc, #48]	; (80053f4 <vQueueAddToRegistry+0x50>)
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	683a      	ldr	r2, [r7, #0]
 80053c6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80053ca:	4a0a      	ldr	r2, [pc, #40]	; (80053f4 <vQueueAddToRegistry+0x50>)
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	00db      	lsls	r3, r3, #3
 80053d0:	4413      	add	r3, r2
 80053d2:	687a      	ldr	r2, [r7, #4]
 80053d4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80053d6:	e006      	b.n	80053e6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	3301      	adds	r3, #1
 80053dc:	60fb      	str	r3, [r7, #12]
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	2b07      	cmp	r3, #7
 80053e2:	d9e7      	bls.n	80053b4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80053e4:	bf00      	nop
 80053e6:	bf00      	nop
 80053e8:	3714      	adds	r7, #20
 80053ea:	46bd      	mov	sp, r7
 80053ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f0:	4770      	bx	lr
 80053f2:	bf00      	nop
 80053f4:	20004be0 	.word	0x20004be0

080053f8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80053f8:	b580      	push	{r7, lr}
 80053fa:	b086      	sub	sp, #24
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	60f8      	str	r0, [r7, #12]
 8005400:	60b9      	str	r1, [r7, #8]
 8005402:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005408:	f001 fba4 	bl	8006b54 <vPortEnterCritical>
 800540c:	697b      	ldr	r3, [r7, #20]
 800540e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005412:	b25b      	sxtb	r3, r3
 8005414:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005418:	d103      	bne.n	8005422 <vQueueWaitForMessageRestricted+0x2a>
 800541a:	697b      	ldr	r3, [r7, #20]
 800541c:	2200      	movs	r2, #0
 800541e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005422:	697b      	ldr	r3, [r7, #20]
 8005424:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005428:	b25b      	sxtb	r3, r3
 800542a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800542e:	d103      	bne.n	8005438 <vQueueWaitForMessageRestricted+0x40>
 8005430:	697b      	ldr	r3, [r7, #20]
 8005432:	2200      	movs	r2, #0
 8005434:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005438:	f001 fbbc 	bl	8006bb4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800543c:	697b      	ldr	r3, [r7, #20]
 800543e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005440:	2b00      	cmp	r3, #0
 8005442:	d106      	bne.n	8005452 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005444:	697b      	ldr	r3, [r7, #20]
 8005446:	3324      	adds	r3, #36	; 0x24
 8005448:	687a      	ldr	r2, [r7, #4]
 800544a:	68b9      	ldr	r1, [r7, #8]
 800544c:	4618      	mov	r0, r3
 800544e:	f000 fc3b 	bl	8005cc8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005452:	6978      	ldr	r0, [r7, #20]
 8005454:	f7ff ff26 	bl	80052a4 <prvUnlockQueue>
	}
 8005458:	bf00      	nop
 800545a:	3718      	adds	r7, #24
 800545c:	46bd      	mov	sp, r7
 800545e:	bd80      	pop	{r7, pc}

08005460 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005460:	b580      	push	{r7, lr}
 8005462:	b08e      	sub	sp, #56	; 0x38
 8005464:	af04      	add	r7, sp, #16
 8005466:	60f8      	str	r0, [r7, #12]
 8005468:	60b9      	str	r1, [r7, #8]
 800546a:	607a      	str	r2, [r7, #4]
 800546c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800546e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005470:	2b00      	cmp	r3, #0
 8005472:	d10a      	bne.n	800548a <xTaskCreateStatic+0x2a>
	__asm volatile
 8005474:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005478:	f383 8811 	msr	BASEPRI, r3
 800547c:	f3bf 8f6f 	isb	sy
 8005480:	f3bf 8f4f 	dsb	sy
 8005484:	623b      	str	r3, [r7, #32]
}
 8005486:	bf00      	nop
 8005488:	e7fe      	b.n	8005488 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800548a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800548c:	2b00      	cmp	r3, #0
 800548e:	d10a      	bne.n	80054a6 <xTaskCreateStatic+0x46>
	__asm volatile
 8005490:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005494:	f383 8811 	msr	BASEPRI, r3
 8005498:	f3bf 8f6f 	isb	sy
 800549c:	f3bf 8f4f 	dsb	sy
 80054a0:	61fb      	str	r3, [r7, #28]
}
 80054a2:	bf00      	nop
 80054a4:	e7fe      	b.n	80054a4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80054a6:	235c      	movs	r3, #92	; 0x5c
 80054a8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80054aa:	693b      	ldr	r3, [r7, #16]
 80054ac:	2b5c      	cmp	r3, #92	; 0x5c
 80054ae:	d00a      	beq.n	80054c6 <xTaskCreateStatic+0x66>
	__asm volatile
 80054b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054b4:	f383 8811 	msr	BASEPRI, r3
 80054b8:	f3bf 8f6f 	isb	sy
 80054bc:	f3bf 8f4f 	dsb	sy
 80054c0:	61bb      	str	r3, [r7, #24]
}
 80054c2:	bf00      	nop
 80054c4:	e7fe      	b.n	80054c4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80054c6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80054c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d01e      	beq.n	800550c <xTaskCreateStatic+0xac>
 80054ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d01b      	beq.n	800550c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80054d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054d6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80054d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054da:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80054dc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80054de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054e0:	2202      	movs	r2, #2
 80054e2:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80054e6:	2300      	movs	r3, #0
 80054e8:	9303      	str	r3, [sp, #12]
 80054ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054ec:	9302      	str	r3, [sp, #8]
 80054ee:	f107 0314 	add.w	r3, r7, #20
 80054f2:	9301      	str	r3, [sp, #4]
 80054f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054f6:	9300      	str	r3, [sp, #0]
 80054f8:	683b      	ldr	r3, [r7, #0]
 80054fa:	687a      	ldr	r2, [r7, #4]
 80054fc:	68b9      	ldr	r1, [r7, #8]
 80054fe:	68f8      	ldr	r0, [r7, #12]
 8005500:	f000 f850 	bl	80055a4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005504:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005506:	f000 f8dd 	bl	80056c4 <prvAddNewTaskToReadyList>
 800550a:	e001      	b.n	8005510 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800550c:	2300      	movs	r3, #0
 800550e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005510:	697b      	ldr	r3, [r7, #20]
	}
 8005512:	4618      	mov	r0, r3
 8005514:	3728      	adds	r7, #40	; 0x28
 8005516:	46bd      	mov	sp, r7
 8005518:	bd80      	pop	{r7, pc}

0800551a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800551a:	b580      	push	{r7, lr}
 800551c:	b08c      	sub	sp, #48	; 0x30
 800551e:	af04      	add	r7, sp, #16
 8005520:	60f8      	str	r0, [r7, #12]
 8005522:	60b9      	str	r1, [r7, #8]
 8005524:	603b      	str	r3, [r7, #0]
 8005526:	4613      	mov	r3, r2
 8005528:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800552a:	88fb      	ldrh	r3, [r7, #6]
 800552c:	009b      	lsls	r3, r3, #2
 800552e:	4618      	mov	r0, r3
 8005530:	f001 fc32 	bl	8006d98 <pvPortMalloc>
 8005534:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005536:	697b      	ldr	r3, [r7, #20]
 8005538:	2b00      	cmp	r3, #0
 800553a:	d00e      	beq.n	800555a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800553c:	205c      	movs	r0, #92	; 0x5c
 800553e:	f001 fc2b 	bl	8006d98 <pvPortMalloc>
 8005542:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005544:	69fb      	ldr	r3, [r7, #28]
 8005546:	2b00      	cmp	r3, #0
 8005548:	d003      	beq.n	8005552 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800554a:	69fb      	ldr	r3, [r7, #28]
 800554c:	697a      	ldr	r2, [r7, #20]
 800554e:	631a      	str	r2, [r3, #48]	; 0x30
 8005550:	e005      	b.n	800555e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005552:	6978      	ldr	r0, [r7, #20]
 8005554:	f001 fcec 	bl	8006f30 <vPortFree>
 8005558:	e001      	b.n	800555e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800555a:	2300      	movs	r3, #0
 800555c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800555e:	69fb      	ldr	r3, [r7, #28]
 8005560:	2b00      	cmp	r3, #0
 8005562:	d017      	beq.n	8005594 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005564:	69fb      	ldr	r3, [r7, #28]
 8005566:	2200      	movs	r2, #0
 8005568:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800556c:	88fa      	ldrh	r2, [r7, #6]
 800556e:	2300      	movs	r3, #0
 8005570:	9303      	str	r3, [sp, #12]
 8005572:	69fb      	ldr	r3, [r7, #28]
 8005574:	9302      	str	r3, [sp, #8]
 8005576:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005578:	9301      	str	r3, [sp, #4]
 800557a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800557c:	9300      	str	r3, [sp, #0]
 800557e:	683b      	ldr	r3, [r7, #0]
 8005580:	68b9      	ldr	r1, [r7, #8]
 8005582:	68f8      	ldr	r0, [r7, #12]
 8005584:	f000 f80e 	bl	80055a4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005588:	69f8      	ldr	r0, [r7, #28]
 800558a:	f000 f89b 	bl	80056c4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800558e:	2301      	movs	r3, #1
 8005590:	61bb      	str	r3, [r7, #24]
 8005592:	e002      	b.n	800559a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005594:	f04f 33ff 	mov.w	r3, #4294967295
 8005598:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800559a:	69bb      	ldr	r3, [r7, #24]
	}
 800559c:	4618      	mov	r0, r3
 800559e:	3720      	adds	r7, #32
 80055a0:	46bd      	mov	sp, r7
 80055a2:	bd80      	pop	{r7, pc}

080055a4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80055a4:	b580      	push	{r7, lr}
 80055a6:	b088      	sub	sp, #32
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	60f8      	str	r0, [r7, #12]
 80055ac:	60b9      	str	r1, [r7, #8]
 80055ae:	607a      	str	r2, [r7, #4]
 80055b0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80055b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055b4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	009b      	lsls	r3, r3, #2
 80055ba:	461a      	mov	r2, r3
 80055bc:	21a5      	movs	r1, #165	; 0xa5
 80055be:	f001 fe0d 	bl	80071dc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80055c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80055cc:	3b01      	subs	r3, #1
 80055ce:	009b      	lsls	r3, r3, #2
 80055d0:	4413      	add	r3, r2
 80055d2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80055d4:	69bb      	ldr	r3, [r7, #24]
 80055d6:	f023 0307 	bic.w	r3, r3, #7
 80055da:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80055dc:	69bb      	ldr	r3, [r7, #24]
 80055de:	f003 0307 	and.w	r3, r3, #7
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d00a      	beq.n	80055fc <prvInitialiseNewTask+0x58>
	__asm volatile
 80055e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055ea:	f383 8811 	msr	BASEPRI, r3
 80055ee:	f3bf 8f6f 	isb	sy
 80055f2:	f3bf 8f4f 	dsb	sy
 80055f6:	617b      	str	r3, [r7, #20]
}
 80055f8:	bf00      	nop
 80055fa:	e7fe      	b.n	80055fa <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80055fc:	68bb      	ldr	r3, [r7, #8]
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d01f      	beq.n	8005642 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005602:	2300      	movs	r3, #0
 8005604:	61fb      	str	r3, [r7, #28]
 8005606:	e012      	b.n	800562e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005608:	68ba      	ldr	r2, [r7, #8]
 800560a:	69fb      	ldr	r3, [r7, #28]
 800560c:	4413      	add	r3, r2
 800560e:	7819      	ldrb	r1, [r3, #0]
 8005610:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005612:	69fb      	ldr	r3, [r7, #28]
 8005614:	4413      	add	r3, r2
 8005616:	3334      	adds	r3, #52	; 0x34
 8005618:	460a      	mov	r2, r1
 800561a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800561c:	68ba      	ldr	r2, [r7, #8]
 800561e:	69fb      	ldr	r3, [r7, #28]
 8005620:	4413      	add	r3, r2
 8005622:	781b      	ldrb	r3, [r3, #0]
 8005624:	2b00      	cmp	r3, #0
 8005626:	d006      	beq.n	8005636 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005628:	69fb      	ldr	r3, [r7, #28]
 800562a:	3301      	adds	r3, #1
 800562c:	61fb      	str	r3, [r7, #28]
 800562e:	69fb      	ldr	r3, [r7, #28]
 8005630:	2b0f      	cmp	r3, #15
 8005632:	d9e9      	bls.n	8005608 <prvInitialiseNewTask+0x64>
 8005634:	e000      	b.n	8005638 <prvInitialiseNewTask+0x94>
			{
				break;
 8005636:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005638:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800563a:	2200      	movs	r2, #0
 800563c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005640:	e003      	b.n	800564a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005642:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005644:	2200      	movs	r2, #0
 8005646:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800564a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800564c:	2b37      	cmp	r3, #55	; 0x37
 800564e:	d901      	bls.n	8005654 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005650:	2337      	movs	r3, #55	; 0x37
 8005652:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005654:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005656:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005658:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800565a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800565c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800565e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005660:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005662:	2200      	movs	r2, #0
 8005664:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005668:	3304      	adds	r3, #4
 800566a:	4618      	mov	r0, r3
 800566c:	f7ff f978 	bl	8004960 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005670:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005672:	3318      	adds	r3, #24
 8005674:	4618      	mov	r0, r3
 8005676:	f7ff f973 	bl	8004960 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800567a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800567c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800567e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005680:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005682:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005686:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005688:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800568a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800568c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800568e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005690:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005692:	2200      	movs	r2, #0
 8005694:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005696:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005698:	2200      	movs	r2, #0
 800569a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800569e:	683a      	ldr	r2, [r7, #0]
 80056a0:	68f9      	ldr	r1, [r7, #12]
 80056a2:	69b8      	ldr	r0, [r7, #24]
 80056a4:	f001 f928 	bl	80068f8 <pxPortInitialiseStack>
 80056a8:	4602      	mov	r2, r0
 80056aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056ac:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80056ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d002      	beq.n	80056ba <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80056b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80056b8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80056ba:	bf00      	nop
 80056bc:	3720      	adds	r7, #32
 80056be:	46bd      	mov	sp, r7
 80056c0:	bd80      	pop	{r7, pc}
	...

080056c4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80056c4:	b580      	push	{r7, lr}
 80056c6:	b082      	sub	sp, #8
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80056cc:	f001 fa42 	bl	8006b54 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80056d0:	4b2d      	ldr	r3, [pc, #180]	; (8005788 <prvAddNewTaskToReadyList+0xc4>)
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	3301      	adds	r3, #1
 80056d6:	4a2c      	ldr	r2, [pc, #176]	; (8005788 <prvAddNewTaskToReadyList+0xc4>)
 80056d8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80056da:	4b2c      	ldr	r3, [pc, #176]	; (800578c <prvAddNewTaskToReadyList+0xc8>)
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d109      	bne.n	80056f6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80056e2:	4a2a      	ldr	r2, [pc, #168]	; (800578c <prvAddNewTaskToReadyList+0xc8>)
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80056e8:	4b27      	ldr	r3, [pc, #156]	; (8005788 <prvAddNewTaskToReadyList+0xc4>)
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	2b01      	cmp	r3, #1
 80056ee:	d110      	bne.n	8005712 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80056f0:	f000 fc16 	bl	8005f20 <prvInitialiseTaskLists>
 80056f4:	e00d      	b.n	8005712 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80056f6:	4b26      	ldr	r3, [pc, #152]	; (8005790 <prvAddNewTaskToReadyList+0xcc>)
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d109      	bne.n	8005712 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80056fe:	4b23      	ldr	r3, [pc, #140]	; (800578c <prvAddNewTaskToReadyList+0xc8>)
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005708:	429a      	cmp	r2, r3
 800570a:	d802      	bhi.n	8005712 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800570c:	4a1f      	ldr	r2, [pc, #124]	; (800578c <prvAddNewTaskToReadyList+0xc8>)
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005712:	4b20      	ldr	r3, [pc, #128]	; (8005794 <prvAddNewTaskToReadyList+0xd0>)
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	3301      	adds	r3, #1
 8005718:	4a1e      	ldr	r2, [pc, #120]	; (8005794 <prvAddNewTaskToReadyList+0xd0>)
 800571a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800571c:	4b1d      	ldr	r3, [pc, #116]	; (8005794 <prvAddNewTaskToReadyList+0xd0>)
 800571e:	681a      	ldr	r2, [r3, #0]
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005728:	4b1b      	ldr	r3, [pc, #108]	; (8005798 <prvAddNewTaskToReadyList+0xd4>)
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	429a      	cmp	r2, r3
 800572e:	d903      	bls.n	8005738 <prvAddNewTaskToReadyList+0x74>
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005734:	4a18      	ldr	r2, [pc, #96]	; (8005798 <prvAddNewTaskToReadyList+0xd4>)
 8005736:	6013      	str	r3, [r2, #0]
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800573c:	4613      	mov	r3, r2
 800573e:	009b      	lsls	r3, r3, #2
 8005740:	4413      	add	r3, r2
 8005742:	009b      	lsls	r3, r3, #2
 8005744:	4a15      	ldr	r2, [pc, #84]	; (800579c <prvAddNewTaskToReadyList+0xd8>)
 8005746:	441a      	add	r2, r3
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	3304      	adds	r3, #4
 800574c:	4619      	mov	r1, r3
 800574e:	4610      	mov	r0, r2
 8005750:	f7ff f913 	bl	800497a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005754:	f001 fa2e 	bl	8006bb4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005758:	4b0d      	ldr	r3, [pc, #52]	; (8005790 <prvAddNewTaskToReadyList+0xcc>)
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	2b00      	cmp	r3, #0
 800575e:	d00e      	beq.n	800577e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005760:	4b0a      	ldr	r3, [pc, #40]	; (800578c <prvAddNewTaskToReadyList+0xc8>)
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800576a:	429a      	cmp	r2, r3
 800576c:	d207      	bcs.n	800577e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800576e:	4b0c      	ldr	r3, [pc, #48]	; (80057a0 <prvAddNewTaskToReadyList+0xdc>)
 8005770:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005774:	601a      	str	r2, [r3, #0]
 8005776:	f3bf 8f4f 	dsb	sy
 800577a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800577e:	bf00      	nop
 8005780:	3708      	adds	r7, #8
 8005782:	46bd      	mov	sp, r7
 8005784:	bd80      	pop	{r7, pc}
 8005786:	bf00      	nop
 8005788:	20000c24 	.word	0x20000c24
 800578c:	20000750 	.word	0x20000750
 8005790:	20000c30 	.word	0x20000c30
 8005794:	20000c40 	.word	0x20000c40
 8005798:	20000c2c 	.word	0x20000c2c
 800579c:	20000754 	.word	0x20000754
 80057a0:	e000ed04 	.word	0xe000ed04

080057a4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80057a4:	b580      	push	{r7, lr}
 80057a6:	b084      	sub	sp, #16
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80057ac:	2300      	movs	r3, #0
 80057ae:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d017      	beq.n	80057e6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80057b6:	4b13      	ldr	r3, [pc, #76]	; (8005804 <vTaskDelay+0x60>)
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d00a      	beq.n	80057d4 <vTaskDelay+0x30>
	__asm volatile
 80057be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057c2:	f383 8811 	msr	BASEPRI, r3
 80057c6:	f3bf 8f6f 	isb	sy
 80057ca:	f3bf 8f4f 	dsb	sy
 80057ce:	60bb      	str	r3, [r7, #8]
}
 80057d0:	bf00      	nop
 80057d2:	e7fe      	b.n	80057d2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80057d4:	f000 f880 	bl	80058d8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80057d8:	2100      	movs	r1, #0
 80057da:	6878      	ldr	r0, [r7, #4]
 80057dc:	f000 fcea 	bl	80061b4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80057e0:	f000 f888 	bl	80058f4 <xTaskResumeAll>
 80057e4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d107      	bne.n	80057fc <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80057ec:	4b06      	ldr	r3, [pc, #24]	; (8005808 <vTaskDelay+0x64>)
 80057ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80057f2:	601a      	str	r2, [r3, #0]
 80057f4:	f3bf 8f4f 	dsb	sy
 80057f8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80057fc:	bf00      	nop
 80057fe:	3710      	adds	r7, #16
 8005800:	46bd      	mov	sp, r7
 8005802:	bd80      	pop	{r7, pc}
 8005804:	20000c4c 	.word	0x20000c4c
 8005808:	e000ed04 	.word	0xe000ed04

0800580c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800580c:	b580      	push	{r7, lr}
 800580e:	b08a      	sub	sp, #40	; 0x28
 8005810:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005812:	2300      	movs	r3, #0
 8005814:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005816:	2300      	movs	r3, #0
 8005818:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800581a:	463a      	mov	r2, r7
 800581c:	1d39      	adds	r1, r7, #4
 800581e:	f107 0308 	add.w	r3, r7, #8
 8005822:	4618      	mov	r0, r3
 8005824:	f7ff f848 	bl	80048b8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005828:	6839      	ldr	r1, [r7, #0]
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	68ba      	ldr	r2, [r7, #8]
 800582e:	9202      	str	r2, [sp, #8]
 8005830:	9301      	str	r3, [sp, #4]
 8005832:	2300      	movs	r3, #0
 8005834:	9300      	str	r3, [sp, #0]
 8005836:	2300      	movs	r3, #0
 8005838:	460a      	mov	r2, r1
 800583a:	4921      	ldr	r1, [pc, #132]	; (80058c0 <vTaskStartScheduler+0xb4>)
 800583c:	4821      	ldr	r0, [pc, #132]	; (80058c4 <vTaskStartScheduler+0xb8>)
 800583e:	f7ff fe0f 	bl	8005460 <xTaskCreateStatic>
 8005842:	4603      	mov	r3, r0
 8005844:	4a20      	ldr	r2, [pc, #128]	; (80058c8 <vTaskStartScheduler+0xbc>)
 8005846:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005848:	4b1f      	ldr	r3, [pc, #124]	; (80058c8 <vTaskStartScheduler+0xbc>)
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	2b00      	cmp	r3, #0
 800584e:	d002      	beq.n	8005856 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005850:	2301      	movs	r3, #1
 8005852:	617b      	str	r3, [r7, #20]
 8005854:	e001      	b.n	800585a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005856:	2300      	movs	r3, #0
 8005858:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800585a:	697b      	ldr	r3, [r7, #20]
 800585c:	2b01      	cmp	r3, #1
 800585e:	d102      	bne.n	8005866 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005860:	f000 fcfc 	bl	800625c <xTimerCreateTimerTask>
 8005864:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005866:	697b      	ldr	r3, [r7, #20]
 8005868:	2b01      	cmp	r3, #1
 800586a:	d116      	bne.n	800589a <vTaskStartScheduler+0x8e>
	__asm volatile
 800586c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005870:	f383 8811 	msr	BASEPRI, r3
 8005874:	f3bf 8f6f 	isb	sy
 8005878:	f3bf 8f4f 	dsb	sy
 800587c:	613b      	str	r3, [r7, #16]
}
 800587e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005880:	4b12      	ldr	r3, [pc, #72]	; (80058cc <vTaskStartScheduler+0xc0>)
 8005882:	f04f 32ff 	mov.w	r2, #4294967295
 8005886:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005888:	4b11      	ldr	r3, [pc, #68]	; (80058d0 <vTaskStartScheduler+0xc4>)
 800588a:	2201      	movs	r2, #1
 800588c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800588e:	4b11      	ldr	r3, [pc, #68]	; (80058d4 <vTaskStartScheduler+0xc8>)
 8005890:	2200      	movs	r2, #0
 8005892:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005894:	f001 f8bc 	bl	8006a10 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005898:	e00e      	b.n	80058b8 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800589a:	697b      	ldr	r3, [r7, #20]
 800589c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058a0:	d10a      	bne.n	80058b8 <vTaskStartScheduler+0xac>
	__asm volatile
 80058a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058a6:	f383 8811 	msr	BASEPRI, r3
 80058aa:	f3bf 8f6f 	isb	sy
 80058ae:	f3bf 8f4f 	dsb	sy
 80058b2:	60fb      	str	r3, [r7, #12]
}
 80058b4:	bf00      	nop
 80058b6:	e7fe      	b.n	80058b6 <vTaskStartScheduler+0xaa>
}
 80058b8:	bf00      	nop
 80058ba:	3718      	adds	r7, #24
 80058bc:	46bd      	mov	sp, r7
 80058be:	bd80      	pop	{r7, pc}
 80058c0:	08007c50 	.word	0x08007c50
 80058c4:	08005ef1 	.word	0x08005ef1
 80058c8:	20000c48 	.word	0x20000c48
 80058cc:	20000c44 	.word	0x20000c44
 80058d0:	20000c30 	.word	0x20000c30
 80058d4:	20000c28 	.word	0x20000c28

080058d8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80058d8:	b480      	push	{r7}
 80058da:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80058dc:	4b04      	ldr	r3, [pc, #16]	; (80058f0 <vTaskSuspendAll+0x18>)
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	3301      	adds	r3, #1
 80058e2:	4a03      	ldr	r2, [pc, #12]	; (80058f0 <vTaskSuspendAll+0x18>)
 80058e4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80058e6:	bf00      	nop
 80058e8:	46bd      	mov	sp, r7
 80058ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ee:	4770      	bx	lr
 80058f0:	20000c4c 	.word	0x20000c4c

080058f4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80058f4:	b580      	push	{r7, lr}
 80058f6:	b084      	sub	sp, #16
 80058f8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80058fa:	2300      	movs	r3, #0
 80058fc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80058fe:	2300      	movs	r3, #0
 8005900:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005902:	4b42      	ldr	r3, [pc, #264]	; (8005a0c <xTaskResumeAll+0x118>)
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	2b00      	cmp	r3, #0
 8005908:	d10a      	bne.n	8005920 <xTaskResumeAll+0x2c>
	__asm volatile
 800590a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800590e:	f383 8811 	msr	BASEPRI, r3
 8005912:	f3bf 8f6f 	isb	sy
 8005916:	f3bf 8f4f 	dsb	sy
 800591a:	603b      	str	r3, [r7, #0]
}
 800591c:	bf00      	nop
 800591e:	e7fe      	b.n	800591e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005920:	f001 f918 	bl	8006b54 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005924:	4b39      	ldr	r3, [pc, #228]	; (8005a0c <xTaskResumeAll+0x118>)
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	3b01      	subs	r3, #1
 800592a:	4a38      	ldr	r2, [pc, #224]	; (8005a0c <xTaskResumeAll+0x118>)
 800592c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800592e:	4b37      	ldr	r3, [pc, #220]	; (8005a0c <xTaskResumeAll+0x118>)
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	2b00      	cmp	r3, #0
 8005934:	d162      	bne.n	80059fc <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005936:	4b36      	ldr	r3, [pc, #216]	; (8005a10 <xTaskResumeAll+0x11c>)
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	2b00      	cmp	r3, #0
 800593c:	d05e      	beq.n	80059fc <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800593e:	e02f      	b.n	80059a0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005940:	4b34      	ldr	r3, [pc, #208]	; (8005a14 <xTaskResumeAll+0x120>)
 8005942:	68db      	ldr	r3, [r3, #12]
 8005944:	68db      	ldr	r3, [r3, #12]
 8005946:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	3318      	adds	r3, #24
 800594c:	4618      	mov	r0, r3
 800594e:	f7ff f871 	bl	8004a34 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	3304      	adds	r3, #4
 8005956:	4618      	mov	r0, r3
 8005958:	f7ff f86c 	bl	8004a34 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005960:	4b2d      	ldr	r3, [pc, #180]	; (8005a18 <xTaskResumeAll+0x124>)
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	429a      	cmp	r2, r3
 8005966:	d903      	bls.n	8005970 <xTaskResumeAll+0x7c>
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800596c:	4a2a      	ldr	r2, [pc, #168]	; (8005a18 <xTaskResumeAll+0x124>)
 800596e:	6013      	str	r3, [r2, #0]
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005974:	4613      	mov	r3, r2
 8005976:	009b      	lsls	r3, r3, #2
 8005978:	4413      	add	r3, r2
 800597a:	009b      	lsls	r3, r3, #2
 800597c:	4a27      	ldr	r2, [pc, #156]	; (8005a1c <xTaskResumeAll+0x128>)
 800597e:	441a      	add	r2, r3
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	3304      	adds	r3, #4
 8005984:	4619      	mov	r1, r3
 8005986:	4610      	mov	r0, r2
 8005988:	f7fe fff7 	bl	800497a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005990:	4b23      	ldr	r3, [pc, #140]	; (8005a20 <xTaskResumeAll+0x12c>)
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005996:	429a      	cmp	r2, r3
 8005998:	d302      	bcc.n	80059a0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800599a:	4b22      	ldr	r3, [pc, #136]	; (8005a24 <xTaskResumeAll+0x130>)
 800599c:	2201      	movs	r2, #1
 800599e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80059a0:	4b1c      	ldr	r3, [pc, #112]	; (8005a14 <xTaskResumeAll+0x120>)
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d1cb      	bne.n	8005940 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d001      	beq.n	80059b2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80059ae:	f000 fb55 	bl	800605c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80059b2:	4b1d      	ldr	r3, [pc, #116]	; (8005a28 <xTaskResumeAll+0x134>)
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d010      	beq.n	80059e0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80059be:	f000 f847 	bl	8005a50 <xTaskIncrementTick>
 80059c2:	4603      	mov	r3, r0
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d002      	beq.n	80059ce <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80059c8:	4b16      	ldr	r3, [pc, #88]	; (8005a24 <xTaskResumeAll+0x130>)
 80059ca:	2201      	movs	r2, #1
 80059cc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	3b01      	subs	r3, #1
 80059d2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d1f1      	bne.n	80059be <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80059da:	4b13      	ldr	r3, [pc, #76]	; (8005a28 <xTaskResumeAll+0x134>)
 80059dc:	2200      	movs	r2, #0
 80059de:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80059e0:	4b10      	ldr	r3, [pc, #64]	; (8005a24 <xTaskResumeAll+0x130>)
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d009      	beq.n	80059fc <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80059e8:	2301      	movs	r3, #1
 80059ea:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80059ec:	4b0f      	ldr	r3, [pc, #60]	; (8005a2c <xTaskResumeAll+0x138>)
 80059ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80059f2:	601a      	str	r2, [r3, #0]
 80059f4:	f3bf 8f4f 	dsb	sy
 80059f8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80059fc:	f001 f8da 	bl	8006bb4 <vPortExitCritical>

	return xAlreadyYielded;
 8005a00:	68bb      	ldr	r3, [r7, #8]
}
 8005a02:	4618      	mov	r0, r3
 8005a04:	3710      	adds	r7, #16
 8005a06:	46bd      	mov	sp, r7
 8005a08:	bd80      	pop	{r7, pc}
 8005a0a:	bf00      	nop
 8005a0c:	20000c4c 	.word	0x20000c4c
 8005a10:	20000c24 	.word	0x20000c24
 8005a14:	20000be4 	.word	0x20000be4
 8005a18:	20000c2c 	.word	0x20000c2c
 8005a1c:	20000754 	.word	0x20000754
 8005a20:	20000750 	.word	0x20000750
 8005a24:	20000c38 	.word	0x20000c38
 8005a28:	20000c34 	.word	0x20000c34
 8005a2c:	e000ed04 	.word	0xe000ed04

08005a30 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005a30:	b480      	push	{r7}
 8005a32:	b083      	sub	sp, #12
 8005a34:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005a36:	4b05      	ldr	r3, [pc, #20]	; (8005a4c <xTaskGetTickCount+0x1c>)
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005a3c:	687b      	ldr	r3, [r7, #4]
}
 8005a3e:	4618      	mov	r0, r3
 8005a40:	370c      	adds	r7, #12
 8005a42:	46bd      	mov	sp, r7
 8005a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a48:	4770      	bx	lr
 8005a4a:	bf00      	nop
 8005a4c:	20000c28 	.word	0x20000c28

08005a50 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005a50:	b580      	push	{r7, lr}
 8005a52:	b086      	sub	sp, #24
 8005a54:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005a56:	2300      	movs	r3, #0
 8005a58:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005a5a:	4b4f      	ldr	r3, [pc, #316]	; (8005b98 <xTaskIncrementTick+0x148>)
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	f040 808f 	bne.w	8005b82 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005a64:	4b4d      	ldr	r3, [pc, #308]	; (8005b9c <xTaskIncrementTick+0x14c>)
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	3301      	adds	r3, #1
 8005a6a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005a6c:	4a4b      	ldr	r2, [pc, #300]	; (8005b9c <xTaskIncrementTick+0x14c>)
 8005a6e:	693b      	ldr	r3, [r7, #16]
 8005a70:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005a72:	693b      	ldr	r3, [r7, #16]
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d120      	bne.n	8005aba <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005a78:	4b49      	ldr	r3, [pc, #292]	; (8005ba0 <xTaskIncrementTick+0x150>)
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d00a      	beq.n	8005a98 <xTaskIncrementTick+0x48>
	__asm volatile
 8005a82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a86:	f383 8811 	msr	BASEPRI, r3
 8005a8a:	f3bf 8f6f 	isb	sy
 8005a8e:	f3bf 8f4f 	dsb	sy
 8005a92:	603b      	str	r3, [r7, #0]
}
 8005a94:	bf00      	nop
 8005a96:	e7fe      	b.n	8005a96 <xTaskIncrementTick+0x46>
 8005a98:	4b41      	ldr	r3, [pc, #260]	; (8005ba0 <xTaskIncrementTick+0x150>)
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	60fb      	str	r3, [r7, #12]
 8005a9e:	4b41      	ldr	r3, [pc, #260]	; (8005ba4 <xTaskIncrementTick+0x154>)
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	4a3f      	ldr	r2, [pc, #252]	; (8005ba0 <xTaskIncrementTick+0x150>)
 8005aa4:	6013      	str	r3, [r2, #0]
 8005aa6:	4a3f      	ldr	r2, [pc, #252]	; (8005ba4 <xTaskIncrementTick+0x154>)
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	6013      	str	r3, [r2, #0]
 8005aac:	4b3e      	ldr	r3, [pc, #248]	; (8005ba8 <xTaskIncrementTick+0x158>)
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	3301      	adds	r3, #1
 8005ab2:	4a3d      	ldr	r2, [pc, #244]	; (8005ba8 <xTaskIncrementTick+0x158>)
 8005ab4:	6013      	str	r3, [r2, #0]
 8005ab6:	f000 fad1 	bl	800605c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005aba:	4b3c      	ldr	r3, [pc, #240]	; (8005bac <xTaskIncrementTick+0x15c>)
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	693a      	ldr	r2, [r7, #16]
 8005ac0:	429a      	cmp	r2, r3
 8005ac2:	d349      	bcc.n	8005b58 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005ac4:	4b36      	ldr	r3, [pc, #216]	; (8005ba0 <xTaskIncrementTick+0x150>)
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d104      	bne.n	8005ad8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005ace:	4b37      	ldr	r3, [pc, #220]	; (8005bac <xTaskIncrementTick+0x15c>)
 8005ad0:	f04f 32ff 	mov.w	r2, #4294967295
 8005ad4:	601a      	str	r2, [r3, #0]
					break;
 8005ad6:	e03f      	b.n	8005b58 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005ad8:	4b31      	ldr	r3, [pc, #196]	; (8005ba0 <xTaskIncrementTick+0x150>)
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	68db      	ldr	r3, [r3, #12]
 8005ade:	68db      	ldr	r3, [r3, #12]
 8005ae0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005ae2:	68bb      	ldr	r3, [r7, #8]
 8005ae4:	685b      	ldr	r3, [r3, #4]
 8005ae6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005ae8:	693a      	ldr	r2, [r7, #16]
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	429a      	cmp	r2, r3
 8005aee:	d203      	bcs.n	8005af8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005af0:	4a2e      	ldr	r2, [pc, #184]	; (8005bac <xTaskIncrementTick+0x15c>)
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005af6:	e02f      	b.n	8005b58 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005af8:	68bb      	ldr	r3, [r7, #8]
 8005afa:	3304      	adds	r3, #4
 8005afc:	4618      	mov	r0, r3
 8005afe:	f7fe ff99 	bl	8004a34 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005b02:	68bb      	ldr	r3, [r7, #8]
 8005b04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d004      	beq.n	8005b14 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005b0a:	68bb      	ldr	r3, [r7, #8]
 8005b0c:	3318      	adds	r3, #24
 8005b0e:	4618      	mov	r0, r3
 8005b10:	f7fe ff90 	bl	8004a34 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005b14:	68bb      	ldr	r3, [r7, #8]
 8005b16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b18:	4b25      	ldr	r3, [pc, #148]	; (8005bb0 <xTaskIncrementTick+0x160>)
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	429a      	cmp	r2, r3
 8005b1e:	d903      	bls.n	8005b28 <xTaskIncrementTick+0xd8>
 8005b20:	68bb      	ldr	r3, [r7, #8]
 8005b22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b24:	4a22      	ldr	r2, [pc, #136]	; (8005bb0 <xTaskIncrementTick+0x160>)
 8005b26:	6013      	str	r3, [r2, #0]
 8005b28:	68bb      	ldr	r3, [r7, #8]
 8005b2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b2c:	4613      	mov	r3, r2
 8005b2e:	009b      	lsls	r3, r3, #2
 8005b30:	4413      	add	r3, r2
 8005b32:	009b      	lsls	r3, r3, #2
 8005b34:	4a1f      	ldr	r2, [pc, #124]	; (8005bb4 <xTaskIncrementTick+0x164>)
 8005b36:	441a      	add	r2, r3
 8005b38:	68bb      	ldr	r3, [r7, #8]
 8005b3a:	3304      	adds	r3, #4
 8005b3c:	4619      	mov	r1, r3
 8005b3e:	4610      	mov	r0, r2
 8005b40:	f7fe ff1b 	bl	800497a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005b44:	68bb      	ldr	r3, [r7, #8]
 8005b46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b48:	4b1b      	ldr	r3, [pc, #108]	; (8005bb8 <xTaskIncrementTick+0x168>)
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b4e:	429a      	cmp	r2, r3
 8005b50:	d3b8      	bcc.n	8005ac4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8005b52:	2301      	movs	r3, #1
 8005b54:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005b56:	e7b5      	b.n	8005ac4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005b58:	4b17      	ldr	r3, [pc, #92]	; (8005bb8 <xTaskIncrementTick+0x168>)
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b5e:	4915      	ldr	r1, [pc, #84]	; (8005bb4 <xTaskIncrementTick+0x164>)
 8005b60:	4613      	mov	r3, r2
 8005b62:	009b      	lsls	r3, r3, #2
 8005b64:	4413      	add	r3, r2
 8005b66:	009b      	lsls	r3, r3, #2
 8005b68:	440b      	add	r3, r1
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	2b01      	cmp	r3, #1
 8005b6e:	d901      	bls.n	8005b74 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8005b70:	2301      	movs	r3, #1
 8005b72:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005b74:	4b11      	ldr	r3, [pc, #68]	; (8005bbc <xTaskIncrementTick+0x16c>)
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d007      	beq.n	8005b8c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8005b7c:	2301      	movs	r3, #1
 8005b7e:	617b      	str	r3, [r7, #20]
 8005b80:	e004      	b.n	8005b8c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005b82:	4b0f      	ldr	r3, [pc, #60]	; (8005bc0 <xTaskIncrementTick+0x170>)
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	3301      	adds	r3, #1
 8005b88:	4a0d      	ldr	r2, [pc, #52]	; (8005bc0 <xTaskIncrementTick+0x170>)
 8005b8a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005b8c:	697b      	ldr	r3, [r7, #20]
}
 8005b8e:	4618      	mov	r0, r3
 8005b90:	3718      	adds	r7, #24
 8005b92:	46bd      	mov	sp, r7
 8005b94:	bd80      	pop	{r7, pc}
 8005b96:	bf00      	nop
 8005b98:	20000c4c 	.word	0x20000c4c
 8005b9c:	20000c28 	.word	0x20000c28
 8005ba0:	20000bdc 	.word	0x20000bdc
 8005ba4:	20000be0 	.word	0x20000be0
 8005ba8:	20000c3c 	.word	0x20000c3c
 8005bac:	20000c44 	.word	0x20000c44
 8005bb0:	20000c2c 	.word	0x20000c2c
 8005bb4:	20000754 	.word	0x20000754
 8005bb8:	20000750 	.word	0x20000750
 8005bbc:	20000c38 	.word	0x20000c38
 8005bc0:	20000c34 	.word	0x20000c34

08005bc4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005bc4:	b480      	push	{r7}
 8005bc6:	b085      	sub	sp, #20
 8005bc8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005bca:	4b28      	ldr	r3, [pc, #160]	; (8005c6c <vTaskSwitchContext+0xa8>)
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d003      	beq.n	8005bda <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005bd2:	4b27      	ldr	r3, [pc, #156]	; (8005c70 <vTaskSwitchContext+0xac>)
 8005bd4:	2201      	movs	r2, #1
 8005bd6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005bd8:	e041      	b.n	8005c5e <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8005bda:	4b25      	ldr	r3, [pc, #148]	; (8005c70 <vTaskSwitchContext+0xac>)
 8005bdc:	2200      	movs	r2, #0
 8005bde:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005be0:	4b24      	ldr	r3, [pc, #144]	; (8005c74 <vTaskSwitchContext+0xb0>)
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	60fb      	str	r3, [r7, #12]
 8005be6:	e010      	b.n	8005c0a <vTaskSwitchContext+0x46>
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d10a      	bne.n	8005c04 <vTaskSwitchContext+0x40>
	__asm volatile
 8005bee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bf2:	f383 8811 	msr	BASEPRI, r3
 8005bf6:	f3bf 8f6f 	isb	sy
 8005bfa:	f3bf 8f4f 	dsb	sy
 8005bfe:	607b      	str	r3, [r7, #4]
}
 8005c00:	bf00      	nop
 8005c02:	e7fe      	b.n	8005c02 <vTaskSwitchContext+0x3e>
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	3b01      	subs	r3, #1
 8005c08:	60fb      	str	r3, [r7, #12]
 8005c0a:	491b      	ldr	r1, [pc, #108]	; (8005c78 <vTaskSwitchContext+0xb4>)
 8005c0c:	68fa      	ldr	r2, [r7, #12]
 8005c0e:	4613      	mov	r3, r2
 8005c10:	009b      	lsls	r3, r3, #2
 8005c12:	4413      	add	r3, r2
 8005c14:	009b      	lsls	r3, r3, #2
 8005c16:	440b      	add	r3, r1
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d0e4      	beq.n	8005be8 <vTaskSwitchContext+0x24>
 8005c1e:	68fa      	ldr	r2, [r7, #12]
 8005c20:	4613      	mov	r3, r2
 8005c22:	009b      	lsls	r3, r3, #2
 8005c24:	4413      	add	r3, r2
 8005c26:	009b      	lsls	r3, r3, #2
 8005c28:	4a13      	ldr	r2, [pc, #76]	; (8005c78 <vTaskSwitchContext+0xb4>)
 8005c2a:	4413      	add	r3, r2
 8005c2c:	60bb      	str	r3, [r7, #8]
 8005c2e:	68bb      	ldr	r3, [r7, #8]
 8005c30:	685b      	ldr	r3, [r3, #4]
 8005c32:	685a      	ldr	r2, [r3, #4]
 8005c34:	68bb      	ldr	r3, [r7, #8]
 8005c36:	605a      	str	r2, [r3, #4]
 8005c38:	68bb      	ldr	r3, [r7, #8]
 8005c3a:	685a      	ldr	r2, [r3, #4]
 8005c3c:	68bb      	ldr	r3, [r7, #8]
 8005c3e:	3308      	adds	r3, #8
 8005c40:	429a      	cmp	r2, r3
 8005c42:	d104      	bne.n	8005c4e <vTaskSwitchContext+0x8a>
 8005c44:	68bb      	ldr	r3, [r7, #8]
 8005c46:	685b      	ldr	r3, [r3, #4]
 8005c48:	685a      	ldr	r2, [r3, #4]
 8005c4a:	68bb      	ldr	r3, [r7, #8]
 8005c4c:	605a      	str	r2, [r3, #4]
 8005c4e:	68bb      	ldr	r3, [r7, #8]
 8005c50:	685b      	ldr	r3, [r3, #4]
 8005c52:	68db      	ldr	r3, [r3, #12]
 8005c54:	4a09      	ldr	r2, [pc, #36]	; (8005c7c <vTaskSwitchContext+0xb8>)
 8005c56:	6013      	str	r3, [r2, #0]
 8005c58:	4a06      	ldr	r2, [pc, #24]	; (8005c74 <vTaskSwitchContext+0xb0>)
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	6013      	str	r3, [r2, #0]
}
 8005c5e:	bf00      	nop
 8005c60:	3714      	adds	r7, #20
 8005c62:	46bd      	mov	sp, r7
 8005c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c68:	4770      	bx	lr
 8005c6a:	bf00      	nop
 8005c6c:	20000c4c 	.word	0x20000c4c
 8005c70:	20000c38 	.word	0x20000c38
 8005c74:	20000c2c 	.word	0x20000c2c
 8005c78:	20000754 	.word	0x20000754
 8005c7c:	20000750 	.word	0x20000750

08005c80 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005c80:	b580      	push	{r7, lr}
 8005c82:	b084      	sub	sp, #16
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	6078      	str	r0, [r7, #4]
 8005c88:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d10a      	bne.n	8005ca6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8005c90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c94:	f383 8811 	msr	BASEPRI, r3
 8005c98:	f3bf 8f6f 	isb	sy
 8005c9c:	f3bf 8f4f 	dsb	sy
 8005ca0:	60fb      	str	r3, [r7, #12]
}
 8005ca2:	bf00      	nop
 8005ca4:	e7fe      	b.n	8005ca4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005ca6:	4b07      	ldr	r3, [pc, #28]	; (8005cc4 <vTaskPlaceOnEventList+0x44>)
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	3318      	adds	r3, #24
 8005cac:	4619      	mov	r1, r3
 8005cae:	6878      	ldr	r0, [r7, #4]
 8005cb0:	f7fe fe87 	bl	80049c2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005cb4:	2101      	movs	r1, #1
 8005cb6:	6838      	ldr	r0, [r7, #0]
 8005cb8:	f000 fa7c 	bl	80061b4 <prvAddCurrentTaskToDelayedList>
}
 8005cbc:	bf00      	nop
 8005cbe:	3710      	adds	r7, #16
 8005cc0:	46bd      	mov	sp, r7
 8005cc2:	bd80      	pop	{r7, pc}
 8005cc4:	20000750 	.word	0x20000750

08005cc8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005cc8:	b580      	push	{r7, lr}
 8005cca:	b086      	sub	sp, #24
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	60f8      	str	r0, [r7, #12]
 8005cd0:	60b9      	str	r1, [r7, #8]
 8005cd2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d10a      	bne.n	8005cf0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8005cda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cde:	f383 8811 	msr	BASEPRI, r3
 8005ce2:	f3bf 8f6f 	isb	sy
 8005ce6:	f3bf 8f4f 	dsb	sy
 8005cea:	617b      	str	r3, [r7, #20]
}
 8005cec:	bf00      	nop
 8005cee:	e7fe      	b.n	8005cee <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005cf0:	4b0a      	ldr	r3, [pc, #40]	; (8005d1c <vTaskPlaceOnEventListRestricted+0x54>)
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	3318      	adds	r3, #24
 8005cf6:	4619      	mov	r1, r3
 8005cf8:	68f8      	ldr	r0, [r7, #12]
 8005cfa:	f7fe fe3e 	bl	800497a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d002      	beq.n	8005d0a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8005d04:	f04f 33ff 	mov.w	r3, #4294967295
 8005d08:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005d0a:	6879      	ldr	r1, [r7, #4]
 8005d0c:	68b8      	ldr	r0, [r7, #8]
 8005d0e:	f000 fa51 	bl	80061b4 <prvAddCurrentTaskToDelayedList>
	}
 8005d12:	bf00      	nop
 8005d14:	3718      	adds	r7, #24
 8005d16:	46bd      	mov	sp, r7
 8005d18:	bd80      	pop	{r7, pc}
 8005d1a:	bf00      	nop
 8005d1c:	20000750 	.word	0x20000750

08005d20 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005d20:	b580      	push	{r7, lr}
 8005d22:	b086      	sub	sp, #24
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	68db      	ldr	r3, [r3, #12]
 8005d2c:	68db      	ldr	r3, [r3, #12]
 8005d2e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005d30:	693b      	ldr	r3, [r7, #16]
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d10a      	bne.n	8005d4c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8005d36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d3a:	f383 8811 	msr	BASEPRI, r3
 8005d3e:	f3bf 8f6f 	isb	sy
 8005d42:	f3bf 8f4f 	dsb	sy
 8005d46:	60fb      	str	r3, [r7, #12]
}
 8005d48:	bf00      	nop
 8005d4a:	e7fe      	b.n	8005d4a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005d4c:	693b      	ldr	r3, [r7, #16]
 8005d4e:	3318      	adds	r3, #24
 8005d50:	4618      	mov	r0, r3
 8005d52:	f7fe fe6f 	bl	8004a34 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005d56:	4b1e      	ldr	r3, [pc, #120]	; (8005dd0 <xTaskRemoveFromEventList+0xb0>)
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d11d      	bne.n	8005d9a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005d5e:	693b      	ldr	r3, [r7, #16]
 8005d60:	3304      	adds	r3, #4
 8005d62:	4618      	mov	r0, r3
 8005d64:	f7fe fe66 	bl	8004a34 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005d68:	693b      	ldr	r3, [r7, #16]
 8005d6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d6c:	4b19      	ldr	r3, [pc, #100]	; (8005dd4 <xTaskRemoveFromEventList+0xb4>)
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	429a      	cmp	r2, r3
 8005d72:	d903      	bls.n	8005d7c <xTaskRemoveFromEventList+0x5c>
 8005d74:	693b      	ldr	r3, [r7, #16]
 8005d76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d78:	4a16      	ldr	r2, [pc, #88]	; (8005dd4 <xTaskRemoveFromEventList+0xb4>)
 8005d7a:	6013      	str	r3, [r2, #0]
 8005d7c:	693b      	ldr	r3, [r7, #16]
 8005d7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d80:	4613      	mov	r3, r2
 8005d82:	009b      	lsls	r3, r3, #2
 8005d84:	4413      	add	r3, r2
 8005d86:	009b      	lsls	r3, r3, #2
 8005d88:	4a13      	ldr	r2, [pc, #76]	; (8005dd8 <xTaskRemoveFromEventList+0xb8>)
 8005d8a:	441a      	add	r2, r3
 8005d8c:	693b      	ldr	r3, [r7, #16]
 8005d8e:	3304      	adds	r3, #4
 8005d90:	4619      	mov	r1, r3
 8005d92:	4610      	mov	r0, r2
 8005d94:	f7fe fdf1 	bl	800497a <vListInsertEnd>
 8005d98:	e005      	b.n	8005da6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005d9a:	693b      	ldr	r3, [r7, #16]
 8005d9c:	3318      	adds	r3, #24
 8005d9e:	4619      	mov	r1, r3
 8005da0:	480e      	ldr	r0, [pc, #56]	; (8005ddc <xTaskRemoveFromEventList+0xbc>)
 8005da2:	f7fe fdea 	bl	800497a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005da6:	693b      	ldr	r3, [r7, #16]
 8005da8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005daa:	4b0d      	ldr	r3, [pc, #52]	; (8005de0 <xTaskRemoveFromEventList+0xc0>)
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005db0:	429a      	cmp	r2, r3
 8005db2:	d905      	bls.n	8005dc0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005db4:	2301      	movs	r3, #1
 8005db6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005db8:	4b0a      	ldr	r3, [pc, #40]	; (8005de4 <xTaskRemoveFromEventList+0xc4>)
 8005dba:	2201      	movs	r2, #1
 8005dbc:	601a      	str	r2, [r3, #0]
 8005dbe:	e001      	b.n	8005dc4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8005dc0:	2300      	movs	r3, #0
 8005dc2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005dc4:	697b      	ldr	r3, [r7, #20]
}
 8005dc6:	4618      	mov	r0, r3
 8005dc8:	3718      	adds	r7, #24
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	bd80      	pop	{r7, pc}
 8005dce:	bf00      	nop
 8005dd0:	20000c4c 	.word	0x20000c4c
 8005dd4:	20000c2c 	.word	0x20000c2c
 8005dd8:	20000754 	.word	0x20000754
 8005ddc:	20000be4 	.word	0x20000be4
 8005de0:	20000750 	.word	0x20000750
 8005de4:	20000c38 	.word	0x20000c38

08005de8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005de8:	b480      	push	{r7}
 8005dea:	b083      	sub	sp, #12
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005df0:	4b06      	ldr	r3, [pc, #24]	; (8005e0c <vTaskInternalSetTimeOutState+0x24>)
 8005df2:	681a      	ldr	r2, [r3, #0]
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005df8:	4b05      	ldr	r3, [pc, #20]	; (8005e10 <vTaskInternalSetTimeOutState+0x28>)
 8005dfa:	681a      	ldr	r2, [r3, #0]
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	605a      	str	r2, [r3, #4]
}
 8005e00:	bf00      	nop
 8005e02:	370c      	adds	r7, #12
 8005e04:	46bd      	mov	sp, r7
 8005e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0a:	4770      	bx	lr
 8005e0c:	20000c3c 	.word	0x20000c3c
 8005e10:	20000c28 	.word	0x20000c28

08005e14 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005e14:	b580      	push	{r7, lr}
 8005e16:	b088      	sub	sp, #32
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	6078      	str	r0, [r7, #4]
 8005e1c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d10a      	bne.n	8005e3a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8005e24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e28:	f383 8811 	msr	BASEPRI, r3
 8005e2c:	f3bf 8f6f 	isb	sy
 8005e30:	f3bf 8f4f 	dsb	sy
 8005e34:	613b      	str	r3, [r7, #16]
}
 8005e36:	bf00      	nop
 8005e38:	e7fe      	b.n	8005e38 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005e3a:	683b      	ldr	r3, [r7, #0]
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d10a      	bne.n	8005e56 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8005e40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e44:	f383 8811 	msr	BASEPRI, r3
 8005e48:	f3bf 8f6f 	isb	sy
 8005e4c:	f3bf 8f4f 	dsb	sy
 8005e50:	60fb      	str	r3, [r7, #12]
}
 8005e52:	bf00      	nop
 8005e54:	e7fe      	b.n	8005e54 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8005e56:	f000 fe7d 	bl	8006b54 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005e5a:	4b1d      	ldr	r3, [pc, #116]	; (8005ed0 <xTaskCheckForTimeOut+0xbc>)
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	685b      	ldr	r3, [r3, #4]
 8005e64:	69ba      	ldr	r2, [r7, #24]
 8005e66:	1ad3      	subs	r3, r2, r3
 8005e68:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005e6a:	683b      	ldr	r3, [r7, #0]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e72:	d102      	bne.n	8005e7a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005e74:	2300      	movs	r3, #0
 8005e76:	61fb      	str	r3, [r7, #28]
 8005e78:	e023      	b.n	8005ec2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681a      	ldr	r2, [r3, #0]
 8005e7e:	4b15      	ldr	r3, [pc, #84]	; (8005ed4 <xTaskCheckForTimeOut+0xc0>)
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	429a      	cmp	r2, r3
 8005e84:	d007      	beq.n	8005e96 <xTaskCheckForTimeOut+0x82>
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	685b      	ldr	r3, [r3, #4]
 8005e8a:	69ba      	ldr	r2, [r7, #24]
 8005e8c:	429a      	cmp	r2, r3
 8005e8e:	d302      	bcc.n	8005e96 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005e90:	2301      	movs	r3, #1
 8005e92:	61fb      	str	r3, [r7, #28]
 8005e94:	e015      	b.n	8005ec2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005e96:	683b      	ldr	r3, [r7, #0]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	697a      	ldr	r2, [r7, #20]
 8005e9c:	429a      	cmp	r2, r3
 8005e9e:	d20b      	bcs.n	8005eb8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005ea0:	683b      	ldr	r3, [r7, #0]
 8005ea2:	681a      	ldr	r2, [r3, #0]
 8005ea4:	697b      	ldr	r3, [r7, #20]
 8005ea6:	1ad2      	subs	r2, r2, r3
 8005ea8:	683b      	ldr	r3, [r7, #0]
 8005eaa:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005eac:	6878      	ldr	r0, [r7, #4]
 8005eae:	f7ff ff9b 	bl	8005de8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005eb2:	2300      	movs	r3, #0
 8005eb4:	61fb      	str	r3, [r7, #28]
 8005eb6:	e004      	b.n	8005ec2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8005eb8:	683b      	ldr	r3, [r7, #0]
 8005eba:	2200      	movs	r2, #0
 8005ebc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005ebe:	2301      	movs	r3, #1
 8005ec0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005ec2:	f000 fe77 	bl	8006bb4 <vPortExitCritical>

	return xReturn;
 8005ec6:	69fb      	ldr	r3, [r7, #28]
}
 8005ec8:	4618      	mov	r0, r3
 8005eca:	3720      	adds	r7, #32
 8005ecc:	46bd      	mov	sp, r7
 8005ece:	bd80      	pop	{r7, pc}
 8005ed0:	20000c28 	.word	0x20000c28
 8005ed4:	20000c3c 	.word	0x20000c3c

08005ed8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005ed8:	b480      	push	{r7}
 8005eda:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005edc:	4b03      	ldr	r3, [pc, #12]	; (8005eec <vTaskMissedYield+0x14>)
 8005ede:	2201      	movs	r2, #1
 8005ee0:	601a      	str	r2, [r3, #0]
}
 8005ee2:	bf00      	nop
 8005ee4:	46bd      	mov	sp, r7
 8005ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eea:	4770      	bx	lr
 8005eec:	20000c38 	.word	0x20000c38

08005ef0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005ef0:	b580      	push	{r7, lr}
 8005ef2:	b082      	sub	sp, #8
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005ef8:	f000 f852 	bl	8005fa0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005efc:	4b06      	ldr	r3, [pc, #24]	; (8005f18 <prvIdleTask+0x28>)
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	2b01      	cmp	r3, #1
 8005f02:	d9f9      	bls.n	8005ef8 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005f04:	4b05      	ldr	r3, [pc, #20]	; (8005f1c <prvIdleTask+0x2c>)
 8005f06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f0a:	601a      	str	r2, [r3, #0]
 8005f0c:	f3bf 8f4f 	dsb	sy
 8005f10:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005f14:	e7f0      	b.n	8005ef8 <prvIdleTask+0x8>
 8005f16:	bf00      	nop
 8005f18:	20000754 	.word	0x20000754
 8005f1c:	e000ed04 	.word	0xe000ed04

08005f20 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005f20:	b580      	push	{r7, lr}
 8005f22:	b082      	sub	sp, #8
 8005f24:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005f26:	2300      	movs	r3, #0
 8005f28:	607b      	str	r3, [r7, #4]
 8005f2a:	e00c      	b.n	8005f46 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005f2c:	687a      	ldr	r2, [r7, #4]
 8005f2e:	4613      	mov	r3, r2
 8005f30:	009b      	lsls	r3, r3, #2
 8005f32:	4413      	add	r3, r2
 8005f34:	009b      	lsls	r3, r3, #2
 8005f36:	4a12      	ldr	r2, [pc, #72]	; (8005f80 <prvInitialiseTaskLists+0x60>)
 8005f38:	4413      	add	r3, r2
 8005f3a:	4618      	mov	r0, r3
 8005f3c:	f7fe fcf0 	bl	8004920 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	3301      	adds	r3, #1
 8005f44:	607b      	str	r3, [r7, #4]
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	2b37      	cmp	r3, #55	; 0x37
 8005f4a:	d9ef      	bls.n	8005f2c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005f4c:	480d      	ldr	r0, [pc, #52]	; (8005f84 <prvInitialiseTaskLists+0x64>)
 8005f4e:	f7fe fce7 	bl	8004920 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005f52:	480d      	ldr	r0, [pc, #52]	; (8005f88 <prvInitialiseTaskLists+0x68>)
 8005f54:	f7fe fce4 	bl	8004920 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005f58:	480c      	ldr	r0, [pc, #48]	; (8005f8c <prvInitialiseTaskLists+0x6c>)
 8005f5a:	f7fe fce1 	bl	8004920 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005f5e:	480c      	ldr	r0, [pc, #48]	; (8005f90 <prvInitialiseTaskLists+0x70>)
 8005f60:	f7fe fcde 	bl	8004920 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005f64:	480b      	ldr	r0, [pc, #44]	; (8005f94 <prvInitialiseTaskLists+0x74>)
 8005f66:	f7fe fcdb 	bl	8004920 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005f6a:	4b0b      	ldr	r3, [pc, #44]	; (8005f98 <prvInitialiseTaskLists+0x78>)
 8005f6c:	4a05      	ldr	r2, [pc, #20]	; (8005f84 <prvInitialiseTaskLists+0x64>)
 8005f6e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005f70:	4b0a      	ldr	r3, [pc, #40]	; (8005f9c <prvInitialiseTaskLists+0x7c>)
 8005f72:	4a05      	ldr	r2, [pc, #20]	; (8005f88 <prvInitialiseTaskLists+0x68>)
 8005f74:	601a      	str	r2, [r3, #0]
}
 8005f76:	bf00      	nop
 8005f78:	3708      	adds	r7, #8
 8005f7a:	46bd      	mov	sp, r7
 8005f7c:	bd80      	pop	{r7, pc}
 8005f7e:	bf00      	nop
 8005f80:	20000754 	.word	0x20000754
 8005f84:	20000bb4 	.word	0x20000bb4
 8005f88:	20000bc8 	.word	0x20000bc8
 8005f8c:	20000be4 	.word	0x20000be4
 8005f90:	20000bf8 	.word	0x20000bf8
 8005f94:	20000c10 	.word	0x20000c10
 8005f98:	20000bdc 	.word	0x20000bdc
 8005f9c:	20000be0 	.word	0x20000be0

08005fa0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005fa0:	b580      	push	{r7, lr}
 8005fa2:	b082      	sub	sp, #8
 8005fa4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005fa6:	e019      	b.n	8005fdc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005fa8:	f000 fdd4 	bl	8006b54 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005fac:	4b10      	ldr	r3, [pc, #64]	; (8005ff0 <prvCheckTasksWaitingTermination+0x50>)
 8005fae:	68db      	ldr	r3, [r3, #12]
 8005fb0:	68db      	ldr	r3, [r3, #12]
 8005fb2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	3304      	adds	r3, #4
 8005fb8:	4618      	mov	r0, r3
 8005fba:	f7fe fd3b 	bl	8004a34 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005fbe:	4b0d      	ldr	r3, [pc, #52]	; (8005ff4 <prvCheckTasksWaitingTermination+0x54>)
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	3b01      	subs	r3, #1
 8005fc4:	4a0b      	ldr	r2, [pc, #44]	; (8005ff4 <prvCheckTasksWaitingTermination+0x54>)
 8005fc6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005fc8:	4b0b      	ldr	r3, [pc, #44]	; (8005ff8 <prvCheckTasksWaitingTermination+0x58>)
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	3b01      	subs	r3, #1
 8005fce:	4a0a      	ldr	r2, [pc, #40]	; (8005ff8 <prvCheckTasksWaitingTermination+0x58>)
 8005fd0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005fd2:	f000 fdef 	bl	8006bb4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005fd6:	6878      	ldr	r0, [r7, #4]
 8005fd8:	f000 f810 	bl	8005ffc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005fdc:	4b06      	ldr	r3, [pc, #24]	; (8005ff8 <prvCheckTasksWaitingTermination+0x58>)
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d1e1      	bne.n	8005fa8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005fe4:	bf00      	nop
 8005fe6:	bf00      	nop
 8005fe8:	3708      	adds	r7, #8
 8005fea:	46bd      	mov	sp, r7
 8005fec:	bd80      	pop	{r7, pc}
 8005fee:	bf00      	nop
 8005ff0:	20000bf8 	.word	0x20000bf8
 8005ff4:	20000c24 	.word	0x20000c24
 8005ff8:	20000c0c 	.word	0x20000c0c

08005ffc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005ffc:	b580      	push	{r7, lr}
 8005ffe:	b084      	sub	sp, #16
 8006000:	af00      	add	r7, sp, #0
 8006002:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800600a:	2b00      	cmp	r3, #0
 800600c:	d108      	bne.n	8006020 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006012:	4618      	mov	r0, r3
 8006014:	f000 ff8c 	bl	8006f30 <vPortFree>
				vPortFree( pxTCB );
 8006018:	6878      	ldr	r0, [r7, #4]
 800601a:	f000 ff89 	bl	8006f30 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800601e:	e018      	b.n	8006052 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006026:	2b01      	cmp	r3, #1
 8006028:	d103      	bne.n	8006032 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800602a:	6878      	ldr	r0, [r7, #4]
 800602c:	f000 ff80 	bl	8006f30 <vPortFree>
	}
 8006030:	e00f      	b.n	8006052 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006038:	2b02      	cmp	r3, #2
 800603a:	d00a      	beq.n	8006052 <prvDeleteTCB+0x56>
	__asm volatile
 800603c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006040:	f383 8811 	msr	BASEPRI, r3
 8006044:	f3bf 8f6f 	isb	sy
 8006048:	f3bf 8f4f 	dsb	sy
 800604c:	60fb      	str	r3, [r7, #12]
}
 800604e:	bf00      	nop
 8006050:	e7fe      	b.n	8006050 <prvDeleteTCB+0x54>
	}
 8006052:	bf00      	nop
 8006054:	3710      	adds	r7, #16
 8006056:	46bd      	mov	sp, r7
 8006058:	bd80      	pop	{r7, pc}
	...

0800605c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800605c:	b480      	push	{r7}
 800605e:	b083      	sub	sp, #12
 8006060:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006062:	4b0c      	ldr	r3, [pc, #48]	; (8006094 <prvResetNextTaskUnblockTime+0x38>)
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	2b00      	cmp	r3, #0
 800606a:	d104      	bne.n	8006076 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800606c:	4b0a      	ldr	r3, [pc, #40]	; (8006098 <prvResetNextTaskUnblockTime+0x3c>)
 800606e:	f04f 32ff 	mov.w	r2, #4294967295
 8006072:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006074:	e008      	b.n	8006088 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006076:	4b07      	ldr	r3, [pc, #28]	; (8006094 <prvResetNextTaskUnblockTime+0x38>)
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	68db      	ldr	r3, [r3, #12]
 800607c:	68db      	ldr	r3, [r3, #12]
 800607e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	685b      	ldr	r3, [r3, #4]
 8006084:	4a04      	ldr	r2, [pc, #16]	; (8006098 <prvResetNextTaskUnblockTime+0x3c>)
 8006086:	6013      	str	r3, [r2, #0]
}
 8006088:	bf00      	nop
 800608a:	370c      	adds	r7, #12
 800608c:	46bd      	mov	sp, r7
 800608e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006092:	4770      	bx	lr
 8006094:	20000bdc 	.word	0x20000bdc
 8006098:	20000c44 	.word	0x20000c44

0800609c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800609c:	b480      	push	{r7}
 800609e:	b083      	sub	sp, #12
 80060a0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80060a2:	4b0b      	ldr	r3, [pc, #44]	; (80060d0 <xTaskGetSchedulerState+0x34>)
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d102      	bne.n	80060b0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80060aa:	2301      	movs	r3, #1
 80060ac:	607b      	str	r3, [r7, #4]
 80060ae:	e008      	b.n	80060c2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80060b0:	4b08      	ldr	r3, [pc, #32]	; (80060d4 <xTaskGetSchedulerState+0x38>)
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d102      	bne.n	80060be <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80060b8:	2302      	movs	r3, #2
 80060ba:	607b      	str	r3, [r7, #4]
 80060bc:	e001      	b.n	80060c2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80060be:	2300      	movs	r3, #0
 80060c0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80060c2:	687b      	ldr	r3, [r7, #4]
	}
 80060c4:	4618      	mov	r0, r3
 80060c6:	370c      	adds	r7, #12
 80060c8:	46bd      	mov	sp, r7
 80060ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ce:	4770      	bx	lr
 80060d0:	20000c30 	.word	0x20000c30
 80060d4:	20000c4c 	.word	0x20000c4c

080060d8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80060d8:	b580      	push	{r7, lr}
 80060da:	b086      	sub	sp, #24
 80060dc:	af00      	add	r7, sp, #0
 80060de:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80060e4:	2300      	movs	r3, #0
 80060e6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d056      	beq.n	800619c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80060ee:	4b2e      	ldr	r3, [pc, #184]	; (80061a8 <xTaskPriorityDisinherit+0xd0>)
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	693a      	ldr	r2, [r7, #16]
 80060f4:	429a      	cmp	r2, r3
 80060f6:	d00a      	beq.n	800610e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80060f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060fc:	f383 8811 	msr	BASEPRI, r3
 8006100:	f3bf 8f6f 	isb	sy
 8006104:	f3bf 8f4f 	dsb	sy
 8006108:	60fb      	str	r3, [r7, #12]
}
 800610a:	bf00      	nop
 800610c:	e7fe      	b.n	800610c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800610e:	693b      	ldr	r3, [r7, #16]
 8006110:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006112:	2b00      	cmp	r3, #0
 8006114:	d10a      	bne.n	800612c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8006116:	f04f 0350 	mov.w	r3, #80	; 0x50
 800611a:	f383 8811 	msr	BASEPRI, r3
 800611e:	f3bf 8f6f 	isb	sy
 8006122:	f3bf 8f4f 	dsb	sy
 8006126:	60bb      	str	r3, [r7, #8]
}
 8006128:	bf00      	nop
 800612a:	e7fe      	b.n	800612a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800612c:	693b      	ldr	r3, [r7, #16]
 800612e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006130:	1e5a      	subs	r2, r3, #1
 8006132:	693b      	ldr	r3, [r7, #16]
 8006134:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006136:	693b      	ldr	r3, [r7, #16]
 8006138:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800613a:	693b      	ldr	r3, [r7, #16]
 800613c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800613e:	429a      	cmp	r2, r3
 8006140:	d02c      	beq.n	800619c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006142:	693b      	ldr	r3, [r7, #16]
 8006144:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006146:	2b00      	cmp	r3, #0
 8006148:	d128      	bne.n	800619c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800614a:	693b      	ldr	r3, [r7, #16]
 800614c:	3304      	adds	r3, #4
 800614e:	4618      	mov	r0, r3
 8006150:	f7fe fc70 	bl	8004a34 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006154:	693b      	ldr	r3, [r7, #16]
 8006156:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006158:	693b      	ldr	r3, [r7, #16]
 800615a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800615c:	693b      	ldr	r3, [r7, #16]
 800615e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006160:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006164:	693b      	ldr	r3, [r7, #16]
 8006166:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006168:	693b      	ldr	r3, [r7, #16]
 800616a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800616c:	4b0f      	ldr	r3, [pc, #60]	; (80061ac <xTaskPriorityDisinherit+0xd4>)
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	429a      	cmp	r2, r3
 8006172:	d903      	bls.n	800617c <xTaskPriorityDisinherit+0xa4>
 8006174:	693b      	ldr	r3, [r7, #16]
 8006176:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006178:	4a0c      	ldr	r2, [pc, #48]	; (80061ac <xTaskPriorityDisinherit+0xd4>)
 800617a:	6013      	str	r3, [r2, #0]
 800617c:	693b      	ldr	r3, [r7, #16]
 800617e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006180:	4613      	mov	r3, r2
 8006182:	009b      	lsls	r3, r3, #2
 8006184:	4413      	add	r3, r2
 8006186:	009b      	lsls	r3, r3, #2
 8006188:	4a09      	ldr	r2, [pc, #36]	; (80061b0 <xTaskPriorityDisinherit+0xd8>)
 800618a:	441a      	add	r2, r3
 800618c:	693b      	ldr	r3, [r7, #16]
 800618e:	3304      	adds	r3, #4
 8006190:	4619      	mov	r1, r3
 8006192:	4610      	mov	r0, r2
 8006194:	f7fe fbf1 	bl	800497a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006198:	2301      	movs	r3, #1
 800619a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800619c:	697b      	ldr	r3, [r7, #20]
	}
 800619e:	4618      	mov	r0, r3
 80061a0:	3718      	adds	r7, #24
 80061a2:	46bd      	mov	sp, r7
 80061a4:	bd80      	pop	{r7, pc}
 80061a6:	bf00      	nop
 80061a8:	20000750 	.word	0x20000750
 80061ac:	20000c2c 	.word	0x20000c2c
 80061b0:	20000754 	.word	0x20000754

080061b4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80061b4:	b580      	push	{r7, lr}
 80061b6:	b084      	sub	sp, #16
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	6078      	str	r0, [r7, #4]
 80061bc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80061be:	4b21      	ldr	r3, [pc, #132]	; (8006244 <prvAddCurrentTaskToDelayedList+0x90>)
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80061c4:	4b20      	ldr	r3, [pc, #128]	; (8006248 <prvAddCurrentTaskToDelayedList+0x94>)
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	3304      	adds	r3, #4
 80061ca:	4618      	mov	r0, r3
 80061cc:	f7fe fc32 	bl	8004a34 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061d6:	d10a      	bne.n	80061ee <prvAddCurrentTaskToDelayedList+0x3a>
 80061d8:	683b      	ldr	r3, [r7, #0]
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d007      	beq.n	80061ee <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80061de:	4b1a      	ldr	r3, [pc, #104]	; (8006248 <prvAddCurrentTaskToDelayedList+0x94>)
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	3304      	adds	r3, #4
 80061e4:	4619      	mov	r1, r3
 80061e6:	4819      	ldr	r0, [pc, #100]	; (800624c <prvAddCurrentTaskToDelayedList+0x98>)
 80061e8:	f7fe fbc7 	bl	800497a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80061ec:	e026      	b.n	800623c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80061ee:	68fa      	ldr	r2, [r7, #12]
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	4413      	add	r3, r2
 80061f4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80061f6:	4b14      	ldr	r3, [pc, #80]	; (8006248 <prvAddCurrentTaskToDelayedList+0x94>)
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	68ba      	ldr	r2, [r7, #8]
 80061fc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80061fe:	68ba      	ldr	r2, [r7, #8]
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	429a      	cmp	r2, r3
 8006204:	d209      	bcs.n	800621a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006206:	4b12      	ldr	r3, [pc, #72]	; (8006250 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006208:	681a      	ldr	r2, [r3, #0]
 800620a:	4b0f      	ldr	r3, [pc, #60]	; (8006248 <prvAddCurrentTaskToDelayedList+0x94>)
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	3304      	adds	r3, #4
 8006210:	4619      	mov	r1, r3
 8006212:	4610      	mov	r0, r2
 8006214:	f7fe fbd5 	bl	80049c2 <vListInsert>
}
 8006218:	e010      	b.n	800623c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800621a:	4b0e      	ldr	r3, [pc, #56]	; (8006254 <prvAddCurrentTaskToDelayedList+0xa0>)
 800621c:	681a      	ldr	r2, [r3, #0]
 800621e:	4b0a      	ldr	r3, [pc, #40]	; (8006248 <prvAddCurrentTaskToDelayedList+0x94>)
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	3304      	adds	r3, #4
 8006224:	4619      	mov	r1, r3
 8006226:	4610      	mov	r0, r2
 8006228:	f7fe fbcb 	bl	80049c2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800622c:	4b0a      	ldr	r3, [pc, #40]	; (8006258 <prvAddCurrentTaskToDelayedList+0xa4>)
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	68ba      	ldr	r2, [r7, #8]
 8006232:	429a      	cmp	r2, r3
 8006234:	d202      	bcs.n	800623c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006236:	4a08      	ldr	r2, [pc, #32]	; (8006258 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006238:	68bb      	ldr	r3, [r7, #8]
 800623a:	6013      	str	r3, [r2, #0]
}
 800623c:	bf00      	nop
 800623e:	3710      	adds	r7, #16
 8006240:	46bd      	mov	sp, r7
 8006242:	bd80      	pop	{r7, pc}
 8006244:	20000c28 	.word	0x20000c28
 8006248:	20000750 	.word	0x20000750
 800624c:	20000c10 	.word	0x20000c10
 8006250:	20000be0 	.word	0x20000be0
 8006254:	20000bdc 	.word	0x20000bdc
 8006258:	20000c44 	.word	0x20000c44

0800625c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800625c:	b580      	push	{r7, lr}
 800625e:	b08a      	sub	sp, #40	; 0x28
 8006260:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006262:	2300      	movs	r3, #0
 8006264:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006266:	f000 fb07 	bl	8006878 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800626a:	4b1c      	ldr	r3, [pc, #112]	; (80062dc <xTimerCreateTimerTask+0x80>)
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	2b00      	cmp	r3, #0
 8006270:	d021      	beq.n	80062b6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006272:	2300      	movs	r3, #0
 8006274:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006276:	2300      	movs	r3, #0
 8006278:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800627a:	1d3a      	adds	r2, r7, #4
 800627c:	f107 0108 	add.w	r1, r7, #8
 8006280:	f107 030c 	add.w	r3, r7, #12
 8006284:	4618      	mov	r0, r3
 8006286:	f7fe fb31 	bl	80048ec <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800628a:	6879      	ldr	r1, [r7, #4]
 800628c:	68bb      	ldr	r3, [r7, #8]
 800628e:	68fa      	ldr	r2, [r7, #12]
 8006290:	9202      	str	r2, [sp, #8]
 8006292:	9301      	str	r3, [sp, #4]
 8006294:	2302      	movs	r3, #2
 8006296:	9300      	str	r3, [sp, #0]
 8006298:	2300      	movs	r3, #0
 800629a:	460a      	mov	r2, r1
 800629c:	4910      	ldr	r1, [pc, #64]	; (80062e0 <xTimerCreateTimerTask+0x84>)
 800629e:	4811      	ldr	r0, [pc, #68]	; (80062e4 <xTimerCreateTimerTask+0x88>)
 80062a0:	f7ff f8de 	bl	8005460 <xTaskCreateStatic>
 80062a4:	4603      	mov	r3, r0
 80062a6:	4a10      	ldr	r2, [pc, #64]	; (80062e8 <xTimerCreateTimerTask+0x8c>)
 80062a8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80062aa:	4b0f      	ldr	r3, [pc, #60]	; (80062e8 <xTimerCreateTimerTask+0x8c>)
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d001      	beq.n	80062b6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80062b2:	2301      	movs	r3, #1
 80062b4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80062b6:	697b      	ldr	r3, [r7, #20]
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d10a      	bne.n	80062d2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 80062bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062c0:	f383 8811 	msr	BASEPRI, r3
 80062c4:	f3bf 8f6f 	isb	sy
 80062c8:	f3bf 8f4f 	dsb	sy
 80062cc:	613b      	str	r3, [r7, #16]
}
 80062ce:	bf00      	nop
 80062d0:	e7fe      	b.n	80062d0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80062d2:	697b      	ldr	r3, [r7, #20]
}
 80062d4:	4618      	mov	r0, r3
 80062d6:	3718      	adds	r7, #24
 80062d8:	46bd      	mov	sp, r7
 80062da:	bd80      	pop	{r7, pc}
 80062dc:	20000c80 	.word	0x20000c80
 80062e0:	08007c58 	.word	0x08007c58
 80062e4:	08006421 	.word	0x08006421
 80062e8:	20000c84 	.word	0x20000c84

080062ec <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80062ec:	b580      	push	{r7, lr}
 80062ee:	b08a      	sub	sp, #40	; 0x28
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	60f8      	str	r0, [r7, #12]
 80062f4:	60b9      	str	r1, [r7, #8]
 80062f6:	607a      	str	r2, [r7, #4]
 80062f8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80062fa:	2300      	movs	r3, #0
 80062fc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	2b00      	cmp	r3, #0
 8006302:	d10a      	bne.n	800631a <xTimerGenericCommand+0x2e>
	__asm volatile
 8006304:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006308:	f383 8811 	msr	BASEPRI, r3
 800630c:	f3bf 8f6f 	isb	sy
 8006310:	f3bf 8f4f 	dsb	sy
 8006314:	623b      	str	r3, [r7, #32]
}
 8006316:	bf00      	nop
 8006318:	e7fe      	b.n	8006318 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800631a:	4b1a      	ldr	r3, [pc, #104]	; (8006384 <xTimerGenericCommand+0x98>)
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	2b00      	cmp	r3, #0
 8006320:	d02a      	beq.n	8006378 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006322:	68bb      	ldr	r3, [r7, #8]
 8006324:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800632e:	68bb      	ldr	r3, [r7, #8]
 8006330:	2b05      	cmp	r3, #5
 8006332:	dc18      	bgt.n	8006366 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006334:	f7ff feb2 	bl	800609c <xTaskGetSchedulerState>
 8006338:	4603      	mov	r3, r0
 800633a:	2b02      	cmp	r3, #2
 800633c:	d109      	bne.n	8006352 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800633e:	4b11      	ldr	r3, [pc, #68]	; (8006384 <xTimerGenericCommand+0x98>)
 8006340:	6818      	ldr	r0, [r3, #0]
 8006342:	f107 0110 	add.w	r1, r7, #16
 8006346:	2300      	movs	r3, #0
 8006348:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800634a:	f7fe fca1 	bl	8004c90 <xQueueGenericSend>
 800634e:	6278      	str	r0, [r7, #36]	; 0x24
 8006350:	e012      	b.n	8006378 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006352:	4b0c      	ldr	r3, [pc, #48]	; (8006384 <xTimerGenericCommand+0x98>)
 8006354:	6818      	ldr	r0, [r3, #0]
 8006356:	f107 0110 	add.w	r1, r7, #16
 800635a:	2300      	movs	r3, #0
 800635c:	2200      	movs	r2, #0
 800635e:	f7fe fc97 	bl	8004c90 <xQueueGenericSend>
 8006362:	6278      	str	r0, [r7, #36]	; 0x24
 8006364:	e008      	b.n	8006378 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006366:	4b07      	ldr	r3, [pc, #28]	; (8006384 <xTimerGenericCommand+0x98>)
 8006368:	6818      	ldr	r0, [r3, #0]
 800636a:	f107 0110 	add.w	r1, r7, #16
 800636e:	2300      	movs	r3, #0
 8006370:	683a      	ldr	r2, [r7, #0]
 8006372:	f7fe fd8b 	bl	8004e8c <xQueueGenericSendFromISR>
 8006376:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800637a:	4618      	mov	r0, r3
 800637c:	3728      	adds	r7, #40	; 0x28
 800637e:	46bd      	mov	sp, r7
 8006380:	bd80      	pop	{r7, pc}
 8006382:	bf00      	nop
 8006384:	20000c80 	.word	0x20000c80

08006388 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006388:	b580      	push	{r7, lr}
 800638a:	b088      	sub	sp, #32
 800638c:	af02      	add	r7, sp, #8
 800638e:	6078      	str	r0, [r7, #4]
 8006390:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006392:	4b22      	ldr	r3, [pc, #136]	; (800641c <prvProcessExpiredTimer+0x94>)
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	68db      	ldr	r3, [r3, #12]
 8006398:	68db      	ldr	r3, [r3, #12]
 800639a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800639c:	697b      	ldr	r3, [r7, #20]
 800639e:	3304      	adds	r3, #4
 80063a0:	4618      	mov	r0, r3
 80063a2:	f7fe fb47 	bl	8004a34 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80063a6:	697b      	ldr	r3, [r7, #20]
 80063a8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80063ac:	f003 0304 	and.w	r3, r3, #4
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d022      	beq.n	80063fa <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80063b4:	697b      	ldr	r3, [r7, #20]
 80063b6:	699a      	ldr	r2, [r3, #24]
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	18d1      	adds	r1, r2, r3
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	683a      	ldr	r2, [r7, #0]
 80063c0:	6978      	ldr	r0, [r7, #20]
 80063c2:	f000 f8d1 	bl	8006568 <prvInsertTimerInActiveList>
 80063c6:	4603      	mov	r3, r0
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d01f      	beq.n	800640c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80063cc:	2300      	movs	r3, #0
 80063ce:	9300      	str	r3, [sp, #0]
 80063d0:	2300      	movs	r3, #0
 80063d2:	687a      	ldr	r2, [r7, #4]
 80063d4:	2100      	movs	r1, #0
 80063d6:	6978      	ldr	r0, [r7, #20]
 80063d8:	f7ff ff88 	bl	80062ec <xTimerGenericCommand>
 80063dc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80063de:	693b      	ldr	r3, [r7, #16]
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d113      	bne.n	800640c <prvProcessExpiredTimer+0x84>
	__asm volatile
 80063e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063e8:	f383 8811 	msr	BASEPRI, r3
 80063ec:	f3bf 8f6f 	isb	sy
 80063f0:	f3bf 8f4f 	dsb	sy
 80063f4:	60fb      	str	r3, [r7, #12]
}
 80063f6:	bf00      	nop
 80063f8:	e7fe      	b.n	80063f8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80063fa:	697b      	ldr	r3, [r7, #20]
 80063fc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006400:	f023 0301 	bic.w	r3, r3, #1
 8006404:	b2da      	uxtb	r2, r3
 8006406:	697b      	ldr	r3, [r7, #20]
 8006408:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800640c:	697b      	ldr	r3, [r7, #20]
 800640e:	6a1b      	ldr	r3, [r3, #32]
 8006410:	6978      	ldr	r0, [r7, #20]
 8006412:	4798      	blx	r3
}
 8006414:	bf00      	nop
 8006416:	3718      	adds	r7, #24
 8006418:	46bd      	mov	sp, r7
 800641a:	bd80      	pop	{r7, pc}
 800641c:	20000c78 	.word	0x20000c78

08006420 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006420:	b580      	push	{r7, lr}
 8006422:	b084      	sub	sp, #16
 8006424:	af00      	add	r7, sp, #0
 8006426:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006428:	f107 0308 	add.w	r3, r7, #8
 800642c:	4618      	mov	r0, r3
 800642e:	f000 f857 	bl	80064e0 <prvGetNextExpireTime>
 8006432:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006434:	68bb      	ldr	r3, [r7, #8]
 8006436:	4619      	mov	r1, r3
 8006438:	68f8      	ldr	r0, [r7, #12]
 800643a:	f000 f803 	bl	8006444 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800643e:	f000 f8d5 	bl	80065ec <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006442:	e7f1      	b.n	8006428 <prvTimerTask+0x8>

08006444 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006444:	b580      	push	{r7, lr}
 8006446:	b084      	sub	sp, #16
 8006448:	af00      	add	r7, sp, #0
 800644a:	6078      	str	r0, [r7, #4]
 800644c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800644e:	f7ff fa43 	bl	80058d8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006452:	f107 0308 	add.w	r3, r7, #8
 8006456:	4618      	mov	r0, r3
 8006458:	f000 f866 	bl	8006528 <prvSampleTimeNow>
 800645c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800645e:	68bb      	ldr	r3, [r7, #8]
 8006460:	2b00      	cmp	r3, #0
 8006462:	d130      	bne.n	80064c6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006464:	683b      	ldr	r3, [r7, #0]
 8006466:	2b00      	cmp	r3, #0
 8006468:	d10a      	bne.n	8006480 <prvProcessTimerOrBlockTask+0x3c>
 800646a:	687a      	ldr	r2, [r7, #4]
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	429a      	cmp	r2, r3
 8006470:	d806      	bhi.n	8006480 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006472:	f7ff fa3f 	bl	80058f4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006476:	68f9      	ldr	r1, [r7, #12]
 8006478:	6878      	ldr	r0, [r7, #4]
 800647a:	f7ff ff85 	bl	8006388 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800647e:	e024      	b.n	80064ca <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006480:	683b      	ldr	r3, [r7, #0]
 8006482:	2b00      	cmp	r3, #0
 8006484:	d008      	beq.n	8006498 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006486:	4b13      	ldr	r3, [pc, #76]	; (80064d4 <prvProcessTimerOrBlockTask+0x90>)
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	2b00      	cmp	r3, #0
 800648e:	d101      	bne.n	8006494 <prvProcessTimerOrBlockTask+0x50>
 8006490:	2301      	movs	r3, #1
 8006492:	e000      	b.n	8006496 <prvProcessTimerOrBlockTask+0x52>
 8006494:	2300      	movs	r3, #0
 8006496:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006498:	4b0f      	ldr	r3, [pc, #60]	; (80064d8 <prvProcessTimerOrBlockTask+0x94>)
 800649a:	6818      	ldr	r0, [r3, #0]
 800649c:	687a      	ldr	r2, [r7, #4]
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	1ad3      	subs	r3, r2, r3
 80064a2:	683a      	ldr	r2, [r7, #0]
 80064a4:	4619      	mov	r1, r3
 80064a6:	f7fe ffa7 	bl	80053f8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80064aa:	f7ff fa23 	bl	80058f4 <xTaskResumeAll>
 80064ae:	4603      	mov	r3, r0
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d10a      	bne.n	80064ca <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80064b4:	4b09      	ldr	r3, [pc, #36]	; (80064dc <prvProcessTimerOrBlockTask+0x98>)
 80064b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80064ba:	601a      	str	r2, [r3, #0]
 80064bc:	f3bf 8f4f 	dsb	sy
 80064c0:	f3bf 8f6f 	isb	sy
}
 80064c4:	e001      	b.n	80064ca <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80064c6:	f7ff fa15 	bl	80058f4 <xTaskResumeAll>
}
 80064ca:	bf00      	nop
 80064cc:	3710      	adds	r7, #16
 80064ce:	46bd      	mov	sp, r7
 80064d0:	bd80      	pop	{r7, pc}
 80064d2:	bf00      	nop
 80064d4:	20000c7c 	.word	0x20000c7c
 80064d8:	20000c80 	.word	0x20000c80
 80064dc:	e000ed04 	.word	0xe000ed04

080064e0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80064e0:	b480      	push	{r7}
 80064e2:	b085      	sub	sp, #20
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80064e8:	4b0e      	ldr	r3, [pc, #56]	; (8006524 <prvGetNextExpireTime+0x44>)
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d101      	bne.n	80064f6 <prvGetNextExpireTime+0x16>
 80064f2:	2201      	movs	r2, #1
 80064f4:	e000      	b.n	80064f8 <prvGetNextExpireTime+0x18>
 80064f6:	2200      	movs	r2, #0
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	2b00      	cmp	r3, #0
 8006502:	d105      	bne.n	8006510 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006504:	4b07      	ldr	r3, [pc, #28]	; (8006524 <prvGetNextExpireTime+0x44>)
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	68db      	ldr	r3, [r3, #12]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	60fb      	str	r3, [r7, #12]
 800650e:	e001      	b.n	8006514 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006510:	2300      	movs	r3, #0
 8006512:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006514:	68fb      	ldr	r3, [r7, #12]
}
 8006516:	4618      	mov	r0, r3
 8006518:	3714      	adds	r7, #20
 800651a:	46bd      	mov	sp, r7
 800651c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006520:	4770      	bx	lr
 8006522:	bf00      	nop
 8006524:	20000c78 	.word	0x20000c78

08006528 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006528:	b580      	push	{r7, lr}
 800652a:	b084      	sub	sp, #16
 800652c:	af00      	add	r7, sp, #0
 800652e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006530:	f7ff fa7e 	bl	8005a30 <xTaskGetTickCount>
 8006534:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006536:	4b0b      	ldr	r3, [pc, #44]	; (8006564 <prvSampleTimeNow+0x3c>)
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	68fa      	ldr	r2, [r7, #12]
 800653c:	429a      	cmp	r2, r3
 800653e:	d205      	bcs.n	800654c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006540:	f000 f936 	bl	80067b0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	2201      	movs	r2, #1
 8006548:	601a      	str	r2, [r3, #0]
 800654a:	e002      	b.n	8006552 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	2200      	movs	r2, #0
 8006550:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006552:	4a04      	ldr	r2, [pc, #16]	; (8006564 <prvSampleTimeNow+0x3c>)
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006558:	68fb      	ldr	r3, [r7, #12]
}
 800655a:	4618      	mov	r0, r3
 800655c:	3710      	adds	r7, #16
 800655e:	46bd      	mov	sp, r7
 8006560:	bd80      	pop	{r7, pc}
 8006562:	bf00      	nop
 8006564:	20000c88 	.word	0x20000c88

08006568 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006568:	b580      	push	{r7, lr}
 800656a:	b086      	sub	sp, #24
 800656c:	af00      	add	r7, sp, #0
 800656e:	60f8      	str	r0, [r7, #12]
 8006570:	60b9      	str	r1, [r7, #8]
 8006572:	607a      	str	r2, [r7, #4]
 8006574:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006576:	2300      	movs	r3, #0
 8006578:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	68ba      	ldr	r2, [r7, #8]
 800657e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	68fa      	ldr	r2, [r7, #12]
 8006584:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006586:	68ba      	ldr	r2, [r7, #8]
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	429a      	cmp	r2, r3
 800658c:	d812      	bhi.n	80065b4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800658e:	687a      	ldr	r2, [r7, #4]
 8006590:	683b      	ldr	r3, [r7, #0]
 8006592:	1ad2      	subs	r2, r2, r3
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	699b      	ldr	r3, [r3, #24]
 8006598:	429a      	cmp	r2, r3
 800659a:	d302      	bcc.n	80065a2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800659c:	2301      	movs	r3, #1
 800659e:	617b      	str	r3, [r7, #20]
 80065a0:	e01b      	b.n	80065da <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80065a2:	4b10      	ldr	r3, [pc, #64]	; (80065e4 <prvInsertTimerInActiveList+0x7c>)
 80065a4:	681a      	ldr	r2, [r3, #0]
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	3304      	adds	r3, #4
 80065aa:	4619      	mov	r1, r3
 80065ac:	4610      	mov	r0, r2
 80065ae:	f7fe fa08 	bl	80049c2 <vListInsert>
 80065b2:	e012      	b.n	80065da <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80065b4:	687a      	ldr	r2, [r7, #4]
 80065b6:	683b      	ldr	r3, [r7, #0]
 80065b8:	429a      	cmp	r2, r3
 80065ba:	d206      	bcs.n	80065ca <prvInsertTimerInActiveList+0x62>
 80065bc:	68ba      	ldr	r2, [r7, #8]
 80065be:	683b      	ldr	r3, [r7, #0]
 80065c0:	429a      	cmp	r2, r3
 80065c2:	d302      	bcc.n	80065ca <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80065c4:	2301      	movs	r3, #1
 80065c6:	617b      	str	r3, [r7, #20]
 80065c8:	e007      	b.n	80065da <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80065ca:	4b07      	ldr	r3, [pc, #28]	; (80065e8 <prvInsertTimerInActiveList+0x80>)
 80065cc:	681a      	ldr	r2, [r3, #0]
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	3304      	adds	r3, #4
 80065d2:	4619      	mov	r1, r3
 80065d4:	4610      	mov	r0, r2
 80065d6:	f7fe f9f4 	bl	80049c2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80065da:	697b      	ldr	r3, [r7, #20]
}
 80065dc:	4618      	mov	r0, r3
 80065de:	3718      	adds	r7, #24
 80065e0:	46bd      	mov	sp, r7
 80065e2:	bd80      	pop	{r7, pc}
 80065e4:	20000c7c 	.word	0x20000c7c
 80065e8:	20000c78 	.word	0x20000c78

080065ec <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80065ec:	b580      	push	{r7, lr}
 80065ee:	b08e      	sub	sp, #56	; 0x38
 80065f0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80065f2:	e0ca      	b.n	800678a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	da18      	bge.n	800662c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80065fa:	1d3b      	adds	r3, r7, #4
 80065fc:	3304      	adds	r3, #4
 80065fe:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006600:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006602:	2b00      	cmp	r3, #0
 8006604:	d10a      	bne.n	800661c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8006606:	f04f 0350 	mov.w	r3, #80	; 0x50
 800660a:	f383 8811 	msr	BASEPRI, r3
 800660e:	f3bf 8f6f 	isb	sy
 8006612:	f3bf 8f4f 	dsb	sy
 8006616:	61fb      	str	r3, [r7, #28]
}
 8006618:	bf00      	nop
 800661a:	e7fe      	b.n	800661a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800661c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006622:	6850      	ldr	r0, [r2, #4]
 8006624:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006626:	6892      	ldr	r2, [r2, #8]
 8006628:	4611      	mov	r1, r2
 800662a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	2b00      	cmp	r3, #0
 8006630:	f2c0 80aa 	blt.w	8006788 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006638:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800663a:	695b      	ldr	r3, [r3, #20]
 800663c:	2b00      	cmp	r3, #0
 800663e:	d004      	beq.n	800664a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006640:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006642:	3304      	adds	r3, #4
 8006644:	4618      	mov	r0, r3
 8006646:	f7fe f9f5 	bl	8004a34 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800664a:	463b      	mov	r3, r7
 800664c:	4618      	mov	r0, r3
 800664e:	f7ff ff6b 	bl	8006528 <prvSampleTimeNow>
 8006652:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	2b09      	cmp	r3, #9
 8006658:	f200 8097 	bhi.w	800678a <prvProcessReceivedCommands+0x19e>
 800665c:	a201      	add	r2, pc, #4	; (adr r2, 8006664 <prvProcessReceivedCommands+0x78>)
 800665e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006662:	bf00      	nop
 8006664:	0800668d 	.word	0x0800668d
 8006668:	0800668d 	.word	0x0800668d
 800666c:	0800668d 	.word	0x0800668d
 8006670:	08006701 	.word	0x08006701
 8006674:	08006715 	.word	0x08006715
 8006678:	0800675f 	.word	0x0800675f
 800667c:	0800668d 	.word	0x0800668d
 8006680:	0800668d 	.word	0x0800668d
 8006684:	08006701 	.word	0x08006701
 8006688:	08006715 	.word	0x08006715
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800668c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800668e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006692:	f043 0301 	orr.w	r3, r3, #1
 8006696:	b2da      	uxtb	r2, r3
 8006698:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800669a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800669e:	68ba      	ldr	r2, [r7, #8]
 80066a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066a2:	699b      	ldr	r3, [r3, #24]
 80066a4:	18d1      	adds	r1, r2, r3
 80066a6:	68bb      	ldr	r3, [r7, #8]
 80066a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80066aa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80066ac:	f7ff ff5c 	bl	8006568 <prvInsertTimerInActiveList>
 80066b0:	4603      	mov	r3, r0
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d069      	beq.n	800678a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80066b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066b8:	6a1b      	ldr	r3, [r3, #32]
 80066ba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80066bc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80066be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066c0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80066c4:	f003 0304 	and.w	r3, r3, #4
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d05e      	beq.n	800678a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80066cc:	68ba      	ldr	r2, [r7, #8]
 80066ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066d0:	699b      	ldr	r3, [r3, #24]
 80066d2:	441a      	add	r2, r3
 80066d4:	2300      	movs	r3, #0
 80066d6:	9300      	str	r3, [sp, #0]
 80066d8:	2300      	movs	r3, #0
 80066da:	2100      	movs	r1, #0
 80066dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80066de:	f7ff fe05 	bl	80062ec <xTimerGenericCommand>
 80066e2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80066e4:	6a3b      	ldr	r3, [r7, #32]
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d14f      	bne.n	800678a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80066ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066ee:	f383 8811 	msr	BASEPRI, r3
 80066f2:	f3bf 8f6f 	isb	sy
 80066f6:	f3bf 8f4f 	dsb	sy
 80066fa:	61bb      	str	r3, [r7, #24]
}
 80066fc:	bf00      	nop
 80066fe:	e7fe      	b.n	80066fe <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006700:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006702:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006706:	f023 0301 	bic.w	r3, r3, #1
 800670a:	b2da      	uxtb	r2, r3
 800670c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800670e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8006712:	e03a      	b.n	800678a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006714:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006716:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800671a:	f043 0301 	orr.w	r3, r3, #1
 800671e:	b2da      	uxtb	r2, r3
 8006720:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006722:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006726:	68ba      	ldr	r2, [r7, #8]
 8006728:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800672a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800672c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800672e:	699b      	ldr	r3, [r3, #24]
 8006730:	2b00      	cmp	r3, #0
 8006732:	d10a      	bne.n	800674a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8006734:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006738:	f383 8811 	msr	BASEPRI, r3
 800673c:	f3bf 8f6f 	isb	sy
 8006740:	f3bf 8f4f 	dsb	sy
 8006744:	617b      	str	r3, [r7, #20]
}
 8006746:	bf00      	nop
 8006748:	e7fe      	b.n	8006748 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800674a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800674c:	699a      	ldr	r2, [r3, #24]
 800674e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006750:	18d1      	adds	r1, r2, r3
 8006752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006754:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006756:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006758:	f7ff ff06 	bl	8006568 <prvInsertTimerInActiveList>
					break;
 800675c:	e015      	b.n	800678a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800675e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006760:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006764:	f003 0302 	and.w	r3, r3, #2
 8006768:	2b00      	cmp	r3, #0
 800676a:	d103      	bne.n	8006774 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800676c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800676e:	f000 fbdf 	bl	8006f30 <vPortFree>
 8006772:	e00a      	b.n	800678a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006774:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006776:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800677a:	f023 0301 	bic.w	r3, r3, #1
 800677e:	b2da      	uxtb	r2, r3
 8006780:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006782:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006786:	e000      	b.n	800678a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8006788:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800678a:	4b08      	ldr	r3, [pc, #32]	; (80067ac <prvProcessReceivedCommands+0x1c0>)
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	1d39      	adds	r1, r7, #4
 8006790:	2200      	movs	r2, #0
 8006792:	4618      	mov	r0, r3
 8006794:	f7fe fc16 	bl	8004fc4 <xQueueReceive>
 8006798:	4603      	mov	r3, r0
 800679a:	2b00      	cmp	r3, #0
 800679c:	f47f af2a 	bne.w	80065f4 <prvProcessReceivedCommands+0x8>
	}
}
 80067a0:	bf00      	nop
 80067a2:	bf00      	nop
 80067a4:	3730      	adds	r7, #48	; 0x30
 80067a6:	46bd      	mov	sp, r7
 80067a8:	bd80      	pop	{r7, pc}
 80067aa:	bf00      	nop
 80067ac:	20000c80 	.word	0x20000c80

080067b0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80067b0:	b580      	push	{r7, lr}
 80067b2:	b088      	sub	sp, #32
 80067b4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80067b6:	e048      	b.n	800684a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80067b8:	4b2d      	ldr	r3, [pc, #180]	; (8006870 <prvSwitchTimerLists+0xc0>)
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	68db      	ldr	r3, [r3, #12]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80067c2:	4b2b      	ldr	r3, [pc, #172]	; (8006870 <prvSwitchTimerLists+0xc0>)
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	68db      	ldr	r3, [r3, #12]
 80067c8:	68db      	ldr	r3, [r3, #12]
 80067ca:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	3304      	adds	r3, #4
 80067d0:	4618      	mov	r0, r3
 80067d2:	f7fe f92f 	bl	8004a34 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	6a1b      	ldr	r3, [r3, #32]
 80067da:	68f8      	ldr	r0, [r7, #12]
 80067dc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80067e4:	f003 0304 	and.w	r3, r3, #4
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d02e      	beq.n	800684a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	699b      	ldr	r3, [r3, #24]
 80067f0:	693a      	ldr	r2, [r7, #16]
 80067f2:	4413      	add	r3, r2
 80067f4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80067f6:	68ba      	ldr	r2, [r7, #8]
 80067f8:	693b      	ldr	r3, [r7, #16]
 80067fa:	429a      	cmp	r2, r3
 80067fc:	d90e      	bls.n	800681c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	68ba      	ldr	r2, [r7, #8]
 8006802:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	68fa      	ldr	r2, [r7, #12]
 8006808:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800680a:	4b19      	ldr	r3, [pc, #100]	; (8006870 <prvSwitchTimerLists+0xc0>)
 800680c:	681a      	ldr	r2, [r3, #0]
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	3304      	adds	r3, #4
 8006812:	4619      	mov	r1, r3
 8006814:	4610      	mov	r0, r2
 8006816:	f7fe f8d4 	bl	80049c2 <vListInsert>
 800681a:	e016      	b.n	800684a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800681c:	2300      	movs	r3, #0
 800681e:	9300      	str	r3, [sp, #0]
 8006820:	2300      	movs	r3, #0
 8006822:	693a      	ldr	r2, [r7, #16]
 8006824:	2100      	movs	r1, #0
 8006826:	68f8      	ldr	r0, [r7, #12]
 8006828:	f7ff fd60 	bl	80062ec <xTimerGenericCommand>
 800682c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	2b00      	cmp	r3, #0
 8006832:	d10a      	bne.n	800684a <prvSwitchTimerLists+0x9a>
	__asm volatile
 8006834:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006838:	f383 8811 	msr	BASEPRI, r3
 800683c:	f3bf 8f6f 	isb	sy
 8006840:	f3bf 8f4f 	dsb	sy
 8006844:	603b      	str	r3, [r7, #0]
}
 8006846:	bf00      	nop
 8006848:	e7fe      	b.n	8006848 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800684a:	4b09      	ldr	r3, [pc, #36]	; (8006870 <prvSwitchTimerLists+0xc0>)
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	2b00      	cmp	r3, #0
 8006852:	d1b1      	bne.n	80067b8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006854:	4b06      	ldr	r3, [pc, #24]	; (8006870 <prvSwitchTimerLists+0xc0>)
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800685a:	4b06      	ldr	r3, [pc, #24]	; (8006874 <prvSwitchTimerLists+0xc4>)
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	4a04      	ldr	r2, [pc, #16]	; (8006870 <prvSwitchTimerLists+0xc0>)
 8006860:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006862:	4a04      	ldr	r2, [pc, #16]	; (8006874 <prvSwitchTimerLists+0xc4>)
 8006864:	697b      	ldr	r3, [r7, #20]
 8006866:	6013      	str	r3, [r2, #0]
}
 8006868:	bf00      	nop
 800686a:	3718      	adds	r7, #24
 800686c:	46bd      	mov	sp, r7
 800686e:	bd80      	pop	{r7, pc}
 8006870:	20000c78 	.word	0x20000c78
 8006874:	20000c7c 	.word	0x20000c7c

08006878 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006878:	b580      	push	{r7, lr}
 800687a:	b082      	sub	sp, #8
 800687c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800687e:	f000 f969 	bl	8006b54 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006882:	4b15      	ldr	r3, [pc, #84]	; (80068d8 <prvCheckForValidListAndQueue+0x60>)
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	2b00      	cmp	r3, #0
 8006888:	d120      	bne.n	80068cc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800688a:	4814      	ldr	r0, [pc, #80]	; (80068dc <prvCheckForValidListAndQueue+0x64>)
 800688c:	f7fe f848 	bl	8004920 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006890:	4813      	ldr	r0, [pc, #76]	; (80068e0 <prvCheckForValidListAndQueue+0x68>)
 8006892:	f7fe f845 	bl	8004920 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006896:	4b13      	ldr	r3, [pc, #76]	; (80068e4 <prvCheckForValidListAndQueue+0x6c>)
 8006898:	4a10      	ldr	r2, [pc, #64]	; (80068dc <prvCheckForValidListAndQueue+0x64>)
 800689a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800689c:	4b12      	ldr	r3, [pc, #72]	; (80068e8 <prvCheckForValidListAndQueue+0x70>)
 800689e:	4a10      	ldr	r2, [pc, #64]	; (80068e0 <prvCheckForValidListAndQueue+0x68>)
 80068a0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80068a2:	2300      	movs	r3, #0
 80068a4:	9300      	str	r3, [sp, #0]
 80068a6:	4b11      	ldr	r3, [pc, #68]	; (80068ec <prvCheckForValidListAndQueue+0x74>)
 80068a8:	4a11      	ldr	r2, [pc, #68]	; (80068f0 <prvCheckForValidListAndQueue+0x78>)
 80068aa:	2110      	movs	r1, #16
 80068ac:	200a      	movs	r0, #10
 80068ae:	f7fe f953 	bl	8004b58 <xQueueGenericCreateStatic>
 80068b2:	4603      	mov	r3, r0
 80068b4:	4a08      	ldr	r2, [pc, #32]	; (80068d8 <prvCheckForValidListAndQueue+0x60>)
 80068b6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80068b8:	4b07      	ldr	r3, [pc, #28]	; (80068d8 <prvCheckForValidListAndQueue+0x60>)
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d005      	beq.n	80068cc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80068c0:	4b05      	ldr	r3, [pc, #20]	; (80068d8 <prvCheckForValidListAndQueue+0x60>)
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	490b      	ldr	r1, [pc, #44]	; (80068f4 <prvCheckForValidListAndQueue+0x7c>)
 80068c6:	4618      	mov	r0, r3
 80068c8:	f7fe fd6c 	bl	80053a4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80068cc:	f000 f972 	bl	8006bb4 <vPortExitCritical>
}
 80068d0:	bf00      	nop
 80068d2:	46bd      	mov	sp, r7
 80068d4:	bd80      	pop	{r7, pc}
 80068d6:	bf00      	nop
 80068d8:	20000c80 	.word	0x20000c80
 80068dc:	20000c50 	.word	0x20000c50
 80068e0:	20000c64 	.word	0x20000c64
 80068e4:	20000c78 	.word	0x20000c78
 80068e8:	20000c7c 	.word	0x20000c7c
 80068ec:	20000d2c 	.word	0x20000d2c
 80068f0:	20000c8c 	.word	0x20000c8c
 80068f4:	08007c60 	.word	0x08007c60

080068f8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80068f8:	b480      	push	{r7}
 80068fa:	b085      	sub	sp, #20
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	60f8      	str	r0, [r7, #12]
 8006900:	60b9      	str	r1, [r7, #8]
 8006902:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	3b04      	subs	r3, #4
 8006908:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006910:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	3b04      	subs	r3, #4
 8006916:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006918:	68bb      	ldr	r3, [r7, #8]
 800691a:	f023 0201 	bic.w	r2, r3, #1
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	3b04      	subs	r3, #4
 8006926:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006928:	4a0c      	ldr	r2, [pc, #48]	; (800695c <pxPortInitialiseStack+0x64>)
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	3b14      	subs	r3, #20
 8006932:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006934:	687a      	ldr	r2, [r7, #4]
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	3b04      	subs	r3, #4
 800693e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	f06f 0202 	mvn.w	r2, #2
 8006946:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	3b20      	subs	r3, #32
 800694c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800694e:	68fb      	ldr	r3, [r7, #12]
}
 8006950:	4618      	mov	r0, r3
 8006952:	3714      	adds	r7, #20
 8006954:	46bd      	mov	sp, r7
 8006956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800695a:	4770      	bx	lr
 800695c:	08006961 	.word	0x08006961

08006960 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006960:	b480      	push	{r7}
 8006962:	b085      	sub	sp, #20
 8006964:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006966:	2300      	movs	r3, #0
 8006968:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800696a:	4b12      	ldr	r3, [pc, #72]	; (80069b4 <prvTaskExitError+0x54>)
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006972:	d00a      	beq.n	800698a <prvTaskExitError+0x2a>
	__asm volatile
 8006974:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006978:	f383 8811 	msr	BASEPRI, r3
 800697c:	f3bf 8f6f 	isb	sy
 8006980:	f3bf 8f4f 	dsb	sy
 8006984:	60fb      	str	r3, [r7, #12]
}
 8006986:	bf00      	nop
 8006988:	e7fe      	b.n	8006988 <prvTaskExitError+0x28>
	__asm volatile
 800698a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800698e:	f383 8811 	msr	BASEPRI, r3
 8006992:	f3bf 8f6f 	isb	sy
 8006996:	f3bf 8f4f 	dsb	sy
 800699a:	60bb      	str	r3, [r7, #8]
}
 800699c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800699e:	bf00      	nop
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d0fc      	beq.n	80069a0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80069a6:	bf00      	nop
 80069a8:	bf00      	nop
 80069aa:	3714      	adds	r7, #20
 80069ac:	46bd      	mov	sp, r7
 80069ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b2:	4770      	bx	lr
 80069b4:	2000000c 	.word	0x2000000c
	...

080069c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80069c0:	4b07      	ldr	r3, [pc, #28]	; (80069e0 <pxCurrentTCBConst2>)
 80069c2:	6819      	ldr	r1, [r3, #0]
 80069c4:	6808      	ldr	r0, [r1, #0]
 80069c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069ca:	f380 8809 	msr	PSP, r0
 80069ce:	f3bf 8f6f 	isb	sy
 80069d2:	f04f 0000 	mov.w	r0, #0
 80069d6:	f380 8811 	msr	BASEPRI, r0
 80069da:	4770      	bx	lr
 80069dc:	f3af 8000 	nop.w

080069e0 <pxCurrentTCBConst2>:
 80069e0:	20000750 	.word	0x20000750
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80069e4:	bf00      	nop
 80069e6:	bf00      	nop

080069e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80069e8:	4808      	ldr	r0, [pc, #32]	; (8006a0c <prvPortStartFirstTask+0x24>)
 80069ea:	6800      	ldr	r0, [r0, #0]
 80069ec:	6800      	ldr	r0, [r0, #0]
 80069ee:	f380 8808 	msr	MSP, r0
 80069f2:	f04f 0000 	mov.w	r0, #0
 80069f6:	f380 8814 	msr	CONTROL, r0
 80069fa:	b662      	cpsie	i
 80069fc:	b661      	cpsie	f
 80069fe:	f3bf 8f4f 	dsb	sy
 8006a02:	f3bf 8f6f 	isb	sy
 8006a06:	df00      	svc	0
 8006a08:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006a0a:	bf00      	nop
 8006a0c:	e000ed08 	.word	0xe000ed08

08006a10 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006a10:	b580      	push	{r7, lr}
 8006a12:	b086      	sub	sp, #24
 8006a14:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006a16:	4b46      	ldr	r3, [pc, #280]	; (8006b30 <xPortStartScheduler+0x120>)
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	4a46      	ldr	r2, [pc, #280]	; (8006b34 <xPortStartScheduler+0x124>)
 8006a1c:	4293      	cmp	r3, r2
 8006a1e:	d10a      	bne.n	8006a36 <xPortStartScheduler+0x26>
	__asm volatile
 8006a20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a24:	f383 8811 	msr	BASEPRI, r3
 8006a28:	f3bf 8f6f 	isb	sy
 8006a2c:	f3bf 8f4f 	dsb	sy
 8006a30:	613b      	str	r3, [r7, #16]
}
 8006a32:	bf00      	nop
 8006a34:	e7fe      	b.n	8006a34 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006a36:	4b3e      	ldr	r3, [pc, #248]	; (8006b30 <xPortStartScheduler+0x120>)
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	4a3f      	ldr	r2, [pc, #252]	; (8006b38 <xPortStartScheduler+0x128>)
 8006a3c:	4293      	cmp	r3, r2
 8006a3e:	d10a      	bne.n	8006a56 <xPortStartScheduler+0x46>
	__asm volatile
 8006a40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a44:	f383 8811 	msr	BASEPRI, r3
 8006a48:	f3bf 8f6f 	isb	sy
 8006a4c:	f3bf 8f4f 	dsb	sy
 8006a50:	60fb      	str	r3, [r7, #12]
}
 8006a52:	bf00      	nop
 8006a54:	e7fe      	b.n	8006a54 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006a56:	4b39      	ldr	r3, [pc, #228]	; (8006b3c <xPortStartScheduler+0x12c>)
 8006a58:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006a5a:	697b      	ldr	r3, [r7, #20]
 8006a5c:	781b      	ldrb	r3, [r3, #0]
 8006a5e:	b2db      	uxtb	r3, r3
 8006a60:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006a62:	697b      	ldr	r3, [r7, #20]
 8006a64:	22ff      	movs	r2, #255	; 0xff
 8006a66:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006a68:	697b      	ldr	r3, [r7, #20]
 8006a6a:	781b      	ldrb	r3, [r3, #0]
 8006a6c:	b2db      	uxtb	r3, r3
 8006a6e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006a70:	78fb      	ldrb	r3, [r7, #3]
 8006a72:	b2db      	uxtb	r3, r3
 8006a74:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006a78:	b2da      	uxtb	r2, r3
 8006a7a:	4b31      	ldr	r3, [pc, #196]	; (8006b40 <xPortStartScheduler+0x130>)
 8006a7c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006a7e:	4b31      	ldr	r3, [pc, #196]	; (8006b44 <xPortStartScheduler+0x134>)
 8006a80:	2207      	movs	r2, #7
 8006a82:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006a84:	e009      	b.n	8006a9a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8006a86:	4b2f      	ldr	r3, [pc, #188]	; (8006b44 <xPortStartScheduler+0x134>)
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	3b01      	subs	r3, #1
 8006a8c:	4a2d      	ldr	r2, [pc, #180]	; (8006b44 <xPortStartScheduler+0x134>)
 8006a8e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006a90:	78fb      	ldrb	r3, [r7, #3]
 8006a92:	b2db      	uxtb	r3, r3
 8006a94:	005b      	lsls	r3, r3, #1
 8006a96:	b2db      	uxtb	r3, r3
 8006a98:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006a9a:	78fb      	ldrb	r3, [r7, #3]
 8006a9c:	b2db      	uxtb	r3, r3
 8006a9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006aa2:	2b80      	cmp	r3, #128	; 0x80
 8006aa4:	d0ef      	beq.n	8006a86 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006aa6:	4b27      	ldr	r3, [pc, #156]	; (8006b44 <xPortStartScheduler+0x134>)
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	f1c3 0307 	rsb	r3, r3, #7
 8006aae:	2b04      	cmp	r3, #4
 8006ab0:	d00a      	beq.n	8006ac8 <xPortStartScheduler+0xb8>
	__asm volatile
 8006ab2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ab6:	f383 8811 	msr	BASEPRI, r3
 8006aba:	f3bf 8f6f 	isb	sy
 8006abe:	f3bf 8f4f 	dsb	sy
 8006ac2:	60bb      	str	r3, [r7, #8]
}
 8006ac4:	bf00      	nop
 8006ac6:	e7fe      	b.n	8006ac6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006ac8:	4b1e      	ldr	r3, [pc, #120]	; (8006b44 <xPortStartScheduler+0x134>)
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	021b      	lsls	r3, r3, #8
 8006ace:	4a1d      	ldr	r2, [pc, #116]	; (8006b44 <xPortStartScheduler+0x134>)
 8006ad0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006ad2:	4b1c      	ldr	r3, [pc, #112]	; (8006b44 <xPortStartScheduler+0x134>)
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006ada:	4a1a      	ldr	r2, [pc, #104]	; (8006b44 <xPortStartScheduler+0x134>)
 8006adc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	b2da      	uxtb	r2, r3
 8006ae2:	697b      	ldr	r3, [r7, #20]
 8006ae4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006ae6:	4b18      	ldr	r3, [pc, #96]	; (8006b48 <xPortStartScheduler+0x138>)
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	4a17      	ldr	r2, [pc, #92]	; (8006b48 <xPortStartScheduler+0x138>)
 8006aec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006af0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006af2:	4b15      	ldr	r3, [pc, #84]	; (8006b48 <xPortStartScheduler+0x138>)
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	4a14      	ldr	r2, [pc, #80]	; (8006b48 <xPortStartScheduler+0x138>)
 8006af8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006afc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006afe:	f000 f8dd 	bl	8006cbc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006b02:	4b12      	ldr	r3, [pc, #72]	; (8006b4c <xPortStartScheduler+0x13c>)
 8006b04:	2200      	movs	r2, #0
 8006b06:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006b08:	f000 f8fc 	bl	8006d04 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006b0c:	4b10      	ldr	r3, [pc, #64]	; (8006b50 <xPortStartScheduler+0x140>)
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	4a0f      	ldr	r2, [pc, #60]	; (8006b50 <xPortStartScheduler+0x140>)
 8006b12:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006b16:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006b18:	f7ff ff66 	bl	80069e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006b1c:	f7ff f852 	bl	8005bc4 <vTaskSwitchContext>
	prvTaskExitError();
 8006b20:	f7ff ff1e 	bl	8006960 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006b24:	2300      	movs	r3, #0
}
 8006b26:	4618      	mov	r0, r3
 8006b28:	3718      	adds	r7, #24
 8006b2a:	46bd      	mov	sp, r7
 8006b2c:	bd80      	pop	{r7, pc}
 8006b2e:	bf00      	nop
 8006b30:	e000ed00 	.word	0xe000ed00
 8006b34:	410fc271 	.word	0x410fc271
 8006b38:	410fc270 	.word	0x410fc270
 8006b3c:	e000e400 	.word	0xe000e400
 8006b40:	20000d7c 	.word	0x20000d7c
 8006b44:	20000d80 	.word	0x20000d80
 8006b48:	e000ed20 	.word	0xe000ed20
 8006b4c:	2000000c 	.word	0x2000000c
 8006b50:	e000ef34 	.word	0xe000ef34

08006b54 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006b54:	b480      	push	{r7}
 8006b56:	b083      	sub	sp, #12
 8006b58:	af00      	add	r7, sp, #0
	__asm volatile
 8006b5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b5e:	f383 8811 	msr	BASEPRI, r3
 8006b62:	f3bf 8f6f 	isb	sy
 8006b66:	f3bf 8f4f 	dsb	sy
 8006b6a:	607b      	str	r3, [r7, #4]
}
 8006b6c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006b6e:	4b0f      	ldr	r3, [pc, #60]	; (8006bac <vPortEnterCritical+0x58>)
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	3301      	adds	r3, #1
 8006b74:	4a0d      	ldr	r2, [pc, #52]	; (8006bac <vPortEnterCritical+0x58>)
 8006b76:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006b78:	4b0c      	ldr	r3, [pc, #48]	; (8006bac <vPortEnterCritical+0x58>)
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	2b01      	cmp	r3, #1
 8006b7e:	d10f      	bne.n	8006ba0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006b80:	4b0b      	ldr	r3, [pc, #44]	; (8006bb0 <vPortEnterCritical+0x5c>)
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	b2db      	uxtb	r3, r3
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d00a      	beq.n	8006ba0 <vPortEnterCritical+0x4c>
	__asm volatile
 8006b8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b8e:	f383 8811 	msr	BASEPRI, r3
 8006b92:	f3bf 8f6f 	isb	sy
 8006b96:	f3bf 8f4f 	dsb	sy
 8006b9a:	603b      	str	r3, [r7, #0]
}
 8006b9c:	bf00      	nop
 8006b9e:	e7fe      	b.n	8006b9e <vPortEnterCritical+0x4a>
	}
}
 8006ba0:	bf00      	nop
 8006ba2:	370c      	adds	r7, #12
 8006ba4:	46bd      	mov	sp, r7
 8006ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006baa:	4770      	bx	lr
 8006bac:	2000000c 	.word	0x2000000c
 8006bb0:	e000ed04 	.word	0xe000ed04

08006bb4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006bb4:	b480      	push	{r7}
 8006bb6:	b083      	sub	sp, #12
 8006bb8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006bba:	4b12      	ldr	r3, [pc, #72]	; (8006c04 <vPortExitCritical+0x50>)
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d10a      	bne.n	8006bd8 <vPortExitCritical+0x24>
	__asm volatile
 8006bc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bc6:	f383 8811 	msr	BASEPRI, r3
 8006bca:	f3bf 8f6f 	isb	sy
 8006bce:	f3bf 8f4f 	dsb	sy
 8006bd2:	607b      	str	r3, [r7, #4]
}
 8006bd4:	bf00      	nop
 8006bd6:	e7fe      	b.n	8006bd6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006bd8:	4b0a      	ldr	r3, [pc, #40]	; (8006c04 <vPortExitCritical+0x50>)
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	3b01      	subs	r3, #1
 8006bde:	4a09      	ldr	r2, [pc, #36]	; (8006c04 <vPortExitCritical+0x50>)
 8006be0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006be2:	4b08      	ldr	r3, [pc, #32]	; (8006c04 <vPortExitCritical+0x50>)
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d105      	bne.n	8006bf6 <vPortExitCritical+0x42>
 8006bea:	2300      	movs	r3, #0
 8006bec:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006bee:	683b      	ldr	r3, [r7, #0]
 8006bf0:	f383 8811 	msr	BASEPRI, r3
}
 8006bf4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006bf6:	bf00      	nop
 8006bf8:	370c      	adds	r7, #12
 8006bfa:	46bd      	mov	sp, r7
 8006bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c00:	4770      	bx	lr
 8006c02:	bf00      	nop
 8006c04:	2000000c 	.word	0x2000000c
	...

08006c10 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006c10:	f3ef 8009 	mrs	r0, PSP
 8006c14:	f3bf 8f6f 	isb	sy
 8006c18:	4b15      	ldr	r3, [pc, #84]	; (8006c70 <pxCurrentTCBConst>)
 8006c1a:	681a      	ldr	r2, [r3, #0]
 8006c1c:	f01e 0f10 	tst.w	lr, #16
 8006c20:	bf08      	it	eq
 8006c22:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006c26:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c2a:	6010      	str	r0, [r2, #0]
 8006c2c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006c30:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006c34:	f380 8811 	msr	BASEPRI, r0
 8006c38:	f3bf 8f4f 	dsb	sy
 8006c3c:	f3bf 8f6f 	isb	sy
 8006c40:	f7fe ffc0 	bl	8005bc4 <vTaskSwitchContext>
 8006c44:	f04f 0000 	mov.w	r0, #0
 8006c48:	f380 8811 	msr	BASEPRI, r0
 8006c4c:	bc09      	pop	{r0, r3}
 8006c4e:	6819      	ldr	r1, [r3, #0]
 8006c50:	6808      	ldr	r0, [r1, #0]
 8006c52:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c56:	f01e 0f10 	tst.w	lr, #16
 8006c5a:	bf08      	it	eq
 8006c5c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006c60:	f380 8809 	msr	PSP, r0
 8006c64:	f3bf 8f6f 	isb	sy
 8006c68:	4770      	bx	lr
 8006c6a:	bf00      	nop
 8006c6c:	f3af 8000 	nop.w

08006c70 <pxCurrentTCBConst>:
 8006c70:	20000750 	.word	0x20000750
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006c74:	bf00      	nop
 8006c76:	bf00      	nop

08006c78 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006c78:	b580      	push	{r7, lr}
 8006c7a:	b082      	sub	sp, #8
 8006c7c:	af00      	add	r7, sp, #0
	__asm volatile
 8006c7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c82:	f383 8811 	msr	BASEPRI, r3
 8006c86:	f3bf 8f6f 	isb	sy
 8006c8a:	f3bf 8f4f 	dsb	sy
 8006c8e:	607b      	str	r3, [r7, #4]
}
 8006c90:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006c92:	f7fe fedd 	bl	8005a50 <xTaskIncrementTick>
 8006c96:	4603      	mov	r3, r0
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d003      	beq.n	8006ca4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006c9c:	4b06      	ldr	r3, [pc, #24]	; (8006cb8 <xPortSysTickHandler+0x40>)
 8006c9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ca2:	601a      	str	r2, [r3, #0]
 8006ca4:	2300      	movs	r3, #0
 8006ca6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006ca8:	683b      	ldr	r3, [r7, #0]
 8006caa:	f383 8811 	msr	BASEPRI, r3
}
 8006cae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006cb0:	bf00      	nop
 8006cb2:	3708      	adds	r7, #8
 8006cb4:	46bd      	mov	sp, r7
 8006cb6:	bd80      	pop	{r7, pc}
 8006cb8:	e000ed04 	.word	0xe000ed04

08006cbc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006cbc:	b480      	push	{r7}
 8006cbe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006cc0:	4b0b      	ldr	r3, [pc, #44]	; (8006cf0 <vPortSetupTimerInterrupt+0x34>)
 8006cc2:	2200      	movs	r2, #0
 8006cc4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006cc6:	4b0b      	ldr	r3, [pc, #44]	; (8006cf4 <vPortSetupTimerInterrupt+0x38>)
 8006cc8:	2200      	movs	r2, #0
 8006cca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006ccc:	4b0a      	ldr	r3, [pc, #40]	; (8006cf8 <vPortSetupTimerInterrupt+0x3c>)
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	4a0a      	ldr	r2, [pc, #40]	; (8006cfc <vPortSetupTimerInterrupt+0x40>)
 8006cd2:	fba2 2303 	umull	r2, r3, r2, r3
 8006cd6:	099b      	lsrs	r3, r3, #6
 8006cd8:	4a09      	ldr	r2, [pc, #36]	; (8006d00 <vPortSetupTimerInterrupt+0x44>)
 8006cda:	3b01      	subs	r3, #1
 8006cdc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006cde:	4b04      	ldr	r3, [pc, #16]	; (8006cf0 <vPortSetupTimerInterrupt+0x34>)
 8006ce0:	2207      	movs	r2, #7
 8006ce2:	601a      	str	r2, [r3, #0]
}
 8006ce4:	bf00      	nop
 8006ce6:	46bd      	mov	sp, r7
 8006ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cec:	4770      	bx	lr
 8006cee:	bf00      	nop
 8006cf0:	e000e010 	.word	0xe000e010
 8006cf4:	e000e018 	.word	0xe000e018
 8006cf8:	20000000 	.word	0x20000000
 8006cfc:	10624dd3 	.word	0x10624dd3
 8006d00:	e000e014 	.word	0xe000e014

08006d04 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006d04:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006d14 <vPortEnableVFP+0x10>
 8006d08:	6801      	ldr	r1, [r0, #0]
 8006d0a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006d0e:	6001      	str	r1, [r0, #0]
 8006d10:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006d12:	bf00      	nop
 8006d14:	e000ed88 	.word	0xe000ed88

08006d18 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006d18:	b480      	push	{r7}
 8006d1a:	b085      	sub	sp, #20
 8006d1c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006d1e:	f3ef 8305 	mrs	r3, IPSR
 8006d22:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	2b0f      	cmp	r3, #15
 8006d28:	d914      	bls.n	8006d54 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006d2a:	4a17      	ldr	r2, [pc, #92]	; (8006d88 <vPortValidateInterruptPriority+0x70>)
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	4413      	add	r3, r2
 8006d30:	781b      	ldrb	r3, [r3, #0]
 8006d32:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006d34:	4b15      	ldr	r3, [pc, #84]	; (8006d8c <vPortValidateInterruptPriority+0x74>)
 8006d36:	781b      	ldrb	r3, [r3, #0]
 8006d38:	7afa      	ldrb	r2, [r7, #11]
 8006d3a:	429a      	cmp	r2, r3
 8006d3c:	d20a      	bcs.n	8006d54 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8006d3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d42:	f383 8811 	msr	BASEPRI, r3
 8006d46:	f3bf 8f6f 	isb	sy
 8006d4a:	f3bf 8f4f 	dsb	sy
 8006d4e:	607b      	str	r3, [r7, #4]
}
 8006d50:	bf00      	nop
 8006d52:	e7fe      	b.n	8006d52 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006d54:	4b0e      	ldr	r3, [pc, #56]	; (8006d90 <vPortValidateInterruptPriority+0x78>)
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006d5c:	4b0d      	ldr	r3, [pc, #52]	; (8006d94 <vPortValidateInterruptPriority+0x7c>)
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	429a      	cmp	r2, r3
 8006d62:	d90a      	bls.n	8006d7a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8006d64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d68:	f383 8811 	msr	BASEPRI, r3
 8006d6c:	f3bf 8f6f 	isb	sy
 8006d70:	f3bf 8f4f 	dsb	sy
 8006d74:	603b      	str	r3, [r7, #0]
}
 8006d76:	bf00      	nop
 8006d78:	e7fe      	b.n	8006d78 <vPortValidateInterruptPriority+0x60>
	}
 8006d7a:	bf00      	nop
 8006d7c:	3714      	adds	r7, #20
 8006d7e:	46bd      	mov	sp, r7
 8006d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d84:	4770      	bx	lr
 8006d86:	bf00      	nop
 8006d88:	e000e3f0 	.word	0xe000e3f0
 8006d8c:	20000d7c 	.word	0x20000d7c
 8006d90:	e000ed0c 	.word	0xe000ed0c
 8006d94:	20000d80 	.word	0x20000d80

08006d98 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006d98:	b580      	push	{r7, lr}
 8006d9a:	b08a      	sub	sp, #40	; 0x28
 8006d9c:	af00      	add	r7, sp, #0
 8006d9e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006da0:	2300      	movs	r3, #0
 8006da2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006da4:	f7fe fd98 	bl	80058d8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006da8:	4b5b      	ldr	r3, [pc, #364]	; (8006f18 <pvPortMalloc+0x180>)
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d101      	bne.n	8006db4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006db0:	f000 f920 	bl	8006ff4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006db4:	4b59      	ldr	r3, [pc, #356]	; (8006f1c <pvPortMalloc+0x184>)
 8006db6:	681a      	ldr	r2, [r3, #0]
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	4013      	ands	r3, r2
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	f040 8093 	bne.w	8006ee8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d01d      	beq.n	8006e04 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006dc8:	2208      	movs	r2, #8
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	4413      	add	r3, r2
 8006dce:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	f003 0307 	and.w	r3, r3, #7
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d014      	beq.n	8006e04 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	f023 0307 	bic.w	r3, r3, #7
 8006de0:	3308      	adds	r3, #8
 8006de2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	f003 0307 	and.w	r3, r3, #7
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d00a      	beq.n	8006e04 <pvPortMalloc+0x6c>
	__asm volatile
 8006dee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006df2:	f383 8811 	msr	BASEPRI, r3
 8006df6:	f3bf 8f6f 	isb	sy
 8006dfa:	f3bf 8f4f 	dsb	sy
 8006dfe:	617b      	str	r3, [r7, #20]
}
 8006e00:	bf00      	nop
 8006e02:	e7fe      	b.n	8006e02 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d06e      	beq.n	8006ee8 <pvPortMalloc+0x150>
 8006e0a:	4b45      	ldr	r3, [pc, #276]	; (8006f20 <pvPortMalloc+0x188>)
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	687a      	ldr	r2, [r7, #4]
 8006e10:	429a      	cmp	r2, r3
 8006e12:	d869      	bhi.n	8006ee8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006e14:	4b43      	ldr	r3, [pc, #268]	; (8006f24 <pvPortMalloc+0x18c>)
 8006e16:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006e18:	4b42      	ldr	r3, [pc, #264]	; (8006f24 <pvPortMalloc+0x18c>)
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006e1e:	e004      	b.n	8006e2a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e22:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e2c:	685b      	ldr	r3, [r3, #4]
 8006e2e:	687a      	ldr	r2, [r7, #4]
 8006e30:	429a      	cmp	r2, r3
 8006e32:	d903      	bls.n	8006e3c <pvPortMalloc+0xa4>
 8006e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d1f1      	bne.n	8006e20 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006e3c:	4b36      	ldr	r3, [pc, #216]	; (8006f18 <pvPortMalloc+0x180>)
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e42:	429a      	cmp	r2, r3
 8006e44:	d050      	beq.n	8006ee8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006e46:	6a3b      	ldr	r3, [r7, #32]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	2208      	movs	r2, #8
 8006e4c:	4413      	add	r3, r2
 8006e4e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e52:	681a      	ldr	r2, [r3, #0]
 8006e54:	6a3b      	ldr	r3, [r7, #32]
 8006e56:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e5a:	685a      	ldr	r2, [r3, #4]
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	1ad2      	subs	r2, r2, r3
 8006e60:	2308      	movs	r3, #8
 8006e62:	005b      	lsls	r3, r3, #1
 8006e64:	429a      	cmp	r2, r3
 8006e66:	d91f      	bls.n	8006ea8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006e68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	4413      	add	r3, r2
 8006e6e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006e70:	69bb      	ldr	r3, [r7, #24]
 8006e72:	f003 0307 	and.w	r3, r3, #7
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d00a      	beq.n	8006e90 <pvPortMalloc+0xf8>
	__asm volatile
 8006e7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e7e:	f383 8811 	msr	BASEPRI, r3
 8006e82:	f3bf 8f6f 	isb	sy
 8006e86:	f3bf 8f4f 	dsb	sy
 8006e8a:	613b      	str	r3, [r7, #16]
}
 8006e8c:	bf00      	nop
 8006e8e:	e7fe      	b.n	8006e8e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e92:	685a      	ldr	r2, [r3, #4]
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	1ad2      	subs	r2, r2, r3
 8006e98:	69bb      	ldr	r3, [r7, #24]
 8006e9a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e9e:	687a      	ldr	r2, [r7, #4]
 8006ea0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006ea2:	69b8      	ldr	r0, [r7, #24]
 8006ea4:	f000 f908 	bl	80070b8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006ea8:	4b1d      	ldr	r3, [pc, #116]	; (8006f20 <pvPortMalloc+0x188>)
 8006eaa:	681a      	ldr	r2, [r3, #0]
 8006eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eae:	685b      	ldr	r3, [r3, #4]
 8006eb0:	1ad3      	subs	r3, r2, r3
 8006eb2:	4a1b      	ldr	r2, [pc, #108]	; (8006f20 <pvPortMalloc+0x188>)
 8006eb4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006eb6:	4b1a      	ldr	r3, [pc, #104]	; (8006f20 <pvPortMalloc+0x188>)
 8006eb8:	681a      	ldr	r2, [r3, #0]
 8006eba:	4b1b      	ldr	r3, [pc, #108]	; (8006f28 <pvPortMalloc+0x190>)
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	429a      	cmp	r2, r3
 8006ec0:	d203      	bcs.n	8006eca <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006ec2:	4b17      	ldr	r3, [pc, #92]	; (8006f20 <pvPortMalloc+0x188>)
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	4a18      	ldr	r2, [pc, #96]	; (8006f28 <pvPortMalloc+0x190>)
 8006ec8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ecc:	685a      	ldr	r2, [r3, #4]
 8006ece:	4b13      	ldr	r3, [pc, #76]	; (8006f1c <pvPortMalloc+0x184>)
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	431a      	orrs	r2, r3
 8006ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ed6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eda:	2200      	movs	r2, #0
 8006edc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006ede:	4b13      	ldr	r3, [pc, #76]	; (8006f2c <pvPortMalloc+0x194>)
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	3301      	adds	r3, #1
 8006ee4:	4a11      	ldr	r2, [pc, #68]	; (8006f2c <pvPortMalloc+0x194>)
 8006ee6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006ee8:	f7fe fd04 	bl	80058f4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006eec:	69fb      	ldr	r3, [r7, #28]
 8006eee:	f003 0307 	and.w	r3, r3, #7
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d00a      	beq.n	8006f0c <pvPortMalloc+0x174>
	__asm volatile
 8006ef6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006efa:	f383 8811 	msr	BASEPRI, r3
 8006efe:	f3bf 8f6f 	isb	sy
 8006f02:	f3bf 8f4f 	dsb	sy
 8006f06:	60fb      	str	r3, [r7, #12]
}
 8006f08:	bf00      	nop
 8006f0a:	e7fe      	b.n	8006f0a <pvPortMalloc+0x172>
	return pvReturn;
 8006f0c:	69fb      	ldr	r3, [r7, #28]
}
 8006f0e:	4618      	mov	r0, r3
 8006f10:	3728      	adds	r7, #40	; 0x28
 8006f12:	46bd      	mov	sp, r7
 8006f14:	bd80      	pop	{r7, pc}
 8006f16:	bf00      	nop
 8006f18:	2000498c 	.word	0x2000498c
 8006f1c:	200049a0 	.word	0x200049a0
 8006f20:	20004990 	.word	0x20004990
 8006f24:	20004984 	.word	0x20004984
 8006f28:	20004994 	.word	0x20004994
 8006f2c:	20004998 	.word	0x20004998

08006f30 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006f30:	b580      	push	{r7, lr}
 8006f32:	b086      	sub	sp, #24
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d04d      	beq.n	8006fde <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006f42:	2308      	movs	r3, #8
 8006f44:	425b      	negs	r3, r3
 8006f46:	697a      	ldr	r2, [r7, #20]
 8006f48:	4413      	add	r3, r2
 8006f4a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006f4c:	697b      	ldr	r3, [r7, #20]
 8006f4e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006f50:	693b      	ldr	r3, [r7, #16]
 8006f52:	685a      	ldr	r2, [r3, #4]
 8006f54:	4b24      	ldr	r3, [pc, #144]	; (8006fe8 <vPortFree+0xb8>)
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	4013      	ands	r3, r2
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d10a      	bne.n	8006f74 <vPortFree+0x44>
	__asm volatile
 8006f5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f62:	f383 8811 	msr	BASEPRI, r3
 8006f66:	f3bf 8f6f 	isb	sy
 8006f6a:	f3bf 8f4f 	dsb	sy
 8006f6e:	60fb      	str	r3, [r7, #12]
}
 8006f70:	bf00      	nop
 8006f72:	e7fe      	b.n	8006f72 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006f74:	693b      	ldr	r3, [r7, #16]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d00a      	beq.n	8006f92 <vPortFree+0x62>
	__asm volatile
 8006f7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f80:	f383 8811 	msr	BASEPRI, r3
 8006f84:	f3bf 8f6f 	isb	sy
 8006f88:	f3bf 8f4f 	dsb	sy
 8006f8c:	60bb      	str	r3, [r7, #8]
}
 8006f8e:	bf00      	nop
 8006f90:	e7fe      	b.n	8006f90 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006f92:	693b      	ldr	r3, [r7, #16]
 8006f94:	685a      	ldr	r2, [r3, #4]
 8006f96:	4b14      	ldr	r3, [pc, #80]	; (8006fe8 <vPortFree+0xb8>)
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	4013      	ands	r3, r2
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d01e      	beq.n	8006fde <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006fa0:	693b      	ldr	r3, [r7, #16]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d11a      	bne.n	8006fde <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006fa8:	693b      	ldr	r3, [r7, #16]
 8006faa:	685a      	ldr	r2, [r3, #4]
 8006fac:	4b0e      	ldr	r3, [pc, #56]	; (8006fe8 <vPortFree+0xb8>)
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	43db      	mvns	r3, r3
 8006fb2:	401a      	ands	r2, r3
 8006fb4:	693b      	ldr	r3, [r7, #16]
 8006fb6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006fb8:	f7fe fc8e 	bl	80058d8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006fbc:	693b      	ldr	r3, [r7, #16]
 8006fbe:	685a      	ldr	r2, [r3, #4]
 8006fc0:	4b0a      	ldr	r3, [pc, #40]	; (8006fec <vPortFree+0xbc>)
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	4413      	add	r3, r2
 8006fc6:	4a09      	ldr	r2, [pc, #36]	; (8006fec <vPortFree+0xbc>)
 8006fc8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006fca:	6938      	ldr	r0, [r7, #16]
 8006fcc:	f000 f874 	bl	80070b8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006fd0:	4b07      	ldr	r3, [pc, #28]	; (8006ff0 <vPortFree+0xc0>)
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	3301      	adds	r3, #1
 8006fd6:	4a06      	ldr	r2, [pc, #24]	; (8006ff0 <vPortFree+0xc0>)
 8006fd8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006fda:	f7fe fc8b 	bl	80058f4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006fde:	bf00      	nop
 8006fe0:	3718      	adds	r7, #24
 8006fe2:	46bd      	mov	sp, r7
 8006fe4:	bd80      	pop	{r7, pc}
 8006fe6:	bf00      	nop
 8006fe8:	200049a0 	.word	0x200049a0
 8006fec:	20004990 	.word	0x20004990
 8006ff0:	2000499c 	.word	0x2000499c

08006ff4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006ff4:	b480      	push	{r7}
 8006ff6:	b085      	sub	sp, #20
 8006ff8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006ffa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8006ffe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007000:	4b27      	ldr	r3, [pc, #156]	; (80070a0 <prvHeapInit+0xac>)
 8007002:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	f003 0307 	and.w	r3, r3, #7
 800700a:	2b00      	cmp	r3, #0
 800700c:	d00c      	beq.n	8007028 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	3307      	adds	r3, #7
 8007012:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	f023 0307 	bic.w	r3, r3, #7
 800701a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800701c:	68ba      	ldr	r2, [r7, #8]
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	1ad3      	subs	r3, r2, r3
 8007022:	4a1f      	ldr	r2, [pc, #124]	; (80070a0 <prvHeapInit+0xac>)
 8007024:	4413      	add	r3, r2
 8007026:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800702c:	4a1d      	ldr	r2, [pc, #116]	; (80070a4 <prvHeapInit+0xb0>)
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007032:	4b1c      	ldr	r3, [pc, #112]	; (80070a4 <prvHeapInit+0xb0>)
 8007034:	2200      	movs	r2, #0
 8007036:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	68ba      	ldr	r2, [r7, #8]
 800703c:	4413      	add	r3, r2
 800703e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007040:	2208      	movs	r2, #8
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	1a9b      	subs	r3, r3, r2
 8007046:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	f023 0307 	bic.w	r3, r3, #7
 800704e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	4a15      	ldr	r2, [pc, #84]	; (80070a8 <prvHeapInit+0xb4>)
 8007054:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007056:	4b14      	ldr	r3, [pc, #80]	; (80070a8 <prvHeapInit+0xb4>)
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	2200      	movs	r2, #0
 800705c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800705e:	4b12      	ldr	r3, [pc, #72]	; (80070a8 <prvHeapInit+0xb4>)
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	2200      	movs	r2, #0
 8007064:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800706a:	683b      	ldr	r3, [r7, #0]
 800706c:	68fa      	ldr	r2, [r7, #12]
 800706e:	1ad2      	subs	r2, r2, r3
 8007070:	683b      	ldr	r3, [r7, #0]
 8007072:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007074:	4b0c      	ldr	r3, [pc, #48]	; (80070a8 <prvHeapInit+0xb4>)
 8007076:	681a      	ldr	r2, [r3, #0]
 8007078:	683b      	ldr	r3, [r7, #0]
 800707a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800707c:	683b      	ldr	r3, [r7, #0]
 800707e:	685b      	ldr	r3, [r3, #4]
 8007080:	4a0a      	ldr	r2, [pc, #40]	; (80070ac <prvHeapInit+0xb8>)
 8007082:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007084:	683b      	ldr	r3, [r7, #0]
 8007086:	685b      	ldr	r3, [r3, #4]
 8007088:	4a09      	ldr	r2, [pc, #36]	; (80070b0 <prvHeapInit+0xbc>)
 800708a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800708c:	4b09      	ldr	r3, [pc, #36]	; (80070b4 <prvHeapInit+0xc0>)
 800708e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007092:	601a      	str	r2, [r3, #0]
}
 8007094:	bf00      	nop
 8007096:	3714      	adds	r7, #20
 8007098:	46bd      	mov	sp, r7
 800709a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800709e:	4770      	bx	lr
 80070a0:	20000d84 	.word	0x20000d84
 80070a4:	20004984 	.word	0x20004984
 80070a8:	2000498c 	.word	0x2000498c
 80070ac:	20004994 	.word	0x20004994
 80070b0:	20004990 	.word	0x20004990
 80070b4:	200049a0 	.word	0x200049a0

080070b8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80070b8:	b480      	push	{r7}
 80070ba:	b085      	sub	sp, #20
 80070bc:	af00      	add	r7, sp, #0
 80070be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80070c0:	4b28      	ldr	r3, [pc, #160]	; (8007164 <prvInsertBlockIntoFreeList+0xac>)
 80070c2:	60fb      	str	r3, [r7, #12]
 80070c4:	e002      	b.n	80070cc <prvInsertBlockIntoFreeList+0x14>
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	60fb      	str	r3, [r7, #12]
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	687a      	ldr	r2, [r7, #4]
 80070d2:	429a      	cmp	r2, r3
 80070d4:	d8f7      	bhi.n	80070c6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	685b      	ldr	r3, [r3, #4]
 80070de:	68ba      	ldr	r2, [r7, #8]
 80070e0:	4413      	add	r3, r2
 80070e2:	687a      	ldr	r2, [r7, #4]
 80070e4:	429a      	cmp	r2, r3
 80070e6:	d108      	bne.n	80070fa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	685a      	ldr	r2, [r3, #4]
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	685b      	ldr	r3, [r3, #4]
 80070f0:	441a      	add	r2, r3
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	685b      	ldr	r3, [r3, #4]
 8007102:	68ba      	ldr	r2, [r7, #8]
 8007104:	441a      	add	r2, r3
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	429a      	cmp	r2, r3
 800710c:	d118      	bne.n	8007140 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	681a      	ldr	r2, [r3, #0]
 8007112:	4b15      	ldr	r3, [pc, #84]	; (8007168 <prvInsertBlockIntoFreeList+0xb0>)
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	429a      	cmp	r2, r3
 8007118:	d00d      	beq.n	8007136 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	685a      	ldr	r2, [r3, #4]
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	685b      	ldr	r3, [r3, #4]
 8007124:	441a      	add	r2, r3
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	681a      	ldr	r2, [r3, #0]
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	601a      	str	r2, [r3, #0]
 8007134:	e008      	b.n	8007148 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007136:	4b0c      	ldr	r3, [pc, #48]	; (8007168 <prvInsertBlockIntoFreeList+0xb0>)
 8007138:	681a      	ldr	r2, [r3, #0]
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	601a      	str	r2, [r3, #0]
 800713e:	e003      	b.n	8007148 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	681a      	ldr	r2, [r3, #0]
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007148:	68fa      	ldr	r2, [r7, #12]
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	429a      	cmp	r2, r3
 800714e:	d002      	beq.n	8007156 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	687a      	ldr	r2, [r7, #4]
 8007154:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007156:	bf00      	nop
 8007158:	3714      	adds	r7, #20
 800715a:	46bd      	mov	sp, r7
 800715c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007160:	4770      	bx	lr
 8007162:	bf00      	nop
 8007164:	20004984 	.word	0x20004984
 8007168:	2000498c 	.word	0x2000498c

0800716c <__errno>:
 800716c:	4b01      	ldr	r3, [pc, #4]	; (8007174 <__errno+0x8>)
 800716e:	6818      	ldr	r0, [r3, #0]
 8007170:	4770      	bx	lr
 8007172:	bf00      	nop
 8007174:	20000010 	.word	0x20000010

08007178 <__libc_init_array>:
 8007178:	b570      	push	{r4, r5, r6, lr}
 800717a:	4d0d      	ldr	r5, [pc, #52]	; (80071b0 <__libc_init_array+0x38>)
 800717c:	4c0d      	ldr	r4, [pc, #52]	; (80071b4 <__libc_init_array+0x3c>)
 800717e:	1b64      	subs	r4, r4, r5
 8007180:	10a4      	asrs	r4, r4, #2
 8007182:	2600      	movs	r6, #0
 8007184:	42a6      	cmp	r6, r4
 8007186:	d109      	bne.n	800719c <__libc_init_array+0x24>
 8007188:	4d0b      	ldr	r5, [pc, #44]	; (80071b8 <__libc_init_array+0x40>)
 800718a:	4c0c      	ldr	r4, [pc, #48]	; (80071bc <__libc_init_array+0x44>)
 800718c:	f000 fcf4 	bl	8007b78 <_init>
 8007190:	1b64      	subs	r4, r4, r5
 8007192:	10a4      	asrs	r4, r4, #2
 8007194:	2600      	movs	r6, #0
 8007196:	42a6      	cmp	r6, r4
 8007198:	d105      	bne.n	80071a6 <__libc_init_array+0x2e>
 800719a:	bd70      	pop	{r4, r5, r6, pc}
 800719c:	f855 3b04 	ldr.w	r3, [r5], #4
 80071a0:	4798      	blx	r3
 80071a2:	3601      	adds	r6, #1
 80071a4:	e7ee      	b.n	8007184 <__libc_init_array+0xc>
 80071a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80071aa:	4798      	blx	r3
 80071ac:	3601      	adds	r6, #1
 80071ae:	e7f2      	b.n	8007196 <__libc_init_array+0x1e>
 80071b0:	08007d34 	.word	0x08007d34
 80071b4:	08007d34 	.word	0x08007d34
 80071b8:	08007d34 	.word	0x08007d34
 80071bc:	08007d38 	.word	0x08007d38

080071c0 <memcpy>:
 80071c0:	440a      	add	r2, r1
 80071c2:	4291      	cmp	r1, r2
 80071c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80071c8:	d100      	bne.n	80071cc <memcpy+0xc>
 80071ca:	4770      	bx	lr
 80071cc:	b510      	push	{r4, lr}
 80071ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 80071d2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80071d6:	4291      	cmp	r1, r2
 80071d8:	d1f9      	bne.n	80071ce <memcpy+0xe>
 80071da:	bd10      	pop	{r4, pc}

080071dc <memset>:
 80071dc:	4402      	add	r2, r0
 80071de:	4603      	mov	r3, r0
 80071e0:	4293      	cmp	r3, r2
 80071e2:	d100      	bne.n	80071e6 <memset+0xa>
 80071e4:	4770      	bx	lr
 80071e6:	f803 1b01 	strb.w	r1, [r3], #1
 80071ea:	e7f9      	b.n	80071e0 <memset+0x4>

080071ec <_puts_r>:
 80071ec:	b570      	push	{r4, r5, r6, lr}
 80071ee:	460e      	mov	r6, r1
 80071f0:	4605      	mov	r5, r0
 80071f2:	b118      	cbz	r0, 80071fc <_puts_r+0x10>
 80071f4:	6983      	ldr	r3, [r0, #24]
 80071f6:	b90b      	cbnz	r3, 80071fc <_puts_r+0x10>
 80071f8:	f000 fa48 	bl	800768c <__sinit>
 80071fc:	69ab      	ldr	r3, [r5, #24]
 80071fe:	68ac      	ldr	r4, [r5, #8]
 8007200:	b913      	cbnz	r3, 8007208 <_puts_r+0x1c>
 8007202:	4628      	mov	r0, r5
 8007204:	f000 fa42 	bl	800768c <__sinit>
 8007208:	4b2c      	ldr	r3, [pc, #176]	; (80072bc <_puts_r+0xd0>)
 800720a:	429c      	cmp	r4, r3
 800720c:	d120      	bne.n	8007250 <_puts_r+0x64>
 800720e:	686c      	ldr	r4, [r5, #4]
 8007210:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007212:	07db      	lsls	r3, r3, #31
 8007214:	d405      	bmi.n	8007222 <_puts_r+0x36>
 8007216:	89a3      	ldrh	r3, [r4, #12]
 8007218:	0598      	lsls	r0, r3, #22
 800721a:	d402      	bmi.n	8007222 <_puts_r+0x36>
 800721c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800721e:	f000 fad3 	bl	80077c8 <__retarget_lock_acquire_recursive>
 8007222:	89a3      	ldrh	r3, [r4, #12]
 8007224:	0719      	lsls	r1, r3, #28
 8007226:	d51d      	bpl.n	8007264 <_puts_r+0x78>
 8007228:	6923      	ldr	r3, [r4, #16]
 800722a:	b1db      	cbz	r3, 8007264 <_puts_r+0x78>
 800722c:	3e01      	subs	r6, #1
 800722e:	68a3      	ldr	r3, [r4, #8]
 8007230:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007234:	3b01      	subs	r3, #1
 8007236:	60a3      	str	r3, [r4, #8]
 8007238:	bb39      	cbnz	r1, 800728a <_puts_r+0x9e>
 800723a:	2b00      	cmp	r3, #0
 800723c:	da38      	bge.n	80072b0 <_puts_r+0xc4>
 800723e:	4622      	mov	r2, r4
 8007240:	210a      	movs	r1, #10
 8007242:	4628      	mov	r0, r5
 8007244:	f000 f848 	bl	80072d8 <__swbuf_r>
 8007248:	3001      	adds	r0, #1
 800724a:	d011      	beq.n	8007270 <_puts_r+0x84>
 800724c:	250a      	movs	r5, #10
 800724e:	e011      	b.n	8007274 <_puts_r+0x88>
 8007250:	4b1b      	ldr	r3, [pc, #108]	; (80072c0 <_puts_r+0xd4>)
 8007252:	429c      	cmp	r4, r3
 8007254:	d101      	bne.n	800725a <_puts_r+0x6e>
 8007256:	68ac      	ldr	r4, [r5, #8]
 8007258:	e7da      	b.n	8007210 <_puts_r+0x24>
 800725a:	4b1a      	ldr	r3, [pc, #104]	; (80072c4 <_puts_r+0xd8>)
 800725c:	429c      	cmp	r4, r3
 800725e:	bf08      	it	eq
 8007260:	68ec      	ldreq	r4, [r5, #12]
 8007262:	e7d5      	b.n	8007210 <_puts_r+0x24>
 8007264:	4621      	mov	r1, r4
 8007266:	4628      	mov	r0, r5
 8007268:	f000 f888 	bl	800737c <__swsetup_r>
 800726c:	2800      	cmp	r0, #0
 800726e:	d0dd      	beq.n	800722c <_puts_r+0x40>
 8007270:	f04f 35ff 	mov.w	r5, #4294967295
 8007274:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007276:	07da      	lsls	r2, r3, #31
 8007278:	d405      	bmi.n	8007286 <_puts_r+0x9a>
 800727a:	89a3      	ldrh	r3, [r4, #12]
 800727c:	059b      	lsls	r3, r3, #22
 800727e:	d402      	bmi.n	8007286 <_puts_r+0x9a>
 8007280:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007282:	f000 faa2 	bl	80077ca <__retarget_lock_release_recursive>
 8007286:	4628      	mov	r0, r5
 8007288:	bd70      	pop	{r4, r5, r6, pc}
 800728a:	2b00      	cmp	r3, #0
 800728c:	da04      	bge.n	8007298 <_puts_r+0xac>
 800728e:	69a2      	ldr	r2, [r4, #24]
 8007290:	429a      	cmp	r2, r3
 8007292:	dc06      	bgt.n	80072a2 <_puts_r+0xb6>
 8007294:	290a      	cmp	r1, #10
 8007296:	d004      	beq.n	80072a2 <_puts_r+0xb6>
 8007298:	6823      	ldr	r3, [r4, #0]
 800729a:	1c5a      	adds	r2, r3, #1
 800729c:	6022      	str	r2, [r4, #0]
 800729e:	7019      	strb	r1, [r3, #0]
 80072a0:	e7c5      	b.n	800722e <_puts_r+0x42>
 80072a2:	4622      	mov	r2, r4
 80072a4:	4628      	mov	r0, r5
 80072a6:	f000 f817 	bl	80072d8 <__swbuf_r>
 80072aa:	3001      	adds	r0, #1
 80072ac:	d1bf      	bne.n	800722e <_puts_r+0x42>
 80072ae:	e7df      	b.n	8007270 <_puts_r+0x84>
 80072b0:	6823      	ldr	r3, [r4, #0]
 80072b2:	250a      	movs	r5, #10
 80072b4:	1c5a      	adds	r2, r3, #1
 80072b6:	6022      	str	r2, [r4, #0]
 80072b8:	701d      	strb	r5, [r3, #0]
 80072ba:	e7db      	b.n	8007274 <_puts_r+0x88>
 80072bc:	08007cec 	.word	0x08007cec
 80072c0:	08007d0c 	.word	0x08007d0c
 80072c4:	08007ccc 	.word	0x08007ccc

080072c8 <puts>:
 80072c8:	4b02      	ldr	r3, [pc, #8]	; (80072d4 <puts+0xc>)
 80072ca:	4601      	mov	r1, r0
 80072cc:	6818      	ldr	r0, [r3, #0]
 80072ce:	f7ff bf8d 	b.w	80071ec <_puts_r>
 80072d2:	bf00      	nop
 80072d4:	20000010 	.word	0x20000010

080072d8 <__swbuf_r>:
 80072d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072da:	460e      	mov	r6, r1
 80072dc:	4614      	mov	r4, r2
 80072de:	4605      	mov	r5, r0
 80072e0:	b118      	cbz	r0, 80072ea <__swbuf_r+0x12>
 80072e2:	6983      	ldr	r3, [r0, #24]
 80072e4:	b90b      	cbnz	r3, 80072ea <__swbuf_r+0x12>
 80072e6:	f000 f9d1 	bl	800768c <__sinit>
 80072ea:	4b21      	ldr	r3, [pc, #132]	; (8007370 <__swbuf_r+0x98>)
 80072ec:	429c      	cmp	r4, r3
 80072ee:	d12b      	bne.n	8007348 <__swbuf_r+0x70>
 80072f0:	686c      	ldr	r4, [r5, #4]
 80072f2:	69a3      	ldr	r3, [r4, #24]
 80072f4:	60a3      	str	r3, [r4, #8]
 80072f6:	89a3      	ldrh	r3, [r4, #12]
 80072f8:	071a      	lsls	r2, r3, #28
 80072fa:	d52f      	bpl.n	800735c <__swbuf_r+0x84>
 80072fc:	6923      	ldr	r3, [r4, #16]
 80072fe:	b36b      	cbz	r3, 800735c <__swbuf_r+0x84>
 8007300:	6923      	ldr	r3, [r4, #16]
 8007302:	6820      	ldr	r0, [r4, #0]
 8007304:	1ac0      	subs	r0, r0, r3
 8007306:	6963      	ldr	r3, [r4, #20]
 8007308:	b2f6      	uxtb	r6, r6
 800730a:	4283      	cmp	r3, r0
 800730c:	4637      	mov	r7, r6
 800730e:	dc04      	bgt.n	800731a <__swbuf_r+0x42>
 8007310:	4621      	mov	r1, r4
 8007312:	4628      	mov	r0, r5
 8007314:	f000 f926 	bl	8007564 <_fflush_r>
 8007318:	bb30      	cbnz	r0, 8007368 <__swbuf_r+0x90>
 800731a:	68a3      	ldr	r3, [r4, #8]
 800731c:	3b01      	subs	r3, #1
 800731e:	60a3      	str	r3, [r4, #8]
 8007320:	6823      	ldr	r3, [r4, #0]
 8007322:	1c5a      	adds	r2, r3, #1
 8007324:	6022      	str	r2, [r4, #0]
 8007326:	701e      	strb	r6, [r3, #0]
 8007328:	6963      	ldr	r3, [r4, #20]
 800732a:	3001      	adds	r0, #1
 800732c:	4283      	cmp	r3, r0
 800732e:	d004      	beq.n	800733a <__swbuf_r+0x62>
 8007330:	89a3      	ldrh	r3, [r4, #12]
 8007332:	07db      	lsls	r3, r3, #31
 8007334:	d506      	bpl.n	8007344 <__swbuf_r+0x6c>
 8007336:	2e0a      	cmp	r6, #10
 8007338:	d104      	bne.n	8007344 <__swbuf_r+0x6c>
 800733a:	4621      	mov	r1, r4
 800733c:	4628      	mov	r0, r5
 800733e:	f000 f911 	bl	8007564 <_fflush_r>
 8007342:	b988      	cbnz	r0, 8007368 <__swbuf_r+0x90>
 8007344:	4638      	mov	r0, r7
 8007346:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007348:	4b0a      	ldr	r3, [pc, #40]	; (8007374 <__swbuf_r+0x9c>)
 800734a:	429c      	cmp	r4, r3
 800734c:	d101      	bne.n	8007352 <__swbuf_r+0x7a>
 800734e:	68ac      	ldr	r4, [r5, #8]
 8007350:	e7cf      	b.n	80072f2 <__swbuf_r+0x1a>
 8007352:	4b09      	ldr	r3, [pc, #36]	; (8007378 <__swbuf_r+0xa0>)
 8007354:	429c      	cmp	r4, r3
 8007356:	bf08      	it	eq
 8007358:	68ec      	ldreq	r4, [r5, #12]
 800735a:	e7ca      	b.n	80072f2 <__swbuf_r+0x1a>
 800735c:	4621      	mov	r1, r4
 800735e:	4628      	mov	r0, r5
 8007360:	f000 f80c 	bl	800737c <__swsetup_r>
 8007364:	2800      	cmp	r0, #0
 8007366:	d0cb      	beq.n	8007300 <__swbuf_r+0x28>
 8007368:	f04f 37ff 	mov.w	r7, #4294967295
 800736c:	e7ea      	b.n	8007344 <__swbuf_r+0x6c>
 800736e:	bf00      	nop
 8007370:	08007cec 	.word	0x08007cec
 8007374:	08007d0c 	.word	0x08007d0c
 8007378:	08007ccc 	.word	0x08007ccc

0800737c <__swsetup_r>:
 800737c:	4b32      	ldr	r3, [pc, #200]	; (8007448 <__swsetup_r+0xcc>)
 800737e:	b570      	push	{r4, r5, r6, lr}
 8007380:	681d      	ldr	r5, [r3, #0]
 8007382:	4606      	mov	r6, r0
 8007384:	460c      	mov	r4, r1
 8007386:	b125      	cbz	r5, 8007392 <__swsetup_r+0x16>
 8007388:	69ab      	ldr	r3, [r5, #24]
 800738a:	b913      	cbnz	r3, 8007392 <__swsetup_r+0x16>
 800738c:	4628      	mov	r0, r5
 800738e:	f000 f97d 	bl	800768c <__sinit>
 8007392:	4b2e      	ldr	r3, [pc, #184]	; (800744c <__swsetup_r+0xd0>)
 8007394:	429c      	cmp	r4, r3
 8007396:	d10f      	bne.n	80073b8 <__swsetup_r+0x3c>
 8007398:	686c      	ldr	r4, [r5, #4]
 800739a:	89a3      	ldrh	r3, [r4, #12]
 800739c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80073a0:	0719      	lsls	r1, r3, #28
 80073a2:	d42c      	bmi.n	80073fe <__swsetup_r+0x82>
 80073a4:	06dd      	lsls	r5, r3, #27
 80073a6:	d411      	bmi.n	80073cc <__swsetup_r+0x50>
 80073a8:	2309      	movs	r3, #9
 80073aa:	6033      	str	r3, [r6, #0]
 80073ac:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80073b0:	81a3      	strh	r3, [r4, #12]
 80073b2:	f04f 30ff 	mov.w	r0, #4294967295
 80073b6:	e03e      	b.n	8007436 <__swsetup_r+0xba>
 80073b8:	4b25      	ldr	r3, [pc, #148]	; (8007450 <__swsetup_r+0xd4>)
 80073ba:	429c      	cmp	r4, r3
 80073bc:	d101      	bne.n	80073c2 <__swsetup_r+0x46>
 80073be:	68ac      	ldr	r4, [r5, #8]
 80073c0:	e7eb      	b.n	800739a <__swsetup_r+0x1e>
 80073c2:	4b24      	ldr	r3, [pc, #144]	; (8007454 <__swsetup_r+0xd8>)
 80073c4:	429c      	cmp	r4, r3
 80073c6:	bf08      	it	eq
 80073c8:	68ec      	ldreq	r4, [r5, #12]
 80073ca:	e7e6      	b.n	800739a <__swsetup_r+0x1e>
 80073cc:	0758      	lsls	r0, r3, #29
 80073ce:	d512      	bpl.n	80073f6 <__swsetup_r+0x7a>
 80073d0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80073d2:	b141      	cbz	r1, 80073e6 <__swsetup_r+0x6a>
 80073d4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80073d8:	4299      	cmp	r1, r3
 80073da:	d002      	beq.n	80073e2 <__swsetup_r+0x66>
 80073dc:	4630      	mov	r0, r6
 80073de:	f000 fa59 	bl	8007894 <_free_r>
 80073e2:	2300      	movs	r3, #0
 80073e4:	6363      	str	r3, [r4, #52]	; 0x34
 80073e6:	89a3      	ldrh	r3, [r4, #12]
 80073e8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80073ec:	81a3      	strh	r3, [r4, #12]
 80073ee:	2300      	movs	r3, #0
 80073f0:	6063      	str	r3, [r4, #4]
 80073f2:	6923      	ldr	r3, [r4, #16]
 80073f4:	6023      	str	r3, [r4, #0]
 80073f6:	89a3      	ldrh	r3, [r4, #12]
 80073f8:	f043 0308 	orr.w	r3, r3, #8
 80073fc:	81a3      	strh	r3, [r4, #12]
 80073fe:	6923      	ldr	r3, [r4, #16]
 8007400:	b94b      	cbnz	r3, 8007416 <__swsetup_r+0x9a>
 8007402:	89a3      	ldrh	r3, [r4, #12]
 8007404:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007408:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800740c:	d003      	beq.n	8007416 <__swsetup_r+0x9a>
 800740e:	4621      	mov	r1, r4
 8007410:	4630      	mov	r0, r6
 8007412:	f000 f9ff 	bl	8007814 <__smakebuf_r>
 8007416:	89a0      	ldrh	r0, [r4, #12]
 8007418:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800741c:	f010 0301 	ands.w	r3, r0, #1
 8007420:	d00a      	beq.n	8007438 <__swsetup_r+0xbc>
 8007422:	2300      	movs	r3, #0
 8007424:	60a3      	str	r3, [r4, #8]
 8007426:	6963      	ldr	r3, [r4, #20]
 8007428:	425b      	negs	r3, r3
 800742a:	61a3      	str	r3, [r4, #24]
 800742c:	6923      	ldr	r3, [r4, #16]
 800742e:	b943      	cbnz	r3, 8007442 <__swsetup_r+0xc6>
 8007430:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007434:	d1ba      	bne.n	80073ac <__swsetup_r+0x30>
 8007436:	bd70      	pop	{r4, r5, r6, pc}
 8007438:	0781      	lsls	r1, r0, #30
 800743a:	bf58      	it	pl
 800743c:	6963      	ldrpl	r3, [r4, #20]
 800743e:	60a3      	str	r3, [r4, #8]
 8007440:	e7f4      	b.n	800742c <__swsetup_r+0xb0>
 8007442:	2000      	movs	r0, #0
 8007444:	e7f7      	b.n	8007436 <__swsetup_r+0xba>
 8007446:	bf00      	nop
 8007448:	20000010 	.word	0x20000010
 800744c:	08007cec 	.word	0x08007cec
 8007450:	08007d0c 	.word	0x08007d0c
 8007454:	08007ccc 	.word	0x08007ccc

08007458 <__sflush_r>:
 8007458:	898a      	ldrh	r2, [r1, #12]
 800745a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800745e:	4605      	mov	r5, r0
 8007460:	0710      	lsls	r0, r2, #28
 8007462:	460c      	mov	r4, r1
 8007464:	d458      	bmi.n	8007518 <__sflush_r+0xc0>
 8007466:	684b      	ldr	r3, [r1, #4]
 8007468:	2b00      	cmp	r3, #0
 800746a:	dc05      	bgt.n	8007478 <__sflush_r+0x20>
 800746c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800746e:	2b00      	cmp	r3, #0
 8007470:	dc02      	bgt.n	8007478 <__sflush_r+0x20>
 8007472:	2000      	movs	r0, #0
 8007474:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007478:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800747a:	2e00      	cmp	r6, #0
 800747c:	d0f9      	beq.n	8007472 <__sflush_r+0x1a>
 800747e:	2300      	movs	r3, #0
 8007480:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007484:	682f      	ldr	r7, [r5, #0]
 8007486:	602b      	str	r3, [r5, #0]
 8007488:	d032      	beq.n	80074f0 <__sflush_r+0x98>
 800748a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800748c:	89a3      	ldrh	r3, [r4, #12]
 800748e:	075a      	lsls	r2, r3, #29
 8007490:	d505      	bpl.n	800749e <__sflush_r+0x46>
 8007492:	6863      	ldr	r3, [r4, #4]
 8007494:	1ac0      	subs	r0, r0, r3
 8007496:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007498:	b10b      	cbz	r3, 800749e <__sflush_r+0x46>
 800749a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800749c:	1ac0      	subs	r0, r0, r3
 800749e:	2300      	movs	r3, #0
 80074a0:	4602      	mov	r2, r0
 80074a2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80074a4:	6a21      	ldr	r1, [r4, #32]
 80074a6:	4628      	mov	r0, r5
 80074a8:	47b0      	blx	r6
 80074aa:	1c43      	adds	r3, r0, #1
 80074ac:	89a3      	ldrh	r3, [r4, #12]
 80074ae:	d106      	bne.n	80074be <__sflush_r+0x66>
 80074b0:	6829      	ldr	r1, [r5, #0]
 80074b2:	291d      	cmp	r1, #29
 80074b4:	d82c      	bhi.n	8007510 <__sflush_r+0xb8>
 80074b6:	4a2a      	ldr	r2, [pc, #168]	; (8007560 <__sflush_r+0x108>)
 80074b8:	40ca      	lsrs	r2, r1
 80074ba:	07d6      	lsls	r6, r2, #31
 80074bc:	d528      	bpl.n	8007510 <__sflush_r+0xb8>
 80074be:	2200      	movs	r2, #0
 80074c0:	6062      	str	r2, [r4, #4]
 80074c2:	04d9      	lsls	r1, r3, #19
 80074c4:	6922      	ldr	r2, [r4, #16]
 80074c6:	6022      	str	r2, [r4, #0]
 80074c8:	d504      	bpl.n	80074d4 <__sflush_r+0x7c>
 80074ca:	1c42      	adds	r2, r0, #1
 80074cc:	d101      	bne.n	80074d2 <__sflush_r+0x7a>
 80074ce:	682b      	ldr	r3, [r5, #0]
 80074d0:	b903      	cbnz	r3, 80074d4 <__sflush_r+0x7c>
 80074d2:	6560      	str	r0, [r4, #84]	; 0x54
 80074d4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80074d6:	602f      	str	r7, [r5, #0]
 80074d8:	2900      	cmp	r1, #0
 80074da:	d0ca      	beq.n	8007472 <__sflush_r+0x1a>
 80074dc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80074e0:	4299      	cmp	r1, r3
 80074e2:	d002      	beq.n	80074ea <__sflush_r+0x92>
 80074e4:	4628      	mov	r0, r5
 80074e6:	f000 f9d5 	bl	8007894 <_free_r>
 80074ea:	2000      	movs	r0, #0
 80074ec:	6360      	str	r0, [r4, #52]	; 0x34
 80074ee:	e7c1      	b.n	8007474 <__sflush_r+0x1c>
 80074f0:	6a21      	ldr	r1, [r4, #32]
 80074f2:	2301      	movs	r3, #1
 80074f4:	4628      	mov	r0, r5
 80074f6:	47b0      	blx	r6
 80074f8:	1c41      	adds	r1, r0, #1
 80074fa:	d1c7      	bne.n	800748c <__sflush_r+0x34>
 80074fc:	682b      	ldr	r3, [r5, #0]
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d0c4      	beq.n	800748c <__sflush_r+0x34>
 8007502:	2b1d      	cmp	r3, #29
 8007504:	d001      	beq.n	800750a <__sflush_r+0xb2>
 8007506:	2b16      	cmp	r3, #22
 8007508:	d101      	bne.n	800750e <__sflush_r+0xb6>
 800750a:	602f      	str	r7, [r5, #0]
 800750c:	e7b1      	b.n	8007472 <__sflush_r+0x1a>
 800750e:	89a3      	ldrh	r3, [r4, #12]
 8007510:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007514:	81a3      	strh	r3, [r4, #12]
 8007516:	e7ad      	b.n	8007474 <__sflush_r+0x1c>
 8007518:	690f      	ldr	r7, [r1, #16]
 800751a:	2f00      	cmp	r7, #0
 800751c:	d0a9      	beq.n	8007472 <__sflush_r+0x1a>
 800751e:	0793      	lsls	r3, r2, #30
 8007520:	680e      	ldr	r6, [r1, #0]
 8007522:	bf08      	it	eq
 8007524:	694b      	ldreq	r3, [r1, #20]
 8007526:	600f      	str	r7, [r1, #0]
 8007528:	bf18      	it	ne
 800752a:	2300      	movne	r3, #0
 800752c:	eba6 0807 	sub.w	r8, r6, r7
 8007530:	608b      	str	r3, [r1, #8]
 8007532:	f1b8 0f00 	cmp.w	r8, #0
 8007536:	dd9c      	ble.n	8007472 <__sflush_r+0x1a>
 8007538:	6a21      	ldr	r1, [r4, #32]
 800753a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800753c:	4643      	mov	r3, r8
 800753e:	463a      	mov	r2, r7
 8007540:	4628      	mov	r0, r5
 8007542:	47b0      	blx	r6
 8007544:	2800      	cmp	r0, #0
 8007546:	dc06      	bgt.n	8007556 <__sflush_r+0xfe>
 8007548:	89a3      	ldrh	r3, [r4, #12]
 800754a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800754e:	81a3      	strh	r3, [r4, #12]
 8007550:	f04f 30ff 	mov.w	r0, #4294967295
 8007554:	e78e      	b.n	8007474 <__sflush_r+0x1c>
 8007556:	4407      	add	r7, r0
 8007558:	eba8 0800 	sub.w	r8, r8, r0
 800755c:	e7e9      	b.n	8007532 <__sflush_r+0xda>
 800755e:	bf00      	nop
 8007560:	20400001 	.word	0x20400001

08007564 <_fflush_r>:
 8007564:	b538      	push	{r3, r4, r5, lr}
 8007566:	690b      	ldr	r3, [r1, #16]
 8007568:	4605      	mov	r5, r0
 800756a:	460c      	mov	r4, r1
 800756c:	b913      	cbnz	r3, 8007574 <_fflush_r+0x10>
 800756e:	2500      	movs	r5, #0
 8007570:	4628      	mov	r0, r5
 8007572:	bd38      	pop	{r3, r4, r5, pc}
 8007574:	b118      	cbz	r0, 800757e <_fflush_r+0x1a>
 8007576:	6983      	ldr	r3, [r0, #24]
 8007578:	b90b      	cbnz	r3, 800757e <_fflush_r+0x1a>
 800757a:	f000 f887 	bl	800768c <__sinit>
 800757e:	4b14      	ldr	r3, [pc, #80]	; (80075d0 <_fflush_r+0x6c>)
 8007580:	429c      	cmp	r4, r3
 8007582:	d11b      	bne.n	80075bc <_fflush_r+0x58>
 8007584:	686c      	ldr	r4, [r5, #4]
 8007586:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800758a:	2b00      	cmp	r3, #0
 800758c:	d0ef      	beq.n	800756e <_fflush_r+0xa>
 800758e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007590:	07d0      	lsls	r0, r2, #31
 8007592:	d404      	bmi.n	800759e <_fflush_r+0x3a>
 8007594:	0599      	lsls	r1, r3, #22
 8007596:	d402      	bmi.n	800759e <_fflush_r+0x3a>
 8007598:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800759a:	f000 f915 	bl	80077c8 <__retarget_lock_acquire_recursive>
 800759e:	4628      	mov	r0, r5
 80075a0:	4621      	mov	r1, r4
 80075a2:	f7ff ff59 	bl	8007458 <__sflush_r>
 80075a6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80075a8:	07da      	lsls	r2, r3, #31
 80075aa:	4605      	mov	r5, r0
 80075ac:	d4e0      	bmi.n	8007570 <_fflush_r+0xc>
 80075ae:	89a3      	ldrh	r3, [r4, #12]
 80075b0:	059b      	lsls	r3, r3, #22
 80075b2:	d4dd      	bmi.n	8007570 <_fflush_r+0xc>
 80075b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80075b6:	f000 f908 	bl	80077ca <__retarget_lock_release_recursive>
 80075ba:	e7d9      	b.n	8007570 <_fflush_r+0xc>
 80075bc:	4b05      	ldr	r3, [pc, #20]	; (80075d4 <_fflush_r+0x70>)
 80075be:	429c      	cmp	r4, r3
 80075c0:	d101      	bne.n	80075c6 <_fflush_r+0x62>
 80075c2:	68ac      	ldr	r4, [r5, #8]
 80075c4:	e7df      	b.n	8007586 <_fflush_r+0x22>
 80075c6:	4b04      	ldr	r3, [pc, #16]	; (80075d8 <_fflush_r+0x74>)
 80075c8:	429c      	cmp	r4, r3
 80075ca:	bf08      	it	eq
 80075cc:	68ec      	ldreq	r4, [r5, #12]
 80075ce:	e7da      	b.n	8007586 <_fflush_r+0x22>
 80075d0:	08007cec 	.word	0x08007cec
 80075d4:	08007d0c 	.word	0x08007d0c
 80075d8:	08007ccc 	.word	0x08007ccc

080075dc <std>:
 80075dc:	2300      	movs	r3, #0
 80075de:	b510      	push	{r4, lr}
 80075e0:	4604      	mov	r4, r0
 80075e2:	e9c0 3300 	strd	r3, r3, [r0]
 80075e6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80075ea:	6083      	str	r3, [r0, #8]
 80075ec:	8181      	strh	r1, [r0, #12]
 80075ee:	6643      	str	r3, [r0, #100]	; 0x64
 80075f0:	81c2      	strh	r2, [r0, #14]
 80075f2:	6183      	str	r3, [r0, #24]
 80075f4:	4619      	mov	r1, r3
 80075f6:	2208      	movs	r2, #8
 80075f8:	305c      	adds	r0, #92	; 0x5c
 80075fa:	f7ff fdef 	bl	80071dc <memset>
 80075fe:	4b05      	ldr	r3, [pc, #20]	; (8007614 <std+0x38>)
 8007600:	6263      	str	r3, [r4, #36]	; 0x24
 8007602:	4b05      	ldr	r3, [pc, #20]	; (8007618 <std+0x3c>)
 8007604:	62a3      	str	r3, [r4, #40]	; 0x28
 8007606:	4b05      	ldr	r3, [pc, #20]	; (800761c <std+0x40>)
 8007608:	62e3      	str	r3, [r4, #44]	; 0x2c
 800760a:	4b05      	ldr	r3, [pc, #20]	; (8007620 <std+0x44>)
 800760c:	6224      	str	r4, [r4, #32]
 800760e:	6323      	str	r3, [r4, #48]	; 0x30
 8007610:	bd10      	pop	{r4, pc}
 8007612:	bf00      	nop
 8007614:	08007a09 	.word	0x08007a09
 8007618:	08007a2b 	.word	0x08007a2b
 800761c:	08007a63 	.word	0x08007a63
 8007620:	08007a87 	.word	0x08007a87

08007624 <_cleanup_r>:
 8007624:	4901      	ldr	r1, [pc, #4]	; (800762c <_cleanup_r+0x8>)
 8007626:	f000 b8af 	b.w	8007788 <_fwalk_reent>
 800762a:	bf00      	nop
 800762c:	08007565 	.word	0x08007565

08007630 <__sfmoreglue>:
 8007630:	b570      	push	{r4, r5, r6, lr}
 8007632:	1e4a      	subs	r2, r1, #1
 8007634:	2568      	movs	r5, #104	; 0x68
 8007636:	4355      	muls	r5, r2
 8007638:	460e      	mov	r6, r1
 800763a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800763e:	f000 f979 	bl	8007934 <_malloc_r>
 8007642:	4604      	mov	r4, r0
 8007644:	b140      	cbz	r0, 8007658 <__sfmoreglue+0x28>
 8007646:	2100      	movs	r1, #0
 8007648:	e9c0 1600 	strd	r1, r6, [r0]
 800764c:	300c      	adds	r0, #12
 800764e:	60a0      	str	r0, [r4, #8]
 8007650:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007654:	f7ff fdc2 	bl	80071dc <memset>
 8007658:	4620      	mov	r0, r4
 800765a:	bd70      	pop	{r4, r5, r6, pc}

0800765c <__sfp_lock_acquire>:
 800765c:	4801      	ldr	r0, [pc, #4]	; (8007664 <__sfp_lock_acquire+0x8>)
 800765e:	f000 b8b3 	b.w	80077c8 <__retarget_lock_acquire_recursive>
 8007662:	bf00      	nop
 8007664:	20004c28 	.word	0x20004c28

08007668 <__sfp_lock_release>:
 8007668:	4801      	ldr	r0, [pc, #4]	; (8007670 <__sfp_lock_release+0x8>)
 800766a:	f000 b8ae 	b.w	80077ca <__retarget_lock_release_recursive>
 800766e:	bf00      	nop
 8007670:	20004c28 	.word	0x20004c28

08007674 <__sinit_lock_acquire>:
 8007674:	4801      	ldr	r0, [pc, #4]	; (800767c <__sinit_lock_acquire+0x8>)
 8007676:	f000 b8a7 	b.w	80077c8 <__retarget_lock_acquire_recursive>
 800767a:	bf00      	nop
 800767c:	20004c23 	.word	0x20004c23

08007680 <__sinit_lock_release>:
 8007680:	4801      	ldr	r0, [pc, #4]	; (8007688 <__sinit_lock_release+0x8>)
 8007682:	f000 b8a2 	b.w	80077ca <__retarget_lock_release_recursive>
 8007686:	bf00      	nop
 8007688:	20004c23 	.word	0x20004c23

0800768c <__sinit>:
 800768c:	b510      	push	{r4, lr}
 800768e:	4604      	mov	r4, r0
 8007690:	f7ff fff0 	bl	8007674 <__sinit_lock_acquire>
 8007694:	69a3      	ldr	r3, [r4, #24]
 8007696:	b11b      	cbz	r3, 80076a0 <__sinit+0x14>
 8007698:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800769c:	f7ff bff0 	b.w	8007680 <__sinit_lock_release>
 80076a0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80076a4:	6523      	str	r3, [r4, #80]	; 0x50
 80076a6:	4b13      	ldr	r3, [pc, #76]	; (80076f4 <__sinit+0x68>)
 80076a8:	4a13      	ldr	r2, [pc, #76]	; (80076f8 <__sinit+0x6c>)
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	62a2      	str	r2, [r4, #40]	; 0x28
 80076ae:	42a3      	cmp	r3, r4
 80076b0:	bf04      	itt	eq
 80076b2:	2301      	moveq	r3, #1
 80076b4:	61a3      	streq	r3, [r4, #24]
 80076b6:	4620      	mov	r0, r4
 80076b8:	f000 f820 	bl	80076fc <__sfp>
 80076bc:	6060      	str	r0, [r4, #4]
 80076be:	4620      	mov	r0, r4
 80076c0:	f000 f81c 	bl	80076fc <__sfp>
 80076c4:	60a0      	str	r0, [r4, #8]
 80076c6:	4620      	mov	r0, r4
 80076c8:	f000 f818 	bl	80076fc <__sfp>
 80076cc:	2200      	movs	r2, #0
 80076ce:	60e0      	str	r0, [r4, #12]
 80076d0:	2104      	movs	r1, #4
 80076d2:	6860      	ldr	r0, [r4, #4]
 80076d4:	f7ff ff82 	bl	80075dc <std>
 80076d8:	68a0      	ldr	r0, [r4, #8]
 80076da:	2201      	movs	r2, #1
 80076dc:	2109      	movs	r1, #9
 80076de:	f7ff ff7d 	bl	80075dc <std>
 80076e2:	68e0      	ldr	r0, [r4, #12]
 80076e4:	2202      	movs	r2, #2
 80076e6:	2112      	movs	r1, #18
 80076e8:	f7ff ff78 	bl	80075dc <std>
 80076ec:	2301      	movs	r3, #1
 80076ee:	61a3      	str	r3, [r4, #24]
 80076f0:	e7d2      	b.n	8007698 <__sinit+0xc>
 80076f2:	bf00      	nop
 80076f4:	08007cc8 	.word	0x08007cc8
 80076f8:	08007625 	.word	0x08007625

080076fc <__sfp>:
 80076fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076fe:	4607      	mov	r7, r0
 8007700:	f7ff ffac 	bl	800765c <__sfp_lock_acquire>
 8007704:	4b1e      	ldr	r3, [pc, #120]	; (8007780 <__sfp+0x84>)
 8007706:	681e      	ldr	r6, [r3, #0]
 8007708:	69b3      	ldr	r3, [r6, #24]
 800770a:	b913      	cbnz	r3, 8007712 <__sfp+0x16>
 800770c:	4630      	mov	r0, r6
 800770e:	f7ff ffbd 	bl	800768c <__sinit>
 8007712:	3648      	adds	r6, #72	; 0x48
 8007714:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007718:	3b01      	subs	r3, #1
 800771a:	d503      	bpl.n	8007724 <__sfp+0x28>
 800771c:	6833      	ldr	r3, [r6, #0]
 800771e:	b30b      	cbz	r3, 8007764 <__sfp+0x68>
 8007720:	6836      	ldr	r6, [r6, #0]
 8007722:	e7f7      	b.n	8007714 <__sfp+0x18>
 8007724:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007728:	b9d5      	cbnz	r5, 8007760 <__sfp+0x64>
 800772a:	4b16      	ldr	r3, [pc, #88]	; (8007784 <__sfp+0x88>)
 800772c:	60e3      	str	r3, [r4, #12]
 800772e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007732:	6665      	str	r5, [r4, #100]	; 0x64
 8007734:	f000 f847 	bl	80077c6 <__retarget_lock_init_recursive>
 8007738:	f7ff ff96 	bl	8007668 <__sfp_lock_release>
 800773c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007740:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007744:	6025      	str	r5, [r4, #0]
 8007746:	61a5      	str	r5, [r4, #24]
 8007748:	2208      	movs	r2, #8
 800774a:	4629      	mov	r1, r5
 800774c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007750:	f7ff fd44 	bl	80071dc <memset>
 8007754:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007758:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800775c:	4620      	mov	r0, r4
 800775e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007760:	3468      	adds	r4, #104	; 0x68
 8007762:	e7d9      	b.n	8007718 <__sfp+0x1c>
 8007764:	2104      	movs	r1, #4
 8007766:	4638      	mov	r0, r7
 8007768:	f7ff ff62 	bl	8007630 <__sfmoreglue>
 800776c:	4604      	mov	r4, r0
 800776e:	6030      	str	r0, [r6, #0]
 8007770:	2800      	cmp	r0, #0
 8007772:	d1d5      	bne.n	8007720 <__sfp+0x24>
 8007774:	f7ff ff78 	bl	8007668 <__sfp_lock_release>
 8007778:	230c      	movs	r3, #12
 800777a:	603b      	str	r3, [r7, #0]
 800777c:	e7ee      	b.n	800775c <__sfp+0x60>
 800777e:	bf00      	nop
 8007780:	08007cc8 	.word	0x08007cc8
 8007784:	ffff0001 	.word	0xffff0001

08007788 <_fwalk_reent>:
 8007788:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800778c:	4606      	mov	r6, r0
 800778e:	4688      	mov	r8, r1
 8007790:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007794:	2700      	movs	r7, #0
 8007796:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800779a:	f1b9 0901 	subs.w	r9, r9, #1
 800779e:	d505      	bpl.n	80077ac <_fwalk_reent+0x24>
 80077a0:	6824      	ldr	r4, [r4, #0]
 80077a2:	2c00      	cmp	r4, #0
 80077a4:	d1f7      	bne.n	8007796 <_fwalk_reent+0xe>
 80077a6:	4638      	mov	r0, r7
 80077a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80077ac:	89ab      	ldrh	r3, [r5, #12]
 80077ae:	2b01      	cmp	r3, #1
 80077b0:	d907      	bls.n	80077c2 <_fwalk_reent+0x3a>
 80077b2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80077b6:	3301      	adds	r3, #1
 80077b8:	d003      	beq.n	80077c2 <_fwalk_reent+0x3a>
 80077ba:	4629      	mov	r1, r5
 80077bc:	4630      	mov	r0, r6
 80077be:	47c0      	blx	r8
 80077c0:	4307      	orrs	r7, r0
 80077c2:	3568      	adds	r5, #104	; 0x68
 80077c4:	e7e9      	b.n	800779a <_fwalk_reent+0x12>

080077c6 <__retarget_lock_init_recursive>:
 80077c6:	4770      	bx	lr

080077c8 <__retarget_lock_acquire_recursive>:
 80077c8:	4770      	bx	lr

080077ca <__retarget_lock_release_recursive>:
 80077ca:	4770      	bx	lr

080077cc <__swhatbuf_r>:
 80077cc:	b570      	push	{r4, r5, r6, lr}
 80077ce:	460e      	mov	r6, r1
 80077d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80077d4:	2900      	cmp	r1, #0
 80077d6:	b096      	sub	sp, #88	; 0x58
 80077d8:	4614      	mov	r4, r2
 80077da:	461d      	mov	r5, r3
 80077dc:	da07      	bge.n	80077ee <__swhatbuf_r+0x22>
 80077de:	2300      	movs	r3, #0
 80077e0:	602b      	str	r3, [r5, #0]
 80077e2:	89b3      	ldrh	r3, [r6, #12]
 80077e4:	061a      	lsls	r2, r3, #24
 80077e6:	d410      	bmi.n	800780a <__swhatbuf_r+0x3e>
 80077e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80077ec:	e00e      	b.n	800780c <__swhatbuf_r+0x40>
 80077ee:	466a      	mov	r2, sp
 80077f0:	f000 f970 	bl	8007ad4 <_fstat_r>
 80077f4:	2800      	cmp	r0, #0
 80077f6:	dbf2      	blt.n	80077de <__swhatbuf_r+0x12>
 80077f8:	9a01      	ldr	r2, [sp, #4]
 80077fa:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80077fe:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007802:	425a      	negs	r2, r3
 8007804:	415a      	adcs	r2, r3
 8007806:	602a      	str	r2, [r5, #0]
 8007808:	e7ee      	b.n	80077e8 <__swhatbuf_r+0x1c>
 800780a:	2340      	movs	r3, #64	; 0x40
 800780c:	2000      	movs	r0, #0
 800780e:	6023      	str	r3, [r4, #0]
 8007810:	b016      	add	sp, #88	; 0x58
 8007812:	bd70      	pop	{r4, r5, r6, pc}

08007814 <__smakebuf_r>:
 8007814:	898b      	ldrh	r3, [r1, #12]
 8007816:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007818:	079d      	lsls	r5, r3, #30
 800781a:	4606      	mov	r6, r0
 800781c:	460c      	mov	r4, r1
 800781e:	d507      	bpl.n	8007830 <__smakebuf_r+0x1c>
 8007820:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007824:	6023      	str	r3, [r4, #0]
 8007826:	6123      	str	r3, [r4, #16]
 8007828:	2301      	movs	r3, #1
 800782a:	6163      	str	r3, [r4, #20]
 800782c:	b002      	add	sp, #8
 800782e:	bd70      	pop	{r4, r5, r6, pc}
 8007830:	ab01      	add	r3, sp, #4
 8007832:	466a      	mov	r2, sp
 8007834:	f7ff ffca 	bl	80077cc <__swhatbuf_r>
 8007838:	9900      	ldr	r1, [sp, #0]
 800783a:	4605      	mov	r5, r0
 800783c:	4630      	mov	r0, r6
 800783e:	f000 f879 	bl	8007934 <_malloc_r>
 8007842:	b948      	cbnz	r0, 8007858 <__smakebuf_r+0x44>
 8007844:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007848:	059a      	lsls	r2, r3, #22
 800784a:	d4ef      	bmi.n	800782c <__smakebuf_r+0x18>
 800784c:	f023 0303 	bic.w	r3, r3, #3
 8007850:	f043 0302 	orr.w	r3, r3, #2
 8007854:	81a3      	strh	r3, [r4, #12]
 8007856:	e7e3      	b.n	8007820 <__smakebuf_r+0xc>
 8007858:	4b0d      	ldr	r3, [pc, #52]	; (8007890 <__smakebuf_r+0x7c>)
 800785a:	62b3      	str	r3, [r6, #40]	; 0x28
 800785c:	89a3      	ldrh	r3, [r4, #12]
 800785e:	6020      	str	r0, [r4, #0]
 8007860:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007864:	81a3      	strh	r3, [r4, #12]
 8007866:	9b00      	ldr	r3, [sp, #0]
 8007868:	6163      	str	r3, [r4, #20]
 800786a:	9b01      	ldr	r3, [sp, #4]
 800786c:	6120      	str	r0, [r4, #16]
 800786e:	b15b      	cbz	r3, 8007888 <__smakebuf_r+0x74>
 8007870:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007874:	4630      	mov	r0, r6
 8007876:	f000 f93f 	bl	8007af8 <_isatty_r>
 800787a:	b128      	cbz	r0, 8007888 <__smakebuf_r+0x74>
 800787c:	89a3      	ldrh	r3, [r4, #12]
 800787e:	f023 0303 	bic.w	r3, r3, #3
 8007882:	f043 0301 	orr.w	r3, r3, #1
 8007886:	81a3      	strh	r3, [r4, #12]
 8007888:	89a0      	ldrh	r0, [r4, #12]
 800788a:	4305      	orrs	r5, r0
 800788c:	81a5      	strh	r5, [r4, #12]
 800788e:	e7cd      	b.n	800782c <__smakebuf_r+0x18>
 8007890:	08007625 	.word	0x08007625

08007894 <_free_r>:
 8007894:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007896:	2900      	cmp	r1, #0
 8007898:	d048      	beq.n	800792c <_free_r+0x98>
 800789a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800789e:	9001      	str	r0, [sp, #4]
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	f1a1 0404 	sub.w	r4, r1, #4
 80078a6:	bfb8      	it	lt
 80078a8:	18e4      	addlt	r4, r4, r3
 80078aa:	f000 f947 	bl	8007b3c <__malloc_lock>
 80078ae:	4a20      	ldr	r2, [pc, #128]	; (8007930 <_free_r+0x9c>)
 80078b0:	9801      	ldr	r0, [sp, #4]
 80078b2:	6813      	ldr	r3, [r2, #0]
 80078b4:	4615      	mov	r5, r2
 80078b6:	b933      	cbnz	r3, 80078c6 <_free_r+0x32>
 80078b8:	6063      	str	r3, [r4, #4]
 80078ba:	6014      	str	r4, [r2, #0]
 80078bc:	b003      	add	sp, #12
 80078be:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80078c2:	f000 b941 	b.w	8007b48 <__malloc_unlock>
 80078c6:	42a3      	cmp	r3, r4
 80078c8:	d90b      	bls.n	80078e2 <_free_r+0x4e>
 80078ca:	6821      	ldr	r1, [r4, #0]
 80078cc:	1862      	adds	r2, r4, r1
 80078ce:	4293      	cmp	r3, r2
 80078d0:	bf04      	itt	eq
 80078d2:	681a      	ldreq	r2, [r3, #0]
 80078d4:	685b      	ldreq	r3, [r3, #4]
 80078d6:	6063      	str	r3, [r4, #4]
 80078d8:	bf04      	itt	eq
 80078da:	1852      	addeq	r2, r2, r1
 80078dc:	6022      	streq	r2, [r4, #0]
 80078de:	602c      	str	r4, [r5, #0]
 80078e0:	e7ec      	b.n	80078bc <_free_r+0x28>
 80078e2:	461a      	mov	r2, r3
 80078e4:	685b      	ldr	r3, [r3, #4]
 80078e6:	b10b      	cbz	r3, 80078ec <_free_r+0x58>
 80078e8:	42a3      	cmp	r3, r4
 80078ea:	d9fa      	bls.n	80078e2 <_free_r+0x4e>
 80078ec:	6811      	ldr	r1, [r2, #0]
 80078ee:	1855      	adds	r5, r2, r1
 80078f0:	42a5      	cmp	r5, r4
 80078f2:	d10b      	bne.n	800790c <_free_r+0x78>
 80078f4:	6824      	ldr	r4, [r4, #0]
 80078f6:	4421      	add	r1, r4
 80078f8:	1854      	adds	r4, r2, r1
 80078fa:	42a3      	cmp	r3, r4
 80078fc:	6011      	str	r1, [r2, #0]
 80078fe:	d1dd      	bne.n	80078bc <_free_r+0x28>
 8007900:	681c      	ldr	r4, [r3, #0]
 8007902:	685b      	ldr	r3, [r3, #4]
 8007904:	6053      	str	r3, [r2, #4]
 8007906:	4421      	add	r1, r4
 8007908:	6011      	str	r1, [r2, #0]
 800790a:	e7d7      	b.n	80078bc <_free_r+0x28>
 800790c:	d902      	bls.n	8007914 <_free_r+0x80>
 800790e:	230c      	movs	r3, #12
 8007910:	6003      	str	r3, [r0, #0]
 8007912:	e7d3      	b.n	80078bc <_free_r+0x28>
 8007914:	6825      	ldr	r5, [r4, #0]
 8007916:	1961      	adds	r1, r4, r5
 8007918:	428b      	cmp	r3, r1
 800791a:	bf04      	itt	eq
 800791c:	6819      	ldreq	r1, [r3, #0]
 800791e:	685b      	ldreq	r3, [r3, #4]
 8007920:	6063      	str	r3, [r4, #4]
 8007922:	bf04      	itt	eq
 8007924:	1949      	addeq	r1, r1, r5
 8007926:	6021      	streq	r1, [r4, #0]
 8007928:	6054      	str	r4, [r2, #4]
 800792a:	e7c7      	b.n	80078bc <_free_r+0x28>
 800792c:	b003      	add	sp, #12
 800792e:	bd30      	pop	{r4, r5, pc}
 8007930:	200049a4 	.word	0x200049a4

08007934 <_malloc_r>:
 8007934:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007936:	1ccd      	adds	r5, r1, #3
 8007938:	f025 0503 	bic.w	r5, r5, #3
 800793c:	3508      	adds	r5, #8
 800793e:	2d0c      	cmp	r5, #12
 8007940:	bf38      	it	cc
 8007942:	250c      	movcc	r5, #12
 8007944:	2d00      	cmp	r5, #0
 8007946:	4606      	mov	r6, r0
 8007948:	db01      	blt.n	800794e <_malloc_r+0x1a>
 800794a:	42a9      	cmp	r1, r5
 800794c:	d903      	bls.n	8007956 <_malloc_r+0x22>
 800794e:	230c      	movs	r3, #12
 8007950:	6033      	str	r3, [r6, #0]
 8007952:	2000      	movs	r0, #0
 8007954:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007956:	f000 f8f1 	bl	8007b3c <__malloc_lock>
 800795a:	4921      	ldr	r1, [pc, #132]	; (80079e0 <_malloc_r+0xac>)
 800795c:	680a      	ldr	r2, [r1, #0]
 800795e:	4614      	mov	r4, r2
 8007960:	b99c      	cbnz	r4, 800798a <_malloc_r+0x56>
 8007962:	4f20      	ldr	r7, [pc, #128]	; (80079e4 <_malloc_r+0xb0>)
 8007964:	683b      	ldr	r3, [r7, #0]
 8007966:	b923      	cbnz	r3, 8007972 <_malloc_r+0x3e>
 8007968:	4621      	mov	r1, r4
 800796a:	4630      	mov	r0, r6
 800796c:	f000 f83c 	bl	80079e8 <_sbrk_r>
 8007970:	6038      	str	r0, [r7, #0]
 8007972:	4629      	mov	r1, r5
 8007974:	4630      	mov	r0, r6
 8007976:	f000 f837 	bl	80079e8 <_sbrk_r>
 800797a:	1c43      	adds	r3, r0, #1
 800797c:	d123      	bne.n	80079c6 <_malloc_r+0x92>
 800797e:	230c      	movs	r3, #12
 8007980:	6033      	str	r3, [r6, #0]
 8007982:	4630      	mov	r0, r6
 8007984:	f000 f8e0 	bl	8007b48 <__malloc_unlock>
 8007988:	e7e3      	b.n	8007952 <_malloc_r+0x1e>
 800798a:	6823      	ldr	r3, [r4, #0]
 800798c:	1b5b      	subs	r3, r3, r5
 800798e:	d417      	bmi.n	80079c0 <_malloc_r+0x8c>
 8007990:	2b0b      	cmp	r3, #11
 8007992:	d903      	bls.n	800799c <_malloc_r+0x68>
 8007994:	6023      	str	r3, [r4, #0]
 8007996:	441c      	add	r4, r3
 8007998:	6025      	str	r5, [r4, #0]
 800799a:	e004      	b.n	80079a6 <_malloc_r+0x72>
 800799c:	6863      	ldr	r3, [r4, #4]
 800799e:	42a2      	cmp	r2, r4
 80079a0:	bf0c      	ite	eq
 80079a2:	600b      	streq	r3, [r1, #0]
 80079a4:	6053      	strne	r3, [r2, #4]
 80079a6:	4630      	mov	r0, r6
 80079a8:	f000 f8ce 	bl	8007b48 <__malloc_unlock>
 80079ac:	f104 000b 	add.w	r0, r4, #11
 80079b0:	1d23      	adds	r3, r4, #4
 80079b2:	f020 0007 	bic.w	r0, r0, #7
 80079b6:	1ac2      	subs	r2, r0, r3
 80079b8:	d0cc      	beq.n	8007954 <_malloc_r+0x20>
 80079ba:	1a1b      	subs	r3, r3, r0
 80079bc:	50a3      	str	r3, [r4, r2]
 80079be:	e7c9      	b.n	8007954 <_malloc_r+0x20>
 80079c0:	4622      	mov	r2, r4
 80079c2:	6864      	ldr	r4, [r4, #4]
 80079c4:	e7cc      	b.n	8007960 <_malloc_r+0x2c>
 80079c6:	1cc4      	adds	r4, r0, #3
 80079c8:	f024 0403 	bic.w	r4, r4, #3
 80079cc:	42a0      	cmp	r0, r4
 80079ce:	d0e3      	beq.n	8007998 <_malloc_r+0x64>
 80079d0:	1a21      	subs	r1, r4, r0
 80079d2:	4630      	mov	r0, r6
 80079d4:	f000 f808 	bl	80079e8 <_sbrk_r>
 80079d8:	3001      	adds	r0, #1
 80079da:	d1dd      	bne.n	8007998 <_malloc_r+0x64>
 80079dc:	e7cf      	b.n	800797e <_malloc_r+0x4a>
 80079de:	bf00      	nop
 80079e0:	200049a4 	.word	0x200049a4
 80079e4:	200049a8 	.word	0x200049a8

080079e8 <_sbrk_r>:
 80079e8:	b538      	push	{r3, r4, r5, lr}
 80079ea:	4d06      	ldr	r5, [pc, #24]	; (8007a04 <_sbrk_r+0x1c>)
 80079ec:	2300      	movs	r3, #0
 80079ee:	4604      	mov	r4, r0
 80079f0:	4608      	mov	r0, r1
 80079f2:	602b      	str	r3, [r5, #0]
 80079f4:	f7f9 fc52 	bl	800129c <_sbrk>
 80079f8:	1c43      	adds	r3, r0, #1
 80079fa:	d102      	bne.n	8007a02 <_sbrk_r+0x1a>
 80079fc:	682b      	ldr	r3, [r5, #0]
 80079fe:	b103      	cbz	r3, 8007a02 <_sbrk_r+0x1a>
 8007a00:	6023      	str	r3, [r4, #0]
 8007a02:	bd38      	pop	{r3, r4, r5, pc}
 8007a04:	20004c2c 	.word	0x20004c2c

08007a08 <__sread>:
 8007a08:	b510      	push	{r4, lr}
 8007a0a:	460c      	mov	r4, r1
 8007a0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a10:	f000 f8a0 	bl	8007b54 <_read_r>
 8007a14:	2800      	cmp	r0, #0
 8007a16:	bfab      	itete	ge
 8007a18:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007a1a:	89a3      	ldrhlt	r3, [r4, #12]
 8007a1c:	181b      	addge	r3, r3, r0
 8007a1e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007a22:	bfac      	ite	ge
 8007a24:	6563      	strge	r3, [r4, #84]	; 0x54
 8007a26:	81a3      	strhlt	r3, [r4, #12]
 8007a28:	bd10      	pop	{r4, pc}

08007a2a <__swrite>:
 8007a2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a2e:	461f      	mov	r7, r3
 8007a30:	898b      	ldrh	r3, [r1, #12]
 8007a32:	05db      	lsls	r3, r3, #23
 8007a34:	4605      	mov	r5, r0
 8007a36:	460c      	mov	r4, r1
 8007a38:	4616      	mov	r6, r2
 8007a3a:	d505      	bpl.n	8007a48 <__swrite+0x1e>
 8007a3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a40:	2302      	movs	r3, #2
 8007a42:	2200      	movs	r2, #0
 8007a44:	f000 f868 	bl	8007b18 <_lseek_r>
 8007a48:	89a3      	ldrh	r3, [r4, #12]
 8007a4a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007a4e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007a52:	81a3      	strh	r3, [r4, #12]
 8007a54:	4632      	mov	r2, r6
 8007a56:	463b      	mov	r3, r7
 8007a58:	4628      	mov	r0, r5
 8007a5a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007a5e:	f000 b817 	b.w	8007a90 <_write_r>

08007a62 <__sseek>:
 8007a62:	b510      	push	{r4, lr}
 8007a64:	460c      	mov	r4, r1
 8007a66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a6a:	f000 f855 	bl	8007b18 <_lseek_r>
 8007a6e:	1c43      	adds	r3, r0, #1
 8007a70:	89a3      	ldrh	r3, [r4, #12]
 8007a72:	bf15      	itete	ne
 8007a74:	6560      	strne	r0, [r4, #84]	; 0x54
 8007a76:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007a7a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007a7e:	81a3      	strheq	r3, [r4, #12]
 8007a80:	bf18      	it	ne
 8007a82:	81a3      	strhne	r3, [r4, #12]
 8007a84:	bd10      	pop	{r4, pc}

08007a86 <__sclose>:
 8007a86:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a8a:	f000 b813 	b.w	8007ab4 <_close_r>
	...

08007a90 <_write_r>:
 8007a90:	b538      	push	{r3, r4, r5, lr}
 8007a92:	4d07      	ldr	r5, [pc, #28]	; (8007ab0 <_write_r+0x20>)
 8007a94:	4604      	mov	r4, r0
 8007a96:	4608      	mov	r0, r1
 8007a98:	4611      	mov	r1, r2
 8007a9a:	2200      	movs	r2, #0
 8007a9c:	602a      	str	r2, [r5, #0]
 8007a9e:	461a      	mov	r2, r3
 8007aa0:	f7f9 fbab 	bl	80011fa <_write>
 8007aa4:	1c43      	adds	r3, r0, #1
 8007aa6:	d102      	bne.n	8007aae <_write_r+0x1e>
 8007aa8:	682b      	ldr	r3, [r5, #0]
 8007aaa:	b103      	cbz	r3, 8007aae <_write_r+0x1e>
 8007aac:	6023      	str	r3, [r4, #0]
 8007aae:	bd38      	pop	{r3, r4, r5, pc}
 8007ab0:	20004c2c 	.word	0x20004c2c

08007ab4 <_close_r>:
 8007ab4:	b538      	push	{r3, r4, r5, lr}
 8007ab6:	4d06      	ldr	r5, [pc, #24]	; (8007ad0 <_close_r+0x1c>)
 8007ab8:	2300      	movs	r3, #0
 8007aba:	4604      	mov	r4, r0
 8007abc:	4608      	mov	r0, r1
 8007abe:	602b      	str	r3, [r5, #0]
 8007ac0:	f7f9 fbb7 	bl	8001232 <_close>
 8007ac4:	1c43      	adds	r3, r0, #1
 8007ac6:	d102      	bne.n	8007ace <_close_r+0x1a>
 8007ac8:	682b      	ldr	r3, [r5, #0]
 8007aca:	b103      	cbz	r3, 8007ace <_close_r+0x1a>
 8007acc:	6023      	str	r3, [r4, #0]
 8007ace:	bd38      	pop	{r3, r4, r5, pc}
 8007ad0:	20004c2c 	.word	0x20004c2c

08007ad4 <_fstat_r>:
 8007ad4:	b538      	push	{r3, r4, r5, lr}
 8007ad6:	4d07      	ldr	r5, [pc, #28]	; (8007af4 <_fstat_r+0x20>)
 8007ad8:	2300      	movs	r3, #0
 8007ada:	4604      	mov	r4, r0
 8007adc:	4608      	mov	r0, r1
 8007ade:	4611      	mov	r1, r2
 8007ae0:	602b      	str	r3, [r5, #0]
 8007ae2:	f7f9 fbb2 	bl	800124a <_fstat>
 8007ae6:	1c43      	adds	r3, r0, #1
 8007ae8:	d102      	bne.n	8007af0 <_fstat_r+0x1c>
 8007aea:	682b      	ldr	r3, [r5, #0]
 8007aec:	b103      	cbz	r3, 8007af0 <_fstat_r+0x1c>
 8007aee:	6023      	str	r3, [r4, #0]
 8007af0:	bd38      	pop	{r3, r4, r5, pc}
 8007af2:	bf00      	nop
 8007af4:	20004c2c 	.word	0x20004c2c

08007af8 <_isatty_r>:
 8007af8:	b538      	push	{r3, r4, r5, lr}
 8007afa:	4d06      	ldr	r5, [pc, #24]	; (8007b14 <_isatty_r+0x1c>)
 8007afc:	2300      	movs	r3, #0
 8007afe:	4604      	mov	r4, r0
 8007b00:	4608      	mov	r0, r1
 8007b02:	602b      	str	r3, [r5, #0]
 8007b04:	f7f9 fbb1 	bl	800126a <_isatty>
 8007b08:	1c43      	adds	r3, r0, #1
 8007b0a:	d102      	bne.n	8007b12 <_isatty_r+0x1a>
 8007b0c:	682b      	ldr	r3, [r5, #0]
 8007b0e:	b103      	cbz	r3, 8007b12 <_isatty_r+0x1a>
 8007b10:	6023      	str	r3, [r4, #0]
 8007b12:	bd38      	pop	{r3, r4, r5, pc}
 8007b14:	20004c2c 	.word	0x20004c2c

08007b18 <_lseek_r>:
 8007b18:	b538      	push	{r3, r4, r5, lr}
 8007b1a:	4d07      	ldr	r5, [pc, #28]	; (8007b38 <_lseek_r+0x20>)
 8007b1c:	4604      	mov	r4, r0
 8007b1e:	4608      	mov	r0, r1
 8007b20:	4611      	mov	r1, r2
 8007b22:	2200      	movs	r2, #0
 8007b24:	602a      	str	r2, [r5, #0]
 8007b26:	461a      	mov	r2, r3
 8007b28:	f7f9 fbaa 	bl	8001280 <_lseek>
 8007b2c:	1c43      	adds	r3, r0, #1
 8007b2e:	d102      	bne.n	8007b36 <_lseek_r+0x1e>
 8007b30:	682b      	ldr	r3, [r5, #0]
 8007b32:	b103      	cbz	r3, 8007b36 <_lseek_r+0x1e>
 8007b34:	6023      	str	r3, [r4, #0]
 8007b36:	bd38      	pop	{r3, r4, r5, pc}
 8007b38:	20004c2c 	.word	0x20004c2c

08007b3c <__malloc_lock>:
 8007b3c:	4801      	ldr	r0, [pc, #4]	; (8007b44 <__malloc_lock+0x8>)
 8007b3e:	f7ff be43 	b.w	80077c8 <__retarget_lock_acquire_recursive>
 8007b42:	bf00      	nop
 8007b44:	20004c24 	.word	0x20004c24

08007b48 <__malloc_unlock>:
 8007b48:	4801      	ldr	r0, [pc, #4]	; (8007b50 <__malloc_unlock+0x8>)
 8007b4a:	f7ff be3e 	b.w	80077ca <__retarget_lock_release_recursive>
 8007b4e:	bf00      	nop
 8007b50:	20004c24 	.word	0x20004c24

08007b54 <_read_r>:
 8007b54:	b538      	push	{r3, r4, r5, lr}
 8007b56:	4d07      	ldr	r5, [pc, #28]	; (8007b74 <_read_r+0x20>)
 8007b58:	4604      	mov	r4, r0
 8007b5a:	4608      	mov	r0, r1
 8007b5c:	4611      	mov	r1, r2
 8007b5e:	2200      	movs	r2, #0
 8007b60:	602a      	str	r2, [r5, #0]
 8007b62:	461a      	mov	r2, r3
 8007b64:	f7f9 fb2c 	bl	80011c0 <_read>
 8007b68:	1c43      	adds	r3, r0, #1
 8007b6a:	d102      	bne.n	8007b72 <_read_r+0x1e>
 8007b6c:	682b      	ldr	r3, [r5, #0]
 8007b6e:	b103      	cbz	r3, 8007b72 <_read_r+0x1e>
 8007b70:	6023      	str	r3, [r4, #0]
 8007b72:	bd38      	pop	{r3, r4, r5, pc}
 8007b74:	20004c2c 	.word	0x20004c2c

08007b78 <_init>:
 8007b78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b7a:	bf00      	nop
 8007b7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b7e:	bc08      	pop	{r3}
 8007b80:	469e      	mov	lr, r3
 8007b82:	4770      	bx	lr

08007b84 <_fini>:
 8007b84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b86:	bf00      	nop
 8007b88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b8a:	bc08      	pop	{r3}
 8007b8c:	469e      	mov	lr, r3
 8007b8e:	4770      	bx	lr
