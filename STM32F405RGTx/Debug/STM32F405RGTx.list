
STM32F405RGTx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000094e4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003ec  08009674  08009674  00019674  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009a60  08009a60  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08009a60  08009a60  00019a60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009a68  08009a68  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009a68  08009a68  00019a68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009a6c  08009a6c  00019a6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08009a70  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004c00  20000074  08009ae4  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004c74  08009ae4  00024c74  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   000277bb  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000047a4  00000000  00000000  0004785f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a50  00000000  00000000  0004c008  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000018a8  00000000  00000000  0004da58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002553a  00000000  00000000  0004f300  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d2ca  00000000  00000000  0007483a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dcf21  00000000  00000000  00091b04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0016ea25  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000077d4  00000000  00000000  0016ea78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800965c 	.word	0x0800965c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	0800965c 	.word	0x0800965c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000280:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000284:	f000 b96e 	b.w	8000564 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468c      	mov	ip, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	f040 8083 	bne.w	80003b6 <__udivmoddi4+0x116>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d947      	bls.n	8000346 <__udivmoddi4+0xa6>
 80002b6:	fab2 f282 	clz	r2, r2
 80002ba:	b142      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002bc:	f1c2 0020 	rsb	r0, r2, #32
 80002c0:	fa24 f000 	lsr.w	r0, r4, r0
 80002c4:	4091      	lsls	r1, r2
 80002c6:	4097      	lsls	r7, r2
 80002c8:	ea40 0c01 	orr.w	ip, r0, r1
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbbc f6f8 	udiv	r6, ip, r8
 80002d8:	fa1f fe87 	uxth.w	lr, r7
 80002dc:	fb08 c116 	mls	r1, r8, r6, ip
 80002e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e4:	fb06 f10e 	mul.w	r1, r6, lr
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18fb      	adds	r3, r7, r3
 80002ee:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80002f2:	f080 8119 	bcs.w	8000528 <__udivmoddi4+0x288>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8116 	bls.w	8000528 <__udivmoddi4+0x288>
 80002fc:	3e02      	subs	r6, #2
 80002fe:	443b      	add	r3, r7
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0f8 	udiv	r0, r3, r8
 8000308:	fb08 3310 	mls	r3, r8, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fe0e 	mul.w	lr, r0, lr
 8000314:	45a6      	cmp	lr, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	193c      	adds	r4, r7, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800031e:	f080 8105 	bcs.w	800052c <__udivmoddi4+0x28c>
 8000322:	45a6      	cmp	lr, r4
 8000324:	f240 8102 	bls.w	800052c <__udivmoddi4+0x28c>
 8000328:	3802      	subs	r0, #2
 800032a:	443c      	add	r4, r7
 800032c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000330:	eba4 040e 	sub.w	r4, r4, lr
 8000334:	2600      	movs	r6, #0
 8000336:	b11d      	cbz	r5, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c5 4300 	strd	r4, r3, [r5]
 8000340:	4631      	mov	r1, r6
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	b902      	cbnz	r2, 800034a <__udivmoddi4+0xaa>
 8000348:	deff      	udf	#255	; 0xff
 800034a:	fab2 f282 	clz	r2, r2
 800034e:	2a00      	cmp	r2, #0
 8000350:	d150      	bne.n	80003f4 <__udivmoddi4+0x154>
 8000352:	1bcb      	subs	r3, r1, r7
 8000354:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000358:	fa1f f887 	uxth.w	r8, r7
 800035c:	2601      	movs	r6, #1
 800035e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000362:	0c21      	lsrs	r1, r4, #16
 8000364:	fb0e 331c 	mls	r3, lr, ip, r3
 8000368:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800036c:	fb08 f30c 	mul.w	r3, r8, ip
 8000370:	428b      	cmp	r3, r1
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0xe4>
 8000374:	1879      	adds	r1, r7, r1
 8000376:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0xe2>
 800037c:	428b      	cmp	r3, r1
 800037e:	f200 80e9 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 8000382:	4684      	mov	ip, r0
 8000384:	1ac9      	subs	r1, r1, r3
 8000386:	b2a3      	uxth	r3, r4
 8000388:	fbb1 f0fe 	udiv	r0, r1, lr
 800038c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000390:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000394:	fb08 f800 	mul.w	r8, r8, r0
 8000398:	45a0      	cmp	r8, r4
 800039a:	d907      	bls.n	80003ac <__udivmoddi4+0x10c>
 800039c:	193c      	adds	r4, r7, r4
 800039e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003a2:	d202      	bcs.n	80003aa <__udivmoddi4+0x10a>
 80003a4:	45a0      	cmp	r8, r4
 80003a6:	f200 80d9 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003aa:	4618      	mov	r0, r3
 80003ac:	eba4 0408 	sub.w	r4, r4, r8
 80003b0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003b4:	e7bf      	b.n	8000336 <__udivmoddi4+0x96>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0x12e>
 80003ba:	2d00      	cmp	r5, #0
 80003bc:	f000 80b1 	beq.w	8000522 <__udivmoddi4+0x282>
 80003c0:	2600      	movs	r6, #0
 80003c2:	e9c5 0100 	strd	r0, r1, [r5]
 80003c6:	4630      	mov	r0, r6
 80003c8:	4631      	mov	r1, r6
 80003ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ce:	fab3 f683 	clz	r6, r3
 80003d2:	2e00      	cmp	r6, #0
 80003d4:	d14a      	bne.n	800046c <__udivmoddi4+0x1cc>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d302      	bcc.n	80003e0 <__udivmoddi4+0x140>
 80003da:	4282      	cmp	r2, r0
 80003dc:	f200 80b8 	bhi.w	8000550 <__udivmoddi4+0x2b0>
 80003e0:	1a84      	subs	r4, r0, r2
 80003e2:	eb61 0103 	sbc.w	r1, r1, r3
 80003e6:	2001      	movs	r0, #1
 80003e8:	468c      	mov	ip, r1
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	d0a8      	beq.n	8000340 <__udivmoddi4+0xa0>
 80003ee:	e9c5 4c00 	strd	r4, ip, [r5]
 80003f2:	e7a5      	b.n	8000340 <__udivmoddi4+0xa0>
 80003f4:	f1c2 0320 	rsb	r3, r2, #32
 80003f8:	fa20 f603 	lsr.w	r6, r0, r3
 80003fc:	4097      	lsls	r7, r2
 80003fe:	fa01 f002 	lsl.w	r0, r1, r2
 8000402:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000406:	40d9      	lsrs	r1, r3
 8000408:	4330      	orrs	r0, r6
 800040a:	0c03      	lsrs	r3, r0, #16
 800040c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000410:	fa1f f887 	uxth.w	r8, r7
 8000414:	fb0e 1116 	mls	r1, lr, r6, r1
 8000418:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800041c:	fb06 f108 	mul.w	r1, r6, r8
 8000420:	4299      	cmp	r1, r3
 8000422:	fa04 f402 	lsl.w	r4, r4, r2
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x19c>
 8000428:	18fb      	adds	r3, r7, r3
 800042a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800042e:	f080 808d 	bcs.w	800054c <__udivmoddi4+0x2ac>
 8000432:	4299      	cmp	r1, r3
 8000434:	f240 808a 	bls.w	800054c <__udivmoddi4+0x2ac>
 8000438:	3e02      	subs	r6, #2
 800043a:	443b      	add	r3, r7
 800043c:	1a5b      	subs	r3, r3, r1
 800043e:	b281      	uxth	r1, r0
 8000440:	fbb3 f0fe 	udiv	r0, r3, lr
 8000444:	fb0e 3310 	mls	r3, lr, r0, r3
 8000448:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044c:	fb00 f308 	mul.w	r3, r0, r8
 8000450:	428b      	cmp	r3, r1
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x1c4>
 8000454:	1879      	adds	r1, r7, r1
 8000456:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800045a:	d273      	bcs.n	8000544 <__udivmoddi4+0x2a4>
 800045c:	428b      	cmp	r3, r1
 800045e:	d971      	bls.n	8000544 <__udivmoddi4+0x2a4>
 8000460:	3802      	subs	r0, #2
 8000462:	4439      	add	r1, r7
 8000464:	1acb      	subs	r3, r1, r3
 8000466:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800046a:	e778      	b.n	800035e <__udivmoddi4+0xbe>
 800046c:	f1c6 0c20 	rsb	ip, r6, #32
 8000470:	fa03 f406 	lsl.w	r4, r3, r6
 8000474:	fa22 f30c 	lsr.w	r3, r2, ip
 8000478:	431c      	orrs	r4, r3
 800047a:	fa20 f70c 	lsr.w	r7, r0, ip
 800047e:	fa01 f306 	lsl.w	r3, r1, r6
 8000482:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000486:	fa21 f10c 	lsr.w	r1, r1, ip
 800048a:	431f      	orrs	r7, r3
 800048c:	0c3b      	lsrs	r3, r7, #16
 800048e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000492:	fa1f f884 	uxth.w	r8, r4
 8000496:	fb0e 1119 	mls	r1, lr, r9, r1
 800049a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800049e:	fb09 fa08 	mul.w	sl, r9, r8
 80004a2:	458a      	cmp	sl, r1
 80004a4:	fa02 f206 	lsl.w	r2, r2, r6
 80004a8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x220>
 80004ae:	1861      	adds	r1, r4, r1
 80004b0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80004b4:	d248      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 80004b6:	458a      	cmp	sl, r1
 80004b8:	d946      	bls.n	8000548 <__udivmoddi4+0x2a8>
 80004ba:	f1a9 0902 	sub.w	r9, r9, #2
 80004be:	4421      	add	r1, r4
 80004c0:	eba1 010a 	sub.w	r1, r1, sl
 80004c4:	b2bf      	uxth	r7, r7
 80004c6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ca:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ce:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004d2:	fb00 f808 	mul.w	r8, r0, r8
 80004d6:	45b8      	cmp	r8, r7
 80004d8:	d907      	bls.n	80004ea <__udivmoddi4+0x24a>
 80004da:	19e7      	adds	r7, r4, r7
 80004dc:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80004e0:	d22e      	bcs.n	8000540 <__udivmoddi4+0x2a0>
 80004e2:	45b8      	cmp	r8, r7
 80004e4:	d92c      	bls.n	8000540 <__udivmoddi4+0x2a0>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4427      	add	r7, r4
 80004ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ee:	eba7 0708 	sub.w	r7, r7, r8
 80004f2:	fba0 8902 	umull	r8, r9, r0, r2
 80004f6:	454f      	cmp	r7, r9
 80004f8:	46c6      	mov	lr, r8
 80004fa:	4649      	mov	r1, r9
 80004fc:	d31a      	bcc.n	8000534 <__udivmoddi4+0x294>
 80004fe:	d017      	beq.n	8000530 <__udivmoddi4+0x290>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x27a>
 8000502:	ebb3 020e 	subs.w	r2, r3, lr
 8000506:	eb67 0701 	sbc.w	r7, r7, r1
 800050a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800050e:	40f2      	lsrs	r2, r6
 8000510:	ea4c 0202 	orr.w	r2, ip, r2
 8000514:	40f7      	lsrs	r7, r6
 8000516:	e9c5 2700 	strd	r2, r7, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	462e      	mov	r6, r5
 8000524:	4628      	mov	r0, r5
 8000526:	e70b      	b.n	8000340 <__udivmoddi4+0xa0>
 8000528:	4606      	mov	r6, r0
 800052a:	e6e9      	b.n	8000300 <__udivmoddi4+0x60>
 800052c:	4618      	mov	r0, r3
 800052e:	e6fd      	b.n	800032c <__udivmoddi4+0x8c>
 8000530:	4543      	cmp	r3, r8
 8000532:	d2e5      	bcs.n	8000500 <__udivmoddi4+0x260>
 8000534:	ebb8 0e02 	subs.w	lr, r8, r2
 8000538:	eb69 0104 	sbc.w	r1, r9, r4
 800053c:	3801      	subs	r0, #1
 800053e:	e7df      	b.n	8000500 <__udivmoddi4+0x260>
 8000540:	4608      	mov	r0, r1
 8000542:	e7d2      	b.n	80004ea <__udivmoddi4+0x24a>
 8000544:	4660      	mov	r0, ip
 8000546:	e78d      	b.n	8000464 <__udivmoddi4+0x1c4>
 8000548:	4681      	mov	r9, r0
 800054a:	e7b9      	b.n	80004c0 <__udivmoddi4+0x220>
 800054c:	4666      	mov	r6, ip
 800054e:	e775      	b.n	800043c <__udivmoddi4+0x19c>
 8000550:	4630      	mov	r0, r6
 8000552:	e74a      	b.n	80003ea <__udivmoddi4+0x14a>
 8000554:	f1ac 0c02 	sub.w	ip, ip, #2
 8000558:	4439      	add	r1, r7
 800055a:	e713      	b.n	8000384 <__udivmoddi4+0xe4>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	e724      	b.n	80003ac <__udivmoddi4+0x10c>
 8000562:	bf00      	nop

08000564 <__aeabi_idiv0>:
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop

08000568 <__io_putchar>:
#if BMS_DEBUG
#include "bms_tests.h"
#endif

// override __io_putchar from the STL to enable UART printing
void __io_putchar(uint8_t ch) {
 8000568:	b580      	push	{r7, lr}
 800056a:	b082      	sub	sp, #8
 800056c:	af00      	add	r7, sp, #0
 800056e:	4603      	mov	r3, r0
 8000570:	71fb      	strb	r3, [r7, #7]
	HAL_UART_Transmit(&huart1, &ch, 1, 500);
 8000572:	1df9      	adds	r1, r7, #7
 8000574:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000578:	2201      	movs	r2, #1
 800057a:	4803      	ldr	r0, [pc, #12]	; (8000588 <__io_putchar+0x20>)
 800057c:	f004 fe67 	bl	800524e <HAL_UART_Transmit>
}
 8000580:	bf00      	nop
 8000582:	3708      	adds	r7, #8
 8000584:	46bd      	mov	sp, r7
 8000586:	bd80      	pop	{r7, pc}
 8000588:	20004a80 	.word	0x20004a80

0800058c <bms_entry>:

int bms_entry() {	
 800058c:	b580      	push	{r7, lr}
 800058e:	af00      	add	r7, sp, #0
	printf("starting timers...\r\n");
 8000590:	4810      	ldr	r0, [pc, #64]	; (80005d4 <bms_entry+0x48>)
 8000592:	f007 ff59 	bl	8008448 <puts>
	start_timers();
 8000596:	f001 f9d3 	bl	8001940 <start_timers>

	printf("initializing RTOS kernel...\r\n");
 800059a:	480f      	ldr	r0, [pc, #60]	; (80005d8 <bms_entry+0x4c>)
 800059c:	f007 ff54 	bl	8008448 <puts>
	osKernelInitialize();
 80005a0:	f005 f93e 	bl	8005820 <osKernelInitialize>

	printf("starting RTOS threads...\r\n");
 80005a4:	480d      	ldr	r0, [pc, #52]	; (80005dc <bms_entry+0x50>)
 80005a6:	f007 ff4f 	bl	8008448 <puts>
	osThreadNew(ext_led_blink_thread_fn, NULL, &ext_led_blink_thread_attrs);
 80005aa:	4a0d      	ldr	r2, [pc, #52]	; (80005e0 <bms_entry+0x54>)
 80005ac:	2100      	movs	r1, #0
 80005ae:	480d      	ldr	r0, [pc, #52]	; (80005e4 <bms_entry+0x58>)
 80005b0:	f005 f980 	bl	80058b4 <osThreadNew>
	// osThreadNew(rtos_heartbeat_logger_thread_fn, NULL, &rtos_heartbeat_logger_thread_attrs);
	osThreadNew(measurements_thread_fn, NULL, &measurements_thread_attrs);
 80005b4:	4a0c      	ldr	r2, [pc, #48]	; (80005e8 <bms_entry+0x5c>)
 80005b6:	2100      	movs	r1, #0
 80005b8:	480c      	ldr	r0, [pc, #48]	; (80005ec <bms_entry+0x60>)
 80005ba:	f005 f97b 	bl	80058b4 <osThreadNew>

	printf("starting RTOS scheduler...\r\n");
 80005be:	480c      	ldr	r0, [pc, #48]	; (80005f0 <bms_entry+0x64>)
 80005c0:	f007 ff42 	bl	8008448 <puts>
	osKernelStart();
 80005c4:	f005 f950 	bl	8005868 <osKernelStart>

	// should never reach this point, since we have handed execution over to the RTOS
	Error_Handler();
 80005c8:	f000 fe56 	bl	8001278 <Error_Handler>

	return 0;
 80005cc:	2300      	movs	r3, #0
}
 80005ce:	4618      	mov	r0, r3
 80005d0:	bd80      	pop	{r7, pc}
 80005d2:	bf00      	nop
 80005d4:	08009674 	.word	0x08009674
 80005d8:	08009688 	.word	0x08009688
 80005dc:	080096a8 	.word	0x080096a8
 80005e0:	08009980 	.word	0x08009980
 80005e4:	08001989 	.word	0x08001989
 80005e8:	080099a4 	.word	0x080099a4
 80005ec:	080019a9 	.word	0x080019a9
 80005f0:	080096c4 	.word	0x080096c4

080005f4 <Buffer_init>:
	0x585a, 0x8ba7, 0x4e3e, 0x450c, 0x8095
};

/////////////////////////////////////////////////////////////////////////////////////////////////////
// Buffer methods
Buffer Buffer_init() {
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b09c      	sub	sp, #112	; 0x70
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	6078      	str	r0, [r7, #4]
	Buffer buffer = {};
 80005fc:	f107 0308 	add.w	r3, r7, #8
 8000600:	2265      	movs	r2, #101	; 0x65
 8000602:	2100      	movs	r1, #0
 8000604:	4618      	mov	r0, r3
 8000606:	f007 fe91 	bl	800832c <memset>
	buffer.len = 0;
 800060a:	2300      	movs	r3, #0
 800060c:	723b      	strb	r3, [r7, #8]
	return buffer;
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	4618      	mov	r0, r3
 8000612:	f107 0308 	add.w	r3, r7, #8
 8000616:	2265      	movs	r2, #101	; 0x65
 8000618:	4619      	mov	r1, r3
 800061a:	f007 fe79 	bl	8008310 <memcpy>
}
 800061e:	6878      	ldr	r0, [r7, #4]
 8000620:	3770      	adds	r7, #112	; 0x70
 8000622:	46bd      	mov	sp, r7
 8000624:	bd80      	pop	{r7, pc}

08000626 <Buffer_append>:

void Buffer_append(Buffer* self, uint8_t val) {
 8000626:	b480      	push	{r7}
 8000628:	b085      	sub	sp, #20
 800062a:	af00      	add	r7, sp, #0
 800062c:	6078      	str	r0, [r7, #4]
 800062e:	460b      	mov	r3, r1
 8000630:	70fb      	strb	r3, [r7, #3]
	uint8_t indx = self->len;
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	781b      	ldrb	r3, [r3, #0]
 8000636:	73fb      	strb	r3, [r7, #15]
	self->data[indx] = val;
 8000638:	7bfb      	ldrb	r3, [r7, #15]
 800063a:	687a      	ldr	r2, [r7, #4]
 800063c:	4413      	add	r3, r2
 800063e:	78fa      	ldrb	r2, [r7, #3]
 8000640:	705a      	strb	r2, [r3, #1]
	self->len += 1;
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	781b      	ldrb	r3, [r3, #0]
 8000646:	3301      	adds	r3, #1
 8000648:	b2da      	uxtb	r2, r3
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	701a      	strb	r2, [r3, #0]
}
 800064e:	bf00      	nop
 8000650:	3714      	adds	r7, #20
 8000652:	46bd      	mov	sp, r7
 8000654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000658:	4770      	bx	lr

0800065a <Buffer_index>:

uint8_t Buffer_index(Buffer* self, uint8_t indx) {
 800065a:	b580      	push	{r7, lr}
 800065c:	b082      	sub	sp, #8
 800065e:	af00      	add	r7, sp, #0
 8000660:	6078      	str	r0, [r7, #4]
 8000662:	460b      	mov	r3, r1
 8000664:	70fb      	strb	r3, [r7, #3]
	if (indx >= self->len) { Error_Handler(); }
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	781b      	ldrb	r3, [r3, #0]
 800066a:	78fa      	ldrb	r2, [r7, #3]
 800066c:	429a      	cmp	r2, r3
 800066e:	d301      	bcc.n	8000674 <Buffer_index+0x1a>
 8000670:	f000 fe02 	bl	8001278 <Error_Handler>
	return self->data[indx];
 8000674:	78fb      	ldrb	r3, [r7, #3]
 8000676:	687a      	ldr	r2, [r7, #4]
 8000678:	4413      	add	r3, r2
 800067a:	785b      	ldrb	r3, [r3, #1]
}
 800067c:	4618      	mov	r0, r3
 800067e:	3708      	adds	r7, #8
 8000680:	46bd      	mov	sp, r7
 8000682:	bd80      	pop	{r7, pc}

08000684 <Buffer_set_index>:
void Buffer_set_index(Buffer* self, uint8_t indx, uint8_t val) {
 8000684:	b580      	push	{r7, lr}
 8000686:	b082      	sub	sp, #8
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
 800068c:	460b      	mov	r3, r1
 800068e:	70fb      	strb	r3, [r7, #3]
 8000690:	4613      	mov	r3, r2
 8000692:	70bb      	strb	r3, [r7, #2]
	if (indx >= self->len) { Error_Handler(); }
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	781b      	ldrb	r3, [r3, #0]
 8000698:	78fa      	ldrb	r2, [r7, #3]
 800069a:	429a      	cmp	r2, r3
 800069c:	d301      	bcc.n	80006a2 <Buffer_set_index+0x1e>
 800069e:	f000 fdeb 	bl	8001278 <Error_Handler>
	self->data[indx] = val;
 80006a2:	78fb      	ldrb	r3, [r7, #3]
 80006a4:	687a      	ldr	r2, [r7, #4]
 80006a6:	4413      	add	r3, r2
 80006a8:	78ba      	ldrb	r2, [r7, #2]
 80006aa:	705a      	strb	r2, [r3, #1]
}
 80006ac:	bf00      	nop
 80006ae:	3708      	adds	r7, #8
 80006b0:	46bd      	mov	sp, r7
 80006b2:	bd80      	pop	{r7, pc}

080006b4 <Buffer_add_pec>:

void Buffer_add_pec(Buffer* self) {
 80006b4:	b590      	push	{r4, r7, lr}
 80006b6:	b085      	sub	sp, #20
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]
	uint16_t remainder = 16;
 80006bc:	2310      	movs	r3, #16
 80006be:	81fb      	strh	r3, [r7, #14]
	uint16_t addr = 0;
 80006c0:	2300      	movs	r3, #0
 80006c2:	817b      	strh	r3, [r7, #10]
	for (uint8_t i = 0; i < self->len; i++) {
 80006c4:	2300      	movs	r3, #0
 80006c6:	737b      	strb	r3, [r7, #13]
 80006c8:	e01b      	b.n	8000702 <Buffer_add_pec+0x4e>
		addr = ( (remainder >> 7)^Buffer_index(self, i) ) & 0xff;
 80006ca:	89fb      	ldrh	r3, [r7, #14]
 80006cc:	09db      	lsrs	r3, r3, #7
 80006ce:	b29c      	uxth	r4, r3
 80006d0:	7b7b      	ldrb	r3, [r7, #13]
 80006d2:	4619      	mov	r1, r3
 80006d4:	6878      	ldr	r0, [r7, #4]
 80006d6:	f7ff ffc0 	bl	800065a <Buffer_index>
 80006da:	4603      	mov	r3, r0
 80006dc:	b29b      	uxth	r3, r3
 80006de:	4063      	eors	r3, r4
 80006e0:	b29b      	uxth	r3, r3
 80006e2:	b2db      	uxtb	r3, r3
 80006e4:	817b      	strh	r3, [r7, #10]
		remainder = (remainder << 8)^_CRC15_LUT[addr];
 80006e6:	89fb      	ldrh	r3, [r7, #14]
 80006e8:	021b      	lsls	r3, r3, #8
 80006ea:	b21a      	sxth	r2, r3
 80006ec:	897b      	ldrh	r3, [r7, #10]
 80006ee:	4912      	ldr	r1, [pc, #72]	; (8000738 <Buffer_add_pec+0x84>)
 80006f0:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80006f4:	b21b      	sxth	r3, r3
 80006f6:	4053      	eors	r3, r2
 80006f8:	b21b      	sxth	r3, r3
 80006fa:	81fb      	strh	r3, [r7, #14]
	for (uint8_t i = 0; i < self->len; i++) {
 80006fc:	7b7b      	ldrb	r3, [r7, #13]
 80006fe:	3301      	adds	r3, #1
 8000700:	737b      	strb	r3, [r7, #13]
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	781b      	ldrb	r3, [r3, #0]
 8000706:	7b7a      	ldrb	r2, [r7, #13]
 8000708:	429a      	cmp	r2, r3
 800070a:	d3de      	bcc.n	80006ca <Buffer_add_pec+0x16>
	}
	uint16_t pec = remainder*2;
 800070c:	89fb      	ldrh	r3, [r7, #14]
 800070e:	005b      	lsls	r3, r3, #1
 8000710:	813b      	strh	r3, [r7, #8]
	Buffer_append(self, (pec >> 8) & 0xff);
 8000712:	893b      	ldrh	r3, [r7, #8]
 8000714:	0a1b      	lsrs	r3, r3, #8
 8000716:	b29b      	uxth	r3, r3
 8000718:	b2db      	uxtb	r3, r3
 800071a:	4619      	mov	r1, r3
 800071c:	6878      	ldr	r0, [r7, #4]
 800071e:	f7ff ff82 	bl	8000626 <Buffer_append>
	Buffer_append(self, pec & 0xff);
 8000722:	893b      	ldrh	r3, [r7, #8]
 8000724:	b2db      	uxtb	r3, r3
 8000726:	4619      	mov	r1, r3
 8000728:	6878      	ldr	r0, [r7, #4]
 800072a:	f7ff ff7c 	bl	8000626 <Buffer_append>
}
 800072e:	bf00      	nop
 8000730:	3714      	adds	r7, #20
 8000732:	46bd      	mov	sp, r7
 8000734:	bd90      	pop	{r4, r7, pc}
 8000736:	bf00      	nop
 8000738:	08009768 	.word	0x08009768

0800073c <Buffer_check_pec>:

uint8_t Buffer_check_pec(Buffer* self) {
 800073c:	b590      	push	{r4, r7, lr}
 800073e:	b087      	sub	sp, #28
 8000740:	af00      	add	r7, sp, #0
 8000742:	6078      	str	r0, [r7, #4]
	uint16_t remainder = 16;
 8000744:	2310      	movs	r3, #16
 8000746:	82fb      	strh	r3, [r7, #22]
	uint16_t addr = 0;
 8000748:	2300      	movs	r3, #0
 800074a:	827b      	strh	r3, [r7, #18]
	for (uint8_t i = 0; i < self->len - 2; i++) {
 800074c:	2300      	movs	r3, #0
 800074e:	757b      	strb	r3, [r7, #21]
 8000750:	e01b      	b.n	800078a <Buffer_check_pec+0x4e>
		addr = ( (remainder >> 7)^Buffer_index(self, i) ) & 0xff;
 8000752:	8afb      	ldrh	r3, [r7, #22]
 8000754:	09db      	lsrs	r3, r3, #7
 8000756:	b29c      	uxth	r4, r3
 8000758:	7d7b      	ldrb	r3, [r7, #21]
 800075a:	4619      	mov	r1, r3
 800075c:	6878      	ldr	r0, [r7, #4]
 800075e:	f7ff ff7c 	bl	800065a <Buffer_index>
 8000762:	4603      	mov	r3, r0
 8000764:	b29b      	uxth	r3, r3
 8000766:	4063      	eors	r3, r4
 8000768:	b29b      	uxth	r3, r3
 800076a:	b2db      	uxtb	r3, r3
 800076c:	827b      	strh	r3, [r7, #18]
		remainder = (remainder << 8)^_CRC15_LUT[addr];
 800076e:	8afb      	ldrh	r3, [r7, #22]
 8000770:	021b      	lsls	r3, r3, #8
 8000772:	b21a      	sxth	r2, r3
 8000774:	8a7b      	ldrh	r3, [r7, #18]
 8000776:	491b      	ldr	r1, [pc, #108]	; (80007e4 <Buffer_check_pec+0xa8>)
 8000778:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800077c:	b21b      	sxth	r3, r3
 800077e:	4053      	eors	r3, r2
 8000780:	b21b      	sxth	r3, r3
 8000782:	82fb      	strh	r3, [r7, #22]
	for (uint8_t i = 0; i < self->len - 2; i++) {
 8000784:	7d7b      	ldrb	r3, [r7, #21]
 8000786:	3301      	adds	r3, #1
 8000788:	757b      	strb	r3, [r7, #21]
 800078a:	7d7a      	ldrb	r2, [r7, #21]
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	781b      	ldrb	r3, [r3, #0]
 8000790:	3b02      	subs	r3, #2
 8000792:	429a      	cmp	r2, r3
 8000794:	dbdd      	blt.n	8000752 <Buffer_check_pec+0x16>
	}
	uint16_t calc_pec = remainder*2;
 8000796:	8afb      	ldrh	r3, [r7, #22]
 8000798:	005b      	lsls	r3, r3, #1
 800079a:	823b      	strh	r3, [r7, #16]
	uint16_t act_pec = ((uint16_t)Buffer_index(self, self->len - 2) << 8) | Buffer_index(self, self->len - 1);
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	781b      	ldrb	r3, [r3, #0]
 80007a0:	3b02      	subs	r3, #2
 80007a2:	b2db      	uxtb	r3, r3
 80007a4:	4619      	mov	r1, r3
 80007a6:	6878      	ldr	r0, [r7, #4]
 80007a8:	f7ff ff57 	bl	800065a <Buffer_index>
 80007ac:	4603      	mov	r3, r0
 80007ae:	021b      	lsls	r3, r3, #8
 80007b0:	b21c      	sxth	r4, r3
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	781b      	ldrb	r3, [r3, #0]
 80007b6:	3b01      	subs	r3, #1
 80007b8:	b2db      	uxtb	r3, r3
 80007ba:	4619      	mov	r1, r3
 80007bc:	6878      	ldr	r0, [r7, #4]
 80007be:	f7ff ff4c 	bl	800065a <Buffer_index>
 80007c2:	4603      	mov	r3, r0
 80007c4:	b21b      	sxth	r3, r3
 80007c6:	4323      	orrs	r3, r4
 80007c8:	b21b      	sxth	r3, r3
 80007ca:	81fb      	strh	r3, [r7, #14]
	return calc_pec == act_pec;
 80007cc:	8a3a      	ldrh	r2, [r7, #16]
 80007ce:	89fb      	ldrh	r3, [r7, #14]
 80007d0:	429a      	cmp	r2, r3
 80007d2:	bf0c      	ite	eq
 80007d4:	2301      	moveq	r3, #1
 80007d6:	2300      	movne	r3, #0
 80007d8:	b2db      	uxtb	r3, r3
}
 80007da:	4618      	mov	r0, r3
 80007dc:	371c      	adds	r7, #28
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd90      	pop	{r4, r7, pc}
 80007e2:	bf00      	nop
 80007e4:	08009768 	.word	0x08009768

080007e8 <Buffer_print>:

void Buffer_print(Buffer* self) {
 80007e8:	b590      	push	{r4, r7, lr}
 80007ea:	f5ad 7d01 	sub.w	sp, sp, #516	; 0x204
 80007ee:	af00      	add	r7, sp, #0
 80007f0:	1d3b      	adds	r3, r7, #4
 80007f2:	6018      	str	r0, [r3, #0]
	char str[500];
	for (uint8_t i = 0; i < self->len; i++) {
 80007f4:	2300      	movs	r3, #0
 80007f6:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
 80007fa:	e019      	b.n	8000830 <Buffer_print+0x48>
		sprintf(str, "pkt byte %d: %d\r\n", i, Buffer_index(self, i));
 80007fc:	f897 41ff 	ldrb.w	r4, [r7, #511]	; 0x1ff
 8000800:	f897 21ff 	ldrb.w	r2, [r7, #511]	; 0x1ff
 8000804:	1d3b      	adds	r3, r7, #4
 8000806:	4611      	mov	r1, r2
 8000808:	6818      	ldr	r0, [r3, #0]
 800080a:	f7ff ff26 	bl	800065a <Buffer_index>
 800080e:	4603      	mov	r3, r0
 8000810:	f107 0008 	add.w	r0, r7, #8
 8000814:	4622      	mov	r2, r4
 8000816:	490e      	ldr	r1, [pc, #56]	; (8000850 <Buffer_print+0x68>)
 8000818:	f007 fe1e 	bl	8008458 <siprintf>
		printf(str);
 800081c:	f107 0308 	add.w	r3, r7, #8
 8000820:	4618      	mov	r0, r3
 8000822:	f007 fd8b 	bl	800833c <iprintf>
	for (uint8_t i = 0; i < self->len; i++) {
 8000826:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 800082a:	3301      	adds	r3, #1
 800082c:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
 8000830:	1d3b      	adds	r3, r7, #4
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	781b      	ldrb	r3, [r3, #0]
 8000836:	f897 21ff 	ldrb.w	r2, [r7, #511]	; 0x1ff
 800083a:	429a      	cmp	r2, r3
 800083c:	d3de      	bcc.n	80007fc <Buffer_print+0x14>
	}
	printf("\r\n");
 800083e:	4805      	ldr	r0, [pc, #20]	; (8000854 <Buffer_print+0x6c>)
 8000840:	f007 fe02 	bl	8008448 <puts>
}
 8000844:	bf00      	nop
 8000846:	f507 7701 	add.w	r7, r7, #516	; 0x204
 800084a:	46bd      	mov	sp, r7
 800084c:	bd90      	pop	{r4, r7, pc}
 800084e:	bf00      	nop
 8000850:	080096e0 	.word	0x080096e0
 8000854:	080096f4 	.word	0x080096f4

08000858 <Buffer_clear>:

void Buffer_clear(Buffer* self) {
 8000858:	b580      	push	{r7, lr}
 800085a:	b082      	sub	sp, #8
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
	while (self->len > 0) {
 8000860:	e00e      	b.n	8000880 <Buffer_clear+0x28>
		Buffer_set_index(self, self->len - 1, 0);
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	781b      	ldrb	r3, [r3, #0]
 8000866:	3b01      	subs	r3, #1
 8000868:	b2db      	uxtb	r3, r3
 800086a:	2200      	movs	r2, #0
 800086c:	4619      	mov	r1, r3
 800086e:	6878      	ldr	r0, [r7, #4]
 8000870:	f7ff ff08 	bl	8000684 <Buffer_set_index>
		self->len = self->len - 1;
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	781b      	ldrb	r3, [r3, #0]
 8000878:	3b01      	subs	r3, #1
 800087a:	b2da      	uxtb	r2, r3
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	701a      	strb	r2, [r3, #0]
	while (self->len > 0) {
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	781b      	ldrb	r3, [r3, #0]
 8000884:	2b00      	cmp	r3, #0
 8000886:	d1ec      	bne.n	8000862 <Buffer_clear+0xa>
	}
}
 8000888:	bf00      	nop
 800088a:	bf00      	nop
 800088c:	3708      	adds	r7, #8
 800088e:	46bd      	mov	sp, r7
 8000890:	bd80      	pop	{r7, pc}

08000892 <Ltc6813_init>:
/////////////////////////////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////////////////////////////
// Ltc6813 methods
Ltc6813 Ltc6813_init(SPI_HandleTypeDef spi, GPIO_TypeDef* cs_gpio_port, uint8_t cs_pin_num) {
 8000892:	b084      	sub	sp, #16
 8000894:	b590      	push	{r4, r7, lr}
 8000896:	f5ad 7d01 	sub.w	sp, sp, #516	; 0x204
 800089a:	af00      	add	r7, sp, #0
 800089c:	f107 046c 	add.w	r4, r7, #108	; 0x6c
 80008a0:	6020      	str	r0, [r4, #0]
 80008a2:	f507 7005 	add.w	r0, r7, #532	; 0x214
 80008a6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	Ltc6813 slave_device = {};
 80008aa:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80008ae:	4618      	mov	r0, r3
 80008b0:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80008b4:	461a      	mov	r2, r3
 80008b6:	2100      	movs	r1, #0
 80008b8:	f007 fd38 	bl	800832c <memset>
	slave_device._spi_interface = spi;
 80008bc:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80008c0:	4618      	mov	r0, r3
 80008c2:	f507 7305 	add.w	r3, r7, #532	; 0x214
 80008c6:	2258      	movs	r2, #88	; 0x58
 80008c8:	4619      	mov	r1, r3
 80008ca:	f007 fd21 	bl	8008310 <memcpy>

	// config CS pin as GPIO output
	cs_gpio_port->MODER &= ~(0b11u << (cs_pin_num*2));
 80008ce:	f8d7 326c 	ldr.w	r3, [r7, #620]	; 0x26c
 80008d2:	681a      	ldr	r2, [r3, #0]
 80008d4:	f897 3270 	ldrb.w	r3, [r7, #624]	; 0x270
 80008d8:	005b      	lsls	r3, r3, #1
 80008da:	2103      	movs	r1, #3
 80008dc:	fa01 f303 	lsl.w	r3, r1, r3
 80008e0:	43db      	mvns	r3, r3
 80008e2:	401a      	ands	r2, r3
 80008e4:	f8d7 326c 	ldr.w	r3, [r7, #620]	; 0x26c
 80008e8:	601a      	str	r2, [r3, #0]
	cs_gpio_port->MODER |= (0b01u << (cs_pin_num*2));
 80008ea:	f8d7 326c 	ldr.w	r3, [r7, #620]	; 0x26c
 80008ee:	681a      	ldr	r2, [r3, #0]
 80008f0:	f897 3270 	ldrb.w	r3, [r7, #624]	; 0x270
 80008f4:	005b      	lsls	r3, r3, #1
 80008f6:	2101      	movs	r1, #1
 80008f8:	fa01 f303 	lsl.w	r3, r1, r3
 80008fc:	431a      	orrs	r2, r3
 80008fe:	f8d7 326c 	ldr.w	r3, [r7, #620]	; 0x26c
 8000902:	601a      	str	r2, [r3, #0]

	slave_device._cs_gpio_port = cs_gpio_port;
 8000904:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000908:	f8d7 226c 	ldr.w	r2, [r7, #620]	; 0x26c
 800090c:	659a      	str	r2, [r3, #88]	; 0x58
	slave_device._cs_pin_num = cs_pin_num;
 800090e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000912:	f897 2270 	ldrb.w	r2, [r7, #624]	; 0x270
 8000916:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

	slave_device.cmd_bfr = Buffer_init();
 800091a:	f107 0470 	add.w	r4, r7, #112	; 0x70
 800091e:	463b      	mov	r3, r7
 8000920:	4618      	mov	r0, r3
 8000922:	f7ff fe67 	bl	80005f4 <Buffer_init>
 8000926:	463a      	mov	r2, r7
 8000928:	f104 035d 	add.w	r3, r4, #93	; 0x5d
 800092c:	4611      	mov	r1, r2
 800092e:	2265      	movs	r2, #101	; 0x65
 8000930:	4618      	mov	r0, r3
 8000932:	f007 fced 	bl	8008310 <memcpy>

	slave_device.cfga_bfr = Buffer_init();
 8000936:	f107 0470 	add.w	r4, r7, #112	; 0x70
 800093a:	463b      	mov	r3, r7
 800093c:	4618      	mov	r0, r3
 800093e:	f7ff fe59 	bl	80005f4 <Buffer_init>
 8000942:	463a      	mov	r2, r7
 8000944:	f104 03c2 	add.w	r3, r4, #194	; 0xc2
 8000948:	4611      	mov	r1, r2
 800094a:	2265      	movs	r2, #101	; 0x65
 800094c:	4618      	mov	r0, r3
 800094e:	f007 fcdf 	bl	8008310 <memcpy>
	slave_device.cfgb_bfr = Buffer_init();
 8000952:	f107 0470 	add.w	r4, r7, #112	; 0x70
 8000956:	463b      	mov	r3, r7
 8000958:	4618      	mov	r0, r3
 800095a:	f7ff fe4b 	bl	80005f4 <Buffer_init>
 800095e:	463a      	mov	r2, r7
 8000960:	f204 1327 	addw	r3, r4, #295	; 0x127
 8000964:	4611      	mov	r1, r2
 8000966:	2265      	movs	r2, #101	; 0x65
 8000968:	4618      	mov	r0, r3
 800096a:	f007 fcd1 	bl	8008310 <memcpy>

	slave_device.timeout = 10000;
 800096e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000972:	f242 7210 	movw	r2, #10000	; 0x2710
 8000976:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c

	Ltc6813_cs_high(&slave_device);
 800097a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800097e:	4618      	mov	r0, r3
 8000980:	f000 f82b 	bl	80009da <Ltc6813_cs_high>

	return slave_device;
 8000984:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000988:	681a      	ldr	r2, [r3, #0]
 800098a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000996:	461a      	mov	r2, r3
 8000998:	f007 fcba 	bl	8008310 <memcpy>
}
 800099c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80009a0:	6818      	ldr	r0, [r3, #0]
 80009a2:	f507 7701 	add.w	r7, r7, #516	; 0x204
 80009a6:	46bd      	mov	sp, r7
 80009a8:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80009ac:	b004      	add	sp, #16
 80009ae:	4770      	bx	lr

080009b0 <Ltc6813_cs_low>:

void Ltc6813_cs_low(Ltc6813* self) { HAL_GPIO_WritePin(self->_cs_gpio_port, (1u << self->_cs_pin_num), 0); }
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b082      	sub	sp, #8
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	6d98      	ldr	r0, [r3, #88]	; 0x58
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80009c2:	461a      	mov	r2, r3
 80009c4:	2301      	movs	r3, #1
 80009c6:	4093      	lsls	r3, r2
 80009c8:	b29b      	uxth	r3, r3
 80009ca:	2200      	movs	r2, #0
 80009cc:	4619      	mov	r1, r3
 80009ce:	f001 fea9 	bl	8002724 <HAL_GPIO_WritePin>
 80009d2:	bf00      	nop
 80009d4:	3708      	adds	r7, #8
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}

080009da <Ltc6813_cs_high>:
void Ltc6813_cs_high(Ltc6813* self) { HAL_GPIO_WritePin(self->_cs_gpio_port, (1u << self->_cs_pin_num), 1); }
 80009da:	b580      	push	{r7, lr}
 80009dc:	b082      	sub	sp, #8
 80009de:	af00      	add	r7, sp, #0
 80009e0:	6078      	str	r0, [r7, #4]
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	6d98      	ldr	r0, [r3, #88]	; 0x58
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80009ec:	461a      	mov	r2, r3
 80009ee:	2301      	movs	r3, #1
 80009f0:	4093      	lsls	r3, r2
 80009f2:	b29b      	uxth	r3, r3
 80009f4:	2201      	movs	r2, #1
 80009f6:	4619      	mov	r1, r3
 80009f8:	f001 fe94 	bl	8002724 <HAL_GPIO_WritePin>
 80009fc:	bf00      	nop
 80009fe:	3708      	adds	r7, #8
 8000a00:	46bd      	mov	sp, r7
 8000a02:	bd80      	pop	{r7, pc}

08000a04 <Ltc6813_wakeup_sleep>:

// WAKEUP FUNCTIONS:
// setting CS low will send a long isoSPI pulse (reference: page 18 of LTC6820 datasheet)
void Ltc6813_wakeup_sleep(Ltc6813* self) {
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b082      	sub	sp, #8
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
	Ltc6813_cs_low(self);
 8000a0c:	6878      	ldr	r0, [r7, #4]
 8000a0e:	f7ff ffcf 	bl	80009b0 <Ltc6813_cs_low>
	delay_us(410);		// according to datasheet, t_wake = 400us
 8000a12:	f44f 70cd 	mov.w	r0, #410	; 0x19a
 8000a16:	f000 ff9d 	bl	8001954 <delay_us>
	Ltc6813_cs_high(self);
 8000a1a:	6878      	ldr	r0, [r7, #4]
 8000a1c:	f7ff ffdd 	bl	80009da <Ltc6813_cs_high>
	delay_us(30);
 8000a20:	201e      	movs	r0, #30
 8000a22:	f000 ff97 	bl	8001954 <delay_us>
}
 8000a26:	bf00      	nop
 8000a28:	3708      	adds	r7, #8
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd80      	pop	{r7, pc}

08000a2e <Ltc6813_send_cmd>:
	Ltc6813_cs_high(self);
}

// READ COMMAND FUNCTIONS:
// commands to send read commands and receive data back (page 60 of LTC6813 datasheet)
void Ltc6813_send_cmd(Ltc6813* self, uint16_t cmd) {
 8000a2e:	b580      	push	{r7, lr}
 8000a30:	b082      	sub	sp, #8
 8000a32:	af00      	add	r7, sp, #0
 8000a34:	6078      	str	r0, [r7, #4]
 8000a36:	460b      	mov	r3, r1
 8000a38:	807b      	strh	r3, [r7, #2]
	Buffer_clear(&self->cmd_bfr);
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	335d      	adds	r3, #93	; 0x5d
 8000a3e:	4618      	mov	r0, r3
 8000a40:	f7ff ff0a 	bl	8000858 <Buffer_clear>

	Buffer_append(&self->cmd_bfr, (cmd >> 8) & 0xff);
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	f103 025d 	add.w	r2, r3, #93	; 0x5d
 8000a4a:	887b      	ldrh	r3, [r7, #2]
 8000a4c:	0a1b      	lsrs	r3, r3, #8
 8000a4e:	b29b      	uxth	r3, r3
 8000a50:	b2db      	uxtb	r3, r3
 8000a52:	4619      	mov	r1, r3
 8000a54:	4610      	mov	r0, r2
 8000a56:	f7ff fde6 	bl	8000626 <Buffer_append>
	Buffer_append(&self->cmd_bfr, cmd & 0xff);
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	335d      	adds	r3, #93	; 0x5d
 8000a5e:	887a      	ldrh	r2, [r7, #2]
 8000a60:	b2d2      	uxtb	r2, r2
 8000a62:	4611      	mov	r1, r2
 8000a64:	4618      	mov	r0, r3
 8000a66:	f7ff fdde 	bl	8000626 <Buffer_append>

	Buffer_add_pec(&self->cmd_bfr);
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	335d      	adds	r3, #93	; 0x5d
 8000a6e:	4618      	mov	r0, r3
 8000a70:	f7ff fe20 	bl	80006b4 <Buffer_add_pec>

	HAL_SPI_Transmit(&self->_spi_interface, self->cmd_bfr.data, self->cmd_bfr.len, self->timeout);
 8000a74:	6878      	ldr	r0, [r7, #4]
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	f103 015e 	add.w	r1, r3, #94	; 0x5e
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8000a82:	b29a      	uxth	r2, r3
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	f8d3 318c 	ldr.w	r3, [r3, #396]	; 0x18c
 8000a8a:	f002 fbac 	bl	80031e6 <HAL_SPI_Transmit>
}
 8000a8e:	bf00      	nop
 8000a90:	3708      	adds	r7, #8
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}

08000a96 <Ltc6813_read_cfga>:

uint8_t Ltc6813_read_cfga(Ltc6813* self) {
 8000a96:	b580      	push	{r7, lr}
 8000a98:	b084      	sub	sp, #16
 8000a9a:	af00      	add	r7, sp, #0
 8000a9c:	6078      	str	r0, [r7, #4]
	Buffer_clear(&self->cfga_bfr);
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	33c2      	adds	r3, #194	; 0xc2
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	f7ff fed8 	bl	8000858 <Buffer_clear>

	self->cfga_bfr.len = 8;
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	2208      	movs	r2, #8
 8000aac:	f883 20c2 	strb.w	r2, [r3, #194]	; 0xc2

	Ltc6813_cs_low(self);
 8000ab0:	6878      	ldr	r0, [r7, #4]
 8000ab2:	f7ff ff7d 	bl	80009b0 <Ltc6813_cs_low>

	Ltc6813_send_cmd(self, RDCFGA);
 8000ab6:	2102      	movs	r1, #2
 8000ab8:	6878      	ldr	r0, [r7, #4]
 8000aba:	f7ff ffb8 	bl	8000a2e <Ltc6813_send_cmd>
	HAL_SPI_Receive(&self->_spi_interface, self->cfga_bfr.data, self->cfga_bfr.len, self->timeout);
 8000abe:	6878      	ldr	r0, [r7, #4]
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	f103 01c3 	add.w	r1, r3, #195	; 0xc3
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	f893 30c2 	ldrb.w	r3, [r3, #194]	; 0xc2
 8000acc:	b29a      	uxth	r2, r3
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	f8d3 318c 	ldr.w	r3, [r3, #396]	; 0x18c
 8000ad4:	f002 fcc3 	bl	800345e <HAL_SPI_Receive>

	Ltc6813_cs_high(self);
 8000ad8:	6878      	ldr	r0, [r7, #4]
 8000ada:	f7ff ff7e 	bl	80009da <Ltc6813_cs_high>

	uint8_t pec_success = Buffer_check_pec(&self->cfga_bfr);
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	33c2      	adds	r3, #194	; 0xc2
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	f7ff fe2a 	bl	800073c <Buffer_check_pec>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	73fb      	strb	r3, [r7, #15]
	self->cfga_bfr.len = 6;
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	2206      	movs	r2, #6
 8000af0:	f883 20c2 	strb.w	r2, [r3, #194]	; 0xc2

	return pec_success;
 8000af4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000af6:	4618      	mov	r0, r3
 8000af8:	3710      	adds	r7, #16
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}

08000afe <Ltc6813_read_cfgb>:

uint8_t Ltc6813_read_cfgb(Ltc6813* self) {
 8000afe:	b580      	push	{r7, lr}
 8000b00:	b084      	sub	sp, #16
 8000b02:	af00      	add	r7, sp, #0
 8000b04:	6078      	str	r0, [r7, #4]
	Buffer_clear(&self->cfgb_bfr);
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	f203 1327 	addw	r3, r3, #295	; 0x127
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	f7ff fea3 	bl	8000858 <Buffer_clear>

	self->cfgb_bfr.len = 8;
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	2208      	movs	r2, #8
 8000b16:	f883 2127 	strb.w	r2, [r3, #295]	; 0x127

	Ltc6813_cs_low(self);
 8000b1a:	6878      	ldr	r0, [r7, #4]
 8000b1c:	f7ff ff48 	bl	80009b0 <Ltc6813_cs_low>

	Ltc6813_send_cmd(self, RDCFGB);
 8000b20:	2126      	movs	r1, #38	; 0x26
 8000b22:	6878      	ldr	r0, [r7, #4]
 8000b24:	f7ff ff83 	bl	8000a2e <Ltc6813_send_cmd>
	HAL_SPI_Receive(&self->_spi_interface, self->cfgb_bfr.data, self->cfgb_bfr.len, self->timeout);
 8000b28:	6878      	ldr	r0, [r7, #4]
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	f893 3127 	ldrb.w	r3, [r3, #295]	; 0x127
 8000b36:	b29a      	uxth	r2, r3
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	f8d3 318c 	ldr.w	r3, [r3, #396]	; 0x18c
 8000b3e:	f002 fc8e 	bl	800345e <HAL_SPI_Receive>

	Ltc6813_cs_high(self);
 8000b42:	6878      	ldr	r0, [r7, #4]
 8000b44:	f7ff ff49 	bl	80009da <Ltc6813_cs_high>

	uint8_t pec_success = Buffer_check_pec(&self->cfgb_bfr);
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	f203 1327 	addw	r3, r3, #295	; 0x127
 8000b4e:	4618      	mov	r0, r3
 8000b50:	f7ff fdf4 	bl	800073c <Buffer_check_pec>
 8000b54:	4603      	mov	r3, r0
 8000b56:	73fb      	strb	r3, [r7, #15]
	self->cfgb_bfr.len = 6;
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	2206      	movs	r2, #6
 8000b5c:	f883 2127 	strb.w	r2, [r3, #295]	; 0x127

	return pec_success;
 8000b60:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b62:	4618      	mov	r0, r3
 8000b64:	3710      	adds	r7, #16
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}

08000b6a <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b6a:	b580      	push	{r7, lr}
 8000b6c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b6e:	f000 ffbb 	bl	8001ae8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b72:	f000 f815 	bl	8000ba0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b76:	f000 fae3 	bl	8001140 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000b7a:	f000 f9fb 	bl	8000f74 <MX_TIM2_Init>
  MX_ADC1_Init();
 8000b7e:	f000 f879 	bl	8000c74 <MX_ADC1_Init>
  MX_SPI1_Init();
 8000b82:	f000 f8ff 	bl	8000d84 <MX_SPI1_Init>
  MX_TIM1_Init();
 8000b86:	f000 f933 	bl	8000df0 <MX_TIM1_Init>
  MX_TIM3_Init();
 8000b8a:	f000 fa3f 	bl	800100c <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8000b8e:	f000 faad 	bl	80010ec <MX_USART1_UART_Init>
  MX_CAN1_Init();
 8000b92:	f000 f8c1 	bl	8000d18 <MX_CAN1_Init>
  /* USER CODE BEGIN 2 */
  return bms_entry();
 8000b96:	f7ff fcf9 	bl	800058c <bms_entry>
 8000b9a:	4603      	mov	r3, r0
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	bd80      	pop	{r7, pc}

08000ba0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b094      	sub	sp, #80	; 0x50
 8000ba4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ba6:	f107 0320 	add.w	r3, r7, #32
 8000baa:	2230      	movs	r2, #48	; 0x30
 8000bac:	2100      	movs	r1, #0
 8000bae:	4618      	mov	r0, r3
 8000bb0:	f007 fbbc 	bl	800832c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bb4:	f107 030c 	add.w	r3, r7, #12
 8000bb8:	2200      	movs	r2, #0
 8000bba:	601a      	str	r2, [r3, #0]
 8000bbc:	605a      	str	r2, [r3, #4]
 8000bbe:	609a      	str	r2, [r3, #8]
 8000bc0:	60da      	str	r2, [r3, #12]
 8000bc2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	60bb      	str	r3, [r7, #8]
 8000bc8:	4b28      	ldr	r3, [pc, #160]	; (8000c6c <SystemClock_Config+0xcc>)
 8000bca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bcc:	4a27      	ldr	r2, [pc, #156]	; (8000c6c <SystemClock_Config+0xcc>)
 8000bce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bd2:	6413      	str	r3, [r2, #64]	; 0x40
 8000bd4:	4b25      	ldr	r3, [pc, #148]	; (8000c6c <SystemClock_Config+0xcc>)
 8000bd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bd8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bdc:	60bb      	str	r3, [r7, #8]
 8000bde:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000be0:	2300      	movs	r3, #0
 8000be2:	607b      	str	r3, [r7, #4]
 8000be4:	4b22      	ldr	r3, [pc, #136]	; (8000c70 <SystemClock_Config+0xd0>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	4a21      	ldr	r2, [pc, #132]	; (8000c70 <SystemClock_Config+0xd0>)
 8000bea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bee:	6013      	str	r3, [r2, #0]
 8000bf0:	4b1f      	ldr	r3, [pc, #124]	; (8000c70 <SystemClock_Config+0xd0>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bf8:	607b      	str	r3, [r7, #4]
 8000bfa:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000bfc:	2301      	movs	r3, #1
 8000bfe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c00:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c04:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c06:	2302      	movs	r3, #2
 8000c08:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c0a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000c0e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000c10:	2308      	movs	r3, #8
 8000c12:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 160;
 8000c14:	23a0      	movs	r3, #160	; 0xa0
 8000c16:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000c18:	2302      	movs	r3, #2
 8000c1a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000c1c:	2304      	movs	r3, #4
 8000c1e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c20:	f107 0320 	add.w	r3, r7, #32
 8000c24:	4618      	mov	r0, r3
 8000c26:	f001 fdb1 	bl	800278c <HAL_RCC_OscConfig>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d001      	beq.n	8000c34 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000c30:	f000 fb22 	bl	8001278 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c34:	230f      	movs	r3, #15
 8000c36:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c38:	2302      	movs	r3, #2
 8000c3a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000c40:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000c44:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000c46:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c4a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000c4c:	f107 030c 	add.w	r3, r7, #12
 8000c50:	2105      	movs	r1, #5
 8000c52:	4618      	mov	r0, r3
 8000c54:	f002 f812 	bl	8002c7c <HAL_RCC_ClockConfig>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d001      	beq.n	8000c62 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000c5e:	f000 fb0b 	bl	8001278 <Error_Handler>
  }
}
 8000c62:	bf00      	nop
 8000c64:	3750      	adds	r7, #80	; 0x50
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	40023800 	.word	0x40023800
 8000c70:	40007000 	.word	0x40007000

08000c74 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b084      	sub	sp, #16
 8000c78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000c7a:	463b      	mov	r3, r7
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	601a      	str	r2, [r3, #0]
 8000c80:	605a      	str	r2, [r3, #4]
 8000c82:	609a      	str	r2, [r3, #8]
 8000c84:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000c86:	4b21      	ldr	r3, [pc, #132]	; (8000d0c <MX_ADC1_Init+0x98>)
 8000c88:	4a21      	ldr	r2, [pc, #132]	; (8000d10 <MX_ADC1_Init+0x9c>)
 8000c8a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000c8c:	4b1f      	ldr	r3, [pc, #124]	; (8000d0c <MX_ADC1_Init+0x98>)
 8000c8e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000c92:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000c94:	4b1d      	ldr	r3, [pc, #116]	; (8000d0c <MX_ADC1_Init+0x98>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000c9a:	4b1c      	ldr	r3, [pc, #112]	; (8000d0c <MX_ADC1_Init+0x98>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000ca0:	4b1a      	ldr	r3, [pc, #104]	; (8000d0c <MX_ADC1_Init+0x98>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000ca6:	4b19      	ldr	r3, [pc, #100]	; (8000d0c <MX_ADC1_Init+0x98>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000cae:	4b17      	ldr	r3, [pc, #92]	; (8000d0c <MX_ADC1_Init+0x98>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000cb4:	4b15      	ldr	r3, [pc, #84]	; (8000d0c <MX_ADC1_Init+0x98>)
 8000cb6:	4a17      	ldr	r2, [pc, #92]	; (8000d14 <MX_ADC1_Init+0xa0>)
 8000cb8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000cba:	4b14      	ldr	r3, [pc, #80]	; (8000d0c <MX_ADC1_Init+0x98>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000cc0:	4b12      	ldr	r3, [pc, #72]	; (8000d0c <MX_ADC1_Init+0x98>)
 8000cc2:	2201      	movs	r2, #1
 8000cc4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000cc6:	4b11      	ldr	r3, [pc, #68]	; (8000d0c <MX_ADC1_Init+0x98>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000cce:	4b0f      	ldr	r3, [pc, #60]	; (8000d0c <MX_ADC1_Init+0x98>)
 8000cd0:	2201      	movs	r2, #1
 8000cd2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000cd4:	480d      	ldr	r0, [pc, #52]	; (8000d0c <MX_ADC1_Init+0x98>)
 8000cd6:	f000 ff49 	bl	8001b6c <HAL_ADC_Init>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d001      	beq.n	8000ce4 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000ce0:	f000 faca 	bl	8001278 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000ce4:	2301      	movs	r3, #1
 8000ce6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000ce8:	2301      	movs	r3, #1
 8000cea:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000cec:	2300      	movs	r3, #0
 8000cee:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000cf0:	463b      	mov	r3, r7
 8000cf2:	4619      	mov	r1, r3
 8000cf4:	4805      	ldr	r0, [pc, #20]	; (8000d0c <MX_ADC1_Init+0x98>)
 8000cf6:	f000 ff7d 	bl	8001bf4 <HAL_ADC_ConfigChannel>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d001      	beq.n	8000d04 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000d00:	f000 faba 	bl	8001278 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000d04:	bf00      	nop
 8000d06:	3710      	adds	r7, #16
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	bd80      	pop	{r7, pc}
 8000d0c:	20004a38 	.word	0x20004a38
 8000d10:	40012000 	.word	0x40012000
 8000d14:	0f000001 	.word	0x0f000001

08000d18 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000d1c:	4b17      	ldr	r3, [pc, #92]	; (8000d7c <MX_CAN1_Init+0x64>)
 8000d1e:	4a18      	ldr	r2, [pc, #96]	; (8000d80 <MX_CAN1_Init+0x68>)
 8000d20:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 5;
 8000d22:	4b16      	ldr	r3, [pc, #88]	; (8000d7c <MX_CAN1_Init+0x64>)
 8000d24:	2205      	movs	r2, #5
 8000d26:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000d28:	4b14      	ldr	r3, [pc, #80]	; (8000d7c <MX_CAN1_Init+0x64>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000d2e:	4b13      	ldr	r3, [pc, #76]	; (8000d7c <MX_CAN1_Init+0x64>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_13TQ;
 8000d34:	4b11      	ldr	r3, [pc, #68]	; (8000d7c <MX_CAN1_Init+0x64>)
 8000d36:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 8000d3a:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000d3c:	4b0f      	ldr	r3, [pc, #60]	; (8000d7c <MX_CAN1_Init+0x64>)
 8000d3e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000d42:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000d44:	4b0d      	ldr	r3, [pc, #52]	; (8000d7c <MX_CAN1_Init+0x64>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000d4a:	4b0c      	ldr	r3, [pc, #48]	; (8000d7c <MX_CAN1_Init+0x64>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000d50:	4b0a      	ldr	r3, [pc, #40]	; (8000d7c <MX_CAN1_Init+0x64>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000d56:	4b09      	ldr	r3, [pc, #36]	; (8000d7c <MX_CAN1_Init+0x64>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000d5c:	4b07      	ldr	r3, [pc, #28]	; (8000d7c <MX_CAN1_Init+0x64>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000d62:	4b06      	ldr	r3, [pc, #24]	; (8000d7c <MX_CAN1_Init+0x64>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000d68:	4804      	ldr	r0, [pc, #16]	; (8000d7c <MX_CAN1_Init+0x64>)
 8000d6a:	f001 f961 	bl	8002030 <HAL_CAN_Init>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d001      	beq.n	8000d78 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8000d74:	f000 fa80 	bl	8001278 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000d78:	bf00      	nop
 8000d7a:	bd80      	pop	{r7, pc}
 8000d7c:	20004bac 	.word	0x20004bac
 8000d80:	40006400 	.word	0x40006400

08000d84 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000d88:	4b17      	ldr	r3, [pc, #92]	; (8000de8 <MX_SPI1_Init+0x64>)
 8000d8a:	4a18      	ldr	r2, [pc, #96]	; (8000dec <MX_SPI1_Init+0x68>)
 8000d8c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000d8e:	4b16      	ldr	r3, [pc, #88]	; (8000de8 <MX_SPI1_Init+0x64>)
 8000d90:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000d94:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000d96:	4b14      	ldr	r3, [pc, #80]	; (8000de8 <MX_SPI1_Init+0x64>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000d9c:	4b12      	ldr	r3, [pc, #72]	; (8000de8 <MX_SPI1_Init+0x64>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000da2:	4b11      	ldr	r3, [pc, #68]	; (8000de8 <MX_SPI1_Init+0x64>)
 8000da4:	2202      	movs	r2, #2
 8000da6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000da8:	4b0f      	ldr	r3, [pc, #60]	; (8000de8 <MX_SPI1_Init+0x64>)
 8000daa:	2201      	movs	r2, #1
 8000dac:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000dae:	4b0e      	ldr	r3, [pc, #56]	; (8000de8 <MX_SPI1_Init+0x64>)
 8000db0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000db4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8000db6:	4b0c      	ldr	r3, [pc, #48]	; (8000de8 <MX_SPI1_Init+0x64>)
 8000db8:	2230      	movs	r2, #48	; 0x30
 8000dba:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000dbc:	4b0a      	ldr	r3, [pc, #40]	; (8000de8 <MX_SPI1_Init+0x64>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000dc2:	4b09      	ldr	r3, [pc, #36]	; (8000de8 <MX_SPI1_Init+0x64>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000dc8:	4b07      	ldr	r3, [pc, #28]	; (8000de8 <MX_SPI1_Init+0x64>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000dce:	4b06      	ldr	r3, [pc, #24]	; (8000de8 <MX_SPI1_Init+0x64>)
 8000dd0:	220a      	movs	r2, #10
 8000dd2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000dd4:	4804      	ldr	r0, [pc, #16]	; (8000de8 <MX_SPI1_Init+0x64>)
 8000dd6:	f002 f97d 	bl	80030d4 <HAL_SPI_Init>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d001      	beq.n	8000de4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000de0:	f000 fa4a 	bl	8001278 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000de4:	bf00      	nop
 8000de6:	bd80      	pop	{r7, pc}
 8000de8:	20004b0c 	.word	0x20004b0c
 8000dec:	40013000 	.word	0x40013000

08000df0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b096      	sub	sp, #88	; 0x58
 8000df4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000df6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	601a      	str	r2, [r3, #0]
 8000dfe:	605a      	str	r2, [r3, #4]
 8000e00:	609a      	str	r2, [r3, #8]
 8000e02:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e04:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000e08:	2200      	movs	r2, #0
 8000e0a:	601a      	str	r2, [r3, #0]
 8000e0c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e12:	2200      	movs	r2, #0
 8000e14:	601a      	str	r2, [r3, #0]
 8000e16:	605a      	str	r2, [r3, #4]
 8000e18:	609a      	str	r2, [r3, #8]
 8000e1a:	60da      	str	r2, [r3, #12]
 8000e1c:	611a      	str	r2, [r3, #16]
 8000e1e:	615a      	str	r2, [r3, #20]
 8000e20:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000e22:	1d3b      	adds	r3, r7, #4
 8000e24:	2220      	movs	r2, #32
 8000e26:	2100      	movs	r1, #0
 8000e28:	4618      	mov	r0, r3
 8000e2a:	f007 fa7f 	bl	800832c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000e2e:	4b4f      	ldr	r3, [pc, #316]	; (8000f6c <MX_TIM1_Init+0x17c>)
 8000e30:	4a4f      	ldr	r2, [pc, #316]	; (8000f70 <MX_TIM1_Init+0x180>)
 8000e32:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 159;
 8000e34:	4b4d      	ldr	r3, [pc, #308]	; (8000f6c <MX_TIM1_Init+0x17c>)
 8000e36:	229f      	movs	r2, #159	; 0x9f
 8000e38:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e3a:	4b4c      	ldr	r3, [pc, #304]	; (8000f6c <MX_TIM1_Init+0x17c>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000e40:	4b4a      	ldr	r3, [pc, #296]	; (8000f6c <MX_TIM1_Init+0x17c>)
 8000e42:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e46:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e48:	4b48      	ldr	r3, [pc, #288]	; (8000f6c <MX_TIM1_Init+0x17c>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000e4e:	4b47      	ldr	r3, [pc, #284]	; (8000f6c <MX_TIM1_Init+0x17c>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e54:	4b45      	ldr	r3, [pc, #276]	; (8000f6c <MX_TIM1_Init+0x17c>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000e5a:	4844      	ldr	r0, [pc, #272]	; (8000f6c <MX_TIM1_Init+0x17c>)
 8000e5c:	f002 fee2 	bl	8003c24 <HAL_TIM_Base_Init>
 8000e60:	4603      	mov	r3, r0
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d001      	beq.n	8000e6a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000e66:	f000 fa07 	bl	8001278 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e6a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e6e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000e70:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000e74:	4619      	mov	r1, r3
 8000e76:	483d      	ldr	r0, [pc, #244]	; (8000f6c <MX_TIM1_Init+0x17c>)
 8000e78:	f003 fbba 	bl	80045f0 <HAL_TIM_ConfigClockSource>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d001      	beq.n	8000e86 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000e82:	f000 f9f9 	bl	8001278 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000e86:	4839      	ldr	r0, [pc, #228]	; (8000f6c <MX_TIM1_Init+0x17c>)
 8000e88:	f003 f84d 	bl	8003f26 <HAL_TIM_PWM_Init>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d001      	beq.n	8000e96 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8000e92:	f000 f9f1 	bl	8001278 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8000e96:	4835      	ldr	r0, [pc, #212]	; (8000f6c <MX_TIM1_Init+0x17c>)
 8000e98:	f002 ffec 	bl	8003e74 <HAL_TIM_OC_Init>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d001      	beq.n	8000ea6 <MX_TIM1_Init+0xb6>
  {
    Error_Handler();
 8000ea2:	f000 f9e9 	bl	8001278 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000eae:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000eb2:	4619      	mov	r1, r3
 8000eb4:	482d      	ldr	r0, [pc, #180]	; (8000f6c <MX_TIM1_Init+0x17c>)
 8000eb6:	f004 f89b 	bl	8004ff0 <HAL_TIMEx_MasterConfigSynchronization>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d001      	beq.n	8000ec4 <MX_TIM1_Init+0xd4>
  {
    Error_Handler();
 8000ec0:	f000 f9da 	bl	8001278 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ec4:	2360      	movs	r3, #96	; 0x60
 8000ec6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000edc:	2300      	movs	r3, #0
 8000ede:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ee0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	4619      	mov	r1, r3
 8000ee8:	4820      	ldr	r0, [pc, #128]	; (8000f6c <MX_TIM1_Init+0x17c>)
 8000eea:	f003 fac3 	bl	8004474 <HAL_TIM_PWM_ConfigChannel>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d001      	beq.n	8000ef8 <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 8000ef4:	f000 f9c0 	bl	8001278 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000ef8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000efc:	2204      	movs	r2, #4
 8000efe:	4619      	mov	r1, r3
 8000f00:	481a      	ldr	r0, [pc, #104]	; (8000f6c <MX_TIM1_Init+0x17c>)
 8000f02:	f003 fab7 	bl	8004474 <HAL_TIM_PWM_ConfigChannel>
 8000f06:	4603      	mov	r3, r0
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d001      	beq.n	8000f10 <MX_TIM1_Init+0x120>
  {
    Error_Handler();
 8000f0c:	f000 f9b4 	bl	8001278 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000f10:	2300      	movs	r3, #0
 8000f12:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000f14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f18:	2208      	movs	r2, #8
 8000f1a:	4619      	mov	r1, r3
 8000f1c:	4813      	ldr	r0, [pc, #76]	; (8000f6c <MX_TIM1_Init+0x17c>)
 8000f1e:	f003 f9bd 	bl	800429c <HAL_TIM_OC_ConfigChannel>
 8000f22:	4603      	mov	r3, r0
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d001      	beq.n	8000f2c <MX_TIM1_Init+0x13c>
  {
    Error_Handler();
 8000f28:	f000 f9a6 	bl	8001278 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000f30:	2300      	movs	r3, #0
 8000f32:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000f34:	2300      	movs	r3, #0
 8000f36:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000f40:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f44:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000f46:	2300      	movs	r3, #0
 8000f48:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000f4a:	1d3b      	adds	r3, r7, #4
 8000f4c:	4619      	mov	r1, r3
 8000f4e:	4807      	ldr	r0, [pc, #28]	; (8000f6c <MX_TIM1_Init+0x17c>)
 8000f50:	f004 f8ca 	bl	80050e8 <HAL_TIMEx_ConfigBreakDeadTime>
 8000f54:	4603      	mov	r3, r0
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d001      	beq.n	8000f5e <MX_TIM1_Init+0x16e>
  {
    Error_Handler();
 8000f5a:	f000 f98d 	bl	8001278 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000f5e:	4803      	ldr	r0, [pc, #12]	; (8000f6c <MX_TIM1_Init+0x17c>)
 8000f60:	f000 fb2e 	bl	80015c0 <HAL_TIM_MspPostInit>

}
 8000f64:	bf00      	nop
 8000f66:	3758      	adds	r7, #88	; 0x58
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}
 8000f6c:	20004ac4 	.word	0x20004ac4
 8000f70:	40010000 	.word	0x40010000

08000f74 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b086      	sub	sp, #24
 8000f78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f7a:	f107 0308 	add.w	r3, r7, #8
 8000f7e:	2200      	movs	r2, #0
 8000f80:	601a      	str	r2, [r3, #0]
 8000f82:	605a      	str	r2, [r3, #4]
 8000f84:	609a      	str	r2, [r3, #8]
 8000f86:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f88:	463b      	mov	r3, r7
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	601a      	str	r2, [r3, #0]
 8000f8e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000f90:	4b1d      	ldr	r3, [pc, #116]	; (8001008 <MX_TIM2_Init+0x94>)
 8000f92:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f96:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 79;
 8000f98:	4b1b      	ldr	r3, [pc, #108]	; (8001008 <MX_TIM2_Init+0x94>)
 8000f9a:	224f      	movs	r2, #79	; 0x4f
 8000f9c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f9e:	4b1a      	ldr	r3, [pc, #104]	; (8001008 <MX_TIM2_Init+0x94>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000fa4:	4b18      	ldr	r3, [pc, #96]	; (8001008 <MX_TIM2_Init+0x94>)
 8000fa6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000faa:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fac:	4b16      	ldr	r3, [pc, #88]	; (8001008 <MX_TIM2_Init+0x94>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fb2:	4b15      	ldr	r3, [pc, #84]	; (8001008 <MX_TIM2_Init+0x94>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000fb8:	4813      	ldr	r0, [pc, #76]	; (8001008 <MX_TIM2_Init+0x94>)
 8000fba:	f002 fe33 	bl	8003c24 <HAL_TIM_Base_Init>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d001      	beq.n	8000fc8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000fc4:	f000 f958 	bl	8001278 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000fc8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fcc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000fce:	f107 0308 	add.w	r3, r7, #8
 8000fd2:	4619      	mov	r1, r3
 8000fd4:	480c      	ldr	r0, [pc, #48]	; (8001008 <MX_TIM2_Init+0x94>)
 8000fd6:	f003 fb0b 	bl	80045f0 <HAL_TIM_ConfigClockSource>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d001      	beq.n	8000fe4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000fe0:	f000 f94a 	bl	8001278 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000fec:	463b      	mov	r3, r7
 8000fee:	4619      	mov	r1, r3
 8000ff0:	4805      	ldr	r0, [pc, #20]	; (8001008 <MX_TIM2_Init+0x94>)
 8000ff2:	f003 fffd 	bl	8004ff0 <HAL_TIMEx_MasterConfigSynchronization>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d001      	beq.n	8001000 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000ffc:	f000 f93c 	bl	8001278 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001000:	bf00      	nop
 8001002:	3718      	adds	r7, #24
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}
 8001008:	20004b64 	.word	0x20004b64

0800100c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b08a      	sub	sp, #40	; 0x28
 8001010:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001012:	f107 0318 	add.w	r3, r7, #24
 8001016:	2200      	movs	r2, #0
 8001018:	601a      	str	r2, [r3, #0]
 800101a:	605a      	str	r2, [r3, #4]
 800101c:	609a      	str	r2, [r3, #8]
 800101e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001020:	f107 0310 	add.w	r3, r7, #16
 8001024:	2200      	movs	r2, #0
 8001026:	601a      	str	r2, [r3, #0]
 8001028:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800102a:	463b      	mov	r3, r7
 800102c:	2200      	movs	r2, #0
 800102e:	601a      	str	r2, [r3, #0]
 8001030:	605a      	str	r2, [r3, #4]
 8001032:	609a      	str	r2, [r3, #8]
 8001034:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001036:	4b2b      	ldr	r3, [pc, #172]	; (80010e4 <MX_TIM3_Init+0xd8>)
 8001038:	4a2b      	ldr	r2, [pc, #172]	; (80010e8 <MX_TIM3_Init+0xdc>)
 800103a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800103c:	4b29      	ldr	r3, [pc, #164]	; (80010e4 <MX_TIM3_Init+0xd8>)
 800103e:	2200      	movs	r2, #0
 8001040:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001042:	4b28      	ldr	r3, [pc, #160]	; (80010e4 <MX_TIM3_Init+0xd8>)
 8001044:	2200      	movs	r2, #0
 8001046:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001048:	4b26      	ldr	r3, [pc, #152]	; (80010e4 <MX_TIM3_Init+0xd8>)
 800104a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800104e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001050:	4b24      	ldr	r3, [pc, #144]	; (80010e4 <MX_TIM3_Init+0xd8>)
 8001052:	2200      	movs	r2, #0
 8001054:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001056:	4b23      	ldr	r3, [pc, #140]	; (80010e4 <MX_TIM3_Init+0xd8>)
 8001058:	2200      	movs	r2, #0
 800105a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800105c:	4821      	ldr	r0, [pc, #132]	; (80010e4 <MX_TIM3_Init+0xd8>)
 800105e:	f002 fde1 	bl	8003c24 <HAL_TIM_Base_Init>
 8001062:	4603      	mov	r3, r0
 8001064:	2b00      	cmp	r3, #0
 8001066:	d001      	beq.n	800106c <MX_TIM3_Init+0x60>
  {
    Error_Handler();
 8001068:	f000 f906 	bl	8001278 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800106c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001070:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001072:	f107 0318 	add.w	r3, r7, #24
 8001076:	4619      	mov	r1, r3
 8001078:	481a      	ldr	r0, [pc, #104]	; (80010e4 <MX_TIM3_Init+0xd8>)
 800107a:	f003 fab9 	bl	80045f0 <HAL_TIM_ConfigClockSource>
 800107e:	4603      	mov	r3, r0
 8001080:	2b00      	cmp	r3, #0
 8001082:	d001      	beq.n	8001088 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001084:	f000 f8f8 	bl	8001278 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8001088:	4816      	ldr	r0, [pc, #88]	; (80010e4 <MX_TIM3_Init+0xd8>)
 800108a:	f002 ffa5 	bl	8003fd8 <HAL_TIM_IC_Init>
 800108e:	4603      	mov	r3, r0
 8001090:	2b00      	cmp	r3, #0
 8001092:	d001      	beq.n	8001098 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001094:	f000 f8f0 	bl	8001278 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001098:	2300      	movs	r3, #0
 800109a:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800109c:	2300      	movs	r3, #0
 800109e:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80010a0:	f107 0310 	add.w	r3, r7, #16
 80010a4:	4619      	mov	r1, r3
 80010a6:	480f      	ldr	r0, [pc, #60]	; (80010e4 <MX_TIM3_Init+0xd8>)
 80010a8:	f003 ffa2 	bl	8004ff0 <HAL_TIMEx_MasterConfigSynchronization>
 80010ac:	4603      	mov	r3, r0
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d001      	beq.n	80010b6 <MX_TIM3_Init+0xaa>
  {
    Error_Handler();
 80010b2:	f000 f8e1 	bl	8001278 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80010b6:	2300      	movs	r3, #0
 80010b8:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80010ba:	2301      	movs	r3, #1
 80010bc:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80010be:	2300      	movs	r3, #0
 80010c0:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80010c2:	2300      	movs	r3, #0
 80010c4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80010c6:	463b      	mov	r3, r7
 80010c8:	2200      	movs	r2, #0
 80010ca:	4619      	mov	r1, r3
 80010cc:	4805      	ldr	r0, [pc, #20]	; (80010e4 <MX_TIM3_Init+0xd8>)
 80010ce:	f003 f93d 	bl	800434c <HAL_TIM_IC_ConfigChannel>
 80010d2:	4603      	mov	r3, r0
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d001      	beq.n	80010dc <MX_TIM3_Init+0xd0>
  {
    Error_Handler();
 80010d8:	f000 f8ce 	bl	8001278 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80010dc:	bf00      	nop
 80010de:	3728      	adds	r7, #40	; 0x28
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd80      	pop	{r7, pc}
 80010e4:	200049f0 	.word	0x200049f0
 80010e8:	40000400 	.word	0x40000400

080010ec <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80010f0:	4b11      	ldr	r3, [pc, #68]	; (8001138 <MX_USART1_UART_Init+0x4c>)
 80010f2:	4a12      	ldr	r2, [pc, #72]	; (800113c <MX_USART1_UART_Init+0x50>)
 80010f4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80010f6:	4b10      	ldr	r3, [pc, #64]	; (8001138 <MX_USART1_UART_Init+0x4c>)
 80010f8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80010fc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80010fe:	4b0e      	ldr	r3, [pc, #56]	; (8001138 <MX_USART1_UART_Init+0x4c>)
 8001100:	2200      	movs	r2, #0
 8001102:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001104:	4b0c      	ldr	r3, [pc, #48]	; (8001138 <MX_USART1_UART_Init+0x4c>)
 8001106:	2200      	movs	r2, #0
 8001108:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800110a:	4b0b      	ldr	r3, [pc, #44]	; (8001138 <MX_USART1_UART_Init+0x4c>)
 800110c:	2200      	movs	r2, #0
 800110e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001110:	4b09      	ldr	r3, [pc, #36]	; (8001138 <MX_USART1_UART_Init+0x4c>)
 8001112:	220c      	movs	r2, #12
 8001114:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001116:	4b08      	ldr	r3, [pc, #32]	; (8001138 <MX_USART1_UART_Init+0x4c>)
 8001118:	2200      	movs	r2, #0
 800111a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800111c:	4b06      	ldr	r3, [pc, #24]	; (8001138 <MX_USART1_UART_Init+0x4c>)
 800111e:	2200      	movs	r2, #0
 8001120:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001122:	4805      	ldr	r0, [pc, #20]	; (8001138 <MX_USART1_UART_Init+0x4c>)
 8001124:	f004 f846 	bl	80051b4 <HAL_UART_Init>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	d001      	beq.n	8001132 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800112e:	f000 f8a3 	bl	8001278 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001132:	bf00      	nop
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	20004a80 	.word	0x20004a80
 800113c:	40011000 	.word	0x40011000

08001140 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b08a      	sub	sp, #40	; 0x28
 8001144:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001146:	f107 0314 	add.w	r3, r7, #20
 800114a:	2200      	movs	r2, #0
 800114c:	601a      	str	r2, [r3, #0]
 800114e:	605a      	str	r2, [r3, #4]
 8001150:	609a      	str	r2, [r3, #8]
 8001152:	60da      	str	r2, [r3, #12]
 8001154:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001156:	2300      	movs	r3, #0
 8001158:	613b      	str	r3, [r7, #16]
 800115a:	4b3a      	ldr	r3, [pc, #232]	; (8001244 <MX_GPIO_Init+0x104>)
 800115c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800115e:	4a39      	ldr	r2, [pc, #228]	; (8001244 <MX_GPIO_Init+0x104>)
 8001160:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001164:	6313      	str	r3, [r2, #48]	; 0x30
 8001166:	4b37      	ldr	r3, [pc, #220]	; (8001244 <MX_GPIO_Init+0x104>)
 8001168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800116a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800116e:	613b      	str	r3, [r7, #16]
 8001170:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001172:	2300      	movs	r3, #0
 8001174:	60fb      	str	r3, [r7, #12]
 8001176:	4b33      	ldr	r3, [pc, #204]	; (8001244 <MX_GPIO_Init+0x104>)
 8001178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800117a:	4a32      	ldr	r2, [pc, #200]	; (8001244 <MX_GPIO_Init+0x104>)
 800117c:	f043 0304 	orr.w	r3, r3, #4
 8001180:	6313      	str	r3, [r2, #48]	; 0x30
 8001182:	4b30      	ldr	r3, [pc, #192]	; (8001244 <MX_GPIO_Init+0x104>)
 8001184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001186:	f003 0304 	and.w	r3, r3, #4
 800118a:	60fb      	str	r3, [r7, #12]
 800118c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800118e:	2300      	movs	r3, #0
 8001190:	60bb      	str	r3, [r7, #8]
 8001192:	4b2c      	ldr	r3, [pc, #176]	; (8001244 <MX_GPIO_Init+0x104>)
 8001194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001196:	4a2b      	ldr	r2, [pc, #172]	; (8001244 <MX_GPIO_Init+0x104>)
 8001198:	f043 0301 	orr.w	r3, r3, #1
 800119c:	6313      	str	r3, [r2, #48]	; 0x30
 800119e:	4b29      	ldr	r3, [pc, #164]	; (8001244 <MX_GPIO_Init+0x104>)
 80011a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a2:	f003 0301 	and.w	r3, r3, #1
 80011a6:	60bb      	str	r3, [r7, #8]
 80011a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011aa:	2300      	movs	r3, #0
 80011ac:	607b      	str	r3, [r7, #4]
 80011ae:	4b25      	ldr	r3, [pc, #148]	; (8001244 <MX_GPIO_Init+0x104>)
 80011b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b2:	4a24      	ldr	r2, [pc, #144]	; (8001244 <MX_GPIO_Init+0x104>)
 80011b4:	f043 0302 	orr.w	r3, r3, #2
 80011b8:	6313      	str	r3, [r2, #48]	; 0x30
 80011ba:	4b22      	ldr	r3, [pc, #136]	; (8001244 <MX_GPIO_Init+0x104>)
 80011bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011be:	f003 0302 	and.w	r3, r3, #2
 80011c2:	607b      	str	r3, [r7, #4]
 80011c4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 80011c6:	2200      	movs	r2, #0
 80011c8:	2110      	movs	r1, #16
 80011ca:	481f      	ldr	r0, [pc, #124]	; (8001248 <MX_GPIO_Init+0x108>)
 80011cc:	f001 faaa 	bl	8002724 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS2_GPIO_Port, CS2_Pin, GPIO_PIN_RESET);
 80011d0:	2200      	movs	r2, #0
 80011d2:	2110      	movs	r1, #16
 80011d4:	481d      	ldr	r0, [pc, #116]	; (800124c <MX_GPIO_Init+0x10c>)
 80011d6:	f001 faa5 	bl	8002724 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CONTACTOR_Pin|PRECHARGE_Pin|EXT_LED_Pin, GPIO_PIN_RESET);
 80011da:	2200      	movs	r2, #0
 80011dc:	f240 4106 	movw	r1, #1030	; 0x406
 80011e0:	481b      	ldr	r0, [pc, #108]	; (8001250 <MX_GPIO_Init+0x110>)
 80011e2:	f001 fa9f 	bl	8002724 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CS_Pin */
  GPIO_InitStruct.Pin = CS_Pin;
 80011e6:	2310      	movs	r3, #16
 80011e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011ea:	2301      	movs	r3, #1
 80011ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ee:	2300      	movs	r3, #0
 80011f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011f2:	2300      	movs	r3, #0
 80011f4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CS_GPIO_Port, &GPIO_InitStruct);
 80011f6:	f107 0314 	add.w	r3, r7, #20
 80011fa:	4619      	mov	r1, r3
 80011fc:	4812      	ldr	r0, [pc, #72]	; (8001248 <MX_GPIO_Init+0x108>)
 80011fe:	f001 f8f5 	bl	80023ec <HAL_GPIO_Init>

  /*Configure GPIO pin : CS2_Pin */
  GPIO_InitStruct.Pin = CS2_Pin;
 8001202:	2310      	movs	r3, #16
 8001204:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001206:	2301      	movs	r3, #1
 8001208:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800120a:	2300      	movs	r3, #0
 800120c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800120e:	2300      	movs	r3, #0
 8001210:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CS2_GPIO_Port, &GPIO_InitStruct);
 8001212:	f107 0314 	add.w	r3, r7, #20
 8001216:	4619      	mov	r1, r3
 8001218:	480c      	ldr	r0, [pc, #48]	; (800124c <MX_GPIO_Init+0x10c>)
 800121a:	f001 f8e7 	bl	80023ec <HAL_GPIO_Init>

  /*Configure GPIO pins : CONTACTOR_Pin PRECHARGE_Pin EXT_LED_Pin */
  GPIO_InitStruct.Pin = CONTACTOR_Pin|PRECHARGE_Pin|EXT_LED_Pin;
 800121e:	f240 4306 	movw	r3, #1030	; 0x406
 8001222:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001224:	2301      	movs	r3, #1
 8001226:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001228:	2300      	movs	r3, #0
 800122a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800122c:	2300      	movs	r3, #0
 800122e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001230:	f107 0314 	add.w	r3, r7, #20
 8001234:	4619      	mov	r1, r3
 8001236:	4806      	ldr	r0, [pc, #24]	; (8001250 <MX_GPIO_Init+0x110>)
 8001238:	f001 f8d8 	bl	80023ec <HAL_GPIO_Init>

}
 800123c:	bf00      	nop
 800123e:	3728      	adds	r7, #40	; 0x28
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}
 8001244:	40023800 	.word	0x40023800
 8001248:	40020000 	.word	0x40020000
 800124c:	40020800 	.word	0x40020800
 8001250:	40020400 	.word	0x40020400

08001254 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b082      	sub	sp, #8
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM9) {
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	4a04      	ldr	r2, [pc, #16]	; (8001274 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001262:	4293      	cmp	r3, r2
 8001264:	d101      	bne.n	800126a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001266:	f000 fc61 	bl	8001b2c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800126a:	bf00      	nop
 800126c:	3708      	adds	r7, #8
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	40014000 	.word	0x40014000

08001278 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001278:	b480      	push	{r7}
 800127a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800127c:	b672      	cpsid	i
}
 800127e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001280:	e7fe      	b.n	8001280 <Error_Handler+0x8>
	...

08001284 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b082      	sub	sp, #8
 8001288:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800128a:	2300      	movs	r3, #0
 800128c:	607b      	str	r3, [r7, #4]
 800128e:	4b12      	ldr	r3, [pc, #72]	; (80012d8 <HAL_MspInit+0x54>)
 8001290:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001292:	4a11      	ldr	r2, [pc, #68]	; (80012d8 <HAL_MspInit+0x54>)
 8001294:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001298:	6453      	str	r3, [r2, #68]	; 0x44
 800129a:	4b0f      	ldr	r3, [pc, #60]	; (80012d8 <HAL_MspInit+0x54>)
 800129c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800129e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012a2:	607b      	str	r3, [r7, #4]
 80012a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012a6:	2300      	movs	r3, #0
 80012a8:	603b      	str	r3, [r7, #0]
 80012aa:	4b0b      	ldr	r3, [pc, #44]	; (80012d8 <HAL_MspInit+0x54>)
 80012ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ae:	4a0a      	ldr	r2, [pc, #40]	; (80012d8 <HAL_MspInit+0x54>)
 80012b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012b4:	6413      	str	r3, [r2, #64]	; 0x40
 80012b6:	4b08      	ldr	r3, [pc, #32]	; (80012d8 <HAL_MspInit+0x54>)
 80012b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012be:	603b      	str	r3, [r7, #0]
 80012c0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80012c2:	2200      	movs	r2, #0
 80012c4:	210f      	movs	r1, #15
 80012c6:	f06f 0001 	mvn.w	r0, #1
 80012ca:	f001 f865 	bl	8002398 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012ce:	bf00      	nop
 80012d0:	3708      	adds	r7, #8
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	40023800 	.word	0x40023800

080012dc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b08a      	sub	sp, #40	; 0x28
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012e4:	f107 0314 	add.w	r3, r7, #20
 80012e8:	2200      	movs	r2, #0
 80012ea:	601a      	str	r2, [r3, #0]
 80012ec:	605a      	str	r2, [r3, #4]
 80012ee:	609a      	str	r2, [r3, #8]
 80012f0:	60da      	str	r2, [r3, #12]
 80012f2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	4a24      	ldr	r2, [pc, #144]	; (800138c <HAL_ADC_MspInit+0xb0>)
 80012fa:	4293      	cmp	r3, r2
 80012fc:	d141      	bne.n	8001382 <HAL_ADC_MspInit+0xa6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80012fe:	2300      	movs	r3, #0
 8001300:	613b      	str	r3, [r7, #16]
 8001302:	4b23      	ldr	r3, [pc, #140]	; (8001390 <HAL_ADC_MspInit+0xb4>)
 8001304:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001306:	4a22      	ldr	r2, [pc, #136]	; (8001390 <HAL_ADC_MspInit+0xb4>)
 8001308:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800130c:	6453      	str	r3, [r2, #68]	; 0x44
 800130e:	4b20      	ldr	r3, [pc, #128]	; (8001390 <HAL_ADC_MspInit+0xb4>)
 8001310:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001312:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001316:	613b      	str	r3, [r7, #16]
 8001318:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800131a:	2300      	movs	r3, #0
 800131c:	60fb      	str	r3, [r7, #12]
 800131e:	4b1c      	ldr	r3, [pc, #112]	; (8001390 <HAL_ADC_MspInit+0xb4>)
 8001320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001322:	4a1b      	ldr	r2, [pc, #108]	; (8001390 <HAL_ADC_MspInit+0xb4>)
 8001324:	f043 0304 	orr.w	r3, r3, #4
 8001328:	6313      	str	r3, [r2, #48]	; 0x30
 800132a:	4b19      	ldr	r3, [pc, #100]	; (8001390 <HAL_ADC_MspInit+0xb4>)
 800132c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800132e:	f003 0304 	and.w	r3, r3, #4
 8001332:	60fb      	str	r3, [r7, #12]
 8001334:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001336:	2300      	movs	r3, #0
 8001338:	60bb      	str	r3, [r7, #8]
 800133a:	4b15      	ldr	r3, [pc, #84]	; (8001390 <HAL_ADC_MspInit+0xb4>)
 800133c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800133e:	4a14      	ldr	r2, [pc, #80]	; (8001390 <HAL_ADC_MspInit+0xb4>)
 8001340:	f043 0301 	orr.w	r3, r3, #1
 8001344:	6313      	str	r3, [r2, #48]	; 0x30
 8001346:	4b12      	ldr	r3, [pc, #72]	; (8001390 <HAL_ADC_MspInit+0xb4>)
 8001348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800134a:	f003 0301 	and.w	r3, r3, #1
 800134e:	60bb      	str	r3, [r7, #8]
 8001350:	68bb      	ldr	r3, [r7, #8]
    PC1     ------> ADC1_IN11
    PC2     ------> ADC1_IN12
    PC3     ------> ADC1_IN13
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = ADC1_IN10_CURRENT_SENSE_Pin|ADC1_IN11_VBATT_Pin|ADC1_IN12_MC_CAP_Pin|ADC1_IN13_CONTACTOR_Pin;
 8001352:	230f      	movs	r3, #15
 8001354:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001356:	2303      	movs	r3, #3
 8001358:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800135a:	2300      	movs	r3, #0
 800135c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800135e:	f107 0314 	add.w	r3, r7, #20
 8001362:	4619      	mov	r1, r3
 8001364:	480b      	ldr	r0, [pc, #44]	; (8001394 <HAL_ADC_MspInit+0xb8>)
 8001366:	f001 f841 	bl	80023ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC1_IN1_BUCK_TEMP_Pin;
 800136a:	2302      	movs	r3, #2
 800136c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800136e:	2303      	movs	r3, #3
 8001370:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001372:	2300      	movs	r3, #0
 8001374:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ADC1_IN1_BUCK_TEMP_GPIO_Port, &GPIO_InitStruct);
 8001376:	f107 0314 	add.w	r3, r7, #20
 800137a:	4619      	mov	r1, r3
 800137c:	4806      	ldr	r0, [pc, #24]	; (8001398 <HAL_ADC_MspInit+0xbc>)
 800137e:	f001 f835 	bl	80023ec <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001382:	bf00      	nop
 8001384:	3728      	adds	r7, #40	; 0x28
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	40012000 	.word	0x40012000
 8001390:	40023800 	.word	0x40023800
 8001394:	40020800 	.word	0x40020800
 8001398:	40020000 	.word	0x40020000

0800139c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b08a      	sub	sp, #40	; 0x28
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013a4:	f107 0314 	add.w	r3, r7, #20
 80013a8:	2200      	movs	r2, #0
 80013aa:	601a      	str	r2, [r3, #0]
 80013ac:	605a      	str	r2, [r3, #4]
 80013ae:	609a      	str	r2, [r3, #8]
 80013b0:	60da      	str	r2, [r3, #12]
 80013b2:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	4a19      	ldr	r2, [pc, #100]	; (8001420 <HAL_CAN_MspInit+0x84>)
 80013ba:	4293      	cmp	r3, r2
 80013bc:	d12c      	bne.n	8001418 <HAL_CAN_MspInit+0x7c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80013be:	2300      	movs	r3, #0
 80013c0:	613b      	str	r3, [r7, #16]
 80013c2:	4b18      	ldr	r3, [pc, #96]	; (8001424 <HAL_CAN_MspInit+0x88>)
 80013c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013c6:	4a17      	ldr	r2, [pc, #92]	; (8001424 <HAL_CAN_MspInit+0x88>)
 80013c8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80013cc:	6413      	str	r3, [r2, #64]	; 0x40
 80013ce:	4b15      	ldr	r3, [pc, #84]	; (8001424 <HAL_CAN_MspInit+0x88>)
 80013d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013d6:	613b      	str	r3, [r7, #16]
 80013d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013da:	2300      	movs	r3, #0
 80013dc:	60fb      	str	r3, [r7, #12]
 80013de:	4b11      	ldr	r3, [pc, #68]	; (8001424 <HAL_CAN_MspInit+0x88>)
 80013e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013e2:	4a10      	ldr	r2, [pc, #64]	; (8001424 <HAL_CAN_MspInit+0x88>)
 80013e4:	f043 0301 	orr.w	r3, r3, #1
 80013e8:	6313      	str	r3, [r2, #48]	; 0x30
 80013ea:	4b0e      	ldr	r3, [pc, #56]	; (8001424 <HAL_CAN_MspInit+0x88>)
 80013ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ee:	f003 0301 	and.w	r3, r3, #1
 80013f2:	60fb      	str	r3, [r7, #12]
 80013f4:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80013f6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80013fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013fc:	2302      	movs	r3, #2
 80013fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001400:	2300      	movs	r3, #0
 8001402:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001404:	2303      	movs	r3, #3
 8001406:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001408:	2309      	movs	r3, #9
 800140a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800140c:	f107 0314 	add.w	r3, r7, #20
 8001410:	4619      	mov	r1, r3
 8001412:	4805      	ldr	r0, [pc, #20]	; (8001428 <HAL_CAN_MspInit+0x8c>)
 8001414:	f000 ffea 	bl	80023ec <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8001418:	bf00      	nop
 800141a:	3728      	adds	r7, #40	; 0x28
 800141c:	46bd      	mov	sp, r7
 800141e:	bd80      	pop	{r7, pc}
 8001420:	40006400 	.word	0x40006400
 8001424:	40023800 	.word	0x40023800
 8001428:	40020000 	.word	0x40020000

0800142c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b08a      	sub	sp, #40	; 0x28
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001434:	f107 0314 	add.w	r3, r7, #20
 8001438:	2200      	movs	r2, #0
 800143a:	601a      	str	r2, [r3, #0]
 800143c:	605a      	str	r2, [r3, #4]
 800143e:	609a      	str	r2, [r3, #8]
 8001440:	60da      	str	r2, [r3, #12]
 8001442:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	4a19      	ldr	r2, [pc, #100]	; (80014b0 <HAL_SPI_MspInit+0x84>)
 800144a:	4293      	cmp	r3, r2
 800144c:	d12b      	bne.n	80014a6 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800144e:	2300      	movs	r3, #0
 8001450:	613b      	str	r3, [r7, #16]
 8001452:	4b18      	ldr	r3, [pc, #96]	; (80014b4 <HAL_SPI_MspInit+0x88>)
 8001454:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001456:	4a17      	ldr	r2, [pc, #92]	; (80014b4 <HAL_SPI_MspInit+0x88>)
 8001458:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800145c:	6453      	str	r3, [r2, #68]	; 0x44
 800145e:	4b15      	ldr	r3, [pc, #84]	; (80014b4 <HAL_SPI_MspInit+0x88>)
 8001460:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001462:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001466:	613b      	str	r3, [r7, #16]
 8001468:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800146a:	2300      	movs	r3, #0
 800146c:	60fb      	str	r3, [r7, #12]
 800146e:	4b11      	ldr	r3, [pc, #68]	; (80014b4 <HAL_SPI_MspInit+0x88>)
 8001470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001472:	4a10      	ldr	r2, [pc, #64]	; (80014b4 <HAL_SPI_MspInit+0x88>)
 8001474:	f043 0301 	orr.w	r3, r3, #1
 8001478:	6313      	str	r3, [r2, #48]	; 0x30
 800147a:	4b0e      	ldr	r3, [pc, #56]	; (80014b4 <HAL_SPI_MspInit+0x88>)
 800147c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800147e:	f003 0301 	and.w	r3, r3, #1
 8001482:	60fb      	str	r3, [r7, #12]
 8001484:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001486:	23e0      	movs	r3, #224	; 0xe0
 8001488:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800148a:	2302      	movs	r3, #2
 800148c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800148e:	2300      	movs	r3, #0
 8001490:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001492:	2303      	movs	r3, #3
 8001494:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001496:	2305      	movs	r3, #5
 8001498:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800149a:	f107 0314 	add.w	r3, r7, #20
 800149e:	4619      	mov	r1, r3
 80014a0:	4805      	ldr	r0, [pc, #20]	; (80014b8 <HAL_SPI_MspInit+0x8c>)
 80014a2:	f000 ffa3 	bl	80023ec <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80014a6:	bf00      	nop
 80014a8:	3728      	adds	r7, #40	; 0x28
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	bf00      	nop
 80014b0:	40013000 	.word	0x40013000
 80014b4:	40023800 	.word	0x40023800
 80014b8:	40020000 	.word	0x40020000

080014bc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b08c      	sub	sp, #48	; 0x30
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014c4:	f107 031c 	add.w	r3, r7, #28
 80014c8:	2200      	movs	r2, #0
 80014ca:	601a      	str	r2, [r3, #0]
 80014cc:	605a      	str	r2, [r3, #4]
 80014ce:	609a      	str	r2, [r3, #8]
 80014d0:	60da      	str	r2, [r3, #12]
 80014d2:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	4a35      	ldr	r2, [pc, #212]	; (80015b0 <HAL_TIM_Base_MspInit+0xf4>)
 80014da:	4293      	cmp	r3, r2
 80014dc:	d116      	bne.n	800150c <HAL_TIM_Base_MspInit+0x50>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80014de:	2300      	movs	r3, #0
 80014e0:	61bb      	str	r3, [r7, #24]
 80014e2:	4b34      	ldr	r3, [pc, #208]	; (80015b4 <HAL_TIM_Base_MspInit+0xf8>)
 80014e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014e6:	4a33      	ldr	r2, [pc, #204]	; (80015b4 <HAL_TIM_Base_MspInit+0xf8>)
 80014e8:	f043 0301 	orr.w	r3, r3, #1
 80014ec:	6453      	str	r3, [r2, #68]	; 0x44
 80014ee:	4b31      	ldr	r3, [pc, #196]	; (80015b4 <HAL_TIM_Base_MspInit+0xf8>)
 80014f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014f2:	f003 0301 	and.w	r3, r3, #1
 80014f6:	61bb      	str	r3, [r7, #24]
 80014f8:	69bb      	ldr	r3, [r7, #24]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 80014fa:	2200      	movs	r2, #0
 80014fc:	2100      	movs	r1, #0
 80014fe:	2018      	movs	r0, #24
 8001500:	f000 ff4a 	bl	8002398 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8001504:	2018      	movs	r0, #24
 8001506:	f000 ff63 	bl	80023d0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800150a:	e04c      	b.n	80015a6 <HAL_TIM_Base_MspInit+0xea>
  else if(htim_base->Instance==TIM2)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001514:	d10e      	bne.n	8001534 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001516:	2300      	movs	r3, #0
 8001518:	617b      	str	r3, [r7, #20]
 800151a:	4b26      	ldr	r3, [pc, #152]	; (80015b4 <HAL_TIM_Base_MspInit+0xf8>)
 800151c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800151e:	4a25      	ldr	r2, [pc, #148]	; (80015b4 <HAL_TIM_Base_MspInit+0xf8>)
 8001520:	f043 0301 	orr.w	r3, r3, #1
 8001524:	6413      	str	r3, [r2, #64]	; 0x40
 8001526:	4b23      	ldr	r3, [pc, #140]	; (80015b4 <HAL_TIM_Base_MspInit+0xf8>)
 8001528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800152a:	f003 0301 	and.w	r3, r3, #1
 800152e:	617b      	str	r3, [r7, #20]
 8001530:	697b      	ldr	r3, [r7, #20]
}
 8001532:	e038      	b.n	80015a6 <HAL_TIM_Base_MspInit+0xea>
  else if(htim_base->Instance==TIM3)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	4a1f      	ldr	r2, [pc, #124]	; (80015b8 <HAL_TIM_Base_MspInit+0xfc>)
 800153a:	4293      	cmp	r3, r2
 800153c:	d133      	bne.n	80015a6 <HAL_TIM_Base_MspInit+0xea>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800153e:	2300      	movs	r3, #0
 8001540:	613b      	str	r3, [r7, #16]
 8001542:	4b1c      	ldr	r3, [pc, #112]	; (80015b4 <HAL_TIM_Base_MspInit+0xf8>)
 8001544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001546:	4a1b      	ldr	r2, [pc, #108]	; (80015b4 <HAL_TIM_Base_MspInit+0xf8>)
 8001548:	f043 0302 	orr.w	r3, r3, #2
 800154c:	6413      	str	r3, [r2, #64]	; 0x40
 800154e:	4b19      	ldr	r3, [pc, #100]	; (80015b4 <HAL_TIM_Base_MspInit+0xf8>)
 8001550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001552:	f003 0302 	and.w	r3, r3, #2
 8001556:	613b      	str	r3, [r7, #16]
 8001558:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800155a:	2300      	movs	r3, #0
 800155c:	60fb      	str	r3, [r7, #12]
 800155e:	4b15      	ldr	r3, [pc, #84]	; (80015b4 <HAL_TIM_Base_MspInit+0xf8>)
 8001560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001562:	4a14      	ldr	r2, [pc, #80]	; (80015b4 <HAL_TIM_Base_MspInit+0xf8>)
 8001564:	f043 0304 	orr.w	r3, r3, #4
 8001568:	6313      	str	r3, [r2, #48]	; 0x30
 800156a:	4b12      	ldr	r3, [pc, #72]	; (80015b4 <HAL_TIM_Base_MspInit+0xf8>)
 800156c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800156e:	f003 0304 	and.w	r3, r3, #4
 8001572:	60fb      	str	r3, [r7, #12]
 8001574:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TIM3_CH1_IMD_IN_Pin;
 8001576:	2340      	movs	r3, #64	; 0x40
 8001578:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800157a:	2302      	movs	r3, #2
 800157c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800157e:	2300      	movs	r3, #0
 8001580:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001582:	2300      	movs	r3, #0
 8001584:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001586:	2302      	movs	r3, #2
 8001588:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(TIM3_CH1_IMD_IN_GPIO_Port, &GPIO_InitStruct);
 800158a:	f107 031c 	add.w	r3, r7, #28
 800158e:	4619      	mov	r1, r3
 8001590:	480a      	ldr	r0, [pc, #40]	; (80015bc <HAL_TIM_Base_MspInit+0x100>)
 8001592:	f000 ff2b 	bl	80023ec <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8001596:	2200      	movs	r2, #0
 8001598:	2105      	movs	r1, #5
 800159a:	201d      	movs	r0, #29
 800159c:	f000 fefc 	bl	8002398 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80015a0:	201d      	movs	r0, #29
 80015a2:	f000 ff15 	bl	80023d0 <HAL_NVIC_EnableIRQ>
}
 80015a6:	bf00      	nop
 80015a8:	3730      	adds	r7, #48	; 0x30
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	40010000 	.word	0x40010000
 80015b4:	40023800 	.word	0x40023800
 80015b8:	40000400 	.word	0x40000400
 80015bc:	40020800 	.word	0x40020800

080015c0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b088      	sub	sp, #32
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015c8:	f107 030c 	add.w	r3, r7, #12
 80015cc:	2200      	movs	r2, #0
 80015ce:	601a      	str	r2, [r3, #0]
 80015d0:	605a      	str	r2, [r3, #4]
 80015d2:	609a      	str	r2, [r3, #8]
 80015d4:	60da      	str	r2, [r3, #12]
 80015d6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	4a12      	ldr	r2, [pc, #72]	; (8001628 <HAL_TIM_MspPostInit+0x68>)
 80015de:	4293      	cmp	r3, r2
 80015e0:	d11e      	bne.n	8001620 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015e2:	2300      	movs	r3, #0
 80015e4:	60bb      	str	r3, [r7, #8]
 80015e6:	4b11      	ldr	r3, [pc, #68]	; (800162c <HAL_TIM_MspPostInit+0x6c>)
 80015e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ea:	4a10      	ldr	r2, [pc, #64]	; (800162c <HAL_TIM_MspPostInit+0x6c>)
 80015ec:	f043 0301 	orr.w	r3, r3, #1
 80015f0:	6313      	str	r3, [r2, #48]	; 0x30
 80015f2:	4b0e      	ldr	r3, [pc, #56]	; (800162c <HAL_TIM_MspPostInit+0x6c>)
 80015f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015f6:	f003 0301 	and.w	r3, r3, #1
 80015fa:	60bb      	str	r3, [r7, #8]
 80015fc:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = TIM1_CH1_BLUE_Pin|TIM1_CH2_GREEN_Pin|TIM1_CH3_RED_Pin;
 80015fe:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8001602:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001604:	2302      	movs	r3, #2
 8001606:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001608:	2300      	movs	r3, #0
 800160a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800160c:	2300      	movs	r3, #0
 800160e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001610:	2301      	movs	r3, #1
 8001612:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001614:	f107 030c 	add.w	r3, r7, #12
 8001618:	4619      	mov	r1, r3
 800161a:	4805      	ldr	r0, [pc, #20]	; (8001630 <HAL_TIM_MspPostInit+0x70>)
 800161c:	f000 fee6 	bl	80023ec <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001620:	bf00      	nop
 8001622:	3720      	adds	r7, #32
 8001624:	46bd      	mov	sp, r7
 8001626:	bd80      	pop	{r7, pc}
 8001628:	40010000 	.word	0x40010000
 800162c:	40023800 	.word	0x40023800
 8001630:	40020000 	.word	0x40020000

08001634 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b08a      	sub	sp, #40	; 0x28
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800163c:	f107 0314 	add.w	r3, r7, #20
 8001640:	2200      	movs	r2, #0
 8001642:	601a      	str	r2, [r3, #0]
 8001644:	605a      	str	r2, [r3, #4]
 8001646:	609a      	str	r2, [r3, #8]
 8001648:	60da      	str	r2, [r3, #12]
 800164a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	4a19      	ldr	r2, [pc, #100]	; (80016b8 <HAL_UART_MspInit+0x84>)
 8001652:	4293      	cmp	r3, r2
 8001654:	d12b      	bne.n	80016ae <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001656:	2300      	movs	r3, #0
 8001658:	613b      	str	r3, [r7, #16]
 800165a:	4b18      	ldr	r3, [pc, #96]	; (80016bc <HAL_UART_MspInit+0x88>)
 800165c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800165e:	4a17      	ldr	r2, [pc, #92]	; (80016bc <HAL_UART_MspInit+0x88>)
 8001660:	f043 0310 	orr.w	r3, r3, #16
 8001664:	6453      	str	r3, [r2, #68]	; 0x44
 8001666:	4b15      	ldr	r3, [pc, #84]	; (80016bc <HAL_UART_MspInit+0x88>)
 8001668:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800166a:	f003 0310 	and.w	r3, r3, #16
 800166e:	613b      	str	r3, [r7, #16]
 8001670:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001672:	2300      	movs	r3, #0
 8001674:	60fb      	str	r3, [r7, #12]
 8001676:	4b11      	ldr	r3, [pc, #68]	; (80016bc <HAL_UART_MspInit+0x88>)
 8001678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800167a:	4a10      	ldr	r2, [pc, #64]	; (80016bc <HAL_UART_MspInit+0x88>)
 800167c:	f043 0302 	orr.w	r3, r3, #2
 8001680:	6313      	str	r3, [r2, #48]	; 0x30
 8001682:	4b0e      	ldr	r3, [pc, #56]	; (80016bc <HAL_UART_MspInit+0x88>)
 8001684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001686:	f003 0302 	and.w	r3, r3, #2
 800168a:	60fb      	str	r3, [r7, #12]
 800168c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800168e:	23c0      	movs	r3, #192	; 0xc0
 8001690:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001692:	2302      	movs	r3, #2
 8001694:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001696:	2300      	movs	r3, #0
 8001698:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800169a:	2303      	movs	r3, #3
 800169c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800169e:	2307      	movs	r3, #7
 80016a0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016a2:	f107 0314 	add.w	r3, r7, #20
 80016a6:	4619      	mov	r1, r3
 80016a8:	4805      	ldr	r0, [pc, #20]	; (80016c0 <HAL_UART_MspInit+0x8c>)
 80016aa:	f000 fe9f 	bl	80023ec <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80016ae:	bf00      	nop
 80016b0:	3728      	adds	r7, #40	; 0x28
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}
 80016b6:	bf00      	nop
 80016b8:	40011000 	.word	0x40011000
 80016bc:	40023800 	.word	0x40023800
 80016c0:	40020400 	.word	0x40020400

080016c4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b08c      	sub	sp, #48	; 0x30
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80016cc:	2300      	movs	r3, #0
 80016ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80016d0:	2300      	movs	r3, #0
 80016d2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM9 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, TickPriority ,0);
 80016d4:	2200      	movs	r2, #0
 80016d6:	6879      	ldr	r1, [r7, #4]
 80016d8:	2018      	movs	r0, #24
 80016da:	f000 fe5d 	bl	8002398 <HAL_NVIC_SetPriority>

  /* Enable the TIM9 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 80016de:	2018      	movs	r0, #24
 80016e0:	f000 fe76 	bl	80023d0 <HAL_NVIC_EnableIRQ>
  /* Enable TIM9 clock */
  __HAL_RCC_TIM9_CLK_ENABLE();
 80016e4:	2300      	movs	r3, #0
 80016e6:	60fb      	str	r3, [r7, #12]
 80016e8:	4b1f      	ldr	r3, [pc, #124]	; (8001768 <HAL_InitTick+0xa4>)
 80016ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016ec:	4a1e      	ldr	r2, [pc, #120]	; (8001768 <HAL_InitTick+0xa4>)
 80016ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016f2:	6453      	str	r3, [r2, #68]	; 0x44
 80016f4:	4b1c      	ldr	r3, [pc, #112]	; (8001768 <HAL_InitTick+0xa4>)
 80016f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016fc:	60fb      	str	r3, [r7, #12]
 80016fe:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001700:	f107 0210 	add.w	r2, r7, #16
 8001704:	f107 0314 	add.w	r3, r7, #20
 8001708:	4611      	mov	r1, r2
 800170a:	4618      	mov	r0, r3
 800170c:	f001 fcb0 	bl	8003070 <HAL_RCC_GetClockConfig>

  /* Compute TIM9 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8001710:	f001 fc9a 	bl	8003048 <HAL_RCC_GetPCLK2Freq>
 8001714:	4603      	mov	r3, r0
 8001716:	005b      	lsls	r3, r3, #1
 8001718:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM9 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800171a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800171c:	4a13      	ldr	r2, [pc, #76]	; (800176c <HAL_InitTick+0xa8>)
 800171e:	fba2 2303 	umull	r2, r3, r2, r3
 8001722:	0c9b      	lsrs	r3, r3, #18
 8001724:	3b01      	subs	r3, #1
 8001726:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM9 */
  htim9.Instance = TIM9;
 8001728:	4b11      	ldr	r3, [pc, #68]	; (8001770 <HAL_InitTick+0xac>)
 800172a:	4a12      	ldr	r2, [pc, #72]	; (8001774 <HAL_InitTick+0xb0>)
 800172c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM9CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim9.Init.Period = (1000000U / 1000U) - 1U;
 800172e:	4b10      	ldr	r3, [pc, #64]	; (8001770 <HAL_InitTick+0xac>)
 8001730:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001734:	60da      	str	r2, [r3, #12]
  htim9.Init.Prescaler = uwPrescalerValue;
 8001736:	4a0e      	ldr	r2, [pc, #56]	; (8001770 <HAL_InitTick+0xac>)
 8001738:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800173a:	6053      	str	r3, [r2, #4]
  htim9.Init.ClockDivision = 0;
 800173c:	4b0c      	ldr	r3, [pc, #48]	; (8001770 <HAL_InitTick+0xac>)
 800173e:	2200      	movs	r2, #0
 8001740:	611a      	str	r2, [r3, #16]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001742:	4b0b      	ldr	r3, [pc, #44]	; (8001770 <HAL_InitTick+0xac>)
 8001744:	2200      	movs	r2, #0
 8001746:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim9) == HAL_OK)
 8001748:	4809      	ldr	r0, [pc, #36]	; (8001770 <HAL_InitTick+0xac>)
 800174a:	f002 fa6b 	bl	8003c24 <HAL_TIM_Base_Init>
 800174e:	4603      	mov	r3, r0
 8001750:	2b00      	cmp	r3, #0
 8001752:	d104      	bne.n	800175e <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim9);
 8001754:	4806      	ldr	r0, [pc, #24]	; (8001770 <HAL_InitTick+0xac>)
 8001756:	f002 fb1d 	bl	8003d94 <HAL_TIM_Base_Start_IT>
 800175a:	4603      	mov	r3, r0
 800175c:	e000      	b.n	8001760 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 800175e:	2301      	movs	r3, #1
}
 8001760:	4618      	mov	r0, r3
 8001762:	3730      	adds	r7, #48	; 0x30
 8001764:	46bd      	mov	sp, r7
 8001766:	bd80      	pop	{r7, pc}
 8001768:	40023800 	.word	0x40023800
 800176c:	431bde83 	.word	0x431bde83
 8001770:	20004bd8 	.word	0x20004bd8
 8001774:	40014000 	.word	0x40014000

08001778 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001778:	b480      	push	{r7}
 800177a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800177c:	e7fe      	b.n	800177c <NMI_Handler+0x4>

0800177e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800177e:	b480      	push	{r7}
 8001780:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001782:	e7fe      	b.n	8001782 <HardFault_Handler+0x4>

08001784 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001784:	b480      	push	{r7}
 8001786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001788:	e7fe      	b.n	8001788 <MemManage_Handler+0x4>

0800178a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800178a:	b480      	push	{r7}
 800178c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800178e:	e7fe      	b.n	800178e <BusFault_Handler+0x4>

08001790 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001790:	b480      	push	{r7}
 8001792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001794:	e7fe      	b.n	8001794 <UsageFault_Handler+0x4>

08001796 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001796:	b480      	push	{r7}
 8001798:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800179a:	bf00      	nop
 800179c:	46bd      	mov	sp, r7
 800179e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a2:	4770      	bx	lr

080017a4 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80017a8:	4803      	ldr	r0, [pc, #12]	; (80017b8 <TIM1_BRK_TIM9_IRQHandler+0x14>)
 80017aa:	f002 fc6e 	bl	800408a <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim9);
 80017ae:	4803      	ldr	r0, [pc, #12]	; (80017bc <TIM1_BRK_TIM9_IRQHandler+0x18>)
 80017b0:	f002 fc6b 	bl	800408a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 80017b4:	bf00      	nop
 80017b6:	bd80      	pop	{r7, pc}
 80017b8:	20004ac4 	.word	0x20004ac4
 80017bc:	20004bd8 	.word	0x20004bd8

080017c0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80017c4:	4802      	ldr	r0, [pc, #8]	; (80017d0 <TIM3_IRQHandler+0x10>)
 80017c6:	f002 fc60 	bl	800408a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80017ca:	bf00      	nop
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	200049f0 	.word	0x200049f0

080017d4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b086      	sub	sp, #24
 80017d8:	af00      	add	r7, sp, #0
 80017da:	60f8      	str	r0, [r7, #12]
 80017dc:	60b9      	str	r1, [r7, #8]
 80017de:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017e0:	2300      	movs	r3, #0
 80017e2:	617b      	str	r3, [r7, #20]
 80017e4:	e00a      	b.n	80017fc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80017e6:	f3af 8000 	nop.w
 80017ea:	4601      	mov	r1, r0
 80017ec:	68bb      	ldr	r3, [r7, #8]
 80017ee:	1c5a      	adds	r2, r3, #1
 80017f0:	60ba      	str	r2, [r7, #8]
 80017f2:	b2ca      	uxtb	r2, r1
 80017f4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017f6:	697b      	ldr	r3, [r7, #20]
 80017f8:	3301      	adds	r3, #1
 80017fa:	617b      	str	r3, [r7, #20]
 80017fc:	697a      	ldr	r2, [r7, #20]
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	429a      	cmp	r2, r3
 8001802:	dbf0      	blt.n	80017e6 <_read+0x12>
	}

return len;
 8001804:	687b      	ldr	r3, [r7, #4]
}
 8001806:	4618      	mov	r0, r3
 8001808:	3718      	adds	r7, #24
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}

0800180e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800180e:	b580      	push	{r7, lr}
 8001810:	b086      	sub	sp, #24
 8001812:	af00      	add	r7, sp, #0
 8001814:	60f8      	str	r0, [r7, #12]
 8001816:	60b9      	str	r1, [r7, #8]
 8001818:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800181a:	2300      	movs	r3, #0
 800181c:	617b      	str	r3, [r7, #20]
 800181e:	e009      	b.n	8001834 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001820:	68bb      	ldr	r3, [r7, #8]
 8001822:	1c5a      	adds	r2, r3, #1
 8001824:	60ba      	str	r2, [r7, #8]
 8001826:	781b      	ldrb	r3, [r3, #0]
 8001828:	4618      	mov	r0, r3
 800182a:	f7fe fe9d 	bl	8000568 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800182e:	697b      	ldr	r3, [r7, #20]
 8001830:	3301      	adds	r3, #1
 8001832:	617b      	str	r3, [r7, #20]
 8001834:	697a      	ldr	r2, [r7, #20]
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	429a      	cmp	r2, r3
 800183a:	dbf1      	blt.n	8001820 <_write+0x12>
	}
	return len;
 800183c:	687b      	ldr	r3, [r7, #4]
}
 800183e:	4618      	mov	r0, r3
 8001840:	3718      	adds	r7, #24
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}

08001846 <_close>:

int _close(int file)
{
 8001846:	b480      	push	{r7}
 8001848:	b083      	sub	sp, #12
 800184a:	af00      	add	r7, sp, #0
 800184c:	6078      	str	r0, [r7, #4]
	return -1;
 800184e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001852:	4618      	mov	r0, r3
 8001854:	370c      	adds	r7, #12
 8001856:	46bd      	mov	sp, r7
 8001858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185c:	4770      	bx	lr

0800185e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800185e:	b480      	push	{r7}
 8001860:	b083      	sub	sp, #12
 8001862:	af00      	add	r7, sp, #0
 8001864:	6078      	str	r0, [r7, #4]
 8001866:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800186e:	605a      	str	r2, [r3, #4]
	return 0;
 8001870:	2300      	movs	r3, #0
}
 8001872:	4618      	mov	r0, r3
 8001874:	370c      	adds	r7, #12
 8001876:	46bd      	mov	sp, r7
 8001878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187c:	4770      	bx	lr

0800187e <_isatty>:

int _isatty(int file)
{
 800187e:	b480      	push	{r7}
 8001880:	b083      	sub	sp, #12
 8001882:	af00      	add	r7, sp, #0
 8001884:	6078      	str	r0, [r7, #4]
	return 1;
 8001886:	2301      	movs	r3, #1
}
 8001888:	4618      	mov	r0, r3
 800188a:	370c      	adds	r7, #12
 800188c:	46bd      	mov	sp, r7
 800188e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001892:	4770      	bx	lr

08001894 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001894:	b480      	push	{r7}
 8001896:	b085      	sub	sp, #20
 8001898:	af00      	add	r7, sp, #0
 800189a:	60f8      	str	r0, [r7, #12]
 800189c:	60b9      	str	r1, [r7, #8]
 800189e:	607a      	str	r2, [r7, #4]
	return 0;
 80018a0:	2300      	movs	r3, #0
}
 80018a2:	4618      	mov	r0, r3
 80018a4:	3714      	adds	r7, #20
 80018a6:	46bd      	mov	sp, r7
 80018a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ac:	4770      	bx	lr
	...

080018b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b086      	sub	sp, #24
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018b8:	4a14      	ldr	r2, [pc, #80]	; (800190c <_sbrk+0x5c>)
 80018ba:	4b15      	ldr	r3, [pc, #84]	; (8001910 <_sbrk+0x60>)
 80018bc:	1ad3      	subs	r3, r2, r3
 80018be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80018c0:	697b      	ldr	r3, [r7, #20]
 80018c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018c4:	4b13      	ldr	r3, [pc, #76]	; (8001914 <_sbrk+0x64>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d102      	bne.n	80018d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80018cc:	4b11      	ldr	r3, [pc, #68]	; (8001914 <_sbrk+0x64>)
 80018ce:	4a12      	ldr	r2, [pc, #72]	; (8001918 <_sbrk+0x68>)
 80018d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018d2:	4b10      	ldr	r3, [pc, #64]	; (8001914 <_sbrk+0x64>)
 80018d4:	681a      	ldr	r2, [r3, #0]
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	4413      	add	r3, r2
 80018da:	693a      	ldr	r2, [r7, #16]
 80018dc:	429a      	cmp	r2, r3
 80018de:	d207      	bcs.n	80018f0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80018e0:	f006 fcec 	bl	80082bc <__errno>
 80018e4:	4603      	mov	r3, r0
 80018e6:	220c      	movs	r2, #12
 80018e8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80018ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80018ee:	e009      	b.n	8001904 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80018f0:	4b08      	ldr	r3, [pc, #32]	; (8001914 <_sbrk+0x64>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80018f6:	4b07      	ldr	r3, [pc, #28]	; (8001914 <_sbrk+0x64>)
 80018f8:	681a      	ldr	r2, [r3, #0]
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	4413      	add	r3, r2
 80018fe:	4a05      	ldr	r2, [pc, #20]	; (8001914 <_sbrk+0x64>)
 8001900:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001902:	68fb      	ldr	r3, [r7, #12]
}
 8001904:	4618      	mov	r0, r3
 8001906:	3718      	adds	r7, #24
 8001908:	46bd      	mov	sp, r7
 800190a:	bd80      	pop	{r7, pc}
 800190c:	20020000 	.word	0x20020000
 8001910:	00000400 	.word	0x00000400
 8001914:	20000090 	.word	0x20000090
 8001918:	20004c78 	.word	0x20004c78

0800191c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800191c:	b480      	push	{r7}
 800191e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001920:	4b06      	ldr	r3, [pc, #24]	; (800193c <SystemInit+0x20>)
 8001922:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001926:	4a05      	ldr	r2, [pc, #20]	; (800193c <SystemInit+0x20>)
 8001928:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800192c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001930:	bf00      	nop
 8001932:	46bd      	mov	sp, r7
 8001934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001938:	4770      	bx	lr
 800193a:	bf00      	nop
 800193c:	e000ed00 	.word	0xe000ed00

08001940 <start_timers>:
#include <stdint.h>
#include "peripherals.h"
#include "timer_utils.h"

void start_timers() {
 8001940:	b580      	push	{r7, lr}
 8001942:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start(&htim2);
 8001944:	4802      	ldr	r0, [pc, #8]	; (8001950 <start_timers+0x10>)
 8001946:	f002 f9bd 	bl	8003cc4 <HAL_TIM_Base_Start>
}
 800194a:	bf00      	nop
 800194c:	bd80      	pop	{r7, pc}
 800194e:	bf00      	nop
 8001950:	20004b64 	.word	0x20004b64

08001954 <delay_us>:

void delay_us(uint16_t us) {
 8001954:	b480      	push	{r7}
 8001956:	b083      	sub	sp, #12
 8001958:	af00      	add	r7, sp, #0
 800195a:	4603      	mov	r3, r0
 800195c:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim2, 0);
 800195e:	4b09      	ldr	r3, [pc, #36]	; (8001984 <delay_us+0x30>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	2200      	movs	r2, #0
 8001964:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim2) < us) { asm("NOP"); }
 8001966:	e000      	b.n	800196a <delay_us+0x16>
 8001968:	bf00      	nop
 800196a:	4b06      	ldr	r3, [pc, #24]	; (8001984 <delay_us+0x30>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001970:	88fb      	ldrh	r3, [r7, #6]
 8001972:	429a      	cmp	r2, r3
 8001974:	d3f8      	bcc.n	8001968 <delay_us+0x14>
}
 8001976:	bf00      	nop
 8001978:	bf00      	nop
 800197a:	370c      	adds	r7, #12
 800197c:	46bd      	mov	sp, r7
 800197e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001982:	4770      	bx	lr
 8001984:	20004b64 	.word	0x20004b64

08001988 <ext_led_blink_thread_fn>:
const osThreadAttr_t ext_led_blink_thread_attrs = {
	.name = "ext_led_blink_thread",
	.priority = (osPriority_t)osPriorityIdle
};

void ext_led_blink_thread_fn(void* arg) {
 8001988:	b580      	push	{r7, lr}
 800198a:	b082      	sub	sp, #8
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
	while (1) {
		HAL_GPIO_TogglePin(GPIOB, CONTACTOR_Pin);
 8001990:	2102      	movs	r1, #2
 8001992:	4804      	ldr	r0, [pc, #16]	; (80019a4 <ext_led_blink_thread_fn+0x1c>)
 8001994:	f000 fedf 	bl	8002756 <HAL_GPIO_TogglePin>
		osDelay(1000);
 8001998:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800199c:	f004 f81c 	bl	80059d8 <osDelay>
		HAL_GPIO_TogglePin(GPIOB, CONTACTOR_Pin);
 80019a0:	e7f6      	b.n	8001990 <ext_led_blink_thread_fn+0x8>
 80019a2:	bf00      	nop
 80019a4:	40020400 	.word	0x40020400

080019a8 <measurements_thread_fn>:
	.name = "measurements_thread",
	.priority = (osPriority_t)osPriorityAboveNormal,
	.stack_size = 2048
};

void measurements_thread_fn(void* arg) {
 80019a8:	b5b0      	push	{r4, r5, r7, lr}
 80019aa:	b0fe      	sub	sp, #504	; 0x1f8
 80019ac:	af16      	add	r7, sp, #88	; 0x58
 80019ae:	1d3b      	adds	r3, r7, #4
 80019b0:	6018      	str	r0, [r3, #0]
	Ltc6813 slave_device = Ltc6813_init(hspi1, GPIOA, 4);
 80019b2:	f107 050c 	add.w	r5, r7, #12
 80019b6:	4c31      	ldr	r4, [pc, #196]	; (8001a7c <measurements_thread_fn+0xd4>)
 80019b8:	2304      	movs	r3, #4
 80019ba:	9314      	str	r3, [sp, #80]	; 0x50
 80019bc:	4b30      	ldr	r3, [pc, #192]	; (8001a80 <measurements_thread_fn+0xd8>)
 80019be:	9313      	str	r3, [sp, #76]	; 0x4c
 80019c0:	4668      	mov	r0, sp
 80019c2:	f104 030c 	add.w	r3, r4, #12
 80019c6:	224c      	movs	r2, #76	; 0x4c
 80019c8:	4619      	mov	r1, r3
 80019ca:	f006 fca1 	bl	8008310 <memcpy>
 80019ce:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 80019d2:	4628      	mov	r0, r5
 80019d4:	f7fe ff5d 	bl	8000892 <Ltc6813_init>

	Ltc6813_wakeup_sleep(&slave_device);
 80019d8:	f107 030c 	add.w	r3, r7, #12
 80019dc:	4618      	mov	r0, r3
 80019de:	f7ff f811 	bl	8000a04 <Ltc6813_wakeup_sleep>
	uint8_t success;
	osDelay(1000);
 80019e2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80019e6:	f003 fff7 	bl	80059d8 <osDelay>

	while (1) {
		Ltc6813_wakeup_sleep(&slave_device);
 80019ea:	f107 030c 	add.w	r3, r7, #12
 80019ee:	4618      	mov	r0, r3
 80019f0:	f7ff f808 	bl	8000a04 <Ltc6813_wakeup_sleep>

		printf("CFG A\r\n");
 80019f4:	4823      	ldr	r0, [pc, #140]	; (8001a84 <measurements_thread_fn+0xdc>)
 80019f6:	f006 fd27 	bl	8008448 <puts>

		success = Ltc6813_read_cfga(&slave_device);
 80019fa:	f107 030c 	add.w	r3, r7, #12
 80019fe:	4618      	mov	r0, r3
 8001a00:	f7ff f849 	bl	8000a96 <Ltc6813_read_cfga>
 8001a04:	4603      	mov	r3, r0
 8001a06:	f887 319f 	strb.w	r3, [r7, #415]	; 0x19f

		if (success) {
 8001a0a:	f897 319f 	ldrb.w	r3, [r7, #415]	; 0x19f
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d003      	beq.n	8001a1a <measurements_thread_fn+0x72>
			printf("PEC SUCCESS\r\n");
 8001a12:	481d      	ldr	r0, [pc, #116]	; (8001a88 <measurements_thread_fn+0xe0>)
 8001a14:	f006 fd18 	bl	8008448 <puts>
 8001a18:	e002      	b.n	8001a20 <measurements_thread_fn+0x78>
		} else {
			printf("PEC FAIL\r\n");
 8001a1a:	481c      	ldr	r0, [pc, #112]	; (8001a8c <measurements_thread_fn+0xe4>)
 8001a1c:	f006 fd14 	bl	8008448 <puts>
		}

		Buffer_print(&(slave_device.cfga_bfr));
 8001a20:	f107 030c 	add.w	r3, r7, #12
 8001a24:	33c2      	adds	r3, #194	; 0xc2
 8001a26:	4618      	mov	r0, r3
 8001a28:	f7fe fede 	bl	80007e8 <Buffer_print>
		Ltc6813_wakeup_sleep(&slave_device);
 8001a2c:	f107 030c 	add.w	r3, r7, #12
 8001a30:	4618      	mov	r0, r3
 8001a32:	f7fe ffe7 	bl	8000a04 <Ltc6813_wakeup_sleep>
		printf("CFG B\r\n");
 8001a36:	4816      	ldr	r0, [pc, #88]	; (8001a90 <measurements_thread_fn+0xe8>)
 8001a38:	f006 fd06 	bl	8008448 <puts>

		success = Ltc6813_read_cfgb(&slave_device);
 8001a3c:	f107 030c 	add.w	r3, r7, #12
 8001a40:	4618      	mov	r0, r3
 8001a42:	f7ff f85c 	bl	8000afe <Ltc6813_read_cfgb>
 8001a46:	4603      	mov	r3, r0
 8001a48:	f887 319f 	strb.w	r3, [r7, #415]	; 0x19f

		if (success) {
 8001a4c:	f897 319f 	ldrb.w	r3, [r7, #415]	; 0x19f
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d003      	beq.n	8001a5c <measurements_thread_fn+0xb4>
			printf("PEC SUCCESS\r\n");
 8001a54:	480c      	ldr	r0, [pc, #48]	; (8001a88 <measurements_thread_fn+0xe0>)
 8001a56:	f006 fcf7 	bl	8008448 <puts>
 8001a5a:	e002      	b.n	8001a62 <measurements_thread_fn+0xba>
		} else {
			printf("PEC FAIL\r\n");
 8001a5c:	480b      	ldr	r0, [pc, #44]	; (8001a8c <measurements_thread_fn+0xe4>)
 8001a5e:	f006 fcf3 	bl	8008448 <puts>
		}

		Buffer_print(&(slave_device.cfgb_bfr));
 8001a62:	f107 030c 	add.w	r3, r7, #12
 8001a66:	f203 1327 	addw	r3, r3, #295	; 0x127
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	f7fe febc 	bl	80007e8 <Buffer_print>

		osDelay(500);
 8001a70:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001a74:	f003 ffb0 	bl	80059d8 <osDelay>
		Ltc6813_wakeup_sleep(&slave_device);
 8001a78:	e7b7      	b.n	80019ea <measurements_thread_fn+0x42>
 8001a7a:	bf00      	nop
 8001a7c:	20004b0c 	.word	0x20004b0c
 8001a80:	40020000 	.word	0x40020000
 8001a84:	08009724 	.word	0x08009724
 8001a88:	0800972c 	.word	0x0800972c
 8001a8c:	0800973c 	.word	0x0800973c
 8001a90:	08009748 	.word	0x08009748

08001a94 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001a94:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001acc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001a98:	480d      	ldr	r0, [pc, #52]	; (8001ad0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001a9a:	490e      	ldr	r1, [pc, #56]	; (8001ad4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001a9c:	4a0e      	ldr	r2, [pc, #56]	; (8001ad8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001a9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001aa0:	e002      	b.n	8001aa8 <LoopCopyDataInit>

08001aa2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001aa2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001aa4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001aa6:	3304      	adds	r3, #4

08001aa8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001aa8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001aaa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001aac:	d3f9      	bcc.n	8001aa2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001aae:	4a0b      	ldr	r2, [pc, #44]	; (8001adc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001ab0:	4c0b      	ldr	r4, [pc, #44]	; (8001ae0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001ab2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ab4:	e001      	b.n	8001aba <LoopFillZerobss>

08001ab6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ab6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ab8:	3204      	adds	r2, #4

08001aba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001aba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001abc:	d3fb      	bcc.n	8001ab6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001abe:	f7ff ff2d 	bl	800191c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001ac2:	f006 fc01 	bl	80082c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001ac6:	f7ff f850 	bl	8000b6a <main>
  bx  lr    
 8001aca:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001acc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001ad0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ad4:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001ad8:	08009a70 	.word	0x08009a70
  ldr r2, =_sbss
 8001adc:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001ae0:	20004c74 	.word	0x20004c74

08001ae4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ae4:	e7fe      	b.n	8001ae4 <ADC_IRQHandler>
	...

08001ae8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001aec:	4b0e      	ldr	r3, [pc, #56]	; (8001b28 <HAL_Init+0x40>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4a0d      	ldr	r2, [pc, #52]	; (8001b28 <HAL_Init+0x40>)
 8001af2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001af6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001af8:	4b0b      	ldr	r3, [pc, #44]	; (8001b28 <HAL_Init+0x40>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4a0a      	ldr	r2, [pc, #40]	; (8001b28 <HAL_Init+0x40>)
 8001afe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b02:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b04:	4b08      	ldr	r3, [pc, #32]	; (8001b28 <HAL_Init+0x40>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4a07      	ldr	r2, [pc, #28]	; (8001b28 <HAL_Init+0x40>)
 8001b0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b0e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b10:	2003      	movs	r0, #3
 8001b12:	f000 fc36 	bl	8002382 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b16:	2000      	movs	r0, #0
 8001b18:	f7ff fdd4 	bl	80016c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b1c:	f7ff fbb2 	bl	8001284 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b20:	2300      	movs	r3, #0
}
 8001b22:	4618      	mov	r0, r3
 8001b24:	bd80      	pop	{r7, pc}
 8001b26:	bf00      	nop
 8001b28:	40023c00 	.word	0x40023c00

08001b2c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b30:	4b06      	ldr	r3, [pc, #24]	; (8001b4c <HAL_IncTick+0x20>)
 8001b32:	781b      	ldrb	r3, [r3, #0]
 8001b34:	461a      	mov	r2, r3
 8001b36:	4b06      	ldr	r3, [pc, #24]	; (8001b50 <HAL_IncTick+0x24>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4413      	add	r3, r2
 8001b3c:	4a04      	ldr	r2, [pc, #16]	; (8001b50 <HAL_IncTick+0x24>)
 8001b3e:	6013      	str	r3, [r2, #0]
}
 8001b40:	bf00      	nop
 8001b42:	46bd      	mov	sp, r7
 8001b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b48:	4770      	bx	lr
 8001b4a:	bf00      	nop
 8001b4c:	20000008 	.word	0x20000008
 8001b50:	20004c20 	.word	0x20004c20

08001b54 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b54:	b480      	push	{r7}
 8001b56:	af00      	add	r7, sp, #0
  return uwTick;
 8001b58:	4b03      	ldr	r3, [pc, #12]	; (8001b68 <HAL_GetTick+0x14>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
}
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b64:	4770      	bx	lr
 8001b66:	bf00      	nop
 8001b68:	20004c20 	.word	0x20004c20

08001b6c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b084      	sub	sp, #16
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b74:	2300      	movs	r3, #0
 8001b76:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d101      	bne.n	8001b82 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001b7e:	2301      	movs	r3, #1
 8001b80:	e033      	b.n	8001bea <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d109      	bne.n	8001b9e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001b8a:	6878      	ldr	r0, [r7, #4]
 8001b8c:	f7ff fba6 	bl	80012dc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	2200      	movs	r2, #0
 8001b94:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	2200      	movs	r2, #0
 8001b9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ba2:	f003 0310 	and.w	r3, r3, #16
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d118      	bne.n	8001bdc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bae:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001bb2:	f023 0302 	bic.w	r3, r3, #2
 8001bb6:	f043 0202 	orr.w	r2, r3, #2
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001bbe:	6878      	ldr	r0, [r7, #4]
 8001bc0:	f000 f93a 	bl	8001e38 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bce:	f023 0303 	bic.w	r3, r3, #3
 8001bd2:	f043 0201 	orr.w	r2, r3, #1
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	641a      	str	r2, [r3, #64]	; 0x40
 8001bda:	e001      	b.n	8001be0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001bdc:	2301      	movs	r3, #1
 8001bde:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	2200      	movs	r2, #0
 8001be4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001be8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bea:	4618      	mov	r0, r3
 8001bec:	3710      	adds	r7, #16
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}
	...

08001bf4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	b085      	sub	sp, #20
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
 8001bfc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c08:	2b01      	cmp	r3, #1
 8001c0a:	d101      	bne.n	8001c10 <HAL_ADC_ConfigChannel+0x1c>
 8001c0c:	2302      	movs	r3, #2
 8001c0e:	e105      	b.n	8001e1c <HAL_ADC_ConfigChannel+0x228>
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2201      	movs	r2, #1
 8001c14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	2b09      	cmp	r3, #9
 8001c1e:	d925      	bls.n	8001c6c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	68d9      	ldr	r1, [r3, #12]
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	b29b      	uxth	r3, r3
 8001c2c:	461a      	mov	r2, r3
 8001c2e:	4613      	mov	r3, r2
 8001c30:	005b      	lsls	r3, r3, #1
 8001c32:	4413      	add	r3, r2
 8001c34:	3b1e      	subs	r3, #30
 8001c36:	2207      	movs	r2, #7
 8001c38:	fa02 f303 	lsl.w	r3, r2, r3
 8001c3c:	43da      	mvns	r2, r3
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	400a      	ands	r2, r1
 8001c44:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	68d9      	ldr	r1, [r3, #12]
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	689a      	ldr	r2, [r3, #8]
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	b29b      	uxth	r3, r3
 8001c56:	4618      	mov	r0, r3
 8001c58:	4603      	mov	r3, r0
 8001c5a:	005b      	lsls	r3, r3, #1
 8001c5c:	4403      	add	r3, r0
 8001c5e:	3b1e      	subs	r3, #30
 8001c60:	409a      	lsls	r2, r3
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	430a      	orrs	r2, r1
 8001c68:	60da      	str	r2, [r3, #12]
 8001c6a:	e022      	b.n	8001cb2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	6919      	ldr	r1, [r3, #16]
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	b29b      	uxth	r3, r3
 8001c78:	461a      	mov	r2, r3
 8001c7a:	4613      	mov	r3, r2
 8001c7c:	005b      	lsls	r3, r3, #1
 8001c7e:	4413      	add	r3, r2
 8001c80:	2207      	movs	r2, #7
 8001c82:	fa02 f303 	lsl.w	r3, r2, r3
 8001c86:	43da      	mvns	r2, r3
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	400a      	ands	r2, r1
 8001c8e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	6919      	ldr	r1, [r3, #16]
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	689a      	ldr	r2, [r3, #8]
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	b29b      	uxth	r3, r3
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	005b      	lsls	r3, r3, #1
 8001ca6:	4403      	add	r3, r0
 8001ca8:	409a      	lsls	r2, r3
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	430a      	orrs	r2, r1
 8001cb0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	685b      	ldr	r3, [r3, #4]
 8001cb6:	2b06      	cmp	r3, #6
 8001cb8:	d824      	bhi.n	8001d04 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	685a      	ldr	r2, [r3, #4]
 8001cc4:	4613      	mov	r3, r2
 8001cc6:	009b      	lsls	r3, r3, #2
 8001cc8:	4413      	add	r3, r2
 8001cca:	3b05      	subs	r3, #5
 8001ccc:	221f      	movs	r2, #31
 8001cce:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd2:	43da      	mvns	r2, r3
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	400a      	ands	r2, r1
 8001cda:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	b29b      	uxth	r3, r3
 8001ce8:	4618      	mov	r0, r3
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	685a      	ldr	r2, [r3, #4]
 8001cee:	4613      	mov	r3, r2
 8001cf0:	009b      	lsls	r3, r3, #2
 8001cf2:	4413      	add	r3, r2
 8001cf4:	3b05      	subs	r3, #5
 8001cf6:	fa00 f203 	lsl.w	r2, r0, r3
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	430a      	orrs	r2, r1
 8001d00:	635a      	str	r2, [r3, #52]	; 0x34
 8001d02:	e04c      	b.n	8001d9e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	2b0c      	cmp	r3, #12
 8001d0a:	d824      	bhi.n	8001d56 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	685a      	ldr	r2, [r3, #4]
 8001d16:	4613      	mov	r3, r2
 8001d18:	009b      	lsls	r3, r3, #2
 8001d1a:	4413      	add	r3, r2
 8001d1c:	3b23      	subs	r3, #35	; 0x23
 8001d1e:	221f      	movs	r2, #31
 8001d20:	fa02 f303 	lsl.w	r3, r2, r3
 8001d24:	43da      	mvns	r2, r3
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	400a      	ands	r2, r1
 8001d2c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	b29b      	uxth	r3, r3
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	685a      	ldr	r2, [r3, #4]
 8001d40:	4613      	mov	r3, r2
 8001d42:	009b      	lsls	r3, r3, #2
 8001d44:	4413      	add	r3, r2
 8001d46:	3b23      	subs	r3, #35	; 0x23
 8001d48:	fa00 f203 	lsl.w	r2, r0, r3
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	430a      	orrs	r2, r1
 8001d52:	631a      	str	r2, [r3, #48]	; 0x30
 8001d54:	e023      	b.n	8001d9e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	685a      	ldr	r2, [r3, #4]
 8001d60:	4613      	mov	r3, r2
 8001d62:	009b      	lsls	r3, r3, #2
 8001d64:	4413      	add	r3, r2
 8001d66:	3b41      	subs	r3, #65	; 0x41
 8001d68:	221f      	movs	r2, #31
 8001d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d6e:	43da      	mvns	r2, r3
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	400a      	ands	r2, r1
 8001d76:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	b29b      	uxth	r3, r3
 8001d84:	4618      	mov	r0, r3
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	685a      	ldr	r2, [r3, #4]
 8001d8a:	4613      	mov	r3, r2
 8001d8c:	009b      	lsls	r3, r3, #2
 8001d8e:	4413      	add	r3, r2
 8001d90:	3b41      	subs	r3, #65	; 0x41
 8001d92:	fa00 f203 	lsl.w	r2, r0, r3
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	430a      	orrs	r2, r1
 8001d9c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001d9e:	4b22      	ldr	r3, [pc, #136]	; (8001e28 <HAL_ADC_ConfigChannel+0x234>)
 8001da0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4a21      	ldr	r2, [pc, #132]	; (8001e2c <HAL_ADC_ConfigChannel+0x238>)
 8001da8:	4293      	cmp	r3, r2
 8001daa:	d109      	bne.n	8001dc0 <HAL_ADC_ConfigChannel+0x1cc>
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	2b12      	cmp	r3, #18
 8001db2:	d105      	bne.n	8001dc0 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	685b      	ldr	r3, [r3, #4]
 8001db8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4a19      	ldr	r2, [pc, #100]	; (8001e2c <HAL_ADC_ConfigChannel+0x238>)
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d123      	bne.n	8001e12 <HAL_ADC_ConfigChannel+0x21e>
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	2b10      	cmp	r3, #16
 8001dd0:	d003      	beq.n	8001dda <HAL_ADC_ConfigChannel+0x1e6>
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	2b11      	cmp	r3, #17
 8001dd8:	d11b      	bne.n	8001e12 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	685b      	ldr	r3, [r3, #4]
 8001dde:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	2b10      	cmp	r3, #16
 8001dec:	d111      	bne.n	8001e12 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001dee:	4b10      	ldr	r3, [pc, #64]	; (8001e30 <HAL_ADC_ConfigChannel+0x23c>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	4a10      	ldr	r2, [pc, #64]	; (8001e34 <HAL_ADC_ConfigChannel+0x240>)
 8001df4:	fba2 2303 	umull	r2, r3, r2, r3
 8001df8:	0c9a      	lsrs	r2, r3, #18
 8001dfa:	4613      	mov	r3, r2
 8001dfc:	009b      	lsls	r3, r3, #2
 8001dfe:	4413      	add	r3, r2
 8001e00:	005b      	lsls	r3, r3, #1
 8001e02:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001e04:	e002      	b.n	8001e0c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001e06:	68bb      	ldr	r3, [r7, #8]
 8001e08:	3b01      	subs	r3, #1
 8001e0a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001e0c:	68bb      	ldr	r3, [r7, #8]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d1f9      	bne.n	8001e06 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	2200      	movs	r2, #0
 8001e16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001e1a:	2300      	movs	r3, #0
}
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	3714      	adds	r7, #20
 8001e20:	46bd      	mov	sp, r7
 8001e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e26:	4770      	bx	lr
 8001e28:	40012300 	.word	0x40012300
 8001e2c:	40012000 	.word	0x40012000
 8001e30:	20000000 	.word	0x20000000
 8001e34:	431bde83 	.word	0x431bde83

08001e38 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	b085      	sub	sp, #20
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001e40:	4b79      	ldr	r3, [pc, #484]	; (8002028 <ADC_Init+0x1f0>)
 8001e42:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	685a      	ldr	r2, [r3, #4]
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	431a      	orrs	r2, r3
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	685a      	ldr	r2, [r3, #4]
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001e6c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	6859      	ldr	r1, [r3, #4]
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	691b      	ldr	r3, [r3, #16]
 8001e78:	021a      	lsls	r2, r3, #8
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	430a      	orrs	r2, r1
 8001e80:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	685a      	ldr	r2, [r3, #4]
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001e90:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	6859      	ldr	r1, [r3, #4]
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	689a      	ldr	r2, [r3, #8]
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	430a      	orrs	r2, r1
 8001ea2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	689a      	ldr	r2, [r3, #8]
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001eb2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	6899      	ldr	r1, [r3, #8]
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	68da      	ldr	r2, [r3, #12]
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	430a      	orrs	r2, r1
 8001ec4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001eca:	4a58      	ldr	r2, [pc, #352]	; (800202c <ADC_Init+0x1f4>)
 8001ecc:	4293      	cmp	r3, r2
 8001ece:	d022      	beq.n	8001f16 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	689a      	ldr	r2, [r3, #8]
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001ede:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	6899      	ldr	r1, [r3, #8]
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	430a      	orrs	r2, r1
 8001ef0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	689a      	ldr	r2, [r3, #8]
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001f00:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	6899      	ldr	r1, [r3, #8]
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	430a      	orrs	r2, r1
 8001f12:	609a      	str	r2, [r3, #8]
 8001f14:	e00f      	b.n	8001f36 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	689a      	ldr	r2, [r3, #8]
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001f24:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	689a      	ldr	r2, [r3, #8]
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001f34:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	689a      	ldr	r2, [r3, #8]
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f022 0202 	bic.w	r2, r2, #2
 8001f44:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	6899      	ldr	r1, [r3, #8]
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	7e1b      	ldrb	r3, [r3, #24]
 8001f50:	005a      	lsls	r2, r3, #1
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	430a      	orrs	r2, r1
 8001f58:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d01b      	beq.n	8001f9c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	685a      	ldr	r2, [r3, #4]
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001f72:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	685a      	ldr	r2, [r3, #4]
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001f82:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	6859      	ldr	r1, [r3, #4]
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f8e:	3b01      	subs	r3, #1
 8001f90:	035a      	lsls	r2, r3, #13
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	430a      	orrs	r2, r1
 8001f98:	605a      	str	r2, [r3, #4]
 8001f9a:	e007      	b.n	8001fac <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	685a      	ldr	r2, [r3, #4]
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001faa:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001fba:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	69db      	ldr	r3, [r3, #28]
 8001fc6:	3b01      	subs	r3, #1
 8001fc8:	051a      	lsls	r2, r3, #20
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	430a      	orrs	r2, r1
 8001fd0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	689a      	ldr	r2, [r3, #8]
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001fe0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	6899      	ldr	r1, [r3, #8]
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001fee:	025a      	lsls	r2, r3, #9
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	430a      	orrs	r2, r1
 8001ff6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	689a      	ldr	r2, [r3, #8]
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002006:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	6899      	ldr	r1, [r3, #8]
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	695b      	ldr	r3, [r3, #20]
 8002012:	029a      	lsls	r2, r3, #10
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	430a      	orrs	r2, r1
 800201a:	609a      	str	r2, [r3, #8]
}
 800201c:	bf00      	nop
 800201e:	3714      	adds	r7, #20
 8002020:	46bd      	mov	sp, r7
 8002022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002026:	4770      	bx	lr
 8002028:	40012300 	.word	0x40012300
 800202c:	0f000001 	.word	0x0f000001

08002030 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b084      	sub	sp, #16
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2b00      	cmp	r3, #0
 800203c:	d101      	bne.n	8002042 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800203e:	2301      	movs	r3, #1
 8002040:	e0ed      	b.n	800221e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002048:	b2db      	uxtb	r3, r3
 800204a:	2b00      	cmp	r3, #0
 800204c:	d102      	bne.n	8002054 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800204e:	6878      	ldr	r0, [r7, #4]
 8002050:	f7ff f9a4 	bl	800139c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	681a      	ldr	r2, [r3, #0]
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f022 0202 	bic.w	r2, r2, #2
 8002062:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002064:	f7ff fd76 	bl	8001b54 <HAL_GetTick>
 8002068:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800206a:	e012      	b.n	8002092 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800206c:	f7ff fd72 	bl	8001b54 <HAL_GetTick>
 8002070:	4602      	mov	r2, r0
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	1ad3      	subs	r3, r2, r3
 8002076:	2b0a      	cmp	r3, #10
 8002078:	d90b      	bls.n	8002092 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800207e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2205      	movs	r2, #5
 800208a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800208e:	2301      	movs	r3, #1
 8002090:	e0c5      	b.n	800221e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	f003 0302 	and.w	r3, r3, #2
 800209c:	2b00      	cmp	r3, #0
 800209e:	d1e5      	bne.n	800206c <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	681a      	ldr	r2, [r3, #0]
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f042 0201 	orr.w	r2, r2, #1
 80020ae:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80020b0:	f7ff fd50 	bl	8001b54 <HAL_GetTick>
 80020b4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80020b6:	e012      	b.n	80020de <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80020b8:	f7ff fd4c 	bl	8001b54 <HAL_GetTick>
 80020bc:	4602      	mov	r2, r0
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	1ad3      	subs	r3, r2, r3
 80020c2:	2b0a      	cmp	r3, #10
 80020c4:	d90b      	bls.n	80020de <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ca:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	2205      	movs	r2, #5
 80020d6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80020da:	2301      	movs	r3, #1
 80020dc:	e09f      	b.n	800221e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	f003 0301 	and.w	r3, r3, #1
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d0e5      	beq.n	80020b8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	7e1b      	ldrb	r3, [r3, #24]
 80020f0:	2b01      	cmp	r3, #1
 80020f2:	d108      	bne.n	8002106 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	681a      	ldr	r2, [r3, #0]
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002102:	601a      	str	r2, [r3, #0]
 8002104:	e007      	b.n	8002116 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	681a      	ldr	r2, [r3, #0]
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002114:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	7e5b      	ldrb	r3, [r3, #25]
 800211a:	2b01      	cmp	r3, #1
 800211c:	d108      	bne.n	8002130 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	681a      	ldr	r2, [r3, #0]
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800212c:	601a      	str	r2, [r3, #0]
 800212e:	e007      	b.n	8002140 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	681a      	ldr	r2, [r3, #0]
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800213e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	7e9b      	ldrb	r3, [r3, #26]
 8002144:	2b01      	cmp	r3, #1
 8002146:	d108      	bne.n	800215a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	681a      	ldr	r2, [r3, #0]
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f042 0220 	orr.w	r2, r2, #32
 8002156:	601a      	str	r2, [r3, #0]
 8002158:	e007      	b.n	800216a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	681a      	ldr	r2, [r3, #0]
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f022 0220 	bic.w	r2, r2, #32
 8002168:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	7edb      	ldrb	r3, [r3, #27]
 800216e:	2b01      	cmp	r3, #1
 8002170:	d108      	bne.n	8002184 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	681a      	ldr	r2, [r3, #0]
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f022 0210 	bic.w	r2, r2, #16
 8002180:	601a      	str	r2, [r3, #0]
 8002182:	e007      	b.n	8002194 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	681a      	ldr	r2, [r3, #0]
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f042 0210 	orr.w	r2, r2, #16
 8002192:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	7f1b      	ldrb	r3, [r3, #28]
 8002198:	2b01      	cmp	r3, #1
 800219a:	d108      	bne.n	80021ae <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	681a      	ldr	r2, [r3, #0]
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f042 0208 	orr.w	r2, r2, #8
 80021aa:	601a      	str	r2, [r3, #0]
 80021ac:	e007      	b.n	80021be <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	681a      	ldr	r2, [r3, #0]
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f022 0208 	bic.w	r2, r2, #8
 80021bc:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	7f5b      	ldrb	r3, [r3, #29]
 80021c2:	2b01      	cmp	r3, #1
 80021c4:	d108      	bne.n	80021d8 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	681a      	ldr	r2, [r3, #0]
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f042 0204 	orr.w	r2, r2, #4
 80021d4:	601a      	str	r2, [r3, #0]
 80021d6:	e007      	b.n	80021e8 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	681a      	ldr	r2, [r3, #0]
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f022 0204 	bic.w	r2, r2, #4
 80021e6:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	689a      	ldr	r2, [r3, #8]
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	68db      	ldr	r3, [r3, #12]
 80021f0:	431a      	orrs	r2, r3
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	691b      	ldr	r3, [r3, #16]
 80021f6:	431a      	orrs	r2, r3
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	695b      	ldr	r3, [r3, #20]
 80021fc:	ea42 0103 	orr.w	r1, r2, r3
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	1e5a      	subs	r2, r3, #1
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	430a      	orrs	r2, r1
 800220c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	2200      	movs	r2, #0
 8002212:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2201      	movs	r2, #1
 8002218:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800221c:	2300      	movs	r3, #0
}
 800221e:	4618      	mov	r0, r3
 8002220:	3710      	adds	r7, #16
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}
	...

08002228 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002228:	b480      	push	{r7}
 800222a:	b085      	sub	sp, #20
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	f003 0307 	and.w	r3, r3, #7
 8002236:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002238:	4b0c      	ldr	r3, [pc, #48]	; (800226c <__NVIC_SetPriorityGrouping+0x44>)
 800223a:	68db      	ldr	r3, [r3, #12]
 800223c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800223e:	68ba      	ldr	r2, [r7, #8]
 8002240:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002244:	4013      	ands	r3, r2
 8002246:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800224c:	68bb      	ldr	r3, [r7, #8]
 800224e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002250:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002254:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002258:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800225a:	4a04      	ldr	r2, [pc, #16]	; (800226c <__NVIC_SetPriorityGrouping+0x44>)
 800225c:	68bb      	ldr	r3, [r7, #8]
 800225e:	60d3      	str	r3, [r2, #12]
}
 8002260:	bf00      	nop
 8002262:	3714      	adds	r7, #20
 8002264:	46bd      	mov	sp, r7
 8002266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226a:	4770      	bx	lr
 800226c:	e000ed00 	.word	0xe000ed00

08002270 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002270:	b480      	push	{r7}
 8002272:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002274:	4b04      	ldr	r3, [pc, #16]	; (8002288 <__NVIC_GetPriorityGrouping+0x18>)
 8002276:	68db      	ldr	r3, [r3, #12]
 8002278:	0a1b      	lsrs	r3, r3, #8
 800227a:	f003 0307 	and.w	r3, r3, #7
}
 800227e:	4618      	mov	r0, r3
 8002280:	46bd      	mov	sp, r7
 8002282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002286:	4770      	bx	lr
 8002288:	e000ed00 	.word	0xe000ed00

0800228c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800228c:	b480      	push	{r7}
 800228e:	b083      	sub	sp, #12
 8002290:	af00      	add	r7, sp, #0
 8002292:	4603      	mov	r3, r0
 8002294:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002296:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800229a:	2b00      	cmp	r3, #0
 800229c:	db0b      	blt.n	80022b6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800229e:	79fb      	ldrb	r3, [r7, #7]
 80022a0:	f003 021f 	and.w	r2, r3, #31
 80022a4:	4907      	ldr	r1, [pc, #28]	; (80022c4 <__NVIC_EnableIRQ+0x38>)
 80022a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022aa:	095b      	lsrs	r3, r3, #5
 80022ac:	2001      	movs	r0, #1
 80022ae:	fa00 f202 	lsl.w	r2, r0, r2
 80022b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80022b6:	bf00      	nop
 80022b8:	370c      	adds	r7, #12
 80022ba:	46bd      	mov	sp, r7
 80022bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c0:	4770      	bx	lr
 80022c2:	bf00      	nop
 80022c4:	e000e100 	.word	0xe000e100

080022c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80022c8:	b480      	push	{r7}
 80022ca:	b083      	sub	sp, #12
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	4603      	mov	r3, r0
 80022d0:	6039      	str	r1, [r7, #0]
 80022d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	db0a      	blt.n	80022f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	b2da      	uxtb	r2, r3
 80022e0:	490c      	ldr	r1, [pc, #48]	; (8002314 <__NVIC_SetPriority+0x4c>)
 80022e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022e6:	0112      	lsls	r2, r2, #4
 80022e8:	b2d2      	uxtb	r2, r2
 80022ea:	440b      	add	r3, r1
 80022ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80022f0:	e00a      	b.n	8002308 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	b2da      	uxtb	r2, r3
 80022f6:	4908      	ldr	r1, [pc, #32]	; (8002318 <__NVIC_SetPriority+0x50>)
 80022f8:	79fb      	ldrb	r3, [r7, #7]
 80022fa:	f003 030f 	and.w	r3, r3, #15
 80022fe:	3b04      	subs	r3, #4
 8002300:	0112      	lsls	r2, r2, #4
 8002302:	b2d2      	uxtb	r2, r2
 8002304:	440b      	add	r3, r1
 8002306:	761a      	strb	r2, [r3, #24]
}
 8002308:	bf00      	nop
 800230a:	370c      	adds	r7, #12
 800230c:	46bd      	mov	sp, r7
 800230e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002312:	4770      	bx	lr
 8002314:	e000e100 	.word	0xe000e100
 8002318:	e000ed00 	.word	0xe000ed00

0800231c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800231c:	b480      	push	{r7}
 800231e:	b089      	sub	sp, #36	; 0x24
 8002320:	af00      	add	r7, sp, #0
 8002322:	60f8      	str	r0, [r7, #12]
 8002324:	60b9      	str	r1, [r7, #8]
 8002326:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	f003 0307 	and.w	r3, r3, #7
 800232e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002330:	69fb      	ldr	r3, [r7, #28]
 8002332:	f1c3 0307 	rsb	r3, r3, #7
 8002336:	2b04      	cmp	r3, #4
 8002338:	bf28      	it	cs
 800233a:	2304      	movcs	r3, #4
 800233c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800233e:	69fb      	ldr	r3, [r7, #28]
 8002340:	3304      	adds	r3, #4
 8002342:	2b06      	cmp	r3, #6
 8002344:	d902      	bls.n	800234c <NVIC_EncodePriority+0x30>
 8002346:	69fb      	ldr	r3, [r7, #28]
 8002348:	3b03      	subs	r3, #3
 800234a:	e000      	b.n	800234e <NVIC_EncodePriority+0x32>
 800234c:	2300      	movs	r3, #0
 800234e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002350:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002354:	69bb      	ldr	r3, [r7, #24]
 8002356:	fa02 f303 	lsl.w	r3, r2, r3
 800235a:	43da      	mvns	r2, r3
 800235c:	68bb      	ldr	r3, [r7, #8]
 800235e:	401a      	ands	r2, r3
 8002360:	697b      	ldr	r3, [r7, #20]
 8002362:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002364:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002368:	697b      	ldr	r3, [r7, #20]
 800236a:	fa01 f303 	lsl.w	r3, r1, r3
 800236e:	43d9      	mvns	r1, r3
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002374:	4313      	orrs	r3, r2
         );
}
 8002376:	4618      	mov	r0, r3
 8002378:	3724      	adds	r7, #36	; 0x24
 800237a:	46bd      	mov	sp, r7
 800237c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002380:	4770      	bx	lr

08002382 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002382:	b580      	push	{r7, lr}
 8002384:	b082      	sub	sp, #8
 8002386:	af00      	add	r7, sp, #0
 8002388:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800238a:	6878      	ldr	r0, [r7, #4]
 800238c:	f7ff ff4c 	bl	8002228 <__NVIC_SetPriorityGrouping>
}
 8002390:	bf00      	nop
 8002392:	3708      	adds	r7, #8
 8002394:	46bd      	mov	sp, r7
 8002396:	bd80      	pop	{r7, pc}

08002398 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002398:	b580      	push	{r7, lr}
 800239a:	b086      	sub	sp, #24
 800239c:	af00      	add	r7, sp, #0
 800239e:	4603      	mov	r3, r0
 80023a0:	60b9      	str	r1, [r7, #8]
 80023a2:	607a      	str	r2, [r7, #4]
 80023a4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80023a6:	2300      	movs	r3, #0
 80023a8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80023aa:	f7ff ff61 	bl	8002270 <__NVIC_GetPriorityGrouping>
 80023ae:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80023b0:	687a      	ldr	r2, [r7, #4]
 80023b2:	68b9      	ldr	r1, [r7, #8]
 80023b4:	6978      	ldr	r0, [r7, #20]
 80023b6:	f7ff ffb1 	bl	800231c <NVIC_EncodePriority>
 80023ba:	4602      	mov	r2, r0
 80023bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023c0:	4611      	mov	r1, r2
 80023c2:	4618      	mov	r0, r3
 80023c4:	f7ff ff80 	bl	80022c8 <__NVIC_SetPriority>
}
 80023c8:	bf00      	nop
 80023ca:	3718      	adds	r7, #24
 80023cc:	46bd      	mov	sp, r7
 80023ce:	bd80      	pop	{r7, pc}

080023d0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b082      	sub	sp, #8
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	4603      	mov	r3, r0
 80023d8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80023da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023de:	4618      	mov	r0, r3
 80023e0:	f7ff ff54 	bl	800228c <__NVIC_EnableIRQ>
}
 80023e4:	bf00      	nop
 80023e6:	3708      	adds	r7, #8
 80023e8:	46bd      	mov	sp, r7
 80023ea:	bd80      	pop	{r7, pc}

080023ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023ec:	b480      	push	{r7}
 80023ee:	b089      	sub	sp, #36	; 0x24
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
 80023f4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80023f6:	2300      	movs	r3, #0
 80023f8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80023fa:	2300      	movs	r3, #0
 80023fc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80023fe:	2300      	movs	r3, #0
 8002400:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002402:	2300      	movs	r3, #0
 8002404:	61fb      	str	r3, [r7, #28]
 8002406:	e16b      	b.n	80026e0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002408:	2201      	movs	r2, #1
 800240a:	69fb      	ldr	r3, [r7, #28]
 800240c:	fa02 f303 	lsl.w	r3, r2, r3
 8002410:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	697a      	ldr	r2, [r7, #20]
 8002418:	4013      	ands	r3, r2
 800241a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800241c:	693a      	ldr	r2, [r7, #16]
 800241e:	697b      	ldr	r3, [r7, #20]
 8002420:	429a      	cmp	r2, r3
 8002422:	f040 815a 	bne.w	80026da <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	f003 0303 	and.w	r3, r3, #3
 800242e:	2b01      	cmp	r3, #1
 8002430:	d005      	beq.n	800243e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800243a:	2b02      	cmp	r3, #2
 800243c:	d130      	bne.n	80024a0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	689b      	ldr	r3, [r3, #8]
 8002442:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002444:	69fb      	ldr	r3, [r7, #28]
 8002446:	005b      	lsls	r3, r3, #1
 8002448:	2203      	movs	r2, #3
 800244a:	fa02 f303 	lsl.w	r3, r2, r3
 800244e:	43db      	mvns	r3, r3
 8002450:	69ba      	ldr	r2, [r7, #24]
 8002452:	4013      	ands	r3, r2
 8002454:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	68da      	ldr	r2, [r3, #12]
 800245a:	69fb      	ldr	r3, [r7, #28]
 800245c:	005b      	lsls	r3, r3, #1
 800245e:	fa02 f303 	lsl.w	r3, r2, r3
 8002462:	69ba      	ldr	r2, [r7, #24]
 8002464:	4313      	orrs	r3, r2
 8002466:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	69ba      	ldr	r2, [r7, #24]
 800246c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002474:	2201      	movs	r2, #1
 8002476:	69fb      	ldr	r3, [r7, #28]
 8002478:	fa02 f303 	lsl.w	r3, r2, r3
 800247c:	43db      	mvns	r3, r3
 800247e:	69ba      	ldr	r2, [r7, #24]
 8002480:	4013      	ands	r3, r2
 8002482:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	091b      	lsrs	r3, r3, #4
 800248a:	f003 0201 	and.w	r2, r3, #1
 800248e:	69fb      	ldr	r3, [r7, #28]
 8002490:	fa02 f303 	lsl.w	r3, r2, r3
 8002494:	69ba      	ldr	r2, [r7, #24]
 8002496:	4313      	orrs	r3, r2
 8002498:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	69ba      	ldr	r2, [r7, #24]
 800249e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	f003 0303 	and.w	r3, r3, #3
 80024a8:	2b03      	cmp	r3, #3
 80024aa:	d017      	beq.n	80024dc <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	68db      	ldr	r3, [r3, #12]
 80024b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80024b2:	69fb      	ldr	r3, [r7, #28]
 80024b4:	005b      	lsls	r3, r3, #1
 80024b6:	2203      	movs	r2, #3
 80024b8:	fa02 f303 	lsl.w	r3, r2, r3
 80024bc:	43db      	mvns	r3, r3
 80024be:	69ba      	ldr	r2, [r7, #24]
 80024c0:	4013      	ands	r3, r2
 80024c2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	689a      	ldr	r2, [r3, #8]
 80024c8:	69fb      	ldr	r3, [r7, #28]
 80024ca:	005b      	lsls	r3, r3, #1
 80024cc:	fa02 f303 	lsl.w	r3, r2, r3
 80024d0:	69ba      	ldr	r2, [r7, #24]
 80024d2:	4313      	orrs	r3, r2
 80024d4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	69ba      	ldr	r2, [r7, #24]
 80024da:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	f003 0303 	and.w	r3, r3, #3
 80024e4:	2b02      	cmp	r3, #2
 80024e6:	d123      	bne.n	8002530 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80024e8:	69fb      	ldr	r3, [r7, #28]
 80024ea:	08da      	lsrs	r2, r3, #3
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	3208      	adds	r2, #8
 80024f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80024f6:	69fb      	ldr	r3, [r7, #28]
 80024f8:	f003 0307 	and.w	r3, r3, #7
 80024fc:	009b      	lsls	r3, r3, #2
 80024fe:	220f      	movs	r2, #15
 8002500:	fa02 f303 	lsl.w	r3, r2, r3
 8002504:	43db      	mvns	r3, r3
 8002506:	69ba      	ldr	r2, [r7, #24]
 8002508:	4013      	ands	r3, r2
 800250a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	691a      	ldr	r2, [r3, #16]
 8002510:	69fb      	ldr	r3, [r7, #28]
 8002512:	f003 0307 	and.w	r3, r3, #7
 8002516:	009b      	lsls	r3, r3, #2
 8002518:	fa02 f303 	lsl.w	r3, r2, r3
 800251c:	69ba      	ldr	r2, [r7, #24]
 800251e:	4313      	orrs	r3, r2
 8002520:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002522:	69fb      	ldr	r3, [r7, #28]
 8002524:	08da      	lsrs	r2, r3, #3
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	3208      	adds	r2, #8
 800252a:	69b9      	ldr	r1, [r7, #24]
 800252c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002536:	69fb      	ldr	r3, [r7, #28]
 8002538:	005b      	lsls	r3, r3, #1
 800253a:	2203      	movs	r2, #3
 800253c:	fa02 f303 	lsl.w	r3, r2, r3
 8002540:	43db      	mvns	r3, r3
 8002542:	69ba      	ldr	r2, [r7, #24]
 8002544:	4013      	ands	r3, r2
 8002546:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	f003 0203 	and.w	r2, r3, #3
 8002550:	69fb      	ldr	r3, [r7, #28]
 8002552:	005b      	lsls	r3, r3, #1
 8002554:	fa02 f303 	lsl.w	r3, r2, r3
 8002558:	69ba      	ldr	r2, [r7, #24]
 800255a:	4313      	orrs	r3, r2
 800255c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	69ba      	ldr	r2, [r7, #24]
 8002562:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800256c:	2b00      	cmp	r3, #0
 800256e:	f000 80b4 	beq.w	80026da <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002572:	2300      	movs	r3, #0
 8002574:	60fb      	str	r3, [r7, #12]
 8002576:	4b60      	ldr	r3, [pc, #384]	; (80026f8 <HAL_GPIO_Init+0x30c>)
 8002578:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800257a:	4a5f      	ldr	r2, [pc, #380]	; (80026f8 <HAL_GPIO_Init+0x30c>)
 800257c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002580:	6453      	str	r3, [r2, #68]	; 0x44
 8002582:	4b5d      	ldr	r3, [pc, #372]	; (80026f8 <HAL_GPIO_Init+0x30c>)
 8002584:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002586:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800258a:	60fb      	str	r3, [r7, #12]
 800258c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800258e:	4a5b      	ldr	r2, [pc, #364]	; (80026fc <HAL_GPIO_Init+0x310>)
 8002590:	69fb      	ldr	r3, [r7, #28]
 8002592:	089b      	lsrs	r3, r3, #2
 8002594:	3302      	adds	r3, #2
 8002596:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800259a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800259c:	69fb      	ldr	r3, [r7, #28]
 800259e:	f003 0303 	and.w	r3, r3, #3
 80025a2:	009b      	lsls	r3, r3, #2
 80025a4:	220f      	movs	r2, #15
 80025a6:	fa02 f303 	lsl.w	r3, r2, r3
 80025aa:	43db      	mvns	r3, r3
 80025ac:	69ba      	ldr	r2, [r7, #24]
 80025ae:	4013      	ands	r3, r2
 80025b0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	4a52      	ldr	r2, [pc, #328]	; (8002700 <HAL_GPIO_Init+0x314>)
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d02b      	beq.n	8002612 <HAL_GPIO_Init+0x226>
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	4a51      	ldr	r2, [pc, #324]	; (8002704 <HAL_GPIO_Init+0x318>)
 80025be:	4293      	cmp	r3, r2
 80025c0:	d025      	beq.n	800260e <HAL_GPIO_Init+0x222>
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	4a50      	ldr	r2, [pc, #320]	; (8002708 <HAL_GPIO_Init+0x31c>)
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d01f      	beq.n	800260a <HAL_GPIO_Init+0x21e>
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	4a4f      	ldr	r2, [pc, #316]	; (800270c <HAL_GPIO_Init+0x320>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d019      	beq.n	8002606 <HAL_GPIO_Init+0x21a>
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	4a4e      	ldr	r2, [pc, #312]	; (8002710 <HAL_GPIO_Init+0x324>)
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d013      	beq.n	8002602 <HAL_GPIO_Init+0x216>
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	4a4d      	ldr	r2, [pc, #308]	; (8002714 <HAL_GPIO_Init+0x328>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d00d      	beq.n	80025fe <HAL_GPIO_Init+0x212>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	4a4c      	ldr	r2, [pc, #304]	; (8002718 <HAL_GPIO_Init+0x32c>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d007      	beq.n	80025fa <HAL_GPIO_Init+0x20e>
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	4a4b      	ldr	r2, [pc, #300]	; (800271c <HAL_GPIO_Init+0x330>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d101      	bne.n	80025f6 <HAL_GPIO_Init+0x20a>
 80025f2:	2307      	movs	r3, #7
 80025f4:	e00e      	b.n	8002614 <HAL_GPIO_Init+0x228>
 80025f6:	2308      	movs	r3, #8
 80025f8:	e00c      	b.n	8002614 <HAL_GPIO_Init+0x228>
 80025fa:	2306      	movs	r3, #6
 80025fc:	e00a      	b.n	8002614 <HAL_GPIO_Init+0x228>
 80025fe:	2305      	movs	r3, #5
 8002600:	e008      	b.n	8002614 <HAL_GPIO_Init+0x228>
 8002602:	2304      	movs	r3, #4
 8002604:	e006      	b.n	8002614 <HAL_GPIO_Init+0x228>
 8002606:	2303      	movs	r3, #3
 8002608:	e004      	b.n	8002614 <HAL_GPIO_Init+0x228>
 800260a:	2302      	movs	r3, #2
 800260c:	e002      	b.n	8002614 <HAL_GPIO_Init+0x228>
 800260e:	2301      	movs	r3, #1
 8002610:	e000      	b.n	8002614 <HAL_GPIO_Init+0x228>
 8002612:	2300      	movs	r3, #0
 8002614:	69fa      	ldr	r2, [r7, #28]
 8002616:	f002 0203 	and.w	r2, r2, #3
 800261a:	0092      	lsls	r2, r2, #2
 800261c:	4093      	lsls	r3, r2
 800261e:	69ba      	ldr	r2, [r7, #24]
 8002620:	4313      	orrs	r3, r2
 8002622:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002624:	4935      	ldr	r1, [pc, #212]	; (80026fc <HAL_GPIO_Init+0x310>)
 8002626:	69fb      	ldr	r3, [r7, #28]
 8002628:	089b      	lsrs	r3, r3, #2
 800262a:	3302      	adds	r3, #2
 800262c:	69ba      	ldr	r2, [r7, #24]
 800262e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002632:	4b3b      	ldr	r3, [pc, #236]	; (8002720 <HAL_GPIO_Init+0x334>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002638:	693b      	ldr	r3, [r7, #16]
 800263a:	43db      	mvns	r3, r3
 800263c:	69ba      	ldr	r2, [r7, #24]
 800263e:	4013      	ands	r3, r2
 8002640:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800264a:	2b00      	cmp	r3, #0
 800264c:	d003      	beq.n	8002656 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800264e:	69ba      	ldr	r2, [r7, #24]
 8002650:	693b      	ldr	r3, [r7, #16]
 8002652:	4313      	orrs	r3, r2
 8002654:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002656:	4a32      	ldr	r2, [pc, #200]	; (8002720 <HAL_GPIO_Init+0x334>)
 8002658:	69bb      	ldr	r3, [r7, #24]
 800265a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800265c:	4b30      	ldr	r3, [pc, #192]	; (8002720 <HAL_GPIO_Init+0x334>)
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002662:	693b      	ldr	r3, [r7, #16]
 8002664:	43db      	mvns	r3, r3
 8002666:	69ba      	ldr	r2, [r7, #24]
 8002668:	4013      	ands	r3, r2
 800266a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002674:	2b00      	cmp	r3, #0
 8002676:	d003      	beq.n	8002680 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002678:	69ba      	ldr	r2, [r7, #24]
 800267a:	693b      	ldr	r3, [r7, #16]
 800267c:	4313      	orrs	r3, r2
 800267e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002680:	4a27      	ldr	r2, [pc, #156]	; (8002720 <HAL_GPIO_Init+0x334>)
 8002682:	69bb      	ldr	r3, [r7, #24]
 8002684:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002686:	4b26      	ldr	r3, [pc, #152]	; (8002720 <HAL_GPIO_Init+0x334>)
 8002688:	689b      	ldr	r3, [r3, #8]
 800268a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800268c:	693b      	ldr	r3, [r7, #16]
 800268e:	43db      	mvns	r3, r3
 8002690:	69ba      	ldr	r2, [r7, #24]
 8002692:	4013      	ands	r3, r2
 8002694:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	685b      	ldr	r3, [r3, #4]
 800269a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d003      	beq.n	80026aa <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80026a2:	69ba      	ldr	r2, [r7, #24]
 80026a4:	693b      	ldr	r3, [r7, #16]
 80026a6:	4313      	orrs	r3, r2
 80026a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80026aa:	4a1d      	ldr	r2, [pc, #116]	; (8002720 <HAL_GPIO_Init+0x334>)
 80026ac:	69bb      	ldr	r3, [r7, #24]
 80026ae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80026b0:	4b1b      	ldr	r3, [pc, #108]	; (8002720 <HAL_GPIO_Init+0x334>)
 80026b2:	68db      	ldr	r3, [r3, #12]
 80026b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026b6:	693b      	ldr	r3, [r7, #16]
 80026b8:	43db      	mvns	r3, r3
 80026ba:	69ba      	ldr	r2, [r7, #24]
 80026bc:	4013      	ands	r3, r2
 80026be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d003      	beq.n	80026d4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80026cc:	69ba      	ldr	r2, [r7, #24]
 80026ce:	693b      	ldr	r3, [r7, #16]
 80026d0:	4313      	orrs	r3, r2
 80026d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80026d4:	4a12      	ldr	r2, [pc, #72]	; (8002720 <HAL_GPIO_Init+0x334>)
 80026d6:	69bb      	ldr	r3, [r7, #24]
 80026d8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80026da:	69fb      	ldr	r3, [r7, #28]
 80026dc:	3301      	adds	r3, #1
 80026de:	61fb      	str	r3, [r7, #28]
 80026e0:	69fb      	ldr	r3, [r7, #28]
 80026e2:	2b0f      	cmp	r3, #15
 80026e4:	f67f ae90 	bls.w	8002408 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80026e8:	bf00      	nop
 80026ea:	bf00      	nop
 80026ec:	3724      	adds	r7, #36	; 0x24
 80026ee:	46bd      	mov	sp, r7
 80026f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f4:	4770      	bx	lr
 80026f6:	bf00      	nop
 80026f8:	40023800 	.word	0x40023800
 80026fc:	40013800 	.word	0x40013800
 8002700:	40020000 	.word	0x40020000
 8002704:	40020400 	.word	0x40020400
 8002708:	40020800 	.word	0x40020800
 800270c:	40020c00 	.word	0x40020c00
 8002710:	40021000 	.word	0x40021000
 8002714:	40021400 	.word	0x40021400
 8002718:	40021800 	.word	0x40021800
 800271c:	40021c00 	.word	0x40021c00
 8002720:	40013c00 	.word	0x40013c00

08002724 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002724:	b480      	push	{r7}
 8002726:	b083      	sub	sp, #12
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
 800272c:	460b      	mov	r3, r1
 800272e:	807b      	strh	r3, [r7, #2]
 8002730:	4613      	mov	r3, r2
 8002732:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002734:	787b      	ldrb	r3, [r7, #1]
 8002736:	2b00      	cmp	r3, #0
 8002738:	d003      	beq.n	8002742 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800273a:	887a      	ldrh	r2, [r7, #2]
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002740:	e003      	b.n	800274a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002742:	887b      	ldrh	r3, [r7, #2]
 8002744:	041a      	lsls	r2, r3, #16
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	619a      	str	r2, [r3, #24]
}
 800274a:	bf00      	nop
 800274c:	370c      	adds	r7, #12
 800274e:	46bd      	mov	sp, r7
 8002750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002754:	4770      	bx	lr

08002756 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002756:	b480      	push	{r7}
 8002758:	b085      	sub	sp, #20
 800275a:	af00      	add	r7, sp, #0
 800275c:	6078      	str	r0, [r7, #4]
 800275e:	460b      	mov	r3, r1
 8002760:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	695b      	ldr	r3, [r3, #20]
 8002766:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002768:	887a      	ldrh	r2, [r7, #2]
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	4013      	ands	r3, r2
 800276e:	041a      	lsls	r2, r3, #16
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	43d9      	mvns	r1, r3
 8002774:	887b      	ldrh	r3, [r7, #2]
 8002776:	400b      	ands	r3, r1
 8002778:	431a      	orrs	r2, r3
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	619a      	str	r2, [r3, #24]
}
 800277e:	bf00      	nop
 8002780:	3714      	adds	r7, #20
 8002782:	46bd      	mov	sp, r7
 8002784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002788:	4770      	bx	lr
	...

0800278c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b086      	sub	sp, #24
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2b00      	cmp	r3, #0
 8002798:	d101      	bne.n	800279e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800279a:	2301      	movs	r3, #1
 800279c:	e264      	b.n	8002c68 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f003 0301 	and.w	r3, r3, #1
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d075      	beq.n	8002896 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80027aa:	4ba3      	ldr	r3, [pc, #652]	; (8002a38 <HAL_RCC_OscConfig+0x2ac>)
 80027ac:	689b      	ldr	r3, [r3, #8]
 80027ae:	f003 030c 	and.w	r3, r3, #12
 80027b2:	2b04      	cmp	r3, #4
 80027b4:	d00c      	beq.n	80027d0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80027b6:	4ba0      	ldr	r3, [pc, #640]	; (8002a38 <HAL_RCC_OscConfig+0x2ac>)
 80027b8:	689b      	ldr	r3, [r3, #8]
 80027ba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80027be:	2b08      	cmp	r3, #8
 80027c0:	d112      	bne.n	80027e8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80027c2:	4b9d      	ldr	r3, [pc, #628]	; (8002a38 <HAL_RCC_OscConfig+0x2ac>)
 80027c4:	685b      	ldr	r3, [r3, #4]
 80027c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027ca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80027ce:	d10b      	bne.n	80027e8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027d0:	4b99      	ldr	r3, [pc, #612]	; (8002a38 <HAL_RCC_OscConfig+0x2ac>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d05b      	beq.n	8002894 <HAL_RCC_OscConfig+0x108>
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d157      	bne.n	8002894 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80027e4:	2301      	movs	r3, #1
 80027e6:	e23f      	b.n	8002c68 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	685b      	ldr	r3, [r3, #4]
 80027ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027f0:	d106      	bne.n	8002800 <HAL_RCC_OscConfig+0x74>
 80027f2:	4b91      	ldr	r3, [pc, #580]	; (8002a38 <HAL_RCC_OscConfig+0x2ac>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	4a90      	ldr	r2, [pc, #576]	; (8002a38 <HAL_RCC_OscConfig+0x2ac>)
 80027f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027fc:	6013      	str	r3, [r2, #0]
 80027fe:	e01d      	b.n	800283c <HAL_RCC_OscConfig+0xb0>
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002808:	d10c      	bne.n	8002824 <HAL_RCC_OscConfig+0x98>
 800280a:	4b8b      	ldr	r3, [pc, #556]	; (8002a38 <HAL_RCC_OscConfig+0x2ac>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4a8a      	ldr	r2, [pc, #552]	; (8002a38 <HAL_RCC_OscConfig+0x2ac>)
 8002810:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002814:	6013      	str	r3, [r2, #0]
 8002816:	4b88      	ldr	r3, [pc, #544]	; (8002a38 <HAL_RCC_OscConfig+0x2ac>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	4a87      	ldr	r2, [pc, #540]	; (8002a38 <HAL_RCC_OscConfig+0x2ac>)
 800281c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002820:	6013      	str	r3, [r2, #0]
 8002822:	e00b      	b.n	800283c <HAL_RCC_OscConfig+0xb0>
 8002824:	4b84      	ldr	r3, [pc, #528]	; (8002a38 <HAL_RCC_OscConfig+0x2ac>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	4a83      	ldr	r2, [pc, #524]	; (8002a38 <HAL_RCC_OscConfig+0x2ac>)
 800282a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800282e:	6013      	str	r3, [r2, #0]
 8002830:	4b81      	ldr	r3, [pc, #516]	; (8002a38 <HAL_RCC_OscConfig+0x2ac>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4a80      	ldr	r2, [pc, #512]	; (8002a38 <HAL_RCC_OscConfig+0x2ac>)
 8002836:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800283a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	685b      	ldr	r3, [r3, #4]
 8002840:	2b00      	cmp	r3, #0
 8002842:	d013      	beq.n	800286c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002844:	f7ff f986 	bl	8001b54 <HAL_GetTick>
 8002848:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800284a:	e008      	b.n	800285e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800284c:	f7ff f982 	bl	8001b54 <HAL_GetTick>
 8002850:	4602      	mov	r2, r0
 8002852:	693b      	ldr	r3, [r7, #16]
 8002854:	1ad3      	subs	r3, r2, r3
 8002856:	2b64      	cmp	r3, #100	; 0x64
 8002858:	d901      	bls.n	800285e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800285a:	2303      	movs	r3, #3
 800285c:	e204      	b.n	8002c68 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800285e:	4b76      	ldr	r3, [pc, #472]	; (8002a38 <HAL_RCC_OscConfig+0x2ac>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002866:	2b00      	cmp	r3, #0
 8002868:	d0f0      	beq.n	800284c <HAL_RCC_OscConfig+0xc0>
 800286a:	e014      	b.n	8002896 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800286c:	f7ff f972 	bl	8001b54 <HAL_GetTick>
 8002870:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002872:	e008      	b.n	8002886 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002874:	f7ff f96e 	bl	8001b54 <HAL_GetTick>
 8002878:	4602      	mov	r2, r0
 800287a:	693b      	ldr	r3, [r7, #16]
 800287c:	1ad3      	subs	r3, r2, r3
 800287e:	2b64      	cmp	r3, #100	; 0x64
 8002880:	d901      	bls.n	8002886 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002882:	2303      	movs	r3, #3
 8002884:	e1f0      	b.n	8002c68 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002886:	4b6c      	ldr	r3, [pc, #432]	; (8002a38 <HAL_RCC_OscConfig+0x2ac>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800288e:	2b00      	cmp	r3, #0
 8002890:	d1f0      	bne.n	8002874 <HAL_RCC_OscConfig+0xe8>
 8002892:	e000      	b.n	8002896 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002894:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f003 0302 	and.w	r3, r3, #2
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d063      	beq.n	800296a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80028a2:	4b65      	ldr	r3, [pc, #404]	; (8002a38 <HAL_RCC_OscConfig+0x2ac>)
 80028a4:	689b      	ldr	r3, [r3, #8]
 80028a6:	f003 030c 	and.w	r3, r3, #12
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d00b      	beq.n	80028c6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80028ae:	4b62      	ldr	r3, [pc, #392]	; (8002a38 <HAL_RCC_OscConfig+0x2ac>)
 80028b0:	689b      	ldr	r3, [r3, #8]
 80028b2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80028b6:	2b08      	cmp	r3, #8
 80028b8:	d11c      	bne.n	80028f4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80028ba:	4b5f      	ldr	r3, [pc, #380]	; (8002a38 <HAL_RCC_OscConfig+0x2ac>)
 80028bc:	685b      	ldr	r3, [r3, #4]
 80028be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d116      	bne.n	80028f4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028c6:	4b5c      	ldr	r3, [pc, #368]	; (8002a38 <HAL_RCC_OscConfig+0x2ac>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f003 0302 	and.w	r3, r3, #2
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d005      	beq.n	80028de <HAL_RCC_OscConfig+0x152>
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	68db      	ldr	r3, [r3, #12]
 80028d6:	2b01      	cmp	r3, #1
 80028d8:	d001      	beq.n	80028de <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80028da:	2301      	movs	r3, #1
 80028dc:	e1c4      	b.n	8002c68 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028de:	4b56      	ldr	r3, [pc, #344]	; (8002a38 <HAL_RCC_OscConfig+0x2ac>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	691b      	ldr	r3, [r3, #16]
 80028ea:	00db      	lsls	r3, r3, #3
 80028ec:	4952      	ldr	r1, [pc, #328]	; (8002a38 <HAL_RCC_OscConfig+0x2ac>)
 80028ee:	4313      	orrs	r3, r2
 80028f0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028f2:	e03a      	b.n	800296a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	68db      	ldr	r3, [r3, #12]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d020      	beq.n	800293e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80028fc:	4b4f      	ldr	r3, [pc, #316]	; (8002a3c <HAL_RCC_OscConfig+0x2b0>)
 80028fe:	2201      	movs	r2, #1
 8002900:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002902:	f7ff f927 	bl	8001b54 <HAL_GetTick>
 8002906:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002908:	e008      	b.n	800291c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800290a:	f7ff f923 	bl	8001b54 <HAL_GetTick>
 800290e:	4602      	mov	r2, r0
 8002910:	693b      	ldr	r3, [r7, #16]
 8002912:	1ad3      	subs	r3, r2, r3
 8002914:	2b02      	cmp	r3, #2
 8002916:	d901      	bls.n	800291c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002918:	2303      	movs	r3, #3
 800291a:	e1a5      	b.n	8002c68 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800291c:	4b46      	ldr	r3, [pc, #280]	; (8002a38 <HAL_RCC_OscConfig+0x2ac>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f003 0302 	and.w	r3, r3, #2
 8002924:	2b00      	cmp	r3, #0
 8002926:	d0f0      	beq.n	800290a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002928:	4b43      	ldr	r3, [pc, #268]	; (8002a38 <HAL_RCC_OscConfig+0x2ac>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	691b      	ldr	r3, [r3, #16]
 8002934:	00db      	lsls	r3, r3, #3
 8002936:	4940      	ldr	r1, [pc, #256]	; (8002a38 <HAL_RCC_OscConfig+0x2ac>)
 8002938:	4313      	orrs	r3, r2
 800293a:	600b      	str	r3, [r1, #0]
 800293c:	e015      	b.n	800296a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800293e:	4b3f      	ldr	r3, [pc, #252]	; (8002a3c <HAL_RCC_OscConfig+0x2b0>)
 8002940:	2200      	movs	r2, #0
 8002942:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002944:	f7ff f906 	bl	8001b54 <HAL_GetTick>
 8002948:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800294a:	e008      	b.n	800295e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800294c:	f7ff f902 	bl	8001b54 <HAL_GetTick>
 8002950:	4602      	mov	r2, r0
 8002952:	693b      	ldr	r3, [r7, #16]
 8002954:	1ad3      	subs	r3, r2, r3
 8002956:	2b02      	cmp	r3, #2
 8002958:	d901      	bls.n	800295e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800295a:	2303      	movs	r3, #3
 800295c:	e184      	b.n	8002c68 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800295e:	4b36      	ldr	r3, [pc, #216]	; (8002a38 <HAL_RCC_OscConfig+0x2ac>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f003 0302 	and.w	r3, r3, #2
 8002966:	2b00      	cmp	r3, #0
 8002968:	d1f0      	bne.n	800294c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f003 0308 	and.w	r3, r3, #8
 8002972:	2b00      	cmp	r3, #0
 8002974:	d030      	beq.n	80029d8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	695b      	ldr	r3, [r3, #20]
 800297a:	2b00      	cmp	r3, #0
 800297c:	d016      	beq.n	80029ac <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800297e:	4b30      	ldr	r3, [pc, #192]	; (8002a40 <HAL_RCC_OscConfig+0x2b4>)
 8002980:	2201      	movs	r2, #1
 8002982:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002984:	f7ff f8e6 	bl	8001b54 <HAL_GetTick>
 8002988:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800298a:	e008      	b.n	800299e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800298c:	f7ff f8e2 	bl	8001b54 <HAL_GetTick>
 8002990:	4602      	mov	r2, r0
 8002992:	693b      	ldr	r3, [r7, #16]
 8002994:	1ad3      	subs	r3, r2, r3
 8002996:	2b02      	cmp	r3, #2
 8002998:	d901      	bls.n	800299e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800299a:	2303      	movs	r3, #3
 800299c:	e164      	b.n	8002c68 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800299e:	4b26      	ldr	r3, [pc, #152]	; (8002a38 <HAL_RCC_OscConfig+0x2ac>)
 80029a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029a2:	f003 0302 	and.w	r3, r3, #2
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d0f0      	beq.n	800298c <HAL_RCC_OscConfig+0x200>
 80029aa:	e015      	b.n	80029d8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80029ac:	4b24      	ldr	r3, [pc, #144]	; (8002a40 <HAL_RCC_OscConfig+0x2b4>)
 80029ae:	2200      	movs	r2, #0
 80029b0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029b2:	f7ff f8cf 	bl	8001b54 <HAL_GetTick>
 80029b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029b8:	e008      	b.n	80029cc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80029ba:	f7ff f8cb 	bl	8001b54 <HAL_GetTick>
 80029be:	4602      	mov	r2, r0
 80029c0:	693b      	ldr	r3, [r7, #16]
 80029c2:	1ad3      	subs	r3, r2, r3
 80029c4:	2b02      	cmp	r3, #2
 80029c6:	d901      	bls.n	80029cc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80029c8:	2303      	movs	r3, #3
 80029ca:	e14d      	b.n	8002c68 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029cc:	4b1a      	ldr	r3, [pc, #104]	; (8002a38 <HAL_RCC_OscConfig+0x2ac>)
 80029ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029d0:	f003 0302 	and.w	r3, r3, #2
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d1f0      	bne.n	80029ba <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f003 0304 	and.w	r3, r3, #4
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	f000 80a0 	beq.w	8002b26 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80029e6:	2300      	movs	r3, #0
 80029e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80029ea:	4b13      	ldr	r3, [pc, #76]	; (8002a38 <HAL_RCC_OscConfig+0x2ac>)
 80029ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d10f      	bne.n	8002a16 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029f6:	2300      	movs	r3, #0
 80029f8:	60bb      	str	r3, [r7, #8]
 80029fa:	4b0f      	ldr	r3, [pc, #60]	; (8002a38 <HAL_RCC_OscConfig+0x2ac>)
 80029fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029fe:	4a0e      	ldr	r2, [pc, #56]	; (8002a38 <HAL_RCC_OscConfig+0x2ac>)
 8002a00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a04:	6413      	str	r3, [r2, #64]	; 0x40
 8002a06:	4b0c      	ldr	r3, [pc, #48]	; (8002a38 <HAL_RCC_OscConfig+0x2ac>)
 8002a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a0e:	60bb      	str	r3, [r7, #8]
 8002a10:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a12:	2301      	movs	r3, #1
 8002a14:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a16:	4b0b      	ldr	r3, [pc, #44]	; (8002a44 <HAL_RCC_OscConfig+0x2b8>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d121      	bne.n	8002a66 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a22:	4b08      	ldr	r3, [pc, #32]	; (8002a44 <HAL_RCC_OscConfig+0x2b8>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	4a07      	ldr	r2, [pc, #28]	; (8002a44 <HAL_RCC_OscConfig+0x2b8>)
 8002a28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a2c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a2e:	f7ff f891 	bl	8001b54 <HAL_GetTick>
 8002a32:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a34:	e011      	b.n	8002a5a <HAL_RCC_OscConfig+0x2ce>
 8002a36:	bf00      	nop
 8002a38:	40023800 	.word	0x40023800
 8002a3c:	42470000 	.word	0x42470000
 8002a40:	42470e80 	.word	0x42470e80
 8002a44:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a48:	f7ff f884 	bl	8001b54 <HAL_GetTick>
 8002a4c:	4602      	mov	r2, r0
 8002a4e:	693b      	ldr	r3, [r7, #16]
 8002a50:	1ad3      	subs	r3, r2, r3
 8002a52:	2b02      	cmp	r3, #2
 8002a54:	d901      	bls.n	8002a5a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002a56:	2303      	movs	r3, #3
 8002a58:	e106      	b.n	8002c68 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a5a:	4b85      	ldr	r3, [pc, #532]	; (8002c70 <HAL_RCC_OscConfig+0x4e4>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d0f0      	beq.n	8002a48 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	689b      	ldr	r3, [r3, #8]
 8002a6a:	2b01      	cmp	r3, #1
 8002a6c:	d106      	bne.n	8002a7c <HAL_RCC_OscConfig+0x2f0>
 8002a6e:	4b81      	ldr	r3, [pc, #516]	; (8002c74 <HAL_RCC_OscConfig+0x4e8>)
 8002a70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a72:	4a80      	ldr	r2, [pc, #512]	; (8002c74 <HAL_RCC_OscConfig+0x4e8>)
 8002a74:	f043 0301 	orr.w	r3, r3, #1
 8002a78:	6713      	str	r3, [r2, #112]	; 0x70
 8002a7a:	e01c      	b.n	8002ab6 <HAL_RCC_OscConfig+0x32a>
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	689b      	ldr	r3, [r3, #8]
 8002a80:	2b05      	cmp	r3, #5
 8002a82:	d10c      	bne.n	8002a9e <HAL_RCC_OscConfig+0x312>
 8002a84:	4b7b      	ldr	r3, [pc, #492]	; (8002c74 <HAL_RCC_OscConfig+0x4e8>)
 8002a86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a88:	4a7a      	ldr	r2, [pc, #488]	; (8002c74 <HAL_RCC_OscConfig+0x4e8>)
 8002a8a:	f043 0304 	orr.w	r3, r3, #4
 8002a8e:	6713      	str	r3, [r2, #112]	; 0x70
 8002a90:	4b78      	ldr	r3, [pc, #480]	; (8002c74 <HAL_RCC_OscConfig+0x4e8>)
 8002a92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a94:	4a77      	ldr	r2, [pc, #476]	; (8002c74 <HAL_RCC_OscConfig+0x4e8>)
 8002a96:	f043 0301 	orr.w	r3, r3, #1
 8002a9a:	6713      	str	r3, [r2, #112]	; 0x70
 8002a9c:	e00b      	b.n	8002ab6 <HAL_RCC_OscConfig+0x32a>
 8002a9e:	4b75      	ldr	r3, [pc, #468]	; (8002c74 <HAL_RCC_OscConfig+0x4e8>)
 8002aa0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002aa2:	4a74      	ldr	r2, [pc, #464]	; (8002c74 <HAL_RCC_OscConfig+0x4e8>)
 8002aa4:	f023 0301 	bic.w	r3, r3, #1
 8002aa8:	6713      	str	r3, [r2, #112]	; 0x70
 8002aaa:	4b72      	ldr	r3, [pc, #456]	; (8002c74 <HAL_RCC_OscConfig+0x4e8>)
 8002aac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002aae:	4a71      	ldr	r2, [pc, #452]	; (8002c74 <HAL_RCC_OscConfig+0x4e8>)
 8002ab0:	f023 0304 	bic.w	r3, r3, #4
 8002ab4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	689b      	ldr	r3, [r3, #8]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d015      	beq.n	8002aea <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002abe:	f7ff f849 	bl	8001b54 <HAL_GetTick>
 8002ac2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ac4:	e00a      	b.n	8002adc <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ac6:	f7ff f845 	bl	8001b54 <HAL_GetTick>
 8002aca:	4602      	mov	r2, r0
 8002acc:	693b      	ldr	r3, [r7, #16]
 8002ace:	1ad3      	subs	r3, r2, r3
 8002ad0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ad4:	4293      	cmp	r3, r2
 8002ad6:	d901      	bls.n	8002adc <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002ad8:	2303      	movs	r3, #3
 8002ada:	e0c5      	b.n	8002c68 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002adc:	4b65      	ldr	r3, [pc, #404]	; (8002c74 <HAL_RCC_OscConfig+0x4e8>)
 8002ade:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ae0:	f003 0302 	and.w	r3, r3, #2
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d0ee      	beq.n	8002ac6 <HAL_RCC_OscConfig+0x33a>
 8002ae8:	e014      	b.n	8002b14 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002aea:	f7ff f833 	bl	8001b54 <HAL_GetTick>
 8002aee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002af0:	e00a      	b.n	8002b08 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002af2:	f7ff f82f 	bl	8001b54 <HAL_GetTick>
 8002af6:	4602      	mov	r2, r0
 8002af8:	693b      	ldr	r3, [r7, #16]
 8002afa:	1ad3      	subs	r3, r2, r3
 8002afc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b00:	4293      	cmp	r3, r2
 8002b02:	d901      	bls.n	8002b08 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002b04:	2303      	movs	r3, #3
 8002b06:	e0af      	b.n	8002c68 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b08:	4b5a      	ldr	r3, [pc, #360]	; (8002c74 <HAL_RCC_OscConfig+0x4e8>)
 8002b0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b0c:	f003 0302 	and.w	r3, r3, #2
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d1ee      	bne.n	8002af2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002b14:	7dfb      	ldrb	r3, [r7, #23]
 8002b16:	2b01      	cmp	r3, #1
 8002b18:	d105      	bne.n	8002b26 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b1a:	4b56      	ldr	r3, [pc, #344]	; (8002c74 <HAL_RCC_OscConfig+0x4e8>)
 8002b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b1e:	4a55      	ldr	r2, [pc, #340]	; (8002c74 <HAL_RCC_OscConfig+0x4e8>)
 8002b20:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b24:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	699b      	ldr	r3, [r3, #24]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	f000 809b 	beq.w	8002c66 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002b30:	4b50      	ldr	r3, [pc, #320]	; (8002c74 <HAL_RCC_OscConfig+0x4e8>)
 8002b32:	689b      	ldr	r3, [r3, #8]
 8002b34:	f003 030c 	and.w	r3, r3, #12
 8002b38:	2b08      	cmp	r3, #8
 8002b3a:	d05c      	beq.n	8002bf6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	699b      	ldr	r3, [r3, #24]
 8002b40:	2b02      	cmp	r3, #2
 8002b42:	d141      	bne.n	8002bc8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b44:	4b4c      	ldr	r3, [pc, #304]	; (8002c78 <HAL_RCC_OscConfig+0x4ec>)
 8002b46:	2200      	movs	r2, #0
 8002b48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b4a:	f7ff f803 	bl	8001b54 <HAL_GetTick>
 8002b4e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b50:	e008      	b.n	8002b64 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b52:	f7fe ffff 	bl	8001b54 <HAL_GetTick>
 8002b56:	4602      	mov	r2, r0
 8002b58:	693b      	ldr	r3, [r7, #16]
 8002b5a:	1ad3      	subs	r3, r2, r3
 8002b5c:	2b02      	cmp	r3, #2
 8002b5e:	d901      	bls.n	8002b64 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002b60:	2303      	movs	r3, #3
 8002b62:	e081      	b.n	8002c68 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b64:	4b43      	ldr	r3, [pc, #268]	; (8002c74 <HAL_RCC_OscConfig+0x4e8>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d1f0      	bne.n	8002b52 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	69da      	ldr	r2, [r3, #28]
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6a1b      	ldr	r3, [r3, #32]
 8002b78:	431a      	orrs	r2, r3
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b7e:	019b      	lsls	r3, r3, #6
 8002b80:	431a      	orrs	r2, r3
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b86:	085b      	lsrs	r3, r3, #1
 8002b88:	3b01      	subs	r3, #1
 8002b8a:	041b      	lsls	r3, r3, #16
 8002b8c:	431a      	orrs	r2, r3
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b92:	061b      	lsls	r3, r3, #24
 8002b94:	4937      	ldr	r1, [pc, #220]	; (8002c74 <HAL_RCC_OscConfig+0x4e8>)
 8002b96:	4313      	orrs	r3, r2
 8002b98:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b9a:	4b37      	ldr	r3, [pc, #220]	; (8002c78 <HAL_RCC_OscConfig+0x4ec>)
 8002b9c:	2201      	movs	r2, #1
 8002b9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ba0:	f7fe ffd8 	bl	8001b54 <HAL_GetTick>
 8002ba4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ba6:	e008      	b.n	8002bba <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ba8:	f7fe ffd4 	bl	8001b54 <HAL_GetTick>
 8002bac:	4602      	mov	r2, r0
 8002bae:	693b      	ldr	r3, [r7, #16]
 8002bb0:	1ad3      	subs	r3, r2, r3
 8002bb2:	2b02      	cmp	r3, #2
 8002bb4:	d901      	bls.n	8002bba <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002bb6:	2303      	movs	r3, #3
 8002bb8:	e056      	b.n	8002c68 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bba:	4b2e      	ldr	r3, [pc, #184]	; (8002c74 <HAL_RCC_OscConfig+0x4e8>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d0f0      	beq.n	8002ba8 <HAL_RCC_OscConfig+0x41c>
 8002bc6:	e04e      	b.n	8002c66 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bc8:	4b2b      	ldr	r3, [pc, #172]	; (8002c78 <HAL_RCC_OscConfig+0x4ec>)
 8002bca:	2200      	movs	r2, #0
 8002bcc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bce:	f7fe ffc1 	bl	8001b54 <HAL_GetTick>
 8002bd2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bd4:	e008      	b.n	8002be8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002bd6:	f7fe ffbd 	bl	8001b54 <HAL_GetTick>
 8002bda:	4602      	mov	r2, r0
 8002bdc:	693b      	ldr	r3, [r7, #16]
 8002bde:	1ad3      	subs	r3, r2, r3
 8002be0:	2b02      	cmp	r3, #2
 8002be2:	d901      	bls.n	8002be8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002be4:	2303      	movs	r3, #3
 8002be6:	e03f      	b.n	8002c68 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002be8:	4b22      	ldr	r3, [pc, #136]	; (8002c74 <HAL_RCC_OscConfig+0x4e8>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d1f0      	bne.n	8002bd6 <HAL_RCC_OscConfig+0x44a>
 8002bf4:	e037      	b.n	8002c66 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	699b      	ldr	r3, [r3, #24]
 8002bfa:	2b01      	cmp	r3, #1
 8002bfc:	d101      	bne.n	8002c02 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002bfe:	2301      	movs	r3, #1
 8002c00:	e032      	b.n	8002c68 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002c02:	4b1c      	ldr	r3, [pc, #112]	; (8002c74 <HAL_RCC_OscConfig+0x4e8>)
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	699b      	ldr	r3, [r3, #24]
 8002c0c:	2b01      	cmp	r3, #1
 8002c0e:	d028      	beq.n	8002c62 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c1a:	429a      	cmp	r2, r3
 8002c1c:	d121      	bne.n	8002c62 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c28:	429a      	cmp	r2, r3
 8002c2a:	d11a      	bne.n	8002c62 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002c2c:	68fa      	ldr	r2, [r7, #12]
 8002c2e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002c32:	4013      	ands	r3, r2
 8002c34:	687a      	ldr	r2, [r7, #4]
 8002c36:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002c38:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d111      	bne.n	8002c62 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c48:	085b      	lsrs	r3, r3, #1
 8002c4a:	3b01      	subs	r3, #1
 8002c4c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002c4e:	429a      	cmp	r2, r3
 8002c50:	d107      	bne.n	8002c62 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c5c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c5e:	429a      	cmp	r2, r3
 8002c60:	d001      	beq.n	8002c66 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8002c62:	2301      	movs	r3, #1
 8002c64:	e000      	b.n	8002c68 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8002c66:	2300      	movs	r3, #0
}
 8002c68:	4618      	mov	r0, r3
 8002c6a:	3718      	adds	r7, #24
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	bd80      	pop	{r7, pc}
 8002c70:	40007000 	.word	0x40007000
 8002c74:	40023800 	.word	0x40023800
 8002c78:	42470060 	.word	0x42470060

08002c7c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b084      	sub	sp, #16
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
 8002c84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d101      	bne.n	8002c90 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c8c:	2301      	movs	r3, #1
 8002c8e:	e0cc      	b.n	8002e2a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002c90:	4b68      	ldr	r3, [pc, #416]	; (8002e34 <HAL_RCC_ClockConfig+0x1b8>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f003 0307 	and.w	r3, r3, #7
 8002c98:	683a      	ldr	r2, [r7, #0]
 8002c9a:	429a      	cmp	r2, r3
 8002c9c:	d90c      	bls.n	8002cb8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c9e:	4b65      	ldr	r3, [pc, #404]	; (8002e34 <HAL_RCC_ClockConfig+0x1b8>)
 8002ca0:	683a      	ldr	r2, [r7, #0]
 8002ca2:	b2d2      	uxtb	r2, r2
 8002ca4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ca6:	4b63      	ldr	r3, [pc, #396]	; (8002e34 <HAL_RCC_ClockConfig+0x1b8>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f003 0307 	and.w	r3, r3, #7
 8002cae:	683a      	ldr	r2, [r7, #0]
 8002cb0:	429a      	cmp	r2, r3
 8002cb2:	d001      	beq.n	8002cb8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002cb4:	2301      	movs	r3, #1
 8002cb6:	e0b8      	b.n	8002e2a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f003 0302 	and.w	r3, r3, #2
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d020      	beq.n	8002d06 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f003 0304 	and.w	r3, r3, #4
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d005      	beq.n	8002cdc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002cd0:	4b59      	ldr	r3, [pc, #356]	; (8002e38 <HAL_RCC_ClockConfig+0x1bc>)
 8002cd2:	689b      	ldr	r3, [r3, #8]
 8002cd4:	4a58      	ldr	r2, [pc, #352]	; (8002e38 <HAL_RCC_ClockConfig+0x1bc>)
 8002cd6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002cda:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f003 0308 	and.w	r3, r3, #8
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d005      	beq.n	8002cf4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ce8:	4b53      	ldr	r3, [pc, #332]	; (8002e38 <HAL_RCC_ClockConfig+0x1bc>)
 8002cea:	689b      	ldr	r3, [r3, #8]
 8002cec:	4a52      	ldr	r2, [pc, #328]	; (8002e38 <HAL_RCC_ClockConfig+0x1bc>)
 8002cee:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002cf2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002cf4:	4b50      	ldr	r3, [pc, #320]	; (8002e38 <HAL_RCC_ClockConfig+0x1bc>)
 8002cf6:	689b      	ldr	r3, [r3, #8]
 8002cf8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	689b      	ldr	r3, [r3, #8]
 8002d00:	494d      	ldr	r1, [pc, #308]	; (8002e38 <HAL_RCC_ClockConfig+0x1bc>)
 8002d02:	4313      	orrs	r3, r2
 8002d04:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f003 0301 	and.w	r3, r3, #1
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d044      	beq.n	8002d9c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	685b      	ldr	r3, [r3, #4]
 8002d16:	2b01      	cmp	r3, #1
 8002d18:	d107      	bne.n	8002d2a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d1a:	4b47      	ldr	r3, [pc, #284]	; (8002e38 <HAL_RCC_ClockConfig+0x1bc>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d119      	bne.n	8002d5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d26:	2301      	movs	r3, #1
 8002d28:	e07f      	b.n	8002e2a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	685b      	ldr	r3, [r3, #4]
 8002d2e:	2b02      	cmp	r3, #2
 8002d30:	d003      	beq.n	8002d3a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d36:	2b03      	cmp	r3, #3
 8002d38:	d107      	bne.n	8002d4a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d3a:	4b3f      	ldr	r3, [pc, #252]	; (8002e38 <HAL_RCC_ClockConfig+0x1bc>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d109      	bne.n	8002d5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d46:	2301      	movs	r3, #1
 8002d48:	e06f      	b.n	8002e2a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d4a:	4b3b      	ldr	r3, [pc, #236]	; (8002e38 <HAL_RCC_ClockConfig+0x1bc>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f003 0302 	and.w	r3, r3, #2
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d101      	bne.n	8002d5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d56:	2301      	movs	r3, #1
 8002d58:	e067      	b.n	8002e2a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d5a:	4b37      	ldr	r3, [pc, #220]	; (8002e38 <HAL_RCC_ClockConfig+0x1bc>)
 8002d5c:	689b      	ldr	r3, [r3, #8]
 8002d5e:	f023 0203 	bic.w	r2, r3, #3
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	685b      	ldr	r3, [r3, #4]
 8002d66:	4934      	ldr	r1, [pc, #208]	; (8002e38 <HAL_RCC_ClockConfig+0x1bc>)
 8002d68:	4313      	orrs	r3, r2
 8002d6a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d6c:	f7fe fef2 	bl	8001b54 <HAL_GetTick>
 8002d70:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d72:	e00a      	b.n	8002d8a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d74:	f7fe feee 	bl	8001b54 <HAL_GetTick>
 8002d78:	4602      	mov	r2, r0
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	1ad3      	subs	r3, r2, r3
 8002d7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d901      	bls.n	8002d8a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002d86:	2303      	movs	r3, #3
 8002d88:	e04f      	b.n	8002e2a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d8a:	4b2b      	ldr	r3, [pc, #172]	; (8002e38 <HAL_RCC_ClockConfig+0x1bc>)
 8002d8c:	689b      	ldr	r3, [r3, #8]
 8002d8e:	f003 020c 	and.w	r2, r3, #12
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	685b      	ldr	r3, [r3, #4]
 8002d96:	009b      	lsls	r3, r3, #2
 8002d98:	429a      	cmp	r2, r3
 8002d9a:	d1eb      	bne.n	8002d74 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002d9c:	4b25      	ldr	r3, [pc, #148]	; (8002e34 <HAL_RCC_ClockConfig+0x1b8>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f003 0307 	and.w	r3, r3, #7
 8002da4:	683a      	ldr	r2, [r7, #0]
 8002da6:	429a      	cmp	r2, r3
 8002da8:	d20c      	bcs.n	8002dc4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002daa:	4b22      	ldr	r3, [pc, #136]	; (8002e34 <HAL_RCC_ClockConfig+0x1b8>)
 8002dac:	683a      	ldr	r2, [r7, #0]
 8002dae:	b2d2      	uxtb	r2, r2
 8002db0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002db2:	4b20      	ldr	r3, [pc, #128]	; (8002e34 <HAL_RCC_ClockConfig+0x1b8>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f003 0307 	and.w	r3, r3, #7
 8002dba:	683a      	ldr	r2, [r7, #0]
 8002dbc:	429a      	cmp	r2, r3
 8002dbe:	d001      	beq.n	8002dc4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	e032      	b.n	8002e2a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f003 0304 	and.w	r3, r3, #4
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d008      	beq.n	8002de2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002dd0:	4b19      	ldr	r3, [pc, #100]	; (8002e38 <HAL_RCC_ClockConfig+0x1bc>)
 8002dd2:	689b      	ldr	r3, [r3, #8]
 8002dd4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	68db      	ldr	r3, [r3, #12]
 8002ddc:	4916      	ldr	r1, [pc, #88]	; (8002e38 <HAL_RCC_ClockConfig+0x1bc>)
 8002dde:	4313      	orrs	r3, r2
 8002de0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f003 0308 	and.w	r3, r3, #8
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d009      	beq.n	8002e02 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002dee:	4b12      	ldr	r3, [pc, #72]	; (8002e38 <HAL_RCC_ClockConfig+0x1bc>)
 8002df0:	689b      	ldr	r3, [r3, #8]
 8002df2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	691b      	ldr	r3, [r3, #16]
 8002dfa:	00db      	lsls	r3, r3, #3
 8002dfc:	490e      	ldr	r1, [pc, #56]	; (8002e38 <HAL_RCC_ClockConfig+0x1bc>)
 8002dfe:	4313      	orrs	r3, r2
 8002e00:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002e02:	f000 f821 	bl	8002e48 <HAL_RCC_GetSysClockFreq>
 8002e06:	4602      	mov	r2, r0
 8002e08:	4b0b      	ldr	r3, [pc, #44]	; (8002e38 <HAL_RCC_ClockConfig+0x1bc>)
 8002e0a:	689b      	ldr	r3, [r3, #8]
 8002e0c:	091b      	lsrs	r3, r3, #4
 8002e0e:	f003 030f 	and.w	r3, r3, #15
 8002e12:	490a      	ldr	r1, [pc, #40]	; (8002e3c <HAL_RCC_ClockConfig+0x1c0>)
 8002e14:	5ccb      	ldrb	r3, [r1, r3]
 8002e16:	fa22 f303 	lsr.w	r3, r2, r3
 8002e1a:	4a09      	ldr	r2, [pc, #36]	; (8002e40 <HAL_RCC_ClockConfig+0x1c4>)
 8002e1c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002e1e:	4b09      	ldr	r3, [pc, #36]	; (8002e44 <HAL_RCC_ClockConfig+0x1c8>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	4618      	mov	r0, r3
 8002e24:	f7fe fc4e 	bl	80016c4 <HAL_InitTick>

  return HAL_OK;
 8002e28:	2300      	movs	r3, #0
}
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	3710      	adds	r7, #16
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	bd80      	pop	{r7, pc}
 8002e32:	bf00      	nop
 8002e34:	40023c00 	.word	0x40023c00
 8002e38:	40023800 	.word	0x40023800
 8002e3c:	08009968 	.word	0x08009968
 8002e40:	20000000 	.word	0x20000000
 8002e44:	20000004 	.word	0x20000004

08002e48 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e48:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002e4c:	b084      	sub	sp, #16
 8002e4e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002e50:	2300      	movs	r3, #0
 8002e52:	607b      	str	r3, [r7, #4]
 8002e54:	2300      	movs	r3, #0
 8002e56:	60fb      	str	r3, [r7, #12]
 8002e58:	2300      	movs	r3, #0
 8002e5a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002e60:	4b67      	ldr	r3, [pc, #412]	; (8003000 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002e62:	689b      	ldr	r3, [r3, #8]
 8002e64:	f003 030c 	and.w	r3, r3, #12
 8002e68:	2b08      	cmp	r3, #8
 8002e6a:	d00d      	beq.n	8002e88 <HAL_RCC_GetSysClockFreq+0x40>
 8002e6c:	2b08      	cmp	r3, #8
 8002e6e:	f200 80bd 	bhi.w	8002fec <HAL_RCC_GetSysClockFreq+0x1a4>
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d002      	beq.n	8002e7c <HAL_RCC_GetSysClockFreq+0x34>
 8002e76:	2b04      	cmp	r3, #4
 8002e78:	d003      	beq.n	8002e82 <HAL_RCC_GetSysClockFreq+0x3a>
 8002e7a:	e0b7      	b.n	8002fec <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002e7c:	4b61      	ldr	r3, [pc, #388]	; (8003004 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002e7e:	60bb      	str	r3, [r7, #8]
       break;
 8002e80:	e0b7      	b.n	8002ff2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002e82:	4b60      	ldr	r3, [pc, #384]	; (8003004 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002e84:	60bb      	str	r3, [r7, #8]
      break;
 8002e86:	e0b4      	b.n	8002ff2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002e88:	4b5d      	ldr	r3, [pc, #372]	; (8003000 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002e8a:	685b      	ldr	r3, [r3, #4]
 8002e8c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002e90:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002e92:	4b5b      	ldr	r3, [pc, #364]	; (8003000 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002e94:	685b      	ldr	r3, [r3, #4]
 8002e96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d04d      	beq.n	8002f3a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e9e:	4b58      	ldr	r3, [pc, #352]	; (8003000 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002ea0:	685b      	ldr	r3, [r3, #4]
 8002ea2:	099b      	lsrs	r3, r3, #6
 8002ea4:	461a      	mov	r2, r3
 8002ea6:	f04f 0300 	mov.w	r3, #0
 8002eaa:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002eae:	f04f 0100 	mov.w	r1, #0
 8002eb2:	ea02 0800 	and.w	r8, r2, r0
 8002eb6:	ea03 0901 	and.w	r9, r3, r1
 8002eba:	4640      	mov	r0, r8
 8002ebc:	4649      	mov	r1, r9
 8002ebe:	f04f 0200 	mov.w	r2, #0
 8002ec2:	f04f 0300 	mov.w	r3, #0
 8002ec6:	014b      	lsls	r3, r1, #5
 8002ec8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002ecc:	0142      	lsls	r2, r0, #5
 8002ece:	4610      	mov	r0, r2
 8002ed0:	4619      	mov	r1, r3
 8002ed2:	ebb0 0008 	subs.w	r0, r0, r8
 8002ed6:	eb61 0109 	sbc.w	r1, r1, r9
 8002eda:	f04f 0200 	mov.w	r2, #0
 8002ede:	f04f 0300 	mov.w	r3, #0
 8002ee2:	018b      	lsls	r3, r1, #6
 8002ee4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002ee8:	0182      	lsls	r2, r0, #6
 8002eea:	1a12      	subs	r2, r2, r0
 8002eec:	eb63 0301 	sbc.w	r3, r3, r1
 8002ef0:	f04f 0000 	mov.w	r0, #0
 8002ef4:	f04f 0100 	mov.w	r1, #0
 8002ef8:	00d9      	lsls	r1, r3, #3
 8002efa:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002efe:	00d0      	lsls	r0, r2, #3
 8002f00:	4602      	mov	r2, r0
 8002f02:	460b      	mov	r3, r1
 8002f04:	eb12 0208 	adds.w	r2, r2, r8
 8002f08:	eb43 0309 	adc.w	r3, r3, r9
 8002f0c:	f04f 0000 	mov.w	r0, #0
 8002f10:	f04f 0100 	mov.w	r1, #0
 8002f14:	0299      	lsls	r1, r3, #10
 8002f16:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002f1a:	0290      	lsls	r0, r2, #10
 8002f1c:	4602      	mov	r2, r0
 8002f1e:	460b      	mov	r3, r1
 8002f20:	4610      	mov	r0, r2
 8002f22:	4619      	mov	r1, r3
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	461a      	mov	r2, r3
 8002f28:	f04f 0300 	mov.w	r3, #0
 8002f2c:	f7fd f9a0 	bl	8000270 <__aeabi_uldivmod>
 8002f30:	4602      	mov	r2, r0
 8002f32:	460b      	mov	r3, r1
 8002f34:	4613      	mov	r3, r2
 8002f36:	60fb      	str	r3, [r7, #12]
 8002f38:	e04a      	b.n	8002fd0 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f3a:	4b31      	ldr	r3, [pc, #196]	; (8003000 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002f3c:	685b      	ldr	r3, [r3, #4]
 8002f3e:	099b      	lsrs	r3, r3, #6
 8002f40:	461a      	mov	r2, r3
 8002f42:	f04f 0300 	mov.w	r3, #0
 8002f46:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002f4a:	f04f 0100 	mov.w	r1, #0
 8002f4e:	ea02 0400 	and.w	r4, r2, r0
 8002f52:	ea03 0501 	and.w	r5, r3, r1
 8002f56:	4620      	mov	r0, r4
 8002f58:	4629      	mov	r1, r5
 8002f5a:	f04f 0200 	mov.w	r2, #0
 8002f5e:	f04f 0300 	mov.w	r3, #0
 8002f62:	014b      	lsls	r3, r1, #5
 8002f64:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002f68:	0142      	lsls	r2, r0, #5
 8002f6a:	4610      	mov	r0, r2
 8002f6c:	4619      	mov	r1, r3
 8002f6e:	1b00      	subs	r0, r0, r4
 8002f70:	eb61 0105 	sbc.w	r1, r1, r5
 8002f74:	f04f 0200 	mov.w	r2, #0
 8002f78:	f04f 0300 	mov.w	r3, #0
 8002f7c:	018b      	lsls	r3, r1, #6
 8002f7e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002f82:	0182      	lsls	r2, r0, #6
 8002f84:	1a12      	subs	r2, r2, r0
 8002f86:	eb63 0301 	sbc.w	r3, r3, r1
 8002f8a:	f04f 0000 	mov.w	r0, #0
 8002f8e:	f04f 0100 	mov.w	r1, #0
 8002f92:	00d9      	lsls	r1, r3, #3
 8002f94:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002f98:	00d0      	lsls	r0, r2, #3
 8002f9a:	4602      	mov	r2, r0
 8002f9c:	460b      	mov	r3, r1
 8002f9e:	1912      	adds	r2, r2, r4
 8002fa0:	eb45 0303 	adc.w	r3, r5, r3
 8002fa4:	f04f 0000 	mov.w	r0, #0
 8002fa8:	f04f 0100 	mov.w	r1, #0
 8002fac:	0299      	lsls	r1, r3, #10
 8002fae:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002fb2:	0290      	lsls	r0, r2, #10
 8002fb4:	4602      	mov	r2, r0
 8002fb6:	460b      	mov	r3, r1
 8002fb8:	4610      	mov	r0, r2
 8002fba:	4619      	mov	r1, r3
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	461a      	mov	r2, r3
 8002fc0:	f04f 0300 	mov.w	r3, #0
 8002fc4:	f7fd f954 	bl	8000270 <__aeabi_uldivmod>
 8002fc8:	4602      	mov	r2, r0
 8002fca:	460b      	mov	r3, r1
 8002fcc:	4613      	mov	r3, r2
 8002fce:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002fd0:	4b0b      	ldr	r3, [pc, #44]	; (8003000 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002fd2:	685b      	ldr	r3, [r3, #4]
 8002fd4:	0c1b      	lsrs	r3, r3, #16
 8002fd6:	f003 0303 	and.w	r3, r3, #3
 8002fda:	3301      	adds	r3, #1
 8002fdc:	005b      	lsls	r3, r3, #1
 8002fde:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002fe0:	68fa      	ldr	r2, [r7, #12]
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fe8:	60bb      	str	r3, [r7, #8]
      break;
 8002fea:	e002      	b.n	8002ff2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002fec:	4b05      	ldr	r3, [pc, #20]	; (8003004 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002fee:	60bb      	str	r3, [r7, #8]
      break;
 8002ff0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002ff2:	68bb      	ldr	r3, [r7, #8]
}
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	3710      	adds	r7, #16
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002ffe:	bf00      	nop
 8003000:	40023800 	.word	0x40023800
 8003004:	00f42400 	.word	0x00f42400

08003008 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003008:	b480      	push	{r7}
 800300a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800300c:	4b03      	ldr	r3, [pc, #12]	; (800301c <HAL_RCC_GetHCLKFreq+0x14>)
 800300e:	681b      	ldr	r3, [r3, #0]
}
 8003010:	4618      	mov	r0, r3
 8003012:	46bd      	mov	sp, r7
 8003014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003018:	4770      	bx	lr
 800301a:	bf00      	nop
 800301c:	20000000 	.word	0x20000000

08003020 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003024:	f7ff fff0 	bl	8003008 <HAL_RCC_GetHCLKFreq>
 8003028:	4602      	mov	r2, r0
 800302a:	4b05      	ldr	r3, [pc, #20]	; (8003040 <HAL_RCC_GetPCLK1Freq+0x20>)
 800302c:	689b      	ldr	r3, [r3, #8]
 800302e:	0a9b      	lsrs	r3, r3, #10
 8003030:	f003 0307 	and.w	r3, r3, #7
 8003034:	4903      	ldr	r1, [pc, #12]	; (8003044 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003036:	5ccb      	ldrb	r3, [r1, r3]
 8003038:	fa22 f303 	lsr.w	r3, r2, r3
}
 800303c:	4618      	mov	r0, r3
 800303e:	bd80      	pop	{r7, pc}
 8003040:	40023800 	.word	0x40023800
 8003044:	08009978 	.word	0x08009978

08003048 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800304c:	f7ff ffdc 	bl	8003008 <HAL_RCC_GetHCLKFreq>
 8003050:	4602      	mov	r2, r0
 8003052:	4b05      	ldr	r3, [pc, #20]	; (8003068 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003054:	689b      	ldr	r3, [r3, #8]
 8003056:	0b5b      	lsrs	r3, r3, #13
 8003058:	f003 0307 	and.w	r3, r3, #7
 800305c:	4903      	ldr	r1, [pc, #12]	; (800306c <HAL_RCC_GetPCLK2Freq+0x24>)
 800305e:	5ccb      	ldrb	r3, [r1, r3]
 8003060:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003064:	4618      	mov	r0, r3
 8003066:	bd80      	pop	{r7, pc}
 8003068:	40023800 	.word	0x40023800
 800306c:	08009978 	.word	0x08009978

08003070 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003070:	b480      	push	{r7}
 8003072:	b083      	sub	sp, #12
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
 8003078:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	220f      	movs	r2, #15
 800307e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003080:	4b12      	ldr	r3, [pc, #72]	; (80030cc <HAL_RCC_GetClockConfig+0x5c>)
 8003082:	689b      	ldr	r3, [r3, #8]
 8003084:	f003 0203 	and.w	r2, r3, #3
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800308c:	4b0f      	ldr	r3, [pc, #60]	; (80030cc <HAL_RCC_GetClockConfig+0x5c>)
 800308e:	689b      	ldr	r3, [r3, #8]
 8003090:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003098:	4b0c      	ldr	r3, [pc, #48]	; (80030cc <HAL_RCC_GetClockConfig+0x5c>)
 800309a:	689b      	ldr	r3, [r3, #8]
 800309c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80030a4:	4b09      	ldr	r3, [pc, #36]	; (80030cc <HAL_RCC_GetClockConfig+0x5c>)
 80030a6:	689b      	ldr	r3, [r3, #8]
 80030a8:	08db      	lsrs	r3, r3, #3
 80030aa:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80030b2:	4b07      	ldr	r3, [pc, #28]	; (80030d0 <HAL_RCC_GetClockConfig+0x60>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f003 0207 	and.w	r2, r3, #7
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	601a      	str	r2, [r3, #0]
}
 80030be:	bf00      	nop
 80030c0:	370c      	adds	r7, #12
 80030c2:	46bd      	mov	sp, r7
 80030c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c8:	4770      	bx	lr
 80030ca:	bf00      	nop
 80030cc:	40023800 	.word	0x40023800
 80030d0:	40023c00 	.word	0x40023c00

080030d4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b082      	sub	sp, #8
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d101      	bne.n	80030e6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80030e2:	2301      	movs	r3, #1
 80030e4:	e07b      	b.n	80031de <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d108      	bne.n	8003100 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	685b      	ldr	r3, [r3, #4]
 80030f2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80030f6:	d009      	beq.n	800310c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2200      	movs	r2, #0
 80030fc:	61da      	str	r2, [r3, #28]
 80030fe:	e005      	b.n	800310c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2200      	movs	r2, #0
 8003104:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2200      	movs	r2, #0
 800310a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2200      	movs	r2, #0
 8003110:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003118:	b2db      	uxtb	r3, r3
 800311a:	2b00      	cmp	r3, #0
 800311c:	d106      	bne.n	800312c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2200      	movs	r2, #0
 8003122:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003126:	6878      	ldr	r0, [r7, #4]
 8003128:	f7fe f980 	bl	800142c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2202      	movs	r2, #2
 8003130:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	681a      	ldr	r2, [r3, #0]
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003142:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	685b      	ldr	r3, [r3, #4]
 8003148:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	689b      	ldr	r3, [r3, #8]
 8003150:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003154:	431a      	orrs	r2, r3
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	68db      	ldr	r3, [r3, #12]
 800315a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800315e:	431a      	orrs	r2, r3
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	691b      	ldr	r3, [r3, #16]
 8003164:	f003 0302 	and.w	r3, r3, #2
 8003168:	431a      	orrs	r2, r3
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	695b      	ldr	r3, [r3, #20]
 800316e:	f003 0301 	and.w	r3, r3, #1
 8003172:	431a      	orrs	r2, r3
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	699b      	ldr	r3, [r3, #24]
 8003178:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800317c:	431a      	orrs	r2, r3
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	69db      	ldr	r3, [r3, #28]
 8003182:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003186:	431a      	orrs	r2, r3
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6a1b      	ldr	r3, [r3, #32]
 800318c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003190:	ea42 0103 	orr.w	r1, r2, r3
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003198:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	430a      	orrs	r2, r1
 80031a2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	699b      	ldr	r3, [r3, #24]
 80031a8:	0c1b      	lsrs	r3, r3, #16
 80031aa:	f003 0104 	and.w	r1, r3, #4
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031b2:	f003 0210 	and.w	r2, r3, #16
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	430a      	orrs	r2, r1
 80031bc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	69da      	ldr	r2, [r3, #28]
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80031cc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2200      	movs	r2, #0
 80031d2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2201      	movs	r2, #1
 80031d8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80031dc:	2300      	movs	r3, #0
}
 80031de:	4618      	mov	r0, r3
 80031e0:	3708      	adds	r7, #8
 80031e2:	46bd      	mov	sp, r7
 80031e4:	bd80      	pop	{r7, pc}

080031e6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80031e6:	b580      	push	{r7, lr}
 80031e8:	b088      	sub	sp, #32
 80031ea:	af00      	add	r7, sp, #0
 80031ec:	60f8      	str	r0, [r7, #12]
 80031ee:	60b9      	str	r1, [r7, #8]
 80031f0:	603b      	str	r3, [r7, #0]
 80031f2:	4613      	mov	r3, r2
 80031f4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80031f6:	2300      	movs	r3, #0
 80031f8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003200:	2b01      	cmp	r3, #1
 8003202:	d101      	bne.n	8003208 <HAL_SPI_Transmit+0x22>
 8003204:	2302      	movs	r3, #2
 8003206:	e126      	b.n	8003456 <HAL_SPI_Transmit+0x270>
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	2201      	movs	r2, #1
 800320c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003210:	f7fe fca0 	bl	8001b54 <HAL_GetTick>
 8003214:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003216:	88fb      	ldrh	r3, [r7, #6]
 8003218:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003220:	b2db      	uxtb	r3, r3
 8003222:	2b01      	cmp	r3, #1
 8003224:	d002      	beq.n	800322c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003226:	2302      	movs	r3, #2
 8003228:	77fb      	strb	r3, [r7, #31]
    goto error;
 800322a:	e10b      	b.n	8003444 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800322c:	68bb      	ldr	r3, [r7, #8]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d002      	beq.n	8003238 <HAL_SPI_Transmit+0x52>
 8003232:	88fb      	ldrh	r3, [r7, #6]
 8003234:	2b00      	cmp	r3, #0
 8003236:	d102      	bne.n	800323e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003238:	2301      	movs	r3, #1
 800323a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800323c:	e102      	b.n	8003444 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	2203      	movs	r2, #3
 8003242:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	2200      	movs	r2, #0
 800324a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	68ba      	ldr	r2, [r7, #8]
 8003250:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	88fa      	ldrh	r2, [r7, #6]
 8003256:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	88fa      	ldrh	r2, [r7, #6]
 800325c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	2200      	movs	r2, #0
 8003262:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	2200      	movs	r2, #0
 8003268:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	2200      	movs	r2, #0
 800326e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	2200      	movs	r2, #0
 8003274:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	2200      	movs	r2, #0
 800327a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	689b      	ldr	r3, [r3, #8]
 8003280:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003284:	d10f      	bne.n	80032a6 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	681a      	ldr	r2, [r3, #0]
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003294:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	681a      	ldr	r2, [r3, #0]
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80032a4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032b0:	2b40      	cmp	r3, #64	; 0x40
 80032b2:	d007      	beq.n	80032c4 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	681a      	ldr	r2, [r3, #0]
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80032c2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	68db      	ldr	r3, [r3, #12]
 80032c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80032cc:	d14b      	bne.n	8003366 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	685b      	ldr	r3, [r3, #4]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d002      	beq.n	80032dc <HAL_SPI_Transmit+0xf6>
 80032d6:	8afb      	ldrh	r3, [r7, #22]
 80032d8:	2b01      	cmp	r3, #1
 80032da:	d13e      	bne.n	800335a <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032e0:	881a      	ldrh	r2, [r3, #0]
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ec:	1c9a      	adds	r2, r3, #2
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80032f6:	b29b      	uxth	r3, r3
 80032f8:	3b01      	subs	r3, #1
 80032fa:	b29a      	uxth	r2, r3
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003300:	e02b      	b.n	800335a <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	689b      	ldr	r3, [r3, #8]
 8003308:	f003 0302 	and.w	r3, r3, #2
 800330c:	2b02      	cmp	r3, #2
 800330e:	d112      	bne.n	8003336 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003314:	881a      	ldrh	r2, [r3, #0]
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003320:	1c9a      	adds	r2, r3, #2
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800332a:	b29b      	uxth	r3, r3
 800332c:	3b01      	subs	r3, #1
 800332e:	b29a      	uxth	r2, r3
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	86da      	strh	r2, [r3, #54]	; 0x36
 8003334:	e011      	b.n	800335a <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003336:	f7fe fc0d 	bl	8001b54 <HAL_GetTick>
 800333a:	4602      	mov	r2, r0
 800333c:	69bb      	ldr	r3, [r7, #24]
 800333e:	1ad3      	subs	r3, r2, r3
 8003340:	683a      	ldr	r2, [r7, #0]
 8003342:	429a      	cmp	r2, r3
 8003344:	d803      	bhi.n	800334e <HAL_SPI_Transmit+0x168>
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800334c:	d102      	bne.n	8003354 <HAL_SPI_Transmit+0x16e>
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	2b00      	cmp	r3, #0
 8003352:	d102      	bne.n	800335a <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8003354:	2303      	movs	r3, #3
 8003356:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003358:	e074      	b.n	8003444 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800335e:	b29b      	uxth	r3, r3
 8003360:	2b00      	cmp	r3, #0
 8003362:	d1ce      	bne.n	8003302 <HAL_SPI_Transmit+0x11c>
 8003364:	e04c      	b.n	8003400 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	685b      	ldr	r3, [r3, #4]
 800336a:	2b00      	cmp	r3, #0
 800336c:	d002      	beq.n	8003374 <HAL_SPI_Transmit+0x18e>
 800336e:	8afb      	ldrh	r3, [r7, #22]
 8003370:	2b01      	cmp	r3, #1
 8003372:	d140      	bne.n	80033f6 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	330c      	adds	r3, #12
 800337e:	7812      	ldrb	r2, [r2, #0]
 8003380:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003386:	1c5a      	adds	r2, r3, #1
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003390:	b29b      	uxth	r3, r3
 8003392:	3b01      	subs	r3, #1
 8003394:	b29a      	uxth	r2, r3
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800339a:	e02c      	b.n	80033f6 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	689b      	ldr	r3, [r3, #8]
 80033a2:	f003 0302 	and.w	r3, r3, #2
 80033a6:	2b02      	cmp	r3, #2
 80033a8:	d113      	bne.n	80033d2 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	330c      	adds	r3, #12
 80033b4:	7812      	ldrb	r2, [r2, #0]
 80033b6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033bc:	1c5a      	adds	r2, r3, #1
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80033c6:	b29b      	uxth	r3, r3
 80033c8:	3b01      	subs	r3, #1
 80033ca:	b29a      	uxth	r2, r3
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	86da      	strh	r2, [r3, #54]	; 0x36
 80033d0:	e011      	b.n	80033f6 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80033d2:	f7fe fbbf 	bl	8001b54 <HAL_GetTick>
 80033d6:	4602      	mov	r2, r0
 80033d8:	69bb      	ldr	r3, [r7, #24]
 80033da:	1ad3      	subs	r3, r2, r3
 80033dc:	683a      	ldr	r2, [r7, #0]
 80033de:	429a      	cmp	r2, r3
 80033e0:	d803      	bhi.n	80033ea <HAL_SPI_Transmit+0x204>
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80033e8:	d102      	bne.n	80033f0 <HAL_SPI_Transmit+0x20a>
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d102      	bne.n	80033f6 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80033f0:	2303      	movs	r3, #3
 80033f2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80033f4:	e026      	b.n	8003444 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80033fa:	b29b      	uxth	r3, r3
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d1cd      	bne.n	800339c <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003400:	69ba      	ldr	r2, [r7, #24]
 8003402:	6839      	ldr	r1, [r7, #0]
 8003404:	68f8      	ldr	r0, [r7, #12]
 8003406:	f000 fbcb 	bl	8003ba0 <SPI_EndRxTxTransaction>
 800340a:	4603      	mov	r3, r0
 800340c:	2b00      	cmp	r3, #0
 800340e:	d002      	beq.n	8003416 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	2220      	movs	r2, #32
 8003414:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	689b      	ldr	r3, [r3, #8]
 800341a:	2b00      	cmp	r3, #0
 800341c:	d10a      	bne.n	8003434 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800341e:	2300      	movs	r3, #0
 8003420:	613b      	str	r3, [r7, #16]
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	68db      	ldr	r3, [r3, #12]
 8003428:	613b      	str	r3, [r7, #16]
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	689b      	ldr	r3, [r3, #8]
 8003430:	613b      	str	r3, [r7, #16]
 8003432:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003438:	2b00      	cmp	r3, #0
 800343a:	d002      	beq.n	8003442 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800343c:	2301      	movs	r3, #1
 800343e:	77fb      	strb	r3, [r7, #31]
 8003440:	e000      	b.n	8003444 <HAL_SPI_Transmit+0x25e>
  }

error:
 8003442:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	2201      	movs	r2, #1
 8003448:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	2200      	movs	r2, #0
 8003450:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003454:	7ffb      	ldrb	r3, [r7, #31]
}
 8003456:	4618      	mov	r0, r3
 8003458:	3720      	adds	r7, #32
 800345a:	46bd      	mov	sp, r7
 800345c:	bd80      	pop	{r7, pc}

0800345e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800345e:	b580      	push	{r7, lr}
 8003460:	b088      	sub	sp, #32
 8003462:	af02      	add	r7, sp, #8
 8003464:	60f8      	str	r0, [r7, #12]
 8003466:	60b9      	str	r1, [r7, #8]
 8003468:	603b      	str	r3, [r7, #0]
 800346a:	4613      	mov	r3, r2
 800346c:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800346e:	2300      	movs	r3, #0
 8003470:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	685b      	ldr	r3, [r3, #4]
 8003476:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800347a:	d112      	bne.n	80034a2 <HAL_SPI_Receive+0x44>
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	689b      	ldr	r3, [r3, #8]
 8003480:	2b00      	cmp	r3, #0
 8003482:	d10e      	bne.n	80034a2 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	2204      	movs	r2, #4
 8003488:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800348c:	88fa      	ldrh	r2, [r7, #6]
 800348e:	683b      	ldr	r3, [r7, #0]
 8003490:	9300      	str	r3, [sp, #0]
 8003492:	4613      	mov	r3, r2
 8003494:	68ba      	ldr	r2, [r7, #8]
 8003496:	68b9      	ldr	r1, [r7, #8]
 8003498:	68f8      	ldr	r0, [r7, #12]
 800349a:	f000 f8f1 	bl	8003680 <HAL_SPI_TransmitReceive>
 800349e:	4603      	mov	r3, r0
 80034a0:	e0ea      	b.n	8003678 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80034a8:	2b01      	cmp	r3, #1
 80034aa:	d101      	bne.n	80034b0 <HAL_SPI_Receive+0x52>
 80034ac:	2302      	movs	r3, #2
 80034ae:	e0e3      	b.n	8003678 <HAL_SPI_Receive+0x21a>
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	2201      	movs	r2, #1
 80034b4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80034b8:	f7fe fb4c 	bl	8001b54 <HAL_GetTick>
 80034bc:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80034c4:	b2db      	uxtb	r3, r3
 80034c6:	2b01      	cmp	r3, #1
 80034c8:	d002      	beq.n	80034d0 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80034ca:	2302      	movs	r3, #2
 80034cc:	75fb      	strb	r3, [r7, #23]
    goto error;
 80034ce:	e0ca      	b.n	8003666 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 80034d0:	68bb      	ldr	r3, [r7, #8]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d002      	beq.n	80034dc <HAL_SPI_Receive+0x7e>
 80034d6:	88fb      	ldrh	r3, [r7, #6]
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d102      	bne.n	80034e2 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80034dc:	2301      	movs	r3, #1
 80034de:	75fb      	strb	r3, [r7, #23]
    goto error;
 80034e0:	e0c1      	b.n	8003666 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	2204      	movs	r2, #4
 80034e6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	2200      	movs	r2, #0
 80034ee:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	68ba      	ldr	r2, [r7, #8]
 80034f4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	88fa      	ldrh	r2, [r7, #6]
 80034fa:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	88fa      	ldrh	r2, [r7, #6]
 8003500:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	2200      	movs	r2, #0
 8003506:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	2200      	movs	r2, #0
 800350c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	2200      	movs	r2, #0
 8003512:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	2200      	movs	r2, #0
 8003518:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	2200      	movs	r2, #0
 800351e:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	689b      	ldr	r3, [r3, #8]
 8003524:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003528:	d10f      	bne.n	800354a <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	681a      	ldr	r2, [r3, #0]
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003538:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	681a      	ldr	r2, [r3, #0]
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003548:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003554:	2b40      	cmp	r3, #64	; 0x40
 8003556:	d007      	beq.n	8003568 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	681a      	ldr	r2, [r3, #0]
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003566:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	68db      	ldr	r3, [r3, #12]
 800356c:	2b00      	cmp	r3, #0
 800356e:	d162      	bne.n	8003636 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003570:	e02e      	b.n	80035d0 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	689b      	ldr	r3, [r3, #8]
 8003578:	f003 0301 	and.w	r3, r3, #1
 800357c:	2b01      	cmp	r3, #1
 800357e:	d115      	bne.n	80035ac <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f103 020c 	add.w	r2, r3, #12
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800358c:	7812      	ldrb	r2, [r2, #0]
 800358e:	b2d2      	uxtb	r2, r2
 8003590:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003596:	1c5a      	adds	r2, r3, #1
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80035a0:	b29b      	uxth	r3, r3
 80035a2:	3b01      	subs	r3, #1
 80035a4:	b29a      	uxth	r2, r3
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80035aa:	e011      	b.n	80035d0 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80035ac:	f7fe fad2 	bl	8001b54 <HAL_GetTick>
 80035b0:	4602      	mov	r2, r0
 80035b2:	693b      	ldr	r3, [r7, #16]
 80035b4:	1ad3      	subs	r3, r2, r3
 80035b6:	683a      	ldr	r2, [r7, #0]
 80035b8:	429a      	cmp	r2, r3
 80035ba:	d803      	bhi.n	80035c4 <HAL_SPI_Receive+0x166>
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80035c2:	d102      	bne.n	80035ca <HAL_SPI_Receive+0x16c>
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d102      	bne.n	80035d0 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 80035ca:	2303      	movs	r3, #3
 80035cc:	75fb      	strb	r3, [r7, #23]
          goto error;
 80035ce:	e04a      	b.n	8003666 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80035d4:	b29b      	uxth	r3, r3
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d1cb      	bne.n	8003572 <HAL_SPI_Receive+0x114>
 80035da:	e031      	b.n	8003640 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	689b      	ldr	r3, [r3, #8]
 80035e2:	f003 0301 	and.w	r3, r3, #1
 80035e6:	2b01      	cmp	r3, #1
 80035e8:	d113      	bne.n	8003612 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	68da      	ldr	r2, [r3, #12]
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035f4:	b292      	uxth	r2, r2
 80035f6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035fc:	1c9a      	adds	r2, r3, #2
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003606:	b29b      	uxth	r3, r3
 8003608:	3b01      	subs	r3, #1
 800360a:	b29a      	uxth	r2, r3
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003610:	e011      	b.n	8003636 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003612:	f7fe fa9f 	bl	8001b54 <HAL_GetTick>
 8003616:	4602      	mov	r2, r0
 8003618:	693b      	ldr	r3, [r7, #16]
 800361a:	1ad3      	subs	r3, r2, r3
 800361c:	683a      	ldr	r2, [r7, #0]
 800361e:	429a      	cmp	r2, r3
 8003620:	d803      	bhi.n	800362a <HAL_SPI_Receive+0x1cc>
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003628:	d102      	bne.n	8003630 <HAL_SPI_Receive+0x1d2>
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	2b00      	cmp	r3, #0
 800362e:	d102      	bne.n	8003636 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8003630:	2303      	movs	r3, #3
 8003632:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003634:	e017      	b.n	8003666 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800363a:	b29b      	uxth	r3, r3
 800363c:	2b00      	cmp	r3, #0
 800363e:	d1cd      	bne.n	80035dc <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003640:	693a      	ldr	r2, [r7, #16]
 8003642:	6839      	ldr	r1, [r7, #0]
 8003644:	68f8      	ldr	r0, [r7, #12]
 8003646:	f000 fa45 	bl	8003ad4 <SPI_EndRxTransaction>
 800364a:	4603      	mov	r3, r0
 800364c:	2b00      	cmp	r3, #0
 800364e:	d002      	beq.n	8003656 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	2220      	movs	r2, #32
 8003654:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800365a:	2b00      	cmp	r3, #0
 800365c:	d002      	beq.n	8003664 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 800365e:	2301      	movs	r3, #1
 8003660:	75fb      	strb	r3, [r7, #23]
 8003662:	e000      	b.n	8003666 <HAL_SPI_Receive+0x208>
  }

error :
 8003664:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	2201      	movs	r2, #1
 800366a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	2200      	movs	r2, #0
 8003672:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003676:	7dfb      	ldrb	r3, [r7, #23]
}
 8003678:	4618      	mov	r0, r3
 800367a:	3718      	adds	r7, #24
 800367c:	46bd      	mov	sp, r7
 800367e:	bd80      	pop	{r7, pc}

08003680 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b08c      	sub	sp, #48	; 0x30
 8003684:	af00      	add	r7, sp, #0
 8003686:	60f8      	str	r0, [r7, #12]
 8003688:	60b9      	str	r1, [r7, #8]
 800368a:	607a      	str	r2, [r7, #4]
 800368c:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800368e:	2301      	movs	r3, #1
 8003690:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003692:	2300      	movs	r3, #0
 8003694:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800369e:	2b01      	cmp	r3, #1
 80036a0:	d101      	bne.n	80036a6 <HAL_SPI_TransmitReceive+0x26>
 80036a2:	2302      	movs	r3, #2
 80036a4:	e18a      	b.n	80039bc <HAL_SPI_TransmitReceive+0x33c>
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	2201      	movs	r2, #1
 80036aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80036ae:	f7fe fa51 	bl	8001b54 <HAL_GetTick>
 80036b2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80036ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	685b      	ldr	r3, [r3, #4]
 80036c2:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80036c4:	887b      	ldrh	r3, [r7, #2]
 80036c6:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80036c8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80036cc:	2b01      	cmp	r3, #1
 80036ce:	d00f      	beq.n	80036f0 <HAL_SPI_TransmitReceive+0x70>
 80036d0:	69fb      	ldr	r3, [r7, #28]
 80036d2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80036d6:	d107      	bne.n	80036e8 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	689b      	ldr	r3, [r3, #8]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d103      	bne.n	80036e8 <HAL_SPI_TransmitReceive+0x68>
 80036e0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80036e4:	2b04      	cmp	r3, #4
 80036e6:	d003      	beq.n	80036f0 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80036e8:	2302      	movs	r3, #2
 80036ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80036ee:	e15b      	b.n	80039a8 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80036f0:	68bb      	ldr	r3, [r7, #8]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d005      	beq.n	8003702 <HAL_SPI_TransmitReceive+0x82>
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d002      	beq.n	8003702 <HAL_SPI_TransmitReceive+0x82>
 80036fc:	887b      	ldrh	r3, [r7, #2]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d103      	bne.n	800370a <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003702:	2301      	movs	r3, #1
 8003704:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003708:	e14e      	b.n	80039a8 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003710:	b2db      	uxtb	r3, r3
 8003712:	2b04      	cmp	r3, #4
 8003714:	d003      	beq.n	800371e <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	2205      	movs	r2, #5
 800371a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	2200      	movs	r2, #0
 8003722:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	687a      	ldr	r2, [r7, #4]
 8003728:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	887a      	ldrh	r2, [r7, #2]
 800372e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	887a      	ldrh	r2, [r7, #2]
 8003734:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	68ba      	ldr	r2, [r7, #8]
 800373a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	887a      	ldrh	r2, [r7, #2]
 8003740:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	887a      	ldrh	r2, [r7, #2]
 8003746:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	2200      	movs	r2, #0
 800374c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	2200      	movs	r2, #0
 8003752:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800375e:	2b40      	cmp	r3, #64	; 0x40
 8003760:	d007      	beq.n	8003772 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	681a      	ldr	r2, [r3, #0]
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003770:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	68db      	ldr	r3, [r3, #12]
 8003776:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800377a:	d178      	bne.n	800386e <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	685b      	ldr	r3, [r3, #4]
 8003780:	2b00      	cmp	r3, #0
 8003782:	d002      	beq.n	800378a <HAL_SPI_TransmitReceive+0x10a>
 8003784:	8b7b      	ldrh	r3, [r7, #26]
 8003786:	2b01      	cmp	r3, #1
 8003788:	d166      	bne.n	8003858 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800378e:	881a      	ldrh	r2, [r3, #0]
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800379a:	1c9a      	adds	r2, r3, #2
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80037a4:	b29b      	uxth	r3, r3
 80037a6:	3b01      	subs	r3, #1
 80037a8:	b29a      	uxth	r2, r3
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80037ae:	e053      	b.n	8003858 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	689b      	ldr	r3, [r3, #8]
 80037b6:	f003 0302 	and.w	r3, r3, #2
 80037ba:	2b02      	cmp	r3, #2
 80037bc:	d11b      	bne.n	80037f6 <HAL_SPI_TransmitReceive+0x176>
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80037c2:	b29b      	uxth	r3, r3
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d016      	beq.n	80037f6 <HAL_SPI_TransmitReceive+0x176>
 80037c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037ca:	2b01      	cmp	r3, #1
 80037cc:	d113      	bne.n	80037f6 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037d2:	881a      	ldrh	r2, [r3, #0]
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037de:	1c9a      	adds	r2, r3, #2
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80037e8:	b29b      	uxth	r3, r3
 80037ea:	3b01      	subs	r3, #1
 80037ec:	b29a      	uxth	r2, r3
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80037f2:	2300      	movs	r3, #0
 80037f4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	689b      	ldr	r3, [r3, #8]
 80037fc:	f003 0301 	and.w	r3, r3, #1
 8003800:	2b01      	cmp	r3, #1
 8003802:	d119      	bne.n	8003838 <HAL_SPI_TransmitReceive+0x1b8>
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003808:	b29b      	uxth	r3, r3
 800380a:	2b00      	cmp	r3, #0
 800380c:	d014      	beq.n	8003838 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	68da      	ldr	r2, [r3, #12]
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003818:	b292      	uxth	r2, r2
 800381a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003820:	1c9a      	adds	r2, r3, #2
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800382a:	b29b      	uxth	r3, r3
 800382c:	3b01      	subs	r3, #1
 800382e:	b29a      	uxth	r2, r3
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003834:	2301      	movs	r3, #1
 8003836:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003838:	f7fe f98c 	bl	8001b54 <HAL_GetTick>
 800383c:	4602      	mov	r2, r0
 800383e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003840:	1ad3      	subs	r3, r2, r3
 8003842:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003844:	429a      	cmp	r2, r3
 8003846:	d807      	bhi.n	8003858 <HAL_SPI_TransmitReceive+0x1d8>
 8003848:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800384a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800384e:	d003      	beq.n	8003858 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8003850:	2303      	movs	r3, #3
 8003852:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003856:	e0a7      	b.n	80039a8 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800385c:	b29b      	uxth	r3, r3
 800385e:	2b00      	cmp	r3, #0
 8003860:	d1a6      	bne.n	80037b0 <HAL_SPI_TransmitReceive+0x130>
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003866:	b29b      	uxth	r3, r3
 8003868:	2b00      	cmp	r3, #0
 800386a:	d1a1      	bne.n	80037b0 <HAL_SPI_TransmitReceive+0x130>
 800386c:	e07c      	b.n	8003968 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	685b      	ldr	r3, [r3, #4]
 8003872:	2b00      	cmp	r3, #0
 8003874:	d002      	beq.n	800387c <HAL_SPI_TransmitReceive+0x1fc>
 8003876:	8b7b      	ldrh	r3, [r7, #26]
 8003878:	2b01      	cmp	r3, #1
 800387a:	d16b      	bne.n	8003954 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	330c      	adds	r3, #12
 8003886:	7812      	ldrb	r2, [r2, #0]
 8003888:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800388e:	1c5a      	adds	r2, r3, #1
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003898:	b29b      	uxth	r3, r3
 800389a:	3b01      	subs	r3, #1
 800389c:	b29a      	uxth	r2, r3
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80038a2:	e057      	b.n	8003954 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	689b      	ldr	r3, [r3, #8]
 80038aa:	f003 0302 	and.w	r3, r3, #2
 80038ae:	2b02      	cmp	r3, #2
 80038b0:	d11c      	bne.n	80038ec <HAL_SPI_TransmitReceive+0x26c>
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80038b6:	b29b      	uxth	r3, r3
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d017      	beq.n	80038ec <HAL_SPI_TransmitReceive+0x26c>
 80038bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038be:	2b01      	cmp	r3, #1
 80038c0:	d114      	bne.n	80038ec <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	330c      	adds	r3, #12
 80038cc:	7812      	ldrb	r2, [r2, #0]
 80038ce:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038d4:	1c5a      	adds	r2, r3, #1
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80038de:	b29b      	uxth	r3, r3
 80038e0:	3b01      	subs	r3, #1
 80038e2:	b29a      	uxth	r2, r3
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80038e8:	2300      	movs	r3, #0
 80038ea:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	689b      	ldr	r3, [r3, #8]
 80038f2:	f003 0301 	and.w	r3, r3, #1
 80038f6:	2b01      	cmp	r3, #1
 80038f8:	d119      	bne.n	800392e <HAL_SPI_TransmitReceive+0x2ae>
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80038fe:	b29b      	uxth	r3, r3
 8003900:	2b00      	cmp	r3, #0
 8003902:	d014      	beq.n	800392e <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	68da      	ldr	r2, [r3, #12]
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800390e:	b2d2      	uxtb	r2, r2
 8003910:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003916:	1c5a      	adds	r2, r3, #1
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003920:	b29b      	uxth	r3, r3
 8003922:	3b01      	subs	r3, #1
 8003924:	b29a      	uxth	r2, r3
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800392a:	2301      	movs	r3, #1
 800392c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800392e:	f7fe f911 	bl	8001b54 <HAL_GetTick>
 8003932:	4602      	mov	r2, r0
 8003934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003936:	1ad3      	subs	r3, r2, r3
 8003938:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800393a:	429a      	cmp	r2, r3
 800393c:	d803      	bhi.n	8003946 <HAL_SPI_TransmitReceive+0x2c6>
 800393e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003940:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003944:	d102      	bne.n	800394c <HAL_SPI_TransmitReceive+0x2cc>
 8003946:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003948:	2b00      	cmp	r3, #0
 800394a:	d103      	bne.n	8003954 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800394c:	2303      	movs	r3, #3
 800394e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003952:	e029      	b.n	80039a8 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003958:	b29b      	uxth	r3, r3
 800395a:	2b00      	cmp	r3, #0
 800395c:	d1a2      	bne.n	80038a4 <HAL_SPI_TransmitReceive+0x224>
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003962:	b29b      	uxth	r3, r3
 8003964:	2b00      	cmp	r3, #0
 8003966:	d19d      	bne.n	80038a4 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003968:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800396a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800396c:	68f8      	ldr	r0, [r7, #12]
 800396e:	f000 f917 	bl	8003ba0 <SPI_EndRxTxTransaction>
 8003972:	4603      	mov	r3, r0
 8003974:	2b00      	cmp	r3, #0
 8003976:	d006      	beq.n	8003986 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8003978:	2301      	movs	r3, #1
 800397a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	2220      	movs	r2, #32
 8003982:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003984:	e010      	b.n	80039a8 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	689b      	ldr	r3, [r3, #8]
 800398a:	2b00      	cmp	r3, #0
 800398c:	d10b      	bne.n	80039a6 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800398e:	2300      	movs	r3, #0
 8003990:	617b      	str	r3, [r7, #20]
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	68db      	ldr	r3, [r3, #12]
 8003998:	617b      	str	r3, [r7, #20]
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	689b      	ldr	r3, [r3, #8]
 80039a0:	617b      	str	r3, [r7, #20]
 80039a2:	697b      	ldr	r3, [r7, #20]
 80039a4:	e000      	b.n	80039a8 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80039a6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	2201      	movs	r2, #1
 80039ac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	2200      	movs	r2, #0
 80039b4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80039b8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80039bc:	4618      	mov	r0, r3
 80039be:	3730      	adds	r7, #48	; 0x30
 80039c0:	46bd      	mov	sp, r7
 80039c2:	bd80      	pop	{r7, pc}

080039c4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b088      	sub	sp, #32
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	60f8      	str	r0, [r7, #12]
 80039cc:	60b9      	str	r1, [r7, #8]
 80039ce:	603b      	str	r3, [r7, #0]
 80039d0:	4613      	mov	r3, r2
 80039d2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80039d4:	f7fe f8be 	bl	8001b54 <HAL_GetTick>
 80039d8:	4602      	mov	r2, r0
 80039da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039dc:	1a9b      	subs	r3, r3, r2
 80039de:	683a      	ldr	r2, [r7, #0]
 80039e0:	4413      	add	r3, r2
 80039e2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80039e4:	f7fe f8b6 	bl	8001b54 <HAL_GetTick>
 80039e8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80039ea:	4b39      	ldr	r3, [pc, #228]	; (8003ad0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	015b      	lsls	r3, r3, #5
 80039f0:	0d1b      	lsrs	r3, r3, #20
 80039f2:	69fa      	ldr	r2, [r7, #28]
 80039f4:	fb02 f303 	mul.w	r3, r2, r3
 80039f8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80039fa:	e054      	b.n	8003aa6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003a02:	d050      	beq.n	8003aa6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003a04:	f7fe f8a6 	bl	8001b54 <HAL_GetTick>
 8003a08:	4602      	mov	r2, r0
 8003a0a:	69bb      	ldr	r3, [r7, #24]
 8003a0c:	1ad3      	subs	r3, r2, r3
 8003a0e:	69fa      	ldr	r2, [r7, #28]
 8003a10:	429a      	cmp	r2, r3
 8003a12:	d902      	bls.n	8003a1a <SPI_WaitFlagStateUntilTimeout+0x56>
 8003a14:	69fb      	ldr	r3, [r7, #28]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d13d      	bne.n	8003a96 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	685a      	ldr	r2, [r3, #4]
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003a28:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	685b      	ldr	r3, [r3, #4]
 8003a2e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003a32:	d111      	bne.n	8003a58 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	689b      	ldr	r3, [r3, #8]
 8003a38:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a3c:	d004      	beq.n	8003a48 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	689b      	ldr	r3, [r3, #8]
 8003a42:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a46:	d107      	bne.n	8003a58 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	681a      	ldr	r2, [r3, #0]
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a56:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a5c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a60:	d10f      	bne.n	8003a82 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	681a      	ldr	r2, [r3, #0]
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003a70:	601a      	str	r2, [r3, #0]
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	681a      	ldr	r2, [r3, #0]
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003a80:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	2201      	movs	r2, #1
 8003a86:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003a92:	2303      	movs	r3, #3
 8003a94:	e017      	b.n	8003ac6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003a96:	697b      	ldr	r3, [r7, #20]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d101      	bne.n	8003aa0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003aa0:	697b      	ldr	r3, [r7, #20]
 8003aa2:	3b01      	subs	r3, #1
 8003aa4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	689a      	ldr	r2, [r3, #8]
 8003aac:	68bb      	ldr	r3, [r7, #8]
 8003aae:	4013      	ands	r3, r2
 8003ab0:	68ba      	ldr	r2, [r7, #8]
 8003ab2:	429a      	cmp	r2, r3
 8003ab4:	bf0c      	ite	eq
 8003ab6:	2301      	moveq	r3, #1
 8003ab8:	2300      	movne	r3, #0
 8003aba:	b2db      	uxtb	r3, r3
 8003abc:	461a      	mov	r2, r3
 8003abe:	79fb      	ldrb	r3, [r7, #7]
 8003ac0:	429a      	cmp	r2, r3
 8003ac2:	d19b      	bne.n	80039fc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003ac4:	2300      	movs	r3, #0
}
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	3720      	adds	r7, #32
 8003aca:	46bd      	mov	sp, r7
 8003acc:	bd80      	pop	{r7, pc}
 8003ace:	bf00      	nop
 8003ad0:	20000000 	.word	0x20000000

08003ad4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b086      	sub	sp, #24
 8003ad8:	af02      	add	r7, sp, #8
 8003ada:	60f8      	str	r0, [r7, #12]
 8003adc:	60b9      	str	r1, [r7, #8]
 8003ade:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	685b      	ldr	r3, [r3, #4]
 8003ae4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003ae8:	d111      	bne.n	8003b0e <SPI_EndRxTransaction+0x3a>
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	689b      	ldr	r3, [r3, #8]
 8003aee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003af2:	d004      	beq.n	8003afe <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	689b      	ldr	r3, [r3, #8]
 8003af8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003afc:	d107      	bne.n	8003b0e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	681a      	ldr	r2, [r3, #0]
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b0c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	685b      	ldr	r3, [r3, #4]
 8003b12:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003b16:	d12a      	bne.n	8003b6e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	689b      	ldr	r3, [r3, #8]
 8003b1c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b20:	d012      	beq.n	8003b48 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	9300      	str	r3, [sp, #0]
 8003b26:	68bb      	ldr	r3, [r7, #8]
 8003b28:	2200      	movs	r2, #0
 8003b2a:	2180      	movs	r1, #128	; 0x80
 8003b2c:	68f8      	ldr	r0, [r7, #12]
 8003b2e:	f7ff ff49 	bl	80039c4 <SPI_WaitFlagStateUntilTimeout>
 8003b32:	4603      	mov	r3, r0
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d02d      	beq.n	8003b94 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b3c:	f043 0220 	orr.w	r2, r3, #32
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8003b44:	2303      	movs	r3, #3
 8003b46:	e026      	b.n	8003b96 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	9300      	str	r3, [sp, #0]
 8003b4c:	68bb      	ldr	r3, [r7, #8]
 8003b4e:	2200      	movs	r2, #0
 8003b50:	2101      	movs	r1, #1
 8003b52:	68f8      	ldr	r0, [r7, #12]
 8003b54:	f7ff ff36 	bl	80039c4 <SPI_WaitFlagStateUntilTimeout>
 8003b58:	4603      	mov	r3, r0
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d01a      	beq.n	8003b94 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b62:	f043 0220 	orr.w	r2, r3, #32
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8003b6a:	2303      	movs	r3, #3
 8003b6c:	e013      	b.n	8003b96 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	9300      	str	r3, [sp, #0]
 8003b72:	68bb      	ldr	r3, [r7, #8]
 8003b74:	2200      	movs	r2, #0
 8003b76:	2101      	movs	r1, #1
 8003b78:	68f8      	ldr	r0, [r7, #12]
 8003b7a:	f7ff ff23 	bl	80039c4 <SPI_WaitFlagStateUntilTimeout>
 8003b7e:	4603      	mov	r3, r0
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d007      	beq.n	8003b94 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b88:	f043 0220 	orr.w	r2, r3, #32
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003b90:	2303      	movs	r3, #3
 8003b92:	e000      	b.n	8003b96 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8003b94:	2300      	movs	r3, #0
}
 8003b96:	4618      	mov	r0, r3
 8003b98:	3710      	adds	r7, #16
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	bd80      	pop	{r7, pc}
	...

08003ba0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b088      	sub	sp, #32
 8003ba4:	af02      	add	r7, sp, #8
 8003ba6:	60f8      	str	r0, [r7, #12]
 8003ba8:	60b9      	str	r1, [r7, #8]
 8003baa:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003bac:	4b1b      	ldr	r3, [pc, #108]	; (8003c1c <SPI_EndRxTxTransaction+0x7c>)
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	4a1b      	ldr	r2, [pc, #108]	; (8003c20 <SPI_EndRxTxTransaction+0x80>)
 8003bb2:	fba2 2303 	umull	r2, r3, r2, r3
 8003bb6:	0d5b      	lsrs	r3, r3, #21
 8003bb8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003bbc:	fb02 f303 	mul.w	r3, r2, r3
 8003bc0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	685b      	ldr	r3, [r3, #4]
 8003bc6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003bca:	d112      	bne.n	8003bf2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	9300      	str	r3, [sp, #0]
 8003bd0:	68bb      	ldr	r3, [r7, #8]
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	2180      	movs	r1, #128	; 0x80
 8003bd6:	68f8      	ldr	r0, [r7, #12]
 8003bd8:	f7ff fef4 	bl	80039c4 <SPI_WaitFlagStateUntilTimeout>
 8003bdc:	4603      	mov	r3, r0
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d016      	beq.n	8003c10 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003be6:	f043 0220 	orr.w	r2, r3, #32
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003bee:	2303      	movs	r3, #3
 8003bf0:	e00f      	b.n	8003c12 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003bf2:	697b      	ldr	r3, [r7, #20]
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d00a      	beq.n	8003c0e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003bf8:	697b      	ldr	r3, [r7, #20]
 8003bfa:	3b01      	subs	r3, #1
 8003bfc:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	689b      	ldr	r3, [r3, #8]
 8003c04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c08:	2b80      	cmp	r3, #128	; 0x80
 8003c0a:	d0f2      	beq.n	8003bf2 <SPI_EndRxTxTransaction+0x52>
 8003c0c:	e000      	b.n	8003c10 <SPI_EndRxTxTransaction+0x70>
        break;
 8003c0e:	bf00      	nop
  }

  return HAL_OK;
 8003c10:	2300      	movs	r3, #0
}
 8003c12:	4618      	mov	r0, r3
 8003c14:	3718      	adds	r7, #24
 8003c16:	46bd      	mov	sp, r7
 8003c18:	bd80      	pop	{r7, pc}
 8003c1a:	bf00      	nop
 8003c1c:	20000000 	.word	0x20000000
 8003c20:	165e9f81 	.word	0x165e9f81

08003c24 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	b082      	sub	sp, #8
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d101      	bne.n	8003c36 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003c32:	2301      	movs	r3, #1
 8003c34:	e041      	b.n	8003cba <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c3c:	b2db      	uxtb	r3, r3
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d106      	bne.n	8003c50 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	2200      	movs	r2, #0
 8003c46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003c4a:	6878      	ldr	r0, [r7, #4]
 8003c4c:	f7fd fc36 	bl	80014bc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2202      	movs	r2, #2
 8003c54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681a      	ldr	r2, [r3, #0]
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	3304      	adds	r3, #4
 8003c60:	4619      	mov	r1, r3
 8003c62:	4610      	mov	r0, r2
 8003c64:	f000 fdb0 	bl	80047c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2201      	movs	r2, #1
 8003c6c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2201      	movs	r2, #1
 8003c74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2201      	movs	r2, #1
 8003c7c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2201      	movs	r2, #1
 8003c84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2201      	movs	r2, #1
 8003c8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2201      	movs	r2, #1
 8003c94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2201      	movs	r2, #1
 8003c9c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2201      	movs	r2, #1
 8003ca4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2201      	movs	r2, #1
 8003cac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2201      	movs	r2, #1
 8003cb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003cb8:	2300      	movs	r3, #0
}
 8003cba:	4618      	mov	r0, r3
 8003cbc:	3708      	adds	r7, #8
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	bd80      	pop	{r7, pc}
	...

08003cc4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003cc4:	b480      	push	{r7}
 8003cc6:	b085      	sub	sp, #20
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cd2:	b2db      	uxtb	r3, r3
 8003cd4:	2b01      	cmp	r3, #1
 8003cd6:	d001      	beq.n	8003cdc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003cd8:	2301      	movs	r3, #1
 8003cda:	e046      	b.n	8003d6a <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2202      	movs	r2, #2
 8003ce0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	4a23      	ldr	r2, [pc, #140]	; (8003d78 <HAL_TIM_Base_Start+0xb4>)
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d022      	beq.n	8003d34 <HAL_TIM_Base_Start+0x70>
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cf6:	d01d      	beq.n	8003d34 <HAL_TIM_Base_Start+0x70>
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	4a1f      	ldr	r2, [pc, #124]	; (8003d7c <HAL_TIM_Base_Start+0xb8>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d018      	beq.n	8003d34 <HAL_TIM_Base_Start+0x70>
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	4a1e      	ldr	r2, [pc, #120]	; (8003d80 <HAL_TIM_Base_Start+0xbc>)
 8003d08:	4293      	cmp	r3, r2
 8003d0a:	d013      	beq.n	8003d34 <HAL_TIM_Base_Start+0x70>
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	4a1c      	ldr	r2, [pc, #112]	; (8003d84 <HAL_TIM_Base_Start+0xc0>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d00e      	beq.n	8003d34 <HAL_TIM_Base_Start+0x70>
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	4a1b      	ldr	r2, [pc, #108]	; (8003d88 <HAL_TIM_Base_Start+0xc4>)
 8003d1c:	4293      	cmp	r3, r2
 8003d1e:	d009      	beq.n	8003d34 <HAL_TIM_Base_Start+0x70>
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	4a19      	ldr	r2, [pc, #100]	; (8003d8c <HAL_TIM_Base_Start+0xc8>)
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d004      	beq.n	8003d34 <HAL_TIM_Base_Start+0x70>
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	4a18      	ldr	r2, [pc, #96]	; (8003d90 <HAL_TIM_Base_Start+0xcc>)
 8003d30:	4293      	cmp	r3, r2
 8003d32:	d111      	bne.n	8003d58 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	689b      	ldr	r3, [r3, #8]
 8003d3a:	f003 0307 	and.w	r3, r3, #7
 8003d3e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	2b06      	cmp	r3, #6
 8003d44:	d010      	beq.n	8003d68 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	681a      	ldr	r2, [r3, #0]
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f042 0201 	orr.w	r2, r2, #1
 8003d54:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d56:	e007      	b.n	8003d68 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	681a      	ldr	r2, [r3, #0]
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f042 0201 	orr.w	r2, r2, #1
 8003d66:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003d68:	2300      	movs	r3, #0
}
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	3714      	adds	r7, #20
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d74:	4770      	bx	lr
 8003d76:	bf00      	nop
 8003d78:	40010000 	.word	0x40010000
 8003d7c:	40000400 	.word	0x40000400
 8003d80:	40000800 	.word	0x40000800
 8003d84:	40000c00 	.word	0x40000c00
 8003d88:	40010400 	.word	0x40010400
 8003d8c:	40014000 	.word	0x40014000
 8003d90:	40001800 	.word	0x40001800

08003d94 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003d94:	b480      	push	{r7}
 8003d96:	b085      	sub	sp, #20
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003da2:	b2db      	uxtb	r3, r3
 8003da4:	2b01      	cmp	r3, #1
 8003da6:	d001      	beq.n	8003dac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003da8:	2301      	movs	r3, #1
 8003daa:	e04e      	b.n	8003e4a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2202      	movs	r2, #2
 8003db0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	68da      	ldr	r2, [r3, #12]
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f042 0201 	orr.w	r2, r2, #1
 8003dc2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	4a23      	ldr	r2, [pc, #140]	; (8003e58 <HAL_TIM_Base_Start_IT+0xc4>)
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d022      	beq.n	8003e14 <HAL_TIM_Base_Start_IT+0x80>
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003dd6:	d01d      	beq.n	8003e14 <HAL_TIM_Base_Start_IT+0x80>
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	4a1f      	ldr	r2, [pc, #124]	; (8003e5c <HAL_TIM_Base_Start_IT+0xc8>)
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d018      	beq.n	8003e14 <HAL_TIM_Base_Start_IT+0x80>
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	4a1e      	ldr	r2, [pc, #120]	; (8003e60 <HAL_TIM_Base_Start_IT+0xcc>)
 8003de8:	4293      	cmp	r3, r2
 8003dea:	d013      	beq.n	8003e14 <HAL_TIM_Base_Start_IT+0x80>
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4a1c      	ldr	r2, [pc, #112]	; (8003e64 <HAL_TIM_Base_Start_IT+0xd0>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d00e      	beq.n	8003e14 <HAL_TIM_Base_Start_IT+0x80>
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	4a1b      	ldr	r2, [pc, #108]	; (8003e68 <HAL_TIM_Base_Start_IT+0xd4>)
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	d009      	beq.n	8003e14 <HAL_TIM_Base_Start_IT+0x80>
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	4a19      	ldr	r2, [pc, #100]	; (8003e6c <HAL_TIM_Base_Start_IT+0xd8>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d004      	beq.n	8003e14 <HAL_TIM_Base_Start_IT+0x80>
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	4a18      	ldr	r2, [pc, #96]	; (8003e70 <HAL_TIM_Base_Start_IT+0xdc>)
 8003e10:	4293      	cmp	r3, r2
 8003e12:	d111      	bne.n	8003e38 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	689b      	ldr	r3, [r3, #8]
 8003e1a:	f003 0307 	and.w	r3, r3, #7
 8003e1e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	2b06      	cmp	r3, #6
 8003e24:	d010      	beq.n	8003e48 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	681a      	ldr	r2, [r3, #0]
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f042 0201 	orr.w	r2, r2, #1
 8003e34:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e36:	e007      	b.n	8003e48 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	681a      	ldr	r2, [r3, #0]
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f042 0201 	orr.w	r2, r2, #1
 8003e46:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003e48:	2300      	movs	r3, #0
}
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	3714      	adds	r7, #20
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e54:	4770      	bx	lr
 8003e56:	bf00      	nop
 8003e58:	40010000 	.word	0x40010000
 8003e5c:	40000400 	.word	0x40000400
 8003e60:	40000800 	.word	0x40000800
 8003e64:	40000c00 	.word	0x40000c00
 8003e68:	40010400 	.word	0x40010400
 8003e6c:	40014000 	.word	0x40014000
 8003e70:	40001800 	.word	0x40001800

08003e74 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b082      	sub	sp, #8
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d101      	bne.n	8003e86 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8003e82:	2301      	movs	r3, #1
 8003e84:	e041      	b.n	8003f0a <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e8c:	b2db      	uxtb	r3, r3
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d106      	bne.n	8003ea0 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2200      	movs	r2, #0
 8003e96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8003e9a:	6878      	ldr	r0, [r7, #4]
 8003e9c:	f000 f839 	bl	8003f12 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2202      	movs	r2, #2
 8003ea4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681a      	ldr	r2, [r3, #0]
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	3304      	adds	r3, #4
 8003eb0:	4619      	mov	r1, r3
 8003eb2:	4610      	mov	r0, r2
 8003eb4:	f000 fc88 	bl	80047c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2201      	movs	r2, #1
 8003ebc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2201      	movs	r2, #1
 8003ec4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2201      	movs	r2, #1
 8003ecc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2201      	movs	r2, #1
 8003ed4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2201      	movs	r2, #1
 8003edc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2201      	movs	r2, #1
 8003ee4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2201      	movs	r2, #1
 8003eec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2201      	movs	r2, #1
 8003ef4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2201      	movs	r2, #1
 8003efc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2201      	movs	r2, #1
 8003f04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003f08:	2300      	movs	r3, #0
}
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	3708      	adds	r7, #8
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	bd80      	pop	{r7, pc}

08003f12 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8003f12:	b480      	push	{r7}
 8003f14:	b083      	sub	sp, #12
 8003f16:	af00      	add	r7, sp, #0
 8003f18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8003f1a:	bf00      	nop
 8003f1c:	370c      	adds	r7, #12
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f24:	4770      	bx	lr

08003f26 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003f26:	b580      	push	{r7, lr}
 8003f28:	b082      	sub	sp, #8
 8003f2a:	af00      	add	r7, sp, #0
 8003f2c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d101      	bne.n	8003f38 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003f34:	2301      	movs	r3, #1
 8003f36:	e041      	b.n	8003fbc <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f3e:	b2db      	uxtb	r3, r3
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d106      	bne.n	8003f52 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2200      	movs	r2, #0
 8003f48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003f4c:	6878      	ldr	r0, [r7, #4]
 8003f4e:	f000 f839 	bl	8003fc4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	2202      	movs	r2, #2
 8003f56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681a      	ldr	r2, [r3, #0]
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	3304      	adds	r3, #4
 8003f62:	4619      	mov	r1, r3
 8003f64:	4610      	mov	r0, r2
 8003f66:	f000 fc2f 	bl	80047c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2201      	movs	r2, #1
 8003f6e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	2201      	movs	r2, #1
 8003f76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	2201      	movs	r2, #1
 8003f7e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	2201      	movs	r2, #1
 8003f86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	2201      	movs	r2, #1
 8003f8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	2201      	movs	r2, #1
 8003f96:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2201      	movs	r2, #1
 8003f9e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	2201      	movs	r2, #1
 8003fa6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	2201      	movs	r2, #1
 8003fae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	2201      	movs	r2, #1
 8003fb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003fba:	2300      	movs	r3, #0
}
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	3708      	adds	r7, #8
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	bd80      	pop	{r7, pc}

08003fc4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003fc4:	b480      	push	{r7}
 8003fc6:	b083      	sub	sp, #12
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003fcc:	bf00      	nop
 8003fce:	370c      	adds	r7, #12
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd6:	4770      	bx	lr

08003fd8 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b082      	sub	sp, #8
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d101      	bne.n	8003fea <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	e041      	b.n	800406e <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ff0:	b2db      	uxtb	r3, r3
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d106      	bne.n	8004004 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8003ffe:	6878      	ldr	r0, [r7, #4]
 8004000:	f000 f839 	bl	8004076 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2202      	movs	r2, #2
 8004008:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681a      	ldr	r2, [r3, #0]
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	3304      	adds	r3, #4
 8004014:	4619      	mov	r1, r3
 8004016:	4610      	mov	r0, r2
 8004018:	f000 fbd6 	bl	80047c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2201      	movs	r2, #1
 8004020:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2201      	movs	r2, #1
 8004028:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2201      	movs	r2, #1
 8004030:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2201      	movs	r2, #1
 8004038:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2201      	movs	r2, #1
 8004040:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2201      	movs	r2, #1
 8004048:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2201      	movs	r2, #1
 8004050:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2201      	movs	r2, #1
 8004058:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2201      	movs	r2, #1
 8004060:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2201      	movs	r2, #1
 8004068:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800406c:	2300      	movs	r3, #0
}
 800406e:	4618      	mov	r0, r3
 8004070:	3708      	adds	r7, #8
 8004072:	46bd      	mov	sp, r7
 8004074:	bd80      	pop	{r7, pc}

08004076 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8004076:	b480      	push	{r7}
 8004078:	b083      	sub	sp, #12
 800407a:	af00      	add	r7, sp, #0
 800407c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800407e:	bf00      	nop
 8004080:	370c      	adds	r7, #12
 8004082:	46bd      	mov	sp, r7
 8004084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004088:	4770      	bx	lr

0800408a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800408a:	b580      	push	{r7, lr}
 800408c:	b082      	sub	sp, #8
 800408e:	af00      	add	r7, sp, #0
 8004090:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	691b      	ldr	r3, [r3, #16]
 8004098:	f003 0302 	and.w	r3, r3, #2
 800409c:	2b02      	cmp	r3, #2
 800409e:	d122      	bne.n	80040e6 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	68db      	ldr	r3, [r3, #12]
 80040a6:	f003 0302 	and.w	r3, r3, #2
 80040aa:	2b02      	cmp	r3, #2
 80040ac:	d11b      	bne.n	80040e6 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f06f 0202 	mvn.w	r2, #2
 80040b6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2201      	movs	r2, #1
 80040bc:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	699b      	ldr	r3, [r3, #24]
 80040c4:	f003 0303 	and.w	r3, r3, #3
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d003      	beq.n	80040d4 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80040cc:	6878      	ldr	r0, [r7, #4]
 80040ce:	f000 fb5d 	bl	800478c <HAL_TIM_IC_CaptureCallback>
 80040d2:	e005      	b.n	80040e0 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80040d4:	6878      	ldr	r0, [r7, #4]
 80040d6:	f000 fb4f 	bl	8004778 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040da:	6878      	ldr	r0, [r7, #4]
 80040dc:	f000 fb60 	bl	80047a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2200      	movs	r2, #0
 80040e4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	691b      	ldr	r3, [r3, #16]
 80040ec:	f003 0304 	and.w	r3, r3, #4
 80040f0:	2b04      	cmp	r3, #4
 80040f2:	d122      	bne.n	800413a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	68db      	ldr	r3, [r3, #12]
 80040fa:	f003 0304 	and.w	r3, r3, #4
 80040fe:	2b04      	cmp	r3, #4
 8004100:	d11b      	bne.n	800413a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f06f 0204 	mvn.w	r2, #4
 800410a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2202      	movs	r2, #2
 8004110:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	699b      	ldr	r3, [r3, #24]
 8004118:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800411c:	2b00      	cmp	r3, #0
 800411e:	d003      	beq.n	8004128 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004120:	6878      	ldr	r0, [r7, #4]
 8004122:	f000 fb33 	bl	800478c <HAL_TIM_IC_CaptureCallback>
 8004126:	e005      	b.n	8004134 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004128:	6878      	ldr	r0, [r7, #4]
 800412a:	f000 fb25 	bl	8004778 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800412e:	6878      	ldr	r0, [r7, #4]
 8004130:	f000 fb36 	bl	80047a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2200      	movs	r2, #0
 8004138:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	691b      	ldr	r3, [r3, #16]
 8004140:	f003 0308 	and.w	r3, r3, #8
 8004144:	2b08      	cmp	r3, #8
 8004146:	d122      	bne.n	800418e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	68db      	ldr	r3, [r3, #12]
 800414e:	f003 0308 	and.w	r3, r3, #8
 8004152:	2b08      	cmp	r3, #8
 8004154:	d11b      	bne.n	800418e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f06f 0208 	mvn.w	r2, #8
 800415e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2204      	movs	r2, #4
 8004164:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	69db      	ldr	r3, [r3, #28]
 800416c:	f003 0303 	and.w	r3, r3, #3
 8004170:	2b00      	cmp	r3, #0
 8004172:	d003      	beq.n	800417c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004174:	6878      	ldr	r0, [r7, #4]
 8004176:	f000 fb09 	bl	800478c <HAL_TIM_IC_CaptureCallback>
 800417a:	e005      	b.n	8004188 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800417c:	6878      	ldr	r0, [r7, #4]
 800417e:	f000 fafb 	bl	8004778 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004182:	6878      	ldr	r0, [r7, #4]
 8004184:	f000 fb0c 	bl	80047a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2200      	movs	r2, #0
 800418c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	691b      	ldr	r3, [r3, #16]
 8004194:	f003 0310 	and.w	r3, r3, #16
 8004198:	2b10      	cmp	r3, #16
 800419a:	d122      	bne.n	80041e2 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	68db      	ldr	r3, [r3, #12]
 80041a2:	f003 0310 	and.w	r3, r3, #16
 80041a6:	2b10      	cmp	r3, #16
 80041a8:	d11b      	bne.n	80041e2 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f06f 0210 	mvn.w	r2, #16
 80041b2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2208      	movs	r2, #8
 80041b8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	69db      	ldr	r3, [r3, #28]
 80041c0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d003      	beq.n	80041d0 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80041c8:	6878      	ldr	r0, [r7, #4]
 80041ca:	f000 fadf 	bl	800478c <HAL_TIM_IC_CaptureCallback>
 80041ce:	e005      	b.n	80041dc <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80041d0:	6878      	ldr	r0, [r7, #4]
 80041d2:	f000 fad1 	bl	8004778 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041d6:	6878      	ldr	r0, [r7, #4]
 80041d8:	f000 fae2 	bl	80047a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2200      	movs	r2, #0
 80041e0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	691b      	ldr	r3, [r3, #16]
 80041e8:	f003 0301 	and.w	r3, r3, #1
 80041ec:	2b01      	cmp	r3, #1
 80041ee:	d10e      	bne.n	800420e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	68db      	ldr	r3, [r3, #12]
 80041f6:	f003 0301 	and.w	r3, r3, #1
 80041fa:	2b01      	cmp	r3, #1
 80041fc:	d107      	bne.n	800420e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f06f 0201 	mvn.w	r2, #1
 8004206:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004208:	6878      	ldr	r0, [r7, #4]
 800420a:	f7fd f823 	bl	8001254 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	691b      	ldr	r3, [r3, #16]
 8004214:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004218:	2b80      	cmp	r3, #128	; 0x80
 800421a:	d10e      	bne.n	800423a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	68db      	ldr	r3, [r3, #12]
 8004222:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004226:	2b80      	cmp	r3, #128	; 0x80
 8004228:	d107      	bne.n	800423a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004232:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004234:	6878      	ldr	r0, [r7, #4]
 8004236:	f000 ffb3 	bl	80051a0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	691b      	ldr	r3, [r3, #16]
 8004240:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004244:	2b40      	cmp	r3, #64	; 0x40
 8004246:	d10e      	bne.n	8004266 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	68db      	ldr	r3, [r3, #12]
 800424e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004252:	2b40      	cmp	r3, #64	; 0x40
 8004254:	d107      	bne.n	8004266 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800425e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004260:	6878      	ldr	r0, [r7, #4]
 8004262:	f000 faa7 	bl	80047b4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	691b      	ldr	r3, [r3, #16]
 800426c:	f003 0320 	and.w	r3, r3, #32
 8004270:	2b20      	cmp	r3, #32
 8004272:	d10e      	bne.n	8004292 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	68db      	ldr	r3, [r3, #12]
 800427a:	f003 0320 	and.w	r3, r3, #32
 800427e:	2b20      	cmp	r3, #32
 8004280:	d107      	bne.n	8004292 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f06f 0220 	mvn.w	r2, #32
 800428a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800428c:	6878      	ldr	r0, [r7, #4]
 800428e:	f000 ff7d 	bl	800518c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004292:	bf00      	nop
 8004294:	3708      	adds	r7, #8
 8004296:	46bd      	mov	sp, r7
 8004298:	bd80      	pop	{r7, pc}
	...

0800429c <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800429c:	b580      	push	{r7, lr}
 800429e:	b084      	sub	sp, #16
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	60f8      	str	r0, [r7, #12]
 80042a4:	60b9      	str	r1, [r7, #8]
 80042a6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042ae:	2b01      	cmp	r3, #1
 80042b0:	d101      	bne.n	80042b6 <HAL_TIM_OC_ConfigChannel+0x1a>
 80042b2:	2302      	movs	r3, #2
 80042b4:	e046      	b.n	8004344 <HAL_TIM_OC_ConfigChannel+0xa8>
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	2201      	movs	r2, #1
 80042ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	2b0c      	cmp	r3, #12
 80042c2:	d839      	bhi.n	8004338 <HAL_TIM_OC_ConfigChannel+0x9c>
 80042c4:	a201      	add	r2, pc, #4	; (adr r2, 80042cc <HAL_TIM_OC_ConfigChannel+0x30>)
 80042c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042ca:	bf00      	nop
 80042cc:	08004301 	.word	0x08004301
 80042d0:	08004339 	.word	0x08004339
 80042d4:	08004339 	.word	0x08004339
 80042d8:	08004339 	.word	0x08004339
 80042dc:	0800430f 	.word	0x0800430f
 80042e0:	08004339 	.word	0x08004339
 80042e4:	08004339 	.word	0x08004339
 80042e8:	08004339 	.word	0x08004339
 80042ec:	0800431d 	.word	0x0800431d
 80042f0:	08004339 	.word	0x08004339
 80042f4:	08004339 	.word	0x08004339
 80042f8:	08004339 	.word	0x08004339
 80042fc:	0800432b 	.word	0x0800432b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	68b9      	ldr	r1, [r7, #8]
 8004306:	4618      	mov	r0, r3
 8004308:	f000 fafe 	bl	8004908 <TIM_OC1_SetConfig>
      break;
 800430c:	e015      	b.n	800433a <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	68b9      	ldr	r1, [r7, #8]
 8004314:	4618      	mov	r0, r3
 8004316:	f000 fb67 	bl	80049e8 <TIM_OC2_SetConfig>
      break;
 800431a:	e00e      	b.n	800433a <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	68b9      	ldr	r1, [r7, #8]
 8004322:	4618      	mov	r0, r3
 8004324:	f000 fbd6 	bl	8004ad4 <TIM_OC3_SetConfig>
      break;
 8004328:	e007      	b.n	800433a <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	68b9      	ldr	r1, [r7, #8]
 8004330:	4618      	mov	r0, r3
 8004332:	f000 fc43 	bl	8004bbc <TIM_OC4_SetConfig>
      break;
 8004336:	e000      	b.n	800433a <HAL_TIM_OC_ConfigChannel+0x9e>
    }

    default:
      break;
 8004338:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	2200      	movs	r2, #0
 800433e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004342:	2300      	movs	r3, #0
}
 8004344:	4618      	mov	r0, r3
 8004346:	3710      	adds	r7, #16
 8004348:	46bd      	mov	sp, r7
 800434a:	bd80      	pop	{r7, pc}

0800434c <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800434c:	b580      	push	{r7, lr}
 800434e:	b084      	sub	sp, #16
 8004350:	af00      	add	r7, sp, #0
 8004352:	60f8      	str	r0, [r7, #12]
 8004354:	60b9      	str	r1, [r7, #8]
 8004356:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800435e:	2b01      	cmp	r3, #1
 8004360:	d101      	bne.n	8004366 <HAL_TIM_IC_ConfigChannel+0x1a>
 8004362:	2302      	movs	r3, #2
 8004364:	e082      	b.n	800446c <HAL_TIM_IC_ConfigChannel+0x120>
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	2201      	movs	r2, #1
 800436a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	2b00      	cmp	r3, #0
 8004372:	d11b      	bne.n	80043ac <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	6818      	ldr	r0, [r3, #0]
 8004378:	68bb      	ldr	r3, [r7, #8]
 800437a:	6819      	ldr	r1, [r3, #0]
 800437c:	68bb      	ldr	r3, [r7, #8]
 800437e:	685a      	ldr	r2, [r3, #4]
 8004380:	68bb      	ldr	r3, [r7, #8]
 8004382:	68db      	ldr	r3, [r3, #12]
 8004384:	f000 fc70 	bl	8004c68 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	699a      	ldr	r2, [r3, #24]
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f022 020c 	bic.w	r2, r2, #12
 8004396:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	6999      	ldr	r1, [r3, #24]
 800439e:	68bb      	ldr	r3, [r7, #8]
 80043a0:	689a      	ldr	r2, [r3, #8]
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	430a      	orrs	r2, r1
 80043a8:	619a      	str	r2, [r3, #24]
 80043aa:	e05a      	b.n	8004462 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2b04      	cmp	r3, #4
 80043b0:	d11c      	bne.n	80043ec <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	6818      	ldr	r0, [r3, #0]
 80043b6:	68bb      	ldr	r3, [r7, #8]
 80043b8:	6819      	ldr	r1, [r3, #0]
 80043ba:	68bb      	ldr	r3, [r7, #8]
 80043bc:	685a      	ldr	r2, [r3, #4]
 80043be:	68bb      	ldr	r3, [r7, #8]
 80043c0:	68db      	ldr	r3, [r3, #12]
 80043c2:	f000 fcf4 	bl	8004dae <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	699a      	ldr	r2, [r3, #24]
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80043d4:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	6999      	ldr	r1, [r3, #24]
 80043dc:	68bb      	ldr	r3, [r7, #8]
 80043de:	689b      	ldr	r3, [r3, #8]
 80043e0:	021a      	lsls	r2, r3, #8
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	430a      	orrs	r2, r1
 80043e8:	619a      	str	r2, [r3, #24]
 80043ea:	e03a      	b.n	8004462 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2b08      	cmp	r3, #8
 80043f0:	d11b      	bne.n	800442a <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	6818      	ldr	r0, [r3, #0]
 80043f6:	68bb      	ldr	r3, [r7, #8]
 80043f8:	6819      	ldr	r1, [r3, #0]
 80043fa:	68bb      	ldr	r3, [r7, #8]
 80043fc:	685a      	ldr	r2, [r3, #4]
 80043fe:	68bb      	ldr	r3, [r7, #8]
 8004400:	68db      	ldr	r3, [r3, #12]
 8004402:	f000 fd41 	bl	8004e88 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	69da      	ldr	r2, [r3, #28]
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f022 020c 	bic.w	r2, r2, #12
 8004414:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	69d9      	ldr	r1, [r3, #28]
 800441c:	68bb      	ldr	r3, [r7, #8]
 800441e:	689a      	ldr	r2, [r3, #8]
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	430a      	orrs	r2, r1
 8004426:	61da      	str	r2, [r3, #28]
 8004428:	e01b      	b.n	8004462 <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	6818      	ldr	r0, [r3, #0]
 800442e:	68bb      	ldr	r3, [r7, #8]
 8004430:	6819      	ldr	r1, [r3, #0]
 8004432:	68bb      	ldr	r3, [r7, #8]
 8004434:	685a      	ldr	r2, [r3, #4]
 8004436:	68bb      	ldr	r3, [r7, #8]
 8004438:	68db      	ldr	r3, [r3, #12]
 800443a:	f000 fd61 	bl	8004f00 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	69da      	ldr	r2, [r3, #28]
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800444c:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	69d9      	ldr	r1, [r3, #28]
 8004454:	68bb      	ldr	r3, [r7, #8]
 8004456:	689b      	ldr	r3, [r3, #8]
 8004458:	021a      	lsls	r2, r3, #8
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	430a      	orrs	r2, r1
 8004460:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	2200      	movs	r2, #0
 8004466:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800446a:	2300      	movs	r3, #0
}
 800446c:	4618      	mov	r0, r3
 800446e:	3710      	adds	r7, #16
 8004470:	46bd      	mov	sp, r7
 8004472:	bd80      	pop	{r7, pc}

08004474 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004474:	b580      	push	{r7, lr}
 8004476:	b084      	sub	sp, #16
 8004478:	af00      	add	r7, sp, #0
 800447a:	60f8      	str	r0, [r7, #12]
 800447c:	60b9      	str	r1, [r7, #8]
 800447e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004486:	2b01      	cmp	r3, #1
 8004488:	d101      	bne.n	800448e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800448a:	2302      	movs	r3, #2
 800448c:	e0ac      	b.n	80045e8 <HAL_TIM_PWM_ConfigChannel+0x174>
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	2201      	movs	r2, #1
 8004492:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2b0c      	cmp	r3, #12
 800449a:	f200 809f 	bhi.w	80045dc <HAL_TIM_PWM_ConfigChannel+0x168>
 800449e:	a201      	add	r2, pc, #4	; (adr r2, 80044a4 <HAL_TIM_PWM_ConfigChannel+0x30>)
 80044a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044a4:	080044d9 	.word	0x080044d9
 80044a8:	080045dd 	.word	0x080045dd
 80044ac:	080045dd 	.word	0x080045dd
 80044b0:	080045dd 	.word	0x080045dd
 80044b4:	08004519 	.word	0x08004519
 80044b8:	080045dd 	.word	0x080045dd
 80044bc:	080045dd 	.word	0x080045dd
 80044c0:	080045dd 	.word	0x080045dd
 80044c4:	0800455b 	.word	0x0800455b
 80044c8:	080045dd 	.word	0x080045dd
 80044cc:	080045dd 	.word	0x080045dd
 80044d0:	080045dd 	.word	0x080045dd
 80044d4:	0800459b 	.word	0x0800459b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	68b9      	ldr	r1, [r7, #8]
 80044de:	4618      	mov	r0, r3
 80044e0:	f000 fa12 	bl	8004908 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	699a      	ldr	r2, [r3, #24]
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f042 0208 	orr.w	r2, r2, #8
 80044f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	699a      	ldr	r2, [r3, #24]
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f022 0204 	bic.w	r2, r2, #4
 8004502:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	6999      	ldr	r1, [r3, #24]
 800450a:	68bb      	ldr	r3, [r7, #8]
 800450c:	691a      	ldr	r2, [r3, #16]
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	430a      	orrs	r2, r1
 8004514:	619a      	str	r2, [r3, #24]
      break;
 8004516:	e062      	b.n	80045de <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	68b9      	ldr	r1, [r7, #8]
 800451e:	4618      	mov	r0, r3
 8004520:	f000 fa62 	bl	80049e8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	699a      	ldr	r2, [r3, #24]
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004532:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	699a      	ldr	r2, [r3, #24]
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004542:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	6999      	ldr	r1, [r3, #24]
 800454a:	68bb      	ldr	r3, [r7, #8]
 800454c:	691b      	ldr	r3, [r3, #16]
 800454e:	021a      	lsls	r2, r3, #8
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	430a      	orrs	r2, r1
 8004556:	619a      	str	r2, [r3, #24]
      break;
 8004558:	e041      	b.n	80045de <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	68b9      	ldr	r1, [r7, #8]
 8004560:	4618      	mov	r0, r3
 8004562:	f000 fab7 	bl	8004ad4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	69da      	ldr	r2, [r3, #28]
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f042 0208 	orr.w	r2, r2, #8
 8004574:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	69da      	ldr	r2, [r3, #28]
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f022 0204 	bic.w	r2, r2, #4
 8004584:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	69d9      	ldr	r1, [r3, #28]
 800458c:	68bb      	ldr	r3, [r7, #8]
 800458e:	691a      	ldr	r2, [r3, #16]
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	430a      	orrs	r2, r1
 8004596:	61da      	str	r2, [r3, #28]
      break;
 8004598:	e021      	b.n	80045de <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	68b9      	ldr	r1, [r7, #8]
 80045a0:	4618      	mov	r0, r3
 80045a2:	f000 fb0b 	bl	8004bbc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	69da      	ldr	r2, [r3, #28]
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80045b4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	69da      	ldr	r2, [r3, #28]
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80045c4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	69d9      	ldr	r1, [r3, #28]
 80045cc:	68bb      	ldr	r3, [r7, #8]
 80045ce:	691b      	ldr	r3, [r3, #16]
 80045d0:	021a      	lsls	r2, r3, #8
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	430a      	orrs	r2, r1
 80045d8:	61da      	str	r2, [r3, #28]
      break;
 80045da:	e000      	b.n	80045de <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 80045dc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	2200      	movs	r2, #0
 80045e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80045e6:	2300      	movs	r3, #0
}
 80045e8:	4618      	mov	r0, r3
 80045ea:	3710      	adds	r7, #16
 80045ec:	46bd      	mov	sp, r7
 80045ee:	bd80      	pop	{r7, pc}

080045f0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80045f0:	b580      	push	{r7, lr}
 80045f2:	b084      	sub	sp, #16
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
 80045f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004600:	2b01      	cmp	r3, #1
 8004602:	d101      	bne.n	8004608 <HAL_TIM_ConfigClockSource+0x18>
 8004604:	2302      	movs	r3, #2
 8004606:	e0b3      	b.n	8004770 <HAL_TIM_ConfigClockSource+0x180>
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2201      	movs	r2, #1
 800460c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2202      	movs	r2, #2
 8004614:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	689b      	ldr	r3, [r3, #8]
 800461e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004626:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800462e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	68fa      	ldr	r2, [r7, #12]
 8004636:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004640:	d03e      	beq.n	80046c0 <HAL_TIM_ConfigClockSource+0xd0>
 8004642:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004646:	f200 8087 	bhi.w	8004758 <HAL_TIM_ConfigClockSource+0x168>
 800464a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800464e:	f000 8085 	beq.w	800475c <HAL_TIM_ConfigClockSource+0x16c>
 8004652:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004656:	d87f      	bhi.n	8004758 <HAL_TIM_ConfigClockSource+0x168>
 8004658:	2b70      	cmp	r3, #112	; 0x70
 800465a:	d01a      	beq.n	8004692 <HAL_TIM_ConfigClockSource+0xa2>
 800465c:	2b70      	cmp	r3, #112	; 0x70
 800465e:	d87b      	bhi.n	8004758 <HAL_TIM_ConfigClockSource+0x168>
 8004660:	2b60      	cmp	r3, #96	; 0x60
 8004662:	d050      	beq.n	8004706 <HAL_TIM_ConfigClockSource+0x116>
 8004664:	2b60      	cmp	r3, #96	; 0x60
 8004666:	d877      	bhi.n	8004758 <HAL_TIM_ConfigClockSource+0x168>
 8004668:	2b50      	cmp	r3, #80	; 0x50
 800466a:	d03c      	beq.n	80046e6 <HAL_TIM_ConfigClockSource+0xf6>
 800466c:	2b50      	cmp	r3, #80	; 0x50
 800466e:	d873      	bhi.n	8004758 <HAL_TIM_ConfigClockSource+0x168>
 8004670:	2b40      	cmp	r3, #64	; 0x40
 8004672:	d058      	beq.n	8004726 <HAL_TIM_ConfigClockSource+0x136>
 8004674:	2b40      	cmp	r3, #64	; 0x40
 8004676:	d86f      	bhi.n	8004758 <HAL_TIM_ConfigClockSource+0x168>
 8004678:	2b30      	cmp	r3, #48	; 0x30
 800467a:	d064      	beq.n	8004746 <HAL_TIM_ConfigClockSource+0x156>
 800467c:	2b30      	cmp	r3, #48	; 0x30
 800467e:	d86b      	bhi.n	8004758 <HAL_TIM_ConfigClockSource+0x168>
 8004680:	2b20      	cmp	r3, #32
 8004682:	d060      	beq.n	8004746 <HAL_TIM_ConfigClockSource+0x156>
 8004684:	2b20      	cmp	r3, #32
 8004686:	d867      	bhi.n	8004758 <HAL_TIM_ConfigClockSource+0x168>
 8004688:	2b00      	cmp	r3, #0
 800468a:	d05c      	beq.n	8004746 <HAL_TIM_ConfigClockSource+0x156>
 800468c:	2b10      	cmp	r3, #16
 800468e:	d05a      	beq.n	8004746 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004690:	e062      	b.n	8004758 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6818      	ldr	r0, [r3, #0]
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	6899      	ldr	r1, [r3, #8]
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	685a      	ldr	r2, [r3, #4]
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	68db      	ldr	r3, [r3, #12]
 80046a2:	f000 fc85 	bl	8004fb0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	689b      	ldr	r3, [r3, #8]
 80046ac:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80046b4:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	68fa      	ldr	r2, [r7, #12]
 80046bc:	609a      	str	r2, [r3, #8]
      break;
 80046be:	e04e      	b.n	800475e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	6818      	ldr	r0, [r3, #0]
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	6899      	ldr	r1, [r3, #8]
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	685a      	ldr	r2, [r3, #4]
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	68db      	ldr	r3, [r3, #12]
 80046d0:	f000 fc6e 	bl	8004fb0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	689a      	ldr	r2, [r3, #8]
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80046e2:	609a      	str	r2, [r3, #8]
      break;
 80046e4:	e03b      	b.n	800475e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6818      	ldr	r0, [r3, #0]
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	6859      	ldr	r1, [r3, #4]
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	68db      	ldr	r3, [r3, #12]
 80046f2:	461a      	mov	r2, r3
 80046f4:	f000 fb2c 	bl	8004d50 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	2150      	movs	r1, #80	; 0x50
 80046fe:	4618      	mov	r0, r3
 8004700:	f000 fc3b 	bl	8004f7a <TIM_ITRx_SetConfig>
      break;
 8004704:	e02b      	b.n	800475e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6818      	ldr	r0, [r3, #0]
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	6859      	ldr	r1, [r3, #4]
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	68db      	ldr	r3, [r3, #12]
 8004712:	461a      	mov	r2, r3
 8004714:	f000 fb88 	bl	8004e28 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	2160      	movs	r1, #96	; 0x60
 800471e:	4618      	mov	r0, r3
 8004720:	f000 fc2b 	bl	8004f7a <TIM_ITRx_SetConfig>
      break;
 8004724:	e01b      	b.n	800475e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6818      	ldr	r0, [r3, #0]
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	6859      	ldr	r1, [r3, #4]
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	68db      	ldr	r3, [r3, #12]
 8004732:	461a      	mov	r2, r3
 8004734:	f000 fb0c 	bl	8004d50 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	2140      	movs	r1, #64	; 0x40
 800473e:	4618      	mov	r0, r3
 8004740:	f000 fc1b 	bl	8004f7a <TIM_ITRx_SetConfig>
      break;
 8004744:	e00b      	b.n	800475e <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681a      	ldr	r2, [r3, #0]
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	4619      	mov	r1, r3
 8004750:	4610      	mov	r0, r2
 8004752:	f000 fc12 	bl	8004f7a <TIM_ITRx_SetConfig>
        break;
 8004756:	e002      	b.n	800475e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004758:	bf00      	nop
 800475a:	e000      	b.n	800475e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800475c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	2201      	movs	r2, #1
 8004762:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	2200      	movs	r2, #0
 800476a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800476e:	2300      	movs	r3, #0
}
 8004770:	4618      	mov	r0, r3
 8004772:	3710      	adds	r7, #16
 8004774:	46bd      	mov	sp, r7
 8004776:	bd80      	pop	{r7, pc}

08004778 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004778:	b480      	push	{r7}
 800477a:	b083      	sub	sp, #12
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004780:	bf00      	nop
 8004782:	370c      	adds	r7, #12
 8004784:	46bd      	mov	sp, r7
 8004786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478a:	4770      	bx	lr

0800478c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800478c:	b480      	push	{r7}
 800478e:	b083      	sub	sp, #12
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004794:	bf00      	nop
 8004796:	370c      	adds	r7, #12
 8004798:	46bd      	mov	sp, r7
 800479a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479e:	4770      	bx	lr

080047a0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80047a0:	b480      	push	{r7}
 80047a2:	b083      	sub	sp, #12
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80047a8:	bf00      	nop
 80047aa:	370c      	adds	r7, #12
 80047ac:	46bd      	mov	sp, r7
 80047ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b2:	4770      	bx	lr

080047b4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80047b4:	b480      	push	{r7}
 80047b6:	b083      	sub	sp, #12
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80047bc:	bf00      	nop
 80047be:	370c      	adds	r7, #12
 80047c0:	46bd      	mov	sp, r7
 80047c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c6:	4770      	bx	lr

080047c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80047c8:	b480      	push	{r7}
 80047ca:	b085      	sub	sp, #20
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]
 80047d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	4a40      	ldr	r2, [pc, #256]	; (80048dc <TIM_Base_SetConfig+0x114>)
 80047dc:	4293      	cmp	r3, r2
 80047de:	d013      	beq.n	8004808 <TIM_Base_SetConfig+0x40>
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047e6:	d00f      	beq.n	8004808 <TIM_Base_SetConfig+0x40>
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	4a3d      	ldr	r2, [pc, #244]	; (80048e0 <TIM_Base_SetConfig+0x118>)
 80047ec:	4293      	cmp	r3, r2
 80047ee:	d00b      	beq.n	8004808 <TIM_Base_SetConfig+0x40>
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	4a3c      	ldr	r2, [pc, #240]	; (80048e4 <TIM_Base_SetConfig+0x11c>)
 80047f4:	4293      	cmp	r3, r2
 80047f6:	d007      	beq.n	8004808 <TIM_Base_SetConfig+0x40>
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	4a3b      	ldr	r2, [pc, #236]	; (80048e8 <TIM_Base_SetConfig+0x120>)
 80047fc:	4293      	cmp	r3, r2
 80047fe:	d003      	beq.n	8004808 <TIM_Base_SetConfig+0x40>
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	4a3a      	ldr	r2, [pc, #232]	; (80048ec <TIM_Base_SetConfig+0x124>)
 8004804:	4293      	cmp	r3, r2
 8004806:	d108      	bne.n	800481a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800480e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	685b      	ldr	r3, [r3, #4]
 8004814:	68fa      	ldr	r2, [r7, #12]
 8004816:	4313      	orrs	r3, r2
 8004818:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	4a2f      	ldr	r2, [pc, #188]	; (80048dc <TIM_Base_SetConfig+0x114>)
 800481e:	4293      	cmp	r3, r2
 8004820:	d02b      	beq.n	800487a <TIM_Base_SetConfig+0xb2>
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004828:	d027      	beq.n	800487a <TIM_Base_SetConfig+0xb2>
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	4a2c      	ldr	r2, [pc, #176]	; (80048e0 <TIM_Base_SetConfig+0x118>)
 800482e:	4293      	cmp	r3, r2
 8004830:	d023      	beq.n	800487a <TIM_Base_SetConfig+0xb2>
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	4a2b      	ldr	r2, [pc, #172]	; (80048e4 <TIM_Base_SetConfig+0x11c>)
 8004836:	4293      	cmp	r3, r2
 8004838:	d01f      	beq.n	800487a <TIM_Base_SetConfig+0xb2>
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	4a2a      	ldr	r2, [pc, #168]	; (80048e8 <TIM_Base_SetConfig+0x120>)
 800483e:	4293      	cmp	r3, r2
 8004840:	d01b      	beq.n	800487a <TIM_Base_SetConfig+0xb2>
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	4a29      	ldr	r2, [pc, #164]	; (80048ec <TIM_Base_SetConfig+0x124>)
 8004846:	4293      	cmp	r3, r2
 8004848:	d017      	beq.n	800487a <TIM_Base_SetConfig+0xb2>
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	4a28      	ldr	r2, [pc, #160]	; (80048f0 <TIM_Base_SetConfig+0x128>)
 800484e:	4293      	cmp	r3, r2
 8004850:	d013      	beq.n	800487a <TIM_Base_SetConfig+0xb2>
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	4a27      	ldr	r2, [pc, #156]	; (80048f4 <TIM_Base_SetConfig+0x12c>)
 8004856:	4293      	cmp	r3, r2
 8004858:	d00f      	beq.n	800487a <TIM_Base_SetConfig+0xb2>
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	4a26      	ldr	r2, [pc, #152]	; (80048f8 <TIM_Base_SetConfig+0x130>)
 800485e:	4293      	cmp	r3, r2
 8004860:	d00b      	beq.n	800487a <TIM_Base_SetConfig+0xb2>
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	4a25      	ldr	r2, [pc, #148]	; (80048fc <TIM_Base_SetConfig+0x134>)
 8004866:	4293      	cmp	r3, r2
 8004868:	d007      	beq.n	800487a <TIM_Base_SetConfig+0xb2>
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	4a24      	ldr	r2, [pc, #144]	; (8004900 <TIM_Base_SetConfig+0x138>)
 800486e:	4293      	cmp	r3, r2
 8004870:	d003      	beq.n	800487a <TIM_Base_SetConfig+0xb2>
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	4a23      	ldr	r2, [pc, #140]	; (8004904 <TIM_Base_SetConfig+0x13c>)
 8004876:	4293      	cmp	r3, r2
 8004878:	d108      	bne.n	800488c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004880:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004882:	683b      	ldr	r3, [r7, #0]
 8004884:	68db      	ldr	r3, [r3, #12]
 8004886:	68fa      	ldr	r2, [r7, #12]
 8004888:	4313      	orrs	r3, r2
 800488a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004892:	683b      	ldr	r3, [r7, #0]
 8004894:	695b      	ldr	r3, [r3, #20]
 8004896:	4313      	orrs	r3, r2
 8004898:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	68fa      	ldr	r2, [r7, #12]
 800489e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	689a      	ldr	r2, [r3, #8]
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	681a      	ldr	r2, [r3, #0]
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	4a0a      	ldr	r2, [pc, #40]	; (80048dc <TIM_Base_SetConfig+0x114>)
 80048b4:	4293      	cmp	r3, r2
 80048b6:	d003      	beq.n	80048c0 <TIM_Base_SetConfig+0xf8>
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	4a0c      	ldr	r2, [pc, #48]	; (80048ec <TIM_Base_SetConfig+0x124>)
 80048bc:	4293      	cmp	r3, r2
 80048be:	d103      	bne.n	80048c8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	691a      	ldr	r2, [r3, #16]
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2201      	movs	r2, #1
 80048cc:	615a      	str	r2, [r3, #20]
}
 80048ce:	bf00      	nop
 80048d0:	3714      	adds	r7, #20
 80048d2:	46bd      	mov	sp, r7
 80048d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d8:	4770      	bx	lr
 80048da:	bf00      	nop
 80048dc:	40010000 	.word	0x40010000
 80048e0:	40000400 	.word	0x40000400
 80048e4:	40000800 	.word	0x40000800
 80048e8:	40000c00 	.word	0x40000c00
 80048ec:	40010400 	.word	0x40010400
 80048f0:	40014000 	.word	0x40014000
 80048f4:	40014400 	.word	0x40014400
 80048f8:	40014800 	.word	0x40014800
 80048fc:	40001800 	.word	0x40001800
 8004900:	40001c00 	.word	0x40001c00
 8004904:	40002000 	.word	0x40002000

08004908 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004908:	b480      	push	{r7}
 800490a:	b087      	sub	sp, #28
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
 8004910:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6a1b      	ldr	r3, [r3, #32]
 8004916:	f023 0201 	bic.w	r2, r3, #1
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6a1b      	ldr	r3, [r3, #32]
 8004922:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	685b      	ldr	r3, [r3, #4]
 8004928:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	699b      	ldr	r3, [r3, #24]
 800492e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004936:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	f023 0303 	bic.w	r3, r3, #3
 800493e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	68fa      	ldr	r2, [r7, #12]
 8004946:	4313      	orrs	r3, r2
 8004948:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800494a:	697b      	ldr	r3, [r7, #20]
 800494c:	f023 0302 	bic.w	r3, r3, #2
 8004950:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004952:	683b      	ldr	r3, [r7, #0]
 8004954:	689b      	ldr	r3, [r3, #8]
 8004956:	697a      	ldr	r2, [r7, #20]
 8004958:	4313      	orrs	r3, r2
 800495a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	4a20      	ldr	r2, [pc, #128]	; (80049e0 <TIM_OC1_SetConfig+0xd8>)
 8004960:	4293      	cmp	r3, r2
 8004962:	d003      	beq.n	800496c <TIM_OC1_SetConfig+0x64>
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	4a1f      	ldr	r2, [pc, #124]	; (80049e4 <TIM_OC1_SetConfig+0xdc>)
 8004968:	4293      	cmp	r3, r2
 800496a:	d10c      	bne.n	8004986 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800496c:	697b      	ldr	r3, [r7, #20]
 800496e:	f023 0308 	bic.w	r3, r3, #8
 8004972:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	68db      	ldr	r3, [r3, #12]
 8004978:	697a      	ldr	r2, [r7, #20]
 800497a:	4313      	orrs	r3, r2
 800497c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800497e:	697b      	ldr	r3, [r7, #20]
 8004980:	f023 0304 	bic.w	r3, r3, #4
 8004984:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	4a15      	ldr	r2, [pc, #84]	; (80049e0 <TIM_OC1_SetConfig+0xd8>)
 800498a:	4293      	cmp	r3, r2
 800498c:	d003      	beq.n	8004996 <TIM_OC1_SetConfig+0x8e>
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	4a14      	ldr	r2, [pc, #80]	; (80049e4 <TIM_OC1_SetConfig+0xdc>)
 8004992:	4293      	cmp	r3, r2
 8004994:	d111      	bne.n	80049ba <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004996:	693b      	ldr	r3, [r7, #16]
 8004998:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800499c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800499e:	693b      	ldr	r3, [r7, #16]
 80049a0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80049a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80049a6:	683b      	ldr	r3, [r7, #0]
 80049a8:	695b      	ldr	r3, [r3, #20]
 80049aa:	693a      	ldr	r2, [r7, #16]
 80049ac:	4313      	orrs	r3, r2
 80049ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80049b0:	683b      	ldr	r3, [r7, #0]
 80049b2:	699b      	ldr	r3, [r3, #24]
 80049b4:	693a      	ldr	r2, [r7, #16]
 80049b6:	4313      	orrs	r3, r2
 80049b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	693a      	ldr	r2, [r7, #16]
 80049be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	68fa      	ldr	r2, [r7, #12]
 80049c4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80049c6:	683b      	ldr	r3, [r7, #0]
 80049c8:	685a      	ldr	r2, [r3, #4]
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	697a      	ldr	r2, [r7, #20]
 80049d2:	621a      	str	r2, [r3, #32]
}
 80049d4:	bf00      	nop
 80049d6:	371c      	adds	r7, #28
 80049d8:	46bd      	mov	sp, r7
 80049da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049de:	4770      	bx	lr
 80049e0:	40010000 	.word	0x40010000
 80049e4:	40010400 	.word	0x40010400

080049e8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80049e8:	b480      	push	{r7}
 80049ea:	b087      	sub	sp, #28
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
 80049f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6a1b      	ldr	r3, [r3, #32]
 80049f6:	f023 0210 	bic.w	r2, r3, #16
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6a1b      	ldr	r3, [r3, #32]
 8004a02:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	685b      	ldr	r3, [r3, #4]
 8004a08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	699b      	ldr	r3, [r3, #24]
 8004a0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a1e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	021b      	lsls	r3, r3, #8
 8004a26:	68fa      	ldr	r2, [r7, #12]
 8004a28:	4313      	orrs	r3, r2
 8004a2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004a2c:	697b      	ldr	r3, [r7, #20]
 8004a2e:	f023 0320 	bic.w	r3, r3, #32
 8004a32:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004a34:	683b      	ldr	r3, [r7, #0]
 8004a36:	689b      	ldr	r3, [r3, #8]
 8004a38:	011b      	lsls	r3, r3, #4
 8004a3a:	697a      	ldr	r2, [r7, #20]
 8004a3c:	4313      	orrs	r3, r2
 8004a3e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	4a22      	ldr	r2, [pc, #136]	; (8004acc <TIM_OC2_SetConfig+0xe4>)
 8004a44:	4293      	cmp	r3, r2
 8004a46:	d003      	beq.n	8004a50 <TIM_OC2_SetConfig+0x68>
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	4a21      	ldr	r2, [pc, #132]	; (8004ad0 <TIM_OC2_SetConfig+0xe8>)
 8004a4c:	4293      	cmp	r3, r2
 8004a4e:	d10d      	bne.n	8004a6c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004a50:	697b      	ldr	r3, [r7, #20]
 8004a52:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004a56:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	68db      	ldr	r3, [r3, #12]
 8004a5c:	011b      	lsls	r3, r3, #4
 8004a5e:	697a      	ldr	r2, [r7, #20]
 8004a60:	4313      	orrs	r3, r2
 8004a62:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004a64:	697b      	ldr	r3, [r7, #20]
 8004a66:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a6a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	4a17      	ldr	r2, [pc, #92]	; (8004acc <TIM_OC2_SetConfig+0xe4>)
 8004a70:	4293      	cmp	r3, r2
 8004a72:	d003      	beq.n	8004a7c <TIM_OC2_SetConfig+0x94>
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	4a16      	ldr	r2, [pc, #88]	; (8004ad0 <TIM_OC2_SetConfig+0xe8>)
 8004a78:	4293      	cmp	r3, r2
 8004a7a:	d113      	bne.n	8004aa4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004a7c:	693b      	ldr	r3, [r7, #16]
 8004a7e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004a82:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004a84:	693b      	ldr	r3, [r7, #16]
 8004a86:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004a8a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	695b      	ldr	r3, [r3, #20]
 8004a90:	009b      	lsls	r3, r3, #2
 8004a92:	693a      	ldr	r2, [r7, #16]
 8004a94:	4313      	orrs	r3, r2
 8004a96:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	699b      	ldr	r3, [r3, #24]
 8004a9c:	009b      	lsls	r3, r3, #2
 8004a9e:	693a      	ldr	r2, [r7, #16]
 8004aa0:	4313      	orrs	r3, r2
 8004aa2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	693a      	ldr	r2, [r7, #16]
 8004aa8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	68fa      	ldr	r2, [r7, #12]
 8004aae:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004ab0:	683b      	ldr	r3, [r7, #0]
 8004ab2:	685a      	ldr	r2, [r3, #4]
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	697a      	ldr	r2, [r7, #20]
 8004abc:	621a      	str	r2, [r3, #32]
}
 8004abe:	bf00      	nop
 8004ac0:	371c      	adds	r7, #28
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac8:	4770      	bx	lr
 8004aca:	bf00      	nop
 8004acc:	40010000 	.word	0x40010000
 8004ad0:	40010400 	.word	0x40010400

08004ad4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004ad4:	b480      	push	{r7}
 8004ad6:	b087      	sub	sp, #28
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
 8004adc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	6a1b      	ldr	r3, [r3, #32]
 8004ae2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	6a1b      	ldr	r3, [r3, #32]
 8004aee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	685b      	ldr	r3, [r3, #4]
 8004af4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	69db      	ldr	r3, [r3, #28]
 8004afa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	f023 0303 	bic.w	r3, r3, #3
 8004b0a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004b0c:	683b      	ldr	r3, [r7, #0]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	68fa      	ldr	r2, [r7, #12]
 8004b12:	4313      	orrs	r3, r2
 8004b14:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004b16:	697b      	ldr	r3, [r7, #20]
 8004b18:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004b1c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004b1e:	683b      	ldr	r3, [r7, #0]
 8004b20:	689b      	ldr	r3, [r3, #8]
 8004b22:	021b      	lsls	r3, r3, #8
 8004b24:	697a      	ldr	r2, [r7, #20]
 8004b26:	4313      	orrs	r3, r2
 8004b28:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	4a21      	ldr	r2, [pc, #132]	; (8004bb4 <TIM_OC3_SetConfig+0xe0>)
 8004b2e:	4293      	cmp	r3, r2
 8004b30:	d003      	beq.n	8004b3a <TIM_OC3_SetConfig+0x66>
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	4a20      	ldr	r2, [pc, #128]	; (8004bb8 <TIM_OC3_SetConfig+0xe4>)
 8004b36:	4293      	cmp	r3, r2
 8004b38:	d10d      	bne.n	8004b56 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004b3a:	697b      	ldr	r3, [r7, #20]
 8004b3c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004b40:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004b42:	683b      	ldr	r3, [r7, #0]
 8004b44:	68db      	ldr	r3, [r3, #12]
 8004b46:	021b      	lsls	r3, r3, #8
 8004b48:	697a      	ldr	r2, [r7, #20]
 8004b4a:	4313      	orrs	r3, r2
 8004b4c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004b4e:	697b      	ldr	r3, [r7, #20]
 8004b50:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004b54:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	4a16      	ldr	r2, [pc, #88]	; (8004bb4 <TIM_OC3_SetConfig+0xe0>)
 8004b5a:	4293      	cmp	r3, r2
 8004b5c:	d003      	beq.n	8004b66 <TIM_OC3_SetConfig+0x92>
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	4a15      	ldr	r2, [pc, #84]	; (8004bb8 <TIM_OC3_SetConfig+0xe4>)
 8004b62:	4293      	cmp	r3, r2
 8004b64:	d113      	bne.n	8004b8e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004b66:	693b      	ldr	r3, [r7, #16]
 8004b68:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004b6c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004b6e:	693b      	ldr	r3, [r7, #16]
 8004b70:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004b74:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	695b      	ldr	r3, [r3, #20]
 8004b7a:	011b      	lsls	r3, r3, #4
 8004b7c:	693a      	ldr	r2, [r7, #16]
 8004b7e:	4313      	orrs	r3, r2
 8004b80:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004b82:	683b      	ldr	r3, [r7, #0]
 8004b84:	699b      	ldr	r3, [r3, #24]
 8004b86:	011b      	lsls	r3, r3, #4
 8004b88:	693a      	ldr	r2, [r7, #16]
 8004b8a:	4313      	orrs	r3, r2
 8004b8c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	693a      	ldr	r2, [r7, #16]
 8004b92:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	68fa      	ldr	r2, [r7, #12]
 8004b98:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	685a      	ldr	r2, [r3, #4]
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	697a      	ldr	r2, [r7, #20]
 8004ba6:	621a      	str	r2, [r3, #32]
}
 8004ba8:	bf00      	nop
 8004baa:	371c      	adds	r7, #28
 8004bac:	46bd      	mov	sp, r7
 8004bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb2:	4770      	bx	lr
 8004bb4:	40010000 	.word	0x40010000
 8004bb8:	40010400 	.word	0x40010400

08004bbc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004bbc:	b480      	push	{r7}
 8004bbe:	b087      	sub	sp, #28
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]
 8004bc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6a1b      	ldr	r3, [r3, #32]
 8004bca:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6a1b      	ldr	r3, [r3, #32]
 8004bd6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	685b      	ldr	r3, [r3, #4]
 8004bdc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	69db      	ldr	r3, [r3, #28]
 8004be2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004bea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004bf2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	021b      	lsls	r3, r3, #8
 8004bfa:	68fa      	ldr	r2, [r7, #12]
 8004bfc:	4313      	orrs	r3, r2
 8004bfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004c00:	693b      	ldr	r3, [r7, #16]
 8004c02:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004c06:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004c08:	683b      	ldr	r3, [r7, #0]
 8004c0a:	689b      	ldr	r3, [r3, #8]
 8004c0c:	031b      	lsls	r3, r3, #12
 8004c0e:	693a      	ldr	r2, [r7, #16]
 8004c10:	4313      	orrs	r3, r2
 8004c12:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	4a12      	ldr	r2, [pc, #72]	; (8004c60 <TIM_OC4_SetConfig+0xa4>)
 8004c18:	4293      	cmp	r3, r2
 8004c1a:	d003      	beq.n	8004c24 <TIM_OC4_SetConfig+0x68>
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	4a11      	ldr	r2, [pc, #68]	; (8004c64 <TIM_OC4_SetConfig+0xa8>)
 8004c20:	4293      	cmp	r3, r2
 8004c22:	d109      	bne.n	8004c38 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004c24:	697b      	ldr	r3, [r7, #20]
 8004c26:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004c2a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	695b      	ldr	r3, [r3, #20]
 8004c30:	019b      	lsls	r3, r3, #6
 8004c32:	697a      	ldr	r2, [r7, #20]
 8004c34:	4313      	orrs	r3, r2
 8004c36:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	697a      	ldr	r2, [r7, #20]
 8004c3c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	68fa      	ldr	r2, [r7, #12]
 8004c42:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	685a      	ldr	r2, [r3, #4]
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	693a      	ldr	r2, [r7, #16]
 8004c50:	621a      	str	r2, [r3, #32]
}
 8004c52:	bf00      	nop
 8004c54:	371c      	adds	r7, #28
 8004c56:	46bd      	mov	sp, r7
 8004c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5c:	4770      	bx	lr
 8004c5e:	bf00      	nop
 8004c60:	40010000 	.word	0x40010000
 8004c64:	40010400 	.word	0x40010400

08004c68 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004c68:	b480      	push	{r7}
 8004c6a:	b087      	sub	sp, #28
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	60f8      	str	r0, [r7, #12]
 8004c70:	60b9      	str	r1, [r7, #8]
 8004c72:	607a      	str	r2, [r7, #4]
 8004c74:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	6a1b      	ldr	r3, [r3, #32]
 8004c7a:	f023 0201 	bic.w	r2, r3, #1
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	699b      	ldr	r3, [r3, #24]
 8004c86:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	6a1b      	ldr	r3, [r3, #32]
 8004c8c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	4a28      	ldr	r2, [pc, #160]	; (8004d34 <TIM_TI1_SetConfig+0xcc>)
 8004c92:	4293      	cmp	r3, r2
 8004c94:	d01b      	beq.n	8004cce <TIM_TI1_SetConfig+0x66>
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c9c:	d017      	beq.n	8004cce <TIM_TI1_SetConfig+0x66>
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	4a25      	ldr	r2, [pc, #148]	; (8004d38 <TIM_TI1_SetConfig+0xd0>)
 8004ca2:	4293      	cmp	r3, r2
 8004ca4:	d013      	beq.n	8004cce <TIM_TI1_SetConfig+0x66>
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	4a24      	ldr	r2, [pc, #144]	; (8004d3c <TIM_TI1_SetConfig+0xd4>)
 8004caa:	4293      	cmp	r3, r2
 8004cac:	d00f      	beq.n	8004cce <TIM_TI1_SetConfig+0x66>
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	4a23      	ldr	r2, [pc, #140]	; (8004d40 <TIM_TI1_SetConfig+0xd8>)
 8004cb2:	4293      	cmp	r3, r2
 8004cb4:	d00b      	beq.n	8004cce <TIM_TI1_SetConfig+0x66>
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	4a22      	ldr	r2, [pc, #136]	; (8004d44 <TIM_TI1_SetConfig+0xdc>)
 8004cba:	4293      	cmp	r3, r2
 8004cbc:	d007      	beq.n	8004cce <TIM_TI1_SetConfig+0x66>
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	4a21      	ldr	r2, [pc, #132]	; (8004d48 <TIM_TI1_SetConfig+0xe0>)
 8004cc2:	4293      	cmp	r3, r2
 8004cc4:	d003      	beq.n	8004cce <TIM_TI1_SetConfig+0x66>
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	4a20      	ldr	r2, [pc, #128]	; (8004d4c <TIM_TI1_SetConfig+0xe4>)
 8004cca:	4293      	cmp	r3, r2
 8004ccc:	d101      	bne.n	8004cd2 <TIM_TI1_SetConfig+0x6a>
 8004cce:	2301      	movs	r3, #1
 8004cd0:	e000      	b.n	8004cd4 <TIM_TI1_SetConfig+0x6c>
 8004cd2:	2300      	movs	r3, #0
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d008      	beq.n	8004cea <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004cd8:	697b      	ldr	r3, [r7, #20]
 8004cda:	f023 0303 	bic.w	r3, r3, #3
 8004cde:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8004ce0:	697a      	ldr	r2, [r7, #20]
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	4313      	orrs	r3, r2
 8004ce6:	617b      	str	r3, [r7, #20]
 8004ce8:	e003      	b.n	8004cf2 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8004cea:	697b      	ldr	r3, [r7, #20]
 8004cec:	f043 0301 	orr.w	r3, r3, #1
 8004cf0:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004cf2:	697b      	ldr	r3, [r7, #20]
 8004cf4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004cf8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004cfa:	683b      	ldr	r3, [r7, #0]
 8004cfc:	011b      	lsls	r3, r3, #4
 8004cfe:	b2db      	uxtb	r3, r3
 8004d00:	697a      	ldr	r2, [r7, #20]
 8004d02:	4313      	orrs	r3, r2
 8004d04:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004d06:	693b      	ldr	r3, [r7, #16]
 8004d08:	f023 030a 	bic.w	r3, r3, #10
 8004d0c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8004d0e:	68bb      	ldr	r3, [r7, #8]
 8004d10:	f003 030a 	and.w	r3, r3, #10
 8004d14:	693a      	ldr	r2, [r7, #16]
 8004d16:	4313      	orrs	r3, r2
 8004d18:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	697a      	ldr	r2, [r7, #20]
 8004d1e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	693a      	ldr	r2, [r7, #16]
 8004d24:	621a      	str	r2, [r3, #32]
}
 8004d26:	bf00      	nop
 8004d28:	371c      	adds	r7, #28
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d30:	4770      	bx	lr
 8004d32:	bf00      	nop
 8004d34:	40010000 	.word	0x40010000
 8004d38:	40000400 	.word	0x40000400
 8004d3c:	40000800 	.word	0x40000800
 8004d40:	40000c00 	.word	0x40000c00
 8004d44:	40010400 	.word	0x40010400
 8004d48:	40014000 	.word	0x40014000
 8004d4c:	40001800 	.word	0x40001800

08004d50 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004d50:	b480      	push	{r7}
 8004d52:	b087      	sub	sp, #28
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	60f8      	str	r0, [r7, #12]
 8004d58:	60b9      	str	r1, [r7, #8]
 8004d5a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	6a1b      	ldr	r3, [r3, #32]
 8004d60:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	6a1b      	ldr	r3, [r3, #32]
 8004d66:	f023 0201 	bic.w	r2, r3, #1
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	699b      	ldr	r3, [r3, #24]
 8004d72:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004d74:	693b      	ldr	r3, [r7, #16]
 8004d76:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004d7a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	011b      	lsls	r3, r3, #4
 8004d80:	693a      	ldr	r2, [r7, #16]
 8004d82:	4313      	orrs	r3, r2
 8004d84:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004d86:	697b      	ldr	r3, [r7, #20]
 8004d88:	f023 030a 	bic.w	r3, r3, #10
 8004d8c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004d8e:	697a      	ldr	r2, [r7, #20]
 8004d90:	68bb      	ldr	r3, [r7, #8]
 8004d92:	4313      	orrs	r3, r2
 8004d94:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	693a      	ldr	r2, [r7, #16]
 8004d9a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	697a      	ldr	r2, [r7, #20]
 8004da0:	621a      	str	r2, [r3, #32]
}
 8004da2:	bf00      	nop
 8004da4:	371c      	adds	r7, #28
 8004da6:	46bd      	mov	sp, r7
 8004da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dac:	4770      	bx	lr

08004dae <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004dae:	b480      	push	{r7}
 8004db0:	b087      	sub	sp, #28
 8004db2:	af00      	add	r7, sp, #0
 8004db4:	60f8      	str	r0, [r7, #12]
 8004db6:	60b9      	str	r1, [r7, #8]
 8004db8:	607a      	str	r2, [r7, #4]
 8004dba:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	6a1b      	ldr	r3, [r3, #32]
 8004dc0:	f023 0210 	bic.w	r2, r3, #16
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	699b      	ldr	r3, [r3, #24]
 8004dcc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	6a1b      	ldr	r3, [r3, #32]
 8004dd2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004dd4:	697b      	ldr	r3, [r7, #20]
 8004dd6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004dda:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	021b      	lsls	r3, r3, #8
 8004de0:	697a      	ldr	r2, [r7, #20]
 8004de2:	4313      	orrs	r3, r2
 8004de4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004de6:	697b      	ldr	r3, [r7, #20]
 8004de8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004dec:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004dee:	683b      	ldr	r3, [r7, #0]
 8004df0:	031b      	lsls	r3, r3, #12
 8004df2:	b29b      	uxth	r3, r3
 8004df4:	697a      	ldr	r2, [r7, #20]
 8004df6:	4313      	orrs	r3, r2
 8004df8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004dfa:	693b      	ldr	r3, [r7, #16]
 8004dfc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004e00:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8004e02:	68bb      	ldr	r3, [r7, #8]
 8004e04:	011b      	lsls	r3, r3, #4
 8004e06:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8004e0a:	693a      	ldr	r2, [r7, #16]
 8004e0c:	4313      	orrs	r3, r2
 8004e0e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	697a      	ldr	r2, [r7, #20]
 8004e14:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	693a      	ldr	r2, [r7, #16]
 8004e1a:	621a      	str	r2, [r3, #32]
}
 8004e1c:	bf00      	nop
 8004e1e:	371c      	adds	r7, #28
 8004e20:	46bd      	mov	sp, r7
 8004e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e26:	4770      	bx	lr

08004e28 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004e28:	b480      	push	{r7}
 8004e2a:	b087      	sub	sp, #28
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	60f8      	str	r0, [r7, #12]
 8004e30:	60b9      	str	r1, [r7, #8]
 8004e32:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	6a1b      	ldr	r3, [r3, #32]
 8004e38:	f023 0210 	bic.w	r2, r3, #16
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	699b      	ldr	r3, [r3, #24]
 8004e44:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	6a1b      	ldr	r3, [r3, #32]
 8004e4a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004e4c:	697b      	ldr	r3, [r7, #20]
 8004e4e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004e52:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	031b      	lsls	r3, r3, #12
 8004e58:	697a      	ldr	r2, [r7, #20]
 8004e5a:	4313      	orrs	r3, r2
 8004e5c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004e5e:	693b      	ldr	r3, [r7, #16]
 8004e60:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004e64:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004e66:	68bb      	ldr	r3, [r7, #8]
 8004e68:	011b      	lsls	r3, r3, #4
 8004e6a:	693a      	ldr	r2, [r7, #16]
 8004e6c:	4313      	orrs	r3, r2
 8004e6e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	697a      	ldr	r2, [r7, #20]
 8004e74:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	693a      	ldr	r2, [r7, #16]
 8004e7a:	621a      	str	r2, [r3, #32]
}
 8004e7c:	bf00      	nop
 8004e7e:	371c      	adds	r7, #28
 8004e80:	46bd      	mov	sp, r7
 8004e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e86:	4770      	bx	lr

08004e88 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004e88:	b480      	push	{r7}
 8004e8a:	b087      	sub	sp, #28
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	60f8      	str	r0, [r7, #12]
 8004e90:	60b9      	str	r1, [r7, #8]
 8004e92:	607a      	str	r2, [r7, #4]
 8004e94:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	6a1b      	ldr	r3, [r3, #32]
 8004e9a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	69db      	ldr	r3, [r3, #28]
 8004ea6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	6a1b      	ldr	r3, [r3, #32]
 8004eac:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8004eae:	697b      	ldr	r3, [r7, #20]
 8004eb0:	f023 0303 	bic.w	r3, r3, #3
 8004eb4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8004eb6:	697a      	ldr	r2, [r7, #20]
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	4313      	orrs	r3, r2
 8004ebc:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8004ebe:	697b      	ldr	r3, [r7, #20]
 8004ec0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004ec4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8004ec6:	683b      	ldr	r3, [r7, #0]
 8004ec8:	011b      	lsls	r3, r3, #4
 8004eca:	b2db      	uxtb	r3, r3
 8004ecc:	697a      	ldr	r2, [r7, #20]
 8004ece:	4313      	orrs	r3, r2
 8004ed0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8004ed2:	693b      	ldr	r3, [r7, #16]
 8004ed4:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8004ed8:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8004eda:	68bb      	ldr	r3, [r7, #8]
 8004edc:	021b      	lsls	r3, r3, #8
 8004ede:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8004ee2:	693a      	ldr	r2, [r7, #16]
 8004ee4:	4313      	orrs	r3, r2
 8004ee6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	697a      	ldr	r2, [r7, #20]
 8004eec:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	693a      	ldr	r2, [r7, #16]
 8004ef2:	621a      	str	r2, [r3, #32]
}
 8004ef4:	bf00      	nop
 8004ef6:	371c      	adds	r7, #28
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efe:	4770      	bx	lr

08004f00 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004f00:	b480      	push	{r7}
 8004f02:	b087      	sub	sp, #28
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	60f8      	str	r0, [r7, #12]
 8004f08:	60b9      	str	r1, [r7, #8]
 8004f0a:	607a      	str	r2, [r7, #4]
 8004f0c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	6a1b      	ldr	r3, [r3, #32]
 8004f12:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	69db      	ldr	r3, [r3, #28]
 8004f1e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	6a1b      	ldr	r3, [r3, #32]
 8004f24:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8004f26:	697b      	ldr	r3, [r7, #20]
 8004f28:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f2c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	021b      	lsls	r3, r3, #8
 8004f32:	697a      	ldr	r2, [r7, #20]
 8004f34:	4313      	orrs	r3, r2
 8004f36:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8004f38:	697b      	ldr	r3, [r7, #20]
 8004f3a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004f3e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8004f40:	683b      	ldr	r3, [r7, #0]
 8004f42:	031b      	lsls	r3, r3, #12
 8004f44:	b29b      	uxth	r3, r3
 8004f46:	697a      	ldr	r2, [r7, #20]
 8004f48:	4313      	orrs	r3, r2
 8004f4a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8004f4c:	693b      	ldr	r3, [r7, #16]
 8004f4e:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8004f52:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8004f54:	68bb      	ldr	r3, [r7, #8]
 8004f56:	031b      	lsls	r3, r3, #12
 8004f58:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8004f5c:	693a      	ldr	r2, [r7, #16]
 8004f5e:	4313      	orrs	r3, r2
 8004f60:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	697a      	ldr	r2, [r7, #20]
 8004f66:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	693a      	ldr	r2, [r7, #16]
 8004f6c:	621a      	str	r2, [r3, #32]
}
 8004f6e:	bf00      	nop
 8004f70:	371c      	adds	r7, #28
 8004f72:	46bd      	mov	sp, r7
 8004f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f78:	4770      	bx	lr

08004f7a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004f7a:	b480      	push	{r7}
 8004f7c:	b085      	sub	sp, #20
 8004f7e:	af00      	add	r7, sp, #0
 8004f80:	6078      	str	r0, [r7, #4]
 8004f82:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	689b      	ldr	r3, [r3, #8]
 8004f88:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f90:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004f92:	683a      	ldr	r2, [r7, #0]
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	4313      	orrs	r3, r2
 8004f98:	f043 0307 	orr.w	r3, r3, #7
 8004f9c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	68fa      	ldr	r2, [r7, #12]
 8004fa2:	609a      	str	r2, [r3, #8]
}
 8004fa4:	bf00      	nop
 8004fa6:	3714      	adds	r7, #20
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fae:	4770      	bx	lr

08004fb0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004fb0:	b480      	push	{r7}
 8004fb2:	b087      	sub	sp, #28
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	60f8      	str	r0, [r7, #12]
 8004fb8:	60b9      	str	r1, [r7, #8]
 8004fba:	607a      	str	r2, [r7, #4]
 8004fbc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	689b      	ldr	r3, [r3, #8]
 8004fc2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004fc4:	697b      	ldr	r3, [r7, #20]
 8004fc6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004fca:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	021a      	lsls	r2, r3, #8
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	431a      	orrs	r2, r3
 8004fd4:	68bb      	ldr	r3, [r7, #8]
 8004fd6:	4313      	orrs	r3, r2
 8004fd8:	697a      	ldr	r2, [r7, #20]
 8004fda:	4313      	orrs	r3, r2
 8004fdc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	697a      	ldr	r2, [r7, #20]
 8004fe2:	609a      	str	r2, [r3, #8]
}
 8004fe4:	bf00      	nop
 8004fe6:	371c      	adds	r7, #28
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fee:	4770      	bx	lr

08004ff0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004ff0:	b480      	push	{r7}
 8004ff2:	b085      	sub	sp, #20
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
 8004ff8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005000:	2b01      	cmp	r3, #1
 8005002:	d101      	bne.n	8005008 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005004:	2302      	movs	r3, #2
 8005006:	e05a      	b.n	80050be <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2201      	movs	r2, #1
 800500c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2202      	movs	r2, #2
 8005014:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	685b      	ldr	r3, [r3, #4]
 800501e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	689b      	ldr	r3, [r3, #8]
 8005026:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800502e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	68fa      	ldr	r2, [r7, #12]
 8005036:	4313      	orrs	r3, r2
 8005038:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	68fa      	ldr	r2, [r7, #12]
 8005040:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	4a21      	ldr	r2, [pc, #132]	; (80050cc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005048:	4293      	cmp	r3, r2
 800504a:	d022      	beq.n	8005092 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005054:	d01d      	beq.n	8005092 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	4a1d      	ldr	r2, [pc, #116]	; (80050d0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800505c:	4293      	cmp	r3, r2
 800505e:	d018      	beq.n	8005092 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	4a1b      	ldr	r2, [pc, #108]	; (80050d4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005066:	4293      	cmp	r3, r2
 8005068:	d013      	beq.n	8005092 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	4a1a      	ldr	r2, [pc, #104]	; (80050d8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005070:	4293      	cmp	r3, r2
 8005072:	d00e      	beq.n	8005092 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	4a18      	ldr	r2, [pc, #96]	; (80050dc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800507a:	4293      	cmp	r3, r2
 800507c:	d009      	beq.n	8005092 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	4a17      	ldr	r2, [pc, #92]	; (80050e0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005084:	4293      	cmp	r3, r2
 8005086:	d004      	beq.n	8005092 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	4a15      	ldr	r2, [pc, #84]	; (80050e4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800508e:	4293      	cmp	r3, r2
 8005090:	d10c      	bne.n	80050ac <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005092:	68bb      	ldr	r3, [r7, #8]
 8005094:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005098:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800509a:	683b      	ldr	r3, [r7, #0]
 800509c:	685b      	ldr	r3, [r3, #4]
 800509e:	68ba      	ldr	r2, [r7, #8]
 80050a0:	4313      	orrs	r3, r2
 80050a2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	68ba      	ldr	r2, [r7, #8]
 80050aa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2201      	movs	r2, #1
 80050b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2200      	movs	r2, #0
 80050b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80050bc:	2300      	movs	r3, #0
}
 80050be:	4618      	mov	r0, r3
 80050c0:	3714      	adds	r7, #20
 80050c2:	46bd      	mov	sp, r7
 80050c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c8:	4770      	bx	lr
 80050ca:	bf00      	nop
 80050cc:	40010000 	.word	0x40010000
 80050d0:	40000400 	.word	0x40000400
 80050d4:	40000800 	.word	0x40000800
 80050d8:	40000c00 	.word	0x40000c00
 80050dc:	40010400 	.word	0x40010400
 80050e0:	40014000 	.word	0x40014000
 80050e4:	40001800 	.word	0x40001800

080050e8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80050e8:	b480      	push	{r7}
 80050ea:	b085      	sub	sp, #20
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
 80050f0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80050f2:	2300      	movs	r3, #0
 80050f4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80050fc:	2b01      	cmp	r3, #1
 80050fe:	d101      	bne.n	8005104 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005100:	2302      	movs	r3, #2
 8005102:	e03d      	b.n	8005180 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2201      	movs	r2, #1
 8005108:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005112:	683b      	ldr	r3, [r7, #0]
 8005114:	68db      	ldr	r3, [r3, #12]
 8005116:	4313      	orrs	r3, r2
 8005118:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005120:	683b      	ldr	r3, [r7, #0]
 8005122:	689b      	ldr	r3, [r3, #8]
 8005124:	4313      	orrs	r3, r2
 8005126:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	685b      	ldr	r3, [r3, #4]
 8005132:	4313      	orrs	r3, r2
 8005134:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800513c:	683b      	ldr	r3, [r7, #0]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	4313      	orrs	r3, r2
 8005142:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800514a:	683b      	ldr	r3, [r7, #0]
 800514c:	691b      	ldr	r3, [r3, #16]
 800514e:	4313      	orrs	r3, r2
 8005150:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005158:	683b      	ldr	r3, [r7, #0]
 800515a:	695b      	ldr	r3, [r3, #20]
 800515c:	4313      	orrs	r3, r2
 800515e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005166:	683b      	ldr	r3, [r7, #0]
 8005168:	69db      	ldr	r3, [r3, #28]
 800516a:	4313      	orrs	r3, r2
 800516c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	68fa      	ldr	r2, [r7, #12]
 8005174:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	2200      	movs	r2, #0
 800517a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800517e:	2300      	movs	r3, #0
}
 8005180:	4618      	mov	r0, r3
 8005182:	3714      	adds	r7, #20
 8005184:	46bd      	mov	sp, r7
 8005186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518a:	4770      	bx	lr

0800518c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800518c:	b480      	push	{r7}
 800518e:	b083      	sub	sp, #12
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005194:	bf00      	nop
 8005196:	370c      	adds	r7, #12
 8005198:	46bd      	mov	sp, r7
 800519a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519e:	4770      	bx	lr

080051a0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80051a0:	b480      	push	{r7}
 80051a2:	b083      	sub	sp, #12
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80051a8:	bf00      	nop
 80051aa:	370c      	adds	r7, #12
 80051ac:	46bd      	mov	sp, r7
 80051ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b2:	4770      	bx	lr

080051b4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80051b4:	b580      	push	{r7, lr}
 80051b6:	b082      	sub	sp, #8
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d101      	bne.n	80051c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80051c2:	2301      	movs	r3, #1
 80051c4:	e03f      	b.n	8005246 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051cc:	b2db      	uxtb	r3, r3
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d106      	bne.n	80051e0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	2200      	movs	r2, #0
 80051d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80051da:	6878      	ldr	r0, [r7, #4]
 80051dc:	f7fc fa2a 	bl	8001634 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2224      	movs	r2, #36	; 0x24
 80051e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	68da      	ldr	r2, [r3, #12]
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80051f6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80051f8:	6878      	ldr	r0, [r7, #4]
 80051fa:	f000 f905 	bl	8005408 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	691a      	ldr	r2, [r3, #16]
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800520c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	695a      	ldr	r2, [r3, #20]
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800521c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	68da      	ldr	r2, [r3, #12]
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800522c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	2200      	movs	r2, #0
 8005232:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2220      	movs	r2, #32
 8005238:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2220      	movs	r2, #32
 8005240:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005244:	2300      	movs	r3, #0
}
 8005246:	4618      	mov	r0, r3
 8005248:	3708      	adds	r7, #8
 800524a:	46bd      	mov	sp, r7
 800524c:	bd80      	pop	{r7, pc}

0800524e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800524e:	b580      	push	{r7, lr}
 8005250:	b08a      	sub	sp, #40	; 0x28
 8005252:	af02      	add	r7, sp, #8
 8005254:	60f8      	str	r0, [r7, #12]
 8005256:	60b9      	str	r1, [r7, #8]
 8005258:	603b      	str	r3, [r7, #0]
 800525a:	4613      	mov	r3, r2
 800525c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800525e:	2300      	movs	r3, #0
 8005260:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005268:	b2db      	uxtb	r3, r3
 800526a:	2b20      	cmp	r3, #32
 800526c:	d17c      	bne.n	8005368 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800526e:	68bb      	ldr	r3, [r7, #8]
 8005270:	2b00      	cmp	r3, #0
 8005272:	d002      	beq.n	800527a <HAL_UART_Transmit+0x2c>
 8005274:	88fb      	ldrh	r3, [r7, #6]
 8005276:	2b00      	cmp	r3, #0
 8005278:	d101      	bne.n	800527e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800527a:	2301      	movs	r3, #1
 800527c:	e075      	b.n	800536a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005284:	2b01      	cmp	r3, #1
 8005286:	d101      	bne.n	800528c <HAL_UART_Transmit+0x3e>
 8005288:	2302      	movs	r3, #2
 800528a:	e06e      	b.n	800536a <HAL_UART_Transmit+0x11c>
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	2201      	movs	r2, #1
 8005290:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	2200      	movs	r2, #0
 8005298:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	2221      	movs	r2, #33	; 0x21
 800529e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80052a2:	f7fc fc57 	bl	8001b54 <HAL_GetTick>
 80052a6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	88fa      	ldrh	r2, [r7, #6]
 80052ac:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	88fa      	ldrh	r2, [r7, #6]
 80052b2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	689b      	ldr	r3, [r3, #8]
 80052b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80052bc:	d108      	bne.n	80052d0 <HAL_UART_Transmit+0x82>
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	691b      	ldr	r3, [r3, #16]
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d104      	bne.n	80052d0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80052c6:	2300      	movs	r3, #0
 80052c8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80052ca:	68bb      	ldr	r3, [r7, #8]
 80052cc:	61bb      	str	r3, [r7, #24]
 80052ce:	e003      	b.n	80052d8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80052d0:	68bb      	ldr	r3, [r7, #8]
 80052d2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80052d4:	2300      	movs	r3, #0
 80052d6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	2200      	movs	r2, #0
 80052dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80052e0:	e02a      	b.n	8005338 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80052e2:	683b      	ldr	r3, [r7, #0]
 80052e4:	9300      	str	r3, [sp, #0]
 80052e6:	697b      	ldr	r3, [r7, #20]
 80052e8:	2200      	movs	r2, #0
 80052ea:	2180      	movs	r1, #128	; 0x80
 80052ec:	68f8      	ldr	r0, [r7, #12]
 80052ee:	f000 f840 	bl	8005372 <UART_WaitOnFlagUntilTimeout>
 80052f2:	4603      	mov	r3, r0
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d001      	beq.n	80052fc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80052f8:	2303      	movs	r3, #3
 80052fa:	e036      	b.n	800536a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80052fc:	69fb      	ldr	r3, [r7, #28]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d10b      	bne.n	800531a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005302:	69bb      	ldr	r3, [r7, #24]
 8005304:	881b      	ldrh	r3, [r3, #0]
 8005306:	461a      	mov	r2, r3
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005310:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005312:	69bb      	ldr	r3, [r7, #24]
 8005314:	3302      	adds	r3, #2
 8005316:	61bb      	str	r3, [r7, #24]
 8005318:	e007      	b.n	800532a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800531a:	69fb      	ldr	r3, [r7, #28]
 800531c:	781a      	ldrb	r2, [r3, #0]
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005324:	69fb      	ldr	r3, [r7, #28]
 8005326:	3301      	adds	r3, #1
 8005328:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800532e:	b29b      	uxth	r3, r3
 8005330:	3b01      	subs	r3, #1
 8005332:	b29a      	uxth	r2, r3
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800533c:	b29b      	uxth	r3, r3
 800533e:	2b00      	cmp	r3, #0
 8005340:	d1cf      	bne.n	80052e2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005342:	683b      	ldr	r3, [r7, #0]
 8005344:	9300      	str	r3, [sp, #0]
 8005346:	697b      	ldr	r3, [r7, #20]
 8005348:	2200      	movs	r2, #0
 800534a:	2140      	movs	r1, #64	; 0x40
 800534c:	68f8      	ldr	r0, [r7, #12]
 800534e:	f000 f810 	bl	8005372 <UART_WaitOnFlagUntilTimeout>
 8005352:	4603      	mov	r3, r0
 8005354:	2b00      	cmp	r3, #0
 8005356:	d001      	beq.n	800535c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005358:	2303      	movs	r3, #3
 800535a:	e006      	b.n	800536a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	2220      	movs	r2, #32
 8005360:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005364:	2300      	movs	r3, #0
 8005366:	e000      	b.n	800536a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005368:	2302      	movs	r3, #2
  }
}
 800536a:	4618      	mov	r0, r3
 800536c:	3720      	adds	r7, #32
 800536e:	46bd      	mov	sp, r7
 8005370:	bd80      	pop	{r7, pc}

08005372 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8005372:	b580      	push	{r7, lr}
 8005374:	b084      	sub	sp, #16
 8005376:	af00      	add	r7, sp, #0
 8005378:	60f8      	str	r0, [r7, #12]
 800537a:	60b9      	str	r1, [r7, #8]
 800537c:	603b      	str	r3, [r7, #0]
 800537e:	4613      	mov	r3, r2
 8005380:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005382:	e02c      	b.n	80053de <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005384:	69bb      	ldr	r3, [r7, #24]
 8005386:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800538a:	d028      	beq.n	80053de <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800538c:	69bb      	ldr	r3, [r7, #24]
 800538e:	2b00      	cmp	r3, #0
 8005390:	d007      	beq.n	80053a2 <UART_WaitOnFlagUntilTimeout+0x30>
 8005392:	f7fc fbdf 	bl	8001b54 <HAL_GetTick>
 8005396:	4602      	mov	r2, r0
 8005398:	683b      	ldr	r3, [r7, #0]
 800539a:	1ad3      	subs	r3, r2, r3
 800539c:	69ba      	ldr	r2, [r7, #24]
 800539e:	429a      	cmp	r2, r3
 80053a0:	d21d      	bcs.n	80053de <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	68da      	ldr	r2, [r3, #12]
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80053b0:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	695a      	ldr	r2, [r3, #20]
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f022 0201 	bic.w	r2, r2, #1
 80053c0:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	2220      	movs	r2, #32
 80053c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	2220      	movs	r2, #32
 80053ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	2200      	movs	r2, #0
 80053d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80053da:	2303      	movs	r3, #3
 80053dc:	e00f      	b.n	80053fe <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	681a      	ldr	r2, [r3, #0]
 80053e4:	68bb      	ldr	r3, [r7, #8]
 80053e6:	4013      	ands	r3, r2
 80053e8:	68ba      	ldr	r2, [r7, #8]
 80053ea:	429a      	cmp	r2, r3
 80053ec:	bf0c      	ite	eq
 80053ee:	2301      	moveq	r3, #1
 80053f0:	2300      	movne	r3, #0
 80053f2:	b2db      	uxtb	r3, r3
 80053f4:	461a      	mov	r2, r3
 80053f6:	79fb      	ldrb	r3, [r7, #7]
 80053f8:	429a      	cmp	r2, r3
 80053fa:	d0c3      	beq.n	8005384 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80053fc:	2300      	movs	r3, #0
}
 80053fe:	4618      	mov	r0, r3
 8005400:	3710      	adds	r7, #16
 8005402:	46bd      	mov	sp, r7
 8005404:	bd80      	pop	{r7, pc}
	...

08005408 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005408:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800540c:	b09f      	sub	sp, #124	; 0x7c
 800540e:	af00      	add	r7, sp, #0
 8005410:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005412:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	691b      	ldr	r3, [r3, #16]
 8005418:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800541c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800541e:	68d9      	ldr	r1, [r3, #12]
 8005420:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005422:	681a      	ldr	r2, [r3, #0]
 8005424:	ea40 0301 	orr.w	r3, r0, r1
 8005428:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800542a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800542c:	689a      	ldr	r2, [r3, #8]
 800542e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005430:	691b      	ldr	r3, [r3, #16]
 8005432:	431a      	orrs	r2, r3
 8005434:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005436:	695b      	ldr	r3, [r3, #20]
 8005438:	431a      	orrs	r2, r3
 800543a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800543c:	69db      	ldr	r3, [r3, #28]
 800543e:	4313      	orrs	r3, r2
 8005440:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8005442:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	68db      	ldr	r3, [r3, #12]
 8005448:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800544c:	f021 010c 	bic.w	r1, r1, #12
 8005450:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005452:	681a      	ldr	r2, [r3, #0]
 8005454:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005456:	430b      	orrs	r3, r1
 8005458:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800545a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	695b      	ldr	r3, [r3, #20]
 8005460:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005464:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005466:	6999      	ldr	r1, [r3, #24]
 8005468:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800546a:	681a      	ldr	r2, [r3, #0]
 800546c:	ea40 0301 	orr.w	r3, r0, r1
 8005470:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005472:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005474:	681a      	ldr	r2, [r3, #0]
 8005476:	4bc5      	ldr	r3, [pc, #788]	; (800578c <UART_SetConfig+0x384>)
 8005478:	429a      	cmp	r2, r3
 800547a:	d004      	beq.n	8005486 <UART_SetConfig+0x7e>
 800547c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800547e:	681a      	ldr	r2, [r3, #0]
 8005480:	4bc3      	ldr	r3, [pc, #780]	; (8005790 <UART_SetConfig+0x388>)
 8005482:	429a      	cmp	r2, r3
 8005484:	d103      	bne.n	800548e <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005486:	f7fd fddf 	bl	8003048 <HAL_RCC_GetPCLK2Freq>
 800548a:	6778      	str	r0, [r7, #116]	; 0x74
 800548c:	e002      	b.n	8005494 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800548e:	f7fd fdc7 	bl	8003020 <HAL_RCC_GetPCLK1Freq>
 8005492:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005494:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005496:	69db      	ldr	r3, [r3, #28]
 8005498:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800549c:	f040 80b6 	bne.w	800560c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80054a0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80054a2:	461c      	mov	r4, r3
 80054a4:	f04f 0500 	mov.w	r5, #0
 80054a8:	4622      	mov	r2, r4
 80054aa:	462b      	mov	r3, r5
 80054ac:	1891      	adds	r1, r2, r2
 80054ae:	6439      	str	r1, [r7, #64]	; 0x40
 80054b0:	415b      	adcs	r3, r3
 80054b2:	647b      	str	r3, [r7, #68]	; 0x44
 80054b4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80054b8:	1912      	adds	r2, r2, r4
 80054ba:	eb45 0303 	adc.w	r3, r5, r3
 80054be:	f04f 0000 	mov.w	r0, #0
 80054c2:	f04f 0100 	mov.w	r1, #0
 80054c6:	00d9      	lsls	r1, r3, #3
 80054c8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80054cc:	00d0      	lsls	r0, r2, #3
 80054ce:	4602      	mov	r2, r0
 80054d0:	460b      	mov	r3, r1
 80054d2:	1911      	adds	r1, r2, r4
 80054d4:	6639      	str	r1, [r7, #96]	; 0x60
 80054d6:	416b      	adcs	r3, r5
 80054d8:	667b      	str	r3, [r7, #100]	; 0x64
 80054da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80054dc:	685b      	ldr	r3, [r3, #4]
 80054de:	461a      	mov	r2, r3
 80054e0:	f04f 0300 	mov.w	r3, #0
 80054e4:	1891      	adds	r1, r2, r2
 80054e6:	63b9      	str	r1, [r7, #56]	; 0x38
 80054e8:	415b      	adcs	r3, r3
 80054ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80054ec:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80054f0:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80054f4:	f7fa febc 	bl	8000270 <__aeabi_uldivmod>
 80054f8:	4602      	mov	r2, r0
 80054fa:	460b      	mov	r3, r1
 80054fc:	4ba5      	ldr	r3, [pc, #660]	; (8005794 <UART_SetConfig+0x38c>)
 80054fe:	fba3 2302 	umull	r2, r3, r3, r2
 8005502:	095b      	lsrs	r3, r3, #5
 8005504:	011e      	lsls	r6, r3, #4
 8005506:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005508:	461c      	mov	r4, r3
 800550a:	f04f 0500 	mov.w	r5, #0
 800550e:	4622      	mov	r2, r4
 8005510:	462b      	mov	r3, r5
 8005512:	1891      	adds	r1, r2, r2
 8005514:	6339      	str	r1, [r7, #48]	; 0x30
 8005516:	415b      	adcs	r3, r3
 8005518:	637b      	str	r3, [r7, #52]	; 0x34
 800551a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800551e:	1912      	adds	r2, r2, r4
 8005520:	eb45 0303 	adc.w	r3, r5, r3
 8005524:	f04f 0000 	mov.w	r0, #0
 8005528:	f04f 0100 	mov.w	r1, #0
 800552c:	00d9      	lsls	r1, r3, #3
 800552e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005532:	00d0      	lsls	r0, r2, #3
 8005534:	4602      	mov	r2, r0
 8005536:	460b      	mov	r3, r1
 8005538:	1911      	adds	r1, r2, r4
 800553a:	65b9      	str	r1, [r7, #88]	; 0x58
 800553c:	416b      	adcs	r3, r5
 800553e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005540:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005542:	685b      	ldr	r3, [r3, #4]
 8005544:	461a      	mov	r2, r3
 8005546:	f04f 0300 	mov.w	r3, #0
 800554a:	1891      	adds	r1, r2, r2
 800554c:	62b9      	str	r1, [r7, #40]	; 0x28
 800554e:	415b      	adcs	r3, r3
 8005550:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005552:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005556:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800555a:	f7fa fe89 	bl	8000270 <__aeabi_uldivmod>
 800555e:	4602      	mov	r2, r0
 8005560:	460b      	mov	r3, r1
 8005562:	4b8c      	ldr	r3, [pc, #560]	; (8005794 <UART_SetConfig+0x38c>)
 8005564:	fba3 1302 	umull	r1, r3, r3, r2
 8005568:	095b      	lsrs	r3, r3, #5
 800556a:	2164      	movs	r1, #100	; 0x64
 800556c:	fb01 f303 	mul.w	r3, r1, r3
 8005570:	1ad3      	subs	r3, r2, r3
 8005572:	00db      	lsls	r3, r3, #3
 8005574:	3332      	adds	r3, #50	; 0x32
 8005576:	4a87      	ldr	r2, [pc, #540]	; (8005794 <UART_SetConfig+0x38c>)
 8005578:	fba2 2303 	umull	r2, r3, r2, r3
 800557c:	095b      	lsrs	r3, r3, #5
 800557e:	005b      	lsls	r3, r3, #1
 8005580:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005584:	441e      	add	r6, r3
 8005586:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005588:	4618      	mov	r0, r3
 800558a:	f04f 0100 	mov.w	r1, #0
 800558e:	4602      	mov	r2, r0
 8005590:	460b      	mov	r3, r1
 8005592:	1894      	adds	r4, r2, r2
 8005594:	623c      	str	r4, [r7, #32]
 8005596:	415b      	adcs	r3, r3
 8005598:	627b      	str	r3, [r7, #36]	; 0x24
 800559a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800559e:	1812      	adds	r2, r2, r0
 80055a0:	eb41 0303 	adc.w	r3, r1, r3
 80055a4:	f04f 0400 	mov.w	r4, #0
 80055a8:	f04f 0500 	mov.w	r5, #0
 80055ac:	00dd      	lsls	r5, r3, #3
 80055ae:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80055b2:	00d4      	lsls	r4, r2, #3
 80055b4:	4622      	mov	r2, r4
 80055b6:	462b      	mov	r3, r5
 80055b8:	1814      	adds	r4, r2, r0
 80055ba:	653c      	str	r4, [r7, #80]	; 0x50
 80055bc:	414b      	adcs	r3, r1
 80055be:	657b      	str	r3, [r7, #84]	; 0x54
 80055c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055c2:	685b      	ldr	r3, [r3, #4]
 80055c4:	461a      	mov	r2, r3
 80055c6:	f04f 0300 	mov.w	r3, #0
 80055ca:	1891      	adds	r1, r2, r2
 80055cc:	61b9      	str	r1, [r7, #24]
 80055ce:	415b      	adcs	r3, r3
 80055d0:	61fb      	str	r3, [r7, #28]
 80055d2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80055d6:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80055da:	f7fa fe49 	bl	8000270 <__aeabi_uldivmod>
 80055de:	4602      	mov	r2, r0
 80055e0:	460b      	mov	r3, r1
 80055e2:	4b6c      	ldr	r3, [pc, #432]	; (8005794 <UART_SetConfig+0x38c>)
 80055e4:	fba3 1302 	umull	r1, r3, r3, r2
 80055e8:	095b      	lsrs	r3, r3, #5
 80055ea:	2164      	movs	r1, #100	; 0x64
 80055ec:	fb01 f303 	mul.w	r3, r1, r3
 80055f0:	1ad3      	subs	r3, r2, r3
 80055f2:	00db      	lsls	r3, r3, #3
 80055f4:	3332      	adds	r3, #50	; 0x32
 80055f6:	4a67      	ldr	r2, [pc, #412]	; (8005794 <UART_SetConfig+0x38c>)
 80055f8:	fba2 2303 	umull	r2, r3, r2, r3
 80055fc:	095b      	lsrs	r3, r3, #5
 80055fe:	f003 0207 	and.w	r2, r3, #7
 8005602:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	4432      	add	r2, r6
 8005608:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800560a:	e0b9      	b.n	8005780 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800560c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800560e:	461c      	mov	r4, r3
 8005610:	f04f 0500 	mov.w	r5, #0
 8005614:	4622      	mov	r2, r4
 8005616:	462b      	mov	r3, r5
 8005618:	1891      	adds	r1, r2, r2
 800561a:	6139      	str	r1, [r7, #16]
 800561c:	415b      	adcs	r3, r3
 800561e:	617b      	str	r3, [r7, #20]
 8005620:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005624:	1912      	adds	r2, r2, r4
 8005626:	eb45 0303 	adc.w	r3, r5, r3
 800562a:	f04f 0000 	mov.w	r0, #0
 800562e:	f04f 0100 	mov.w	r1, #0
 8005632:	00d9      	lsls	r1, r3, #3
 8005634:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005638:	00d0      	lsls	r0, r2, #3
 800563a:	4602      	mov	r2, r0
 800563c:	460b      	mov	r3, r1
 800563e:	eb12 0804 	adds.w	r8, r2, r4
 8005642:	eb43 0905 	adc.w	r9, r3, r5
 8005646:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005648:	685b      	ldr	r3, [r3, #4]
 800564a:	4618      	mov	r0, r3
 800564c:	f04f 0100 	mov.w	r1, #0
 8005650:	f04f 0200 	mov.w	r2, #0
 8005654:	f04f 0300 	mov.w	r3, #0
 8005658:	008b      	lsls	r3, r1, #2
 800565a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800565e:	0082      	lsls	r2, r0, #2
 8005660:	4640      	mov	r0, r8
 8005662:	4649      	mov	r1, r9
 8005664:	f7fa fe04 	bl	8000270 <__aeabi_uldivmod>
 8005668:	4602      	mov	r2, r0
 800566a:	460b      	mov	r3, r1
 800566c:	4b49      	ldr	r3, [pc, #292]	; (8005794 <UART_SetConfig+0x38c>)
 800566e:	fba3 2302 	umull	r2, r3, r3, r2
 8005672:	095b      	lsrs	r3, r3, #5
 8005674:	011e      	lsls	r6, r3, #4
 8005676:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005678:	4618      	mov	r0, r3
 800567a:	f04f 0100 	mov.w	r1, #0
 800567e:	4602      	mov	r2, r0
 8005680:	460b      	mov	r3, r1
 8005682:	1894      	adds	r4, r2, r2
 8005684:	60bc      	str	r4, [r7, #8]
 8005686:	415b      	adcs	r3, r3
 8005688:	60fb      	str	r3, [r7, #12]
 800568a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800568e:	1812      	adds	r2, r2, r0
 8005690:	eb41 0303 	adc.w	r3, r1, r3
 8005694:	f04f 0400 	mov.w	r4, #0
 8005698:	f04f 0500 	mov.w	r5, #0
 800569c:	00dd      	lsls	r5, r3, #3
 800569e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80056a2:	00d4      	lsls	r4, r2, #3
 80056a4:	4622      	mov	r2, r4
 80056a6:	462b      	mov	r3, r5
 80056a8:	1814      	adds	r4, r2, r0
 80056aa:	64bc      	str	r4, [r7, #72]	; 0x48
 80056ac:	414b      	adcs	r3, r1
 80056ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 80056b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80056b2:	685b      	ldr	r3, [r3, #4]
 80056b4:	4618      	mov	r0, r3
 80056b6:	f04f 0100 	mov.w	r1, #0
 80056ba:	f04f 0200 	mov.w	r2, #0
 80056be:	f04f 0300 	mov.w	r3, #0
 80056c2:	008b      	lsls	r3, r1, #2
 80056c4:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80056c8:	0082      	lsls	r2, r0, #2
 80056ca:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80056ce:	f7fa fdcf 	bl	8000270 <__aeabi_uldivmod>
 80056d2:	4602      	mov	r2, r0
 80056d4:	460b      	mov	r3, r1
 80056d6:	4b2f      	ldr	r3, [pc, #188]	; (8005794 <UART_SetConfig+0x38c>)
 80056d8:	fba3 1302 	umull	r1, r3, r3, r2
 80056dc:	095b      	lsrs	r3, r3, #5
 80056de:	2164      	movs	r1, #100	; 0x64
 80056e0:	fb01 f303 	mul.w	r3, r1, r3
 80056e4:	1ad3      	subs	r3, r2, r3
 80056e6:	011b      	lsls	r3, r3, #4
 80056e8:	3332      	adds	r3, #50	; 0x32
 80056ea:	4a2a      	ldr	r2, [pc, #168]	; (8005794 <UART_SetConfig+0x38c>)
 80056ec:	fba2 2303 	umull	r2, r3, r2, r3
 80056f0:	095b      	lsrs	r3, r3, #5
 80056f2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80056f6:	441e      	add	r6, r3
 80056f8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80056fa:	4618      	mov	r0, r3
 80056fc:	f04f 0100 	mov.w	r1, #0
 8005700:	4602      	mov	r2, r0
 8005702:	460b      	mov	r3, r1
 8005704:	1894      	adds	r4, r2, r2
 8005706:	603c      	str	r4, [r7, #0]
 8005708:	415b      	adcs	r3, r3
 800570a:	607b      	str	r3, [r7, #4]
 800570c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005710:	1812      	adds	r2, r2, r0
 8005712:	eb41 0303 	adc.w	r3, r1, r3
 8005716:	f04f 0400 	mov.w	r4, #0
 800571a:	f04f 0500 	mov.w	r5, #0
 800571e:	00dd      	lsls	r5, r3, #3
 8005720:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005724:	00d4      	lsls	r4, r2, #3
 8005726:	4622      	mov	r2, r4
 8005728:	462b      	mov	r3, r5
 800572a:	eb12 0a00 	adds.w	sl, r2, r0
 800572e:	eb43 0b01 	adc.w	fp, r3, r1
 8005732:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005734:	685b      	ldr	r3, [r3, #4]
 8005736:	4618      	mov	r0, r3
 8005738:	f04f 0100 	mov.w	r1, #0
 800573c:	f04f 0200 	mov.w	r2, #0
 8005740:	f04f 0300 	mov.w	r3, #0
 8005744:	008b      	lsls	r3, r1, #2
 8005746:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800574a:	0082      	lsls	r2, r0, #2
 800574c:	4650      	mov	r0, sl
 800574e:	4659      	mov	r1, fp
 8005750:	f7fa fd8e 	bl	8000270 <__aeabi_uldivmod>
 8005754:	4602      	mov	r2, r0
 8005756:	460b      	mov	r3, r1
 8005758:	4b0e      	ldr	r3, [pc, #56]	; (8005794 <UART_SetConfig+0x38c>)
 800575a:	fba3 1302 	umull	r1, r3, r3, r2
 800575e:	095b      	lsrs	r3, r3, #5
 8005760:	2164      	movs	r1, #100	; 0x64
 8005762:	fb01 f303 	mul.w	r3, r1, r3
 8005766:	1ad3      	subs	r3, r2, r3
 8005768:	011b      	lsls	r3, r3, #4
 800576a:	3332      	adds	r3, #50	; 0x32
 800576c:	4a09      	ldr	r2, [pc, #36]	; (8005794 <UART_SetConfig+0x38c>)
 800576e:	fba2 2303 	umull	r2, r3, r2, r3
 8005772:	095b      	lsrs	r3, r3, #5
 8005774:	f003 020f 	and.w	r2, r3, #15
 8005778:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	4432      	add	r2, r6
 800577e:	609a      	str	r2, [r3, #8]
}
 8005780:	bf00      	nop
 8005782:	377c      	adds	r7, #124	; 0x7c
 8005784:	46bd      	mov	sp, r7
 8005786:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800578a:	bf00      	nop
 800578c:	40011000 	.word	0x40011000
 8005790:	40011400 	.word	0x40011400
 8005794:	51eb851f 	.word	0x51eb851f

08005798 <__NVIC_SetPriority>:
{
 8005798:	b480      	push	{r7}
 800579a:	b083      	sub	sp, #12
 800579c:	af00      	add	r7, sp, #0
 800579e:	4603      	mov	r3, r0
 80057a0:	6039      	str	r1, [r7, #0]
 80057a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80057a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	db0a      	blt.n	80057c2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80057ac:	683b      	ldr	r3, [r7, #0]
 80057ae:	b2da      	uxtb	r2, r3
 80057b0:	490c      	ldr	r1, [pc, #48]	; (80057e4 <__NVIC_SetPriority+0x4c>)
 80057b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80057b6:	0112      	lsls	r2, r2, #4
 80057b8:	b2d2      	uxtb	r2, r2
 80057ba:	440b      	add	r3, r1
 80057bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80057c0:	e00a      	b.n	80057d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80057c2:	683b      	ldr	r3, [r7, #0]
 80057c4:	b2da      	uxtb	r2, r3
 80057c6:	4908      	ldr	r1, [pc, #32]	; (80057e8 <__NVIC_SetPriority+0x50>)
 80057c8:	79fb      	ldrb	r3, [r7, #7]
 80057ca:	f003 030f 	and.w	r3, r3, #15
 80057ce:	3b04      	subs	r3, #4
 80057d0:	0112      	lsls	r2, r2, #4
 80057d2:	b2d2      	uxtb	r2, r2
 80057d4:	440b      	add	r3, r1
 80057d6:	761a      	strb	r2, [r3, #24]
}
 80057d8:	bf00      	nop
 80057da:	370c      	adds	r7, #12
 80057dc:	46bd      	mov	sp, r7
 80057de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e2:	4770      	bx	lr
 80057e4:	e000e100 	.word	0xe000e100
 80057e8:	e000ed00 	.word	0xe000ed00

080057ec <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80057ec:	b580      	push	{r7, lr}
 80057ee:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80057f0:	4b05      	ldr	r3, [pc, #20]	; (8005808 <SysTick_Handler+0x1c>)
 80057f2:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80057f4:	f001 fcfe 	bl	80071f4 <xTaskGetSchedulerState>
 80057f8:	4603      	mov	r3, r0
 80057fa:	2b01      	cmp	r3, #1
 80057fc:	d001      	beq.n	8005802 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80057fe:	f002 fae3 	bl	8007dc8 <xPortSysTickHandler>
  }
}
 8005802:	bf00      	nop
 8005804:	bd80      	pop	{r7, pc}
 8005806:	bf00      	nop
 8005808:	e000e010 	.word	0xe000e010

0800580c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800580c:	b580      	push	{r7, lr}
 800580e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8005810:	2100      	movs	r1, #0
 8005812:	f06f 0004 	mvn.w	r0, #4
 8005816:	f7ff ffbf 	bl	8005798 <__NVIC_SetPriority>
#endif
}
 800581a:	bf00      	nop
 800581c:	bd80      	pop	{r7, pc}
	...

08005820 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005820:	b480      	push	{r7}
 8005822:	b083      	sub	sp, #12
 8005824:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005826:	f3ef 8305 	mrs	r3, IPSR
 800582a:	603b      	str	r3, [r7, #0]
  return(result);
 800582c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800582e:	2b00      	cmp	r3, #0
 8005830:	d003      	beq.n	800583a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8005832:	f06f 0305 	mvn.w	r3, #5
 8005836:	607b      	str	r3, [r7, #4]
 8005838:	e00c      	b.n	8005854 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800583a:	4b0a      	ldr	r3, [pc, #40]	; (8005864 <osKernelInitialize+0x44>)
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	2b00      	cmp	r3, #0
 8005840:	d105      	bne.n	800584e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8005842:	4b08      	ldr	r3, [pc, #32]	; (8005864 <osKernelInitialize+0x44>)
 8005844:	2201      	movs	r2, #1
 8005846:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005848:	2300      	movs	r3, #0
 800584a:	607b      	str	r3, [r7, #4]
 800584c:	e002      	b.n	8005854 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800584e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005852:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005854:	687b      	ldr	r3, [r7, #4]
}
 8005856:	4618      	mov	r0, r3
 8005858:	370c      	adds	r7, #12
 800585a:	46bd      	mov	sp, r7
 800585c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005860:	4770      	bx	lr
 8005862:	bf00      	nop
 8005864:	20000094 	.word	0x20000094

08005868 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005868:	b580      	push	{r7, lr}
 800586a:	b082      	sub	sp, #8
 800586c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800586e:	f3ef 8305 	mrs	r3, IPSR
 8005872:	603b      	str	r3, [r7, #0]
  return(result);
 8005874:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005876:	2b00      	cmp	r3, #0
 8005878:	d003      	beq.n	8005882 <osKernelStart+0x1a>
    stat = osErrorISR;
 800587a:	f06f 0305 	mvn.w	r3, #5
 800587e:	607b      	str	r3, [r7, #4]
 8005880:	e010      	b.n	80058a4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8005882:	4b0b      	ldr	r3, [pc, #44]	; (80058b0 <osKernelStart+0x48>)
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	2b01      	cmp	r3, #1
 8005888:	d109      	bne.n	800589e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800588a:	f7ff ffbf 	bl	800580c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800588e:	4b08      	ldr	r3, [pc, #32]	; (80058b0 <osKernelStart+0x48>)
 8005890:	2202      	movs	r2, #2
 8005892:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005894:	f001 f866 	bl	8006964 <vTaskStartScheduler>
      stat = osOK;
 8005898:	2300      	movs	r3, #0
 800589a:	607b      	str	r3, [r7, #4]
 800589c:	e002      	b.n	80058a4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800589e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80058a2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80058a4:	687b      	ldr	r3, [r7, #4]
}
 80058a6:	4618      	mov	r0, r3
 80058a8:	3708      	adds	r7, #8
 80058aa:	46bd      	mov	sp, r7
 80058ac:	bd80      	pop	{r7, pc}
 80058ae:	bf00      	nop
 80058b0:	20000094 	.word	0x20000094

080058b4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80058b4:	b580      	push	{r7, lr}
 80058b6:	b08e      	sub	sp, #56	; 0x38
 80058b8:	af04      	add	r7, sp, #16
 80058ba:	60f8      	str	r0, [r7, #12]
 80058bc:	60b9      	str	r1, [r7, #8]
 80058be:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80058c0:	2300      	movs	r3, #0
 80058c2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80058c4:	f3ef 8305 	mrs	r3, IPSR
 80058c8:	617b      	str	r3, [r7, #20]
  return(result);
 80058ca:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d17e      	bne.n	80059ce <osThreadNew+0x11a>
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d07b      	beq.n	80059ce <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80058d6:	2380      	movs	r3, #128	; 0x80
 80058d8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80058da:	2318      	movs	r3, #24
 80058dc:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80058de:	2300      	movs	r3, #0
 80058e0:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80058e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80058e6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d045      	beq.n	800597a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d002      	beq.n	80058fc <osThreadNew+0x48>
        name = attr->name;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	699b      	ldr	r3, [r3, #24]
 8005900:	2b00      	cmp	r3, #0
 8005902:	d002      	beq.n	800590a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	699b      	ldr	r3, [r3, #24]
 8005908:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800590a:	69fb      	ldr	r3, [r7, #28]
 800590c:	2b00      	cmp	r3, #0
 800590e:	d008      	beq.n	8005922 <osThreadNew+0x6e>
 8005910:	69fb      	ldr	r3, [r7, #28]
 8005912:	2b38      	cmp	r3, #56	; 0x38
 8005914:	d805      	bhi.n	8005922 <osThreadNew+0x6e>
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	685b      	ldr	r3, [r3, #4]
 800591a:	f003 0301 	and.w	r3, r3, #1
 800591e:	2b00      	cmp	r3, #0
 8005920:	d001      	beq.n	8005926 <osThreadNew+0x72>
        return (NULL);
 8005922:	2300      	movs	r3, #0
 8005924:	e054      	b.n	80059d0 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	695b      	ldr	r3, [r3, #20]
 800592a:	2b00      	cmp	r3, #0
 800592c:	d003      	beq.n	8005936 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	695b      	ldr	r3, [r3, #20]
 8005932:	089b      	lsrs	r3, r3, #2
 8005934:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	689b      	ldr	r3, [r3, #8]
 800593a:	2b00      	cmp	r3, #0
 800593c:	d00e      	beq.n	800595c <osThreadNew+0xa8>
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	68db      	ldr	r3, [r3, #12]
 8005942:	2b5b      	cmp	r3, #91	; 0x5b
 8005944:	d90a      	bls.n	800595c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800594a:	2b00      	cmp	r3, #0
 800594c:	d006      	beq.n	800595c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	695b      	ldr	r3, [r3, #20]
 8005952:	2b00      	cmp	r3, #0
 8005954:	d002      	beq.n	800595c <osThreadNew+0xa8>
        mem = 1;
 8005956:	2301      	movs	r3, #1
 8005958:	61bb      	str	r3, [r7, #24]
 800595a:	e010      	b.n	800597e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	689b      	ldr	r3, [r3, #8]
 8005960:	2b00      	cmp	r3, #0
 8005962:	d10c      	bne.n	800597e <osThreadNew+0xca>
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	68db      	ldr	r3, [r3, #12]
 8005968:	2b00      	cmp	r3, #0
 800596a:	d108      	bne.n	800597e <osThreadNew+0xca>
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	691b      	ldr	r3, [r3, #16]
 8005970:	2b00      	cmp	r3, #0
 8005972:	d104      	bne.n	800597e <osThreadNew+0xca>
          mem = 0;
 8005974:	2300      	movs	r3, #0
 8005976:	61bb      	str	r3, [r7, #24]
 8005978:	e001      	b.n	800597e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800597a:	2300      	movs	r3, #0
 800597c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800597e:	69bb      	ldr	r3, [r7, #24]
 8005980:	2b01      	cmp	r3, #1
 8005982:	d110      	bne.n	80059a6 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8005988:	687a      	ldr	r2, [r7, #4]
 800598a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800598c:	9202      	str	r2, [sp, #8]
 800598e:	9301      	str	r3, [sp, #4]
 8005990:	69fb      	ldr	r3, [r7, #28]
 8005992:	9300      	str	r3, [sp, #0]
 8005994:	68bb      	ldr	r3, [r7, #8]
 8005996:	6a3a      	ldr	r2, [r7, #32]
 8005998:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800599a:	68f8      	ldr	r0, [r7, #12]
 800599c:	f000 fe0c 	bl	80065b8 <xTaskCreateStatic>
 80059a0:	4603      	mov	r3, r0
 80059a2:	613b      	str	r3, [r7, #16]
 80059a4:	e013      	b.n	80059ce <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80059a6:	69bb      	ldr	r3, [r7, #24]
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d110      	bne.n	80059ce <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80059ac:	6a3b      	ldr	r3, [r7, #32]
 80059ae:	b29a      	uxth	r2, r3
 80059b0:	f107 0310 	add.w	r3, r7, #16
 80059b4:	9301      	str	r3, [sp, #4]
 80059b6:	69fb      	ldr	r3, [r7, #28]
 80059b8:	9300      	str	r3, [sp, #0]
 80059ba:	68bb      	ldr	r3, [r7, #8]
 80059bc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80059be:	68f8      	ldr	r0, [r7, #12]
 80059c0:	f000 fe57 	bl	8006672 <xTaskCreate>
 80059c4:	4603      	mov	r3, r0
 80059c6:	2b01      	cmp	r3, #1
 80059c8:	d001      	beq.n	80059ce <osThreadNew+0x11a>
            hTask = NULL;
 80059ca:	2300      	movs	r3, #0
 80059cc:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80059ce:	693b      	ldr	r3, [r7, #16]
}
 80059d0:	4618      	mov	r0, r3
 80059d2:	3728      	adds	r7, #40	; 0x28
 80059d4:	46bd      	mov	sp, r7
 80059d6:	bd80      	pop	{r7, pc}

080059d8 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80059d8:	b580      	push	{r7, lr}
 80059da:	b084      	sub	sp, #16
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80059e0:	f3ef 8305 	mrs	r3, IPSR
 80059e4:	60bb      	str	r3, [r7, #8]
  return(result);
 80059e6:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d003      	beq.n	80059f4 <osDelay+0x1c>
    stat = osErrorISR;
 80059ec:	f06f 0305 	mvn.w	r3, #5
 80059f0:	60fb      	str	r3, [r7, #12]
 80059f2:	e007      	b.n	8005a04 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80059f4:	2300      	movs	r3, #0
 80059f6:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d002      	beq.n	8005a04 <osDelay+0x2c>
      vTaskDelay(ticks);
 80059fe:	6878      	ldr	r0, [r7, #4]
 8005a00:	f000 ff7c 	bl	80068fc <vTaskDelay>
    }
  }

  return (stat);
 8005a04:	68fb      	ldr	r3, [r7, #12]
}
 8005a06:	4618      	mov	r0, r3
 8005a08:	3710      	adds	r7, #16
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	bd80      	pop	{r7, pc}
	...

08005a10 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005a10:	b480      	push	{r7}
 8005a12:	b085      	sub	sp, #20
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	60f8      	str	r0, [r7, #12]
 8005a18:	60b9      	str	r1, [r7, #8]
 8005a1a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	4a07      	ldr	r2, [pc, #28]	; (8005a3c <vApplicationGetIdleTaskMemory+0x2c>)
 8005a20:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005a22:	68bb      	ldr	r3, [r7, #8]
 8005a24:	4a06      	ldr	r2, [pc, #24]	; (8005a40 <vApplicationGetIdleTaskMemory+0x30>)
 8005a26:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	2280      	movs	r2, #128	; 0x80
 8005a2c:	601a      	str	r2, [r3, #0]
}
 8005a2e:	bf00      	nop
 8005a30:	3714      	adds	r7, #20
 8005a32:	46bd      	mov	sp, r7
 8005a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a38:	4770      	bx	lr
 8005a3a:	bf00      	nop
 8005a3c:	20000098 	.word	0x20000098
 8005a40:	200000f4 	.word	0x200000f4

08005a44 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005a44:	b480      	push	{r7}
 8005a46:	b085      	sub	sp, #20
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	60f8      	str	r0, [r7, #12]
 8005a4c:	60b9      	str	r1, [r7, #8]
 8005a4e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	4a07      	ldr	r2, [pc, #28]	; (8005a70 <vApplicationGetTimerTaskMemory+0x2c>)
 8005a54:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005a56:	68bb      	ldr	r3, [r7, #8]
 8005a58:	4a06      	ldr	r2, [pc, #24]	; (8005a74 <vApplicationGetTimerTaskMemory+0x30>)
 8005a5a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005a62:	601a      	str	r2, [r3, #0]
}
 8005a64:	bf00      	nop
 8005a66:	3714      	adds	r7, #20
 8005a68:	46bd      	mov	sp, r7
 8005a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6e:	4770      	bx	lr
 8005a70:	200002f4 	.word	0x200002f4
 8005a74:	20000350 	.word	0x20000350

08005a78 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005a78:	b480      	push	{r7}
 8005a7a:	b083      	sub	sp, #12
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	f103 0208 	add.w	r2, r3, #8
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005a90:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	f103 0208 	add.w	r2, r3, #8
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	f103 0208 	add.w	r2, r3, #8
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	2200      	movs	r2, #0
 8005aaa:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005aac:	bf00      	nop
 8005aae:	370c      	adds	r7, #12
 8005ab0:	46bd      	mov	sp, r7
 8005ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab6:	4770      	bx	lr

08005ab8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005ab8:	b480      	push	{r7}
 8005aba:	b083      	sub	sp, #12
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2200      	movs	r2, #0
 8005ac4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005ac6:	bf00      	nop
 8005ac8:	370c      	adds	r7, #12
 8005aca:	46bd      	mov	sp, r7
 8005acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad0:	4770      	bx	lr

08005ad2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005ad2:	b480      	push	{r7}
 8005ad4:	b085      	sub	sp, #20
 8005ad6:	af00      	add	r7, sp, #0
 8005ad8:	6078      	str	r0, [r7, #4]
 8005ada:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	685b      	ldr	r3, [r3, #4]
 8005ae0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005ae2:	683b      	ldr	r3, [r7, #0]
 8005ae4:	68fa      	ldr	r2, [r7, #12]
 8005ae6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	689a      	ldr	r2, [r3, #8]
 8005aec:	683b      	ldr	r3, [r7, #0]
 8005aee:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	689b      	ldr	r3, [r3, #8]
 8005af4:	683a      	ldr	r2, [r7, #0]
 8005af6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	683a      	ldr	r2, [r7, #0]
 8005afc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005afe:	683b      	ldr	r3, [r7, #0]
 8005b00:	687a      	ldr	r2, [r7, #4]
 8005b02:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	1c5a      	adds	r2, r3, #1
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	601a      	str	r2, [r3, #0]
}
 8005b0e:	bf00      	nop
 8005b10:	3714      	adds	r7, #20
 8005b12:	46bd      	mov	sp, r7
 8005b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b18:	4770      	bx	lr

08005b1a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005b1a:	b480      	push	{r7}
 8005b1c:	b085      	sub	sp, #20
 8005b1e:	af00      	add	r7, sp, #0
 8005b20:	6078      	str	r0, [r7, #4]
 8005b22:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005b24:	683b      	ldr	r3, [r7, #0]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005b2a:	68bb      	ldr	r3, [r7, #8]
 8005b2c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005b30:	d103      	bne.n	8005b3a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	691b      	ldr	r3, [r3, #16]
 8005b36:	60fb      	str	r3, [r7, #12]
 8005b38:	e00c      	b.n	8005b54 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	3308      	adds	r3, #8
 8005b3e:	60fb      	str	r3, [r7, #12]
 8005b40:	e002      	b.n	8005b48 <vListInsert+0x2e>
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	685b      	ldr	r3, [r3, #4]
 8005b46:	60fb      	str	r3, [r7, #12]
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	685b      	ldr	r3, [r3, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	68ba      	ldr	r2, [r7, #8]
 8005b50:	429a      	cmp	r2, r3
 8005b52:	d2f6      	bcs.n	8005b42 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	685a      	ldr	r2, [r3, #4]
 8005b58:	683b      	ldr	r3, [r7, #0]
 8005b5a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005b5c:	683b      	ldr	r3, [r7, #0]
 8005b5e:	685b      	ldr	r3, [r3, #4]
 8005b60:	683a      	ldr	r2, [r7, #0]
 8005b62:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005b64:	683b      	ldr	r3, [r7, #0]
 8005b66:	68fa      	ldr	r2, [r7, #12]
 8005b68:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	683a      	ldr	r2, [r7, #0]
 8005b6e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005b70:	683b      	ldr	r3, [r7, #0]
 8005b72:	687a      	ldr	r2, [r7, #4]
 8005b74:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	1c5a      	adds	r2, r3, #1
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	601a      	str	r2, [r3, #0]
}
 8005b80:	bf00      	nop
 8005b82:	3714      	adds	r7, #20
 8005b84:	46bd      	mov	sp, r7
 8005b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8a:	4770      	bx	lr

08005b8c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005b8c:	b480      	push	{r7}
 8005b8e:	b085      	sub	sp, #20
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	691b      	ldr	r3, [r3, #16]
 8005b98:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	685b      	ldr	r3, [r3, #4]
 8005b9e:	687a      	ldr	r2, [r7, #4]
 8005ba0:	6892      	ldr	r2, [r2, #8]
 8005ba2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	689b      	ldr	r3, [r3, #8]
 8005ba8:	687a      	ldr	r2, [r7, #4]
 8005baa:	6852      	ldr	r2, [r2, #4]
 8005bac:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	685b      	ldr	r3, [r3, #4]
 8005bb2:	687a      	ldr	r2, [r7, #4]
 8005bb4:	429a      	cmp	r2, r3
 8005bb6:	d103      	bne.n	8005bc0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	689a      	ldr	r2, [r3, #8]
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	2200      	movs	r2, #0
 8005bc4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	1e5a      	subs	r2, r3, #1
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	681b      	ldr	r3, [r3, #0]
}
 8005bd4:	4618      	mov	r0, r3
 8005bd6:	3714      	adds	r7, #20
 8005bd8:	46bd      	mov	sp, r7
 8005bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bde:	4770      	bx	lr

08005be0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005be0:	b580      	push	{r7, lr}
 8005be2:	b084      	sub	sp, #16
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	6078      	str	r0, [r7, #4]
 8005be8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d10a      	bne.n	8005c0a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005bf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bf8:	f383 8811 	msr	BASEPRI, r3
 8005bfc:	f3bf 8f6f 	isb	sy
 8005c00:	f3bf 8f4f 	dsb	sy
 8005c04:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005c06:	bf00      	nop
 8005c08:	e7fe      	b.n	8005c08 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005c0a:	f002 f84b 	bl	8007ca4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	681a      	ldr	r2, [r3, #0]
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c16:	68f9      	ldr	r1, [r7, #12]
 8005c18:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005c1a:	fb01 f303 	mul.w	r3, r1, r3
 8005c1e:	441a      	add	r2, r3
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	2200      	movs	r2, #0
 8005c28:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	681a      	ldr	r2, [r3, #0]
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	681a      	ldr	r2, [r3, #0]
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c3a:	3b01      	subs	r3, #1
 8005c3c:	68f9      	ldr	r1, [r7, #12]
 8005c3e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005c40:	fb01 f303 	mul.w	r3, r1, r3
 8005c44:	441a      	add	r2, r3
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	22ff      	movs	r2, #255	; 0xff
 8005c4e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	22ff      	movs	r2, #255	; 0xff
 8005c56:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005c5a:	683b      	ldr	r3, [r7, #0]
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d114      	bne.n	8005c8a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	691b      	ldr	r3, [r3, #16]
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d01a      	beq.n	8005c9e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	3310      	adds	r3, #16
 8005c6c:	4618      	mov	r0, r3
 8005c6e:	f001 f903 	bl	8006e78 <xTaskRemoveFromEventList>
 8005c72:	4603      	mov	r3, r0
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d012      	beq.n	8005c9e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005c78:	4b0c      	ldr	r3, [pc, #48]	; (8005cac <xQueueGenericReset+0xcc>)
 8005c7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c7e:	601a      	str	r2, [r3, #0]
 8005c80:	f3bf 8f4f 	dsb	sy
 8005c84:	f3bf 8f6f 	isb	sy
 8005c88:	e009      	b.n	8005c9e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	3310      	adds	r3, #16
 8005c8e:	4618      	mov	r0, r3
 8005c90:	f7ff fef2 	bl	8005a78 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	3324      	adds	r3, #36	; 0x24
 8005c98:	4618      	mov	r0, r3
 8005c9a:	f7ff feed 	bl	8005a78 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005c9e:	f002 f831 	bl	8007d04 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005ca2:	2301      	movs	r3, #1
}
 8005ca4:	4618      	mov	r0, r3
 8005ca6:	3710      	adds	r7, #16
 8005ca8:	46bd      	mov	sp, r7
 8005caa:	bd80      	pop	{r7, pc}
 8005cac:	e000ed04 	.word	0xe000ed04

08005cb0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005cb0:	b580      	push	{r7, lr}
 8005cb2:	b08e      	sub	sp, #56	; 0x38
 8005cb4:	af02      	add	r7, sp, #8
 8005cb6:	60f8      	str	r0, [r7, #12]
 8005cb8:	60b9      	str	r1, [r7, #8]
 8005cba:	607a      	str	r2, [r7, #4]
 8005cbc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d10a      	bne.n	8005cda <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8005cc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cc8:	f383 8811 	msr	BASEPRI, r3
 8005ccc:	f3bf 8f6f 	isb	sy
 8005cd0:	f3bf 8f4f 	dsb	sy
 8005cd4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005cd6:	bf00      	nop
 8005cd8:	e7fe      	b.n	8005cd8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005cda:	683b      	ldr	r3, [r7, #0]
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d10a      	bne.n	8005cf6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8005ce0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ce4:	f383 8811 	msr	BASEPRI, r3
 8005ce8:	f3bf 8f6f 	isb	sy
 8005cec:	f3bf 8f4f 	dsb	sy
 8005cf0:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005cf2:	bf00      	nop
 8005cf4:	e7fe      	b.n	8005cf4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d002      	beq.n	8005d02 <xQueueGenericCreateStatic+0x52>
 8005cfc:	68bb      	ldr	r3, [r7, #8]
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d001      	beq.n	8005d06 <xQueueGenericCreateStatic+0x56>
 8005d02:	2301      	movs	r3, #1
 8005d04:	e000      	b.n	8005d08 <xQueueGenericCreateStatic+0x58>
 8005d06:	2300      	movs	r3, #0
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d10a      	bne.n	8005d22 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8005d0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d10:	f383 8811 	msr	BASEPRI, r3
 8005d14:	f3bf 8f6f 	isb	sy
 8005d18:	f3bf 8f4f 	dsb	sy
 8005d1c:	623b      	str	r3, [r7, #32]
}
 8005d1e:	bf00      	nop
 8005d20:	e7fe      	b.n	8005d20 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d102      	bne.n	8005d2e <xQueueGenericCreateStatic+0x7e>
 8005d28:	68bb      	ldr	r3, [r7, #8]
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d101      	bne.n	8005d32 <xQueueGenericCreateStatic+0x82>
 8005d2e:	2301      	movs	r3, #1
 8005d30:	e000      	b.n	8005d34 <xQueueGenericCreateStatic+0x84>
 8005d32:	2300      	movs	r3, #0
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d10a      	bne.n	8005d4e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8005d38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d3c:	f383 8811 	msr	BASEPRI, r3
 8005d40:	f3bf 8f6f 	isb	sy
 8005d44:	f3bf 8f4f 	dsb	sy
 8005d48:	61fb      	str	r3, [r7, #28]
}
 8005d4a:	bf00      	nop
 8005d4c:	e7fe      	b.n	8005d4c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005d4e:	2350      	movs	r3, #80	; 0x50
 8005d50:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005d52:	697b      	ldr	r3, [r7, #20]
 8005d54:	2b50      	cmp	r3, #80	; 0x50
 8005d56:	d00a      	beq.n	8005d6e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8005d58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d5c:	f383 8811 	msr	BASEPRI, r3
 8005d60:	f3bf 8f6f 	isb	sy
 8005d64:	f3bf 8f4f 	dsb	sy
 8005d68:	61bb      	str	r3, [r7, #24]
}
 8005d6a:	bf00      	nop
 8005d6c:	e7fe      	b.n	8005d6c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005d6e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005d70:	683b      	ldr	r3, [r7, #0]
 8005d72:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005d74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d00d      	beq.n	8005d96 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005d7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d7c:	2201      	movs	r2, #1
 8005d7e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005d82:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005d86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d88:	9300      	str	r3, [sp, #0]
 8005d8a:	4613      	mov	r3, r2
 8005d8c:	687a      	ldr	r2, [r7, #4]
 8005d8e:	68b9      	ldr	r1, [r7, #8]
 8005d90:	68f8      	ldr	r0, [r7, #12]
 8005d92:	f000 f805 	bl	8005da0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005d96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005d98:	4618      	mov	r0, r3
 8005d9a:	3730      	adds	r7, #48	; 0x30
 8005d9c:	46bd      	mov	sp, r7
 8005d9e:	bd80      	pop	{r7, pc}

08005da0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005da0:	b580      	push	{r7, lr}
 8005da2:	b084      	sub	sp, #16
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	60f8      	str	r0, [r7, #12]
 8005da8:	60b9      	str	r1, [r7, #8]
 8005daa:	607a      	str	r2, [r7, #4]
 8005dac:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005dae:	68bb      	ldr	r3, [r7, #8]
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d103      	bne.n	8005dbc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005db4:	69bb      	ldr	r3, [r7, #24]
 8005db6:	69ba      	ldr	r2, [r7, #24]
 8005db8:	601a      	str	r2, [r3, #0]
 8005dba:	e002      	b.n	8005dc2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005dbc:	69bb      	ldr	r3, [r7, #24]
 8005dbe:	687a      	ldr	r2, [r7, #4]
 8005dc0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005dc2:	69bb      	ldr	r3, [r7, #24]
 8005dc4:	68fa      	ldr	r2, [r7, #12]
 8005dc6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005dc8:	69bb      	ldr	r3, [r7, #24]
 8005dca:	68ba      	ldr	r2, [r7, #8]
 8005dcc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005dce:	2101      	movs	r1, #1
 8005dd0:	69b8      	ldr	r0, [r7, #24]
 8005dd2:	f7ff ff05 	bl	8005be0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005dd6:	69bb      	ldr	r3, [r7, #24]
 8005dd8:	78fa      	ldrb	r2, [r7, #3]
 8005dda:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005dde:	bf00      	nop
 8005de0:	3710      	adds	r7, #16
 8005de2:	46bd      	mov	sp, r7
 8005de4:	bd80      	pop	{r7, pc}
	...

08005de8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005de8:	b580      	push	{r7, lr}
 8005dea:	b08e      	sub	sp, #56	; 0x38
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	60f8      	str	r0, [r7, #12]
 8005df0:	60b9      	str	r1, [r7, #8]
 8005df2:	607a      	str	r2, [r7, #4]
 8005df4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005df6:	2300      	movs	r3, #0
 8005df8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005dfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d10a      	bne.n	8005e1a <xQueueGenericSend+0x32>
	__asm volatile
 8005e04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e08:	f383 8811 	msr	BASEPRI, r3
 8005e0c:	f3bf 8f6f 	isb	sy
 8005e10:	f3bf 8f4f 	dsb	sy
 8005e14:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005e16:	bf00      	nop
 8005e18:	e7fe      	b.n	8005e18 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005e1a:	68bb      	ldr	r3, [r7, #8]
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d103      	bne.n	8005e28 <xQueueGenericSend+0x40>
 8005e20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d101      	bne.n	8005e2c <xQueueGenericSend+0x44>
 8005e28:	2301      	movs	r3, #1
 8005e2a:	e000      	b.n	8005e2e <xQueueGenericSend+0x46>
 8005e2c:	2300      	movs	r3, #0
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d10a      	bne.n	8005e48 <xQueueGenericSend+0x60>
	__asm volatile
 8005e32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e36:	f383 8811 	msr	BASEPRI, r3
 8005e3a:	f3bf 8f6f 	isb	sy
 8005e3e:	f3bf 8f4f 	dsb	sy
 8005e42:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005e44:	bf00      	nop
 8005e46:	e7fe      	b.n	8005e46 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005e48:	683b      	ldr	r3, [r7, #0]
 8005e4a:	2b02      	cmp	r3, #2
 8005e4c:	d103      	bne.n	8005e56 <xQueueGenericSend+0x6e>
 8005e4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e52:	2b01      	cmp	r3, #1
 8005e54:	d101      	bne.n	8005e5a <xQueueGenericSend+0x72>
 8005e56:	2301      	movs	r3, #1
 8005e58:	e000      	b.n	8005e5c <xQueueGenericSend+0x74>
 8005e5a:	2300      	movs	r3, #0
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d10a      	bne.n	8005e76 <xQueueGenericSend+0x8e>
	__asm volatile
 8005e60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e64:	f383 8811 	msr	BASEPRI, r3
 8005e68:	f3bf 8f6f 	isb	sy
 8005e6c:	f3bf 8f4f 	dsb	sy
 8005e70:	623b      	str	r3, [r7, #32]
}
 8005e72:	bf00      	nop
 8005e74:	e7fe      	b.n	8005e74 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005e76:	f001 f9bd 	bl	80071f4 <xTaskGetSchedulerState>
 8005e7a:	4603      	mov	r3, r0
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d102      	bne.n	8005e86 <xQueueGenericSend+0x9e>
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d101      	bne.n	8005e8a <xQueueGenericSend+0xa2>
 8005e86:	2301      	movs	r3, #1
 8005e88:	e000      	b.n	8005e8c <xQueueGenericSend+0xa4>
 8005e8a:	2300      	movs	r3, #0
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d10a      	bne.n	8005ea6 <xQueueGenericSend+0xbe>
	__asm volatile
 8005e90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e94:	f383 8811 	msr	BASEPRI, r3
 8005e98:	f3bf 8f6f 	isb	sy
 8005e9c:	f3bf 8f4f 	dsb	sy
 8005ea0:	61fb      	str	r3, [r7, #28]
}
 8005ea2:	bf00      	nop
 8005ea4:	e7fe      	b.n	8005ea4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005ea6:	f001 fefd 	bl	8007ca4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005eaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005eac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005eae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005eb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005eb2:	429a      	cmp	r2, r3
 8005eb4:	d302      	bcc.n	8005ebc <xQueueGenericSend+0xd4>
 8005eb6:	683b      	ldr	r3, [r7, #0]
 8005eb8:	2b02      	cmp	r3, #2
 8005eba:	d129      	bne.n	8005f10 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005ebc:	683a      	ldr	r2, [r7, #0]
 8005ebe:	68b9      	ldr	r1, [r7, #8]
 8005ec0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005ec2:	f000 fa0b 	bl	80062dc <prvCopyDataToQueue>
 8005ec6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005ec8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d010      	beq.n	8005ef2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005ed0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ed2:	3324      	adds	r3, #36	; 0x24
 8005ed4:	4618      	mov	r0, r3
 8005ed6:	f000 ffcf 	bl	8006e78 <xTaskRemoveFromEventList>
 8005eda:	4603      	mov	r3, r0
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d013      	beq.n	8005f08 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005ee0:	4b3f      	ldr	r3, [pc, #252]	; (8005fe0 <xQueueGenericSend+0x1f8>)
 8005ee2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ee6:	601a      	str	r2, [r3, #0]
 8005ee8:	f3bf 8f4f 	dsb	sy
 8005eec:	f3bf 8f6f 	isb	sy
 8005ef0:	e00a      	b.n	8005f08 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005ef2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d007      	beq.n	8005f08 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005ef8:	4b39      	ldr	r3, [pc, #228]	; (8005fe0 <xQueueGenericSend+0x1f8>)
 8005efa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005efe:	601a      	str	r2, [r3, #0]
 8005f00:	f3bf 8f4f 	dsb	sy
 8005f04:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005f08:	f001 fefc 	bl	8007d04 <vPortExitCritical>
				return pdPASS;
 8005f0c:	2301      	movs	r3, #1
 8005f0e:	e063      	b.n	8005fd8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d103      	bne.n	8005f1e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005f16:	f001 fef5 	bl	8007d04 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005f1a:	2300      	movs	r3, #0
 8005f1c:	e05c      	b.n	8005fd8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005f1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d106      	bne.n	8005f32 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005f24:	f107 0314 	add.w	r3, r7, #20
 8005f28:	4618      	mov	r0, r3
 8005f2a:	f001 f809 	bl	8006f40 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005f2e:	2301      	movs	r3, #1
 8005f30:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005f32:	f001 fee7 	bl	8007d04 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005f36:	f000 fd7b 	bl	8006a30 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005f3a:	f001 feb3 	bl	8007ca4 <vPortEnterCritical>
 8005f3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f40:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005f44:	b25b      	sxtb	r3, r3
 8005f46:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005f4a:	d103      	bne.n	8005f54 <xQueueGenericSend+0x16c>
 8005f4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f4e:	2200      	movs	r2, #0
 8005f50:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005f54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f56:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005f5a:	b25b      	sxtb	r3, r3
 8005f5c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005f60:	d103      	bne.n	8005f6a <xQueueGenericSend+0x182>
 8005f62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f64:	2200      	movs	r2, #0
 8005f66:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005f6a:	f001 fecb 	bl	8007d04 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005f6e:	1d3a      	adds	r2, r7, #4
 8005f70:	f107 0314 	add.w	r3, r7, #20
 8005f74:	4611      	mov	r1, r2
 8005f76:	4618      	mov	r0, r3
 8005f78:	f000 fff8 	bl	8006f6c <xTaskCheckForTimeOut>
 8005f7c:	4603      	mov	r3, r0
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d124      	bne.n	8005fcc <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005f82:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005f84:	f000 faa2 	bl	80064cc <prvIsQueueFull>
 8005f88:	4603      	mov	r3, r0
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d018      	beq.n	8005fc0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005f8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f90:	3310      	adds	r3, #16
 8005f92:	687a      	ldr	r2, [r7, #4]
 8005f94:	4611      	mov	r1, r2
 8005f96:	4618      	mov	r0, r3
 8005f98:	f000 ff1e 	bl	8006dd8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005f9c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005f9e:	f000 fa2d 	bl	80063fc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005fa2:	f000 fd53 	bl	8006a4c <xTaskResumeAll>
 8005fa6:	4603      	mov	r3, r0
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	f47f af7c 	bne.w	8005ea6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8005fae:	4b0c      	ldr	r3, [pc, #48]	; (8005fe0 <xQueueGenericSend+0x1f8>)
 8005fb0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005fb4:	601a      	str	r2, [r3, #0]
 8005fb6:	f3bf 8f4f 	dsb	sy
 8005fba:	f3bf 8f6f 	isb	sy
 8005fbe:	e772      	b.n	8005ea6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005fc0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005fc2:	f000 fa1b 	bl	80063fc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005fc6:	f000 fd41 	bl	8006a4c <xTaskResumeAll>
 8005fca:	e76c      	b.n	8005ea6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005fcc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005fce:	f000 fa15 	bl	80063fc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005fd2:	f000 fd3b 	bl	8006a4c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005fd6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005fd8:	4618      	mov	r0, r3
 8005fda:	3738      	adds	r7, #56	; 0x38
 8005fdc:	46bd      	mov	sp, r7
 8005fde:	bd80      	pop	{r7, pc}
 8005fe0:	e000ed04 	.word	0xe000ed04

08005fe4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005fe4:	b580      	push	{r7, lr}
 8005fe6:	b090      	sub	sp, #64	; 0x40
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	60f8      	str	r0, [r7, #12]
 8005fec:	60b9      	str	r1, [r7, #8]
 8005fee:	607a      	str	r2, [r7, #4]
 8005ff0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8005ff6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d10a      	bne.n	8006012 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8005ffc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006000:	f383 8811 	msr	BASEPRI, r3
 8006004:	f3bf 8f6f 	isb	sy
 8006008:	f3bf 8f4f 	dsb	sy
 800600c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800600e:	bf00      	nop
 8006010:	e7fe      	b.n	8006010 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006012:	68bb      	ldr	r3, [r7, #8]
 8006014:	2b00      	cmp	r3, #0
 8006016:	d103      	bne.n	8006020 <xQueueGenericSendFromISR+0x3c>
 8006018:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800601a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800601c:	2b00      	cmp	r3, #0
 800601e:	d101      	bne.n	8006024 <xQueueGenericSendFromISR+0x40>
 8006020:	2301      	movs	r3, #1
 8006022:	e000      	b.n	8006026 <xQueueGenericSendFromISR+0x42>
 8006024:	2300      	movs	r3, #0
 8006026:	2b00      	cmp	r3, #0
 8006028:	d10a      	bne.n	8006040 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800602a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800602e:	f383 8811 	msr	BASEPRI, r3
 8006032:	f3bf 8f6f 	isb	sy
 8006036:	f3bf 8f4f 	dsb	sy
 800603a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800603c:	bf00      	nop
 800603e:	e7fe      	b.n	800603e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006040:	683b      	ldr	r3, [r7, #0]
 8006042:	2b02      	cmp	r3, #2
 8006044:	d103      	bne.n	800604e <xQueueGenericSendFromISR+0x6a>
 8006046:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006048:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800604a:	2b01      	cmp	r3, #1
 800604c:	d101      	bne.n	8006052 <xQueueGenericSendFromISR+0x6e>
 800604e:	2301      	movs	r3, #1
 8006050:	e000      	b.n	8006054 <xQueueGenericSendFromISR+0x70>
 8006052:	2300      	movs	r3, #0
 8006054:	2b00      	cmp	r3, #0
 8006056:	d10a      	bne.n	800606e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8006058:	f04f 0350 	mov.w	r3, #80	; 0x50
 800605c:	f383 8811 	msr	BASEPRI, r3
 8006060:	f3bf 8f6f 	isb	sy
 8006064:	f3bf 8f4f 	dsb	sy
 8006068:	623b      	str	r3, [r7, #32]
}
 800606a:	bf00      	nop
 800606c:	e7fe      	b.n	800606c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800606e:	f001 fefb 	bl	8007e68 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006072:	f3ef 8211 	mrs	r2, BASEPRI
 8006076:	f04f 0350 	mov.w	r3, #80	; 0x50
 800607a:	f383 8811 	msr	BASEPRI, r3
 800607e:	f3bf 8f6f 	isb	sy
 8006082:	f3bf 8f4f 	dsb	sy
 8006086:	61fa      	str	r2, [r7, #28]
 8006088:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800608a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800608c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800608e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006090:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006092:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006094:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006096:	429a      	cmp	r2, r3
 8006098:	d302      	bcc.n	80060a0 <xQueueGenericSendFromISR+0xbc>
 800609a:	683b      	ldr	r3, [r7, #0]
 800609c:	2b02      	cmp	r3, #2
 800609e:	d12f      	bne.n	8006100 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80060a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060a2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80060a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80060aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060ae:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80060b0:	683a      	ldr	r2, [r7, #0]
 80060b2:	68b9      	ldr	r1, [r7, #8]
 80060b4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80060b6:	f000 f911 	bl	80062dc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80060ba:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80060be:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80060c2:	d112      	bne.n	80060ea <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80060c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d016      	beq.n	80060fa <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80060cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060ce:	3324      	adds	r3, #36	; 0x24
 80060d0:	4618      	mov	r0, r3
 80060d2:	f000 fed1 	bl	8006e78 <xTaskRemoveFromEventList>
 80060d6:	4603      	mov	r3, r0
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d00e      	beq.n	80060fa <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d00b      	beq.n	80060fa <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	2201      	movs	r2, #1
 80060e6:	601a      	str	r2, [r3, #0]
 80060e8:	e007      	b.n	80060fa <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80060ea:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80060ee:	3301      	adds	r3, #1
 80060f0:	b2db      	uxtb	r3, r3
 80060f2:	b25a      	sxtb	r2, r3
 80060f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80060fa:	2301      	movs	r3, #1
 80060fc:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80060fe:	e001      	b.n	8006104 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006100:	2300      	movs	r3, #0
 8006102:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006104:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006106:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006108:	697b      	ldr	r3, [r7, #20]
 800610a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800610e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006110:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8006112:	4618      	mov	r0, r3
 8006114:	3740      	adds	r7, #64	; 0x40
 8006116:	46bd      	mov	sp, r7
 8006118:	bd80      	pop	{r7, pc}
	...

0800611c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800611c:	b580      	push	{r7, lr}
 800611e:	b08c      	sub	sp, #48	; 0x30
 8006120:	af00      	add	r7, sp, #0
 8006122:	60f8      	str	r0, [r7, #12]
 8006124:	60b9      	str	r1, [r7, #8]
 8006126:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006128:	2300      	movs	r3, #0
 800612a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006130:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006132:	2b00      	cmp	r3, #0
 8006134:	d10a      	bne.n	800614c <xQueueReceive+0x30>
	__asm volatile
 8006136:	f04f 0350 	mov.w	r3, #80	; 0x50
 800613a:	f383 8811 	msr	BASEPRI, r3
 800613e:	f3bf 8f6f 	isb	sy
 8006142:	f3bf 8f4f 	dsb	sy
 8006146:	623b      	str	r3, [r7, #32]
}
 8006148:	bf00      	nop
 800614a:	e7fe      	b.n	800614a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800614c:	68bb      	ldr	r3, [r7, #8]
 800614e:	2b00      	cmp	r3, #0
 8006150:	d103      	bne.n	800615a <xQueueReceive+0x3e>
 8006152:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006156:	2b00      	cmp	r3, #0
 8006158:	d101      	bne.n	800615e <xQueueReceive+0x42>
 800615a:	2301      	movs	r3, #1
 800615c:	e000      	b.n	8006160 <xQueueReceive+0x44>
 800615e:	2300      	movs	r3, #0
 8006160:	2b00      	cmp	r3, #0
 8006162:	d10a      	bne.n	800617a <xQueueReceive+0x5e>
	__asm volatile
 8006164:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006168:	f383 8811 	msr	BASEPRI, r3
 800616c:	f3bf 8f6f 	isb	sy
 8006170:	f3bf 8f4f 	dsb	sy
 8006174:	61fb      	str	r3, [r7, #28]
}
 8006176:	bf00      	nop
 8006178:	e7fe      	b.n	8006178 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800617a:	f001 f83b 	bl	80071f4 <xTaskGetSchedulerState>
 800617e:	4603      	mov	r3, r0
 8006180:	2b00      	cmp	r3, #0
 8006182:	d102      	bne.n	800618a <xQueueReceive+0x6e>
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	2b00      	cmp	r3, #0
 8006188:	d101      	bne.n	800618e <xQueueReceive+0x72>
 800618a:	2301      	movs	r3, #1
 800618c:	e000      	b.n	8006190 <xQueueReceive+0x74>
 800618e:	2300      	movs	r3, #0
 8006190:	2b00      	cmp	r3, #0
 8006192:	d10a      	bne.n	80061aa <xQueueReceive+0x8e>
	__asm volatile
 8006194:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006198:	f383 8811 	msr	BASEPRI, r3
 800619c:	f3bf 8f6f 	isb	sy
 80061a0:	f3bf 8f4f 	dsb	sy
 80061a4:	61bb      	str	r3, [r7, #24]
}
 80061a6:	bf00      	nop
 80061a8:	e7fe      	b.n	80061a8 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80061aa:	f001 fd7b 	bl	8007ca4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80061ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061b2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80061b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d01f      	beq.n	80061fa <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80061ba:	68b9      	ldr	r1, [r7, #8]
 80061bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80061be:	f000 f8f7 	bl	80063b0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80061c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061c4:	1e5a      	subs	r2, r3, #1
 80061c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061c8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80061ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061cc:	691b      	ldr	r3, [r3, #16]
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d00f      	beq.n	80061f2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80061d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061d4:	3310      	adds	r3, #16
 80061d6:	4618      	mov	r0, r3
 80061d8:	f000 fe4e 	bl	8006e78 <xTaskRemoveFromEventList>
 80061dc:	4603      	mov	r3, r0
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d007      	beq.n	80061f2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80061e2:	4b3d      	ldr	r3, [pc, #244]	; (80062d8 <xQueueReceive+0x1bc>)
 80061e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80061e8:	601a      	str	r2, [r3, #0]
 80061ea:	f3bf 8f4f 	dsb	sy
 80061ee:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80061f2:	f001 fd87 	bl	8007d04 <vPortExitCritical>
				return pdPASS;
 80061f6:	2301      	movs	r3, #1
 80061f8:	e069      	b.n	80062ce <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d103      	bne.n	8006208 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006200:	f001 fd80 	bl	8007d04 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006204:	2300      	movs	r3, #0
 8006206:	e062      	b.n	80062ce <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006208:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800620a:	2b00      	cmp	r3, #0
 800620c:	d106      	bne.n	800621c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800620e:	f107 0310 	add.w	r3, r7, #16
 8006212:	4618      	mov	r0, r3
 8006214:	f000 fe94 	bl	8006f40 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006218:	2301      	movs	r3, #1
 800621a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800621c:	f001 fd72 	bl	8007d04 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006220:	f000 fc06 	bl	8006a30 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006224:	f001 fd3e 	bl	8007ca4 <vPortEnterCritical>
 8006228:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800622a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800622e:	b25b      	sxtb	r3, r3
 8006230:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006234:	d103      	bne.n	800623e <xQueueReceive+0x122>
 8006236:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006238:	2200      	movs	r2, #0
 800623a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800623e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006240:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006244:	b25b      	sxtb	r3, r3
 8006246:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800624a:	d103      	bne.n	8006254 <xQueueReceive+0x138>
 800624c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800624e:	2200      	movs	r2, #0
 8006250:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006254:	f001 fd56 	bl	8007d04 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006258:	1d3a      	adds	r2, r7, #4
 800625a:	f107 0310 	add.w	r3, r7, #16
 800625e:	4611      	mov	r1, r2
 8006260:	4618      	mov	r0, r3
 8006262:	f000 fe83 	bl	8006f6c <xTaskCheckForTimeOut>
 8006266:	4603      	mov	r3, r0
 8006268:	2b00      	cmp	r3, #0
 800626a:	d123      	bne.n	80062b4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800626c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800626e:	f000 f917 	bl	80064a0 <prvIsQueueEmpty>
 8006272:	4603      	mov	r3, r0
 8006274:	2b00      	cmp	r3, #0
 8006276:	d017      	beq.n	80062a8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006278:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800627a:	3324      	adds	r3, #36	; 0x24
 800627c:	687a      	ldr	r2, [r7, #4]
 800627e:	4611      	mov	r1, r2
 8006280:	4618      	mov	r0, r3
 8006282:	f000 fda9 	bl	8006dd8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006286:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006288:	f000 f8b8 	bl	80063fc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800628c:	f000 fbde 	bl	8006a4c <xTaskResumeAll>
 8006290:	4603      	mov	r3, r0
 8006292:	2b00      	cmp	r3, #0
 8006294:	d189      	bne.n	80061aa <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8006296:	4b10      	ldr	r3, [pc, #64]	; (80062d8 <xQueueReceive+0x1bc>)
 8006298:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800629c:	601a      	str	r2, [r3, #0]
 800629e:	f3bf 8f4f 	dsb	sy
 80062a2:	f3bf 8f6f 	isb	sy
 80062a6:	e780      	b.n	80061aa <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80062a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80062aa:	f000 f8a7 	bl	80063fc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80062ae:	f000 fbcd 	bl	8006a4c <xTaskResumeAll>
 80062b2:	e77a      	b.n	80061aa <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80062b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80062b6:	f000 f8a1 	bl	80063fc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80062ba:	f000 fbc7 	bl	8006a4c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80062be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80062c0:	f000 f8ee 	bl	80064a0 <prvIsQueueEmpty>
 80062c4:	4603      	mov	r3, r0
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	f43f af6f 	beq.w	80061aa <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80062cc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80062ce:	4618      	mov	r0, r3
 80062d0:	3730      	adds	r7, #48	; 0x30
 80062d2:	46bd      	mov	sp, r7
 80062d4:	bd80      	pop	{r7, pc}
 80062d6:	bf00      	nop
 80062d8:	e000ed04 	.word	0xe000ed04

080062dc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80062dc:	b580      	push	{r7, lr}
 80062de:	b086      	sub	sp, #24
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	60f8      	str	r0, [r7, #12]
 80062e4:	60b9      	str	r1, [r7, #8]
 80062e6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80062e8:	2300      	movs	r3, #0
 80062ea:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062f0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d10d      	bne.n	8006316 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d14d      	bne.n	800639e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	689b      	ldr	r3, [r3, #8]
 8006306:	4618      	mov	r0, r3
 8006308:	f000 ff92 	bl	8007230 <xTaskPriorityDisinherit>
 800630c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	2200      	movs	r2, #0
 8006312:	609a      	str	r2, [r3, #8]
 8006314:	e043      	b.n	800639e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	2b00      	cmp	r3, #0
 800631a:	d119      	bne.n	8006350 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	6858      	ldr	r0, [r3, #4]
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006324:	461a      	mov	r2, r3
 8006326:	68b9      	ldr	r1, [r7, #8]
 8006328:	f001 fff2 	bl	8008310 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	685a      	ldr	r2, [r3, #4]
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006334:	441a      	add	r2, r3
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	685a      	ldr	r2, [r3, #4]
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	689b      	ldr	r3, [r3, #8]
 8006342:	429a      	cmp	r2, r3
 8006344:	d32b      	bcc.n	800639e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	681a      	ldr	r2, [r3, #0]
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	605a      	str	r2, [r3, #4]
 800634e:	e026      	b.n	800639e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	68d8      	ldr	r0, [r3, #12]
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006358:	461a      	mov	r2, r3
 800635a:	68b9      	ldr	r1, [r7, #8]
 800635c:	f001 ffd8 	bl	8008310 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	68da      	ldr	r2, [r3, #12]
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006368:	425b      	negs	r3, r3
 800636a:	441a      	add	r2, r3
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	68da      	ldr	r2, [r3, #12]
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	429a      	cmp	r2, r3
 800637a:	d207      	bcs.n	800638c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	689a      	ldr	r2, [r3, #8]
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006384:	425b      	negs	r3, r3
 8006386:	441a      	add	r2, r3
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	2b02      	cmp	r3, #2
 8006390:	d105      	bne.n	800639e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006392:	693b      	ldr	r3, [r7, #16]
 8006394:	2b00      	cmp	r3, #0
 8006396:	d002      	beq.n	800639e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006398:	693b      	ldr	r3, [r7, #16]
 800639a:	3b01      	subs	r3, #1
 800639c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800639e:	693b      	ldr	r3, [r7, #16]
 80063a0:	1c5a      	adds	r2, r3, #1
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80063a6:	697b      	ldr	r3, [r7, #20]
}
 80063a8:	4618      	mov	r0, r3
 80063aa:	3718      	adds	r7, #24
 80063ac:	46bd      	mov	sp, r7
 80063ae:	bd80      	pop	{r7, pc}

080063b0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80063b0:	b580      	push	{r7, lr}
 80063b2:	b082      	sub	sp, #8
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	6078      	str	r0, [r7, #4]
 80063b8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d018      	beq.n	80063f4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	68da      	ldr	r2, [r3, #12]
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063ca:	441a      	add	r2, r3
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	68da      	ldr	r2, [r3, #12]
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	689b      	ldr	r3, [r3, #8]
 80063d8:	429a      	cmp	r2, r3
 80063da:	d303      	bcc.n	80063e4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681a      	ldr	r2, [r3, #0]
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	68d9      	ldr	r1, [r3, #12]
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063ec:	461a      	mov	r2, r3
 80063ee:	6838      	ldr	r0, [r7, #0]
 80063f0:	f001 ff8e 	bl	8008310 <memcpy>
	}
}
 80063f4:	bf00      	nop
 80063f6:	3708      	adds	r7, #8
 80063f8:	46bd      	mov	sp, r7
 80063fa:	bd80      	pop	{r7, pc}

080063fc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80063fc:	b580      	push	{r7, lr}
 80063fe:	b084      	sub	sp, #16
 8006400:	af00      	add	r7, sp, #0
 8006402:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006404:	f001 fc4e 	bl	8007ca4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800640e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006410:	e011      	b.n	8006436 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006416:	2b00      	cmp	r3, #0
 8006418:	d012      	beq.n	8006440 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	3324      	adds	r3, #36	; 0x24
 800641e:	4618      	mov	r0, r3
 8006420:	f000 fd2a 	bl	8006e78 <xTaskRemoveFromEventList>
 8006424:	4603      	mov	r3, r0
 8006426:	2b00      	cmp	r3, #0
 8006428:	d001      	beq.n	800642e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800642a:	f000 fe01 	bl	8007030 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800642e:	7bfb      	ldrb	r3, [r7, #15]
 8006430:	3b01      	subs	r3, #1
 8006432:	b2db      	uxtb	r3, r3
 8006434:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006436:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800643a:	2b00      	cmp	r3, #0
 800643c:	dce9      	bgt.n	8006412 <prvUnlockQueue+0x16>
 800643e:	e000      	b.n	8006442 <prvUnlockQueue+0x46>
					break;
 8006440:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	22ff      	movs	r2, #255	; 0xff
 8006446:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800644a:	f001 fc5b 	bl	8007d04 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800644e:	f001 fc29 	bl	8007ca4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006458:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800645a:	e011      	b.n	8006480 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	691b      	ldr	r3, [r3, #16]
 8006460:	2b00      	cmp	r3, #0
 8006462:	d012      	beq.n	800648a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	3310      	adds	r3, #16
 8006468:	4618      	mov	r0, r3
 800646a:	f000 fd05 	bl	8006e78 <xTaskRemoveFromEventList>
 800646e:	4603      	mov	r3, r0
 8006470:	2b00      	cmp	r3, #0
 8006472:	d001      	beq.n	8006478 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006474:	f000 fddc 	bl	8007030 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006478:	7bbb      	ldrb	r3, [r7, #14]
 800647a:	3b01      	subs	r3, #1
 800647c:	b2db      	uxtb	r3, r3
 800647e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006480:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006484:	2b00      	cmp	r3, #0
 8006486:	dce9      	bgt.n	800645c <prvUnlockQueue+0x60>
 8006488:	e000      	b.n	800648c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800648a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	22ff      	movs	r2, #255	; 0xff
 8006490:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006494:	f001 fc36 	bl	8007d04 <vPortExitCritical>
}
 8006498:	bf00      	nop
 800649a:	3710      	adds	r7, #16
 800649c:	46bd      	mov	sp, r7
 800649e:	bd80      	pop	{r7, pc}

080064a0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80064a0:	b580      	push	{r7, lr}
 80064a2:	b084      	sub	sp, #16
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80064a8:	f001 fbfc 	bl	8007ca4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d102      	bne.n	80064ba <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80064b4:	2301      	movs	r3, #1
 80064b6:	60fb      	str	r3, [r7, #12]
 80064b8:	e001      	b.n	80064be <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80064ba:	2300      	movs	r3, #0
 80064bc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80064be:	f001 fc21 	bl	8007d04 <vPortExitCritical>

	return xReturn;
 80064c2:	68fb      	ldr	r3, [r7, #12]
}
 80064c4:	4618      	mov	r0, r3
 80064c6:	3710      	adds	r7, #16
 80064c8:	46bd      	mov	sp, r7
 80064ca:	bd80      	pop	{r7, pc}

080064cc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80064cc:	b580      	push	{r7, lr}
 80064ce:	b084      	sub	sp, #16
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80064d4:	f001 fbe6 	bl	8007ca4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064e0:	429a      	cmp	r2, r3
 80064e2:	d102      	bne.n	80064ea <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80064e4:	2301      	movs	r3, #1
 80064e6:	60fb      	str	r3, [r7, #12]
 80064e8:	e001      	b.n	80064ee <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80064ea:	2300      	movs	r3, #0
 80064ec:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80064ee:	f001 fc09 	bl	8007d04 <vPortExitCritical>

	return xReturn;
 80064f2:	68fb      	ldr	r3, [r7, #12]
}
 80064f4:	4618      	mov	r0, r3
 80064f6:	3710      	adds	r7, #16
 80064f8:	46bd      	mov	sp, r7
 80064fa:	bd80      	pop	{r7, pc}

080064fc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80064fc:	b480      	push	{r7}
 80064fe:	b085      	sub	sp, #20
 8006500:	af00      	add	r7, sp, #0
 8006502:	6078      	str	r0, [r7, #4]
 8006504:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006506:	2300      	movs	r3, #0
 8006508:	60fb      	str	r3, [r7, #12]
 800650a:	e014      	b.n	8006536 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800650c:	4a0f      	ldr	r2, [pc, #60]	; (800654c <vQueueAddToRegistry+0x50>)
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006514:	2b00      	cmp	r3, #0
 8006516:	d10b      	bne.n	8006530 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006518:	490c      	ldr	r1, [pc, #48]	; (800654c <vQueueAddToRegistry+0x50>)
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	683a      	ldr	r2, [r7, #0]
 800651e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006522:	4a0a      	ldr	r2, [pc, #40]	; (800654c <vQueueAddToRegistry+0x50>)
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	00db      	lsls	r3, r3, #3
 8006528:	4413      	add	r3, r2
 800652a:	687a      	ldr	r2, [r7, #4]
 800652c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800652e:	e006      	b.n	800653e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	3301      	adds	r3, #1
 8006534:	60fb      	str	r3, [r7, #12]
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	2b07      	cmp	r3, #7
 800653a:	d9e7      	bls.n	800650c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800653c:	bf00      	nop
 800653e:	bf00      	nop
 8006540:	3714      	adds	r7, #20
 8006542:	46bd      	mov	sp, r7
 8006544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006548:	4770      	bx	lr
 800654a:	bf00      	nop
 800654c:	20004c24 	.word	0x20004c24

08006550 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006550:	b580      	push	{r7, lr}
 8006552:	b086      	sub	sp, #24
 8006554:	af00      	add	r7, sp, #0
 8006556:	60f8      	str	r0, [r7, #12]
 8006558:	60b9      	str	r1, [r7, #8]
 800655a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006560:	f001 fba0 	bl	8007ca4 <vPortEnterCritical>
 8006564:	697b      	ldr	r3, [r7, #20]
 8006566:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800656a:	b25b      	sxtb	r3, r3
 800656c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006570:	d103      	bne.n	800657a <vQueueWaitForMessageRestricted+0x2a>
 8006572:	697b      	ldr	r3, [r7, #20]
 8006574:	2200      	movs	r2, #0
 8006576:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800657a:	697b      	ldr	r3, [r7, #20]
 800657c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006580:	b25b      	sxtb	r3, r3
 8006582:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006586:	d103      	bne.n	8006590 <vQueueWaitForMessageRestricted+0x40>
 8006588:	697b      	ldr	r3, [r7, #20]
 800658a:	2200      	movs	r2, #0
 800658c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006590:	f001 fbb8 	bl	8007d04 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006594:	697b      	ldr	r3, [r7, #20]
 8006596:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006598:	2b00      	cmp	r3, #0
 800659a:	d106      	bne.n	80065aa <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800659c:	697b      	ldr	r3, [r7, #20]
 800659e:	3324      	adds	r3, #36	; 0x24
 80065a0:	687a      	ldr	r2, [r7, #4]
 80065a2:	68b9      	ldr	r1, [r7, #8]
 80065a4:	4618      	mov	r0, r3
 80065a6:	f000 fc3b 	bl	8006e20 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80065aa:	6978      	ldr	r0, [r7, #20]
 80065ac:	f7ff ff26 	bl	80063fc <prvUnlockQueue>
	}
 80065b0:	bf00      	nop
 80065b2:	3718      	adds	r7, #24
 80065b4:	46bd      	mov	sp, r7
 80065b6:	bd80      	pop	{r7, pc}

080065b8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80065b8:	b580      	push	{r7, lr}
 80065ba:	b08e      	sub	sp, #56	; 0x38
 80065bc:	af04      	add	r7, sp, #16
 80065be:	60f8      	str	r0, [r7, #12]
 80065c0:	60b9      	str	r1, [r7, #8]
 80065c2:	607a      	str	r2, [r7, #4]
 80065c4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80065c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d10a      	bne.n	80065e2 <xTaskCreateStatic+0x2a>
	__asm volatile
 80065cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065d0:	f383 8811 	msr	BASEPRI, r3
 80065d4:	f3bf 8f6f 	isb	sy
 80065d8:	f3bf 8f4f 	dsb	sy
 80065dc:	623b      	str	r3, [r7, #32]
}
 80065de:	bf00      	nop
 80065e0:	e7fe      	b.n	80065e0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80065e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d10a      	bne.n	80065fe <xTaskCreateStatic+0x46>
	__asm volatile
 80065e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065ec:	f383 8811 	msr	BASEPRI, r3
 80065f0:	f3bf 8f6f 	isb	sy
 80065f4:	f3bf 8f4f 	dsb	sy
 80065f8:	61fb      	str	r3, [r7, #28]
}
 80065fa:	bf00      	nop
 80065fc:	e7fe      	b.n	80065fc <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80065fe:	235c      	movs	r3, #92	; 0x5c
 8006600:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006602:	693b      	ldr	r3, [r7, #16]
 8006604:	2b5c      	cmp	r3, #92	; 0x5c
 8006606:	d00a      	beq.n	800661e <xTaskCreateStatic+0x66>
	__asm volatile
 8006608:	f04f 0350 	mov.w	r3, #80	; 0x50
 800660c:	f383 8811 	msr	BASEPRI, r3
 8006610:	f3bf 8f6f 	isb	sy
 8006614:	f3bf 8f4f 	dsb	sy
 8006618:	61bb      	str	r3, [r7, #24]
}
 800661a:	bf00      	nop
 800661c:	e7fe      	b.n	800661c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800661e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006620:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006622:	2b00      	cmp	r3, #0
 8006624:	d01e      	beq.n	8006664 <xTaskCreateStatic+0xac>
 8006626:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006628:	2b00      	cmp	r3, #0
 800662a:	d01b      	beq.n	8006664 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800662c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800662e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006632:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006634:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006638:	2202      	movs	r2, #2
 800663a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800663e:	2300      	movs	r3, #0
 8006640:	9303      	str	r3, [sp, #12]
 8006642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006644:	9302      	str	r3, [sp, #8]
 8006646:	f107 0314 	add.w	r3, r7, #20
 800664a:	9301      	str	r3, [sp, #4]
 800664c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800664e:	9300      	str	r3, [sp, #0]
 8006650:	683b      	ldr	r3, [r7, #0]
 8006652:	687a      	ldr	r2, [r7, #4]
 8006654:	68b9      	ldr	r1, [r7, #8]
 8006656:	68f8      	ldr	r0, [r7, #12]
 8006658:	f000 f850 	bl	80066fc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800665c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800665e:	f000 f8dd 	bl	800681c <prvAddNewTaskToReadyList>
 8006662:	e001      	b.n	8006668 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8006664:	2300      	movs	r3, #0
 8006666:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006668:	697b      	ldr	r3, [r7, #20]
	}
 800666a:	4618      	mov	r0, r3
 800666c:	3728      	adds	r7, #40	; 0x28
 800666e:	46bd      	mov	sp, r7
 8006670:	bd80      	pop	{r7, pc}

08006672 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006672:	b580      	push	{r7, lr}
 8006674:	b08c      	sub	sp, #48	; 0x30
 8006676:	af04      	add	r7, sp, #16
 8006678:	60f8      	str	r0, [r7, #12]
 800667a:	60b9      	str	r1, [r7, #8]
 800667c:	603b      	str	r3, [r7, #0]
 800667e:	4613      	mov	r3, r2
 8006680:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006682:	88fb      	ldrh	r3, [r7, #6]
 8006684:	009b      	lsls	r3, r3, #2
 8006686:	4618      	mov	r0, r3
 8006688:	f001 fc2e 	bl	8007ee8 <pvPortMalloc>
 800668c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800668e:	697b      	ldr	r3, [r7, #20]
 8006690:	2b00      	cmp	r3, #0
 8006692:	d00e      	beq.n	80066b2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006694:	205c      	movs	r0, #92	; 0x5c
 8006696:	f001 fc27 	bl	8007ee8 <pvPortMalloc>
 800669a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800669c:	69fb      	ldr	r3, [r7, #28]
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d003      	beq.n	80066aa <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80066a2:	69fb      	ldr	r3, [r7, #28]
 80066a4:	697a      	ldr	r2, [r7, #20]
 80066a6:	631a      	str	r2, [r3, #48]	; 0x30
 80066a8:	e005      	b.n	80066b6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80066aa:	6978      	ldr	r0, [r7, #20]
 80066ac:	f001 fce8 	bl	8008080 <vPortFree>
 80066b0:	e001      	b.n	80066b6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80066b2:	2300      	movs	r3, #0
 80066b4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80066b6:	69fb      	ldr	r3, [r7, #28]
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d017      	beq.n	80066ec <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80066bc:	69fb      	ldr	r3, [r7, #28]
 80066be:	2200      	movs	r2, #0
 80066c0:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80066c4:	88fa      	ldrh	r2, [r7, #6]
 80066c6:	2300      	movs	r3, #0
 80066c8:	9303      	str	r3, [sp, #12]
 80066ca:	69fb      	ldr	r3, [r7, #28]
 80066cc:	9302      	str	r3, [sp, #8]
 80066ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066d0:	9301      	str	r3, [sp, #4]
 80066d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066d4:	9300      	str	r3, [sp, #0]
 80066d6:	683b      	ldr	r3, [r7, #0]
 80066d8:	68b9      	ldr	r1, [r7, #8]
 80066da:	68f8      	ldr	r0, [r7, #12]
 80066dc:	f000 f80e 	bl	80066fc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80066e0:	69f8      	ldr	r0, [r7, #28]
 80066e2:	f000 f89b 	bl	800681c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80066e6:	2301      	movs	r3, #1
 80066e8:	61bb      	str	r3, [r7, #24]
 80066ea:	e002      	b.n	80066f2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80066ec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80066f0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80066f2:	69bb      	ldr	r3, [r7, #24]
	}
 80066f4:	4618      	mov	r0, r3
 80066f6:	3720      	adds	r7, #32
 80066f8:	46bd      	mov	sp, r7
 80066fa:	bd80      	pop	{r7, pc}

080066fc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80066fc:	b580      	push	{r7, lr}
 80066fe:	b088      	sub	sp, #32
 8006700:	af00      	add	r7, sp, #0
 8006702:	60f8      	str	r0, [r7, #12]
 8006704:	60b9      	str	r1, [r7, #8]
 8006706:	607a      	str	r2, [r7, #4]
 8006708:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800670a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800670c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	009b      	lsls	r3, r3, #2
 8006712:	461a      	mov	r2, r3
 8006714:	21a5      	movs	r1, #165	; 0xa5
 8006716:	f001 fe09 	bl	800832c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800671a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800671c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006724:	3b01      	subs	r3, #1
 8006726:	009b      	lsls	r3, r3, #2
 8006728:	4413      	add	r3, r2
 800672a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800672c:	69bb      	ldr	r3, [r7, #24]
 800672e:	f023 0307 	bic.w	r3, r3, #7
 8006732:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006734:	69bb      	ldr	r3, [r7, #24]
 8006736:	f003 0307 	and.w	r3, r3, #7
 800673a:	2b00      	cmp	r3, #0
 800673c:	d00a      	beq.n	8006754 <prvInitialiseNewTask+0x58>
	__asm volatile
 800673e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006742:	f383 8811 	msr	BASEPRI, r3
 8006746:	f3bf 8f6f 	isb	sy
 800674a:	f3bf 8f4f 	dsb	sy
 800674e:	617b      	str	r3, [r7, #20]
}
 8006750:	bf00      	nop
 8006752:	e7fe      	b.n	8006752 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006754:	68bb      	ldr	r3, [r7, #8]
 8006756:	2b00      	cmp	r3, #0
 8006758:	d01f      	beq.n	800679a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800675a:	2300      	movs	r3, #0
 800675c:	61fb      	str	r3, [r7, #28]
 800675e:	e012      	b.n	8006786 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006760:	68ba      	ldr	r2, [r7, #8]
 8006762:	69fb      	ldr	r3, [r7, #28]
 8006764:	4413      	add	r3, r2
 8006766:	7819      	ldrb	r1, [r3, #0]
 8006768:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800676a:	69fb      	ldr	r3, [r7, #28]
 800676c:	4413      	add	r3, r2
 800676e:	3334      	adds	r3, #52	; 0x34
 8006770:	460a      	mov	r2, r1
 8006772:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006774:	68ba      	ldr	r2, [r7, #8]
 8006776:	69fb      	ldr	r3, [r7, #28]
 8006778:	4413      	add	r3, r2
 800677a:	781b      	ldrb	r3, [r3, #0]
 800677c:	2b00      	cmp	r3, #0
 800677e:	d006      	beq.n	800678e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006780:	69fb      	ldr	r3, [r7, #28]
 8006782:	3301      	adds	r3, #1
 8006784:	61fb      	str	r3, [r7, #28]
 8006786:	69fb      	ldr	r3, [r7, #28]
 8006788:	2b0f      	cmp	r3, #15
 800678a:	d9e9      	bls.n	8006760 <prvInitialiseNewTask+0x64>
 800678c:	e000      	b.n	8006790 <prvInitialiseNewTask+0x94>
			{
				break;
 800678e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006790:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006792:	2200      	movs	r2, #0
 8006794:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006798:	e003      	b.n	80067a2 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800679a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800679c:	2200      	movs	r2, #0
 800679e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80067a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067a4:	2b37      	cmp	r3, #55	; 0x37
 80067a6:	d901      	bls.n	80067ac <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80067a8:	2337      	movs	r3, #55	; 0x37
 80067aa:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80067ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80067b0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80067b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80067b6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80067b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067ba:	2200      	movs	r2, #0
 80067bc:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80067be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067c0:	3304      	adds	r3, #4
 80067c2:	4618      	mov	r0, r3
 80067c4:	f7ff f978 	bl	8005ab8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80067c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067ca:	3318      	adds	r3, #24
 80067cc:	4618      	mov	r0, r3
 80067ce:	f7ff f973 	bl	8005ab8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80067d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80067d6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80067d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067da:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80067de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067e0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80067e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80067e6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80067e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067ea:	2200      	movs	r2, #0
 80067ec:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80067ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067f0:	2200      	movs	r2, #0
 80067f2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80067f6:	683a      	ldr	r2, [r7, #0]
 80067f8:	68f9      	ldr	r1, [r7, #12]
 80067fa:	69b8      	ldr	r0, [r7, #24]
 80067fc:	f001 f928 	bl	8007a50 <pxPortInitialiseStack>
 8006800:	4602      	mov	r2, r0
 8006802:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006804:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006806:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006808:	2b00      	cmp	r3, #0
 800680a:	d002      	beq.n	8006812 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800680c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800680e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006810:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006812:	bf00      	nop
 8006814:	3720      	adds	r7, #32
 8006816:	46bd      	mov	sp, r7
 8006818:	bd80      	pop	{r7, pc}
	...

0800681c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800681c:	b580      	push	{r7, lr}
 800681e:	b082      	sub	sp, #8
 8006820:	af00      	add	r7, sp, #0
 8006822:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006824:	f001 fa3e 	bl	8007ca4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006828:	4b2d      	ldr	r3, [pc, #180]	; (80068e0 <prvAddNewTaskToReadyList+0xc4>)
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	3301      	adds	r3, #1
 800682e:	4a2c      	ldr	r2, [pc, #176]	; (80068e0 <prvAddNewTaskToReadyList+0xc4>)
 8006830:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006832:	4b2c      	ldr	r3, [pc, #176]	; (80068e4 <prvAddNewTaskToReadyList+0xc8>)
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	2b00      	cmp	r3, #0
 8006838:	d109      	bne.n	800684e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800683a:	4a2a      	ldr	r2, [pc, #168]	; (80068e4 <prvAddNewTaskToReadyList+0xc8>)
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006840:	4b27      	ldr	r3, [pc, #156]	; (80068e0 <prvAddNewTaskToReadyList+0xc4>)
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	2b01      	cmp	r3, #1
 8006846:	d110      	bne.n	800686a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006848:	f000 fc16 	bl	8007078 <prvInitialiseTaskLists>
 800684c:	e00d      	b.n	800686a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800684e:	4b26      	ldr	r3, [pc, #152]	; (80068e8 <prvAddNewTaskToReadyList+0xcc>)
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	2b00      	cmp	r3, #0
 8006854:	d109      	bne.n	800686a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006856:	4b23      	ldr	r3, [pc, #140]	; (80068e4 <prvAddNewTaskToReadyList+0xc8>)
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006860:	429a      	cmp	r2, r3
 8006862:	d802      	bhi.n	800686a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006864:	4a1f      	ldr	r2, [pc, #124]	; (80068e4 <prvAddNewTaskToReadyList+0xc8>)
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800686a:	4b20      	ldr	r3, [pc, #128]	; (80068ec <prvAddNewTaskToReadyList+0xd0>)
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	3301      	adds	r3, #1
 8006870:	4a1e      	ldr	r2, [pc, #120]	; (80068ec <prvAddNewTaskToReadyList+0xd0>)
 8006872:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006874:	4b1d      	ldr	r3, [pc, #116]	; (80068ec <prvAddNewTaskToReadyList+0xd0>)
 8006876:	681a      	ldr	r2, [r3, #0]
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006880:	4b1b      	ldr	r3, [pc, #108]	; (80068f0 <prvAddNewTaskToReadyList+0xd4>)
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	429a      	cmp	r2, r3
 8006886:	d903      	bls.n	8006890 <prvAddNewTaskToReadyList+0x74>
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800688c:	4a18      	ldr	r2, [pc, #96]	; (80068f0 <prvAddNewTaskToReadyList+0xd4>)
 800688e:	6013      	str	r3, [r2, #0]
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006894:	4613      	mov	r3, r2
 8006896:	009b      	lsls	r3, r3, #2
 8006898:	4413      	add	r3, r2
 800689a:	009b      	lsls	r3, r3, #2
 800689c:	4a15      	ldr	r2, [pc, #84]	; (80068f4 <prvAddNewTaskToReadyList+0xd8>)
 800689e:	441a      	add	r2, r3
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	3304      	adds	r3, #4
 80068a4:	4619      	mov	r1, r3
 80068a6:	4610      	mov	r0, r2
 80068a8:	f7ff f913 	bl	8005ad2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80068ac:	f001 fa2a 	bl	8007d04 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80068b0:	4b0d      	ldr	r3, [pc, #52]	; (80068e8 <prvAddNewTaskToReadyList+0xcc>)
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d00e      	beq.n	80068d6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80068b8:	4b0a      	ldr	r3, [pc, #40]	; (80068e4 <prvAddNewTaskToReadyList+0xc8>)
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068c2:	429a      	cmp	r2, r3
 80068c4:	d207      	bcs.n	80068d6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80068c6:	4b0c      	ldr	r3, [pc, #48]	; (80068f8 <prvAddNewTaskToReadyList+0xdc>)
 80068c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80068cc:	601a      	str	r2, [r3, #0]
 80068ce:	f3bf 8f4f 	dsb	sy
 80068d2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80068d6:	bf00      	nop
 80068d8:	3708      	adds	r7, #8
 80068da:	46bd      	mov	sp, r7
 80068dc:	bd80      	pop	{r7, pc}
 80068de:	bf00      	nop
 80068e0:	20000c24 	.word	0x20000c24
 80068e4:	20000750 	.word	0x20000750
 80068e8:	20000c30 	.word	0x20000c30
 80068ec:	20000c40 	.word	0x20000c40
 80068f0:	20000c2c 	.word	0x20000c2c
 80068f4:	20000754 	.word	0x20000754
 80068f8:	e000ed04 	.word	0xe000ed04

080068fc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80068fc:	b580      	push	{r7, lr}
 80068fe:	b084      	sub	sp, #16
 8006900:	af00      	add	r7, sp, #0
 8006902:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006904:	2300      	movs	r3, #0
 8006906:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	2b00      	cmp	r3, #0
 800690c:	d017      	beq.n	800693e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800690e:	4b13      	ldr	r3, [pc, #76]	; (800695c <vTaskDelay+0x60>)
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	2b00      	cmp	r3, #0
 8006914:	d00a      	beq.n	800692c <vTaskDelay+0x30>
	__asm volatile
 8006916:	f04f 0350 	mov.w	r3, #80	; 0x50
 800691a:	f383 8811 	msr	BASEPRI, r3
 800691e:	f3bf 8f6f 	isb	sy
 8006922:	f3bf 8f4f 	dsb	sy
 8006926:	60bb      	str	r3, [r7, #8]
}
 8006928:	bf00      	nop
 800692a:	e7fe      	b.n	800692a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800692c:	f000 f880 	bl	8006a30 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006930:	2100      	movs	r1, #0
 8006932:	6878      	ldr	r0, [r7, #4]
 8006934:	f000 fcea 	bl	800730c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006938:	f000 f888 	bl	8006a4c <xTaskResumeAll>
 800693c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	2b00      	cmp	r3, #0
 8006942:	d107      	bne.n	8006954 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8006944:	4b06      	ldr	r3, [pc, #24]	; (8006960 <vTaskDelay+0x64>)
 8006946:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800694a:	601a      	str	r2, [r3, #0]
 800694c:	f3bf 8f4f 	dsb	sy
 8006950:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006954:	bf00      	nop
 8006956:	3710      	adds	r7, #16
 8006958:	46bd      	mov	sp, r7
 800695a:	bd80      	pop	{r7, pc}
 800695c:	20000c4c 	.word	0x20000c4c
 8006960:	e000ed04 	.word	0xe000ed04

08006964 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006964:	b580      	push	{r7, lr}
 8006966:	b08a      	sub	sp, #40	; 0x28
 8006968:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800696a:	2300      	movs	r3, #0
 800696c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800696e:	2300      	movs	r3, #0
 8006970:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006972:	463a      	mov	r2, r7
 8006974:	1d39      	adds	r1, r7, #4
 8006976:	f107 0308 	add.w	r3, r7, #8
 800697a:	4618      	mov	r0, r3
 800697c:	f7ff f848 	bl	8005a10 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006980:	6839      	ldr	r1, [r7, #0]
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	68ba      	ldr	r2, [r7, #8]
 8006986:	9202      	str	r2, [sp, #8]
 8006988:	9301      	str	r3, [sp, #4]
 800698a:	2300      	movs	r3, #0
 800698c:	9300      	str	r3, [sp, #0]
 800698e:	2300      	movs	r3, #0
 8006990:	460a      	mov	r2, r1
 8006992:	4921      	ldr	r1, [pc, #132]	; (8006a18 <vTaskStartScheduler+0xb4>)
 8006994:	4821      	ldr	r0, [pc, #132]	; (8006a1c <vTaskStartScheduler+0xb8>)
 8006996:	f7ff fe0f 	bl	80065b8 <xTaskCreateStatic>
 800699a:	4603      	mov	r3, r0
 800699c:	4a20      	ldr	r2, [pc, #128]	; (8006a20 <vTaskStartScheduler+0xbc>)
 800699e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80069a0:	4b1f      	ldr	r3, [pc, #124]	; (8006a20 <vTaskStartScheduler+0xbc>)
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d002      	beq.n	80069ae <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80069a8:	2301      	movs	r3, #1
 80069aa:	617b      	str	r3, [r7, #20]
 80069ac:	e001      	b.n	80069b2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80069ae:	2300      	movs	r3, #0
 80069b0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80069b2:	697b      	ldr	r3, [r7, #20]
 80069b4:	2b01      	cmp	r3, #1
 80069b6:	d102      	bne.n	80069be <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80069b8:	f000 fcfc 	bl	80073b4 <xTimerCreateTimerTask>
 80069bc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80069be:	697b      	ldr	r3, [r7, #20]
 80069c0:	2b01      	cmp	r3, #1
 80069c2:	d116      	bne.n	80069f2 <vTaskStartScheduler+0x8e>
	__asm volatile
 80069c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069c8:	f383 8811 	msr	BASEPRI, r3
 80069cc:	f3bf 8f6f 	isb	sy
 80069d0:	f3bf 8f4f 	dsb	sy
 80069d4:	613b      	str	r3, [r7, #16]
}
 80069d6:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80069d8:	4b12      	ldr	r3, [pc, #72]	; (8006a24 <vTaskStartScheduler+0xc0>)
 80069da:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80069de:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80069e0:	4b11      	ldr	r3, [pc, #68]	; (8006a28 <vTaskStartScheduler+0xc4>)
 80069e2:	2201      	movs	r2, #1
 80069e4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80069e6:	4b11      	ldr	r3, [pc, #68]	; (8006a2c <vTaskStartScheduler+0xc8>)
 80069e8:	2200      	movs	r2, #0
 80069ea:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80069ec:	f001 f8b8 	bl	8007b60 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80069f0:	e00e      	b.n	8006a10 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80069f2:	697b      	ldr	r3, [r7, #20]
 80069f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80069f8:	d10a      	bne.n	8006a10 <vTaskStartScheduler+0xac>
	__asm volatile
 80069fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069fe:	f383 8811 	msr	BASEPRI, r3
 8006a02:	f3bf 8f6f 	isb	sy
 8006a06:	f3bf 8f4f 	dsb	sy
 8006a0a:	60fb      	str	r3, [r7, #12]
}
 8006a0c:	bf00      	nop
 8006a0e:	e7fe      	b.n	8006a0e <vTaskStartScheduler+0xaa>
}
 8006a10:	bf00      	nop
 8006a12:	3718      	adds	r7, #24
 8006a14:	46bd      	mov	sp, r7
 8006a16:	bd80      	pop	{r7, pc}
 8006a18:	08009750 	.word	0x08009750
 8006a1c:	08007049 	.word	0x08007049
 8006a20:	20000c48 	.word	0x20000c48
 8006a24:	20000c44 	.word	0x20000c44
 8006a28:	20000c30 	.word	0x20000c30
 8006a2c:	20000c28 	.word	0x20000c28

08006a30 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006a30:	b480      	push	{r7}
 8006a32:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006a34:	4b04      	ldr	r3, [pc, #16]	; (8006a48 <vTaskSuspendAll+0x18>)
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	3301      	adds	r3, #1
 8006a3a:	4a03      	ldr	r2, [pc, #12]	; (8006a48 <vTaskSuspendAll+0x18>)
 8006a3c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006a3e:	bf00      	nop
 8006a40:	46bd      	mov	sp, r7
 8006a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a46:	4770      	bx	lr
 8006a48:	20000c4c 	.word	0x20000c4c

08006a4c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006a4c:	b580      	push	{r7, lr}
 8006a4e:	b084      	sub	sp, #16
 8006a50:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006a52:	2300      	movs	r3, #0
 8006a54:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006a56:	2300      	movs	r3, #0
 8006a58:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006a5a:	4b42      	ldr	r3, [pc, #264]	; (8006b64 <xTaskResumeAll+0x118>)
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d10a      	bne.n	8006a78 <xTaskResumeAll+0x2c>
	__asm volatile
 8006a62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a66:	f383 8811 	msr	BASEPRI, r3
 8006a6a:	f3bf 8f6f 	isb	sy
 8006a6e:	f3bf 8f4f 	dsb	sy
 8006a72:	603b      	str	r3, [r7, #0]
}
 8006a74:	bf00      	nop
 8006a76:	e7fe      	b.n	8006a76 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006a78:	f001 f914 	bl	8007ca4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006a7c:	4b39      	ldr	r3, [pc, #228]	; (8006b64 <xTaskResumeAll+0x118>)
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	3b01      	subs	r3, #1
 8006a82:	4a38      	ldr	r2, [pc, #224]	; (8006b64 <xTaskResumeAll+0x118>)
 8006a84:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006a86:	4b37      	ldr	r3, [pc, #220]	; (8006b64 <xTaskResumeAll+0x118>)
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d162      	bne.n	8006b54 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006a8e:	4b36      	ldr	r3, [pc, #216]	; (8006b68 <xTaskResumeAll+0x11c>)
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d05e      	beq.n	8006b54 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006a96:	e02f      	b.n	8006af8 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006a98:	4b34      	ldr	r3, [pc, #208]	; (8006b6c <xTaskResumeAll+0x120>)
 8006a9a:	68db      	ldr	r3, [r3, #12]
 8006a9c:	68db      	ldr	r3, [r3, #12]
 8006a9e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	3318      	adds	r3, #24
 8006aa4:	4618      	mov	r0, r3
 8006aa6:	f7ff f871 	bl	8005b8c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	3304      	adds	r3, #4
 8006aae:	4618      	mov	r0, r3
 8006ab0:	f7ff f86c 	bl	8005b8c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ab8:	4b2d      	ldr	r3, [pc, #180]	; (8006b70 <xTaskResumeAll+0x124>)
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	429a      	cmp	r2, r3
 8006abe:	d903      	bls.n	8006ac8 <xTaskResumeAll+0x7c>
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ac4:	4a2a      	ldr	r2, [pc, #168]	; (8006b70 <xTaskResumeAll+0x124>)
 8006ac6:	6013      	str	r3, [r2, #0]
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006acc:	4613      	mov	r3, r2
 8006ace:	009b      	lsls	r3, r3, #2
 8006ad0:	4413      	add	r3, r2
 8006ad2:	009b      	lsls	r3, r3, #2
 8006ad4:	4a27      	ldr	r2, [pc, #156]	; (8006b74 <xTaskResumeAll+0x128>)
 8006ad6:	441a      	add	r2, r3
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	3304      	adds	r3, #4
 8006adc:	4619      	mov	r1, r3
 8006ade:	4610      	mov	r0, r2
 8006ae0:	f7fe fff7 	bl	8005ad2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ae8:	4b23      	ldr	r3, [pc, #140]	; (8006b78 <xTaskResumeAll+0x12c>)
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006aee:	429a      	cmp	r2, r3
 8006af0:	d302      	bcc.n	8006af8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8006af2:	4b22      	ldr	r3, [pc, #136]	; (8006b7c <xTaskResumeAll+0x130>)
 8006af4:	2201      	movs	r2, #1
 8006af6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006af8:	4b1c      	ldr	r3, [pc, #112]	; (8006b6c <xTaskResumeAll+0x120>)
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d1cb      	bne.n	8006a98 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d001      	beq.n	8006b0a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006b06:	f000 fb55 	bl	80071b4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006b0a:	4b1d      	ldr	r3, [pc, #116]	; (8006b80 <xTaskResumeAll+0x134>)
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d010      	beq.n	8006b38 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006b16:	f000 f847 	bl	8006ba8 <xTaskIncrementTick>
 8006b1a:	4603      	mov	r3, r0
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d002      	beq.n	8006b26 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8006b20:	4b16      	ldr	r3, [pc, #88]	; (8006b7c <xTaskResumeAll+0x130>)
 8006b22:	2201      	movs	r2, #1
 8006b24:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	3b01      	subs	r3, #1
 8006b2a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d1f1      	bne.n	8006b16 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8006b32:	4b13      	ldr	r3, [pc, #76]	; (8006b80 <xTaskResumeAll+0x134>)
 8006b34:	2200      	movs	r2, #0
 8006b36:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006b38:	4b10      	ldr	r3, [pc, #64]	; (8006b7c <xTaskResumeAll+0x130>)
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d009      	beq.n	8006b54 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006b40:	2301      	movs	r3, #1
 8006b42:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006b44:	4b0f      	ldr	r3, [pc, #60]	; (8006b84 <xTaskResumeAll+0x138>)
 8006b46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b4a:	601a      	str	r2, [r3, #0]
 8006b4c:	f3bf 8f4f 	dsb	sy
 8006b50:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006b54:	f001 f8d6 	bl	8007d04 <vPortExitCritical>

	return xAlreadyYielded;
 8006b58:	68bb      	ldr	r3, [r7, #8]
}
 8006b5a:	4618      	mov	r0, r3
 8006b5c:	3710      	adds	r7, #16
 8006b5e:	46bd      	mov	sp, r7
 8006b60:	bd80      	pop	{r7, pc}
 8006b62:	bf00      	nop
 8006b64:	20000c4c 	.word	0x20000c4c
 8006b68:	20000c24 	.word	0x20000c24
 8006b6c:	20000be4 	.word	0x20000be4
 8006b70:	20000c2c 	.word	0x20000c2c
 8006b74:	20000754 	.word	0x20000754
 8006b78:	20000750 	.word	0x20000750
 8006b7c:	20000c38 	.word	0x20000c38
 8006b80:	20000c34 	.word	0x20000c34
 8006b84:	e000ed04 	.word	0xe000ed04

08006b88 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006b88:	b480      	push	{r7}
 8006b8a:	b083      	sub	sp, #12
 8006b8c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006b8e:	4b05      	ldr	r3, [pc, #20]	; (8006ba4 <xTaskGetTickCount+0x1c>)
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006b94:	687b      	ldr	r3, [r7, #4]
}
 8006b96:	4618      	mov	r0, r3
 8006b98:	370c      	adds	r7, #12
 8006b9a:	46bd      	mov	sp, r7
 8006b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba0:	4770      	bx	lr
 8006ba2:	bf00      	nop
 8006ba4:	20000c28 	.word	0x20000c28

08006ba8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006ba8:	b580      	push	{r7, lr}
 8006baa:	b086      	sub	sp, #24
 8006bac:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006bae:	2300      	movs	r3, #0
 8006bb0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006bb2:	4b4f      	ldr	r3, [pc, #316]	; (8006cf0 <xTaskIncrementTick+0x148>)
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	f040 808f 	bne.w	8006cda <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006bbc:	4b4d      	ldr	r3, [pc, #308]	; (8006cf4 <xTaskIncrementTick+0x14c>)
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	3301      	adds	r3, #1
 8006bc2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006bc4:	4a4b      	ldr	r2, [pc, #300]	; (8006cf4 <xTaskIncrementTick+0x14c>)
 8006bc6:	693b      	ldr	r3, [r7, #16]
 8006bc8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006bca:	693b      	ldr	r3, [r7, #16]
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d120      	bne.n	8006c12 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006bd0:	4b49      	ldr	r3, [pc, #292]	; (8006cf8 <xTaskIncrementTick+0x150>)
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d00a      	beq.n	8006bf0 <xTaskIncrementTick+0x48>
	__asm volatile
 8006bda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bde:	f383 8811 	msr	BASEPRI, r3
 8006be2:	f3bf 8f6f 	isb	sy
 8006be6:	f3bf 8f4f 	dsb	sy
 8006bea:	603b      	str	r3, [r7, #0]
}
 8006bec:	bf00      	nop
 8006bee:	e7fe      	b.n	8006bee <xTaskIncrementTick+0x46>
 8006bf0:	4b41      	ldr	r3, [pc, #260]	; (8006cf8 <xTaskIncrementTick+0x150>)
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	60fb      	str	r3, [r7, #12]
 8006bf6:	4b41      	ldr	r3, [pc, #260]	; (8006cfc <xTaskIncrementTick+0x154>)
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	4a3f      	ldr	r2, [pc, #252]	; (8006cf8 <xTaskIncrementTick+0x150>)
 8006bfc:	6013      	str	r3, [r2, #0]
 8006bfe:	4a3f      	ldr	r2, [pc, #252]	; (8006cfc <xTaskIncrementTick+0x154>)
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	6013      	str	r3, [r2, #0]
 8006c04:	4b3e      	ldr	r3, [pc, #248]	; (8006d00 <xTaskIncrementTick+0x158>)
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	3301      	adds	r3, #1
 8006c0a:	4a3d      	ldr	r2, [pc, #244]	; (8006d00 <xTaskIncrementTick+0x158>)
 8006c0c:	6013      	str	r3, [r2, #0]
 8006c0e:	f000 fad1 	bl	80071b4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006c12:	4b3c      	ldr	r3, [pc, #240]	; (8006d04 <xTaskIncrementTick+0x15c>)
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	693a      	ldr	r2, [r7, #16]
 8006c18:	429a      	cmp	r2, r3
 8006c1a:	d349      	bcc.n	8006cb0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006c1c:	4b36      	ldr	r3, [pc, #216]	; (8006cf8 <xTaskIncrementTick+0x150>)
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d104      	bne.n	8006c30 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006c26:	4b37      	ldr	r3, [pc, #220]	; (8006d04 <xTaskIncrementTick+0x15c>)
 8006c28:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006c2c:	601a      	str	r2, [r3, #0]
					break;
 8006c2e:	e03f      	b.n	8006cb0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006c30:	4b31      	ldr	r3, [pc, #196]	; (8006cf8 <xTaskIncrementTick+0x150>)
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	68db      	ldr	r3, [r3, #12]
 8006c36:	68db      	ldr	r3, [r3, #12]
 8006c38:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006c3a:	68bb      	ldr	r3, [r7, #8]
 8006c3c:	685b      	ldr	r3, [r3, #4]
 8006c3e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006c40:	693a      	ldr	r2, [r7, #16]
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	429a      	cmp	r2, r3
 8006c46:	d203      	bcs.n	8006c50 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006c48:	4a2e      	ldr	r2, [pc, #184]	; (8006d04 <xTaskIncrementTick+0x15c>)
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006c4e:	e02f      	b.n	8006cb0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006c50:	68bb      	ldr	r3, [r7, #8]
 8006c52:	3304      	adds	r3, #4
 8006c54:	4618      	mov	r0, r3
 8006c56:	f7fe ff99 	bl	8005b8c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006c5a:	68bb      	ldr	r3, [r7, #8]
 8006c5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d004      	beq.n	8006c6c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006c62:	68bb      	ldr	r3, [r7, #8]
 8006c64:	3318      	adds	r3, #24
 8006c66:	4618      	mov	r0, r3
 8006c68:	f7fe ff90 	bl	8005b8c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006c6c:	68bb      	ldr	r3, [r7, #8]
 8006c6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c70:	4b25      	ldr	r3, [pc, #148]	; (8006d08 <xTaskIncrementTick+0x160>)
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	429a      	cmp	r2, r3
 8006c76:	d903      	bls.n	8006c80 <xTaskIncrementTick+0xd8>
 8006c78:	68bb      	ldr	r3, [r7, #8]
 8006c7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c7c:	4a22      	ldr	r2, [pc, #136]	; (8006d08 <xTaskIncrementTick+0x160>)
 8006c7e:	6013      	str	r3, [r2, #0]
 8006c80:	68bb      	ldr	r3, [r7, #8]
 8006c82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c84:	4613      	mov	r3, r2
 8006c86:	009b      	lsls	r3, r3, #2
 8006c88:	4413      	add	r3, r2
 8006c8a:	009b      	lsls	r3, r3, #2
 8006c8c:	4a1f      	ldr	r2, [pc, #124]	; (8006d0c <xTaskIncrementTick+0x164>)
 8006c8e:	441a      	add	r2, r3
 8006c90:	68bb      	ldr	r3, [r7, #8]
 8006c92:	3304      	adds	r3, #4
 8006c94:	4619      	mov	r1, r3
 8006c96:	4610      	mov	r0, r2
 8006c98:	f7fe ff1b 	bl	8005ad2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006c9c:	68bb      	ldr	r3, [r7, #8]
 8006c9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ca0:	4b1b      	ldr	r3, [pc, #108]	; (8006d10 <xTaskIncrementTick+0x168>)
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ca6:	429a      	cmp	r2, r3
 8006ca8:	d3b8      	bcc.n	8006c1c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8006caa:	2301      	movs	r3, #1
 8006cac:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006cae:	e7b5      	b.n	8006c1c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006cb0:	4b17      	ldr	r3, [pc, #92]	; (8006d10 <xTaskIncrementTick+0x168>)
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006cb6:	4915      	ldr	r1, [pc, #84]	; (8006d0c <xTaskIncrementTick+0x164>)
 8006cb8:	4613      	mov	r3, r2
 8006cba:	009b      	lsls	r3, r3, #2
 8006cbc:	4413      	add	r3, r2
 8006cbe:	009b      	lsls	r3, r3, #2
 8006cc0:	440b      	add	r3, r1
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	2b01      	cmp	r3, #1
 8006cc6:	d901      	bls.n	8006ccc <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8006cc8:	2301      	movs	r3, #1
 8006cca:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006ccc:	4b11      	ldr	r3, [pc, #68]	; (8006d14 <xTaskIncrementTick+0x16c>)
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d007      	beq.n	8006ce4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8006cd4:	2301      	movs	r3, #1
 8006cd6:	617b      	str	r3, [r7, #20]
 8006cd8:	e004      	b.n	8006ce4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006cda:	4b0f      	ldr	r3, [pc, #60]	; (8006d18 <xTaskIncrementTick+0x170>)
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	3301      	adds	r3, #1
 8006ce0:	4a0d      	ldr	r2, [pc, #52]	; (8006d18 <xTaskIncrementTick+0x170>)
 8006ce2:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006ce4:	697b      	ldr	r3, [r7, #20]
}
 8006ce6:	4618      	mov	r0, r3
 8006ce8:	3718      	adds	r7, #24
 8006cea:	46bd      	mov	sp, r7
 8006cec:	bd80      	pop	{r7, pc}
 8006cee:	bf00      	nop
 8006cf0:	20000c4c 	.word	0x20000c4c
 8006cf4:	20000c28 	.word	0x20000c28
 8006cf8:	20000bdc 	.word	0x20000bdc
 8006cfc:	20000be0 	.word	0x20000be0
 8006d00:	20000c3c 	.word	0x20000c3c
 8006d04:	20000c44 	.word	0x20000c44
 8006d08:	20000c2c 	.word	0x20000c2c
 8006d0c:	20000754 	.word	0x20000754
 8006d10:	20000750 	.word	0x20000750
 8006d14:	20000c38 	.word	0x20000c38
 8006d18:	20000c34 	.word	0x20000c34

08006d1c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006d1c:	b480      	push	{r7}
 8006d1e:	b085      	sub	sp, #20
 8006d20:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006d22:	4b28      	ldr	r3, [pc, #160]	; (8006dc4 <vTaskSwitchContext+0xa8>)
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d003      	beq.n	8006d32 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006d2a:	4b27      	ldr	r3, [pc, #156]	; (8006dc8 <vTaskSwitchContext+0xac>)
 8006d2c:	2201      	movs	r2, #1
 8006d2e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006d30:	e041      	b.n	8006db6 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8006d32:	4b25      	ldr	r3, [pc, #148]	; (8006dc8 <vTaskSwitchContext+0xac>)
 8006d34:	2200      	movs	r2, #0
 8006d36:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006d38:	4b24      	ldr	r3, [pc, #144]	; (8006dcc <vTaskSwitchContext+0xb0>)
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	60fb      	str	r3, [r7, #12]
 8006d3e:	e010      	b.n	8006d62 <vTaskSwitchContext+0x46>
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d10a      	bne.n	8006d5c <vTaskSwitchContext+0x40>
	__asm volatile
 8006d46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d4a:	f383 8811 	msr	BASEPRI, r3
 8006d4e:	f3bf 8f6f 	isb	sy
 8006d52:	f3bf 8f4f 	dsb	sy
 8006d56:	607b      	str	r3, [r7, #4]
}
 8006d58:	bf00      	nop
 8006d5a:	e7fe      	b.n	8006d5a <vTaskSwitchContext+0x3e>
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	3b01      	subs	r3, #1
 8006d60:	60fb      	str	r3, [r7, #12]
 8006d62:	491b      	ldr	r1, [pc, #108]	; (8006dd0 <vTaskSwitchContext+0xb4>)
 8006d64:	68fa      	ldr	r2, [r7, #12]
 8006d66:	4613      	mov	r3, r2
 8006d68:	009b      	lsls	r3, r3, #2
 8006d6a:	4413      	add	r3, r2
 8006d6c:	009b      	lsls	r3, r3, #2
 8006d6e:	440b      	add	r3, r1
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d0e4      	beq.n	8006d40 <vTaskSwitchContext+0x24>
 8006d76:	68fa      	ldr	r2, [r7, #12]
 8006d78:	4613      	mov	r3, r2
 8006d7a:	009b      	lsls	r3, r3, #2
 8006d7c:	4413      	add	r3, r2
 8006d7e:	009b      	lsls	r3, r3, #2
 8006d80:	4a13      	ldr	r2, [pc, #76]	; (8006dd0 <vTaskSwitchContext+0xb4>)
 8006d82:	4413      	add	r3, r2
 8006d84:	60bb      	str	r3, [r7, #8]
 8006d86:	68bb      	ldr	r3, [r7, #8]
 8006d88:	685b      	ldr	r3, [r3, #4]
 8006d8a:	685a      	ldr	r2, [r3, #4]
 8006d8c:	68bb      	ldr	r3, [r7, #8]
 8006d8e:	605a      	str	r2, [r3, #4]
 8006d90:	68bb      	ldr	r3, [r7, #8]
 8006d92:	685a      	ldr	r2, [r3, #4]
 8006d94:	68bb      	ldr	r3, [r7, #8]
 8006d96:	3308      	adds	r3, #8
 8006d98:	429a      	cmp	r2, r3
 8006d9a:	d104      	bne.n	8006da6 <vTaskSwitchContext+0x8a>
 8006d9c:	68bb      	ldr	r3, [r7, #8]
 8006d9e:	685b      	ldr	r3, [r3, #4]
 8006da0:	685a      	ldr	r2, [r3, #4]
 8006da2:	68bb      	ldr	r3, [r7, #8]
 8006da4:	605a      	str	r2, [r3, #4]
 8006da6:	68bb      	ldr	r3, [r7, #8]
 8006da8:	685b      	ldr	r3, [r3, #4]
 8006daa:	68db      	ldr	r3, [r3, #12]
 8006dac:	4a09      	ldr	r2, [pc, #36]	; (8006dd4 <vTaskSwitchContext+0xb8>)
 8006dae:	6013      	str	r3, [r2, #0]
 8006db0:	4a06      	ldr	r2, [pc, #24]	; (8006dcc <vTaskSwitchContext+0xb0>)
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	6013      	str	r3, [r2, #0]
}
 8006db6:	bf00      	nop
 8006db8:	3714      	adds	r7, #20
 8006dba:	46bd      	mov	sp, r7
 8006dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc0:	4770      	bx	lr
 8006dc2:	bf00      	nop
 8006dc4:	20000c4c 	.word	0x20000c4c
 8006dc8:	20000c38 	.word	0x20000c38
 8006dcc:	20000c2c 	.word	0x20000c2c
 8006dd0:	20000754 	.word	0x20000754
 8006dd4:	20000750 	.word	0x20000750

08006dd8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006dd8:	b580      	push	{r7, lr}
 8006dda:	b084      	sub	sp, #16
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	6078      	str	r0, [r7, #4]
 8006de0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d10a      	bne.n	8006dfe <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8006de8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dec:	f383 8811 	msr	BASEPRI, r3
 8006df0:	f3bf 8f6f 	isb	sy
 8006df4:	f3bf 8f4f 	dsb	sy
 8006df8:	60fb      	str	r3, [r7, #12]
}
 8006dfa:	bf00      	nop
 8006dfc:	e7fe      	b.n	8006dfc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006dfe:	4b07      	ldr	r3, [pc, #28]	; (8006e1c <vTaskPlaceOnEventList+0x44>)
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	3318      	adds	r3, #24
 8006e04:	4619      	mov	r1, r3
 8006e06:	6878      	ldr	r0, [r7, #4]
 8006e08:	f7fe fe87 	bl	8005b1a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006e0c:	2101      	movs	r1, #1
 8006e0e:	6838      	ldr	r0, [r7, #0]
 8006e10:	f000 fa7c 	bl	800730c <prvAddCurrentTaskToDelayedList>
}
 8006e14:	bf00      	nop
 8006e16:	3710      	adds	r7, #16
 8006e18:	46bd      	mov	sp, r7
 8006e1a:	bd80      	pop	{r7, pc}
 8006e1c:	20000750 	.word	0x20000750

08006e20 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006e20:	b580      	push	{r7, lr}
 8006e22:	b086      	sub	sp, #24
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	60f8      	str	r0, [r7, #12]
 8006e28:	60b9      	str	r1, [r7, #8]
 8006e2a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d10a      	bne.n	8006e48 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8006e32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e36:	f383 8811 	msr	BASEPRI, r3
 8006e3a:	f3bf 8f6f 	isb	sy
 8006e3e:	f3bf 8f4f 	dsb	sy
 8006e42:	617b      	str	r3, [r7, #20]
}
 8006e44:	bf00      	nop
 8006e46:	e7fe      	b.n	8006e46 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006e48:	4b0a      	ldr	r3, [pc, #40]	; (8006e74 <vTaskPlaceOnEventListRestricted+0x54>)
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	3318      	adds	r3, #24
 8006e4e:	4619      	mov	r1, r3
 8006e50:	68f8      	ldr	r0, [r7, #12]
 8006e52:	f7fe fe3e 	bl	8005ad2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d002      	beq.n	8006e62 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8006e5c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006e60:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006e62:	6879      	ldr	r1, [r7, #4]
 8006e64:	68b8      	ldr	r0, [r7, #8]
 8006e66:	f000 fa51 	bl	800730c <prvAddCurrentTaskToDelayedList>
	}
 8006e6a:	bf00      	nop
 8006e6c:	3718      	adds	r7, #24
 8006e6e:	46bd      	mov	sp, r7
 8006e70:	bd80      	pop	{r7, pc}
 8006e72:	bf00      	nop
 8006e74:	20000750 	.word	0x20000750

08006e78 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006e78:	b580      	push	{r7, lr}
 8006e7a:	b086      	sub	sp, #24
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	68db      	ldr	r3, [r3, #12]
 8006e84:	68db      	ldr	r3, [r3, #12]
 8006e86:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006e88:	693b      	ldr	r3, [r7, #16]
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d10a      	bne.n	8006ea4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8006e8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e92:	f383 8811 	msr	BASEPRI, r3
 8006e96:	f3bf 8f6f 	isb	sy
 8006e9a:	f3bf 8f4f 	dsb	sy
 8006e9e:	60fb      	str	r3, [r7, #12]
}
 8006ea0:	bf00      	nop
 8006ea2:	e7fe      	b.n	8006ea2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006ea4:	693b      	ldr	r3, [r7, #16]
 8006ea6:	3318      	adds	r3, #24
 8006ea8:	4618      	mov	r0, r3
 8006eaa:	f7fe fe6f 	bl	8005b8c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006eae:	4b1e      	ldr	r3, [pc, #120]	; (8006f28 <xTaskRemoveFromEventList+0xb0>)
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d11d      	bne.n	8006ef2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006eb6:	693b      	ldr	r3, [r7, #16]
 8006eb8:	3304      	adds	r3, #4
 8006eba:	4618      	mov	r0, r3
 8006ebc:	f7fe fe66 	bl	8005b8c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006ec0:	693b      	ldr	r3, [r7, #16]
 8006ec2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ec4:	4b19      	ldr	r3, [pc, #100]	; (8006f2c <xTaskRemoveFromEventList+0xb4>)
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	429a      	cmp	r2, r3
 8006eca:	d903      	bls.n	8006ed4 <xTaskRemoveFromEventList+0x5c>
 8006ecc:	693b      	ldr	r3, [r7, #16]
 8006ece:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ed0:	4a16      	ldr	r2, [pc, #88]	; (8006f2c <xTaskRemoveFromEventList+0xb4>)
 8006ed2:	6013      	str	r3, [r2, #0]
 8006ed4:	693b      	ldr	r3, [r7, #16]
 8006ed6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ed8:	4613      	mov	r3, r2
 8006eda:	009b      	lsls	r3, r3, #2
 8006edc:	4413      	add	r3, r2
 8006ede:	009b      	lsls	r3, r3, #2
 8006ee0:	4a13      	ldr	r2, [pc, #76]	; (8006f30 <xTaskRemoveFromEventList+0xb8>)
 8006ee2:	441a      	add	r2, r3
 8006ee4:	693b      	ldr	r3, [r7, #16]
 8006ee6:	3304      	adds	r3, #4
 8006ee8:	4619      	mov	r1, r3
 8006eea:	4610      	mov	r0, r2
 8006eec:	f7fe fdf1 	bl	8005ad2 <vListInsertEnd>
 8006ef0:	e005      	b.n	8006efe <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006ef2:	693b      	ldr	r3, [r7, #16]
 8006ef4:	3318      	adds	r3, #24
 8006ef6:	4619      	mov	r1, r3
 8006ef8:	480e      	ldr	r0, [pc, #56]	; (8006f34 <xTaskRemoveFromEventList+0xbc>)
 8006efa:	f7fe fdea 	bl	8005ad2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006efe:	693b      	ldr	r3, [r7, #16]
 8006f00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f02:	4b0d      	ldr	r3, [pc, #52]	; (8006f38 <xTaskRemoveFromEventList+0xc0>)
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f08:	429a      	cmp	r2, r3
 8006f0a:	d905      	bls.n	8006f18 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006f0c:	2301      	movs	r3, #1
 8006f0e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006f10:	4b0a      	ldr	r3, [pc, #40]	; (8006f3c <xTaskRemoveFromEventList+0xc4>)
 8006f12:	2201      	movs	r2, #1
 8006f14:	601a      	str	r2, [r3, #0]
 8006f16:	e001      	b.n	8006f1c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8006f18:	2300      	movs	r3, #0
 8006f1a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006f1c:	697b      	ldr	r3, [r7, #20]
}
 8006f1e:	4618      	mov	r0, r3
 8006f20:	3718      	adds	r7, #24
 8006f22:	46bd      	mov	sp, r7
 8006f24:	bd80      	pop	{r7, pc}
 8006f26:	bf00      	nop
 8006f28:	20000c4c 	.word	0x20000c4c
 8006f2c:	20000c2c 	.word	0x20000c2c
 8006f30:	20000754 	.word	0x20000754
 8006f34:	20000be4 	.word	0x20000be4
 8006f38:	20000750 	.word	0x20000750
 8006f3c:	20000c38 	.word	0x20000c38

08006f40 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006f40:	b480      	push	{r7}
 8006f42:	b083      	sub	sp, #12
 8006f44:	af00      	add	r7, sp, #0
 8006f46:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006f48:	4b06      	ldr	r3, [pc, #24]	; (8006f64 <vTaskInternalSetTimeOutState+0x24>)
 8006f4a:	681a      	ldr	r2, [r3, #0]
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006f50:	4b05      	ldr	r3, [pc, #20]	; (8006f68 <vTaskInternalSetTimeOutState+0x28>)
 8006f52:	681a      	ldr	r2, [r3, #0]
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	605a      	str	r2, [r3, #4]
}
 8006f58:	bf00      	nop
 8006f5a:	370c      	adds	r7, #12
 8006f5c:	46bd      	mov	sp, r7
 8006f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f62:	4770      	bx	lr
 8006f64:	20000c3c 	.word	0x20000c3c
 8006f68:	20000c28 	.word	0x20000c28

08006f6c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006f6c:	b580      	push	{r7, lr}
 8006f6e:	b088      	sub	sp, #32
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	6078      	str	r0, [r7, #4]
 8006f74:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d10a      	bne.n	8006f92 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8006f7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f80:	f383 8811 	msr	BASEPRI, r3
 8006f84:	f3bf 8f6f 	isb	sy
 8006f88:	f3bf 8f4f 	dsb	sy
 8006f8c:	613b      	str	r3, [r7, #16]
}
 8006f8e:	bf00      	nop
 8006f90:	e7fe      	b.n	8006f90 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006f92:	683b      	ldr	r3, [r7, #0]
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d10a      	bne.n	8006fae <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8006f98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f9c:	f383 8811 	msr	BASEPRI, r3
 8006fa0:	f3bf 8f6f 	isb	sy
 8006fa4:	f3bf 8f4f 	dsb	sy
 8006fa8:	60fb      	str	r3, [r7, #12]
}
 8006faa:	bf00      	nop
 8006fac:	e7fe      	b.n	8006fac <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8006fae:	f000 fe79 	bl	8007ca4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006fb2:	4b1d      	ldr	r3, [pc, #116]	; (8007028 <xTaskCheckForTimeOut+0xbc>)
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	685b      	ldr	r3, [r3, #4]
 8006fbc:	69ba      	ldr	r2, [r7, #24]
 8006fbe:	1ad3      	subs	r3, r2, r3
 8006fc0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006fc2:	683b      	ldr	r3, [r7, #0]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006fca:	d102      	bne.n	8006fd2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006fcc:	2300      	movs	r3, #0
 8006fce:	61fb      	str	r3, [r7, #28]
 8006fd0:	e023      	b.n	800701a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681a      	ldr	r2, [r3, #0]
 8006fd6:	4b15      	ldr	r3, [pc, #84]	; (800702c <xTaskCheckForTimeOut+0xc0>)
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	429a      	cmp	r2, r3
 8006fdc:	d007      	beq.n	8006fee <xTaskCheckForTimeOut+0x82>
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	685b      	ldr	r3, [r3, #4]
 8006fe2:	69ba      	ldr	r2, [r7, #24]
 8006fe4:	429a      	cmp	r2, r3
 8006fe6:	d302      	bcc.n	8006fee <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006fe8:	2301      	movs	r3, #1
 8006fea:	61fb      	str	r3, [r7, #28]
 8006fec:	e015      	b.n	800701a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006fee:	683b      	ldr	r3, [r7, #0]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	697a      	ldr	r2, [r7, #20]
 8006ff4:	429a      	cmp	r2, r3
 8006ff6:	d20b      	bcs.n	8007010 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006ff8:	683b      	ldr	r3, [r7, #0]
 8006ffa:	681a      	ldr	r2, [r3, #0]
 8006ffc:	697b      	ldr	r3, [r7, #20]
 8006ffe:	1ad2      	subs	r2, r2, r3
 8007000:	683b      	ldr	r3, [r7, #0]
 8007002:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007004:	6878      	ldr	r0, [r7, #4]
 8007006:	f7ff ff9b 	bl	8006f40 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800700a:	2300      	movs	r3, #0
 800700c:	61fb      	str	r3, [r7, #28]
 800700e:	e004      	b.n	800701a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8007010:	683b      	ldr	r3, [r7, #0]
 8007012:	2200      	movs	r2, #0
 8007014:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007016:	2301      	movs	r3, #1
 8007018:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800701a:	f000 fe73 	bl	8007d04 <vPortExitCritical>

	return xReturn;
 800701e:	69fb      	ldr	r3, [r7, #28]
}
 8007020:	4618      	mov	r0, r3
 8007022:	3720      	adds	r7, #32
 8007024:	46bd      	mov	sp, r7
 8007026:	bd80      	pop	{r7, pc}
 8007028:	20000c28 	.word	0x20000c28
 800702c:	20000c3c 	.word	0x20000c3c

08007030 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007030:	b480      	push	{r7}
 8007032:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007034:	4b03      	ldr	r3, [pc, #12]	; (8007044 <vTaskMissedYield+0x14>)
 8007036:	2201      	movs	r2, #1
 8007038:	601a      	str	r2, [r3, #0]
}
 800703a:	bf00      	nop
 800703c:	46bd      	mov	sp, r7
 800703e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007042:	4770      	bx	lr
 8007044:	20000c38 	.word	0x20000c38

08007048 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007048:	b580      	push	{r7, lr}
 800704a:	b082      	sub	sp, #8
 800704c:	af00      	add	r7, sp, #0
 800704e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007050:	f000 f852 	bl	80070f8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007054:	4b06      	ldr	r3, [pc, #24]	; (8007070 <prvIdleTask+0x28>)
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	2b01      	cmp	r3, #1
 800705a:	d9f9      	bls.n	8007050 <prvIdleTask+0x8>
			{
				taskYIELD();
 800705c:	4b05      	ldr	r3, [pc, #20]	; (8007074 <prvIdleTask+0x2c>)
 800705e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007062:	601a      	str	r2, [r3, #0]
 8007064:	f3bf 8f4f 	dsb	sy
 8007068:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800706c:	e7f0      	b.n	8007050 <prvIdleTask+0x8>
 800706e:	bf00      	nop
 8007070:	20000754 	.word	0x20000754
 8007074:	e000ed04 	.word	0xe000ed04

08007078 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007078:	b580      	push	{r7, lr}
 800707a:	b082      	sub	sp, #8
 800707c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800707e:	2300      	movs	r3, #0
 8007080:	607b      	str	r3, [r7, #4]
 8007082:	e00c      	b.n	800709e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007084:	687a      	ldr	r2, [r7, #4]
 8007086:	4613      	mov	r3, r2
 8007088:	009b      	lsls	r3, r3, #2
 800708a:	4413      	add	r3, r2
 800708c:	009b      	lsls	r3, r3, #2
 800708e:	4a12      	ldr	r2, [pc, #72]	; (80070d8 <prvInitialiseTaskLists+0x60>)
 8007090:	4413      	add	r3, r2
 8007092:	4618      	mov	r0, r3
 8007094:	f7fe fcf0 	bl	8005a78 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	3301      	adds	r3, #1
 800709c:	607b      	str	r3, [r7, #4]
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	2b37      	cmp	r3, #55	; 0x37
 80070a2:	d9ef      	bls.n	8007084 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80070a4:	480d      	ldr	r0, [pc, #52]	; (80070dc <prvInitialiseTaskLists+0x64>)
 80070a6:	f7fe fce7 	bl	8005a78 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80070aa:	480d      	ldr	r0, [pc, #52]	; (80070e0 <prvInitialiseTaskLists+0x68>)
 80070ac:	f7fe fce4 	bl	8005a78 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80070b0:	480c      	ldr	r0, [pc, #48]	; (80070e4 <prvInitialiseTaskLists+0x6c>)
 80070b2:	f7fe fce1 	bl	8005a78 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80070b6:	480c      	ldr	r0, [pc, #48]	; (80070e8 <prvInitialiseTaskLists+0x70>)
 80070b8:	f7fe fcde 	bl	8005a78 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80070bc:	480b      	ldr	r0, [pc, #44]	; (80070ec <prvInitialiseTaskLists+0x74>)
 80070be:	f7fe fcdb 	bl	8005a78 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80070c2:	4b0b      	ldr	r3, [pc, #44]	; (80070f0 <prvInitialiseTaskLists+0x78>)
 80070c4:	4a05      	ldr	r2, [pc, #20]	; (80070dc <prvInitialiseTaskLists+0x64>)
 80070c6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80070c8:	4b0a      	ldr	r3, [pc, #40]	; (80070f4 <prvInitialiseTaskLists+0x7c>)
 80070ca:	4a05      	ldr	r2, [pc, #20]	; (80070e0 <prvInitialiseTaskLists+0x68>)
 80070cc:	601a      	str	r2, [r3, #0]
}
 80070ce:	bf00      	nop
 80070d0:	3708      	adds	r7, #8
 80070d2:	46bd      	mov	sp, r7
 80070d4:	bd80      	pop	{r7, pc}
 80070d6:	bf00      	nop
 80070d8:	20000754 	.word	0x20000754
 80070dc:	20000bb4 	.word	0x20000bb4
 80070e0:	20000bc8 	.word	0x20000bc8
 80070e4:	20000be4 	.word	0x20000be4
 80070e8:	20000bf8 	.word	0x20000bf8
 80070ec:	20000c10 	.word	0x20000c10
 80070f0:	20000bdc 	.word	0x20000bdc
 80070f4:	20000be0 	.word	0x20000be0

080070f8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80070f8:	b580      	push	{r7, lr}
 80070fa:	b082      	sub	sp, #8
 80070fc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80070fe:	e019      	b.n	8007134 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007100:	f000 fdd0 	bl	8007ca4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007104:	4b10      	ldr	r3, [pc, #64]	; (8007148 <prvCheckTasksWaitingTermination+0x50>)
 8007106:	68db      	ldr	r3, [r3, #12]
 8007108:	68db      	ldr	r3, [r3, #12]
 800710a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	3304      	adds	r3, #4
 8007110:	4618      	mov	r0, r3
 8007112:	f7fe fd3b 	bl	8005b8c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007116:	4b0d      	ldr	r3, [pc, #52]	; (800714c <prvCheckTasksWaitingTermination+0x54>)
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	3b01      	subs	r3, #1
 800711c:	4a0b      	ldr	r2, [pc, #44]	; (800714c <prvCheckTasksWaitingTermination+0x54>)
 800711e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007120:	4b0b      	ldr	r3, [pc, #44]	; (8007150 <prvCheckTasksWaitingTermination+0x58>)
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	3b01      	subs	r3, #1
 8007126:	4a0a      	ldr	r2, [pc, #40]	; (8007150 <prvCheckTasksWaitingTermination+0x58>)
 8007128:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800712a:	f000 fdeb 	bl	8007d04 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800712e:	6878      	ldr	r0, [r7, #4]
 8007130:	f000 f810 	bl	8007154 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007134:	4b06      	ldr	r3, [pc, #24]	; (8007150 <prvCheckTasksWaitingTermination+0x58>)
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	2b00      	cmp	r3, #0
 800713a:	d1e1      	bne.n	8007100 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800713c:	bf00      	nop
 800713e:	bf00      	nop
 8007140:	3708      	adds	r7, #8
 8007142:	46bd      	mov	sp, r7
 8007144:	bd80      	pop	{r7, pc}
 8007146:	bf00      	nop
 8007148:	20000bf8 	.word	0x20000bf8
 800714c:	20000c24 	.word	0x20000c24
 8007150:	20000c0c 	.word	0x20000c0c

08007154 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007154:	b580      	push	{r7, lr}
 8007156:	b084      	sub	sp, #16
 8007158:	af00      	add	r7, sp, #0
 800715a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007162:	2b00      	cmp	r3, #0
 8007164:	d108      	bne.n	8007178 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800716a:	4618      	mov	r0, r3
 800716c:	f000 ff88 	bl	8008080 <vPortFree>
				vPortFree( pxTCB );
 8007170:	6878      	ldr	r0, [r7, #4]
 8007172:	f000 ff85 	bl	8008080 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007176:	e018      	b.n	80071aa <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800717e:	2b01      	cmp	r3, #1
 8007180:	d103      	bne.n	800718a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8007182:	6878      	ldr	r0, [r7, #4]
 8007184:	f000 ff7c 	bl	8008080 <vPortFree>
	}
 8007188:	e00f      	b.n	80071aa <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007190:	2b02      	cmp	r3, #2
 8007192:	d00a      	beq.n	80071aa <prvDeleteTCB+0x56>
	__asm volatile
 8007194:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007198:	f383 8811 	msr	BASEPRI, r3
 800719c:	f3bf 8f6f 	isb	sy
 80071a0:	f3bf 8f4f 	dsb	sy
 80071a4:	60fb      	str	r3, [r7, #12]
}
 80071a6:	bf00      	nop
 80071a8:	e7fe      	b.n	80071a8 <prvDeleteTCB+0x54>
	}
 80071aa:	bf00      	nop
 80071ac:	3710      	adds	r7, #16
 80071ae:	46bd      	mov	sp, r7
 80071b0:	bd80      	pop	{r7, pc}
	...

080071b4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80071b4:	b480      	push	{r7}
 80071b6:	b083      	sub	sp, #12
 80071b8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80071ba:	4b0c      	ldr	r3, [pc, #48]	; (80071ec <prvResetNextTaskUnblockTime+0x38>)
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d104      	bne.n	80071ce <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80071c4:	4b0a      	ldr	r3, [pc, #40]	; (80071f0 <prvResetNextTaskUnblockTime+0x3c>)
 80071c6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80071ca:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80071cc:	e008      	b.n	80071e0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80071ce:	4b07      	ldr	r3, [pc, #28]	; (80071ec <prvResetNextTaskUnblockTime+0x38>)
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	68db      	ldr	r3, [r3, #12]
 80071d4:	68db      	ldr	r3, [r3, #12]
 80071d6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	685b      	ldr	r3, [r3, #4]
 80071dc:	4a04      	ldr	r2, [pc, #16]	; (80071f0 <prvResetNextTaskUnblockTime+0x3c>)
 80071de:	6013      	str	r3, [r2, #0]
}
 80071e0:	bf00      	nop
 80071e2:	370c      	adds	r7, #12
 80071e4:	46bd      	mov	sp, r7
 80071e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ea:	4770      	bx	lr
 80071ec:	20000bdc 	.word	0x20000bdc
 80071f0:	20000c44 	.word	0x20000c44

080071f4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80071f4:	b480      	push	{r7}
 80071f6:	b083      	sub	sp, #12
 80071f8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80071fa:	4b0b      	ldr	r3, [pc, #44]	; (8007228 <xTaskGetSchedulerState+0x34>)
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d102      	bne.n	8007208 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007202:	2301      	movs	r3, #1
 8007204:	607b      	str	r3, [r7, #4]
 8007206:	e008      	b.n	800721a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007208:	4b08      	ldr	r3, [pc, #32]	; (800722c <xTaskGetSchedulerState+0x38>)
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	2b00      	cmp	r3, #0
 800720e:	d102      	bne.n	8007216 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007210:	2302      	movs	r3, #2
 8007212:	607b      	str	r3, [r7, #4]
 8007214:	e001      	b.n	800721a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007216:	2300      	movs	r3, #0
 8007218:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800721a:	687b      	ldr	r3, [r7, #4]
	}
 800721c:	4618      	mov	r0, r3
 800721e:	370c      	adds	r7, #12
 8007220:	46bd      	mov	sp, r7
 8007222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007226:	4770      	bx	lr
 8007228:	20000c30 	.word	0x20000c30
 800722c:	20000c4c 	.word	0x20000c4c

08007230 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007230:	b580      	push	{r7, lr}
 8007232:	b086      	sub	sp, #24
 8007234:	af00      	add	r7, sp, #0
 8007236:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800723c:	2300      	movs	r3, #0
 800723e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	2b00      	cmp	r3, #0
 8007244:	d056      	beq.n	80072f4 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007246:	4b2e      	ldr	r3, [pc, #184]	; (8007300 <xTaskPriorityDisinherit+0xd0>)
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	693a      	ldr	r2, [r7, #16]
 800724c:	429a      	cmp	r2, r3
 800724e:	d00a      	beq.n	8007266 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8007250:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007254:	f383 8811 	msr	BASEPRI, r3
 8007258:	f3bf 8f6f 	isb	sy
 800725c:	f3bf 8f4f 	dsb	sy
 8007260:	60fb      	str	r3, [r7, #12]
}
 8007262:	bf00      	nop
 8007264:	e7fe      	b.n	8007264 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007266:	693b      	ldr	r3, [r7, #16]
 8007268:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800726a:	2b00      	cmp	r3, #0
 800726c:	d10a      	bne.n	8007284 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800726e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007272:	f383 8811 	msr	BASEPRI, r3
 8007276:	f3bf 8f6f 	isb	sy
 800727a:	f3bf 8f4f 	dsb	sy
 800727e:	60bb      	str	r3, [r7, #8]
}
 8007280:	bf00      	nop
 8007282:	e7fe      	b.n	8007282 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8007284:	693b      	ldr	r3, [r7, #16]
 8007286:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007288:	1e5a      	subs	r2, r3, #1
 800728a:	693b      	ldr	r3, [r7, #16]
 800728c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800728e:	693b      	ldr	r3, [r7, #16]
 8007290:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007292:	693b      	ldr	r3, [r7, #16]
 8007294:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007296:	429a      	cmp	r2, r3
 8007298:	d02c      	beq.n	80072f4 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800729a:	693b      	ldr	r3, [r7, #16]
 800729c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d128      	bne.n	80072f4 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80072a2:	693b      	ldr	r3, [r7, #16]
 80072a4:	3304      	adds	r3, #4
 80072a6:	4618      	mov	r0, r3
 80072a8:	f7fe fc70 	bl	8005b8c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80072ac:	693b      	ldr	r3, [r7, #16]
 80072ae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80072b0:	693b      	ldr	r3, [r7, #16]
 80072b2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80072b4:	693b      	ldr	r3, [r7, #16]
 80072b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072b8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80072bc:	693b      	ldr	r3, [r7, #16]
 80072be:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80072c0:	693b      	ldr	r3, [r7, #16]
 80072c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072c4:	4b0f      	ldr	r3, [pc, #60]	; (8007304 <xTaskPriorityDisinherit+0xd4>)
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	429a      	cmp	r2, r3
 80072ca:	d903      	bls.n	80072d4 <xTaskPriorityDisinherit+0xa4>
 80072cc:	693b      	ldr	r3, [r7, #16]
 80072ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072d0:	4a0c      	ldr	r2, [pc, #48]	; (8007304 <xTaskPriorityDisinherit+0xd4>)
 80072d2:	6013      	str	r3, [r2, #0]
 80072d4:	693b      	ldr	r3, [r7, #16]
 80072d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072d8:	4613      	mov	r3, r2
 80072da:	009b      	lsls	r3, r3, #2
 80072dc:	4413      	add	r3, r2
 80072de:	009b      	lsls	r3, r3, #2
 80072e0:	4a09      	ldr	r2, [pc, #36]	; (8007308 <xTaskPriorityDisinherit+0xd8>)
 80072e2:	441a      	add	r2, r3
 80072e4:	693b      	ldr	r3, [r7, #16]
 80072e6:	3304      	adds	r3, #4
 80072e8:	4619      	mov	r1, r3
 80072ea:	4610      	mov	r0, r2
 80072ec:	f7fe fbf1 	bl	8005ad2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80072f0:	2301      	movs	r3, #1
 80072f2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80072f4:	697b      	ldr	r3, [r7, #20]
	}
 80072f6:	4618      	mov	r0, r3
 80072f8:	3718      	adds	r7, #24
 80072fa:	46bd      	mov	sp, r7
 80072fc:	bd80      	pop	{r7, pc}
 80072fe:	bf00      	nop
 8007300:	20000750 	.word	0x20000750
 8007304:	20000c2c 	.word	0x20000c2c
 8007308:	20000754 	.word	0x20000754

0800730c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800730c:	b580      	push	{r7, lr}
 800730e:	b084      	sub	sp, #16
 8007310:	af00      	add	r7, sp, #0
 8007312:	6078      	str	r0, [r7, #4]
 8007314:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007316:	4b21      	ldr	r3, [pc, #132]	; (800739c <prvAddCurrentTaskToDelayedList+0x90>)
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800731c:	4b20      	ldr	r3, [pc, #128]	; (80073a0 <prvAddCurrentTaskToDelayedList+0x94>)
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	3304      	adds	r3, #4
 8007322:	4618      	mov	r0, r3
 8007324:	f7fe fc32 	bl	8005b8c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800732e:	d10a      	bne.n	8007346 <prvAddCurrentTaskToDelayedList+0x3a>
 8007330:	683b      	ldr	r3, [r7, #0]
 8007332:	2b00      	cmp	r3, #0
 8007334:	d007      	beq.n	8007346 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007336:	4b1a      	ldr	r3, [pc, #104]	; (80073a0 <prvAddCurrentTaskToDelayedList+0x94>)
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	3304      	adds	r3, #4
 800733c:	4619      	mov	r1, r3
 800733e:	4819      	ldr	r0, [pc, #100]	; (80073a4 <prvAddCurrentTaskToDelayedList+0x98>)
 8007340:	f7fe fbc7 	bl	8005ad2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007344:	e026      	b.n	8007394 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007346:	68fa      	ldr	r2, [r7, #12]
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	4413      	add	r3, r2
 800734c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800734e:	4b14      	ldr	r3, [pc, #80]	; (80073a0 <prvAddCurrentTaskToDelayedList+0x94>)
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	68ba      	ldr	r2, [r7, #8]
 8007354:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007356:	68ba      	ldr	r2, [r7, #8]
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	429a      	cmp	r2, r3
 800735c:	d209      	bcs.n	8007372 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800735e:	4b12      	ldr	r3, [pc, #72]	; (80073a8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8007360:	681a      	ldr	r2, [r3, #0]
 8007362:	4b0f      	ldr	r3, [pc, #60]	; (80073a0 <prvAddCurrentTaskToDelayedList+0x94>)
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	3304      	adds	r3, #4
 8007368:	4619      	mov	r1, r3
 800736a:	4610      	mov	r0, r2
 800736c:	f7fe fbd5 	bl	8005b1a <vListInsert>
}
 8007370:	e010      	b.n	8007394 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007372:	4b0e      	ldr	r3, [pc, #56]	; (80073ac <prvAddCurrentTaskToDelayedList+0xa0>)
 8007374:	681a      	ldr	r2, [r3, #0]
 8007376:	4b0a      	ldr	r3, [pc, #40]	; (80073a0 <prvAddCurrentTaskToDelayedList+0x94>)
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	3304      	adds	r3, #4
 800737c:	4619      	mov	r1, r3
 800737e:	4610      	mov	r0, r2
 8007380:	f7fe fbcb 	bl	8005b1a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007384:	4b0a      	ldr	r3, [pc, #40]	; (80073b0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	68ba      	ldr	r2, [r7, #8]
 800738a:	429a      	cmp	r2, r3
 800738c:	d202      	bcs.n	8007394 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800738e:	4a08      	ldr	r2, [pc, #32]	; (80073b0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007390:	68bb      	ldr	r3, [r7, #8]
 8007392:	6013      	str	r3, [r2, #0]
}
 8007394:	bf00      	nop
 8007396:	3710      	adds	r7, #16
 8007398:	46bd      	mov	sp, r7
 800739a:	bd80      	pop	{r7, pc}
 800739c:	20000c28 	.word	0x20000c28
 80073a0:	20000750 	.word	0x20000750
 80073a4:	20000c10 	.word	0x20000c10
 80073a8:	20000be0 	.word	0x20000be0
 80073ac:	20000bdc 	.word	0x20000bdc
 80073b0:	20000c44 	.word	0x20000c44

080073b4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80073b4:	b580      	push	{r7, lr}
 80073b6:	b08a      	sub	sp, #40	; 0x28
 80073b8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80073ba:	2300      	movs	r3, #0
 80073bc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80073be:	f000 fb07 	bl	80079d0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80073c2:	4b1c      	ldr	r3, [pc, #112]	; (8007434 <xTimerCreateTimerTask+0x80>)
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d021      	beq.n	800740e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80073ca:	2300      	movs	r3, #0
 80073cc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80073ce:	2300      	movs	r3, #0
 80073d0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80073d2:	1d3a      	adds	r2, r7, #4
 80073d4:	f107 0108 	add.w	r1, r7, #8
 80073d8:	f107 030c 	add.w	r3, r7, #12
 80073dc:	4618      	mov	r0, r3
 80073de:	f7fe fb31 	bl	8005a44 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80073e2:	6879      	ldr	r1, [r7, #4]
 80073e4:	68bb      	ldr	r3, [r7, #8]
 80073e6:	68fa      	ldr	r2, [r7, #12]
 80073e8:	9202      	str	r2, [sp, #8]
 80073ea:	9301      	str	r3, [sp, #4]
 80073ec:	2302      	movs	r3, #2
 80073ee:	9300      	str	r3, [sp, #0]
 80073f0:	2300      	movs	r3, #0
 80073f2:	460a      	mov	r2, r1
 80073f4:	4910      	ldr	r1, [pc, #64]	; (8007438 <xTimerCreateTimerTask+0x84>)
 80073f6:	4811      	ldr	r0, [pc, #68]	; (800743c <xTimerCreateTimerTask+0x88>)
 80073f8:	f7ff f8de 	bl	80065b8 <xTaskCreateStatic>
 80073fc:	4603      	mov	r3, r0
 80073fe:	4a10      	ldr	r2, [pc, #64]	; (8007440 <xTimerCreateTimerTask+0x8c>)
 8007400:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007402:	4b0f      	ldr	r3, [pc, #60]	; (8007440 <xTimerCreateTimerTask+0x8c>)
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	2b00      	cmp	r3, #0
 8007408:	d001      	beq.n	800740e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800740a:	2301      	movs	r3, #1
 800740c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800740e:	697b      	ldr	r3, [r7, #20]
 8007410:	2b00      	cmp	r3, #0
 8007412:	d10a      	bne.n	800742a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8007414:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007418:	f383 8811 	msr	BASEPRI, r3
 800741c:	f3bf 8f6f 	isb	sy
 8007420:	f3bf 8f4f 	dsb	sy
 8007424:	613b      	str	r3, [r7, #16]
}
 8007426:	bf00      	nop
 8007428:	e7fe      	b.n	8007428 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800742a:	697b      	ldr	r3, [r7, #20]
}
 800742c:	4618      	mov	r0, r3
 800742e:	3718      	adds	r7, #24
 8007430:	46bd      	mov	sp, r7
 8007432:	bd80      	pop	{r7, pc}
 8007434:	20000c80 	.word	0x20000c80
 8007438:	08009758 	.word	0x08009758
 800743c:	08007579 	.word	0x08007579
 8007440:	20000c84 	.word	0x20000c84

08007444 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007444:	b580      	push	{r7, lr}
 8007446:	b08a      	sub	sp, #40	; 0x28
 8007448:	af00      	add	r7, sp, #0
 800744a:	60f8      	str	r0, [r7, #12]
 800744c:	60b9      	str	r1, [r7, #8]
 800744e:	607a      	str	r2, [r7, #4]
 8007450:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007452:	2300      	movs	r3, #0
 8007454:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	2b00      	cmp	r3, #0
 800745a:	d10a      	bne.n	8007472 <xTimerGenericCommand+0x2e>
	__asm volatile
 800745c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007460:	f383 8811 	msr	BASEPRI, r3
 8007464:	f3bf 8f6f 	isb	sy
 8007468:	f3bf 8f4f 	dsb	sy
 800746c:	623b      	str	r3, [r7, #32]
}
 800746e:	bf00      	nop
 8007470:	e7fe      	b.n	8007470 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007472:	4b1a      	ldr	r3, [pc, #104]	; (80074dc <xTimerGenericCommand+0x98>)
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	2b00      	cmp	r3, #0
 8007478:	d02a      	beq.n	80074d0 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800747a:	68bb      	ldr	r3, [r7, #8]
 800747c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007486:	68bb      	ldr	r3, [r7, #8]
 8007488:	2b05      	cmp	r3, #5
 800748a:	dc18      	bgt.n	80074be <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800748c:	f7ff feb2 	bl	80071f4 <xTaskGetSchedulerState>
 8007490:	4603      	mov	r3, r0
 8007492:	2b02      	cmp	r3, #2
 8007494:	d109      	bne.n	80074aa <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007496:	4b11      	ldr	r3, [pc, #68]	; (80074dc <xTimerGenericCommand+0x98>)
 8007498:	6818      	ldr	r0, [r3, #0]
 800749a:	f107 0110 	add.w	r1, r7, #16
 800749e:	2300      	movs	r3, #0
 80074a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80074a2:	f7fe fca1 	bl	8005de8 <xQueueGenericSend>
 80074a6:	6278      	str	r0, [r7, #36]	; 0x24
 80074a8:	e012      	b.n	80074d0 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80074aa:	4b0c      	ldr	r3, [pc, #48]	; (80074dc <xTimerGenericCommand+0x98>)
 80074ac:	6818      	ldr	r0, [r3, #0]
 80074ae:	f107 0110 	add.w	r1, r7, #16
 80074b2:	2300      	movs	r3, #0
 80074b4:	2200      	movs	r2, #0
 80074b6:	f7fe fc97 	bl	8005de8 <xQueueGenericSend>
 80074ba:	6278      	str	r0, [r7, #36]	; 0x24
 80074bc:	e008      	b.n	80074d0 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80074be:	4b07      	ldr	r3, [pc, #28]	; (80074dc <xTimerGenericCommand+0x98>)
 80074c0:	6818      	ldr	r0, [r3, #0]
 80074c2:	f107 0110 	add.w	r1, r7, #16
 80074c6:	2300      	movs	r3, #0
 80074c8:	683a      	ldr	r2, [r7, #0]
 80074ca:	f7fe fd8b 	bl	8005fe4 <xQueueGenericSendFromISR>
 80074ce:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80074d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80074d2:	4618      	mov	r0, r3
 80074d4:	3728      	adds	r7, #40	; 0x28
 80074d6:	46bd      	mov	sp, r7
 80074d8:	bd80      	pop	{r7, pc}
 80074da:	bf00      	nop
 80074dc:	20000c80 	.word	0x20000c80

080074e0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80074e0:	b580      	push	{r7, lr}
 80074e2:	b088      	sub	sp, #32
 80074e4:	af02      	add	r7, sp, #8
 80074e6:	6078      	str	r0, [r7, #4]
 80074e8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80074ea:	4b22      	ldr	r3, [pc, #136]	; (8007574 <prvProcessExpiredTimer+0x94>)
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	68db      	ldr	r3, [r3, #12]
 80074f0:	68db      	ldr	r3, [r3, #12]
 80074f2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80074f4:	697b      	ldr	r3, [r7, #20]
 80074f6:	3304      	adds	r3, #4
 80074f8:	4618      	mov	r0, r3
 80074fa:	f7fe fb47 	bl	8005b8c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80074fe:	697b      	ldr	r3, [r7, #20]
 8007500:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007504:	f003 0304 	and.w	r3, r3, #4
 8007508:	2b00      	cmp	r3, #0
 800750a:	d022      	beq.n	8007552 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800750c:	697b      	ldr	r3, [r7, #20]
 800750e:	699a      	ldr	r2, [r3, #24]
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	18d1      	adds	r1, r2, r3
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	683a      	ldr	r2, [r7, #0]
 8007518:	6978      	ldr	r0, [r7, #20]
 800751a:	f000 f8d1 	bl	80076c0 <prvInsertTimerInActiveList>
 800751e:	4603      	mov	r3, r0
 8007520:	2b00      	cmp	r3, #0
 8007522:	d01f      	beq.n	8007564 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007524:	2300      	movs	r3, #0
 8007526:	9300      	str	r3, [sp, #0]
 8007528:	2300      	movs	r3, #0
 800752a:	687a      	ldr	r2, [r7, #4]
 800752c:	2100      	movs	r1, #0
 800752e:	6978      	ldr	r0, [r7, #20]
 8007530:	f7ff ff88 	bl	8007444 <xTimerGenericCommand>
 8007534:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007536:	693b      	ldr	r3, [r7, #16]
 8007538:	2b00      	cmp	r3, #0
 800753a:	d113      	bne.n	8007564 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800753c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007540:	f383 8811 	msr	BASEPRI, r3
 8007544:	f3bf 8f6f 	isb	sy
 8007548:	f3bf 8f4f 	dsb	sy
 800754c:	60fb      	str	r3, [r7, #12]
}
 800754e:	bf00      	nop
 8007550:	e7fe      	b.n	8007550 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007552:	697b      	ldr	r3, [r7, #20]
 8007554:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007558:	f023 0301 	bic.w	r3, r3, #1
 800755c:	b2da      	uxtb	r2, r3
 800755e:	697b      	ldr	r3, [r7, #20]
 8007560:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007564:	697b      	ldr	r3, [r7, #20]
 8007566:	6a1b      	ldr	r3, [r3, #32]
 8007568:	6978      	ldr	r0, [r7, #20]
 800756a:	4798      	blx	r3
}
 800756c:	bf00      	nop
 800756e:	3718      	adds	r7, #24
 8007570:	46bd      	mov	sp, r7
 8007572:	bd80      	pop	{r7, pc}
 8007574:	20000c78 	.word	0x20000c78

08007578 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007578:	b580      	push	{r7, lr}
 800757a:	b084      	sub	sp, #16
 800757c:	af00      	add	r7, sp, #0
 800757e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007580:	f107 0308 	add.w	r3, r7, #8
 8007584:	4618      	mov	r0, r3
 8007586:	f000 f857 	bl	8007638 <prvGetNextExpireTime>
 800758a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800758c:	68bb      	ldr	r3, [r7, #8]
 800758e:	4619      	mov	r1, r3
 8007590:	68f8      	ldr	r0, [r7, #12]
 8007592:	f000 f803 	bl	800759c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007596:	f000 f8d5 	bl	8007744 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800759a:	e7f1      	b.n	8007580 <prvTimerTask+0x8>

0800759c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800759c:	b580      	push	{r7, lr}
 800759e:	b084      	sub	sp, #16
 80075a0:	af00      	add	r7, sp, #0
 80075a2:	6078      	str	r0, [r7, #4]
 80075a4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80075a6:	f7ff fa43 	bl	8006a30 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80075aa:	f107 0308 	add.w	r3, r7, #8
 80075ae:	4618      	mov	r0, r3
 80075b0:	f000 f866 	bl	8007680 <prvSampleTimeNow>
 80075b4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80075b6:	68bb      	ldr	r3, [r7, #8]
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d130      	bne.n	800761e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80075bc:	683b      	ldr	r3, [r7, #0]
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d10a      	bne.n	80075d8 <prvProcessTimerOrBlockTask+0x3c>
 80075c2:	687a      	ldr	r2, [r7, #4]
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	429a      	cmp	r2, r3
 80075c8:	d806      	bhi.n	80075d8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80075ca:	f7ff fa3f 	bl	8006a4c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80075ce:	68f9      	ldr	r1, [r7, #12]
 80075d0:	6878      	ldr	r0, [r7, #4]
 80075d2:	f7ff ff85 	bl	80074e0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80075d6:	e024      	b.n	8007622 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80075d8:	683b      	ldr	r3, [r7, #0]
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d008      	beq.n	80075f0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80075de:	4b13      	ldr	r3, [pc, #76]	; (800762c <prvProcessTimerOrBlockTask+0x90>)
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d101      	bne.n	80075ec <prvProcessTimerOrBlockTask+0x50>
 80075e8:	2301      	movs	r3, #1
 80075ea:	e000      	b.n	80075ee <prvProcessTimerOrBlockTask+0x52>
 80075ec:	2300      	movs	r3, #0
 80075ee:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80075f0:	4b0f      	ldr	r3, [pc, #60]	; (8007630 <prvProcessTimerOrBlockTask+0x94>)
 80075f2:	6818      	ldr	r0, [r3, #0]
 80075f4:	687a      	ldr	r2, [r7, #4]
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	1ad3      	subs	r3, r2, r3
 80075fa:	683a      	ldr	r2, [r7, #0]
 80075fc:	4619      	mov	r1, r3
 80075fe:	f7fe ffa7 	bl	8006550 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007602:	f7ff fa23 	bl	8006a4c <xTaskResumeAll>
 8007606:	4603      	mov	r3, r0
 8007608:	2b00      	cmp	r3, #0
 800760a:	d10a      	bne.n	8007622 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800760c:	4b09      	ldr	r3, [pc, #36]	; (8007634 <prvProcessTimerOrBlockTask+0x98>)
 800760e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007612:	601a      	str	r2, [r3, #0]
 8007614:	f3bf 8f4f 	dsb	sy
 8007618:	f3bf 8f6f 	isb	sy
}
 800761c:	e001      	b.n	8007622 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800761e:	f7ff fa15 	bl	8006a4c <xTaskResumeAll>
}
 8007622:	bf00      	nop
 8007624:	3710      	adds	r7, #16
 8007626:	46bd      	mov	sp, r7
 8007628:	bd80      	pop	{r7, pc}
 800762a:	bf00      	nop
 800762c:	20000c7c 	.word	0x20000c7c
 8007630:	20000c80 	.word	0x20000c80
 8007634:	e000ed04 	.word	0xe000ed04

08007638 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007638:	b480      	push	{r7}
 800763a:	b085      	sub	sp, #20
 800763c:	af00      	add	r7, sp, #0
 800763e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007640:	4b0e      	ldr	r3, [pc, #56]	; (800767c <prvGetNextExpireTime+0x44>)
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	2b00      	cmp	r3, #0
 8007648:	d101      	bne.n	800764e <prvGetNextExpireTime+0x16>
 800764a:	2201      	movs	r2, #1
 800764c:	e000      	b.n	8007650 <prvGetNextExpireTime+0x18>
 800764e:	2200      	movs	r2, #0
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	2b00      	cmp	r3, #0
 800765a:	d105      	bne.n	8007668 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800765c:	4b07      	ldr	r3, [pc, #28]	; (800767c <prvGetNextExpireTime+0x44>)
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	68db      	ldr	r3, [r3, #12]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	60fb      	str	r3, [r7, #12]
 8007666:	e001      	b.n	800766c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007668:	2300      	movs	r3, #0
 800766a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800766c:	68fb      	ldr	r3, [r7, #12]
}
 800766e:	4618      	mov	r0, r3
 8007670:	3714      	adds	r7, #20
 8007672:	46bd      	mov	sp, r7
 8007674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007678:	4770      	bx	lr
 800767a:	bf00      	nop
 800767c:	20000c78 	.word	0x20000c78

08007680 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007680:	b580      	push	{r7, lr}
 8007682:	b084      	sub	sp, #16
 8007684:	af00      	add	r7, sp, #0
 8007686:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007688:	f7ff fa7e 	bl	8006b88 <xTaskGetTickCount>
 800768c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800768e:	4b0b      	ldr	r3, [pc, #44]	; (80076bc <prvSampleTimeNow+0x3c>)
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	68fa      	ldr	r2, [r7, #12]
 8007694:	429a      	cmp	r2, r3
 8007696:	d205      	bcs.n	80076a4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007698:	f000 f936 	bl	8007908 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	2201      	movs	r2, #1
 80076a0:	601a      	str	r2, [r3, #0]
 80076a2:	e002      	b.n	80076aa <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	2200      	movs	r2, #0
 80076a8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80076aa:	4a04      	ldr	r2, [pc, #16]	; (80076bc <prvSampleTimeNow+0x3c>)
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80076b0:	68fb      	ldr	r3, [r7, #12]
}
 80076b2:	4618      	mov	r0, r3
 80076b4:	3710      	adds	r7, #16
 80076b6:	46bd      	mov	sp, r7
 80076b8:	bd80      	pop	{r7, pc}
 80076ba:	bf00      	nop
 80076bc:	20000c88 	.word	0x20000c88

080076c0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80076c0:	b580      	push	{r7, lr}
 80076c2:	b086      	sub	sp, #24
 80076c4:	af00      	add	r7, sp, #0
 80076c6:	60f8      	str	r0, [r7, #12]
 80076c8:	60b9      	str	r1, [r7, #8]
 80076ca:	607a      	str	r2, [r7, #4]
 80076cc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80076ce:	2300      	movs	r3, #0
 80076d0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	68ba      	ldr	r2, [r7, #8]
 80076d6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	68fa      	ldr	r2, [r7, #12]
 80076dc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80076de:	68ba      	ldr	r2, [r7, #8]
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	429a      	cmp	r2, r3
 80076e4:	d812      	bhi.n	800770c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80076e6:	687a      	ldr	r2, [r7, #4]
 80076e8:	683b      	ldr	r3, [r7, #0]
 80076ea:	1ad2      	subs	r2, r2, r3
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	699b      	ldr	r3, [r3, #24]
 80076f0:	429a      	cmp	r2, r3
 80076f2:	d302      	bcc.n	80076fa <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80076f4:	2301      	movs	r3, #1
 80076f6:	617b      	str	r3, [r7, #20]
 80076f8:	e01b      	b.n	8007732 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80076fa:	4b10      	ldr	r3, [pc, #64]	; (800773c <prvInsertTimerInActiveList+0x7c>)
 80076fc:	681a      	ldr	r2, [r3, #0]
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	3304      	adds	r3, #4
 8007702:	4619      	mov	r1, r3
 8007704:	4610      	mov	r0, r2
 8007706:	f7fe fa08 	bl	8005b1a <vListInsert>
 800770a:	e012      	b.n	8007732 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800770c:	687a      	ldr	r2, [r7, #4]
 800770e:	683b      	ldr	r3, [r7, #0]
 8007710:	429a      	cmp	r2, r3
 8007712:	d206      	bcs.n	8007722 <prvInsertTimerInActiveList+0x62>
 8007714:	68ba      	ldr	r2, [r7, #8]
 8007716:	683b      	ldr	r3, [r7, #0]
 8007718:	429a      	cmp	r2, r3
 800771a:	d302      	bcc.n	8007722 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800771c:	2301      	movs	r3, #1
 800771e:	617b      	str	r3, [r7, #20]
 8007720:	e007      	b.n	8007732 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007722:	4b07      	ldr	r3, [pc, #28]	; (8007740 <prvInsertTimerInActiveList+0x80>)
 8007724:	681a      	ldr	r2, [r3, #0]
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	3304      	adds	r3, #4
 800772a:	4619      	mov	r1, r3
 800772c:	4610      	mov	r0, r2
 800772e:	f7fe f9f4 	bl	8005b1a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007732:	697b      	ldr	r3, [r7, #20]
}
 8007734:	4618      	mov	r0, r3
 8007736:	3718      	adds	r7, #24
 8007738:	46bd      	mov	sp, r7
 800773a:	bd80      	pop	{r7, pc}
 800773c:	20000c7c 	.word	0x20000c7c
 8007740:	20000c78 	.word	0x20000c78

08007744 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007744:	b580      	push	{r7, lr}
 8007746:	b08e      	sub	sp, #56	; 0x38
 8007748:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800774a:	e0ca      	b.n	80078e2 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	2b00      	cmp	r3, #0
 8007750:	da18      	bge.n	8007784 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007752:	1d3b      	adds	r3, r7, #4
 8007754:	3304      	adds	r3, #4
 8007756:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007758:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800775a:	2b00      	cmp	r3, #0
 800775c:	d10a      	bne.n	8007774 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800775e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007762:	f383 8811 	msr	BASEPRI, r3
 8007766:	f3bf 8f6f 	isb	sy
 800776a:	f3bf 8f4f 	dsb	sy
 800776e:	61fb      	str	r3, [r7, #28]
}
 8007770:	bf00      	nop
 8007772:	e7fe      	b.n	8007772 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007774:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800777a:	6850      	ldr	r0, [r2, #4]
 800777c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800777e:	6892      	ldr	r2, [r2, #8]
 8007780:	4611      	mov	r1, r2
 8007782:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	2b00      	cmp	r3, #0
 8007788:	f2c0 80aa 	blt.w	80078e0 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007790:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007792:	695b      	ldr	r3, [r3, #20]
 8007794:	2b00      	cmp	r3, #0
 8007796:	d004      	beq.n	80077a2 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007798:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800779a:	3304      	adds	r3, #4
 800779c:	4618      	mov	r0, r3
 800779e:	f7fe f9f5 	bl	8005b8c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80077a2:	463b      	mov	r3, r7
 80077a4:	4618      	mov	r0, r3
 80077a6:	f7ff ff6b 	bl	8007680 <prvSampleTimeNow>
 80077aa:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	2b09      	cmp	r3, #9
 80077b0:	f200 8097 	bhi.w	80078e2 <prvProcessReceivedCommands+0x19e>
 80077b4:	a201      	add	r2, pc, #4	; (adr r2, 80077bc <prvProcessReceivedCommands+0x78>)
 80077b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077ba:	bf00      	nop
 80077bc:	080077e5 	.word	0x080077e5
 80077c0:	080077e5 	.word	0x080077e5
 80077c4:	080077e5 	.word	0x080077e5
 80077c8:	08007859 	.word	0x08007859
 80077cc:	0800786d 	.word	0x0800786d
 80077d0:	080078b7 	.word	0x080078b7
 80077d4:	080077e5 	.word	0x080077e5
 80077d8:	080077e5 	.word	0x080077e5
 80077dc:	08007859 	.word	0x08007859
 80077e0:	0800786d 	.word	0x0800786d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80077e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077e6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80077ea:	f043 0301 	orr.w	r3, r3, #1
 80077ee:	b2da      	uxtb	r2, r3
 80077f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077f2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80077f6:	68ba      	ldr	r2, [r7, #8]
 80077f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077fa:	699b      	ldr	r3, [r3, #24]
 80077fc:	18d1      	adds	r1, r2, r3
 80077fe:	68bb      	ldr	r3, [r7, #8]
 8007800:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007802:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007804:	f7ff ff5c 	bl	80076c0 <prvInsertTimerInActiveList>
 8007808:	4603      	mov	r3, r0
 800780a:	2b00      	cmp	r3, #0
 800780c:	d069      	beq.n	80078e2 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800780e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007810:	6a1b      	ldr	r3, [r3, #32]
 8007812:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007814:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007816:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007818:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800781c:	f003 0304 	and.w	r3, r3, #4
 8007820:	2b00      	cmp	r3, #0
 8007822:	d05e      	beq.n	80078e2 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007824:	68ba      	ldr	r2, [r7, #8]
 8007826:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007828:	699b      	ldr	r3, [r3, #24]
 800782a:	441a      	add	r2, r3
 800782c:	2300      	movs	r3, #0
 800782e:	9300      	str	r3, [sp, #0]
 8007830:	2300      	movs	r3, #0
 8007832:	2100      	movs	r1, #0
 8007834:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007836:	f7ff fe05 	bl	8007444 <xTimerGenericCommand>
 800783a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800783c:	6a3b      	ldr	r3, [r7, #32]
 800783e:	2b00      	cmp	r3, #0
 8007840:	d14f      	bne.n	80078e2 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8007842:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007846:	f383 8811 	msr	BASEPRI, r3
 800784a:	f3bf 8f6f 	isb	sy
 800784e:	f3bf 8f4f 	dsb	sy
 8007852:	61bb      	str	r3, [r7, #24]
}
 8007854:	bf00      	nop
 8007856:	e7fe      	b.n	8007856 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007858:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800785a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800785e:	f023 0301 	bic.w	r3, r3, #1
 8007862:	b2da      	uxtb	r2, r3
 8007864:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007866:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800786a:	e03a      	b.n	80078e2 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800786c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800786e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007872:	f043 0301 	orr.w	r3, r3, #1
 8007876:	b2da      	uxtb	r2, r3
 8007878:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800787a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800787e:	68ba      	ldr	r2, [r7, #8]
 8007880:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007882:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007884:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007886:	699b      	ldr	r3, [r3, #24]
 8007888:	2b00      	cmp	r3, #0
 800788a:	d10a      	bne.n	80078a2 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800788c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007890:	f383 8811 	msr	BASEPRI, r3
 8007894:	f3bf 8f6f 	isb	sy
 8007898:	f3bf 8f4f 	dsb	sy
 800789c:	617b      	str	r3, [r7, #20]
}
 800789e:	bf00      	nop
 80078a0:	e7fe      	b.n	80078a0 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80078a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078a4:	699a      	ldr	r2, [r3, #24]
 80078a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078a8:	18d1      	adds	r1, r2, r3
 80078aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80078ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80078b0:	f7ff ff06 	bl	80076c0 <prvInsertTimerInActiveList>
					break;
 80078b4:	e015      	b.n	80078e2 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80078b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078b8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80078bc:	f003 0302 	and.w	r3, r3, #2
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d103      	bne.n	80078cc <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80078c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80078c6:	f000 fbdb 	bl	8008080 <vPortFree>
 80078ca:	e00a      	b.n	80078e2 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80078cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078ce:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80078d2:	f023 0301 	bic.w	r3, r3, #1
 80078d6:	b2da      	uxtb	r2, r3
 80078d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078da:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80078de:	e000      	b.n	80078e2 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80078e0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80078e2:	4b08      	ldr	r3, [pc, #32]	; (8007904 <prvProcessReceivedCommands+0x1c0>)
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	1d39      	adds	r1, r7, #4
 80078e8:	2200      	movs	r2, #0
 80078ea:	4618      	mov	r0, r3
 80078ec:	f7fe fc16 	bl	800611c <xQueueReceive>
 80078f0:	4603      	mov	r3, r0
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	f47f af2a 	bne.w	800774c <prvProcessReceivedCommands+0x8>
	}
}
 80078f8:	bf00      	nop
 80078fa:	bf00      	nop
 80078fc:	3730      	adds	r7, #48	; 0x30
 80078fe:	46bd      	mov	sp, r7
 8007900:	bd80      	pop	{r7, pc}
 8007902:	bf00      	nop
 8007904:	20000c80 	.word	0x20000c80

08007908 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007908:	b580      	push	{r7, lr}
 800790a:	b088      	sub	sp, #32
 800790c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800790e:	e048      	b.n	80079a2 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007910:	4b2d      	ldr	r3, [pc, #180]	; (80079c8 <prvSwitchTimerLists+0xc0>)
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	68db      	ldr	r3, [r3, #12]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800791a:	4b2b      	ldr	r3, [pc, #172]	; (80079c8 <prvSwitchTimerLists+0xc0>)
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	68db      	ldr	r3, [r3, #12]
 8007920:	68db      	ldr	r3, [r3, #12]
 8007922:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	3304      	adds	r3, #4
 8007928:	4618      	mov	r0, r3
 800792a:	f7fe f92f 	bl	8005b8c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	6a1b      	ldr	r3, [r3, #32]
 8007932:	68f8      	ldr	r0, [r7, #12]
 8007934:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800793c:	f003 0304 	and.w	r3, r3, #4
 8007940:	2b00      	cmp	r3, #0
 8007942:	d02e      	beq.n	80079a2 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	699b      	ldr	r3, [r3, #24]
 8007948:	693a      	ldr	r2, [r7, #16]
 800794a:	4413      	add	r3, r2
 800794c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800794e:	68ba      	ldr	r2, [r7, #8]
 8007950:	693b      	ldr	r3, [r7, #16]
 8007952:	429a      	cmp	r2, r3
 8007954:	d90e      	bls.n	8007974 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	68ba      	ldr	r2, [r7, #8]
 800795a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	68fa      	ldr	r2, [r7, #12]
 8007960:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007962:	4b19      	ldr	r3, [pc, #100]	; (80079c8 <prvSwitchTimerLists+0xc0>)
 8007964:	681a      	ldr	r2, [r3, #0]
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	3304      	adds	r3, #4
 800796a:	4619      	mov	r1, r3
 800796c:	4610      	mov	r0, r2
 800796e:	f7fe f8d4 	bl	8005b1a <vListInsert>
 8007972:	e016      	b.n	80079a2 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007974:	2300      	movs	r3, #0
 8007976:	9300      	str	r3, [sp, #0]
 8007978:	2300      	movs	r3, #0
 800797a:	693a      	ldr	r2, [r7, #16]
 800797c:	2100      	movs	r1, #0
 800797e:	68f8      	ldr	r0, [r7, #12]
 8007980:	f7ff fd60 	bl	8007444 <xTimerGenericCommand>
 8007984:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	2b00      	cmp	r3, #0
 800798a:	d10a      	bne.n	80079a2 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800798c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007990:	f383 8811 	msr	BASEPRI, r3
 8007994:	f3bf 8f6f 	isb	sy
 8007998:	f3bf 8f4f 	dsb	sy
 800799c:	603b      	str	r3, [r7, #0]
}
 800799e:	bf00      	nop
 80079a0:	e7fe      	b.n	80079a0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80079a2:	4b09      	ldr	r3, [pc, #36]	; (80079c8 <prvSwitchTimerLists+0xc0>)
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d1b1      	bne.n	8007910 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80079ac:	4b06      	ldr	r3, [pc, #24]	; (80079c8 <prvSwitchTimerLists+0xc0>)
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80079b2:	4b06      	ldr	r3, [pc, #24]	; (80079cc <prvSwitchTimerLists+0xc4>)
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	4a04      	ldr	r2, [pc, #16]	; (80079c8 <prvSwitchTimerLists+0xc0>)
 80079b8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80079ba:	4a04      	ldr	r2, [pc, #16]	; (80079cc <prvSwitchTimerLists+0xc4>)
 80079bc:	697b      	ldr	r3, [r7, #20]
 80079be:	6013      	str	r3, [r2, #0]
}
 80079c0:	bf00      	nop
 80079c2:	3718      	adds	r7, #24
 80079c4:	46bd      	mov	sp, r7
 80079c6:	bd80      	pop	{r7, pc}
 80079c8:	20000c78 	.word	0x20000c78
 80079cc:	20000c7c 	.word	0x20000c7c

080079d0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80079d0:	b580      	push	{r7, lr}
 80079d2:	b082      	sub	sp, #8
 80079d4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80079d6:	f000 f965 	bl	8007ca4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80079da:	4b15      	ldr	r3, [pc, #84]	; (8007a30 <prvCheckForValidListAndQueue+0x60>)
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d120      	bne.n	8007a24 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80079e2:	4814      	ldr	r0, [pc, #80]	; (8007a34 <prvCheckForValidListAndQueue+0x64>)
 80079e4:	f7fe f848 	bl	8005a78 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80079e8:	4813      	ldr	r0, [pc, #76]	; (8007a38 <prvCheckForValidListAndQueue+0x68>)
 80079ea:	f7fe f845 	bl	8005a78 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80079ee:	4b13      	ldr	r3, [pc, #76]	; (8007a3c <prvCheckForValidListAndQueue+0x6c>)
 80079f0:	4a10      	ldr	r2, [pc, #64]	; (8007a34 <prvCheckForValidListAndQueue+0x64>)
 80079f2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80079f4:	4b12      	ldr	r3, [pc, #72]	; (8007a40 <prvCheckForValidListAndQueue+0x70>)
 80079f6:	4a10      	ldr	r2, [pc, #64]	; (8007a38 <prvCheckForValidListAndQueue+0x68>)
 80079f8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80079fa:	2300      	movs	r3, #0
 80079fc:	9300      	str	r3, [sp, #0]
 80079fe:	4b11      	ldr	r3, [pc, #68]	; (8007a44 <prvCheckForValidListAndQueue+0x74>)
 8007a00:	4a11      	ldr	r2, [pc, #68]	; (8007a48 <prvCheckForValidListAndQueue+0x78>)
 8007a02:	2110      	movs	r1, #16
 8007a04:	200a      	movs	r0, #10
 8007a06:	f7fe f953 	bl	8005cb0 <xQueueGenericCreateStatic>
 8007a0a:	4603      	mov	r3, r0
 8007a0c:	4a08      	ldr	r2, [pc, #32]	; (8007a30 <prvCheckForValidListAndQueue+0x60>)
 8007a0e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007a10:	4b07      	ldr	r3, [pc, #28]	; (8007a30 <prvCheckForValidListAndQueue+0x60>)
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d005      	beq.n	8007a24 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007a18:	4b05      	ldr	r3, [pc, #20]	; (8007a30 <prvCheckForValidListAndQueue+0x60>)
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	490b      	ldr	r1, [pc, #44]	; (8007a4c <prvCheckForValidListAndQueue+0x7c>)
 8007a1e:	4618      	mov	r0, r3
 8007a20:	f7fe fd6c 	bl	80064fc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007a24:	f000 f96e 	bl	8007d04 <vPortExitCritical>
}
 8007a28:	bf00      	nop
 8007a2a:	46bd      	mov	sp, r7
 8007a2c:	bd80      	pop	{r7, pc}
 8007a2e:	bf00      	nop
 8007a30:	20000c80 	.word	0x20000c80
 8007a34:	20000c50 	.word	0x20000c50
 8007a38:	20000c64 	.word	0x20000c64
 8007a3c:	20000c78 	.word	0x20000c78
 8007a40:	20000c7c 	.word	0x20000c7c
 8007a44:	20000d2c 	.word	0x20000d2c
 8007a48:	20000c8c 	.word	0x20000c8c
 8007a4c:	08009760 	.word	0x08009760

08007a50 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007a50:	b480      	push	{r7}
 8007a52:	b085      	sub	sp, #20
 8007a54:	af00      	add	r7, sp, #0
 8007a56:	60f8      	str	r0, [r7, #12]
 8007a58:	60b9      	str	r1, [r7, #8]
 8007a5a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	3b04      	subs	r3, #4
 8007a60:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007a68:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	3b04      	subs	r3, #4
 8007a6e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007a70:	68bb      	ldr	r3, [r7, #8]
 8007a72:	f023 0201 	bic.w	r2, r3, #1
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	3b04      	subs	r3, #4
 8007a7e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007a80:	4a0c      	ldr	r2, [pc, #48]	; (8007ab4 <pxPortInitialiseStack+0x64>)
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	3b14      	subs	r3, #20
 8007a8a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007a8c:	687a      	ldr	r2, [r7, #4]
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	3b04      	subs	r3, #4
 8007a96:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	f06f 0202 	mvn.w	r2, #2
 8007a9e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	3b20      	subs	r3, #32
 8007aa4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007aa6:	68fb      	ldr	r3, [r7, #12]
}
 8007aa8:	4618      	mov	r0, r3
 8007aaa:	3714      	adds	r7, #20
 8007aac:	46bd      	mov	sp, r7
 8007aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab2:	4770      	bx	lr
 8007ab4:	08007ab9 	.word	0x08007ab9

08007ab8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007ab8:	b480      	push	{r7}
 8007aba:	b085      	sub	sp, #20
 8007abc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007abe:	2300      	movs	r3, #0
 8007ac0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007ac2:	4b12      	ldr	r3, [pc, #72]	; (8007b0c <prvTaskExitError+0x54>)
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007aca:	d00a      	beq.n	8007ae2 <prvTaskExitError+0x2a>
	__asm volatile
 8007acc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ad0:	f383 8811 	msr	BASEPRI, r3
 8007ad4:	f3bf 8f6f 	isb	sy
 8007ad8:	f3bf 8f4f 	dsb	sy
 8007adc:	60fb      	str	r3, [r7, #12]
}
 8007ade:	bf00      	nop
 8007ae0:	e7fe      	b.n	8007ae0 <prvTaskExitError+0x28>
	__asm volatile
 8007ae2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ae6:	f383 8811 	msr	BASEPRI, r3
 8007aea:	f3bf 8f6f 	isb	sy
 8007aee:	f3bf 8f4f 	dsb	sy
 8007af2:	60bb      	str	r3, [r7, #8]
}
 8007af4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007af6:	bf00      	nop
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d0fc      	beq.n	8007af8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007afe:	bf00      	nop
 8007b00:	bf00      	nop
 8007b02:	3714      	adds	r7, #20
 8007b04:	46bd      	mov	sp, r7
 8007b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b0a:	4770      	bx	lr
 8007b0c:	2000000c 	.word	0x2000000c

08007b10 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007b10:	4b07      	ldr	r3, [pc, #28]	; (8007b30 <pxCurrentTCBConst2>)
 8007b12:	6819      	ldr	r1, [r3, #0]
 8007b14:	6808      	ldr	r0, [r1, #0]
 8007b16:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b1a:	f380 8809 	msr	PSP, r0
 8007b1e:	f3bf 8f6f 	isb	sy
 8007b22:	f04f 0000 	mov.w	r0, #0
 8007b26:	f380 8811 	msr	BASEPRI, r0
 8007b2a:	4770      	bx	lr
 8007b2c:	f3af 8000 	nop.w

08007b30 <pxCurrentTCBConst2>:
 8007b30:	20000750 	.word	0x20000750
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007b34:	bf00      	nop
 8007b36:	bf00      	nop

08007b38 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007b38:	4808      	ldr	r0, [pc, #32]	; (8007b5c <prvPortStartFirstTask+0x24>)
 8007b3a:	6800      	ldr	r0, [r0, #0]
 8007b3c:	6800      	ldr	r0, [r0, #0]
 8007b3e:	f380 8808 	msr	MSP, r0
 8007b42:	f04f 0000 	mov.w	r0, #0
 8007b46:	f380 8814 	msr	CONTROL, r0
 8007b4a:	b662      	cpsie	i
 8007b4c:	b661      	cpsie	f
 8007b4e:	f3bf 8f4f 	dsb	sy
 8007b52:	f3bf 8f6f 	isb	sy
 8007b56:	df00      	svc	0
 8007b58:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007b5a:	bf00      	nop
 8007b5c:	e000ed08 	.word	0xe000ed08

08007b60 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007b60:	b580      	push	{r7, lr}
 8007b62:	b086      	sub	sp, #24
 8007b64:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007b66:	4b46      	ldr	r3, [pc, #280]	; (8007c80 <xPortStartScheduler+0x120>)
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	4a46      	ldr	r2, [pc, #280]	; (8007c84 <xPortStartScheduler+0x124>)
 8007b6c:	4293      	cmp	r3, r2
 8007b6e:	d10a      	bne.n	8007b86 <xPortStartScheduler+0x26>
	__asm volatile
 8007b70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b74:	f383 8811 	msr	BASEPRI, r3
 8007b78:	f3bf 8f6f 	isb	sy
 8007b7c:	f3bf 8f4f 	dsb	sy
 8007b80:	613b      	str	r3, [r7, #16]
}
 8007b82:	bf00      	nop
 8007b84:	e7fe      	b.n	8007b84 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007b86:	4b3e      	ldr	r3, [pc, #248]	; (8007c80 <xPortStartScheduler+0x120>)
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	4a3f      	ldr	r2, [pc, #252]	; (8007c88 <xPortStartScheduler+0x128>)
 8007b8c:	4293      	cmp	r3, r2
 8007b8e:	d10a      	bne.n	8007ba6 <xPortStartScheduler+0x46>
	__asm volatile
 8007b90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b94:	f383 8811 	msr	BASEPRI, r3
 8007b98:	f3bf 8f6f 	isb	sy
 8007b9c:	f3bf 8f4f 	dsb	sy
 8007ba0:	60fb      	str	r3, [r7, #12]
}
 8007ba2:	bf00      	nop
 8007ba4:	e7fe      	b.n	8007ba4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007ba6:	4b39      	ldr	r3, [pc, #228]	; (8007c8c <xPortStartScheduler+0x12c>)
 8007ba8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007baa:	697b      	ldr	r3, [r7, #20]
 8007bac:	781b      	ldrb	r3, [r3, #0]
 8007bae:	b2db      	uxtb	r3, r3
 8007bb0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007bb2:	697b      	ldr	r3, [r7, #20]
 8007bb4:	22ff      	movs	r2, #255	; 0xff
 8007bb6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007bb8:	697b      	ldr	r3, [r7, #20]
 8007bba:	781b      	ldrb	r3, [r3, #0]
 8007bbc:	b2db      	uxtb	r3, r3
 8007bbe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007bc0:	78fb      	ldrb	r3, [r7, #3]
 8007bc2:	b2db      	uxtb	r3, r3
 8007bc4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007bc8:	b2da      	uxtb	r2, r3
 8007bca:	4b31      	ldr	r3, [pc, #196]	; (8007c90 <xPortStartScheduler+0x130>)
 8007bcc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007bce:	4b31      	ldr	r3, [pc, #196]	; (8007c94 <xPortStartScheduler+0x134>)
 8007bd0:	2207      	movs	r2, #7
 8007bd2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007bd4:	e009      	b.n	8007bea <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007bd6:	4b2f      	ldr	r3, [pc, #188]	; (8007c94 <xPortStartScheduler+0x134>)
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	3b01      	subs	r3, #1
 8007bdc:	4a2d      	ldr	r2, [pc, #180]	; (8007c94 <xPortStartScheduler+0x134>)
 8007bde:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007be0:	78fb      	ldrb	r3, [r7, #3]
 8007be2:	b2db      	uxtb	r3, r3
 8007be4:	005b      	lsls	r3, r3, #1
 8007be6:	b2db      	uxtb	r3, r3
 8007be8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007bea:	78fb      	ldrb	r3, [r7, #3]
 8007bec:	b2db      	uxtb	r3, r3
 8007bee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007bf2:	2b80      	cmp	r3, #128	; 0x80
 8007bf4:	d0ef      	beq.n	8007bd6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007bf6:	4b27      	ldr	r3, [pc, #156]	; (8007c94 <xPortStartScheduler+0x134>)
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	f1c3 0307 	rsb	r3, r3, #7
 8007bfe:	2b04      	cmp	r3, #4
 8007c00:	d00a      	beq.n	8007c18 <xPortStartScheduler+0xb8>
	__asm volatile
 8007c02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c06:	f383 8811 	msr	BASEPRI, r3
 8007c0a:	f3bf 8f6f 	isb	sy
 8007c0e:	f3bf 8f4f 	dsb	sy
 8007c12:	60bb      	str	r3, [r7, #8]
}
 8007c14:	bf00      	nop
 8007c16:	e7fe      	b.n	8007c16 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007c18:	4b1e      	ldr	r3, [pc, #120]	; (8007c94 <xPortStartScheduler+0x134>)
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	021b      	lsls	r3, r3, #8
 8007c1e:	4a1d      	ldr	r2, [pc, #116]	; (8007c94 <xPortStartScheduler+0x134>)
 8007c20:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007c22:	4b1c      	ldr	r3, [pc, #112]	; (8007c94 <xPortStartScheduler+0x134>)
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007c2a:	4a1a      	ldr	r2, [pc, #104]	; (8007c94 <xPortStartScheduler+0x134>)
 8007c2c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	b2da      	uxtb	r2, r3
 8007c32:	697b      	ldr	r3, [r7, #20]
 8007c34:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007c36:	4b18      	ldr	r3, [pc, #96]	; (8007c98 <xPortStartScheduler+0x138>)
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	4a17      	ldr	r2, [pc, #92]	; (8007c98 <xPortStartScheduler+0x138>)
 8007c3c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007c40:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007c42:	4b15      	ldr	r3, [pc, #84]	; (8007c98 <xPortStartScheduler+0x138>)
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	4a14      	ldr	r2, [pc, #80]	; (8007c98 <xPortStartScheduler+0x138>)
 8007c48:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007c4c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007c4e:	f000 f8dd 	bl	8007e0c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007c52:	4b12      	ldr	r3, [pc, #72]	; (8007c9c <xPortStartScheduler+0x13c>)
 8007c54:	2200      	movs	r2, #0
 8007c56:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007c58:	f000 f8fc 	bl	8007e54 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007c5c:	4b10      	ldr	r3, [pc, #64]	; (8007ca0 <xPortStartScheduler+0x140>)
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	4a0f      	ldr	r2, [pc, #60]	; (8007ca0 <xPortStartScheduler+0x140>)
 8007c62:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007c66:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007c68:	f7ff ff66 	bl	8007b38 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007c6c:	f7ff f856 	bl	8006d1c <vTaskSwitchContext>
	prvTaskExitError();
 8007c70:	f7ff ff22 	bl	8007ab8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007c74:	2300      	movs	r3, #0
}
 8007c76:	4618      	mov	r0, r3
 8007c78:	3718      	adds	r7, #24
 8007c7a:	46bd      	mov	sp, r7
 8007c7c:	bd80      	pop	{r7, pc}
 8007c7e:	bf00      	nop
 8007c80:	e000ed00 	.word	0xe000ed00
 8007c84:	410fc271 	.word	0x410fc271
 8007c88:	410fc270 	.word	0x410fc270
 8007c8c:	e000e400 	.word	0xe000e400
 8007c90:	20000d7c 	.word	0x20000d7c
 8007c94:	20000d80 	.word	0x20000d80
 8007c98:	e000ed20 	.word	0xe000ed20
 8007c9c:	2000000c 	.word	0x2000000c
 8007ca0:	e000ef34 	.word	0xe000ef34

08007ca4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007ca4:	b480      	push	{r7}
 8007ca6:	b083      	sub	sp, #12
 8007ca8:	af00      	add	r7, sp, #0
	__asm volatile
 8007caa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cae:	f383 8811 	msr	BASEPRI, r3
 8007cb2:	f3bf 8f6f 	isb	sy
 8007cb6:	f3bf 8f4f 	dsb	sy
 8007cba:	607b      	str	r3, [r7, #4]
}
 8007cbc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007cbe:	4b0f      	ldr	r3, [pc, #60]	; (8007cfc <vPortEnterCritical+0x58>)
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	3301      	adds	r3, #1
 8007cc4:	4a0d      	ldr	r2, [pc, #52]	; (8007cfc <vPortEnterCritical+0x58>)
 8007cc6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007cc8:	4b0c      	ldr	r3, [pc, #48]	; (8007cfc <vPortEnterCritical+0x58>)
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	2b01      	cmp	r3, #1
 8007cce:	d10f      	bne.n	8007cf0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007cd0:	4b0b      	ldr	r3, [pc, #44]	; (8007d00 <vPortEnterCritical+0x5c>)
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	b2db      	uxtb	r3, r3
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d00a      	beq.n	8007cf0 <vPortEnterCritical+0x4c>
	__asm volatile
 8007cda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cde:	f383 8811 	msr	BASEPRI, r3
 8007ce2:	f3bf 8f6f 	isb	sy
 8007ce6:	f3bf 8f4f 	dsb	sy
 8007cea:	603b      	str	r3, [r7, #0]
}
 8007cec:	bf00      	nop
 8007cee:	e7fe      	b.n	8007cee <vPortEnterCritical+0x4a>
	}
}
 8007cf0:	bf00      	nop
 8007cf2:	370c      	adds	r7, #12
 8007cf4:	46bd      	mov	sp, r7
 8007cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cfa:	4770      	bx	lr
 8007cfc:	2000000c 	.word	0x2000000c
 8007d00:	e000ed04 	.word	0xe000ed04

08007d04 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007d04:	b480      	push	{r7}
 8007d06:	b083      	sub	sp, #12
 8007d08:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007d0a:	4b12      	ldr	r3, [pc, #72]	; (8007d54 <vPortExitCritical+0x50>)
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d10a      	bne.n	8007d28 <vPortExitCritical+0x24>
	__asm volatile
 8007d12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d16:	f383 8811 	msr	BASEPRI, r3
 8007d1a:	f3bf 8f6f 	isb	sy
 8007d1e:	f3bf 8f4f 	dsb	sy
 8007d22:	607b      	str	r3, [r7, #4]
}
 8007d24:	bf00      	nop
 8007d26:	e7fe      	b.n	8007d26 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007d28:	4b0a      	ldr	r3, [pc, #40]	; (8007d54 <vPortExitCritical+0x50>)
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	3b01      	subs	r3, #1
 8007d2e:	4a09      	ldr	r2, [pc, #36]	; (8007d54 <vPortExitCritical+0x50>)
 8007d30:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007d32:	4b08      	ldr	r3, [pc, #32]	; (8007d54 <vPortExitCritical+0x50>)
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d105      	bne.n	8007d46 <vPortExitCritical+0x42>
 8007d3a:	2300      	movs	r3, #0
 8007d3c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007d3e:	683b      	ldr	r3, [r7, #0]
 8007d40:	f383 8811 	msr	BASEPRI, r3
}
 8007d44:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007d46:	bf00      	nop
 8007d48:	370c      	adds	r7, #12
 8007d4a:	46bd      	mov	sp, r7
 8007d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d50:	4770      	bx	lr
 8007d52:	bf00      	nop
 8007d54:	2000000c 	.word	0x2000000c
	...

08007d60 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007d60:	f3ef 8009 	mrs	r0, PSP
 8007d64:	f3bf 8f6f 	isb	sy
 8007d68:	4b15      	ldr	r3, [pc, #84]	; (8007dc0 <pxCurrentTCBConst>)
 8007d6a:	681a      	ldr	r2, [r3, #0]
 8007d6c:	f01e 0f10 	tst.w	lr, #16
 8007d70:	bf08      	it	eq
 8007d72:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007d76:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d7a:	6010      	str	r0, [r2, #0]
 8007d7c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007d80:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007d84:	f380 8811 	msr	BASEPRI, r0
 8007d88:	f3bf 8f4f 	dsb	sy
 8007d8c:	f3bf 8f6f 	isb	sy
 8007d90:	f7fe ffc4 	bl	8006d1c <vTaskSwitchContext>
 8007d94:	f04f 0000 	mov.w	r0, #0
 8007d98:	f380 8811 	msr	BASEPRI, r0
 8007d9c:	bc09      	pop	{r0, r3}
 8007d9e:	6819      	ldr	r1, [r3, #0]
 8007da0:	6808      	ldr	r0, [r1, #0]
 8007da2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007da6:	f01e 0f10 	tst.w	lr, #16
 8007daa:	bf08      	it	eq
 8007dac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007db0:	f380 8809 	msr	PSP, r0
 8007db4:	f3bf 8f6f 	isb	sy
 8007db8:	4770      	bx	lr
 8007dba:	bf00      	nop
 8007dbc:	f3af 8000 	nop.w

08007dc0 <pxCurrentTCBConst>:
 8007dc0:	20000750 	.word	0x20000750
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007dc4:	bf00      	nop
 8007dc6:	bf00      	nop

08007dc8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007dc8:	b580      	push	{r7, lr}
 8007dca:	b082      	sub	sp, #8
 8007dcc:	af00      	add	r7, sp, #0
	__asm volatile
 8007dce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dd2:	f383 8811 	msr	BASEPRI, r3
 8007dd6:	f3bf 8f6f 	isb	sy
 8007dda:	f3bf 8f4f 	dsb	sy
 8007dde:	607b      	str	r3, [r7, #4]
}
 8007de0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007de2:	f7fe fee1 	bl	8006ba8 <xTaskIncrementTick>
 8007de6:	4603      	mov	r3, r0
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d003      	beq.n	8007df4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007dec:	4b06      	ldr	r3, [pc, #24]	; (8007e08 <xPortSysTickHandler+0x40>)
 8007dee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007df2:	601a      	str	r2, [r3, #0]
 8007df4:	2300      	movs	r3, #0
 8007df6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007df8:	683b      	ldr	r3, [r7, #0]
 8007dfa:	f383 8811 	msr	BASEPRI, r3
}
 8007dfe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007e00:	bf00      	nop
 8007e02:	3708      	adds	r7, #8
 8007e04:	46bd      	mov	sp, r7
 8007e06:	bd80      	pop	{r7, pc}
 8007e08:	e000ed04 	.word	0xe000ed04

08007e0c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007e0c:	b480      	push	{r7}
 8007e0e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007e10:	4b0b      	ldr	r3, [pc, #44]	; (8007e40 <vPortSetupTimerInterrupt+0x34>)
 8007e12:	2200      	movs	r2, #0
 8007e14:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007e16:	4b0b      	ldr	r3, [pc, #44]	; (8007e44 <vPortSetupTimerInterrupt+0x38>)
 8007e18:	2200      	movs	r2, #0
 8007e1a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007e1c:	4b0a      	ldr	r3, [pc, #40]	; (8007e48 <vPortSetupTimerInterrupt+0x3c>)
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	4a0a      	ldr	r2, [pc, #40]	; (8007e4c <vPortSetupTimerInterrupt+0x40>)
 8007e22:	fba2 2303 	umull	r2, r3, r2, r3
 8007e26:	099b      	lsrs	r3, r3, #6
 8007e28:	4a09      	ldr	r2, [pc, #36]	; (8007e50 <vPortSetupTimerInterrupt+0x44>)
 8007e2a:	3b01      	subs	r3, #1
 8007e2c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007e2e:	4b04      	ldr	r3, [pc, #16]	; (8007e40 <vPortSetupTimerInterrupt+0x34>)
 8007e30:	2207      	movs	r2, #7
 8007e32:	601a      	str	r2, [r3, #0]
}
 8007e34:	bf00      	nop
 8007e36:	46bd      	mov	sp, r7
 8007e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e3c:	4770      	bx	lr
 8007e3e:	bf00      	nop
 8007e40:	e000e010 	.word	0xe000e010
 8007e44:	e000e018 	.word	0xe000e018
 8007e48:	20000000 	.word	0x20000000
 8007e4c:	10624dd3 	.word	0x10624dd3
 8007e50:	e000e014 	.word	0xe000e014

08007e54 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007e54:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007e64 <vPortEnableVFP+0x10>
 8007e58:	6801      	ldr	r1, [r0, #0]
 8007e5a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007e5e:	6001      	str	r1, [r0, #0]
 8007e60:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007e62:	bf00      	nop
 8007e64:	e000ed88 	.word	0xe000ed88

08007e68 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007e68:	b480      	push	{r7}
 8007e6a:	b085      	sub	sp, #20
 8007e6c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007e6e:	f3ef 8305 	mrs	r3, IPSR
 8007e72:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	2b0f      	cmp	r3, #15
 8007e78:	d914      	bls.n	8007ea4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007e7a:	4a17      	ldr	r2, [pc, #92]	; (8007ed8 <vPortValidateInterruptPriority+0x70>)
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	4413      	add	r3, r2
 8007e80:	781b      	ldrb	r3, [r3, #0]
 8007e82:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007e84:	4b15      	ldr	r3, [pc, #84]	; (8007edc <vPortValidateInterruptPriority+0x74>)
 8007e86:	781b      	ldrb	r3, [r3, #0]
 8007e88:	7afa      	ldrb	r2, [r7, #11]
 8007e8a:	429a      	cmp	r2, r3
 8007e8c:	d20a      	bcs.n	8007ea4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8007e8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e92:	f383 8811 	msr	BASEPRI, r3
 8007e96:	f3bf 8f6f 	isb	sy
 8007e9a:	f3bf 8f4f 	dsb	sy
 8007e9e:	607b      	str	r3, [r7, #4]
}
 8007ea0:	bf00      	nop
 8007ea2:	e7fe      	b.n	8007ea2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007ea4:	4b0e      	ldr	r3, [pc, #56]	; (8007ee0 <vPortValidateInterruptPriority+0x78>)
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007eac:	4b0d      	ldr	r3, [pc, #52]	; (8007ee4 <vPortValidateInterruptPriority+0x7c>)
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	429a      	cmp	r2, r3
 8007eb2:	d90a      	bls.n	8007eca <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007eb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007eb8:	f383 8811 	msr	BASEPRI, r3
 8007ebc:	f3bf 8f6f 	isb	sy
 8007ec0:	f3bf 8f4f 	dsb	sy
 8007ec4:	603b      	str	r3, [r7, #0]
}
 8007ec6:	bf00      	nop
 8007ec8:	e7fe      	b.n	8007ec8 <vPortValidateInterruptPriority+0x60>
	}
 8007eca:	bf00      	nop
 8007ecc:	3714      	adds	r7, #20
 8007ece:	46bd      	mov	sp, r7
 8007ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed4:	4770      	bx	lr
 8007ed6:	bf00      	nop
 8007ed8:	e000e3f0 	.word	0xe000e3f0
 8007edc:	20000d7c 	.word	0x20000d7c
 8007ee0:	e000ed0c 	.word	0xe000ed0c
 8007ee4:	20000d80 	.word	0x20000d80

08007ee8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007ee8:	b580      	push	{r7, lr}
 8007eea:	b08a      	sub	sp, #40	; 0x28
 8007eec:	af00      	add	r7, sp, #0
 8007eee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007ef0:	2300      	movs	r3, #0
 8007ef2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007ef4:	f7fe fd9c 	bl	8006a30 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007ef8:	4b5b      	ldr	r3, [pc, #364]	; (8008068 <pvPortMalloc+0x180>)
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d101      	bne.n	8007f04 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007f00:	f000 f920 	bl	8008144 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007f04:	4b59      	ldr	r3, [pc, #356]	; (800806c <pvPortMalloc+0x184>)
 8007f06:	681a      	ldr	r2, [r3, #0]
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	4013      	ands	r3, r2
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	f040 8093 	bne.w	8008038 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d01d      	beq.n	8007f54 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007f18:	2208      	movs	r2, #8
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	4413      	add	r3, r2
 8007f1e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	f003 0307 	and.w	r3, r3, #7
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d014      	beq.n	8007f54 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	f023 0307 	bic.w	r3, r3, #7
 8007f30:	3308      	adds	r3, #8
 8007f32:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	f003 0307 	and.w	r3, r3, #7
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d00a      	beq.n	8007f54 <pvPortMalloc+0x6c>
	__asm volatile
 8007f3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f42:	f383 8811 	msr	BASEPRI, r3
 8007f46:	f3bf 8f6f 	isb	sy
 8007f4a:	f3bf 8f4f 	dsb	sy
 8007f4e:	617b      	str	r3, [r7, #20]
}
 8007f50:	bf00      	nop
 8007f52:	e7fe      	b.n	8007f52 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d06e      	beq.n	8008038 <pvPortMalloc+0x150>
 8007f5a:	4b45      	ldr	r3, [pc, #276]	; (8008070 <pvPortMalloc+0x188>)
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	687a      	ldr	r2, [r7, #4]
 8007f60:	429a      	cmp	r2, r3
 8007f62:	d869      	bhi.n	8008038 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007f64:	4b43      	ldr	r3, [pc, #268]	; (8008074 <pvPortMalloc+0x18c>)
 8007f66:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007f68:	4b42      	ldr	r3, [pc, #264]	; (8008074 <pvPortMalloc+0x18c>)
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007f6e:	e004      	b.n	8007f7a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f72:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f7c:	685b      	ldr	r3, [r3, #4]
 8007f7e:	687a      	ldr	r2, [r7, #4]
 8007f80:	429a      	cmp	r2, r3
 8007f82:	d903      	bls.n	8007f8c <pvPortMalloc+0xa4>
 8007f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d1f1      	bne.n	8007f70 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007f8c:	4b36      	ldr	r3, [pc, #216]	; (8008068 <pvPortMalloc+0x180>)
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007f92:	429a      	cmp	r2, r3
 8007f94:	d050      	beq.n	8008038 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007f96:	6a3b      	ldr	r3, [r7, #32]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	2208      	movs	r2, #8
 8007f9c:	4413      	add	r3, r2
 8007f9e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fa2:	681a      	ldr	r2, [r3, #0]
 8007fa4:	6a3b      	ldr	r3, [r7, #32]
 8007fa6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007faa:	685a      	ldr	r2, [r3, #4]
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	1ad2      	subs	r2, r2, r3
 8007fb0:	2308      	movs	r3, #8
 8007fb2:	005b      	lsls	r3, r3, #1
 8007fb4:	429a      	cmp	r2, r3
 8007fb6:	d91f      	bls.n	8007ff8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007fb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	4413      	add	r3, r2
 8007fbe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007fc0:	69bb      	ldr	r3, [r7, #24]
 8007fc2:	f003 0307 	and.w	r3, r3, #7
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d00a      	beq.n	8007fe0 <pvPortMalloc+0xf8>
	__asm volatile
 8007fca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fce:	f383 8811 	msr	BASEPRI, r3
 8007fd2:	f3bf 8f6f 	isb	sy
 8007fd6:	f3bf 8f4f 	dsb	sy
 8007fda:	613b      	str	r3, [r7, #16]
}
 8007fdc:	bf00      	nop
 8007fde:	e7fe      	b.n	8007fde <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fe2:	685a      	ldr	r2, [r3, #4]
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	1ad2      	subs	r2, r2, r3
 8007fe8:	69bb      	ldr	r3, [r7, #24]
 8007fea:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fee:	687a      	ldr	r2, [r7, #4]
 8007ff0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007ff2:	69b8      	ldr	r0, [r7, #24]
 8007ff4:	f000 f908 	bl	8008208 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007ff8:	4b1d      	ldr	r3, [pc, #116]	; (8008070 <pvPortMalloc+0x188>)
 8007ffa:	681a      	ldr	r2, [r3, #0]
 8007ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ffe:	685b      	ldr	r3, [r3, #4]
 8008000:	1ad3      	subs	r3, r2, r3
 8008002:	4a1b      	ldr	r2, [pc, #108]	; (8008070 <pvPortMalloc+0x188>)
 8008004:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008006:	4b1a      	ldr	r3, [pc, #104]	; (8008070 <pvPortMalloc+0x188>)
 8008008:	681a      	ldr	r2, [r3, #0]
 800800a:	4b1b      	ldr	r3, [pc, #108]	; (8008078 <pvPortMalloc+0x190>)
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	429a      	cmp	r2, r3
 8008010:	d203      	bcs.n	800801a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008012:	4b17      	ldr	r3, [pc, #92]	; (8008070 <pvPortMalloc+0x188>)
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	4a18      	ldr	r2, [pc, #96]	; (8008078 <pvPortMalloc+0x190>)
 8008018:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800801a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800801c:	685a      	ldr	r2, [r3, #4]
 800801e:	4b13      	ldr	r3, [pc, #76]	; (800806c <pvPortMalloc+0x184>)
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	431a      	orrs	r2, r3
 8008024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008026:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800802a:	2200      	movs	r2, #0
 800802c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800802e:	4b13      	ldr	r3, [pc, #76]	; (800807c <pvPortMalloc+0x194>)
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	3301      	adds	r3, #1
 8008034:	4a11      	ldr	r2, [pc, #68]	; (800807c <pvPortMalloc+0x194>)
 8008036:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008038:	f7fe fd08 	bl	8006a4c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800803c:	69fb      	ldr	r3, [r7, #28]
 800803e:	f003 0307 	and.w	r3, r3, #7
 8008042:	2b00      	cmp	r3, #0
 8008044:	d00a      	beq.n	800805c <pvPortMalloc+0x174>
	__asm volatile
 8008046:	f04f 0350 	mov.w	r3, #80	; 0x50
 800804a:	f383 8811 	msr	BASEPRI, r3
 800804e:	f3bf 8f6f 	isb	sy
 8008052:	f3bf 8f4f 	dsb	sy
 8008056:	60fb      	str	r3, [r7, #12]
}
 8008058:	bf00      	nop
 800805a:	e7fe      	b.n	800805a <pvPortMalloc+0x172>
	return pvReturn;
 800805c:	69fb      	ldr	r3, [r7, #28]
}
 800805e:	4618      	mov	r0, r3
 8008060:	3728      	adds	r7, #40	; 0x28
 8008062:	46bd      	mov	sp, r7
 8008064:	bd80      	pop	{r7, pc}
 8008066:	bf00      	nop
 8008068:	2000498c 	.word	0x2000498c
 800806c:	200049a0 	.word	0x200049a0
 8008070:	20004990 	.word	0x20004990
 8008074:	20004984 	.word	0x20004984
 8008078:	20004994 	.word	0x20004994
 800807c:	20004998 	.word	0x20004998

08008080 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008080:	b580      	push	{r7, lr}
 8008082:	b086      	sub	sp, #24
 8008084:	af00      	add	r7, sp, #0
 8008086:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	2b00      	cmp	r3, #0
 8008090:	d04d      	beq.n	800812e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008092:	2308      	movs	r3, #8
 8008094:	425b      	negs	r3, r3
 8008096:	697a      	ldr	r2, [r7, #20]
 8008098:	4413      	add	r3, r2
 800809a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800809c:	697b      	ldr	r3, [r7, #20]
 800809e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80080a0:	693b      	ldr	r3, [r7, #16]
 80080a2:	685a      	ldr	r2, [r3, #4]
 80080a4:	4b24      	ldr	r3, [pc, #144]	; (8008138 <vPortFree+0xb8>)
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	4013      	ands	r3, r2
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d10a      	bne.n	80080c4 <vPortFree+0x44>
	__asm volatile
 80080ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080b2:	f383 8811 	msr	BASEPRI, r3
 80080b6:	f3bf 8f6f 	isb	sy
 80080ba:	f3bf 8f4f 	dsb	sy
 80080be:	60fb      	str	r3, [r7, #12]
}
 80080c0:	bf00      	nop
 80080c2:	e7fe      	b.n	80080c2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80080c4:	693b      	ldr	r3, [r7, #16]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d00a      	beq.n	80080e2 <vPortFree+0x62>
	__asm volatile
 80080cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080d0:	f383 8811 	msr	BASEPRI, r3
 80080d4:	f3bf 8f6f 	isb	sy
 80080d8:	f3bf 8f4f 	dsb	sy
 80080dc:	60bb      	str	r3, [r7, #8]
}
 80080de:	bf00      	nop
 80080e0:	e7fe      	b.n	80080e0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80080e2:	693b      	ldr	r3, [r7, #16]
 80080e4:	685a      	ldr	r2, [r3, #4]
 80080e6:	4b14      	ldr	r3, [pc, #80]	; (8008138 <vPortFree+0xb8>)
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	4013      	ands	r3, r2
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d01e      	beq.n	800812e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80080f0:	693b      	ldr	r3, [r7, #16]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d11a      	bne.n	800812e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80080f8:	693b      	ldr	r3, [r7, #16]
 80080fa:	685a      	ldr	r2, [r3, #4]
 80080fc:	4b0e      	ldr	r3, [pc, #56]	; (8008138 <vPortFree+0xb8>)
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	43db      	mvns	r3, r3
 8008102:	401a      	ands	r2, r3
 8008104:	693b      	ldr	r3, [r7, #16]
 8008106:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008108:	f7fe fc92 	bl	8006a30 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800810c:	693b      	ldr	r3, [r7, #16]
 800810e:	685a      	ldr	r2, [r3, #4]
 8008110:	4b0a      	ldr	r3, [pc, #40]	; (800813c <vPortFree+0xbc>)
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	4413      	add	r3, r2
 8008116:	4a09      	ldr	r2, [pc, #36]	; (800813c <vPortFree+0xbc>)
 8008118:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800811a:	6938      	ldr	r0, [r7, #16]
 800811c:	f000 f874 	bl	8008208 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008120:	4b07      	ldr	r3, [pc, #28]	; (8008140 <vPortFree+0xc0>)
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	3301      	adds	r3, #1
 8008126:	4a06      	ldr	r2, [pc, #24]	; (8008140 <vPortFree+0xc0>)
 8008128:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800812a:	f7fe fc8f 	bl	8006a4c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800812e:	bf00      	nop
 8008130:	3718      	adds	r7, #24
 8008132:	46bd      	mov	sp, r7
 8008134:	bd80      	pop	{r7, pc}
 8008136:	bf00      	nop
 8008138:	200049a0 	.word	0x200049a0
 800813c:	20004990 	.word	0x20004990
 8008140:	2000499c 	.word	0x2000499c

08008144 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008144:	b480      	push	{r7}
 8008146:	b085      	sub	sp, #20
 8008148:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800814a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800814e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008150:	4b27      	ldr	r3, [pc, #156]	; (80081f0 <prvHeapInit+0xac>)
 8008152:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	f003 0307 	and.w	r3, r3, #7
 800815a:	2b00      	cmp	r3, #0
 800815c:	d00c      	beq.n	8008178 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	3307      	adds	r3, #7
 8008162:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	f023 0307 	bic.w	r3, r3, #7
 800816a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800816c:	68ba      	ldr	r2, [r7, #8]
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	1ad3      	subs	r3, r2, r3
 8008172:	4a1f      	ldr	r2, [pc, #124]	; (80081f0 <prvHeapInit+0xac>)
 8008174:	4413      	add	r3, r2
 8008176:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800817c:	4a1d      	ldr	r2, [pc, #116]	; (80081f4 <prvHeapInit+0xb0>)
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008182:	4b1c      	ldr	r3, [pc, #112]	; (80081f4 <prvHeapInit+0xb0>)
 8008184:	2200      	movs	r2, #0
 8008186:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	68ba      	ldr	r2, [r7, #8]
 800818c:	4413      	add	r3, r2
 800818e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008190:	2208      	movs	r2, #8
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	1a9b      	subs	r3, r3, r2
 8008196:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	f023 0307 	bic.w	r3, r3, #7
 800819e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	4a15      	ldr	r2, [pc, #84]	; (80081f8 <prvHeapInit+0xb4>)
 80081a4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80081a6:	4b14      	ldr	r3, [pc, #80]	; (80081f8 <prvHeapInit+0xb4>)
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	2200      	movs	r2, #0
 80081ac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80081ae:	4b12      	ldr	r3, [pc, #72]	; (80081f8 <prvHeapInit+0xb4>)
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	2200      	movs	r2, #0
 80081b4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80081ba:	683b      	ldr	r3, [r7, #0]
 80081bc:	68fa      	ldr	r2, [r7, #12]
 80081be:	1ad2      	subs	r2, r2, r3
 80081c0:	683b      	ldr	r3, [r7, #0]
 80081c2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80081c4:	4b0c      	ldr	r3, [pc, #48]	; (80081f8 <prvHeapInit+0xb4>)
 80081c6:	681a      	ldr	r2, [r3, #0]
 80081c8:	683b      	ldr	r3, [r7, #0]
 80081ca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80081cc:	683b      	ldr	r3, [r7, #0]
 80081ce:	685b      	ldr	r3, [r3, #4]
 80081d0:	4a0a      	ldr	r2, [pc, #40]	; (80081fc <prvHeapInit+0xb8>)
 80081d2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80081d4:	683b      	ldr	r3, [r7, #0]
 80081d6:	685b      	ldr	r3, [r3, #4]
 80081d8:	4a09      	ldr	r2, [pc, #36]	; (8008200 <prvHeapInit+0xbc>)
 80081da:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80081dc:	4b09      	ldr	r3, [pc, #36]	; (8008204 <prvHeapInit+0xc0>)
 80081de:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80081e2:	601a      	str	r2, [r3, #0]
}
 80081e4:	bf00      	nop
 80081e6:	3714      	adds	r7, #20
 80081e8:	46bd      	mov	sp, r7
 80081ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ee:	4770      	bx	lr
 80081f0:	20000d84 	.word	0x20000d84
 80081f4:	20004984 	.word	0x20004984
 80081f8:	2000498c 	.word	0x2000498c
 80081fc:	20004994 	.word	0x20004994
 8008200:	20004990 	.word	0x20004990
 8008204:	200049a0 	.word	0x200049a0

08008208 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008208:	b480      	push	{r7}
 800820a:	b085      	sub	sp, #20
 800820c:	af00      	add	r7, sp, #0
 800820e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008210:	4b28      	ldr	r3, [pc, #160]	; (80082b4 <prvInsertBlockIntoFreeList+0xac>)
 8008212:	60fb      	str	r3, [r7, #12]
 8008214:	e002      	b.n	800821c <prvInsertBlockIntoFreeList+0x14>
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	60fb      	str	r3, [r7, #12]
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	687a      	ldr	r2, [r7, #4]
 8008222:	429a      	cmp	r2, r3
 8008224:	d8f7      	bhi.n	8008216 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	685b      	ldr	r3, [r3, #4]
 800822e:	68ba      	ldr	r2, [r7, #8]
 8008230:	4413      	add	r3, r2
 8008232:	687a      	ldr	r2, [r7, #4]
 8008234:	429a      	cmp	r2, r3
 8008236:	d108      	bne.n	800824a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	685a      	ldr	r2, [r3, #4]
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	685b      	ldr	r3, [r3, #4]
 8008240:	441a      	add	r2, r3
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	685b      	ldr	r3, [r3, #4]
 8008252:	68ba      	ldr	r2, [r7, #8]
 8008254:	441a      	add	r2, r3
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	429a      	cmp	r2, r3
 800825c:	d118      	bne.n	8008290 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	681a      	ldr	r2, [r3, #0]
 8008262:	4b15      	ldr	r3, [pc, #84]	; (80082b8 <prvInsertBlockIntoFreeList+0xb0>)
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	429a      	cmp	r2, r3
 8008268:	d00d      	beq.n	8008286 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	685a      	ldr	r2, [r3, #4]
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	685b      	ldr	r3, [r3, #4]
 8008274:	441a      	add	r2, r3
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	681a      	ldr	r2, [r3, #0]
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	601a      	str	r2, [r3, #0]
 8008284:	e008      	b.n	8008298 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008286:	4b0c      	ldr	r3, [pc, #48]	; (80082b8 <prvInsertBlockIntoFreeList+0xb0>)
 8008288:	681a      	ldr	r2, [r3, #0]
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	601a      	str	r2, [r3, #0]
 800828e:	e003      	b.n	8008298 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	681a      	ldr	r2, [r3, #0]
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008298:	68fa      	ldr	r2, [r7, #12]
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	429a      	cmp	r2, r3
 800829e:	d002      	beq.n	80082a6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	687a      	ldr	r2, [r7, #4]
 80082a4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80082a6:	bf00      	nop
 80082a8:	3714      	adds	r7, #20
 80082aa:	46bd      	mov	sp, r7
 80082ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b0:	4770      	bx	lr
 80082b2:	bf00      	nop
 80082b4:	20004984 	.word	0x20004984
 80082b8:	2000498c 	.word	0x2000498c

080082bc <__errno>:
 80082bc:	4b01      	ldr	r3, [pc, #4]	; (80082c4 <__errno+0x8>)
 80082be:	6818      	ldr	r0, [r3, #0]
 80082c0:	4770      	bx	lr
 80082c2:	bf00      	nop
 80082c4:	20000010 	.word	0x20000010

080082c8 <__libc_init_array>:
 80082c8:	b570      	push	{r4, r5, r6, lr}
 80082ca:	4d0d      	ldr	r5, [pc, #52]	; (8008300 <__libc_init_array+0x38>)
 80082cc:	4c0d      	ldr	r4, [pc, #52]	; (8008304 <__libc_init_array+0x3c>)
 80082ce:	1b64      	subs	r4, r4, r5
 80082d0:	10a4      	asrs	r4, r4, #2
 80082d2:	2600      	movs	r6, #0
 80082d4:	42a6      	cmp	r6, r4
 80082d6:	d109      	bne.n	80082ec <__libc_init_array+0x24>
 80082d8:	4d0b      	ldr	r5, [pc, #44]	; (8008308 <__libc_init_array+0x40>)
 80082da:	4c0c      	ldr	r4, [pc, #48]	; (800830c <__libc_init_array+0x44>)
 80082dc:	f001 f9be 	bl	800965c <_init>
 80082e0:	1b64      	subs	r4, r4, r5
 80082e2:	10a4      	asrs	r4, r4, #2
 80082e4:	2600      	movs	r6, #0
 80082e6:	42a6      	cmp	r6, r4
 80082e8:	d105      	bne.n	80082f6 <__libc_init_array+0x2e>
 80082ea:	bd70      	pop	{r4, r5, r6, pc}
 80082ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80082f0:	4798      	blx	r3
 80082f2:	3601      	adds	r6, #1
 80082f4:	e7ee      	b.n	80082d4 <__libc_init_array+0xc>
 80082f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80082fa:	4798      	blx	r3
 80082fc:	3601      	adds	r6, #1
 80082fe:	e7f2      	b.n	80082e6 <__libc_init_array+0x1e>
 8008300:	08009a68 	.word	0x08009a68
 8008304:	08009a68 	.word	0x08009a68
 8008308:	08009a68 	.word	0x08009a68
 800830c:	08009a6c 	.word	0x08009a6c

08008310 <memcpy>:
 8008310:	440a      	add	r2, r1
 8008312:	4291      	cmp	r1, r2
 8008314:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8008318:	d100      	bne.n	800831c <memcpy+0xc>
 800831a:	4770      	bx	lr
 800831c:	b510      	push	{r4, lr}
 800831e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008322:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008326:	4291      	cmp	r1, r2
 8008328:	d1f9      	bne.n	800831e <memcpy+0xe>
 800832a:	bd10      	pop	{r4, pc}

0800832c <memset>:
 800832c:	4402      	add	r2, r0
 800832e:	4603      	mov	r3, r0
 8008330:	4293      	cmp	r3, r2
 8008332:	d100      	bne.n	8008336 <memset+0xa>
 8008334:	4770      	bx	lr
 8008336:	f803 1b01 	strb.w	r1, [r3], #1
 800833a:	e7f9      	b.n	8008330 <memset+0x4>

0800833c <iprintf>:
 800833c:	b40f      	push	{r0, r1, r2, r3}
 800833e:	4b0a      	ldr	r3, [pc, #40]	; (8008368 <iprintf+0x2c>)
 8008340:	b513      	push	{r0, r1, r4, lr}
 8008342:	681c      	ldr	r4, [r3, #0]
 8008344:	b124      	cbz	r4, 8008350 <iprintf+0x14>
 8008346:	69a3      	ldr	r3, [r4, #24]
 8008348:	b913      	cbnz	r3, 8008350 <iprintf+0x14>
 800834a:	4620      	mov	r0, r4
 800834c:	f000 fa7e 	bl	800884c <__sinit>
 8008350:	ab05      	add	r3, sp, #20
 8008352:	9a04      	ldr	r2, [sp, #16]
 8008354:	68a1      	ldr	r1, [r4, #8]
 8008356:	9301      	str	r3, [sp, #4]
 8008358:	4620      	mov	r0, r4
 800835a:	f000 fdab 	bl	8008eb4 <_vfiprintf_r>
 800835e:	b002      	add	sp, #8
 8008360:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008364:	b004      	add	sp, #16
 8008366:	4770      	bx	lr
 8008368:	20000010 	.word	0x20000010

0800836c <_puts_r>:
 800836c:	b570      	push	{r4, r5, r6, lr}
 800836e:	460e      	mov	r6, r1
 8008370:	4605      	mov	r5, r0
 8008372:	b118      	cbz	r0, 800837c <_puts_r+0x10>
 8008374:	6983      	ldr	r3, [r0, #24]
 8008376:	b90b      	cbnz	r3, 800837c <_puts_r+0x10>
 8008378:	f000 fa68 	bl	800884c <__sinit>
 800837c:	69ab      	ldr	r3, [r5, #24]
 800837e:	68ac      	ldr	r4, [r5, #8]
 8008380:	b913      	cbnz	r3, 8008388 <_puts_r+0x1c>
 8008382:	4628      	mov	r0, r5
 8008384:	f000 fa62 	bl	800884c <__sinit>
 8008388:	4b2c      	ldr	r3, [pc, #176]	; (800843c <_puts_r+0xd0>)
 800838a:	429c      	cmp	r4, r3
 800838c:	d120      	bne.n	80083d0 <_puts_r+0x64>
 800838e:	686c      	ldr	r4, [r5, #4]
 8008390:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008392:	07db      	lsls	r3, r3, #31
 8008394:	d405      	bmi.n	80083a2 <_puts_r+0x36>
 8008396:	89a3      	ldrh	r3, [r4, #12]
 8008398:	0598      	lsls	r0, r3, #22
 800839a:	d402      	bmi.n	80083a2 <_puts_r+0x36>
 800839c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800839e:	f000 faf3 	bl	8008988 <__retarget_lock_acquire_recursive>
 80083a2:	89a3      	ldrh	r3, [r4, #12]
 80083a4:	0719      	lsls	r1, r3, #28
 80083a6:	d51d      	bpl.n	80083e4 <_puts_r+0x78>
 80083a8:	6923      	ldr	r3, [r4, #16]
 80083aa:	b1db      	cbz	r3, 80083e4 <_puts_r+0x78>
 80083ac:	3e01      	subs	r6, #1
 80083ae:	68a3      	ldr	r3, [r4, #8]
 80083b0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80083b4:	3b01      	subs	r3, #1
 80083b6:	60a3      	str	r3, [r4, #8]
 80083b8:	bb39      	cbnz	r1, 800840a <_puts_r+0x9e>
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	da38      	bge.n	8008430 <_puts_r+0xc4>
 80083be:	4622      	mov	r2, r4
 80083c0:	210a      	movs	r1, #10
 80083c2:	4628      	mov	r0, r5
 80083c4:	f000 f868 	bl	8008498 <__swbuf_r>
 80083c8:	3001      	adds	r0, #1
 80083ca:	d011      	beq.n	80083f0 <_puts_r+0x84>
 80083cc:	250a      	movs	r5, #10
 80083ce:	e011      	b.n	80083f4 <_puts_r+0x88>
 80083d0:	4b1b      	ldr	r3, [pc, #108]	; (8008440 <_puts_r+0xd4>)
 80083d2:	429c      	cmp	r4, r3
 80083d4:	d101      	bne.n	80083da <_puts_r+0x6e>
 80083d6:	68ac      	ldr	r4, [r5, #8]
 80083d8:	e7da      	b.n	8008390 <_puts_r+0x24>
 80083da:	4b1a      	ldr	r3, [pc, #104]	; (8008444 <_puts_r+0xd8>)
 80083dc:	429c      	cmp	r4, r3
 80083de:	bf08      	it	eq
 80083e0:	68ec      	ldreq	r4, [r5, #12]
 80083e2:	e7d5      	b.n	8008390 <_puts_r+0x24>
 80083e4:	4621      	mov	r1, r4
 80083e6:	4628      	mov	r0, r5
 80083e8:	f000 f8a8 	bl	800853c <__swsetup_r>
 80083ec:	2800      	cmp	r0, #0
 80083ee:	d0dd      	beq.n	80083ac <_puts_r+0x40>
 80083f0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80083f4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80083f6:	07da      	lsls	r2, r3, #31
 80083f8:	d405      	bmi.n	8008406 <_puts_r+0x9a>
 80083fa:	89a3      	ldrh	r3, [r4, #12]
 80083fc:	059b      	lsls	r3, r3, #22
 80083fe:	d402      	bmi.n	8008406 <_puts_r+0x9a>
 8008400:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008402:	f000 fac2 	bl	800898a <__retarget_lock_release_recursive>
 8008406:	4628      	mov	r0, r5
 8008408:	bd70      	pop	{r4, r5, r6, pc}
 800840a:	2b00      	cmp	r3, #0
 800840c:	da04      	bge.n	8008418 <_puts_r+0xac>
 800840e:	69a2      	ldr	r2, [r4, #24]
 8008410:	429a      	cmp	r2, r3
 8008412:	dc06      	bgt.n	8008422 <_puts_r+0xb6>
 8008414:	290a      	cmp	r1, #10
 8008416:	d004      	beq.n	8008422 <_puts_r+0xb6>
 8008418:	6823      	ldr	r3, [r4, #0]
 800841a:	1c5a      	adds	r2, r3, #1
 800841c:	6022      	str	r2, [r4, #0]
 800841e:	7019      	strb	r1, [r3, #0]
 8008420:	e7c5      	b.n	80083ae <_puts_r+0x42>
 8008422:	4622      	mov	r2, r4
 8008424:	4628      	mov	r0, r5
 8008426:	f000 f837 	bl	8008498 <__swbuf_r>
 800842a:	3001      	adds	r0, #1
 800842c:	d1bf      	bne.n	80083ae <_puts_r+0x42>
 800842e:	e7df      	b.n	80083f0 <_puts_r+0x84>
 8008430:	6823      	ldr	r3, [r4, #0]
 8008432:	250a      	movs	r5, #10
 8008434:	1c5a      	adds	r2, r3, #1
 8008436:	6022      	str	r2, [r4, #0]
 8008438:	701d      	strb	r5, [r3, #0]
 800843a:	e7db      	b.n	80083f4 <_puts_r+0x88>
 800843c:	080099ec 	.word	0x080099ec
 8008440:	08009a0c 	.word	0x08009a0c
 8008444:	080099cc 	.word	0x080099cc

08008448 <puts>:
 8008448:	4b02      	ldr	r3, [pc, #8]	; (8008454 <puts+0xc>)
 800844a:	4601      	mov	r1, r0
 800844c:	6818      	ldr	r0, [r3, #0]
 800844e:	f7ff bf8d 	b.w	800836c <_puts_r>
 8008452:	bf00      	nop
 8008454:	20000010 	.word	0x20000010

08008458 <siprintf>:
 8008458:	b40e      	push	{r1, r2, r3}
 800845a:	b500      	push	{lr}
 800845c:	b09c      	sub	sp, #112	; 0x70
 800845e:	ab1d      	add	r3, sp, #116	; 0x74
 8008460:	9002      	str	r0, [sp, #8]
 8008462:	9006      	str	r0, [sp, #24]
 8008464:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008468:	4809      	ldr	r0, [pc, #36]	; (8008490 <siprintf+0x38>)
 800846a:	9107      	str	r1, [sp, #28]
 800846c:	9104      	str	r1, [sp, #16]
 800846e:	4909      	ldr	r1, [pc, #36]	; (8008494 <siprintf+0x3c>)
 8008470:	f853 2b04 	ldr.w	r2, [r3], #4
 8008474:	9105      	str	r1, [sp, #20]
 8008476:	6800      	ldr	r0, [r0, #0]
 8008478:	9301      	str	r3, [sp, #4]
 800847a:	a902      	add	r1, sp, #8
 800847c:	f000 fbf0 	bl	8008c60 <_svfiprintf_r>
 8008480:	9b02      	ldr	r3, [sp, #8]
 8008482:	2200      	movs	r2, #0
 8008484:	701a      	strb	r2, [r3, #0]
 8008486:	b01c      	add	sp, #112	; 0x70
 8008488:	f85d eb04 	ldr.w	lr, [sp], #4
 800848c:	b003      	add	sp, #12
 800848e:	4770      	bx	lr
 8008490:	20000010 	.word	0x20000010
 8008494:	ffff0208 	.word	0xffff0208

08008498 <__swbuf_r>:
 8008498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800849a:	460e      	mov	r6, r1
 800849c:	4614      	mov	r4, r2
 800849e:	4605      	mov	r5, r0
 80084a0:	b118      	cbz	r0, 80084aa <__swbuf_r+0x12>
 80084a2:	6983      	ldr	r3, [r0, #24]
 80084a4:	b90b      	cbnz	r3, 80084aa <__swbuf_r+0x12>
 80084a6:	f000 f9d1 	bl	800884c <__sinit>
 80084aa:	4b21      	ldr	r3, [pc, #132]	; (8008530 <__swbuf_r+0x98>)
 80084ac:	429c      	cmp	r4, r3
 80084ae:	d12b      	bne.n	8008508 <__swbuf_r+0x70>
 80084b0:	686c      	ldr	r4, [r5, #4]
 80084b2:	69a3      	ldr	r3, [r4, #24]
 80084b4:	60a3      	str	r3, [r4, #8]
 80084b6:	89a3      	ldrh	r3, [r4, #12]
 80084b8:	071a      	lsls	r2, r3, #28
 80084ba:	d52f      	bpl.n	800851c <__swbuf_r+0x84>
 80084bc:	6923      	ldr	r3, [r4, #16]
 80084be:	b36b      	cbz	r3, 800851c <__swbuf_r+0x84>
 80084c0:	6923      	ldr	r3, [r4, #16]
 80084c2:	6820      	ldr	r0, [r4, #0]
 80084c4:	1ac0      	subs	r0, r0, r3
 80084c6:	6963      	ldr	r3, [r4, #20]
 80084c8:	b2f6      	uxtb	r6, r6
 80084ca:	4283      	cmp	r3, r0
 80084cc:	4637      	mov	r7, r6
 80084ce:	dc04      	bgt.n	80084da <__swbuf_r+0x42>
 80084d0:	4621      	mov	r1, r4
 80084d2:	4628      	mov	r0, r5
 80084d4:	f000 f926 	bl	8008724 <_fflush_r>
 80084d8:	bb30      	cbnz	r0, 8008528 <__swbuf_r+0x90>
 80084da:	68a3      	ldr	r3, [r4, #8]
 80084dc:	3b01      	subs	r3, #1
 80084de:	60a3      	str	r3, [r4, #8]
 80084e0:	6823      	ldr	r3, [r4, #0]
 80084e2:	1c5a      	adds	r2, r3, #1
 80084e4:	6022      	str	r2, [r4, #0]
 80084e6:	701e      	strb	r6, [r3, #0]
 80084e8:	6963      	ldr	r3, [r4, #20]
 80084ea:	3001      	adds	r0, #1
 80084ec:	4283      	cmp	r3, r0
 80084ee:	d004      	beq.n	80084fa <__swbuf_r+0x62>
 80084f0:	89a3      	ldrh	r3, [r4, #12]
 80084f2:	07db      	lsls	r3, r3, #31
 80084f4:	d506      	bpl.n	8008504 <__swbuf_r+0x6c>
 80084f6:	2e0a      	cmp	r6, #10
 80084f8:	d104      	bne.n	8008504 <__swbuf_r+0x6c>
 80084fa:	4621      	mov	r1, r4
 80084fc:	4628      	mov	r0, r5
 80084fe:	f000 f911 	bl	8008724 <_fflush_r>
 8008502:	b988      	cbnz	r0, 8008528 <__swbuf_r+0x90>
 8008504:	4638      	mov	r0, r7
 8008506:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008508:	4b0a      	ldr	r3, [pc, #40]	; (8008534 <__swbuf_r+0x9c>)
 800850a:	429c      	cmp	r4, r3
 800850c:	d101      	bne.n	8008512 <__swbuf_r+0x7a>
 800850e:	68ac      	ldr	r4, [r5, #8]
 8008510:	e7cf      	b.n	80084b2 <__swbuf_r+0x1a>
 8008512:	4b09      	ldr	r3, [pc, #36]	; (8008538 <__swbuf_r+0xa0>)
 8008514:	429c      	cmp	r4, r3
 8008516:	bf08      	it	eq
 8008518:	68ec      	ldreq	r4, [r5, #12]
 800851a:	e7ca      	b.n	80084b2 <__swbuf_r+0x1a>
 800851c:	4621      	mov	r1, r4
 800851e:	4628      	mov	r0, r5
 8008520:	f000 f80c 	bl	800853c <__swsetup_r>
 8008524:	2800      	cmp	r0, #0
 8008526:	d0cb      	beq.n	80084c0 <__swbuf_r+0x28>
 8008528:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800852c:	e7ea      	b.n	8008504 <__swbuf_r+0x6c>
 800852e:	bf00      	nop
 8008530:	080099ec 	.word	0x080099ec
 8008534:	08009a0c 	.word	0x08009a0c
 8008538:	080099cc 	.word	0x080099cc

0800853c <__swsetup_r>:
 800853c:	4b32      	ldr	r3, [pc, #200]	; (8008608 <__swsetup_r+0xcc>)
 800853e:	b570      	push	{r4, r5, r6, lr}
 8008540:	681d      	ldr	r5, [r3, #0]
 8008542:	4606      	mov	r6, r0
 8008544:	460c      	mov	r4, r1
 8008546:	b125      	cbz	r5, 8008552 <__swsetup_r+0x16>
 8008548:	69ab      	ldr	r3, [r5, #24]
 800854a:	b913      	cbnz	r3, 8008552 <__swsetup_r+0x16>
 800854c:	4628      	mov	r0, r5
 800854e:	f000 f97d 	bl	800884c <__sinit>
 8008552:	4b2e      	ldr	r3, [pc, #184]	; (800860c <__swsetup_r+0xd0>)
 8008554:	429c      	cmp	r4, r3
 8008556:	d10f      	bne.n	8008578 <__swsetup_r+0x3c>
 8008558:	686c      	ldr	r4, [r5, #4]
 800855a:	89a3      	ldrh	r3, [r4, #12]
 800855c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008560:	0719      	lsls	r1, r3, #28
 8008562:	d42c      	bmi.n	80085be <__swsetup_r+0x82>
 8008564:	06dd      	lsls	r5, r3, #27
 8008566:	d411      	bmi.n	800858c <__swsetup_r+0x50>
 8008568:	2309      	movs	r3, #9
 800856a:	6033      	str	r3, [r6, #0]
 800856c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008570:	81a3      	strh	r3, [r4, #12]
 8008572:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008576:	e03e      	b.n	80085f6 <__swsetup_r+0xba>
 8008578:	4b25      	ldr	r3, [pc, #148]	; (8008610 <__swsetup_r+0xd4>)
 800857a:	429c      	cmp	r4, r3
 800857c:	d101      	bne.n	8008582 <__swsetup_r+0x46>
 800857e:	68ac      	ldr	r4, [r5, #8]
 8008580:	e7eb      	b.n	800855a <__swsetup_r+0x1e>
 8008582:	4b24      	ldr	r3, [pc, #144]	; (8008614 <__swsetup_r+0xd8>)
 8008584:	429c      	cmp	r4, r3
 8008586:	bf08      	it	eq
 8008588:	68ec      	ldreq	r4, [r5, #12]
 800858a:	e7e6      	b.n	800855a <__swsetup_r+0x1e>
 800858c:	0758      	lsls	r0, r3, #29
 800858e:	d512      	bpl.n	80085b6 <__swsetup_r+0x7a>
 8008590:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008592:	b141      	cbz	r1, 80085a6 <__swsetup_r+0x6a>
 8008594:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008598:	4299      	cmp	r1, r3
 800859a:	d002      	beq.n	80085a2 <__swsetup_r+0x66>
 800859c:	4630      	mov	r0, r6
 800859e:	f000 fa59 	bl	8008a54 <_free_r>
 80085a2:	2300      	movs	r3, #0
 80085a4:	6363      	str	r3, [r4, #52]	; 0x34
 80085a6:	89a3      	ldrh	r3, [r4, #12]
 80085a8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80085ac:	81a3      	strh	r3, [r4, #12]
 80085ae:	2300      	movs	r3, #0
 80085b0:	6063      	str	r3, [r4, #4]
 80085b2:	6923      	ldr	r3, [r4, #16]
 80085b4:	6023      	str	r3, [r4, #0]
 80085b6:	89a3      	ldrh	r3, [r4, #12]
 80085b8:	f043 0308 	orr.w	r3, r3, #8
 80085bc:	81a3      	strh	r3, [r4, #12]
 80085be:	6923      	ldr	r3, [r4, #16]
 80085c0:	b94b      	cbnz	r3, 80085d6 <__swsetup_r+0x9a>
 80085c2:	89a3      	ldrh	r3, [r4, #12]
 80085c4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80085c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80085cc:	d003      	beq.n	80085d6 <__swsetup_r+0x9a>
 80085ce:	4621      	mov	r1, r4
 80085d0:	4630      	mov	r0, r6
 80085d2:	f000 f9ff 	bl	80089d4 <__smakebuf_r>
 80085d6:	89a0      	ldrh	r0, [r4, #12]
 80085d8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80085dc:	f010 0301 	ands.w	r3, r0, #1
 80085e0:	d00a      	beq.n	80085f8 <__swsetup_r+0xbc>
 80085e2:	2300      	movs	r3, #0
 80085e4:	60a3      	str	r3, [r4, #8]
 80085e6:	6963      	ldr	r3, [r4, #20]
 80085e8:	425b      	negs	r3, r3
 80085ea:	61a3      	str	r3, [r4, #24]
 80085ec:	6923      	ldr	r3, [r4, #16]
 80085ee:	b943      	cbnz	r3, 8008602 <__swsetup_r+0xc6>
 80085f0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80085f4:	d1ba      	bne.n	800856c <__swsetup_r+0x30>
 80085f6:	bd70      	pop	{r4, r5, r6, pc}
 80085f8:	0781      	lsls	r1, r0, #30
 80085fa:	bf58      	it	pl
 80085fc:	6963      	ldrpl	r3, [r4, #20]
 80085fe:	60a3      	str	r3, [r4, #8]
 8008600:	e7f4      	b.n	80085ec <__swsetup_r+0xb0>
 8008602:	2000      	movs	r0, #0
 8008604:	e7f7      	b.n	80085f6 <__swsetup_r+0xba>
 8008606:	bf00      	nop
 8008608:	20000010 	.word	0x20000010
 800860c:	080099ec 	.word	0x080099ec
 8008610:	08009a0c 	.word	0x08009a0c
 8008614:	080099cc 	.word	0x080099cc

08008618 <__sflush_r>:
 8008618:	898a      	ldrh	r2, [r1, #12]
 800861a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800861e:	4605      	mov	r5, r0
 8008620:	0710      	lsls	r0, r2, #28
 8008622:	460c      	mov	r4, r1
 8008624:	d458      	bmi.n	80086d8 <__sflush_r+0xc0>
 8008626:	684b      	ldr	r3, [r1, #4]
 8008628:	2b00      	cmp	r3, #0
 800862a:	dc05      	bgt.n	8008638 <__sflush_r+0x20>
 800862c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800862e:	2b00      	cmp	r3, #0
 8008630:	dc02      	bgt.n	8008638 <__sflush_r+0x20>
 8008632:	2000      	movs	r0, #0
 8008634:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008638:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800863a:	2e00      	cmp	r6, #0
 800863c:	d0f9      	beq.n	8008632 <__sflush_r+0x1a>
 800863e:	2300      	movs	r3, #0
 8008640:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008644:	682f      	ldr	r7, [r5, #0]
 8008646:	602b      	str	r3, [r5, #0]
 8008648:	d032      	beq.n	80086b0 <__sflush_r+0x98>
 800864a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800864c:	89a3      	ldrh	r3, [r4, #12]
 800864e:	075a      	lsls	r2, r3, #29
 8008650:	d505      	bpl.n	800865e <__sflush_r+0x46>
 8008652:	6863      	ldr	r3, [r4, #4]
 8008654:	1ac0      	subs	r0, r0, r3
 8008656:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008658:	b10b      	cbz	r3, 800865e <__sflush_r+0x46>
 800865a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800865c:	1ac0      	subs	r0, r0, r3
 800865e:	2300      	movs	r3, #0
 8008660:	4602      	mov	r2, r0
 8008662:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008664:	6a21      	ldr	r1, [r4, #32]
 8008666:	4628      	mov	r0, r5
 8008668:	47b0      	blx	r6
 800866a:	1c43      	adds	r3, r0, #1
 800866c:	89a3      	ldrh	r3, [r4, #12]
 800866e:	d106      	bne.n	800867e <__sflush_r+0x66>
 8008670:	6829      	ldr	r1, [r5, #0]
 8008672:	291d      	cmp	r1, #29
 8008674:	d82c      	bhi.n	80086d0 <__sflush_r+0xb8>
 8008676:	4a2a      	ldr	r2, [pc, #168]	; (8008720 <__sflush_r+0x108>)
 8008678:	40ca      	lsrs	r2, r1
 800867a:	07d6      	lsls	r6, r2, #31
 800867c:	d528      	bpl.n	80086d0 <__sflush_r+0xb8>
 800867e:	2200      	movs	r2, #0
 8008680:	6062      	str	r2, [r4, #4]
 8008682:	04d9      	lsls	r1, r3, #19
 8008684:	6922      	ldr	r2, [r4, #16]
 8008686:	6022      	str	r2, [r4, #0]
 8008688:	d504      	bpl.n	8008694 <__sflush_r+0x7c>
 800868a:	1c42      	adds	r2, r0, #1
 800868c:	d101      	bne.n	8008692 <__sflush_r+0x7a>
 800868e:	682b      	ldr	r3, [r5, #0]
 8008690:	b903      	cbnz	r3, 8008694 <__sflush_r+0x7c>
 8008692:	6560      	str	r0, [r4, #84]	; 0x54
 8008694:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008696:	602f      	str	r7, [r5, #0]
 8008698:	2900      	cmp	r1, #0
 800869a:	d0ca      	beq.n	8008632 <__sflush_r+0x1a>
 800869c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80086a0:	4299      	cmp	r1, r3
 80086a2:	d002      	beq.n	80086aa <__sflush_r+0x92>
 80086a4:	4628      	mov	r0, r5
 80086a6:	f000 f9d5 	bl	8008a54 <_free_r>
 80086aa:	2000      	movs	r0, #0
 80086ac:	6360      	str	r0, [r4, #52]	; 0x34
 80086ae:	e7c1      	b.n	8008634 <__sflush_r+0x1c>
 80086b0:	6a21      	ldr	r1, [r4, #32]
 80086b2:	2301      	movs	r3, #1
 80086b4:	4628      	mov	r0, r5
 80086b6:	47b0      	blx	r6
 80086b8:	1c41      	adds	r1, r0, #1
 80086ba:	d1c7      	bne.n	800864c <__sflush_r+0x34>
 80086bc:	682b      	ldr	r3, [r5, #0]
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d0c4      	beq.n	800864c <__sflush_r+0x34>
 80086c2:	2b1d      	cmp	r3, #29
 80086c4:	d001      	beq.n	80086ca <__sflush_r+0xb2>
 80086c6:	2b16      	cmp	r3, #22
 80086c8:	d101      	bne.n	80086ce <__sflush_r+0xb6>
 80086ca:	602f      	str	r7, [r5, #0]
 80086cc:	e7b1      	b.n	8008632 <__sflush_r+0x1a>
 80086ce:	89a3      	ldrh	r3, [r4, #12]
 80086d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80086d4:	81a3      	strh	r3, [r4, #12]
 80086d6:	e7ad      	b.n	8008634 <__sflush_r+0x1c>
 80086d8:	690f      	ldr	r7, [r1, #16]
 80086da:	2f00      	cmp	r7, #0
 80086dc:	d0a9      	beq.n	8008632 <__sflush_r+0x1a>
 80086de:	0793      	lsls	r3, r2, #30
 80086e0:	680e      	ldr	r6, [r1, #0]
 80086e2:	bf08      	it	eq
 80086e4:	694b      	ldreq	r3, [r1, #20]
 80086e6:	600f      	str	r7, [r1, #0]
 80086e8:	bf18      	it	ne
 80086ea:	2300      	movne	r3, #0
 80086ec:	eba6 0807 	sub.w	r8, r6, r7
 80086f0:	608b      	str	r3, [r1, #8]
 80086f2:	f1b8 0f00 	cmp.w	r8, #0
 80086f6:	dd9c      	ble.n	8008632 <__sflush_r+0x1a>
 80086f8:	6a21      	ldr	r1, [r4, #32]
 80086fa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80086fc:	4643      	mov	r3, r8
 80086fe:	463a      	mov	r2, r7
 8008700:	4628      	mov	r0, r5
 8008702:	47b0      	blx	r6
 8008704:	2800      	cmp	r0, #0
 8008706:	dc06      	bgt.n	8008716 <__sflush_r+0xfe>
 8008708:	89a3      	ldrh	r3, [r4, #12]
 800870a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800870e:	81a3      	strh	r3, [r4, #12]
 8008710:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008714:	e78e      	b.n	8008634 <__sflush_r+0x1c>
 8008716:	4407      	add	r7, r0
 8008718:	eba8 0800 	sub.w	r8, r8, r0
 800871c:	e7e9      	b.n	80086f2 <__sflush_r+0xda>
 800871e:	bf00      	nop
 8008720:	20400001 	.word	0x20400001

08008724 <_fflush_r>:
 8008724:	b538      	push	{r3, r4, r5, lr}
 8008726:	690b      	ldr	r3, [r1, #16]
 8008728:	4605      	mov	r5, r0
 800872a:	460c      	mov	r4, r1
 800872c:	b913      	cbnz	r3, 8008734 <_fflush_r+0x10>
 800872e:	2500      	movs	r5, #0
 8008730:	4628      	mov	r0, r5
 8008732:	bd38      	pop	{r3, r4, r5, pc}
 8008734:	b118      	cbz	r0, 800873e <_fflush_r+0x1a>
 8008736:	6983      	ldr	r3, [r0, #24]
 8008738:	b90b      	cbnz	r3, 800873e <_fflush_r+0x1a>
 800873a:	f000 f887 	bl	800884c <__sinit>
 800873e:	4b14      	ldr	r3, [pc, #80]	; (8008790 <_fflush_r+0x6c>)
 8008740:	429c      	cmp	r4, r3
 8008742:	d11b      	bne.n	800877c <_fflush_r+0x58>
 8008744:	686c      	ldr	r4, [r5, #4]
 8008746:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800874a:	2b00      	cmp	r3, #0
 800874c:	d0ef      	beq.n	800872e <_fflush_r+0xa>
 800874e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008750:	07d0      	lsls	r0, r2, #31
 8008752:	d404      	bmi.n	800875e <_fflush_r+0x3a>
 8008754:	0599      	lsls	r1, r3, #22
 8008756:	d402      	bmi.n	800875e <_fflush_r+0x3a>
 8008758:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800875a:	f000 f915 	bl	8008988 <__retarget_lock_acquire_recursive>
 800875e:	4628      	mov	r0, r5
 8008760:	4621      	mov	r1, r4
 8008762:	f7ff ff59 	bl	8008618 <__sflush_r>
 8008766:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008768:	07da      	lsls	r2, r3, #31
 800876a:	4605      	mov	r5, r0
 800876c:	d4e0      	bmi.n	8008730 <_fflush_r+0xc>
 800876e:	89a3      	ldrh	r3, [r4, #12]
 8008770:	059b      	lsls	r3, r3, #22
 8008772:	d4dd      	bmi.n	8008730 <_fflush_r+0xc>
 8008774:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008776:	f000 f908 	bl	800898a <__retarget_lock_release_recursive>
 800877a:	e7d9      	b.n	8008730 <_fflush_r+0xc>
 800877c:	4b05      	ldr	r3, [pc, #20]	; (8008794 <_fflush_r+0x70>)
 800877e:	429c      	cmp	r4, r3
 8008780:	d101      	bne.n	8008786 <_fflush_r+0x62>
 8008782:	68ac      	ldr	r4, [r5, #8]
 8008784:	e7df      	b.n	8008746 <_fflush_r+0x22>
 8008786:	4b04      	ldr	r3, [pc, #16]	; (8008798 <_fflush_r+0x74>)
 8008788:	429c      	cmp	r4, r3
 800878a:	bf08      	it	eq
 800878c:	68ec      	ldreq	r4, [r5, #12]
 800878e:	e7da      	b.n	8008746 <_fflush_r+0x22>
 8008790:	080099ec 	.word	0x080099ec
 8008794:	08009a0c 	.word	0x08009a0c
 8008798:	080099cc 	.word	0x080099cc

0800879c <std>:
 800879c:	2300      	movs	r3, #0
 800879e:	b510      	push	{r4, lr}
 80087a0:	4604      	mov	r4, r0
 80087a2:	e9c0 3300 	strd	r3, r3, [r0]
 80087a6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80087aa:	6083      	str	r3, [r0, #8]
 80087ac:	8181      	strh	r1, [r0, #12]
 80087ae:	6643      	str	r3, [r0, #100]	; 0x64
 80087b0:	81c2      	strh	r2, [r0, #14]
 80087b2:	6183      	str	r3, [r0, #24]
 80087b4:	4619      	mov	r1, r3
 80087b6:	2208      	movs	r2, #8
 80087b8:	305c      	adds	r0, #92	; 0x5c
 80087ba:	f7ff fdb7 	bl	800832c <memset>
 80087be:	4b05      	ldr	r3, [pc, #20]	; (80087d4 <std+0x38>)
 80087c0:	6263      	str	r3, [r4, #36]	; 0x24
 80087c2:	4b05      	ldr	r3, [pc, #20]	; (80087d8 <std+0x3c>)
 80087c4:	62a3      	str	r3, [r4, #40]	; 0x28
 80087c6:	4b05      	ldr	r3, [pc, #20]	; (80087dc <std+0x40>)
 80087c8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80087ca:	4b05      	ldr	r3, [pc, #20]	; (80087e0 <std+0x44>)
 80087cc:	6224      	str	r4, [r4, #32]
 80087ce:	6323      	str	r3, [r4, #48]	; 0x30
 80087d0:	bd10      	pop	{r4, pc}
 80087d2:	bf00      	nop
 80087d4:	0800945d 	.word	0x0800945d
 80087d8:	0800947f 	.word	0x0800947f
 80087dc:	080094b7 	.word	0x080094b7
 80087e0:	080094db 	.word	0x080094db

080087e4 <_cleanup_r>:
 80087e4:	4901      	ldr	r1, [pc, #4]	; (80087ec <_cleanup_r+0x8>)
 80087e6:	f000 b8af 	b.w	8008948 <_fwalk_reent>
 80087ea:	bf00      	nop
 80087ec:	08008725 	.word	0x08008725

080087f0 <__sfmoreglue>:
 80087f0:	b570      	push	{r4, r5, r6, lr}
 80087f2:	1e4a      	subs	r2, r1, #1
 80087f4:	2568      	movs	r5, #104	; 0x68
 80087f6:	4355      	muls	r5, r2
 80087f8:	460e      	mov	r6, r1
 80087fa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80087fe:	f000 f979 	bl	8008af4 <_malloc_r>
 8008802:	4604      	mov	r4, r0
 8008804:	b140      	cbz	r0, 8008818 <__sfmoreglue+0x28>
 8008806:	2100      	movs	r1, #0
 8008808:	e9c0 1600 	strd	r1, r6, [r0]
 800880c:	300c      	adds	r0, #12
 800880e:	60a0      	str	r0, [r4, #8]
 8008810:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008814:	f7ff fd8a 	bl	800832c <memset>
 8008818:	4620      	mov	r0, r4
 800881a:	bd70      	pop	{r4, r5, r6, pc}

0800881c <__sfp_lock_acquire>:
 800881c:	4801      	ldr	r0, [pc, #4]	; (8008824 <__sfp_lock_acquire+0x8>)
 800881e:	f000 b8b3 	b.w	8008988 <__retarget_lock_acquire_recursive>
 8008822:	bf00      	nop
 8008824:	20004c6c 	.word	0x20004c6c

08008828 <__sfp_lock_release>:
 8008828:	4801      	ldr	r0, [pc, #4]	; (8008830 <__sfp_lock_release+0x8>)
 800882a:	f000 b8ae 	b.w	800898a <__retarget_lock_release_recursive>
 800882e:	bf00      	nop
 8008830:	20004c6c 	.word	0x20004c6c

08008834 <__sinit_lock_acquire>:
 8008834:	4801      	ldr	r0, [pc, #4]	; (800883c <__sinit_lock_acquire+0x8>)
 8008836:	f000 b8a7 	b.w	8008988 <__retarget_lock_acquire_recursive>
 800883a:	bf00      	nop
 800883c:	20004c67 	.word	0x20004c67

08008840 <__sinit_lock_release>:
 8008840:	4801      	ldr	r0, [pc, #4]	; (8008848 <__sinit_lock_release+0x8>)
 8008842:	f000 b8a2 	b.w	800898a <__retarget_lock_release_recursive>
 8008846:	bf00      	nop
 8008848:	20004c67 	.word	0x20004c67

0800884c <__sinit>:
 800884c:	b510      	push	{r4, lr}
 800884e:	4604      	mov	r4, r0
 8008850:	f7ff fff0 	bl	8008834 <__sinit_lock_acquire>
 8008854:	69a3      	ldr	r3, [r4, #24]
 8008856:	b11b      	cbz	r3, 8008860 <__sinit+0x14>
 8008858:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800885c:	f7ff bff0 	b.w	8008840 <__sinit_lock_release>
 8008860:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008864:	6523      	str	r3, [r4, #80]	; 0x50
 8008866:	4b13      	ldr	r3, [pc, #76]	; (80088b4 <__sinit+0x68>)
 8008868:	4a13      	ldr	r2, [pc, #76]	; (80088b8 <__sinit+0x6c>)
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	62a2      	str	r2, [r4, #40]	; 0x28
 800886e:	42a3      	cmp	r3, r4
 8008870:	bf04      	itt	eq
 8008872:	2301      	moveq	r3, #1
 8008874:	61a3      	streq	r3, [r4, #24]
 8008876:	4620      	mov	r0, r4
 8008878:	f000 f820 	bl	80088bc <__sfp>
 800887c:	6060      	str	r0, [r4, #4]
 800887e:	4620      	mov	r0, r4
 8008880:	f000 f81c 	bl	80088bc <__sfp>
 8008884:	60a0      	str	r0, [r4, #8]
 8008886:	4620      	mov	r0, r4
 8008888:	f000 f818 	bl	80088bc <__sfp>
 800888c:	2200      	movs	r2, #0
 800888e:	60e0      	str	r0, [r4, #12]
 8008890:	2104      	movs	r1, #4
 8008892:	6860      	ldr	r0, [r4, #4]
 8008894:	f7ff ff82 	bl	800879c <std>
 8008898:	68a0      	ldr	r0, [r4, #8]
 800889a:	2201      	movs	r2, #1
 800889c:	2109      	movs	r1, #9
 800889e:	f7ff ff7d 	bl	800879c <std>
 80088a2:	68e0      	ldr	r0, [r4, #12]
 80088a4:	2202      	movs	r2, #2
 80088a6:	2112      	movs	r1, #18
 80088a8:	f7ff ff78 	bl	800879c <std>
 80088ac:	2301      	movs	r3, #1
 80088ae:	61a3      	str	r3, [r4, #24]
 80088b0:	e7d2      	b.n	8008858 <__sinit+0xc>
 80088b2:	bf00      	nop
 80088b4:	080099c8 	.word	0x080099c8
 80088b8:	080087e5 	.word	0x080087e5

080088bc <__sfp>:
 80088bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088be:	4607      	mov	r7, r0
 80088c0:	f7ff ffac 	bl	800881c <__sfp_lock_acquire>
 80088c4:	4b1e      	ldr	r3, [pc, #120]	; (8008940 <__sfp+0x84>)
 80088c6:	681e      	ldr	r6, [r3, #0]
 80088c8:	69b3      	ldr	r3, [r6, #24]
 80088ca:	b913      	cbnz	r3, 80088d2 <__sfp+0x16>
 80088cc:	4630      	mov	r0, r6
 80088ce:	f7ff ffbd 	bl	800884c <__sinit>
 80088d2:	3648      	adds	r6, #72	; 0x48
 80088d4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80088d8:	3b01      	subs	r3, #1
 80088da:	d503      	bpl.n	80088e4 <__sfp+0x28>
 80088dc:	6833      	ldr	r3, [r6, #0]
 80088de:	b30b      	cbz	r3, 8008924 <__sfp+0x68>
 80088e0:	6836      	ldr	r6, [r6, #0]
 80088e2:	e7f7      	b.n	80088d4 <__sfp+0x18>
 80088e4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80088e8:	b9d5      	cbnz	r5, 8008920 <__sfp+0x64>
 80088ea:	4b16      	ldr	r3, [pc, #88]	; (8008944 <__sfp+0x88>)
 80088ec:	60e3      	str	r3, [r4, #12]
 80088ee:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80088f2:	6665      	str	r5, [r4, #100]	; 0x64
 80088f4:	f000 f847 	bl	8008986 <__retarget_lock_init_recursive>
 80088f8:	f7ff ff96 	bl	8008828 <__sfp_lock_release>
 80088fc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008900:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008904:	6025      	str	r5, [r4, #0]
 8008906:	61a5      	str	r5, [r4, #24]
 8008908:	2208      	movs	r2, #8
 800890a:	4629      	mov	r1, r5
 800890c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008910:	f7ff fd0c 	bl	800832c <memset>
 8008914:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008918:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800891c:	4620      	mov	r0, r4
 800891e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008920:	3468      	adds	r4, #104	; 0x68
 8008922:	e7d9      	b.n	80088d8 <__sfp+0x1c>
 8008924:	2104      	movs	r1, #4
 8008926:	4638      	mov	r0, r7
 8008928:	f7ff ff62 	bl	80087f0 <__sfmoreglue>
 800892c:	4604      	mov	r4, r0
 800892e:	6030      	str	r0, [r6, #0]
 8008930:	2800      	cmp	r0, #0
 8008932:	d1d5      	bne.n	80088e0 <__sfp+0x24>
 8008934:	f7ff ff78 	bl	8008828 <__sfp_lock_release>
 8008938:	230c      	movs	r3, #12
 800893a:	603b      	str	r3, [r7, #0]
 800893c:	e7ee      	b.n	800891c <__sfp+0x60>
 800893e:	bf00      	nop
 8008940:	080099c8 	.word	0x080099c8
 8008944:	ffff0001 	.word	0xffff0001

08008948 <_fwalk_reent>:
 8008948:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800894c:	4606      	mov	r6, r0
 800894e:	4688      	mov	r8, r1
 8008950:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008954:	2700      	movs	r7, #0
 8008956:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800895a:	f1b9 0901 	subs.w	r9, r9, #1
 800895e:	d505      	bpl.n	800896c <_fwalk_reent+0x24>
 8008960:	6824      	ldr	r4, [r4, #0]
 8008962:	2c00      	cmp	r4, #0
 8008964:	d1f7      	bne.n	8008956 <_fwalk_reent+0xe>
 8008966:	4638      	mov	r0, r7
 8008968:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800896c:	89ab      	ldrh	r3, [r5, #12]
 800896e:	2b01      	cmp	r3, #1
 8008970:	d907      	bls.n	8008982 <_fwalk_reent+0x3a>
 8008972:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008976:	3301      	adds	r3, #1
 8008978:	d003      	beq.n	8008982 <_fwalk_reent+0x3a>
 800897a:	4629      	mov	r1, r5
 800897c:	4630      	mov	r0, r6
 800897e:	47c0      	blx	r8
 8008980:	4307      	orrs	r7, r0
 8008982:	3568      	adds	r5, #104	; 0x68
 8008984:	e7e9      	b.n	800895a <_fwalk_reent+0x12>

08008986 <__retarget_lock_init_recursive>:
 8008986:	4770      	bx	lr

08008988 <__retarget_lock_acquire_recursive>:
 8008988:	4770      	bx	lr

0800898a <__retarget_lock_release_recursive>:
 800898a:	4770      	bx	lr

0800898c <__swhatbuf_r>:
 800898c:	b570      	push	{r4, r5, r6, lr}
 800898e:	460e      	mov	r6, r1
 8008990:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008994:	2900      	cmp	r1, #0
 8008996:	b096      	sub	sp, #88	; 0x58
 8008998:	4614      	mov	r4, r2
 800899a:	461d      	mov	r5, r3
 800899c:	da07      	bge.n	80089ae <__swhatbuf_r+0x22>
 800899e:	2300      	movs	r3, #0
 80089a0:	602b      	str	r3, [r5, #0]
 80089a2:	89b3      	ldrh	r3, [r6, #12]
 80089a4:	061a      	lsls	r2, r3, #24
 80089a6:	d410      	bmi.n	80089ca <__swhatbuf_r+0x3e>
 80089a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80089ac:	e00e      	b.n	80089cc <__swhatbuf_r+0x40>
 80089ae:	466a      	mov	r2, sp
 80089b0:	f000 fdba 	bl	8009528 <_fstat_r>
 80089b4:	2800      	cmp	r0, #0
 80089b6:	dbf2      	blt.n	800899e <__swhatbuf_r+0x12>
 80089b8:	9a01      	ldr	r2, [sp, #4]
 80089ba:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80089be:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80089c2:	425a      	negs	r2, r3
 80089c4:	415a      	adcs	r2, r3
 80089c6:	602a      	str	r2, [r5, #0]
 80089c8:	e7ee      	b.n	80089a8 <__swhatbuf_r+0x1c>
 80089ca:	2340      	movs	r3, #64	; 0x40
 80089cc:	2000      	movs	r0, #0
 80089ce:	6023      	str	r3, [r4, #0]
 80089d0:	b016      	add	sp, #88	; 0x58
 80089d2:	bd70      	pop	{r4, r5, r6, pc}

080089d4 <__smakebuf_r>:
 80089d4:	898b      	ldrh	r3, [r1, #12]
 80089d6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80089d8:	079d      	lsls	r5, r3, #30
 80089da:	4606      	mov	r6, r0
 80089dc:	460c      	mov	r4, r1
 80089de:	d507      	bpl.n	80089f0 <__smakebuf_r+0x1c>
 80089e0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80089e4:	6023      	str	r3, [r4, #0]
 80089e6:	6123      	str	r3, [r4, #16]
 80089e8:	2301      	movs	r3, #1
 80089ea:	6163      	str	r3, [r4, #20]
 80089ec:	b002      	add	sp, #8
 80089ee:	bd70      	pop	{r4, r5, r6, pc}
 80089f0:	ab01      	add	r3, sp, #4
 80089f2:	466a      	mov	r2, sp
 80089f4:	f7ff ffca 	bl	800898c <__swhatbuf_r>
 80089f8:	9900      	ldr	r1, [sp, #0]
 80089fa:	4605      	mov	r5, r0
 80089fc:	4630      	mov	r0, r6
 80089fe:	f000 f879 	bl	8008af4 <_malloc_r>
 8008a02:	b948      	cbnz	r0, 8008a18 <__smakebuf_r+0x44>
 8008a04:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008a08:	059a      	lsls	r2, r3, #22
 8008a0a:	d4ef      	bmi.n	80089ec <__smakebuf_r+0x18>
 8008a0c:	f023 0303 	bic.w	r3, r3, #3
 8008a10:	f043 0302 	orr.w	r3, r3, #2
 8008a14:	81a3      	strh	r3, [r4, #12]
 8008a16:	e7e3      	b.n	80089e0 <__smakebuf_r+0xc>
 8008a18:	4b0d      	ldr	r3, [pc, #52]	; (8008a50 <__smakebuf_r+0x7c>)
 8008a1a:	62b3      	str	r3, [r6, #40]	; 0x28
 8008a1c:	89a3      	ldrh	r3, [r4, #12]
 8008a1e:	6020      	str	r0, [r4, #0]
 8008a20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008a24:	81a3      	strh	r3, [r4, #12]
 8008a26:	9b00      	ldr	r3, [sp, #0]
 8008a28:	6163      	str	r3, [r4, #20]
 8008a2a:	9b01      	ldr	r3, [sp, #4]
 8008a2c:	6120      	str	r0, [r4, #16]
 8008a2e:	b15b      	cbz	r3, 8008a48 <__smakebuf_r+0x74>
 8008a30:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008a34:	4630      	mov	r0, r6
 8008a36:	f000 fd89 	bl	800954c <_isatty_r>
 8008a3a:	b128      	cbz	r0, 8008a48 <__smakebuf_r+0x74>
 8008a3c:	89a3      	ldrh	r3, [r4, #12]
 8008a3e:	f023 0303 	bic.w	r3, r3, #3
 8008a42:	f043 0301 	orr.w	r3, r3, #1
 8008a46:	81a3      	strh	r3, [r4, #12]
 8008a48:	89a0      	ldrh	r0, [r4, #12]
 8008a4a:	4305      	orrs	r5, r0
 8008a4c:	81a5      	strh	r5, [r4, #12]
 8008a4e:	e7cd      	b.n	80089ec <__smakebuf_r+0x18>
 8008a50:	080087e5 	.word	0x080087e5

08008a54 <_free_r>:
 8008a54:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008a56:	2900      	cmp	r1, #0
 8008a58:	d048      	beq.n	8008aec <_free_r+0x98>
 8008a5a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008a5e:	9001      	str	r0, [sp, #4]
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	f1a1 0404 	sub.w	r4, r1, #4
 8008a66:	bfb8      	it	lt
 8008a68:	18e4      	addlt	r4, r4, r3
 8008a6a:	f000 fdab 	bl	80095c4 <__malloc_lock>
 8008a6e:	4a20      	ldr	r2, [pc, #128]	; (8008af0 <_free_r+0x9c>)
 8008a70:	9801      	ldr	r0, [sp, #4]
 8008a72:	6813      	ldr	r3, [r2, #0]
 8008a74:	4615      	mov	r5, r2
 8008a76:	b933      	cbnz	r3, 8008a86 <_free_r+0x32>
 8008a78:	6063      	str	r3, [r4, #4]
 8008a7a:	6014      	str	r4, [r2, #0]
 8008a7c:	b003      	add	sp, #12
 8008a7e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008a82:	f000 bda5 	b.w	80095d0 <__malloc_unlock>
 8008a86:	42a3      	cmp	r3, r4
 8008a88:	d90b      	bls.n	8008aa2 <_free_r+0x4e>
 8008a8a:	6821      	ldr	r1, [r4, #0]
 8008a8c:	1862      	adds	r2, r4, r1
 8008a8e:	4293      	cmp	r3, r2
 8008a90:	bf04      	itt	eq
 8008a92:	681a      	ldreq	r2, [r3, #0]
 8008a94:	685b      	ldreq	r3, [r3, #4]
 8008a96:	6063      	str	r3, [r4, #4]
 8008a98:	bf04      	itt	eq
 8008a9a:	1852      	addeq	r2, r2, r1
 8008a9c:	6022      	streq	r2, [r4, #0]
 8008a9e:	602c      	str	r4, [r5, #0]
 8008aa0:	e7ec      	b.n	8008a7c <_free_r+0x28>
 8008aa2:	461a      	mov	r2, r3
 8008aa4:	685b      	ldr	r3, [r3, #4]
 8008aa6:	b10b      	cbz	r3, 8008aac <_free_r+0x58>
 8008aa8:	42a3      	cmp	r3, r4
 8008aaa:	d9fa      	bls.n	8008aa2 <_free_r+0x4e>
 8008aac:	6811      	ldr	r1, [r2, #0]
 8008aae:	1855      	adds	r5, r2, r1
 8008ab0:	42a5      	cmp	r5, r4
 8008ab2:	d10b      	bne.n	8008acc <_free_r+0x78>
 8008ab4:	6824      	ldr	r4, [r4, #0]
 8008ab6:	4421      	add	r1, r4
 8008ab8:	1854      	adds	r4, r2, r1
 8008aba:	42a3      	cmp	r3, r4
 8008abc:	6011      	str	r1, [r2, #0]
 8008abe:	d1dd      	bne.n	8008a7c <_free_r+0x28>
 8008ac0:	681c      	ldr	r4, [r3, #0]
 8008ac2:	685b      	ldr	r3, [r3, #4]
 8008ac4:	6053      	str	r3, [r2, #4]
 8008ac6:	4421      	add	r1, r4
 8008ac8:	6011      	str	r1, [r2, #0]
 8008aca:	e7d7      	b.n	8008a7c <_free_r+0x28>
 8008acc:	d902      	bls.n	8008ad4 <_free_r+0x80>
 8008ace:	230c      	movs	r3, #12
 8008ad0:	6003      	str	r3, [r0, #0]
 8008ad2:	e7d3      	b.n	8008a7c <_free_r+0x28>
 8008ad4:	6825      	ldr	r5, [r4, #0]
 8008ad6:	1961      	adds	r1, r4, r5
 8008ad8:	428b      	cmp	r3, r1
 8008ada:	bf04      	itt	eq
 8008adc:	6819      	ldreq	r1, [r3, #0]
 8008ade:	685b      	ldreq	r3, [r3, #4]
 8008ae0:	6063      	str	r3, [r4, #4]
 8008ae2:	bf04      	itt	eq
 8008ae4:	1949      	addeq	r1, r1, r5
 8008ae6:	6021      	streq	r1, [r4, #0]
 8008ae8:	6054      	str	r4, [r2, #4]
 8008aea:	e7c7      	b.n	8008a7c <_free_r+0x28>
 8008aec:	b003      	add	sp, #12
 8008aee:	bd30      	pop	{r4, r5, pc}
 8008af0:	200049a4 	.word	0x200049a4

08008af4 <_malloc_r>:
 8008af4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008af6:	1ccd      	adds	r5, r1, #3
 8008af8:	f025 0503 	bic.w	r5, r5, #3
 8008afc:	3508      	adds	r5, #8
 8008afe:	2d0c      	cmp	r5, #12
 8008b00:	bf38      	it	cc
 8008b02:	250c      	movcc	r5, #12
 8008b04:	2d00      	cmp	r5, #0
 8008b06:	4606      	mov	r6, r0
 8008b08:	db01      	blt.n	8008b0e <_malloc_r+0x1a>
 8008b0a:	42a9      	cmp	r1, r5
 8008b0c:	d903      	bls.n	8008b16 <_malloc_r+0x22>
 8008b0e:	230c      	movs	r3, #12
 8008b10:	6033      	str	r3, [r6, #0]
 8008b12:	2000      	movs	r0, #0
 8008b14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008b16:	f000 fd55 	bl	80095c4 <__malloc_lock>
 8008b1a:	4921      	ldr	r1, [pc, #132]	; (8008ba0 <_malloc_r+0xac>)
 8008b1c:	680a      	ldr	r2, [r1, #0]
 8008b1e:	4614      	mov	r4, r2
 8008b20:	b99c      	cbnz	r4, 8008b4a <_malloc_r+0x56>
 8008b22:	4f20      	ldr	r7, [pc, #128]	; (8008ba4 <_malloc_r+0xb0>)
 8008b24:	683b      	ldr	r3, [r7, #0]
 8008b26:	b923      	cbnz	r3, 8008b32 <_malloc_r+0x3e>
 8008b28:	4621      	mov	r1, r4
 8008b2a:	4630      	mov	r0, r6
 8008b2c:	f000 fc86 	bl	800943c <_sbrk_r>
 8008b30:	6038      	str	r0, [r7, #0]
 8008b32:	4629      	mov	r1, r5
 8008b34:	4630      	mov	r0, r6
 8008b36:	f000 fc81 	bl	800943c <_sbrk_r>
 8008b3a:	1c43      	adds	r3, r0, #1
 8008b3c:	d123      	bne.n	8008b86 <_malloc_r+0x92>
 8008b3e:	230c      	movs	r3, #12
 8008b40:	6033      	str	r3, [r6, #0]
 8008b42:	4630      	mov	r0, r6
 8008b44:	f000 fd44 	bl	80095d0 <__malloc_unlock>
 8008b48:	e7e3      	b.n	8008b12 <_malloc_r+0x1e>
 8008b4a:	6823      	ldr	r3, [r4, #0]
 8008b4c:	1b5b      	subs	r3, r3, r5
 8008b4e:	d417      	bmi.n	8008b80 <_malloc_r+0x8c>
 8008b50:	2b0b      	cmp	r3, #11
 8008b52:	d903      	bls.n	8008b5c <_malloc_r+0x68>
 8008b54:	6023      	str	r3, [r4, #0]
 8008b56:	441c      	add	r4, r3
 8008b58:	6025      	str	r5, [r4, #0]
 8008b5a:	e004      	b.n	8008b66 <_malloc_r+0x72>
 8008b5c:	6863      	ldr	r3, [r4, #4]
 8008b5e:	42a2      	cmp	r2, r4
 8008b60:	bf0c      	ite	eq
 8008b62:	600b      	streq	r3, [r1, #0]
 8008b64:	6053      	strne	r3, [r2, #4]
 8008b66:	4630      	mov	r0, r6
 8008b68:	f000 fd32 	bl	80095d0 <__malloc_unlock>
 8008b6c:	f104 000b 	add.w	r0, r4, #11
 8008b70:	1d23      	adds	r3, r4, #4
 8008b72:	f020 0007 	bic.w	r0, r0, #7
 8008b76:	1ac2      	subs	r2, r0, r3
 8008b78:	d0cc      	beq.n	8008b14 <_malloc_r+0x20>
 8008b7a:	1a1b      	subs	r3, r3, r0
 8008b7c:	50a3      	str	r3, [r4, r2]
 8008b7e:	e7c9      	b.n	8008b14 <_malloc_r+0x20>
 8008b80:	4622      	mov	r2, r4
 8008b82:	6864      	ldr	r4, [r4, #4]
 8008b84:	e7cc      	b.n	8008b20 <_malloc_r+0x2c>
 8008b86:	1cc4      	adds	r4, r0, #3
 8008b88:	f024 0403 	bic.w	r4, r4, #3
 8008b8c:	42a0      	cmp	r0, r4
 8008b8e:	d0e3      	beq.n	8008b58 <_malloc_r+0x64>
 8008b90:	1a21      	subs	r1, r4, r0
 8008b92:	4630      	mov	r0, r6
 8008b94:	f000 fc52 	bl	800943c <_sbrk_r>
 8008b98:	3001      	adds	r0, #1
 8008b9a:	d1dd      	bne.n	8008b58 <_malloc_r+0x64>
 8008b9c:	e7cf      	b.n	8008b3e <_malloc_r+0x4a>
 8008b9e:	bf00      	nop
 8008ba0:	200049a4 	.word	0x200049a4
 8008ba4:	200049a8 	.word	0x200049a8

08008ba8 <__ssputs_r>:
 8008ba8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008bac:	688e      	ldr	r6, [r1, #8]
 8008bae:	429e      	cmp	r6, r3
 8008bb0:	4682      	mov	sl, r0
 8008bb2:	460c      	mov	r4, r1
 8008bb4:	4690      	mov	r8, r2
 8008bb6:	461f      	mov	r7, r3
 8008bb8:	d838      	bhi.n	8008c2c <__ssputs_r+0x84>
 8008bba:	898a      	ldrh	r2, [r1, #12]
 8008bbc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008bc0:	d032      	beq.n	8008c28 <__ssputs_r+0x80>
 8008bc2:	6825      	ldr	r5, [r4, #0]
 8008bc4:	6909      	ldr	r1, [r1, #16]
 8008bc6:	eba5 0901 	sub.w	r9, r5, r1
 8008bca:	6965      	ldr	r5, [r4, #20]
 8008bcc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008bd0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008bd4:	3301      	adds	r3, #1
 8008bd6:	444b      	add	r3, r9
 8008bd8:	106d      	asrs	r5, r5, #1
 8008bda:	429d      	cmp	r5, r3
 8008bdc:	bf38      	it	cc
 8008bde:	461d      	movcc	r5, r3
 8008be0:	0553      	lsls	r3, r2, #21
 8008be2:	d531      	bpl.n	8008c48 <__ssputs_r+0xa0>
 8008be4:	4629      	mov	r1, r5
 8008be6:	f7ff ff85 	bl	8008af4 <_malloc_r>
 8008bea:	4606      	mov	r6, r0
 8008bec:	b950      	cbnz	r0, 8008c04 <__ssputs_r+0x5c>
 8008bee:	230c      	movs	r3, #12
 8008bf0:	f8ca 3000 	str.w	r3, [sl]
 8008bf4:	89a3      	ldrh	r3, [r4, #12]
 8008bf6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008bfa:	81a3      	strh	r3, [r4, #12]
 8008bfc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008c00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c04:	6921      	ldr	r1, [r4, #16]
 8008c06:	464a      	mov	r2, r9
 8008c08:	f7ff fb82 	bl	8008310 <memcpy>
 8008c0c:	89a3      	ldrh	r3, [r4, #12]
 8008c0e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008c12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c16:	81a3      	strh	r3, [r4, #12]
 8008c18:	6126      	str	r6, [r4, #16]
 8008c1a:	6165      	str	r5, [r4, #20]
 8008c1c:	444e      	add	r6, r9
 8008c1e:	eba5 0509 	sub.w	r5, r5, r9
 8008c22:	6026      	str	r6, [r4, #0]
 8008c24:	60a5      	str	r5, [r4, #8]
 8008c26:	463e      	mov	r6, r7
 8008c28:	42be      	cmp	r6, r7
 8008c2a:	d900      	bls.n	8008c2e <__ssputs_r+0x86>
 8008c2c:	463e      	mov	r6, r7
 8008c2e:	4632      	mov	r2, r6
 8008c30:	6820      	ldr	r0, [r4, #0]
 8008c32:	4641      	mov	r1, r8
 8008c34:	f000 fcac 	bl	8009590 <memmove>
 8008c38:	68a3      	ldr	r3, [r4, #8]
 8008c3a:	6822      	ldr	r2, [r4, #0]
 8008c3c:	1b9b      	subs	r3, r3, r6
 8008c3e:	4432      	add	r2, r6
 8008c40:	60a3      	str	r3, [r4, #8]
 8008c42:	6022      	str	r2, [r4, #0]
 8008c44:	2000      	movs	r0, #0
 8008c46:	e7db      	b.n	8008c00 <__ssputs_r+0x58>
 8008c48:	462a      	mov	r2, r5
 8008c4a:	f000 fcc7 	bl	80095dc <_realloc_r>
 8008c4e:	4606      	mov	r6, r0
 8008c50:	2800      	cmp	r0, #0
 8008c52:	d1e1      	bne.n	8008c18 <__ssputs_r+0x70>
 8008c54:	6921      	ldr	r1, [r4, #16]
 8008c56:	4650      	mov	r0, sl
 8008c58:	f7ff fefc 	bl	8008a54 <_free_r>
 8008c5c:	e7c7      	b.n	8008bee <__ssputs_r+0x46>
	...

08008c60 <_svfiprintf_r>:
 8008c60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c64:	4698      	mov	r8, r3
 8008c66:	898b      	ldrh	r3, [r1, #12]
 8008c68:	061b      	lsls	r3, r3, #24
 8008c6a:	b09d      	sub	sp, #116	; 0x74
 8008c6c:	4607      	mov	r7, r0
 8008c6e:	460d      	mov	r5, r1
 8008c70:	4614      	mov	r4, r2
 8008c72:	d50e      	bpl.n	8008c92 <_svfiprintf_r+0x32>
 8008c74:	690b      	ldr	r3, [r1, #16]
 8008c76:	b963      	cbnz	r3, 8008c92 <_svfiprintf_r+0x32>
 8008c78:	2140      	movs	r1, #64	; 0x40
 8008c7a:	f7ff ff3b 	bl	8008af4 <_malloc_r>
 8008c7e:	6028      	str	r0, [r5, #0]
 8008c80:	6128      	str	r0, [r5, #16]
 8008c82:	b920      	cbnz	r0, 8008c8e <_svfiprintf_r+0x2e>
 8008c84:	230c      	movs	r3, #12
 8008c86:	603b      	str	r3, [r7, #0]
 8008c88:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008c8c:	e0d1      	b.n	8008e32 <_svfiprintf_r+0x1d2>
 8008c8e:	2340      	movs	r3, #64	; 0x40
 8008c90:	616b      	str	r3, [r5, #20]
 8008c92:	2300      	movs	r3, #0
 8008c94:	9309      	str	r3, [sp, #36]	; 0x24
 8008c96:	2320      	movs	r3, #32
 8008c98:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008c9c:	f8cd 800c 	str.w	r8, [sp, #12]
 8008ca0:	2330      	movs	r3, #48	; 0x30
 8008ca2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008e4c <_svfiprintf_r+0x1ec>
 8008ca6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008caa:	f04f 0901 	mov.w	r9, #1
 8008cae:	4623      	mov	r3, r4
 8008cb0:	469a      	mov	sl, r3
 8008cb2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008cb6:	b10a      	cbz	r2, 8008cbc <_svfiprintf_r+0x5c>
 8008cb8:	2a25      	cmp	r2, #37	; 0x25
 8008cba:	d1f9      	bne.n	8008cb0 <_svfiprintf_r+0x50>
 8008cbc:	ebba 0b04 	subs.w	fp, sl, r4
 8008cc0:	d00b      	beq.n	8008cda <_svfiprintf_r+0x7a>
 8008cc2:	465b      	mov	r3, fp
 8008cc4:	4622      	mov	r2, r4
 8008cc6:	4629      	mov	r1, r5
 8008cc8:	4638      	mov	r0, r7
 8008cca:	f7ff ff6d 	bl	8008ba8 <__ssputs_r>
 8008cce:	3001      	adds	r0, #1
 8008cd0:	f000 80aa 	beq.w	8008e28 <_svfiprintf_r+0x1c8>
 8008cd4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008cd6:	445a      	add	r2, fp
 8008cd8:	9209      	str	r2, [sp, #36]	; 0x24
 8008cda:	f89a 3000 	ldrb.w	r3, [sl]
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	f000 80a2 	beq.w	8008e28 <_svfiprintf_r+0x1c8>
 8008ce4:	2300      	movs	r3, #0
 8008ce6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008cea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008cee:	f10a 0a01 	add.w	sl, sl, #1
 8008cf2:	9304      	str	r3, [sp, #16]
 8008cf4:	9307      	str	r3, [sp, #28]
 8008cf6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008cfa:	931a      	str	r3, [sp, #104]	; 0x68
 8008cfc:	4654      	mov	r4, sl
 8008cfe:	2205      	movs	r2, #5
 8008d00:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d04:	4851      	ldr	r0, [pc, #324]	; (8008e4c <_svfiprintf_r+0x1ec>)
 8008d06:	f7f7 fa63 	bl	80001d0 <memchr>
 8008d0a:	9a04      	ldr	r2, [sp, #16]
 8008d0c:	b9d8      	cbnz	r0, 8008d46 <_svfiprintf_r+0xe6>
 8008d0e:	06d0      	lsls	r0, r2, #27
 8008d10:	bf44      	itt	mi
 8008d12:	2320      	movmi	r3, #32
 8008d14:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008d18:	0711      	lsls	r1, r2, #28
 8008d1a:	bf44      	itt	mi
 8008d1c:	232b      	movmi	r3, #43	; 0x2b
 8008d1e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008d22:	f89a 3000 	ldrb.w	r3, [sl]
 8008d26:	2b2a      	cmp	r3, #42	; 0x2a
 8008d28:	d015      	beq.n	8008d56 <_svfiprintf_r+0xf6>
 8008d2a:	9a07      	ldr	r2, [sp, #28]
 8008d2c:	4654      	mov	r4, sl
 8008d2e:	2000      	movs	r0, #0
 8008d30:	f04f 0c0a 	mov.w	ip, #10
 8008d34:	4621      	mov	r1, r4
 8008d36:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008d3a:	3b30      	subs	r3, #48	; 0x30
 8008d3c:	2b09      	cmp	r3, #9
 8008d3e:	d94e      	bls.n	8008dde <_svfiprintf_r+0x17e>
 8008d40:	b1b0      	cbz	r0, 8008d70 <_svfiprintf_r+0x110>
 8008d42:	9207      	str	r2, [sp, #28]
 8008d44:	e014      	b.n	8008d70 <_svfiprintf_r+0x110>
 8008d46:	eba0 0308 	sub.w	r3, r0, r8
 8008d4a:	fa09 f303 	lsl.w	r3, r9, r3
 8008d4e:	4313      	orrs	r3, r2
 8008d50:	9304      	str	r3, [sp, #16]
 8008d52:	46a2      	mov	sl, r4
 8008d54:	e7d2      	b.n	8008cfc <_svfiprintf_r+0x9c>
 8008d56:	9b03      	ldr	r3, [sp, #12]
 8008d58:	1d19      	adds	r1, r3, #4
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	9103      	str	r1, [sp, #12]
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	bfbb      	ittet	lt
 8008d62:	425b      	neglt	r3, r3
 8008d64:	f042 0202 	orrlt.w	r2, r2, #2
 8008d68:	9307      	strge	r3, [sp, #28]
 8008d6a:	9307      	strlt	r3, [sp, #28]
 8008d6c:	bfb8      	it	lt
 8008d6e:	9204      	strlt	r2, [sp, #16]
 8008d70:	7823      	ldrb	r3, [r4, #0]
 8008d72:	2b2e      	cmp	r3, #46	; 0x2e
 8008d74:	d10c      	bne.n	8008d90 <_svfiprintf_r+0x130>
 8008d76:	7863      	ldrb	r3, [r4, #1]
 8008d78:	2b2a      	cmp	r3, #42	; 0x2a
 8008d7a:	d135      	bne.n	8008de8 <_svfiprintf_r+0x188>
 8008d7c:	9b03      	ldr	r3, [sp, #12]
 8008d7e:	1d1a      	adds	r2, r3, #4
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	9203      	str	r2, [sp, #12]
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	bfb8      	it	lt
 8008d88:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8008d8c:	3402      	adds	r4, #2
 8008d8e:	9305      	str	r3, [sp, #20]
 8008d90:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008e5c <_svfiprintf_r+0x1fc>
 8008d94:	7821      	ldrb	r1, [r4, #0]
 8008d96:	2203      	movs	r2, #3
 8008d98:	4650      	mov	r0, sl
 8008d9a:	f7f7 fa19 	bl	80001d0 <memchr>
 8008d9e:	b140      	cbz	r0, 8008db2 <_svfiprintf_r+0x152>
 8008da0:	2340      	movs	r3, #64	; 0x40
 8008da2:	eba0 000a 	sub.w	r0, r0, sl
 8008da6:	fa03 f000 	lsl.w	r0, r3, r0
 8008daa:	9b04      	ldr	r3, [sp, #16]
 8008dac:	4303      	orrs	r3, r0
 8008dae:	3401      	adds	r4, #1
 8008db0:	9304      	str	r3, [sp, #16]
 8008db2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008db6:	4826      	ldr	r0, [pc, #152]	; (8008e50 <_svfiprintf_r+0x1f0>)
 8008db8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008dbc:	2206      	movs	r2, #6
 8008dbe:	f7f7 fa07 	bl	80001d0 <memchr>
 8008dc2:	2800      	cmp	r0, #0
 8008dc4:	d038      	beq.n	8008e38 <_svfiprintf_r+0x1d8>
 8008dc6:	4b23      	ldr	r3, [pc, #140]	; (8008e54 <_svfiprintf_r+0x1f4>)
 8008dc8:	bb1b      	cbnz	r3, 8008e12 <_svfiprintf_r+0x1b2>
 8008dca:	9b03      	ldr	r3, [sp, #12]
 8008dcc:	3307      	adds	r3, #7
 8008dce:	f023 0307 	bic.w	r3, r3, #7
 8008dd2:	3308      	adds	r3, #8
 8008dd4:	9303      	str	r3, [sp, #12]
 8008dd6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008dd8:	4433      	add	r3, r6
 8008dda:	9309      	str	r3, [sp, #36]	; 0x24
 8008ddc:	e767      	b.n	8008cae <_svfiprintf_r+0x4e>
 8008dde:	fb0c 3202 	mla	r2, ip, r2, r3
 8008de2:	460c      	mov	r4, r1
 8008de4:	2001      	movs	r0, #1
 8008de6:	e7a5      	b.n	8008d34 <_svfiprintf_r+0xd4>
 8008de8:	2300      	movs	r3, #0
 8008dea:	3401      	adds	r4, #1
 8008dec:	9305      	str	r3, [sp, #20]
 8008dee:	4619      	mov	r1, r3
 8008df0:	f04f 0c0a 	mov.w	ip, #10
 8008df4:	4620      	mov	r0, r4
 8008df6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008dfa:	3a30      	subs	r2, #48	; 0x30
 8008dfc:	2a09      	cmp	r2, #9
 8008dfe:	d903      	bls.n	8008e08 <_svfiprintf_r+0x1a8>
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d0c5      	beq.n	8008d90 <_svfiprintf_r+0x130>
 8008e04:	9105      	str	r1, [sp, #20]
 8008e06:	e7c3      	b.n	8008d90 <_svfiprintf_r+0x130>
 8008e08:	fb0c 2101 	mla	r1, ip, r1, r2
 8008e0c:	4604      	mov	r4, r0
 8008e0e:	2301      	movs	r3, #1
 8008e10:	e7f0      	b.n	8008df4 <_svfiprintf_r+0x194>
 8008e12:	ab03      	add	r3, sp, #12
 8008e14:	9300      	str	r3, [sp, #0]
 8008e16:	462a      	mov	r2, r5
 8008e18:	4b0f      	ldr	r3, [pc, #60]	; (8008e58 <_svfiprintf_r+0x1f8>)
 8008e1a:	a904      	add	r1, sp, #16
 8008e1c:	4638      	mov	r0, r7
 8008e1e:	f3af 8000 	nop.w
 8008e22:	1c42      	adds	r2, r0, #1
 8008e24:	4606      	mov	r6, r0
 8008e26:	d1d6      	bne.n	8008dd6 <_svfiprintf_r+0x176>
 8008e28:	89ab      	ldrh	r3, [r5, #12]
 8008e2a:	065b      	lsls	r3, r3, #25
 8008e2c:	f53f af2c 	bmi.w	8008c88 <_svfiprintf_r+0x28>
 8008e30:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008e32:	b01d      	add	sp, #116	; 0x74
 8008e34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e38:	ab03      	add	r3, sp, #12
 8008e3a:	9300      	str	r3, [sp, #0]
 8008e3c:	462a      	mov	r2, r5
 8008e3e:	4b06      	ldr	r3, [pc, #24]	; (8008e58 <_svfiprintf_r+0x1f8>)
 8008e40:	a904      	add	r1, sp, #16
 8008e42:	4638      	mov	r0, r7
 8008e44:	f000 f9d4 	bl	80091f0 <_printf_i>
 8008e48:	e7eb      	b.n	8008e22 <_svfiprintf_r+0x1c2>
 8008e4a:	bf00      	nop
 8008e4c:	08009a2c 	.word	0x08009a2c
 8008e50:	08009a36 	.word	0x08009a36
 8008e54:	00000000 	.word	0x00000000
 8008e58:	08008ba9 	.word	0x08008ba9
 8008e5c:	08009a32 	.word	0x08009a32

08008e60 <__sfputc_r>:
 8008e60:	6893      	ldr	r3, [r2, #8]
 8008e62:	3b01      	subs	r3, #1
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	b410      	push	{r4}
 8008e68:	6093      	str	r3, [r2, #8]
 8008e6a:	da08      	bge.n	8008e7e <__sfputc_r+0x1e>
 8008e6c:	6994      	ldr	r4, [r2, #24]
 8008e6e:	42a3      	cmp	r3, r4
 8008e70:	db01      	blt.n	8008e76 <__sfputc_r+0x16>
 8008e72:	290a      	cmp	r1, #10
 8008e74:	d103      	bne.n	8008e7e <__sfputc_r+0x1e>
 8008e76:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008e7a:	f7ff bb0d 	b.w	8008498 <__swbuf_r>
 8008e7e:	6813      	ldr	r3, [r2, #0]
 8008e80:	1c58      	adds	r0, r3, #1
 8008e82:	6010      	str	r0, [r2, #0]
 8008e84:	7019      	strb	r1, [r3, #0]
 8008e86:	4608      	mov	r0, r1
 8008e88:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008e8c:	4770      	bx	lr

08008e8e <__sfputs_r>:
 8008e8e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e90:	4606      	mov	r6, r0
 8008e92:	460f      	mov	r7, r1
 8008e94:	4614      	mov	r4, r2
 8008e96:	18d5      	adds	r5, r2, r3
 8008e98:	42ac      	cmp	r4, r5
 8008e9a:	d101      	bne.n	8008ea0 <__sfputs_r+0x12>
 8008e9c:	2000      	movs	r0, #0
 8008e9e:	e007      	b.n	8008eb0 <__sfputs_r+0x22>
 8008ea0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ea4:	463a      	mov	r2, r7
 8008ea6:	4630      	mov	r0, r6
 8008ea8:	f7ff ffda 	bl	8008e60 <__sfputc_r>
 8008eac:	1c43      	adds	r3, r0, #1
 8008eae:	d1f3      	bne.n	8008e98 <__sfputs_r+0xa>
 8008eb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008eb4 <_vfiprintf_r>:
 8008eb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008eb8:	460d      	mov	r5, r1
 8008eba:	b09d      	sub	sp, #116	; 0x74
 8008ebc:	4614      	mov	r4, r2
 8008ebe:	4698      	mov	r8, r3
 8008ec0:	4606      	mov	r6, r0
 8008ec2:	b118      	cbz	r0, 8008ecc <_vfiprintf_r+0x18>
 8008ec4:	6983      	ldr	r3, [r0, #24]
 8008ec6:	b90b      	cbnz	r3, 8008ecc <_vfiprintf_r+0x18>
 8008ec8:	f7ff fcc0 	bl	800884c <__sinit>
 8008ecc:	4b89      	ldr	r3, [pc, #548]	; (80090f4 <_vfiprintf_r+0x240>)
 8008ece:	429d      	cmp	r5, r3
 8008ed0:	d11b      	bne.n	8008f0a <_vfiprintf_r+0x56>
 8008ed2:	6875      	ldr	r5, [r6, #4]
 8008ed4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008ed6:	07d9      	lsls	r1, r3, #31
 8008ed8:	d405      	bmi.n	8008ee6 <_vfiprintf_r+0x32>
 8008eda:	89ab      	ldrh	r3, [r5, #12]
 8008edc:	059a      	lsls	r2, r3, #22
 8008ede:	d402      	bmi.n	8008ee6 <_vfiprintf_r+0x32>
 8008ee0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008ee2:	f7ff fd51 	bl	8008988 <__retarget_lock_acquire_recursive>
 8008ee6:	89ab      	ldrh	r3, [r5, #12]
 8008ee8:	071b      	lsls	r3, r3, #28
 8008eea:	d501      	bpl.n	8008ef0 <_vfiprintf_r+0x3c>
 8008eec:	692b      	ldr	r3, [r5, #16]
 8008eee:	b9eb      	cbnz	r3, 8008f2c <_vfiprintf_r+0x78>
 8008ef0:	4629      	mov	r1, r5
 8008ef2:	4630      	mov	r0, r6
 8008ef4:	f7ff fb22 	bl	800853c <__swsetup_r>
 8008ef8:	b1c0      	cbz	r0, 8008f2c <_vfiprintf_r+0x78>
 8008efa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008efc:	07dc      	lsls	r4, r3, #31
 8008efe:	d50e      	bpl.n	8008f1e <_vfiprintf_r+0x6a>
 8008f00:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008f04:	b01d      	add	sp, #116	; 0x74
 8008f06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f0a:	4b7b      	ldr	r3, [pc, #492]	; (80090f8 <_vfiprintf_r+0x244>)
 8008f0c:	429d      	cmp	r5, r3
 8008f0e:	d101      	bne.n	8008f14 <_vfiprintf_r+0x60>
 8008f10:	68b5      	ldr	r5, [r6, #8]
 8008f12:	e7df      	b.n	8008ed4 <_vfiprintf_r+0x20>
 8008f14:	4b79      	ldr	r3, [pc, #484]	; (80090fc <_vfiprintf_r+0x248>)
 8008f16:	429d      	cmp	r5, r3
 8008f18:	bf08      	it	eq
 8008f1a:	68f5      	ldreq	r5, [r6, #12]
 8008f1c:	e7da      	b.n	8008ed4 <_vfiprintf_r+0x20>
 8008f1e:	89ab      	ldrh	r3, [r5, #12]
 8008f20:	0598      	lsls	r0, r3, #22
 8008f22:	d4ed      	bmi.n	8008f00 <_vfiprintf_r+0x4c>
 8008f24:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008f26:	f7ff fd30 	bl	800898a <__retarget_lock_release_recursive>
 8008f2a:	e7e9      	b.n	8008f00 <_vfiprintf_r+0x4c>
 8008f2c:	2300      	movs	r3, #0
 8008f2e:	9309      	str	r3, [sp, #36]	; 0x24
 8008f30:	2320      	movs	r3, #32
 8008f32:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008f36:	f8cd 800c 	str.w	r8, [sp, #12]
 8008f3a:	2330      	movs	r3, #48	; 0x30
 8008f3c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009100 <_vfiprintf_r+0x24c>
 8008f40:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008f44:	f04f 0901 	mov.w	r9, #1
 8008f48:	4623      	mov	r3, r4
 8008f4a:	469a      	mov	sl, r3
 8008f4c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008f50:	b10a      	cbz	r2, 8008f56 <_vfiprintf_r+0xa2>
 8008f52:	2a25      	cmp	r2, #37	; 0x25
 8008f54:	d1f9      	bne.n	8008f4a <_vfiprintf_r+0x96>
 8008f56:	ebba 0b04 	subs.w	fp, sl, r4
 8008f5a:	d00b      	beq.n	8008f74 <_vfiprintf_r+0xc0>
 8008f5c:	465b      	mov	r3, fp
 8008f5e:	4622      	mov	r2, r4
 8008f60:	4629      	mov	r1, r5
 8008f62:	4630      	mov	r0, r6
 8008f64:	f7ff ff93 	bl	8008e8e <__sfputs_r>
 8008f68:	3001      	adds	r0, #1
 8008f6a:	f000 80aa 	beq.w	80090c2 <_vfiprintf_r+0x20e>
 8008f6e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008f70:	445a      	add	r2, fp
 8008f72:	9209      	str	r2, [sp, #36]	; 0x24
 8008f74:	f89a 3000 	ldrb.w	r3, [sl]
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	f000 80a2 	beq.w	80090c2 <_vfiprintf_r+0x20e>
 8008f7e:	2300      	movs	r3, #0
 8008f80:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008f84:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008f88:	f10a 0a01 	add.w	sl, sl, #1
 8008f8c:	9304      	str	r3, [sp, #16]
 8008f8e:	9307      	str	r3, [sp, #28]
 8008f90:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008f94:	931a      	str	r3, [sp, #104]	; 0x68
 8008f96:	4654      	mov	r4, sl
 8008f98:	2205      	movs	r2, #5
 8008f9a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f9e:	4858      	ldr	r0, [pc, #352]	; (8009100 <_vfiprintf_r+0x24c>)
 8008fa0:	f7f7 f916 	bl	80001d0 <memchr>
 8008fa4:	9a04      	ldr	r2, [sp, #16]
 8008fa6:	b9d8      	cbnz	r0, 8008fe0 <_vfiprintf_r+0x12c>
 8008fa8:	06d1      	lsls	r1, r2, #27
 8008faa:	bf44      	itt	mi
 8008fac:	2320      	movmi	r3, #32
 8008fae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008fb2:	0713      	lsls	r3, r2, #28
 8008fb4:	bf44      	itt	mi
 8008fb6:	232b      	movmi	r3, #43	; 0x2b
 8008fb8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008fbc:	f89a 3000 	ldrb.w	r3, [sl]
 8008fc0:	2b2a      	cmp	r3, #42	; 0x2a
 8008fc2:	d015      	beq.n	8008ff0 <_vfiprintf_r+0x13c>
 8008fc4:	9a07      	ldr	r2, [sp, #28]
 8008fc6:	4654      	mov	r4, sl
 8008fc8:	2000      	movs	r0, #0
 8008fca:	f04f 0c0a 	mov.w	ip, #10
 8008fce:	4621      	mov	r1, r4
 8008fd0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008fd4:	3b30      	subs	r3, #48	; 0x30
 8008fd6:	2b09      	cmp	r3, #9
 8008fd8:	d94e      	bls.n	8009078 <_vfiprintf_r+0x1c4>
 8008fda:	b1b0      	cbz	r0, 800900a <_vfiprintf_r+0x156>
 8008fdc:	9207      	str	r2, [sp, #28]
 8008fde:	e014      	b.n	800900a <_vfiprintf_r+0x156>
 8008fe0:	eba0 0308 	sub.w	r3, r0, r8
 8008fe4:	fa09 f303 	lsl.w	r3, r9, r3
 8008fe8:	4313      	orrs	r3, r2
 8008fea:	9304      	str	r3, [sp, #16]
 8008fec:	46a2      	mov	sl, r4
 8008fee:	e7d2      	b.n	8008f96 <_vfiprintf_r+0xe2>
 8008ff0:	9b03      	ldr	r3, [sp, #12]
 8008ff2:	1d19      	adds	r1, r3, #4
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	9103      	str	r1, [sp, #12]
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	bfbb      	ittet	lt
 8008ffc:	425b      	neglt	r3, r3
 8008ffe:	f042 0202 	orrlt.w	r2, r2, #2
 8009002:	9307      	strge	r3, [sp, #28]
 8009004:	9307      	strlt	r3, [sp, #28]
 8009006:	bfb8      	it	lt
 8009008:	9204      	strlt	r2, [sp, #16]
 800900a:	7823      	ldrb	r3, [r4, #0]
 800900c:	2b2e      	cmp	r3, #46	; 0x2e
 800900e:	d10c      	bne.n	800902a <_vfiprintf_r+0x176>
 8009010:	7863      	ldrb	r3, [r4, #1]
 8009012:	2b2a      	cmp	r3, #42	; 0x2a
 8009014:	d135      	bne.n	8009082 <_vfiprintf_r+0x1ce>
 8009016:	9b03      	ldr	r3, [sp, #12]
 8009018:	1d1a      	adds	r2, r3, #4
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	9203      	str	r2, [sp, #12]
 800901e:	2b00      	cmp	r3, #0
 8009020:	bfb8      	it	lt
 8009022:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8009026:	3402      	adds	r4, #2
 8009028:	9305      	str	r3, [sp, #20]
 800902a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009110 <_vfiprintf_r+0x25c>
 800902e:	7821      	ldrb	r1, [r4, #0]
 8009030:	2203      	movs	r2, #3
 8009032:	4650      	mov	r0, sl
 8009034:	f7f7 f8cc 	bl	80001d0 <memchr>
 8009038:	b140      	cbz	r0, 800904c <_vfiprintf_r+0x198>
 800903a:	2340      	movs	r3, #64	; 0x40
 800903c:	eba0 000a 	sub.w	r0, r0, sl
 8009040:	fa03 f000 	lsl.w	r0, r3, r0
 8009044:	9b04      	ldr	r3, [sp, #16]
 8009046:	4303      	orrs	r3, r0
 8009048:	3401      	adds	r4, #1
 800904a:	9304      	str	r3, [sp, #16]
 800904c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009050:	482c      	ldr	r0, [pc, #176]	; (8009104 <_vfiprintf_r+0x250>)
 8009052:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009056:	2206      	movs	r2, #6
 8009058:	f7f7 f8ba 	bl	80001d0 <memchr>
 800905c:	2800      	cmp	r0, #0
 800905e:	d03f      	beq.n	80090e0 <_vfiprintf_r+0x22c>
 8009060:	4b29      	ldr	r3, [pc, #164]	; (8009108 <_vfiprintf_r+0x254>)
 8009062:	bb1b      	cbnz	r3, 80090ac <_vfiprintf_r+0x1f8>
 8009064:	9b03      	ldr	r3, [sp, #12]
 8009066:	3307      	adds	r3, #7
 8009068:	f023 0307 	bic.w	r3, r3, #7
 800906c:	3308      	adds	r3, #8
 800906e:	9303      	str	r3, [sp, #12]
 8009070:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009072:	443b      	add	r3, r7
 8009074:	9309      	str	r3, [sp, #36]	; 0x24
 8009076:	e767      	b.n	8008f48 <_vfiprintf_r+0x94>
 8009078:	fb0c 3202 	mla	r2, ip, r2, r3
 800907c:	460c      	mov	r4, r1
 800907e:	2001      	movs	r0, #1
 8009080:	e7a5      	b.n	8008fce <_vfiprintf_r+0x11a>
 8009082:	2300      	movs	r3, #0
 8009084:	3401      	adds	r4, #1
 8009086:	9305      	str	r3, [sp, #20]
 8009088:	4619      	mov	r1, r3
 800908a:	f04f 0c0a 	mov.w	ip, #10
 800908e:	4620      	mov	r0, r4
 8009090:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009094:	3a30      	subs	r2, #48	; 0x30
 8009096:	2a09      	cmp	r2, #9
 8009098:	d903      	bls.n	80090a2 <_vfiprintf_r+0x1ee>
 800909a:	2b00      	cmp	r3, #0
 800909c:	d0c5      	beq.n	800902a <_vfiprintf_r+0x176>
 800909e:	9105      	str	r1, [sp, #20]
 80090a0:	e7c3      	b.n	800902a <_vfiprintf_r+0x176>
 80090a2:	fb0c 2101 	mla	r1, ip, r1, r2
 80090a6:	4604      	mov	r4, r0
 80090a8:	2301      	movs	r3, #1
 80090aa:	e7f0      	b.n	800908e <_vfiprintf_r+0x1da>
 80090ac:	ab03      	add	r3, sp, #12
 80090ae:	9300      	str	r3, [sp, #0]
 80090b0:	462a      	mov	r2, r5
 80090b2:	4b16      	ldr	r3, [pc, #88]	; (800910c <_vfiprintf_r+0x258>)
 80090b4:	a904      	add	r1, sp, #16
 80090b6:	4630      	mov	r0, r6
 80090b8:	f3af 8000 	nop.w
 80090bc:	4607      	mov	r7, r0
 80090be:	1c78      	adds	r0, r7, #1
 80090c0:	d1d6      	bne.n	8009070 <_vfiprintf_r+0x1bc>
 80090c2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80090c4:	07d9      	lsls	r1, r3, #31
 80090c6:	d405      	bmi.n	80090d4 <_vfiprintf_r+0x220>
 80090c8:	89ab      	ldrh	r3, [r5, #12]
 80090ca:	059a      	lsls	r2, r3, #22
 80090cc:	d402      	bmi.n	80090d4 <_vfiprintf_r+0x220>
 80090ce:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80090d0:	f7ff fc5b 	bl	800898a <__retarget_lock_release_recursive>
 80090d4:	89ab      	ldrh	r3, [r5, #12]
 80090d6:	065b      	lsls	r3, r3, #25
 80090d8:	f53f af12 	bmi.w	8008f00 <_vfiprintf_r+0x4c>
 80090dc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80090de:	e711      	b.n	8008f04 <_vfiprintf_r+0x50>
 80090e0:	ab03      	add	r3, sp, #12
 80090e2:	9300      	str	r3, [sp, #0]
 80090e4:	462a      	mov	r2, r5
 80090e6:	4b09      	ldr	r3, [pc, #36]	; (800910c <_vfiprintf_r+0x258>)
 80090e8:	a904      	add	r1, sp, #16
 80090ea:	4630      	mov	r0, r6
 80090ec:	f000 f880 	bl	80091f0 <_printf_i>
 80090f0:	e7e4      	b.n	80090bc <_vfiprintf_r+0x208>
 80090f2:	bf00      	nop
 80090f4:	080099ec 	.word	0x080099ec
 80090f8:	08009a0c 	.word	0x08009a0c
 80090fc:	080099cc 	.word	0x080099cc
 8009100:	08009a2c 	.word	0x08009a2c
 8009104:	08009a36 	.word	0x08009a36
 8009108:	00000000 	.word	0x00000000
 800910c:	08008e8f 	.word	0x08008e8f
 8009110:	08009a32 	.word	0x08009a32

08009114 <_printf_common>:
 8009114:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009118:	4616      	mov	r6, r2
 800911a:	4699      	mov	r9, r3
 800911c:	688a      	ldr	r2, [r1, #8]
 800911e:	690b      	ldr	r3, [r1, #16]
 8009120:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009124:	4293      	cmp	r3, r2
 8009126:	bfb8      	it	lt
 8009128:	4613      	movlt	r3, r2
 800912a:	6033      	str	r3, [r6, #0]
 800912c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009130:	4607      	mov	r7, r0
 8009132:	460c      	mov	r4, r1
 8009134:	b10a      	cbz	r2, 800913a <_printf_common+0x26>
 8009136:	3301      	adds	r3, #1
 8009138:	6033      	str	r3, [r6, #0]
 800913a:	6823      	ldr	r3, [r4, #0]
 800913c:	0699      	lsls	r1, r3, #26
 800913e:	bf42      	ittt	mi
 8009140:	6833      	ldrmi	r3, [r6, #0]
 8009142:	3302      	addmi	r3, #2
 8009144:	6033      	strmi	r3, [r6, #0]
 8009146:	6825      	ldr	r5, [r4, #0]
 8009148:	f015 0506 	ands.w	r5, r5, #6
 800914c:	d106      	bne.n	800915c <_printf_common+0x48>
 800914e:	f104 0a19 	add.w	sl, r4, #25
 8009152:	68e3      	ldr	r3, [r4, #12]
 8009154:	6832      	ldr	r2, [r6, #0]
 8009156:	1a9b      	subs	r3, r3, r2
 8009158:	42ab      	cmp	r3, r5
 800915a:	dc26      	bgt.n	80091aa <_printf_common+0x96>
 800915c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009160:	1e13      	subs	r3, r2, #0
 8009162:	6822      	ldr	r2, [r4, #0]
 8009164:	bf18      	it	ne
 8009166:	2301      	movne	r3, #1
 8009168:	0692      	lsls	r2, r2, #26
 800916a:	d42b      	bmi.n	80091c4 <_printf_common+0xb0>
 800916c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009170:	4649      	mov	r1, r9
 8009172:	4638      	mov	r0, r7
 8009174:	47c0      	blx	r8
 8009176:	3001      	adds	r0, #1
 8009178:	d01e      	beq.n	80091b8 <_printf_common+0xa4>
 800917a:	6823      	ldr	r3, [r4, #0]
 800917c:	68e5      	ldr	r5, [r4, #12]
 800917e:	6832      	ldr	r2, [r6, #0]
 8009180:	f003 0306 	and.w	r3, r3, #6
 8009184:	2b04      	cmp	r3, #4
 8009186:	bf08      	it	eq
 8009188:	1aad      	subeq	r5, r5, r2
 800918a:	68a3      	ldr	r3, [r4, #8]
 800918c:	6922      	ldr	r2, [r4, #16]
 800918e:	bf0c      	ite	eq
 8009190:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009194:	2500      	movne	r5, #0
 8009196:	4293      	cmp	r3, r2
 8009198:	bfc4      	itt	gt
 800919a:	1a9b      	subgt	r3, r3, r2
 800919c:	18ed      	addgt	r5, r5, r3
 800919e:	2600      	movs	r6, #0
 80091a0:	341a      	adds	r4, #26
 80091a2:	42b5      	cmp	r5, r6
 80091a4:	d11a      	bne.n	80091dc <_printf_common+0xc8>
 80091a6:	2000      	movs	r0, #0
 80091a8:	e008      	b.n	80091bc <_printf_common+0xa8>
 80091aa:	2301      	movs	r3, #1
 80091ac:	4652      	mov	r2, sl
 80091ae:	4649      	mov	r1, r9
 80091b0:	4638      	mov	r0, r7
 80091b2:	47c0      	blx	r8
 80091b4:	3001      	adds	r0, #1
 80091b6:	d103      	bne.n	80091c0 <_printf_common+0xac>
 80091b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80091bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80091c0:	3501      	adds	r5, #1
 80091c2:	e7c6      	b.n	8009152 <_printf_common+0x3e>
 80091c4:	18e1      	adds	r1, r4, r3
 80091c6:	1c5a      	adds	r2, r3, #1
 80091c8:	2030      	movs	r0, #48	; 0x30
 80091ca:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80091ce:	4422      	add	r2, r4
 80091d0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80091d4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80091d8:	3302      	adds	r3, #2
 80091da:	e7c7      	b.n	800916c <_printf_common+0x58>
 80091dc:	2301      	movs	r3, #1
 80091de:	4622      	mov	r2, r4
 80091e0:	4649      	mov	r1, r9
 80091e2:	4638      	mov	r0, r7
 80091e4:	47c0      	blx	r8
 80091e6:	3001      	adds	r0, #1
 80091e8:	d0e6      	beq.n	80091b8 <_printf_common+0xa4>
 80091ea:	3601      	adds	r6, #1
 80091ec:	e7d9      	b.n	80091a2 <_printf_common+0x8e>
	...

080091f0 <_printf_i>:
 80091f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80091f4:	460c      	mov	r4, r1
 80091f6:	4691      	mov	r9, r2
 80091f8:	7e27      	ldrb	r7, [r4, #24]
 80091fa:	990c      	ldr	r1, [sp, #48]	; 0x30
 80091fc:	2f78      	cmp	r7, #120	; 0x78
 80091fe:	4680      	mov	r8, r0
 8009200:	469a      	mov	sl, r3
 8009202:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009206:	d807      	bhi.n	8009218 <_printf_i+0x28>
 8009208:	2f62      	cmp	r7, #98	; 0x62
 800920a:	d80a      	bhi.n	8009222 <_printf_i+0x32>
 800920c:	2f00      	cmp	r7, #0
 800920e:	f000 80d8 	beq.w	80093c2 <_printf_i+0x1d2>
 8009212:	2f58      	cmp	r7, #88	; 0x58
 8009214:	f000 80a3 	beq.w	800935e <_printf_i+0x16e>
 8009218:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800921c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009220:	e03a      	b.n	8009298 <_printf_i+0xa8>
 8009222:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009226:	2b15      	cmp	r3, #21
 8009228:	d8f6      	bhi.n	8009218 <_printf_i+0x28>
 800922a:	a001      	add	r0, pc, #4	; (adr r0, 8009230 <_printf_i+0x40>)
 800922c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8009230:	08009289 	.word	0x08009289
 8009234:	0800929d 	.word	0x0800929d
 8009238:	08009219 	.word	0x08009219
 800923c:	08009219 	.word	0x08009219
 8009240:	08009219 	.word	0x08009219
 8009244:	08009219 	.word	0x08009219
 8009248:	0800929d 	.word	0x0800929d
 800924c:	08009219 	.word	0x08009219
 8009250:	08009219 	.word	0x08009219
 8009254:	08009219 	.word	0x08009219
 8009258:	08009219 	.word	0x08009219
 800925c:	080093a9 	.word	0x080093a9
 8009260:	080092cd 	.word	0x080092cd
 8009264:	0800938b 	.word	0x0800938b
 8009268:	08009219 	.word	0x08009219
 800926c:	08009219 	.word	0x08009219
 8009270:	080093cb 	.word	0x080093cb
 8009274:	08009219 	.word	0x08009219
 8009278:	080092cd 	.word	0x080092cd
 800927c:	08009219 	.word	0x08009219
 8009280:	08009219 	.word	0x08009219
 8009284:	08009393 	.word	0x08009393
 8009288:	680b      	ldr	r3, [r1, #0]
 800928a:	1d1a      	adds	r2, r3, #4
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	600a      	str	r2, [r1, #0]
 8009290:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009294:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009298:	2301      	movs	r3, #1
 800929a:	e0a3      	b.n	80093e4 <_printf_i+0x1f4>
 800929c:	6825      	ldr	r5, [r4, #0]
 800929e:	6808      	ldr	r0, [r1, #0]
 80092a0:	062e      	lsls	r6, r5, #24
 80092a2:	f100 0304 	add.w	r3, r0, #4
 80092a6:	d50a      	bpl.n	80092be <_printf_i+0xce>
 80092a8:	6805      	ldr	r5, [r0, #0]
 80092aa:	600b      	str	r3, [r1, #0]
 80092ac:	2d00      	cmp	r5, #0
 80092ae:	da03      	bge.n	80092b8 <_printf_i+0xc8>
 80092b0:	232d      	movs	r3, #45	; 0x2d
 80092b2:	426d      	negs	r5, r5
 80092b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80092b8:	485e      	ldr	r0, [pc, #376]	; (8009434 <_printf_i+0x244>)
 80092ba:	230a      	movs	r3, #10
 80092bc:	e019      	b.n	80092f2 <_printf_i+0x102>
 80092be:	f015 0f40 	tst.w	r5, #64	; 0x40
 80092c2:	6805      	ldr	r5, [r0, #0]
 80092c4:	600b      	str	r3, [r1, #0]
 80092c6:	bf18      	it	ne
 80092c8:	b22d      	sxthne	r5, r5
 80092ca:	e7ef      	b.n	80092ac <_printf_i+0xbc>
 80092cc:	680b      	ldr	r3, [r1, #0]
 80092ce:	6825      	ldr	r5, [r4, #0]
 80092d0:	1d18      	adds	r0, r3, #4
 80092d2:	6008      	str	r0, [r1, #0]
 80092d4:	0628      	lsls	r0, r5, #24
 80092d6:	d501      	bpl.n	80092dc <_printf_i+0xec>
 80092d8:	681d      	ldr	r5, [r3, #0]
 80092da:	e002      	b.n	80092e2 <_printf_i+0xf2>
 80092dc:	0669      	lsls	r1, r5, #25
 80092de:	d5fb      	bpl.n	80092d8 <_printf_i+0xe8>
 80092e0:	881d      	ldrh	r5, [r3, #0]
 80092e2:	4854      	ldr	r0, [pc, #336]	; (8009434 <_printf_i+0x244>)
 80092e4:	2f6f      	cmp	r7, #111	; 0x6f
 80092e6:	bf0c      	ite	eq
 80092e8:	2308      	moveq	r3, #8
 80092ea:	230a      	movne	r3, #10
 80092ec:	2100      	movs	r1, #0
 80092ee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80092f2:	6866      	ldr	r6, [r4, #4]
 80092f4:	60a6      	str	r6, [r4, #8]
 80092f6:	2e00      	cmp	r6, #0
 80092f8:	bfa2      	ittt	ge
 80092fa:	6821      	ldrge	r1, [r4, #0]
 80092fc:	f021 0104 	bicge.w	r1, r1, #4
 8009300:	6021      	strge	r1, [r4, #0]
 8009302:	b90d      	cbnz	r5, 8009308 <_printf_i+0x118>
 8009304:	2e00      	cmp	r6, #0
 8009306:	d04d      	beq.n	80093a4 <_printf_i+0x1b4>
 8009308:	4616      	mov	r6, r2
 800930a:	fbb5 f1f3 	udiv	r1, r5, r3
 800930e:	fb03 5711 	mls	r7, r3, r1, r5
 8009312:	5dc7      	ldrb	r7, [r0, r7]
 8009314:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009318:	462f      	mov	r7, r5
 800931a:	42bb      	cmp	r3, r7
 800931c:	460d      	mov	r5, r1
 800931e:	d9f4      	bls.n	800930a <_printf_i+0x11a>
 8009320:	2b08      	cmp	r3, #8
 8009322:	d10b      	bne.n	800933c <_printf_i+0x14c>
 8009324:	6823      	ldr	r3, [r4, #0]
 8009326:	07df      	lsls	r7, r3, #31
 8009328:	d508      	bpl.n	800933c <_printf_i+0x14c>
 800932a:	6923      	ldr	r3, [r4, #16]
 800932c:	6861      	ldr	r1, [r4, #4]
 800932e:	4299      	cmp	r1, r3
 8009330:	bfde      	ittt	le
 8009332:	2330      	movle	r3, #48	; 0x30
 8009334:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009338:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 800933c:	1b92      	subs	r2, r2, r6
 800933e:	6122      	str	r2, [r4, #16]
 8009340:	f8cd a000 	str.w	sl, [sp]
 8009344:	464b      	mov	r3, r9
 8009346:	aa03      	add	r2, sp, #12
 8009348:	4621      	mov	r1, r4
 800934a:	4640      	mov	r0, r8
 800934c:	f7ff fee2 	bl	8009114 <_printf_common>
 8009350:	3001      	adds	r0, #1
 8009352:	d14c      	bne.n	80093ee <_printf_i+0x1fe>
 8009354:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009358:	b004      	add	sp, #16
 800935a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800935e:	4835      	ldr	r0, [pc, #212]	; (8009434 <_printf_i+0x244>)
 8009360:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009364:	6823      	ldr	r3, [r4, #0]
 8009366:	680e      	ldr	r6, [r1, #0]
 8009368:	061f      	lsls	r7, r3, #24
 800936a:	f856 5b04 	ldr.w	r5, [r6], #4
 800936e:	600e      	str	r6, [r1, #0]
 8009370:	d514      	bpl.n	800939c <_printf_i+0x1ac>
 8009372:	07d9      	lsls	r1, r3, #31
 8009374:	bf44      	itt	mi
 8009376:	f043 0320 	orrmi.w	r3, r3, #32
 800937a:	6023      	strmi	r3, [r4, #0]
 800937c:	b91d      	cbnz	r5, 8009386 <_printf_i+0x196>
 800937e:	6823      	ldr	r3, [r4, #0]
 8009380:	f023 0320 	bic.w	r3, r3, #32
 8009384:	6023      	str	r3, [r4, #0]
 8009386:	2310      	movs	r3, #16
 8009388:	e7b0      	b.n	80092ec <_printf_i+0xfc>
 800938a:	6823      	ldr	r3, [r4, #0]
 800938c:	f043 0320 	orr.w	r3, r3, #32
 8009390:	6023      	str	r3, [r4, #0]
 8009392:	2378      	movs	r3, #120	; 0x78
 8009394:	4828      	ldr	r0, [pc, #160]	; (8009438 <_printf_i+0x248>)
 8009396:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800939a:	e7e3      	b.n	8009364 <_printf_i+0x174>
 800939c:	065e      	lsls	r6, r3, #25
 800939e:	bf48      	it	mi
 80093a0:	b2ad      	uxthmi	r5, r5
 80093a2:	e7e6      	b.n	8009372 <_printf_i+0x182>
 80093a4:	4616      	mov	r6, r2
 80093a6:	e7bb      	b.n	8009320 <_printf_i+0x130>
 80093a8:	680b      	ldr	r3, [r1, #0]
 80093aa:	6826      	ldr	r6, [r4, #0]
 80093ac:	6960      	ldr	r0, [r4, #20]
 80093ae:	1d1d      	adds	r5, r3, #4
 80093b0:	600d      	str	r5, [r1, #0]
 80093b2:	0635      	lsls	r5, r6, #24
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	d501      	bpl.n	80093bc <_printf_i+0x1cc>
 80093b8:	6018      	str	r0, [r3, #0]
 80093ba:	e002      	b.n	80093c2 <_printf_i+0x1d2>
 80093bc:	0671      	lsls	r1, r6, #25
 80093be:	d5fb      	bpl.n	80093b8 <_printf_i+0x1c8>
 80093c0:	8018      	strh	r0, [r3, #0]
 80093c2:	2300      	movs	r3, #0
 80093c4:	6123      	str	r3, [r4, #16]
 80093c6:	4616      	mov	r6, r2
 80093c8:	e7ba      	b.n	8009340 <_printf_i+0x150>
 80093ca:	680b      	ldr	r3, [r1, #0]
 80093cc:	1d1a      	adds	r2, r3, #4
 80093ce:	600a      	str	r2, [r1, #0]
 80093d0:	681e      	ldr	r6, [r3, #0]
 80093d2:	6862      	ldr	r2, [r4, #4]
 80093d4:	2100      	movs	r1, #0
 80093d6:	4630      	mov	r0, r6
 80093d8:	f7f6 fefa 	bl	80001d0 <memchr>
 80093dc:	b108      	cbz	r0, 80093e2 <_printf_i+0x1f2>
 80093de:	1b80      	subs	r0, r0, r6
 80093e0:	6060      	str	r0, [r4, #4]
 80093e2:	6863      	ldr	r3, [r4, #4]
 80093e4:	6123      	str	r3, [r4, #16]
 80093e6:	2300      	movs	r3, #0
 80093e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80093ec:	e7a8      	b.n	8009340 <_printf_i+0x150>
 80093ee:	6923      	ldr	r3, [r4, #16]
 80093f0:	4632      	mov	r2, r6
 80093f2:	4649      	mov	r1, r9
 80093f4:	4640      	mov	r0, r8
 80093f6:	47d0      	blx	sl
 80093f8:	3001      	adds	r0, #1
 80093fa:	d0ab      	beq.n	8009354 <_printf_i+0x164>
 80093fc:	6823      	ldr	r3, [r4, #0]
 80093fe:	079b      	lsls	r3, r3, #30
 8009400:	d413      	bmi.n	800942a <_printf_i+0x23a>
 8009402:	68e0      	ldr	r0, [r4, #12]
 8009404:	9b03      	ldr	r3, [sp, #12]
 8009406:	4298      	cmp	r0, r3
 8009408:	bfb8      	it	lt
 800940a:	4618      	movlt	r0, r3
 800940c:	e7a4      	b.n	8009358 <_printf_i+0x168>
 800940e:	2301      	movs	r3, #1
 8009410:	4632      	mov	r2, r6
 8009412:	4649      	mov	r1, r9
 8009414:	4640      	mov	r0, r8
 8009416:	47d0      	blx	sl
 8009418:	3001      	adds	r0, #1
 800941a:	d09b      	beq.n	8009354 <_printf_i+0x164>
 800941c:	3501      	adds	r5, #1
 800941e:	68e3      	ldr	r3, [r4, #12]
 8009420:	9903      	ldr	r1, [sp, #12]
 8009422:	1a5b      	subs	r3, r3, r1
 8009424:	42ab      	cmp	r3, r5
 8009426:	dcf2      	bgt.n	800940e <_printf_i+0x21e>
 8009428:	e7eb      	b.n	8009402 <_printf_i+0x212>
 800942a:	2500      	movs	r5, #0
 800942c:	f104 0619 	add.w	r6, r4, #25
 8009430:	e7f5      	b.n	800941e <_printf_i+0x22e>
 8009432:	bf00      	nop
 8009434:	08009a3d 	.word	0x08009a3d
 8009438:	08009a4e 	.word	0x08009a4e

0800943c <_sbrk_r>:
 800943c:	b538      	push	{r3, r4, r5, lr}
 800943e:	4d06      	ldr	r5, [pc, #24]	; (8009458 <_sbrk_r+0x1c>)
 8009440:	2300      	movs	r3, #0
 8009442:	4604      	mov	r4, r0
 8009444:	4608      	mov	r0, r1
 8009446:	602b      	str	r3, [r5, #0]
 8009448:	f7f8 fa32 	bl	80018b0 <_sbrk>
 800944c:	1c43      	adds	r3, r0, #1
 800944e:	d102      	bne.n	8009456 <_sbrk_r+0x1a>
 8009450:	682b      	ldr	r3, [r5, #0]
 8009452:	b103      	cbz	r3, 8009456 <_sbrk_r+0x1a>
 8009454:	6023      	str	r3, [r4, #0]
 8009456:	bd38      	pop	{r3, r4, r5, pc}
 8009458:	20004c70 	.word	0x20004c70

0800945c <__sread>:
 800945c:	b510      	push	{r4, lr}
 800945e:	460c      	mov	r4, r1
 8009460:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009464:	f000 f8e0 	bl	8009628 <_read_r>
 8009468:	2800      	cmp	r0, #0
 800946a:	bfab      	itete	ge
 800946c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800946e:	89a3      	ldrhlt	r3, [r4, #12]
 8009470:	181b      	addge	r3, r3, r0
 8009472:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009476:	bfac      	ite	ge
 8009478:	6563      	strge	r3, [r4, #84]	; 0x54
 800947a:	81a3      	strhlt	r3, [r4, #12]
 800947c:	bd10      	pop	{r4, pc}

0800947e <__swrite>:
 800947e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009482:	461f      	mov	r7, r3
 8009484:	898b      	ldrh	r3, [r1, #12]
 8009486:	05db      	lsls	r3, r3, #23
 8009488:	4605      	mov	r5, r0
 800948a:	460c      	mov	r4, r1
 800948c:	4616      	mov	r6, r2
 800948e:	d505      	bpl.n	800949c <__swrite+0x1e>
 8009490:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009494:	2302      	movs	r3, #2
 8009496:	2200      	movs	r2, #0
 8009498:	f000 f868 	bl	800956c <_lseek_r>
 800949c:	89a3      	ldrh	r3, [r4, #12]
 800949e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80094a2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80094a6:	81a3      	strh	r3, [r4, #12]
 80094a8:	4632      	mov	r2, r6
 80094aa:	463b      	mov	r3, r7
 80094ac:	4628      	mov	r0, r5
 80094ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80094b2:	f000 b817 	b.w	80094e4 <_write_r>

080094b6 <__sseek>:
 80094b6:	b510      	push	{r4, lr}
 80094b8:	460c      	mov	r4, r1
 80094ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80094be:	f000 f855 	bl	800956c <_lseek_r>
 80094c2:	1c43      	adds	r3, r0, #1
 80094c4:	89a3      	ldrh	r3, [r4, #12]
 80094c6:	bf15      	itete	ne
 80094c8:	6560      	strne	r0, [r4, #84]	; 0x54
 80094ca:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80094ce:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80094d2:	81a3      	strheq	r3, [r4, #12]
 80094d4:	bf18      	it	ne
 80094d6:	81a3      	strhne	r3, [r4, #12]
 80094d8:	bd10      	pop	{r4, pc}

080094da <__sclose>:
 80094da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80094de:	f000 b813 	b.w	8009508 <_close_r>
	...

080094e4 <_write_r>:
 80094e4:	b538      	push	{r3, r4, r5, lr}
 80094e6:	4d07      	ldr	r5, [pc, #28]	; (8009504 <_write_r+0x20>)
 80094e8:	4604      	mov	r4, r0
 80094ea:	4608      	mov	r0, r1
 80094ec:	4611      	mov	r1, r2
 80094ee:	2200      	movs	r2, #0
 80094f0:	602a      	str	r2, [r5, #0]
 80094f2:	461a      	mov	r2, r3
 80094f4:	f7f8 f98b 	bl	800180e <_write>
 80094f8:	1c43      	adds	r3, r0, #1
 80094fa:	d102      	bne.n	8009502 <_write_r+0x1e>
 80094fc:	682b      	ldr	r3, [r5, #0]
 80094fe:	b103      	cbz	r3, 8009502 <_write_r+0x1e>
 8009500:	6023      	str	r3, [r4, #0]
 8009502:	bd38      	pop	{r3, r4, r5, pc}
 8009504:	20004c70 	.word	0x20004c70

08009508 <_close_r>:
 8009508:	b538      	push	{r3, r4, r5, lr}
 800950a:	4d06      	ldr	r5, [pc, #24]	; (8009524 <_close_r+0x1c>)
 800950c:	2300      	movs	r3, #0
 800950e:	4604      	mov	r4, r0
 8009510:	4608      	mov	r0, r1
 8009512:	602b      	str	r3, [r5, #0]
 8009514:	f7f8 f997 	bl	8001846 <_close>
 8009518:	1c43      	adds	r3, r0, #1
 800951a:	d102      	bne.n	8009522 <_close_r+0x1a>
 800951c:	682b      	ldr	r3, [r5, #0]
 800951e:	b103      	cbz	r3, 8009522 <_close_r+0x1a>
 8009520:	6023      	str	r3, [r4, #0]
 8009522:	bd38      	pop	{r3, r4, r5, pc}
 8009524:	20004c70 	.word	0x20004c70

08009528 <_fstat_r>:
 8009528:	b538      	push	{r3, r4, r5, lr}
 800952a:	4d07      	ldr	r5, [pc, #28]	; (8009548 <_fstat_r+0x20>)
 800952c:	2300      	movs	r3, #0
 800952e:	4604      	mov	r4, r0
 8009530:	4608      	mov	r0, r1
 8009532:	4611      	mov	r1, r2
 8009534:	602b      	str	r3, [r5, #0]
 8009536:	f7f8 f992 	bl	800185e <_fstat>
 800953a:	1c43      	adds	r3, r0, #1
 800953c:	d102      	bne.n	8009544 <_fstat_r+0x1c>
 800953e:	682b      	ldr	r3, [r5, #0]
 8009540:	b103      	cbz	r3, 8009544 <_fstat_r+0x1c>
 8009542:	6023      	str	r3, [r4, #0]
 8009544:	bd38      	pop	{r3, r4, r5, pc}
 8009546:	bf00      	nop
 8009548:	20004c70 	.word	0x20004c70

0800954c <_isatty_r>:
 800954c:	b538      	push	{r3, r4, r5, lr}
 800954e:	4d06      	ldr	r5, [pc, #24]	; (8009568 <_isatty_r+0x1c>)
 8009550:	2300      	movs	r3, #0
 8009552:	4604      	mov	r4, r0
 8009554:	4608      	mov	r0, r1
 8009556:	602b      	str	r3, [r5, #0]
 8009558:	f7f8 f991 	bl	800187e <_isatty>
 800955c:	1c43      	adds	r3, r0, #1
 800955e:	d102      	bne.n	8009566 <_isatty_r+0x1a>
 8009560:	682b      	ldr	r3, [r5, #0]
 8009562:	b103      	cbz	r3, 8009566 <_isatty_r+0x1a>
 8009564:	6023      	str	r3, [r4, #0]
 8009566:	bd38      	pop	{r3, r4, r5, pc}
 8009568:	20004c70 	.word	0x20004c70

0800956c <_lseek_r>:
 800956c:	b538      	push	{r3, r4, r5, lr}
 800956e:	4d07      	ldr	r5, [pc, #28]	; (800958c <_lseek_r+0x20>)
 8009570:	4604      	mov	r4, r0
 8009572:	4608      	mov	r0, r1
 8009574:	4611      	mov	r1, r2
 8009576:	2200      	movs	r2, #0
 8009578:	602a      	str	r2, [r5, #0]
 800957a:	461a      	mov	r2, r3
 800957c:	f7f8 f98a 	bl	8001894 <_lseek>
 8009580:	1c43      	adds	r3, r0, #1
 8009582:	d102      	bne.n	800958a <_lseek_r+0x1e>
 8009584:	682b      	ldr	r3, [r5, #0]
 8009586:	b103      	cbz	r3, 800958a <_lseek_r+0x1e>
 8009588:	6023      	str	r3, [r4, #0]
 800958a:	bd38      	pop	{r3, r4, r5, pc}
 800958c:	20004c70 	.word	0x20004c70

08009590 <memmove>:
 8009590:	4288      	cmp	r0, r1
 8009592:	b510      	push	{r4, lr}
 8009594:	eb01 0402 	add.w	r4, r1, r2
 8009598:	d902      	bls.n	80095a0 <memmove+0x10>
 800959a:	4284      	cmp	r4, r0
 800959c:	4623      	mov	r3, r4
 800959e:	d807      	bhi.n	80095b0 <memmove+0x20>
 80095a0:	1e43      	subs	r3, r0, #1
 80095a2:	42a1      	cmp	r1, r4
 80095a4:	d008      	beq.n	80095b8 <memmove+0x28>
 80095a6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80095aa:	f803 2f01 	strb.w	r2, [r3, #1]!
 80095ae:	e7f8      	b.n	80095a2 <memmove+0x12>
 80095b0:	4402      	add	r2, r0
 80095b2:	4601      	mov	r1, r0
 80095b4:	428a      	cmp	r2, r1
 80095b6:	d100      	bne.n	80095ba <memmove+0x2a>
 80095b8:	bd10      	pop	{r4, pc}
 80095ba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80095be:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80095c2:	e7f7      	b.n	80095b4 <memmove+0x24>

080095c4 <__malloc_lock>:
 80095c4:	4801      	ldr	r0, [pc, #4]	; (80095cc <__malloc_lock+0x8>)
 80095c6:	f7ff b9df 	b.w	8008988 <__retarget_lock_acquire_recursive>
 80095ca:	bf00      	nop
 80095cc:	20004c68 	.word	0x20004c68

080095d0 <__malloc_unlock>:
 80095d0:	4801      	ldr	r0, [pc, #4]	; (80095d8 <__malloc_unlock+0x8>)
 80095d2:	f7ff b9da 	b.w	800898a <__retarget_lock_release_recursive>
 80095d6:	bf00      	nop
 80095d8:	20004c68 	.word	0x20004c68

080095dc <_realloc_r>:
 80095dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095de:	4607      	mov	r7, r0
 80095e0:	4614      	mov	r4, r2
 80095e2:	460e      	mov	r6, r1
 80095e4:	b921      	cbnz	r1, 80095f0 <_realloc_r+0x14>
 80095e6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80095ea:	4611      	mov	r1, r2
 80095ec:	f7ff ba82 	b.w	8008af4 <_malloc_r>
 80095f0:	b922      	cbnz	r2, 80095fc <_realloc_r+0x20>
 80095f2:	f7ff fa2f 	bl	8008a54 <_free_r>
 80095f6:	4625      	mov	r5, r4
 80095f8:	4628      	mov	r0, r5
 80095fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80095fc:	f000 f826 	bl	800964c <_malloc_usable_size_r>
 8009600:	42a0      	cmp	r0, r4
 8009602:	d20f      	bcs.n	8009624 <_realloc_r+0x48>
 8009604:	4621      	mov	r1, r4
 8009606:	4638      	mov	r0, r7
 8009608:	f7ff fa74 	bl	8008af4 <_malloc_r>
 800960c:	4605      	mov	r5, r0
 800960e:	2800      	cmp	r0, #0
 8009610:	d0f2      	beq.n	80095f8 <_realloc_r+0x1c>
 8009612:	4631      	mov	r1, r6
 8009614:	4622      	mov	r2, r4
 8009616:	f7fe fe7b 	bl	8008310 <memcpy>
 800961a:	4631      	mov	r1, r6
 800961c:	4638      	mov	r0, r7
 800961e:	f7ff fa19 	bl	8008a54 <_free_r>
 8009622:	e7e9      	b.n	80095f8 <_realloc_r+0x1c>
 8009624:	4635      	mov	r5, r6
 8009626:	e7e7      	b.n	80095f8 <_realloc_r+0x1c>

08009628 <_read_r>:
 8009628:	b538      	push	{r3, r4, r5, lr}
 800962a:	4d07      	ldr	r5, [pc, #28]	; (8009648 <_read_r+0x20>)
 800962c:	4604      	mov	r4, r0
 800962e:	4608      	mov	r0, r1
 8009630:	4611      	mov	r1, r2
 8009632:	2200      	movs	r2, #0
 8009634:	602a      	str	r2, [r5, #0]
 8009636:	461a      	mov	r2, r3
 8009638:	f7f8 f8cc 	bl	80017d4 <_read>
 800963c:	1c43      	adds	r3, r0, #1
 800963e:	d102      	bne.n	8009646 <_read_r+0x1e>
 8009640:	682b      	ldr	r3, [r5, #0]
 8009642:	b103      	cbz	r3, 8009646 <_read_r+0x1e>
 8009644:	6023      	str	r3, [r4, #0]
 8009646:	bd38      	pop	{r3, r4, r5, pc}
 8009648:	20004c70 	.word	0x20004c70

0800964c <_malloc_usable_size_r>:
 800964c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009650:	1f18      	subs	r0, r3, #4
 8009652:	2b00      	cmp	r3, #0
 8009654:	bfbc      	itt	lt
 8009656:	580b      	ldrlt	r3, [r1, r0]
 8009658:	18c0      	addlt	r0, r0, r3
 800965a:	4770      	bx	lr

0800965c <_init>:
 800965c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800965e:	bf00      	nop
 8009660:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009662:	bc08      	pop	{r3}
 8009664:	469e      	mov	lr, r3
 8009666:	4770      	bx	lr

08009668 <_fini>:
 8009668:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800966a:	bf00      	nop
 800966c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800966e:	bc08      	pop	{r3}
 8009670:	469e      	mov	lr, r3
 8009672:	4770      	bx	lr
