
STM32F405RGTx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b724  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005f4  0800b8b4  0800b8b4  0001b8b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bea8  0800bea8  000200fc  2**0
                  CONTENTS
  4 .ARM          00000008  0800bea8  0800bea8  0001bea8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800beb0  0800beb0  000200fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800beb0  0800beb0  0001beb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800beb4  0800beb4  0001beb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000fc  20000000  0800beb8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005898  200000fc  0800bfb4  000200fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20005994  0800bfb4  00025994  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002e497  00000000  00000000  0002012c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005093  00000000  00000000  0004e5c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001b50  00000000  00000000  00053658  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001960  00000000  00000000  000551a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025ffb  00000000  00000000  00056b08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001fc07  00000000  00000000  0007cb03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dd3c3  00000000  00000000  0009c70a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00179acd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007bf8  00000000  00000000  00179b20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000fc 	.word	0x200000fc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b89c 	.word	0x0800b89c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000100 	.word	0x20000100
 80001cc:	0800b89c 	.word	0x0800b89c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_dmul>:
 8000280:	b570      	push	{r4, r5, r6, lr}
 8000282:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000286:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800028a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800028e:	bf1d      	ittte	ne
 8000290:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000294:	ea94 0f0c 	teqne	r4, ip
 8000298:	ea95 0f0c 	teqne	r5, ip
 800029c:	f000 f8de 	bleq	800045c <__aeabi_dmul+0x1dc>
 80002a0:	442c      	add	r4, r5
 80002a2:	ea81 0603 	eor.w	r6, r1, r3
 80002a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002b2:	bf18      	it	ne
 80002b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002c0:	d038      	beq.n	8000334 <__aeabi_dmul+0xb4>
 80002c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002c6:	f04f 0500 	mov.w	r5, #0
 80002ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80002d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002d6:	f04f 0600 	mov.w	r6, #0
 80002da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002de:	f09c 0f00 	teq	ip, #0
 80002e2:	bf18      	it	ne
 80002e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80002ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80002f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80002f4:	d204      	bcs.n	8000300 <__aeabi_dmul+0x80>
 80002f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002fa:	416d      	adcs	r5, r5
 80002fc:	eb46 0606 	adc.w	r6, r6, r6
 8000300:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000304:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000308:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800030c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000310:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000314:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000318:	bf88      	it	hi
 800031a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800031e:	d81e      	bhi.n	800035e <__aeabi_dmul+0xde>
 8000320:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	bd70      	pop	{r4, r5, r6, pc}
 8000334:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000338:	ea46 0101 	orr.w	r1, r6, r1
 800033c:	ea40 0002 	orr.w	r0, r0, r2
 8000340:	ea81 0103 	eor.w	r1, r1, r3
 8000344:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000348:	bfc2      	ittt	gt
 800034a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800034e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000352:	bd70      	popgt	{r4, r5, r6, pc}
 8000354:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000358:	f04f 0e00 	mov.w	lr, #0
 800035c:	3c01      	subs	r4, #1
 800035e:	f300 80ab 	bgt.w	80004b8 <__aeabi_dmul+0x238>
 8000362:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000366:	bfde      	ittt	le
 8000368:	2000      	movle	r0, #0
 800036a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800036e:	bd70      	pople	{r4, r5, r6, pc}
 8000370:	f1c4 0400 	rsb	r4, r4, #0
 8000374:	3c20      	subs	r4, #32
 8000376:	da35      	bge.n	80003e4 <__aeabi_dmul+0x164>
 8000378:	340c      	adds	r4, #12
 800037a:	dc1b      	bgt.n	80003b4 <__aeabi_dmul+0x134>
 800037c:	f104 0414 	add.w	r4, r4, #20
 8000380:	f1c4 0520 	rsb	r5, r4, #32
 8000384:	fa00 f305 	lsl.w	r3, r0, r5
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f205 	lsl.w	r2, r1, r5
 8000390:	ea40 0002 	orr.w	r0, r0, r2
 8000394:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000398:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800039c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003a0:	fa21 f604 	lsr.w	r6, r1, r4
 80003a4:	eb42 0106 	adc.w	r1, r2, r6
 80003a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ac:	bf08      	it	eq
 80003ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003b2:	bd70      	pop	{r4, r5, r6, pc}
 80003b4:	f1c4 040c 	rsb	r4, r4, #12
 80003b8:	f1c4 0520 	rsb	r5, r4, #32
 80003bc:	fa00 f304 	lsl.w	r3, r0, r4
 80003c0:	fa20 f005 	lsr.w	r0, r0, r5
 80003c4:	fa01 f204 	lsl.w	r2, r1, r4
 80003c8:	ea40 0002 	orr.w	r0, r0, r2
 80003cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003d4:	f141 0100 	adc.w	r1, r1, #0
 80003d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003dc:	bf08      	it	eq
 80003de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003e2:	bd70      	pop	{r4, r5, r6, pc}
 80003e4:	f1c4 0520 	rsb	r5, r4, #32
 80003e8:	fa00 f205 	lsl.w	r2, r0, r5
 80003ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80003f0:	fa20 f304 	lsr.w	r3, r0, r4
 80003f4:	fa01 f205 	lsl.w	r2, r1, r5
 80003f8:	ea43 0302 	orr.w	r3, r3, r2
 80003fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000400:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000404:	fa21 f204 	lsr.w	r2, r1, r4
 8000408:	ea20 0002 	bic.w	r0, r0, r2
 800040c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000410:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000414:	bf08      	it	eq
 8000416:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800041a:	bd70      	pop	{r4, r5, r6, pc}
 800041c:	f094 0f00 	teq	r4, #0
 8000420:	d10f      	bne.n	8000442 <__aeabi_dmul+0x1c2>
 8000422:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000426:	0040      	lsls	r0, r0, #1
 8000428:	eb41 0101 	adc.w	r1, r1, r1
 800042c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000430:	bf08      	it	eq
 8000432:	3c01      	subeq	r4, #1
 8000434:	d0f7      	beq.n	8000426 <__aeabi_dmul+0x1a6>
 8000436:	ea41 0106 	orr.w	r1, r1, r6
 800043a:	f095 0f00 	teq	r5, #0
 800043e:	bf18      	it	ne
 8000440:	4770      	bxne	lr
 8000442:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000446:	0052      	lsls	r2, r2, #1
 8000448:	eb43 0303 	adc.w	r3, r3, r3
 800044c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000450:	bf08      	it	eq
 8000452:	3d01      	subeq	r5, #1
 8000454:	d0f7      	beq.n	8000446 <__aeabi_dmul+0x1c6>
 8000456:	ea43 0306 	orr.w	r3, r3, r6
 800045a:	4770      	bx	lr
 800045c:	ea94 0f0c 	teq	r4, ip
 8000460:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000464:	bf18      	it	ne
 8000466:	ea95 0f0c 	teqne	r5, ip
 800046a:	d00c      	beq.n	8000486 <__aeabi_dmul+0x206>
 800046c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000470:	bf18      	it	ne
 8000472:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000476:	d1d1      	bne.n	800041c <__aeabi_dmul+0x19c>
 8000478:	ea81 0103 	eor.w	r1, r1, r3
 800047c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000480:	f04f 0000 	mov.w	r0, #0
 8000484:	bd70      	pop	{r4, r5, r6, pc}
 8000486:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800048a:	bf06      	itte	eq
 800048c:	4610      	moveq	r0, r2
 800048e:	4619      	moveq	r1, r3
 8000490:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000494:	d019      	beq.n	80004ca <__aeabi_dmul+0x24a>
 8000496:	ea94 0f0c 	teq	r4, ip
 800049a:	d102      	bne.n	80004a2 <__aeabi_dmul+0x222>
 800049c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004a0:	d113      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004a2:	ea95 0f0c 	teq	r5, ip
 80004a6:	d105      	bne.n	80004b4 <__aeabi_dmul+0x234>
 80004a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004ac:	bf1c      	itt	ne
 80004ae:	4610      	movne	r0, r2
 80004b0:	4619      	movne	r1, r3
 80004b2:	d10a      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004b4:	ea81 0103 	eor.w	r1, r1, r3
 80004b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd70      	pop	{r4, r5, r6, pc}
 80004ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80004d2:	bd70      	pop	{r4, r5, r6, pc}

080004d4 <__aeabi_drsub>:
 80004d4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e002      	b.n	80004e0 <__adddf3>
 80004da:	bf00      	nop

080004dc <__aeabi_dsub>:
 80004dc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080004e0 <__adddf3>:
 80004e0:	b530      	push	{r4, r5, lr}
 80004e2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004e6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004ea:	ea94 0f05 	teq	r4, r5
 80004ee:	bf08      	it	eq
 80004f0:	ea90 0f02 	teqeq	r0, r2
 80004f4:	bf1f      	itttt	ne
 80004f6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004fa:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004fe:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000502:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000506:	f000 80e2 	beq.w	80006ce <__adddf3+0x1ee>
 800050a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800050e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000512:	bfb8      	it	lt
 8000514:	426d      	neglt	r5, r5
 8000516:	dd0c      	ble.n	8000532 <__adddf3+0x52>
 8000518:	442c      	add	r4, r5
 800051a:	ea80 0202 	eor.w	r2, r0, r2
 800051e:	ea81 0303 	eor.w	r3, r1, r3
 8000522:	ea82 0000 	eor.w	r0, r2, r0
 8000526:	ea83 0101 	eor.w	r1, r3, r1
 800052a:	ea80 0202 	eor.w	r2, r0, r2
 800052e:	ea81 0303 	eor.w	r3, r1, r3
 8000532:	2d36      	cmp	r5, #54	; 0x36
 8000534:	bf88      	it	hi
 8000536:	bd30      	pophi	{r4, r5, pc}
 8000538:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800053c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000540:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000544:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000548:	d002      	beq.n	8000550 <__adddf3+0x70>
 800054a:	4240      	negs	r0, r0
 800054c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000550:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000554:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000558:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800055c:	d002      	beq.n	8000564 <__adddf3+0x84>
 800055e:	4252      	negs	r2, r2
 8000560:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000564:	ea94 0f05 	teq	r4, r5
 8000568:	f000 80a7 	beq.w	80006ba <__adddf3+0x1da>
 800056c:	f1a4 0401 	sub.w	r4, r4, #1
 8000570:	f1d5 0e20 	rsbs	lr, r5, #32
 8000574:	db0d      	blt.n	8000592 <__adddf3+0xb2>
 8000576:	fa02 fc0e 	lsl.w	ip, r2, lr
 800057a:	fa22 f205 	lsr.w	r2, r2, r5
 800057e:	1880      	adds	r0, r0, r2
 8000580:	f141 0100 	adc.w	r1, r1, #0
 8000584:	fa03 f20e 	lsl.w	r2, r3, lr
 8000588:	1880      	adds	r0, r0, r2
 800058a:	fa43 f305 	asr.w	r3, r3, r5
 800058e:	4159      	adcs	r1, r3
 8000590:	e00e      	b.n	80005b0 <__adddf3+0xd0>
 8000592:	f1a5 0520 	sub.w	r5, r5, #32
 8000596:	f10e 0e20 	add.w	lr, lr, #32
 800059a:	2a01      	cmp	r2, #1
 800059c:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005a0:	bf28      	it	cs
 80005a2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005a6:	fa43 f305 	asr.w	r3, r3, r5
 80005aa:	18c0      	adds	r0, r0, r3
 80005ac:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	d507      	bpl.n	80005c6 <__adddf3+0xe6>
 80005b6:	f04f 0e00 	mov.w	lr, #0
 80005ba:	f1dc 0c00 	rsbs	ip, ip, #0
 80005be:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005c2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005c6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005ca:	d31b      	bcc.n	8000604 <__adddf3+0x124>
 80005cc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80005d0:	d30c      	bcc.n	80005ec <__adddf3+0x10c>
 80005d2:	0849      	lsrs	r1, r1, #1
 80005d4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005d8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005dc:	f104 0401 	add.w	r4, r4, #1
 80005e0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005e4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80005e8:	f080 809a 	bcs.w	8000720 <__adddf3+0x240>
 80005ec:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80005f0:	bf08      	it	eq
 80005f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005f6:	f150 0000 	adcs.w	r0, r0, #0
 80005fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fe:	ea41 0105 	orr.w	r1, r1, r5
 8000602:	bd30      	pop	{r4, r5, pc}
 8000604:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000608:	4140      	adcs	r0, r0
 800060a:	eb41 0101 	adc.w	r1, r1, r1
 800060e:	3c01      	subs	r4, #1
 8000610:	bf28      	it	cs
 8000612:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000616:	d2e9      	bcs.n	80005ec <__adddf3+0x10c>
 8000618:	f091 0f00 	teq	r1, #0
 800061c:	bf04      	itt	eq
 800061e:	4601      	moveq	r1, r0
 8000620:	2000      	moveq	r0, #0
 8000622:	fab1 f381 	clz	r3, r1
 8000626:	bf08      	it	eq
 8000628:	3320      	addeq	r3, #32
 800062a:	f1a3 030b 	sub.w	r3, r3, #11
 800062e:	f1b3 0220 	subs.w	r2, r3, #32
 8000632:	da0c      	bge.n	800064e <__adddf3+0x16e>
 8000634:	320c      	adds	r2, #12
 8000636:	dd08      	ble.n	800064a <__adddf3+0x16a>
 8000638:	f102 0c14 	add.w	ip, r2, #20
 800063c:	f1c2 020c 	rsb	r2, r2, #12
 8000640:	fa01 f00c 	lsl.w	r0, r1, ip
 8000644:	fa21 f102 	lsr.w	r1, r1, r2
 8000648:	e00c      	b.n	8000664 <__adddf3+0x184>
 800064a:	f102 0214 	add.w	r2, r2, #20
 800064e:	bfd8      	it	le
 8000650:	f1c2 0c20 	rsble	ip, r2, #32
 8000654:	fa01 f102 	lsl.w	r1, r1, r2
 8000658:	fa20 fc0c 	lsr.w	ip, r0, ip
 800065c:	bfdc      	itt	le
 800065e:	ea41 010c 	orrle.w	r1, r1, ip
 8000662:	4090      	lslle	r0, r2
 8000664:	1ae4      	subs	r4, r4, r3
 8000666:	bfa2      	ittt	ge
 8000668:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800066c:	4329      	orrge	r1, r5
 800066e:	bd30      	popge	{r4, r5, pc}
 8000670:	ea6f 0404 	mvn.w	r4, r4
 8000674:	3c1f      	subs	r4, #31
 8000676:	da1c      	bge.n	80006b2 <__adddf3+0x1d2>
 8000678:	340c      	adds	r4, #12
 800067a:	dc0e      	bgt.n	800069a <__adddf3+0x1ba>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0220 	rsb	r2, r4, #32
 8000684:	fa20 f004 	lsr.w	r0, r0, r4
 8000688:	fa01 f302 	lsl.w	r3, r1, r2
 800068c:	ea40 0003 	orr.w	r0, r0, r3
 8000690:	fa21 f304 	lsr.w	r3, r1, r4
 8000694:	ea45 0103 	orr.w	r1, r5, r3
 8000698:	bd30      	pop	{r4, r5, pc}
 800069a:	f1c4 040c 	rsb	r4, r4, #12
 800069e:	f1c4 0220 	rsb	r2, r4, #32
 80006a2:	fa20 f002 	lsr.w	r0, r0, r2
 80006a6:	fa01 f304 	lsl.w	r3, r1, r4
 80006aa:	ea40 0003 	orr.w	r0, r0, r3
 80006ae:	4629      	mov	r1, r5
 80006b0:	bd30      	pop	{r4, r5, pc}
 80006b2:	fa21 f004 	lsr.w	r0, r1, r4
 80006b6:	4629      	mov	r1, r5
 80006b8:	bd30      	pop	{r4, r5, pc}
 80006ba:	f094 0f00 	teq	r4, #0
 80006be:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006c2:	bf06      	itte	eq
 80006c4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006c8:	3401      	addeq	r4, #1
 80006ca:	3d01      	subne	r5, #1
 80006cc:	e74e      	b.n	800056c <__adddf3+0x8c>
 80006ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006d2:	bf18      	it	ne
 80006d4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006d8:	d029      	beq.n	800072e <__adddf3+0x24e>
 80006da:	ea94 0f05 	teq	r4, r5
 80006de:	bf08      	it	eq
 80006e0:	ea90 0f02 	teqeq	r0, r2
 80006e4:	d005      	beq.n	80006f2 <__adddf3+0x212>
 80006e6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006ea:	bf04      	itt	eq
 80006ec:	4619      	moveq	r1, r3
 80006ee:	4610      	moveq	r0, r2
 80006f0:	bd30      	pop	{r4, r5, pc}
 80006f2:	ea91 0f03 	teq	r1, r3
 80006f6:	bf1e      	ittt	ne
 80006f8:	2100      	movne	r1, #0
 80006fa:	2000      	movne	r0, #0
 80006fc:	bd30      	popne	{r4, r5, pc}
 80006fe:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000702:	d105      	bne.n	8000710 <__adddf3+0x230>
 8000704:	0040      	lsls	r0, r0, #1
 8000706:	4149      	adcs	r1, r1
 8000708:	bf28      	it	cs
 800070a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800070e:	bd30      	pop	{r4, r5, pc}
 8000710:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000714:	bf3c      	itt	cc
 8000716:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800071a:	bd30      	popcc	{r4, r5, pc}
 800071c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000720:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000724:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000728:	f04f 0000 	mov.w	r0, #0
 800072c:	bd30      	pop	{r4, r5, pc}
 800072e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000732:	bf1a      	itte	ne
 8000734:	4619      	movne	r1, r3
 8000736:	4610      	movne	r0, r2
 8000738:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800073c:	bf1c      	itt	ne
 800073e:	460b      	movne	r3, r1
 8000740:	4602      	movne	r2, r0
 8000742:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000746:	bf06      	itte	eq
 8000748:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800074c:	ea91 0f03 	teqeq	r1, r3
 8000750:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000754:	bd30      	pop	{r4, r5, pc}
 8000756:	bf00      	nop

08000758 <__aeabi_ui2d>:
 8000758:	f090 0f00 	teq	r0, #0
 800075c:	bf04      	itt	eq
 800075e:	2100      	moveq	r1, #0
 8000760:	4770      	bxeq	lr
 8000762:	b530      	push	{r4, r5, lr}
 8000764:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000768:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800076c:	f04f 0500 	mov.w	r5, #0
 8000770:	f04f 0100 	mov.w	r1, #0
 8000774:	e750      	b.n	8000618 <__adddf3+0x138>
 8000776:	bf00      	nop

08000778 <__aeabi_i2d>:
 8000778:	f090 0f00 	teq	r0, #0
 800077c:	bf04      	itt	eq
 800077e:	2100      	moveq	r1, #0
 8000780:	4770      	bxeq	lr
 8000782:	b530      	push	{r4, r5, lr}
 8000784:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000788:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800078c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000790:	bf48      	it	mi
 8000792:	4240      	negmi	r0, r0
 8000794:	f04f 0100 	mov.w	r1, #0
 8000798:	e73e      	b.n	8000618 <__adddf3+0x138>
 800079a:	bf00      	nop

0800079c <__aeabi_f2d>:
 800079c:	0042      	lsls	r2, r0, #1
 800079e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007a2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007a6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007aa:	bf1f      	itttt	ne
 80007ac:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007b0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007b4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007b8:	4770      	bxne	lr
 80007ba:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007be:	bf08      	it	eq
 80007c0:	4770      	bxeq	lr
 80007c2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007c6:	bf04      	itt	eq
 80007c8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007cc:	4770      	bxeq	lr
 80007ce:	b530      	push	{r4, r5, lr}
 80007d0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80007d4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	e71c      	b.n	8000618 <__adddf3+0x138>
 80007de:	bf00      	nop

080007e0 <__aeabi_ul2d>:
 80007e0:	ea50 0201 	orrs.w	r2, r0, r1
 80007e4:	bf08      	it	eq
 80007e6:	4770      	bxeq	lr
 80007e8:	b530      	push	{r4, r5, lr}
 80007ea:	f04f 0500 	mov.w	r5, #0
 80007ee:	e00a      	b.n	8000806 <__aeabi_l2d+0x16>

080007f0 <__aeabi_l2d>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	b530      	push	{r4, r5, lr}
 80007fa:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80007fe:	d502      	bpl.n	8000806 <__aeabi_l2d+0x16>
 8000800:	4240      	negs	r0, r0
 8000802:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000806:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800080a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800080e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000812:	f43f aed8 	beq.w	80005c6 <__adddf3+0xe6>
 8000816:	f04f 0203 	mov.w	r2, #3
 800081a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800081e:	bf18      	it	ne
 8000820:	3203      	addne	r2, #3
 8000822:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000826:	bf18      	it	ne
 8000828:	3203      	addne	r2, #3
 800082a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800082e:	f1c2 0320 	rsb	r3, r2, #32
 8000832:	fa00 fc03 	lsl.w	ip, r0, r3
 8000836:	fa20 f002 	lsr.w	r0, r0, r2
 800083a:	fa01 fe03 	lsl.w	lr, r1, r3
 800083e:	ea40 000e 	orr.w	r0, r0, lr
 8000842:	fa21 f102 	lsr.w	r1, r1, r2
 8000846:	4414      	add	r4, r2
 8000848:	e6bd      	b.n	80005c6 <__adddf3+0xe6>
 800084a:	bf00      	nop

0800084c <__aeabi_d2f>:
 800084c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000850:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000854:	bf24      	itt	cs
 8000856:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800085a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800085e:	d90d      	bls.n	800087c <__aeabi_d2f+0x30>
 8000860:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000864:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000868:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800086c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000870:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000874:	bf08      	it	eq
 8000876:	f020 0001 	biceq.w	r0, r0, #1
 800087a:	4770      	bx	lr
 800087c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000880:	d121      	bne.n	80008c6 <__aeabi_d2f+0x7a>
 8000882:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000886:	bfbc      	itt	lt
 8000888:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800088c:	4770      	bxlt	lr
 800088e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000892:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000896:	f1c2 0218 	rsb	r2, r2, #24
 800089a:	f1c2 0c20 	rsb	ip, r2, #32
 800089e:	fa10 f30c 	lsls.w	r3, r0, ip
 80008a2:	fa20 f002 	lsr.w	r0, r0, r2
 80008a6:	bf18      	it	ne
 80008a8:	f040 0001 	orrne.w	r0, r0, #1
 80008ac:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80008b0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80008b4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80008b8:	ea40 000c 	orr.w	r0, r0, ip
 80008bc:	fa23 f302 	lsr.w	r3, r3, r2
 80008c0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80008c4:	e7cc      	b.n	8000860 <__aeabi_d2f+0x14>
 80008c6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80008ca:	d107      	bne.n	80008dc <__aeabi_d2f+0x90>
 80008cc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80008d0:	bf1e      	ittt	ne
 80008d2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80008d6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80008da:	4770      	bxne	lr
 80008dc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80008e0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80008e4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80008e8:	4770      	bx	lr
 80008ea:	bf00      	nop

080008ec <__aeabi_uldivmod>:
 80008ec:	b953      	cbnz	r3, 8000904 <__aeabi_uldivmod+0x18>
 80008ee:	b94a      	cbnz	r2, 8000904 <__aeabi_uldivmod+0x18>
 80008f0:	2900      	cmp	r1, #0
 80008f2:	bf08      	it	eq
 80008f4:	2800      	cmpeq	r0, #0
 80008f6:	bf1c      	itt	ne
 80008f8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80008fc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000900:	f000 b96e 	b.w	8000be0 <__aeabi_idiv0>
 8000904:	f1ad 0c08 	sub.w	ip, sp, #8
 8000908:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800090c:	f000 f806 	bl	800091c <__udivmoddi4>
 8000910:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000914:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000918:	b004      	add	sp, #16
 800091a:	4770      	bx	lr

0800091c <__udivmoddi4>:
 800091c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000920:	9d08      	ldr	r5, [sp, #32]
 8000922:	4604      	mov	r4, r0
 8000924:	468c      	mov	ip, r1
 8000926:	2b00      	cmp	r3, #0
 8000928:	f040 8083 	bne.w	8000a32 <__udivmoddi4+0x116>
 800092c:	428a      	cmp	r2, r1
 800092e:	4617      	mov	r7, r2
 8000930:	d947      	bls.n	80009c2 <__udivmoddi4+0xa6>
 8000932:	fab2 f282 	clz	r2, r2
 8000936:	b142      	cbz	r2, 800094a <__udivmoddi4+0x2e>
 8000938:	f1c2 0020 	rsb	r0, r2, #32
 800093c:	fa24 f000 	lsr.w	r0, r4, r0
 8000940:	4091      	lsls	r1, r2
 8000942:	4097      	lsls	r7, r2
 8000944:	ea40 0c01 	orr.w	ip, r0, r1
 8000948:	4094      	lsls	r4, r2
 800094a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800094e:	0c23      	lsrs	r3, r4, #16
 8000950:	fbbc f6f8 	udiv	r6, ip, r8
 8000954:	fa1f fe87 	uxth.w	lr, r7
 8000958:	fb08 c116 	mls	r1, r8, r6, ip
 800095c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000960:	fb06 f10e 	mul.w	r1, r6, lr
 8000964:	4299      	cmp	r1, r3
 8000966:	d909      	bls.n	800097c <__udivmoddi4+0x60>
 8000968:	18fb      	adds	r3, r7, r3
 800096a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800096e:	f080 8119 	bcs.w	8000ba4 <__udivmoddi4+0x288>
 8000972:	4299      	cmp	r1, r3
 8000974:	f240 8116 	bls.w	8000ba4 <__udivmoddi4+0x288>
 8000978:	3e02      	subs	r6, #2
 800097a:	443b      	add	r3, r7
 800097c:	1a5b      	subs	r3, r3, r1
 800097e:	b2a4      	uxth	r4, r4
 8000980:	fbb3 f0f8 	udiv	r0, r3, r8
 8000984:	fb08 3310 	mls	r3, r8, r0, r3
 8000988:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800098c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000990:	45a6      	cmp	lr, r4
 8000992:	d909      	bls.n	80009a8 <__udivmoddi4+0x8c>
 8000994:	193c      	adds	r4, r7, r4
 8000996:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800099a:	f080 8105 	bcs.w	8000ba8 <__udivmoddi4+0x28c>
 800099e:	45a6      	cmp	lr, r4
 80009a0:	f240 8102 	bls.w	8000ba8 <__udivmoddi4+0x28c>
 80009a4:	3802      	subs	r0, #2
 80009a6:	443c      	add	r4, r7
 80009a8:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80009ac:	eba4 040e 	sub.w	r4, r4, lr
 80009b0:	2600      	movs	r6, #0
 80009b2:	b11d      	cbz	r5, 80009bc <__udivmoddi4+0xa0>
 80009b4:	40d4      	lsrs	r4, r2
 80009b6:	2300      	movs	r3, #0
 80009b8:	e9c5 4300 	strd	r4, r3, [r5]
 80009bc:	4631      	mov	r1, r6
 80009be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009c2:	b902      	cbnz	r2, 80009c6 <__udivmoddi4+0xaa>
 80009c4:	deff      	udf	#255	; 0xff
 80009c6:	fab2 f282 	clz	r2, r2
 80009ca:	2a00      	cmp	r2, #0
 80009cc:	d150      	bne.n	8000a70 <__udivmoddi4+0x154>
 80009ce:	1bcb      	subs	r3, r1, r7
 80009d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80009d4:	fa1f f887 	uxth.w	r8, r7
 80009d8:	2601      	movs	r6, #1
 80009da:	fbb3 fcfe 	udiv	ip, r3, lr
 80009de:	0c21      	lsrs	r1, r4, #16
 80009e0:	fb0e 331c 	mls	r3, lr, ip, r3
 80009e4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80009e8:	fb08 f30c 	mul.w	r3, r8, ip
 80009ec:	428b      	cmp	r3, r1
 80009ee:	d907      	bls.n	8000a00 <__udivmoddi4+0xe4>
 80009f0:	1879      	adds	r1, r7, r1
 80009f2:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80009f6:	d202      	bcs.n	80009fe <__udivmoddi4+0xe2>
 80009f8:	428b      	cmp	r3, r1
 80009fa:	f200 80e9 	bhi.w	8000bd0 <__udivmoddi4+0x2b4>
 80009fe:	4684      	mov	ip, r0
 8000a00:	1ac9      	subs	r1, r1, r3
 8000a02:	b2a3      	uxth	r3, r4
 8000a04:	fbb1 f0fe 	udiv	r0, r1, lr
 8000a08:	fb0e 1110 	mls	r1, lr, r0, r1
 8000a0c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000a10:	fb08 f800 	mul.w	r8, r8, r0
 8000a14:	45a0      	cmp	r8, r4
 8000a16:	d907      	bls.n	8000a28 <__udivmoddi4+0x10c>
 8000a18:	193c      	adds	r4, r7, r4
 8000a1a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000a1e:	d202      	bcs.n	8000a26 <__udivmoddi4+0x10a>
 8000a20:	45a0      	cmp	r8, r4
 8000a22:	f200 80d9 	bhi.w	8000bd8 <__udivmoddi4+0x2bc>
 8000a26:	4618      	mov	r0, r3
 8000a28:	eba4 0408 	sub.w	r4, r4, r8
 8000a2c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000a30:	e7bf      	b.n	80009b2 <__udivmoddi4+0x96>
 8000a32:	428b      	cmp	r3, r1
 8000a34:	d909      	bls.n	8000a4a <__udivmoddi4+0x12e>
 8000a36:	2d00      	cmp	r5, #0
 8000a38:	f000 80b1 	beq.w	8000b9e <__udivmoddi4+0x282>
 8000a3c:	2600      	movs	r6, #0
 8000a3e:	e9c5 0100 	strd	r0, r1, [r5]
 8000a42:	4630      	mov	r0, r6
 8000a44:	4631      	mov	r1, r6
 8000a46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a4a:	fab3 f683 	clz	r6, r3
 8000a4e:	2e00      	cmp	r6, #0
 8000a50:	d14a      	bne.n	8000ae8 <__udivmoddi4+0x1cc>
 8000a52:	428b      	cmp	r3, r1
 8000a54:	d302      	bcc.n	8000a5c <__udivmoddi4+0x140>
 8000a56:	4282      	cmp	r2, r0
 8000a58:	f200 80b8 	bhi.w	8000bcc <__udivmoddi4+0x2b0>
 8000a5c:	1a84      	subs	r4, r0, r2
 8000a5e:	eb61 0103 	sbc.w	r1, r1, r3
 8000a62:	2001      	movs	r0, #1
 8000a64:	468c      	mov	ip, r1
 8000a66:	2d00      	cmp	r5, #0
 8000a68:	d0a8      	beq.n	80009bc <__udivmoddi4+0xa0>
 8000a6a:	e9c5 4c00 	strd	r4, ip, [r5]
 8000a6e:	e7a5      	b.n	80009bc <__udivmoddi4+0xa0>
 8000a70:	f1c2 0320 	rsb	r3, r2, #32
 8000a74:	fa20 f603 	lsr.w	r6, r0, r3
 8000a78:	4097      	lsls	r7, r2
 8000a7a:	fa01 f002 	lsl.w	r0, r1, r2
 8000a7e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000a82:	40d9      	lsrs	r1, r3
 8000a84:	4330      	orrs	r0, r6
 8000a86:	0c03      	lsrs	r3, r0, #16
 8000a88:	fbb1 f6fe 	udiv	r6, r1, lr
 8000a8c:	fa1f f887 	uxth.w	r8, r7
 8000a90:	fb0e 1116 	mls	r1, lr, r6, r1
 8000a94:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a98:	fb06 f108 	mul.w	r1, r6, r8
 8000a9c:	4299      	cmp	r1, r3
 8000a9e:	fa04 f402 	lsl.w	r4, r4, r2
 8000aa2:	d909      	bls.n	8000ab8 <__udivmoddi4+0x19c>
 8000aa4:	18fb      	adds	r3, r7, r3
 8000aa6:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000aaa:	f080 808d 	bcs.w	8000bc8 <__udivmoddi4+0x2ac>
 8000aae:	4299      	cmp	r1, r3
 8000ab0:	f240 808a 	bls.w	8000bc8 <__udivmoddi4+0x2ac>
 8000ab4:	3e02      	subs	r6, #2
 8000ab6:	443b      	add	r3, r7
 8000ab8:	1a5b      	subs	r3, r3, r1
 8000aba:	b281      	uxth	r1, r0
 8000abc:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ac0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ac4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ac8:	fb00 f308 	mul.w	r3, r0, r8
 8000acc:	428b      	cmp	r3, r1
 8000ace:	d907      	bls.n	8000ae0 <__udivmoddi4+0x1c4>
 8000ad0:	1879      	adds	r1, r7, r1
 8000ad2:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000ad6:	d273      	bcs.n	8000bc0 <__udivmoddi4+0x2a4>
 8000ad8:	428b      	cmp	r3, r1
 8000ada:	d971      	bls.n	8000bc0 <__udivmoddi4+0x2a4>
 8000adc:	3802      	subs	r0, #2
 8000ade:	4439      	add	r1, r7
 8000ae0:	1acb      	subs	r3, r1, r3
 8000ae2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000ae6:	e778      	b.n	80009da <__udivmoddi4+0xbe>
 8000ae8:	f1c6 0c20 	rsb	ip, r6, #32
 8000aec:	fa03 f406 	lsl.w	r4, r3, r6
 8000af0:	fa22 f30c 	lsr.w	r3, r2, ip
 8000af4:	431c      	orrs	r4, r3
 8000af6:	fa20 f70c 	lsr.w	r7, r0, ip
 8000afa:	fa01 f306 	lsl.w	r3, r1, r6
 8000afe:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000b02:	fa21 f10c 	lsr.w	r1, r1, ip
 8000b06:	431f      	orrs	r7, r3
 8000b08:	0c3b      	lsrs	r3, r7, #16
 8000b0a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000b0e:	fa1f f884 	uxth.w	r8, r4
 8000b12:	fb0e 1119 	mls	r1, lr, r9, r1
 8000b16:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000b1a:	fb09 fa08 	mul.w	sl, r9, r8
 8000b1e:	458a      	cmp	sl, r1
 8000b20:	fa02 f206 	lsl.w	r2, r2, r6
 8000b24:	fa00 f306 	lsl.w	r3, r0, r6
 8000b28:	d908      	bls.n	8000b3c <__udivmoddi4+0x220>
 8000b2a:	1861      	adds	r1, r4, r1
 8000b2c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000b30:	d248      	bcs.n	8000bc4 <__udivmoddi4+0x2a8>
 8000b32:	458a      	cmp	sl, r1
 8000b34:	d946      	bls.n	8000bc4 <__udivmoddi4+0x2a8>
 8000b36:	f1a9 0902 	sub.w	r9, r9, #2
 8000b3a:	4421      	add	r1, r4
 8000b3c:	eba1 010a 	sub.w	r1, r1, sl
 8000b40:	b2bf      	uxth	r7, r7
 8000b42:	fbb1 f0fe 	udiv	r0, r1, lr
 8000b46:	fb0e 1110 	mls	r1, lr, r0, r1
 8000b4a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000b4e:	fb00 f808 	mul.w	r8, r0, r8
 8000b52:	45b8      	cmp	r8, r7
 8000b54:	d907      	bls.n	8000b66 <__udivmoddi4+0x24a>
 8000b56:	19e7      	adds	r7, r4, r7
 8000b58:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000b5c:	d22e      	bcs.n	8000bbc <__udivmoddi4+0x2a0>
 8000b5e:	45b8      	cmp	r8, r7
 8000b60:	d92c      	bls.n	8000bbc <__udivmoddi4+0x2a0>
 8000b62:	3802      	subs	r0, #2
 8000b64:	4427      	add	r7, r4
 8000b66:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000b6a:	eba7 0708 	sub.w	r7, r7, r8
 8000b6e:	fba0 8902 	umull	r8, r9, r0, r2
 8000b72:	454f      	cmp	r7, r9
 8000b74:	46c6      	mov	lr, r8
 8000b76:	4649      	mov	r1, r9
 8000b78:	d31a      	bcc.n	8000bb0 <__udivmoddi4+0x294>
 8000b7a:	d017      	beq.n	8000bac <__udivmoddi4+0x290>
 8000b7c:	b15d      	cbz	r5, 8000b96 <__udivmoddi4+0x27a>
 8000b7e:	ebb3 020e 	subs.w	r2, r3, lr
 8000b82:	eb67 0701 	sbc.w	r7, r7, r1
 8000b86:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000b8a:	40f2      	lsrs	r2, r6
 8000b8c:	ea4c 0202 	orr.w	r2, ip, r2
 8000b90:	40f7      	lsrs	r7, r6
 8000b92:	e9c5 2700 	strd	r2, r7, [r5]
 8000b96:	2600      	movs	r6, #0
 8000b98:	4631      	mov	r1, r6
 8000b9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b9e:	462e      	mov	r6, r5
 8000ba0:	4628      	mov	r0, r5
 8000ba2:	e70b      	b.n	80009bc <__udivmoddi4+0xa0>
 8000ba4:	4606      	mov	r6, r0
 8000ba6:	e6e9      	b.n	800097c <__udivmoddi4+0x60>
 8000ba8:	4618      	mov	r0, r3
 8000baa:	e6fd      	b.n	80009a8 <__udivmoddi4+0x8c>
 8000bac:	4543      	cmp	r3, r8
 8000bae:	d2e5      	bcs.n	8000b7c <__udivmoddi4+0x260>
 8000bb0:	ebb8 0e02 	subs.w	lr, r8, r2
 8000bb4:	eb69 0104 	sbc.w	r1, r9, r4
 8000bb8:	3801      	subs	r0, #1
 8000bba:	e7df      	b.n	8000b7c <__udivmoddi4+0x260>
 8000bbc:	4608      	mov	r0, r1
 8000bbe:	e7d2      	b.n	8000b66 <__udivmoddi4+0x24a>
 8000bc0:	4660      	mov	r0, ip
 8000bc2:	e78d      	b.n	8000ae0 <__udivmoddi4+0x1c4>
 8000bc4:	4681      	mov	r9, r0
 8000bc6:	e7b9      	b.n	8000b3c <__udivmoddi4+0x220>
 8000bc8:	4666      	mov	r6, ip
 8000bca:	e775      	b.n	8000ab8 <__udivmoddi4+0x19c>
 8000bcc:	4630      	mov	r0, r6
 8000bce:	e74a      	b.n	8000a66 <__udivmoddi4+0x14a>
 8000bd0:	f1ac 0c02 	sub.w	ip, ip, #2
 8000bd4:	4439      	add	r1, r7
 8000bd6:	e713      	b.n	8000a00 <__udivmoddi4+0xe4>
 8000bd8:	3802      	subs	r0, #2
 8000bda:	443c      	add	r4, r7
 8000bdc:	e724      	b.n	8000a28 <__udivmoddi4+0x10c>
 8000bde:	bf00      	nop

08000be0 <__aeabi_idiv0>:
 8000be0:	4770      	bx	lr
 8000be2:	bf00      	nop

08000be4 <__io_putchar>:
#if BMS_DEBUG
#include "bms_tests.h"
#endif

// redirect stdin and stdout to UART1
void __io_putchar(uint8_t ch) {
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b082      	sub	sp, #8
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	4603      	mov	r3, r0
 8000bec:	71fb      	strb	r3, [r7, #7]
	HAL_UART_Transmit(&huart1, &ch, 1, 0xffff);
 8000bee:	1df9      	adds	r1, r7, #7
 8000bf0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000bf4:	2201      	movs	r2, #1
 8000bf6:	4803      	ldr	r0, [pc, #12]	; (8000c04 <__io_putchar+0x20>)
 8000bf8:	f005 ff45 	bl	8006a86 <HAL_UART_Transmit>
}
 8000bfc:	bf00      	nop
 8000bfe:	3708      	adds	r7, #8
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bd80      	pop	{r7, pc}
 8000c04:	20004d40 	.word	0x20004d40

08000c08 <__io_getchar>:
uint8_t __io_getchar() {
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b082      	sub	sp, #8
 8000c0c:	af00      	add	r7, sp, #0
	uint8_t ch;
	HAL_UART_Receive(&huart1, &ch, 1, 0xffff);
 8000c0e:	1df9      	adds	r1, r7, #7
 8000c10:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000c14:	2201      	movs	r2, #1
 8000c16:	4807      	ldr	r0, [pc, #28]	; (8000c34 <__io_getchar+0x2c>)
 8000c18:	f005 ffc7 	bl	8006baa <HAL_UART_Receive>
	HAL_UART_Transmit(&huart1, &ch, 1, 0xffff);
 8000c1c:	1df9      	adds	r1, r7, #7
 8000c1e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000c22:	2201      	movs	r2, #1
 8000c24:	4803      	ldr	r0, [pc, #12]	; (8000c34 <__io_getchar+0x2c>)
 8000c26:	f005 ff2e 	bl	8006a86 <HAL_UART_Transmit>
	return ch;
 8000c2a:	79fb      	ldrb	r3, [r7, #7]
}
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	3708      	adds	r7, #8
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bd80      	pop	{r7, pc}
 8000c34:	20004d40 	.word	0x20004d40

08000c38 <bms_entry>:

BMS global_bms_data;
Ltc6813 ltc6813;

int bms_entry() {	
 8000c38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c3a:	b0fb      	sub	sp, #492	; 0x1ec
 8000c3c:	af16      	add	r7, sp, #88	; 0x58
	printf("starting timers...\r\n");
 8000c3e:	482c      	ldr	r0, [pc, #176]	; (8000cf0 <bms_entry+0xb8>)
 8000c40:	f009 fd22 	bl	800a688 <puts>
	start_timers();	
 8000c44:	f001 faba 	bl	80021bc <start_timers>

	printf("initializing objects...\r\n");
 8000c48:	482a      	ldr	r0, [pc, #168]	; (8000cf4 <bms_entry+0xbc>)
 8000c4a:	f009 fd1d 	bl	800a688 <puts>
	ltc6813 = Ltc6813_init(hspi1, GPIOA, 4);
 8000c4e:	4e2a      	ldr	r6, [pc, #168]	; (8000cf8 <bms_entry+0xc0>)
 8000c50:	463d      	mov	r5, r7
 8000c52:	4c2a      	ldr	r4, [pc, #168]	; (8000cfc <bms_entry+0xc4>)
 8000c54:	2304      	movs	r3, #4
 8000c56:	9314      	str	r3, [sp, #80]	; 0x50
 8000c58:	4b29      	ldr	r3, [pc, #164]	; (8000d00 <bms_entry+0xc8>)
 8000c5a:	9313      	str	r3, [sp, #76]	; 0x4c
 8000c5c:	4668      	mov	r0, sp
 8000c5e:	f104 030c 	add.w	r3, r4, #12
 8000c62:	224c      	movs	r2, #76	; 0x4c
 8000c64:	4619      	mov	r1, r3
 8000c66:	f009 fc73 	bl	800a550 <memcpy>
 8000c6a:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8000c6e:	4628      	mov	r0, r5
 8000c70:	f000 f9b3 	bl	8000fda <Ltc6813_init>
 8000c74:	463b      	mov	r3, r7
 8000c76:	4630      	mov	r0, r6
 8000c78:	4619      	mov	r1, r3
 8000c7a:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000c7e:	461a      	mov	r2, r3
 8000c80:	f009 fc66 	bl	800a550 <memcpy>

	printf("initializing RTOS kernel...\r\n");
 8000c84:	481f      	ldr	r0, [pc, #124]	; (8000d04 <bms_entry+0xcc>)
 8000c86:	f009 fcff 	bl	800a688 <puts>
	osKernelInitialize();
 8000c8a:	f006 fa87 	bl	800719c <osKernelInitialize>

	printf("starting RTOS threads...\r\n");
 8000c8e:	481e      	ldr	r0, [pc, #120]	; (8000d08 <bms_entry+0xd0>)
 8000c90:	f009 fcfa 	bl	800a688 <puts>
	ext_led_blink_thread = osThreadNew(ext_led_blink_thread_fn, NULL, &ext_led_blink_thread_attrs);
 8000c94:	4a1d      	ldr	r2, [pc, #116]	; (8000d0c <bms_entry+0xd4>)
 8000c96:	2100      	movs	r1, #0
 8000c98:	481d      	ldr	r0, [pc, #116]	; (8000d10 <bms_entry+0xd8>)
 8000c9a:	f006 fb21 	bl	80072e0 <osThreadNew>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	4a1c      	ldr	r2, [pc, #112]	; (8000d14 <bms_entry+0xdc>)
 8000ca2:	6013      	str	r3, [r2, #0]
	measurements_thread = osThreadNew(measurements_thread_fn, NULL, &measurements_thread_attrs);
 8000ca4:	4a1c      	ldr	r2, [pc, #112]	; (8000d18 <bms_entry+0xe0>)
 8000ca6:	2100      	movs	r1, #0
 8000ca8:	481c      	ldr	r0, [pc, #112]	; (8000d1c <bms_entry+0xe4>)
 8000caa:	f006 fb19 	bl	80072e0 <osThreadNew>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	4a1b      	ldr	r2, [pc, #108]	; (8000d20 <bms_entry+0xe8>)
 8000cb2:	6013      	str	r3, [r2, #0]
	fsm_thread = osThreadNew(fsm_thread_fn, NULL, &fsm_thread_attrs);
 8000cb4:	4a1b      	ldr	r2, [pc, #108]	; (8000d24 <bms_entry+0xec>)
 8000cb6:	2100      	movs	r1, #0
 8000cb8:	481b      	ldr	r0, [pc, #108]	; (8000d28 <bms_entry+0xf0>)
 8000cba:	f006 fb11 	bl	80072e0 <osThreadNew>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	4a1a      	ldr	r2, [pc, #104]	; (8000d2c <bms_entry+0xf4>)
 8000cc2:	6013      	str	r3, [r2, #0]

	state_machine_thread = osThreadNew(StartStateMachine, NULL, &fsm_thread_attrs);
 8000cc4:	4a17      	ldr	r2, [pc, #92]	; (8000d24 <bms_entry+0xec>)
 8000cc6:	2100      	movs	r1, #0
 8000cc8:	4819      	ldr	r0, [pc, #100]	; (8000d30 <bms_entry+0xf8>)
 8000cca:	f006 fb09 	bl	80072e0 <osThreadNew>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	4a18      	ldr	r2, [pc, #96]	; (8000d34 <bms_entry+0xfc>)
 8000cd2:	6013      	str	r3, [r2, #0]

	printf("starting RTOS scheduler...\r\n");
 8000cd4:	4818      	ldr	r0, [pc, #96]	; (8000d38 <bms_entry+0x100>)
 8000cd6:	f009 fcd7 	bl	800a688 <puts>
	osKernelStart();
 8000cda:	f006 fa83 	bl	80071e4 <osKernelStart>

	// should never reach this point, since we have handed execution over to the RTOS
	Error_Handler();
 8000cde:	f000 fecb 	bl	8001a78 <Error_Handler>

	return 0;
 8000ce2:	2300      	movs	r3, #0
}
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	f507 77ca 	add.w	r7, r7, #404	; 0x194
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	0800b8b4 	.word	0x0800b8b4
 8000cf4:	0800b8c8 	.word	0x0800b8c8
 8000cf8:	20004b1c 	.word	0x20004b1c
 8000cfc:	20004e2c 	.word	0x20004e2c
 8000d00:	40020000 	.word	0x40020000
 8000d04:	0800b8e4 	.word	0x0800b8e4
 8000d08:	0800b904 	.word	0x0800b904
 8000d0c:	0800bd9c 	.word	0x0800bd9c
 8000d10:	08002205 	.word	0x08002205
 8000d14:	20004af0 	.word	0x20004af0
 8000d18:	0800bde4 	.word	0x0800bde4
 8000d1c:	080023c9 	.word	0x080023c9
 8000d20:	20004aec 	.word	0x20004aec
 8000d24:	0800bdc0 	.word	0x0800bdc0
 8000d28:	08002225 	.word	0x08002225
 8000d2c:	20004a3c 	.word	0x20004a3c
 8000d30:	08002685 	.word	0x08002685
 8000d34:	20004cac 	.word	0x20004cac
 8000d38:	0800b920 	.word	0x0800b920

08000d3c <Buffer_init>:
			- time for the chip's isoSPI tranceiver to transition into its IDLE state
*/

/////////////////////////////////////////////////////////////////////////////////////////////////////
// Buffer methods
Buffer Buffer_init() {
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b09c      	sub	sp, #112	; 0x70
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
	Buffer buffer = {};
 8000d44:	f107 0308 	add.w	r3, r7, #8
 8000d48:	2265      	movs	r2, #101	; 0x65
 8000d4a:	2100      	movs	r1, #0
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	f009 fc0d 	bl	800a56c <memset>
	buffer.len = 0;
 8000d52:	2300      	movs	r3, #0
 8000d54:	723b      	strb	r3, [r7, #8]
	return buffer;
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	4618      	mov	r0, r3
 8000d5a:	f107 0308 	add.w	r3, r7, #8
 8000d5e:	2265      	movs	r2, #101	; 0x65
 8000d60:	4619      	mov	r1, r3
 8000d62:	f009 fbf5 	bl	800a550 <memcpy>
}
 8000d66:	6878      	ldr	r0, [r7, #4]
 8000d68:	3770      	adds	r7, #112	; 0x70
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}

08000d6e <Buffer_append>:

void Buffer_append(Buffer* self, uint8_t val) {
 8000d6e:	b480      	push	{r7}
 8000d70:	b085      	sub	sp, #20
 8000d72:	af00      	add	r7, sp, #0
 8000d74:	6078      	str	r0, [r7, #4]
 8000d76:	460b      	mov	r3, r1
 8000d78:	70fb      	strb	r3, [r7, #3]
	uint8_t indx = self->len;
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	781b      	ldrb	r3, [r3, #0]
 8000d7e:	73fb      	strb	r3, [r7, #15]
	self->data[indx] = val;
 8000d80:	7bfb      	ldrb	r3, [r7, #15]
 8000d82:	687a      	ldr	r2, [r7, #4]
 8000d84:	4413      	add	r3, r2
 8000d86:	78fa      	ldrb	r2, [r7, #3]
 8000d88:	705a      	strb	r2, [r3, #1]
	self->len += 1;
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	781b      	ldrb	r3, [r3, #0]
 8000d8e:	3301      	adds	r3, #1
 8000d90:	b2da      	uxtb	r2, r3
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	701a      	strb	r2, [r3, #0]
}
 8000d96:	bf00      	nop
 8000d98:	3714      	adds	r7, #20
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da0:	4770      	bx	lr

08000da2 <Buffer_index>:

uint8_t Buffer_index(Buffer* self, uint8_t indx) {
 8000da2:	b580      	push	{r7, lr}
 8000da4:	b082      	sub	sp, #8
 8000da6:	af00      	add	r7, sp, #0
 8000da8:	6078      	str	r0, [r7, #4]
 8000daa:	460b      	mov	r3, r1
 8000dac:	70fb      	strb	r3, [r7, #3]
	if (indx >= self->len) { Error_Handler(); }
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	781b      	ldrb	r3, [r3, #0]
 8000db2:	78fa      	ldrb	r2, [r7, #3]
 8000db4:	429a      	cmp	r2, r3
 8000db6:	d301      	bcc.n	8000dbc <Buffer_index+0x1a>
 8000db8:	f000 fe5e 	bl	8001a78 <Error_Handler>
	return self->data[indx];
 8000dbc:	78fb      	ldrb	r3, [r7, #3]
 8000dbe:	687a      	ldr	r2, [r7, #4]
 8000dc0:	4413      	add	r3, r2
 8000dc2:	785b      	ldrb	r3, [r3, #1]
}
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	3708      	adds	r7, #8
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bd80      	pop	{r7, pc}

08000dcc <Buffer_set_index>:
void Buffer_set_index(Buffer* self, uint8_t indx, uint8_t val) {
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b082      	sub	sp, #8
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
 8000dd4:	460b      	mov	r3, r1
 8000dd6:	70fb      	strb	r3, [r7, #3]
 8000dd8:	4613      	mov	r3, r2
 8000dda:	70bb      	strb	r3, [r7, #2]
	if (indx >= self->len) { Error_Handler(); }
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	781b      	ldrb	r3, [r3, #0]
 8000de0:	78fa      	ldrb	r2, [r7, #3]
 8000de2:	429a      	cmp	r2, r3
 8000de4:	d301      	bcc.n	8000dea <Buffer_set_index+0x1e>
 8000de6:	f000 fe47 	bl	8001a78 <Error_Handler>
	self->data[indx] = val;
 8000dea:	78fb      	ldrb	r3, [r7, #3]
 8000dec:	687a      	ldr	r2, [r7, #4]
 8000dee:	4413      	add	r3, r2
 8000df0:	78ba      	ldrb	r2, [r7, #2]
 8000df2:	705a      	strb	r2, [r3, #1]
}
 8000df4:	bf00      	nop
 8000df6:	3708      	adds	r7, #8
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	bd80      	pop	{r7, pc}

08000dfc <Buffer_add_pec>:

void Buffer_add_pec(Buffer* self) {
 8000dfc:	b590      	push	{r4, r7, lr}
 8000dfe:	b085      	sub	sp, #20
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
	uint16_t remainder = 16;
 8000e04:	2310      	movs	r3, #16
 8000e06:	81fb      	strh	r3, [r7, #14]
	uint16_t addr = 0;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	817b      	strh	r3, [r7, #10]
	for (uint8_t i = 0; i < self->len; i++) {
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	737b      	strb	r3, [r7, #13]
 8000e10:	e01b      	b.n	8000e4a <Buffer_add_pec+0x4e>
		addr = ( (remainder >> 7)^Buffer_index(self, i) ) & 0xff;
 8000e12:	89fb      	ldrh	r3, [r7, #14]
 8000e14:	09db      	lsrs	r3, r3, #7
 8000e16:	b29c      	uxth	r4, r3
 8000e18:	7b7b      	ldrb	r3, [r7, #13]
 8000e1a:	4619      	mov	r1, r3
 8000e1c:	6878      	ldr	r0, [r7, #4]
 8000e1e:	f7ff ffc0 	bl	8000da2 <Buffer_index>
 8000e22:	4603      	mov	r3, r0
 8000e24:	b29b      	uxth	r3, r3
 8000e26:	4063      	eors	r3, r4
 8000e28:	b29b      	uxth	r3, r3
 8000e2a:	b2db      	uxtb	r3, r3
 8000e2c:	817b      	strh	r3, [r7, #10]
		remainder = (remainder << 8)^CRC15_LUT[addr];
 8000e2e:	89fb      	ldrh	r3, [r7, #14]
 8000e30:	021b      	lsls	r3, r3, #8
 8000e32:	b21a      	sxth	r2, r3
 8000e34:	897b      	ldrh	r3, [r7, #10]
 8000e36:	4912      	ldr	r1, [pc, #72]	; (8000e80 <Buffer_add_pec+0x84>)
 8000e38:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000e3c:	b21b      	sxth	r3, r3
 8000e3e:	4053      	eors	r3, r2
 8000e40:	b21b      	sxth	r3, r3
 8000e42:	81fb      	strh	r3, [r7, #14]
	for (uint8_t i = 0; i < self->len; i++) {
 8000e44:	7b7b      	ldrb	r3, [r7, #13]
 8000e46:	3301      	adds	r3, #1
 8000e48:	737b      	strb	r3, [r7, #13]
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	781b      	ldrb	r3, [r3, #0]
 8000e4e:	7b7a      	ldrb	r2, [r7, #13]
 8000e50:	429a      	cmp	r2, r3
 8000e52:	d3de      	bcc.n	8000e12 <Buffer_add_pec+0x16>
	}
	uint16_t pec = remainder*2;
 8000e54:	89fb      	ldrh	r3, [r7, #14]
 8000e56:	005b      	lsls	r3, r3, #1
 8000e58:	813b      	strh	r3, [r7, #8]
	Buffer_append(self, (pec >> 8) & 0xff);
 8000e5a:	893b      	ldrh	r3, [r7, #8]
 8000e5c:	0a1b      	lsrs	r3, r3, #8
 8000e5e:	b29b      	uxth	r3, r3
 8000e60:	b2db      	uxtb	r3, r3
 8000e62:	4619      	mov	r1, r3
 8000e64:	6878      	ldr	r0, [r7, #4]
 8000e66:	f7ff ff82 	bl	8000d6e <Buffer_append>
	Buffer_append(self, pec & 0xff);
 8000e6a:	893b      	ldrh	r3, [r7, #8]
 8000e6c:	b2db      	uxtb	r3, r3
 8000e6e:	4619      	mov	r1, r3
 8000e70:	6878      	ldr	r0, [r7, #4]
 8000e72:	f7ff ff7c 	bl	8000d6e <Buffer_append>
}
 8000e76:	bf00      	nop
 8000e78:	3714      	adds	r7, #20
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd90      	pop	{r4, r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	0800bb9c 	.word	0x0800bb9c

08000e84 <Buffer_check_pec>:

uint8_t Buffer_check_pec(Buffer* self) {
 8000e84:	b590      	push	{r4, r7, lr}
 8000e86:	b087      	sub	sp, #28
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
	uint16_t remainder = 16;
 8000e8c:	2310      	movs	r3, #16
 8000e8e:	82fb      	strh	r3, [r7, #22]
	uint16_t addr = 0;
 8000e90:	2300      	movs	r3, #0
 8000e92:	827b      	strh	r3, [r7, #18]
	for (uint8_t i = 0; i < self->len - 2; i++) {
 8000e94:	2300      	movs	r3, #0
 8000e96:	757b      	strb	r3, [r7, #21]
 8000e98:	e01b      	b.n	8000ed2 <Buffer_check_pec+0x4e>
		addr = ( (remainder >> 7)^Buffer_index(self, i) ) & 0xff;
 8000e9a:	8afb      	ldrh	r3, [r7, #22]
 8000e9c:	09db      	lsrs	r3, r3, #7
 8000e9e:	b29c      	uxth	r4, r3
 8000ea0:	7d7b      	ldrb	r3, [r7, #21]
 8000ea2:	4619      	mov	r1, r3
 8000ea4:	6878      	ldr	r0, [r7, #4]
 8000ea6:	f7ff ff7c 	bl	8000da2 <Buffer_index>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	b29b      	uxth	r3, r3
 8000eae:	4063      	eors	r3, r4
 8000eb0:	b29b      	uxth	r3, r3
 8000eb2:	b2db      	uxtb	r3, r3
 8000eb4:	827b      	strh	r3, [r7, #18]
		remainder = (remainder << 8)^CRC15_LUT[addr];
 8000eb6:	8afb      	ldrh	r3, [r7, #22]
 8000eb8:	021b      	lsls	r3, r3, #8
 8000eba:	b21a      	sxth	r2, r3
 8000ebc:	8a7b      	ldrh	r3, [r7, #18]
 8000ebe:	491b      	ldr	r1, [pc, #108]	; (8000f2c <Buffer_check_pec+0xa8>)
 8000ec0:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000ec4:	b21b      	sxth	r3, r3
 8000ec6:	4053      	eors	r3, r2
 8000ec8:	b21b      	sxth	r3, r3
 8000eca:	82fb      	strh	r3, [r7, #22]
	for (uint8_t i = 0; i < self->len - 2; i++) {
 8000ecc:	7d7b      	ldrb	r3, [r7, #21]
 8000ece:	3301      	adds	r3, #1
 8000ed0:	757b      	strb	r3, [r7, #21]
 8000ed2:	7d7a      	ldrb	r2, [r7, #21]
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	781b      	ldrb	r3, [r3, #0]
 8000ed8:	3b02      	subs	r3, #2
 8000eda:	429a      	cmp	r2, r3
 8000edc:	dbdd      	blt.n	8000e9a <Buffer_check_pec+0x16>
	}
	uint16_t calc_pec = remainder*2;
 8000ede:	8afb      	ldrh	r3, [r7, #22]
 8000ee0:	005b      	lsls	r3, r3, #1
 8000ee2:	823b      	strh	r3, [r7, #16]
	uint16_t act_pec = ((uint16_t)Buffer_index(self, self->len - 2) << 8) | Buffer_index(self, self->len - 1);
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	781b      	ldrb	r3, [r3, #0]
 8000ee8:	3b02      	subs	r3, #2
 8000eea:	b2db      	uxtb	r3, r3
 8000eec:	4619      	mov	r1, r3
 8000eee:	6878      	ldr	r0, [r7, #4]
 8000ef0:	f7ff ff57 	bl	8000da2 <Buffer_index>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	021b      	lsls	r3, r3, #8
 8000ef8:	b21c      	sxth	r4, r3
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	781b      	ldrb	r3, [r3, #0]
 8000efe:	3b01      	subs	r3, #1
 8000f00:	b2db      	uxtb	r3, r3
 8000f02:	4619      	mov	r1, r3
 8000f04:	6878      	ldr	r0, [r7, #4]
 8000f06:	f7ff ff4c 	bl	8000da2 <Buffer_index>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	b21b      	sxth	r3, r3
 8000f0e:	4323      	orrs	r3, r4
 8000f10:	b21b      	sxth	r3, r3
 8000f12:	81fb      	strh	r3, [r7, #14]
	return calc_pec == act_pec;
 8000f14:	8a3a      	ldrh	r2, [r7, #16]
 8000f16:	89fb      	ldrh	r3, [r7, #14]
 8000f18:	429a      	cmp	r2, r3
 8000f1a:	bf0c      	ite	eq
 8000f1c:	2301      	moveq	r3, #1
 8000f1e:	2300      	movne	r3, #0
 8000f20:	b2db      	uxtb	r3, r3
}
 8000f22:	4618      	mov	r0, r3
 8000f24:	371c      	adds	r7, #28
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd90      	pop	{r4, r7, pc}
 8000f2a:	bf00      	nop
 8000f2c:	0800bb9c 	.word	0x0800bb9c

08000f30 <Buffer_print>:

void Buffer_print(Buffer* self) {
 8000f30:	b590      	push	{r4, r7, lr}
 8000f32:	f5ad 7d01 	sub.w	sp, sp, #516	; 0x204
 8000f36:	af00      	add	r7, sp, #0
 8000f38:	1d3b      	adds	r3, r7, #4
 8000f3a:	6018      	str	r0, [r3, #0]
	char str[500];
	for (uint8_t i = 0; i < self->len; i++) {
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
 8000f42:	e019      	b.n	8000f78 <Buffer_print+0x48>
		sprintf(str, "pkt byte %d: %d\r\n", i, Buffer_index(self, i));
 8000f44:	f897 41ff 	ldrb.w	r4, [r7, #511]	; 0x1ff
 8000f48:	f897 21ff 	ldrb.w	r2, [r7, #511]	; 0x1ff
 8000f4c:	1d3b      	adds	r3, r7, #4
 8000f4e:	4611      	mov	r1, r2
 8000f50:	6818      	ldr	r0, [r3, #0]
 8000f52:	f7ff ff26 	bl	8000da2 <Buffer_index>
 8000f56:	4603      	mov	r3, r0
 8000f58:	f107 0008 	add.w	r0, r7, #8
 8000f5c:	4622      	mov	r2, r4
 8000f5e:	490e      	ldr	r1, [pc, #56]	; (8000f98 <Buffer_print+0x68>)
 8000f60:	f009 fb9a 	bl	800a698 <siprintf>
		printf(str);
 8000f64:	f107 0308 	add.w	r3, r7, #8
 8000f68:	4618      	mov	r0, r3
 8000f6a:	f009 fb07 	bl	800a57c <iprintf>
	for (uint8_t i = 0; i < self->len; i++) {
 8000f6e:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8000f72:	3301      	adds	r3, #1
 8000f74:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
 8000f78:	1d3b      	adds	r3, r7, #4
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	781b      	ldrb	r3, [r3, #0]
 8000f7e:	f897 21ff 	ldrb.w	r2, [r7, #511]	; 0x1ff
 8000f82:	429a      	cmp	r2, r3
 8000f84:	d3de      	bcc.n	8000f44 <Buffer_print+0x14>
	}
	printf("\r\n");
 8000f86:	4805      	ldr	r0, [pc, #20]	; (8000f9c <Buffer_print+0x6c>)
 8000f88:	f009 fb7e 	bl	800a688 <puts>
}
 8000f8c:	bf00      	nop
 8000f8e:	f507 7701 	add.w	r7, r7, #516	; 0x204
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd90      	pop	{r4, r7, pc}
 8000f96:	bf00      	nop
 8000f98:	0800b93c 	.word	0x0800b93c
 8000f9c:	0800b950 	.word	0x0800b950

08000fa0 <Buffer_clear>:

void Buffer_clear(Buffer* self) {
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b082      	sub	sp, #8
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
	while (self->len > 0) {
 8000fa8:	e00e      	b.n	8000fc8 <Buffer_clear+0x28>
		Buffer_set_index(self, self->len - 1, 0);
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	781b      	ldrb	r3, [r3, #0]
 8000fae:	3b01      	subs	r3, #1
 8000fb0:	b2db      	uxtb	r3, r3
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	4619      	mov	r1, r3
 8000fb6:	6878      	ldr	r0, [r7, #4]
 8000fb8:	f7ff ff08 	bl	8000dcc <Buffer_set_index>
		self->len = self->len - 1;
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	781b      	ldrb	r3, [r3, #0]
 8000fc0:	3b01      	subs	r3, #1
 8000fc2:	b2da      	uxtb	r2, r3
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	701a      	strb	r2, [r3, #0]
	while (self->len > 0) {
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	781b      	ldrb	r3, [r3, #0]
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d1ec      	bne.n	8000faa <Buffer_clear+0xa>
	}
}
 8000fd0:	bf00      	nop
 8000fd2:	bf00      	nop
 8000fd4:	3708      	adds	r7, #8
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}

08000fda <Ltc6813_init>:
/////////////////////////////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////////////////////////////
// Ltc6813 methods
Ltc6813 Ltc6813_init(SPI_HandleTypeDef spi, GPIO_TypeDef* cs_gpio_port, uint8_t cs_pin_num) {
 8000fda:	b084      	sub	sp, #16
 8000fdc:	b590      	push	{r4, r7, lr}
 8000fde:	f5ad 7d01 	sub.w	sp, sp, #516	; 0x204
 8000fe2:	af00      	add	r7, sp, #0
 8000fe4:	f107 046c 	add.w	r4, r7, #108	; 0x6c
 8000fe8:	6020      	str	r0, [r4, #0]
 8000fea:	f507 7005 	add.w	r0, r7, #532	; 0x214
 8000fee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	Ltc6813 slave_device = {};
 8000ff2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000ffc:	461a      	mov	r2, r3
 8000ffe:	2100      	movs	r1, #0
 8001000:	f009 fab4 	bl	800a56c <memset>
	slave_device._spi_interface = spi;
 8001004:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001008:	4618      	mov	r0, r3
 800100a:	f507 7305 	add.w	r3, r7, #532	; 0x214
 800100e:	2258      	movs	r2, #88	; 0x58
 8001010:	4619      	mov	r1, r3
 8001012:	f009 fa9d 	bl	800a550 <memcpy>

	// config CS pin as GPIO output
	cs_gpio_port->MODER &= ~(0b11u << (cs_pin_num*2));
 8001016:	f8d7 326c 	ldr.w	r3, [r7, #620]	; 0x26c
 800101a:	681a      	ldr	r2, [r3, #0]
 800101c:	f897 3270 	ldrb.w	r3, [r7, #624]	; 0x270
 8001020:	005b      	lsls	r3, r3, #1
 8001022:	2103      	movs	r1, #3
 8001024:	fa01 f303 	lsl.w	r3, r1, r3
 8001028:	43db      	mvns	r3, r3
 800102a:	401a      	ands	r2, r3
 800102c:	f8d7 326c 	ldr.w	r3, [r7, #620]	; 0x26c
 8001030:	601a      	str	r2, [r3, #0]
	cs_gpio_port->MODER |= (0b01u << (cs_pin_num*2));
 8001032:	f8d7 326c 	ldr.w	r3, [r7, #620]	; 0x26c
 8001036:	681a      	ldr	r2, [r3, #0]
 8001038:	f897 3270 	ldrb.w	r3, [r7, #624]	; 0x270
 800103c:	005b      	lsls	r3, r3, #1
 800103e:	2101      	movs	r1, #1
 8001040:	fa01 f303 	lsl.w	r3, r1, r3
 8001044:	431a      	orrs	r2, r3
 8001046:	f8d7 326c 	ldr.w	r3, [r7, #620]	; 0x26c
 800104a:	601a      	str	r2, [r3, #0]

	slave_device._cs_gpio_port = cs_gpio_port;
 800104c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001050:	f8d7 226c 	ldr.w	r2, [r7, #620]	; 0x26c
 8001054:	659a      	str	r2, [r3, #88]	; 0x58
	slave_device._cs_pin_num = cs_pin_num;
 8001056:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800105a:	f897 2270 	ldrb.w	r2, [r7, #624]	; 0x270
 800105e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

	slave_device.cmd_bfr = Buffer_init();
 8001062:	f107 0470 	add.w	r4, r7, #112	; 0x70
 8001066:	463b      	mov	r3, r7
 8001068:	4618      	mov	r0, r3
 800106a:	f7ff fe67 	bl	8000d3c <Buffer_init>
 800106e:	463a      	mov	r2, r7
 8001070:	f104 035d 	add.w	r3, r4, #93	; 0x5d
 8001074:	4611      	mov	r1, r2
 8001076:	2265      	movs	r2, #101	; 0x65
 8001078:	4618      	mov	r0, r3
 800107a:	f009 fa69 	bl	800a550 <memcpy>

	slave_device.cfga_bfr = Buffer_init();
 800107e:	f107 0470 	add.w	r4, r7, #112	; 0x70
 8001082:	463b      	mov	r3, r7
 8001084:	4618      	mov	r0, r3
 8001086:	f7ff fe59 	bl	8000d3c <Buffer_init>
 800108a:	463a      	mov	r2, r7
 800108c:	f104 03c2 	add.w	r3, r4, #194	; 0xc2
 8001090:	4611      	mov	r1, r2
 8001092:	2265      	movs	r2, #101	; 0x65
 8001094:	4618      	mov	r0, r3
 8001096:	f009 fa5b 	bl	800a550 <memcpy>
	slave_device.cfgb_bfr = Buffer_init();
 800109a:	f107 0470 	add.w	r4, r7, #112	; 0x70
 800109e:	463b      	mov	r3, r7
 80010a0:	4618      	mov	r0, r3
 80010a2:	f7ff fe4b 	bl	8000d3c <Buffer_init>
 80010a6:	463a      	mov	r2, r7
 80010a8:	f204 1327 	addw	r3, r4, #295	; 0x127
 80010ac:	4611      	mov	r1, r2
 80010ae:	2265      	movs	r2, #101	; 0x65
 80010b0:	4618      	mov	r0, r3
 80010b2:	f009 fa4d 	bl	800a550 <memcpy>

	slave_device.timeout = 10000;
 80010b6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80010ba:	f242 7210 	movw	r2, #10000	; 0x2710
 80010be:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c

	Ltc6813_cs_high(&slave_device);
 80010c2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80010c6:	4618      	mov	r0, r3
 80010c8:	f000 f82b 	bl	8001122 <Ltc6813_cs_high>

	return slave_device;
 80010cc:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80010d0:	681a      	ldr	r2, [r3, #0]
 80010d2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80010d6:	4610      	mov	r0, r2
 80010d8:	4619      	mov	r1, r3
 80010da:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80010de:	461a      	mov	r2, r3
 80010e0:	f009 fa36 	bl	800a550 <memcpy>
}
 80010e4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80010e8:	6818      	ldr	r0, [r3, #0]
 80010ea:	f507 7701 	add.w	r7, r7, #516	; 0x204
 80010ee:	46bd      	mov	sp, r7
 80010f0:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80010f4:	b004      	add	sp, #16
 80010f6:	4770      	bx	lr

080010f8 <Ltc6813_cs_low>:

void Ltc6813_cs_low(Ltc6813* self) { HAL_GPIO_WritePin(self->_cs_gpio_port, (1u << self->_cs_pin_num), 0); }
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b082      	sub	sp, #8
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800110a:	461a      	mov	r2, r3
 800110c:	2301      	movs	r3, #1
 800110e:	4093      	lsls	r3, r2
 8001110:	b29b      	uxth	r3, r3
 8001112:	2200      	movs	r2, #0
 8001114:	4619      	mov	r1, r3
 8001116:	f002 ff21 	bl	8003f5c <HAL_GPIO_WritePin>
 800111a:	bf00      	nop
 800111c:	3708      	adds	r7, #8
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}

08001122 <Ltc6813_cs_high>:
void Ltc6813_cs_high(Ltc6813* self) { HAL_GPIO_WritePin(self->_cs_gpio_port, (1u << self->_cs_pin_num), 1); }
 8001122:	b580      	push	{r7, lr}
 8001124:	b082      	sub	sp, #8
 8001126:	af00      	add	r7, sp, #0
 8001128:	6078      	str	r0, [r7, #4]
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	6d98      	ldr	r0, [r3, #88]	; 0x58
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001134:	461a      	mov	r2, r3
 8001136:	2301      	movs	r3, #1
 8001138:	4093      	lsls	r3, r2
 800113a:	b29b      	uxth	r3, r3
 800113c:	2201      	movs	r2, #1
 800113e:	4619      	mov	r1, r3
 8001140:	f002 ff0c 	bl	8003f5c <HAL_GPIO_WritePin>
 8001144:	bf00      	nop
 8001146:	3708      	adds	r7, #8
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}

0800114c <Ltc6813_wakeup_sleep>:

// WAKEUP FUNCTIONS:
// setting CS low will send a long isoSPI pulse (reference: page 18 of LTC6820 datasheet)
void Ltc6813_wakeup_sleep(Ltc6813* self) {
 800114c:	b580      	push	{r7, lr}
 800114e:	b082      	sub	sp, #8
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
	Ltc6813_cs_low(self);
 8001154:	6878      	ldr	r0, [r7, #4]
 8001156:	f7ff ffcf 	bl	80010f8 <Ltc6813_cs_low>
	delay_us(410);		// according to datasheet, t_wake = 400us
 800115a:	f44f 70cd 	mov.w	r0, #410	; 0x19a
 800115e:	f001 f837 	bl	80021d0 <delay_us>
	Ltc6813_cs_high(self);
 8001162:	6878      	ldr	r0, [r7, #4]
 8001164:	f7ff ffdd 	bl	8001122 <Ltc6813_cs_high>
	delay_us(30);
 8001168:	201e      	movs	r0, #30
 800116a:	f001 f831 	bl	80021d0 <delay_us>
}
 800116e:	bf00      	nop
 8001170:	3708      	adds	r7, #8
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}

08001176 <Ltc6813_wakeup_idle>:
void Ltc6813_wakeup_idle(Ltc6813* self) {
 8001176:	b580      	push	{r7, lr}
 8001178:	b082      	sub	sp, #8
 800117a:	af00      	add	r7, sp, #0
 800117c:	6078      	str	r0, [r7, #4]
	Ltc6813_cs_low(self);
 800117e:	6878      	ldr	r0, [r7, #4]
 8001180:	f7ff ffba 	bl	80010f8 <Ltc6813_cs_low>
	delay_us(20);		// according to datasheet, t_wake = 10us
 8001184:	2014      	movs	r0, #20
 8001186:	f001 f823 	bl	80021d0 <delay_us>
	Ltc6813_cs_high(self);
 800118a:	6878      	ldr	r0, [r7, #4]
 800118c:	f7ff ffc9 	bl	8001122 <Ltc6813_cs_high>
}
 8001190:	bf00      	nop
 8001192:	3708      	adds	r7, #8
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}

08001198 <Ltc6813_send_cmd>:

// READ COMMAND FUNCTIONS:
// commands to send read commands and receive data back (page 60 of LTC6813 datasheet)
void Ltc6813_send_cmd(Ltc6813* self, uint16_t cmd) {
 8001198:	b580      	push	{r7, lr}
 800119a:	b082      	sub	sp, #8
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
 80011a0:	460b      	mov	r3, r1
 80011a2:	807b      	strh	r3, [r7, #2]
	Buffer_clear(&self->cmd_bfr);
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	335d      	adds	r3, #93	; 0x5d
 80011a8:	4618      	mov	r0, r3
 80011aa:	f7ff fef9 	bl	8000fa0 <Buffer_clear>

	Buffer_append(&self->cmd_bfr, (cmd >> 8) & 0xff);
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	f103 025d 	add.w	r2, r3, #93	; 0x5d
 80011b4:	887b      	ldrh	r3, [r7, #2]
 80011b6:	0a1b      	lsrs	r3, r3, #8
 80011b8:	b29b      	uxth	r3, r3
 80011ba:	b2db      	uxtb	r3, r3
 80011bc:	4619      	mov	r1, r3
 80011be:	4610      	mov	r0, r2
 80011c0:	f7ff fdd5 	bl	8000d6e <Buffer_append>
	Buffer_append(&self->cmd_bfr, cmd & 0xff);
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	335d      	adds	r3, #93	; 0x5d
 80011c8:	887a      	ldrh	r2, [r7, #2]
 80011ca:	b2d2      	uxtb	r2, r2
 80011cc:	4611      	mov	r1, r2
 80011ce:	4618      	mov	r0, r3
 80011d0:	f7ff fdcd 	bl	8000d6e <Buffer_append>

	Buffer_add_pec(&self->cmd_bfr);
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	335d      	adds	r3, #93	; 0x5d
 80011d8:	4618      	mov	r0, r3
 80011da:	f7ff fe0f 	bl	8000dfc <Buffer_add_pec>

	HAL_SPI_Transmit(&self->_spi_interface, self->cmd_bfr.data, self->cmd_bfr.len, self->timeout);
 80011de:	6878      	ldr	r0, [r7, #4]
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	f103 015e 	add.w	r1, r3, #94	; 0x5e
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80011ec:	b29a      	uxth	r2, r3
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	f8d3 318c 	ldr.w	r3, [r3, #396]	; 0x18c
 80011f4:	f003 fc13 	bl	8004a1e <HAL_SPI_Transmit>
}
 80011f8:	bf00      	nop
 80011fa:	3708      	adds	r7, #8
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}

08001200 <Ltc6813_read_cfga>:

uint8_t Ltc6813_read_cfga(Ltc6813* self) {
 8001200:	b580      	push	{r7, lr}
 8001202:	b084      	sub	sp, #16
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
	Buffer_clear(&self->cfga_bfr);
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	33c2      	adds	r3, #194	; 0xc2
 800120c:	4618      	mov	r0, r3
 800120e:	f7ff fec7 	bl	8000fa0 <Buffer_clear>

	self->cfga_bfr.len = 8;
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	2208      	movs	r2, #8
 8001216:	f883 20c2 	strb.w	r2, [r3, #194]	; 0xc2

	Ltc6813_cs_low(self);
 800121a:	6878      	ldr	r0, [r7, #4]
 800121c:	f7ff ff6c 	bl	80010f8 <Ltc6813_cs_low>

	Ltc6813_send_cmd(self, RDCFGA);
 8001220:	2102      	movs	r1, #2
 8001222:	6878      	ldr	r0, [r7, #4]
 8001224:	f7ff ffb8 	bl	8001198 <Ltc6813_send_cmd>
	HAL_SPI_Receive(&self->_spi_interface, self->cfga_bfr.data, self->cfga_bfr.len, self->timeout);
 8001228:	6878      	ldr	r0, [r7, #4]
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	f103 01c3 	add.w	r1, r3, #195	; 0xc3
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	f893 30c2 	ldrb.w	r3, [r3, #194]	; 0xc2
 8001236:	b29a      	uxth	r2, r3
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	f8d3 318c 	ldr.w	r3, [r3, #396]	; 0x18c
 800123e:	f003 fd2a 	bl	8004c96 <HAL_SPI_Receive>

	Ltc6813_cs_high(self);
 8001242:	6878      	ldr	r0, [r7, #4]
 8001244:	f7ff ff6d 	bl	8001122 <Ltc6813_cs_high>

	uint8_t pec_success = Buffer_check_pec(&self->cfga_bfr);
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	33c2      	adds	r3, #194	; 0xc2
 800124c:	4618      	mov	r0, r3
 800124e:	f7ff fe19 	bl	8000e84 <Buffer_check_pec>
 8001252:	4603      	mov	r3, r0
 8001254:	73fb      	strb	r3, [r7, #15]
	self->cfga_bfr.len = 6;
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	2206      	movs	r2, #6
 800125a:	f883 20c2 	strb.w	r2, [r3, #194]	; 0xc2

	return pec_success;
 800125e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001260:	4618      	mov	r0, r3
 8001262:	3710      	adds	r7, #16
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}

08001268 <Ltc6813_read_cfgb>:

uint8_t Ltc6813_read_cfgb(Ltc6813* self) {
 8001268:	b580      	push	{r7, lr}
 800126a:	b084      	sub	sp, #16
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
	Buffer_clear(&self->cfgb_bfr);
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	f203 1327 	addw	r3, r3, #295	; 0x127
 8001276:	4618      	mov	r0, r3
 8001278:	f7ff fe92 	bl	8000fa0 <Buffer_clear>

	self->cfgb_bfr.len = 8;
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	2208      	movs	r2, #8
 8001280:	f883 2127 	strb.w	r2, [r3, #295]	; 0x127

	Ltc6813_cs_low(self);
 8001284:	6878      	ldr	r0, [r7, #4]
 8001286:	f7ff ff37 	bl	80010f8 <Ltc6813_cs_low>

	Ltc6813_send_cmd(self, RDCFGB);
 800128a:	2126      	movs	r1, #38	; 0x26
 800128c:	6878      	ldr	r0, [r7, #4]
 800128e:	f7ff ff83 	bl	8001198 <Ltc6813_send_cmd>
	HAL_SPI_Receive(&self->_spi_interface, self->cfgb_bfr.data, self->cfgb_bfr.len, self->timeout);
 8001292:	6878      	ldr	r0, [r7, #4]
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	f893 3127 	ldrb.w	r3, [r3, #295]	; 0x127
 80012a0:	b29a      	uxth	r2, r3
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	f8d3 318c 	ldr.w	r3, [r3, #396]	; 0x18c
 80012a8:	f003 fcf5 	bl	8004c96 <HAL_SPI_Receive>

	Ltc6813_cs_high(self);
 80012ac:	6878      	ldr	r0, [r7, #4]
 80012ae:	f7ff ff38 	bl	8001122 <Ltc6813_cs_high>

	uint8_t pec_success = Buffer_check_pec(&self->cfgb_bfr);
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	f203 1327 	addw	r3, r3, #295	; 0x127
 80012b8:	4618      	mov	r0, r3
 80012ba:	f7ff fde3 	bl	8000e84 <Buffer_check_pec>
 80012be:	4603      	mov	r3, r0
 80012c0:	73fb      	strb	r3, [r7, #15]
	self->cfgb_bfr.len = 6;
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	2206      	movs	r2, #6
 80012c6:	f883 2127 	strb.w	r2, [r3, #295]	; 0x127

	return pec_success;
 80012ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80012cc:	4618      	mov	r0, r3
 80012ce:	3710      	adds	r7, #16
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bd80      	pop	{r7, pc}

080012d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012d8:	f001 fa42 	bl	8002760 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012dc:	f000 f818 	bl	8001310 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012e0:	f000 fb2e 	bl	8001940 <MX_GPIO_Init>
  MX_DMA_Init();
 80012e4:	f000 fb0c 	bl	8001900 <MX_DMA_Init>
  MX_TIM2_Init();
 80012e8:	f000 fa24 	bl	8001734 <MX_TIM2_Init>
  MX_ADC1_Init();
 80012ec:	f000 f87a 	bl	80013e4 <MX_ADC1_Init>
  MX_SPI1_Init();
 80012f0:	f000 f928 	bl	8001544 <MX_SPI1_Init>
  MX_TIM1_Init();
 80012f4:	f000 f95c 	bl	80015b0 <MX_TIM1_Init>
  MX_TIM3_Init();
 80012f8:	f000 fa68 	bl	80017cc <MX_TIM3_Init>
  MX_USART1_UART_Init();
 80012fc:	f000 fad6 	bl	80018ac <MX_USART1_UART_Init>
  MX_CAN1_Init();
 8001300:	f000 f8ea 	bl	80014d8 <MX_CAN1_Init>
  /* USER CODE BEGIN 2 */
  return bms_entry();
 8001304:	f7ff fc98 	bl	8000c38 <bms_entry>
 8001308:	4603      	mov	r3, r0
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}
 800130a:	4618      	mov	r0, r3
 800130c:	bd80      	pop	{r7, pc}
	...

08001310 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b094      	sub	sp, #80	; 0x50
 8001314:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001316:	f107 0320 	add.w	r3, r7, #32
 800131a:	2230      	movs	r2, #48	; 0x30
 800131c:	2100      	movs	r1, #0
 800131e:	4618      	mov	r0, r3
 8001320:	f009 f924 	bl	800a56c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001324:	f107 030c 	add.w	r3, r7, #12
 8001328:	2200      	movs	r2, #0
 800132a:	601a      	str	r2, [r3, #0]
 800132c:	605a      	str	r2, [r3, #4]
 800132e:	609a      	str	r2, [r3, #8]
 8001330:	60da      	str	r2, [r3, #12]
 8001332:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001334:	2300      	movs	r3, #0
 8001336:	60bb      	str	r3, [r7, #8]
 8001338:	4b28      	ldr	r3, [pc, #160]	; (80013dc <SystemClock_Config+0xcc>)
 800133a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800133c:	4a27      	ldr	r2, [pc, #156]	; (80013dc <SystemClock_Config+0xcc>)
 800133e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001342:	6413      	str	r3, [r2, #64]	; 0x40
 8001344:	4b25      	ldr	r3, [pc, #148]	; (80013dc <SystemClock_Config+0xcc>)
 8001346:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001348:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800134c:	60bb      	str	r3, [r7, #8]
 800134e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001350:	2300      	movs	r3, #0
 8001352:	607b      	str	r3, [r7, #4]
 8001354:	4b22      	ldr	r3, [pc, #136]	; (80013e0 <SystemClock_Config+0xd0>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	4a21      	ldr	r2, [pc, #132]	; (80013e0 <SystemClock_Config+0xd0>)
 800135a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800135e:	6013      	str	r3, [r2, #0]
 8001360:	4b1f      	ldr	r3, [pc, #124]	; (80013e0 <SystemClock_Config+0xd0>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001368:	607b      	str	r3, [r7, #4]
 800136a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800136c:	2301      	movs	r3, #1
 800136e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001370:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001374:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001376:	2302      	movs	r3, #2
 8001378:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800137a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800137e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001380:	2308      	movs	r3, #8
 8001382:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 160;
 8001384:	23a0      	movs	r3, #160	; 0xa0
 8001386:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001388:	2302      	movs	r3, #2
 800138a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800138c:	2304      	movs	r3, #4
 800138e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001390:	f107 0320 	add.w	r3, r7, #32
 8001394:	4618      	mov	r0, r3
 8001396:	f002 fe15 	bl	8003fc4 <HAL_RCC_OscConfig>
 800139a:	4603      	mov	r3, r0
 800139c:	2b00      	cmp	r3, #0
 800139e:	d001      	beq.n	80013a4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80013a0:	f000 fb6a 	bl	8001a78 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013a4:	230f      	movs	r3, #15
 80013a6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013a8:	2302      	movs	r3, #2
 80013aa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013ac:	2300      	movs	r3, #0
 80013ae:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80013b0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80013b4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80013b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013ba:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80013bc:	f107 030c 	add.w	r3, r7, #12
 80013c0:	2105      	movs	r1, #5
 80013c2:	4618      	mov	r0, r3
 80013c4:	f003 f876 	bl	80044b4 <HAL_RCC_ClockConfig>
 80013c8:	4603      	mov	r3, r0
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d001      	beq.n	80013d2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80013ce:	f000 fb53 	bl	8001a78 <Error_Handler>
  }
}
 80013d2:	bf00      	nop
 80013d4:	3750      	adds	r7, #80	; 0x50
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	40023800 	.word	0x40023800
 80013e0:	40007000 	.word	0x40007000

080013e4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b084      	sub	sp, #16
 80013e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80013ea:	463b      	mov	r3, r7
 80013ec:	2200      	movs	r2, #0
 80013ee:	601a      	str	r2, [r3, #0]
 80013f0:	605a      	str	r2, [r3, #4]
 80013f2:	609a      	str	r2, [r3, #8]
 80013f4:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80013f6:	4b35      	ldr	r3, [pc, #212]	; (80014cc <MX_ADC1_Init+0xe8>)
 80013f8:	4a35      	ldr	r2, [pc, #212]	; (80014d0 <MX_ADC1_Init+0xec>)
 80013fa:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80013fc:	4b33      	ldr	r3, [pc, #204]	; (80014cc <MX_ADC1_Init+0xe8>)
 80013fe:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001402:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001404:	4b31      	ldr	r3, [pc, #196]	; (80014cc <MX_ADC1_Init+0xe8>)
 8001406:	2200      	movs	r2, #0
 8001408:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800140a:	4b30      	ldr	r3, [pc, #192]	; (80014cc <MX_ADC1_Init+0xe8>)
 800140c:	2201      	movs	r2, #1
 800140e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001410:	4b2e      	ldr	r3, [pc, #184]	; (80014cc <MX_ADC1_Init+0xe8>)
 8001412:	2201      	movs	r2, #1
 8001414:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001416:	4b2d      	ldr	r3, [pc, #180]	; (80014cc <MX_ADC1_Init+0xe8>)
 8001418:	2200      	movs	r2, #0
 800141a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800141e:	4b2b      	ldr	r3, [pc, #172]	; (80014cc <MX_ADC1_Init+0xe8>)
 8001420:	2200      	movs	r2, #0
 8001422:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001424:	4b29      	ldr	r3, [pc, #164]	; (80014cc <MX_ADC1_Init+0xe8>)
 8001426:	4a2b      	ldr	r2, [pc, #172]	; (80014d4 <MX_ADC1_Init+0xf0>)
 8001428:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800142a:	4b28      	ldr	r3, [pc, #160]	; (80014cc <MX_ADC1_Init+0xe8>)
 800142c:	2200      	movs	r2, #0
 800142e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 5;
 8001430:	4b26      	ldr	r3, [pc, #152]	; (80014cc <MX_ADC1_Init+0xe8>)
 8001432:	2205      	movs	r2, #5
 8001434:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001436:	4b25      	ldr	r3, [pc, #148]	; (80014cc <MX_ADC1_Init+0xe8>)
 8001438:	2200      	movs	r2, #0
 800143a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800143e:	4b23      	ldr	r3, [pc, #140]	; (80014cc <MX_ADC1_Init+0xe8>)
 8001440:	2201      	movs	r2, #1
 8001442:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001444:	4821      	ldr	r0, [pc, #132]	; (80014cc <MX_ADC1_Init+0xe8>)
 8001446:	f001 f9cd 	bl	80027e4 <HAL_ADC_Init>
 800144a:	4603      	mov	r3, r0
 800144c:	2b00      	cmp	r3, #0
 800144e:	d001      	beq.n	8001454 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001450:	f000 fb12 	bl	8001a78 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8001454:	230a      	movs	r3, #10
 8001456:	603b      	str	r3, [r7, #0]
   sConfig.Rank = 2;
 8001458:	2302      	movs	r3, #2
 800145a:	607b      	str	r3, [r7, #4]
   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800145c:	463b      	mov	r3, r7
 800145e:	4619      	mov	r1, r3
 8001460:	481a      	ldr	r0, [pc, #104]	; (80014cc <MX_ADC1_Init+0xe8>)
 8001462:	f001 fb81 	bl	8002b68 <HAL_ADC_ConfigChannel>
 8001466:	4603      	mov	r3, r0
 8001468:	2b00      	cmp	r3, #0
 800146a:	d001      	beq.n	8001470 <MX_ADC1_Init+0x8c>
   {
     Error_Handler();
 800146c:	f000 fb04 	bl	8001a78 <Error_Handler>
   }
   /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
   */
   sConfig.Channel = ADC_CHANNEL_11;
 8001470:	230b      	movs	r3, #11
 8001472:	603b      	str	r3, [r7, #0]
   sConfig.Rank = 3;
 8001474:	2303      	movs	r3, #3
 8001476:	607b      	str	r3, [r7, #4]
   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001478:	463b      	mov	r3, r7
 800147a:	4619      	mov	r1, r3
 800147c:	4813      	ldr	r0, [pc, #76]	; (80014cc <MX_ADC1_Init+0xe8>)
 800147e:	f001 fb73 	bl	8002b68 <HAL_ADC_ConfigChannel>
 8001482:	4603      	mov	r3, r0
 8001484:	2b00      	cmp	r3, #0
 8001486:	d001      	beq.n	800148c <MX_ADC1_Init+0xa8>
   {
     Error_Handler();
 8001488:	f000 faf6 	bl	8001a78 <Error_Handler>
   }
   /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
   */
   sConfig.Channel = ADC_CHANNEL_12;
 800148c:	230c      	movs	r3, #12
 800148e:	603b      	str	r3, [r7, #0]
   sConfig.Rank = 4;
 8001490:	2304      	movs	r3, #4
 8001492:	607b      	str	r3, [r7, #4]
   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001494:	463b      	mov	r3, r7
 8001496:	4619      	mov	r1, r3
 8001498:	480c      	ldr	r0, [pc, #48]	; (80014cc <MX_ADC1_Init+0xe8>)
 800149a:	f001 fb65 	bl	8002b68 <HAL_ADC_ConfigChannel>
 800149e:	4603      	mov	r3, r0
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d001      	beq.n	80014a8 <MX_ADC1_Init+0xc4>
   {
     Error_Handler();
 80014a4:	f000 fae8 	bl	8001a78 <Error_Handler>
   }
   /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
   */
   sConfig.Channel = ADC_CHANNEL_13;
 80014a8:	230d      	movs	r3, #13
 80014aa:	603b      	str	r3, [r7, #0]
   sConfig.Rank = 5;
 80014ac:	2305      	movs	r3, #5
 80014ae:	607b      	str	r3, [r7, #4]
   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80014b0:	463b      	mov	r3, r7
 80014b2:	4619      	mov	r1, r3
 80014b4:	4805      	ldr	r0, [pc, #20]	; (80014cc <MX_ADC1_Init+0xe8>)
 80014b6:	f001 fb57 	bl	8002b68 <HAL_ADC_ConfigChannel>
 80014ba:	4603      	mov	r3, r0
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d001      	beq.n	80014c4 <MX_ADC1_Init+0xe0>
   {
     Error_Handler();
 80014c0:	f000 fada 	bl	8001a78 <Error_Handler>
   }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80014c4:	bf00      	nop
 80014c6:	3710      	adds	r7, #16
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bd80      	pop	{r7, pc}
 80014cc:	20004cf8 	.word	0x20004cf8
 80014d0:	40012000 	.word	0x40012000
 80014d4:	0f000001 	.word	0x0f000001

080014d8 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80014dc:	4b17      	ldr	r3, [pc, #92]	; (800153c <MX_CAN1_Init+0x64>)
 80014de:	4a18      	ldr	r2, [pc, #96]	; (8001540 <MX_CAN1_Init+0x68>)
 80014e0:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 5;
 80014e2:	4b16      	ldr	r3, [pc, #88]	; (800153c <MX_CAN1_Init+0x64>)
 80014e4:	2205      	movs	r2, #5
 80014e6:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80014e8:	4b14      	ldr	r3, [pc, #80]	; (800153c <MX_CAN1_Init+0x64>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80014ee:	4b13      	ldr	r3, [pc, #76]	; (800153c <MX_CAN1_Init+0x64>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_13TQ;
 80014f4:	4b11      	ldr	r3, [pc, #68]	; (800153c <MX_CAN1_Init+0x64>)
 80014f6:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 80014fa:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 80014fc:	4b0f      	ldr	r3, [pc, #60]	; (800153c <MX_CAN1_Init+0x64>)
 80014fe:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001502:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001504:	4b0d      	ldr	r3, [pc, #52]	; (800153c <MX_CAN1_Init+0x64>)
 8001506:	2200      	movs	r2, #0
 8001508:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800150a:	4b0c      	ldr	r3, [pc, #48]	; (800153c <MX_CAN1_Init+0x64>)
 800150c:	2200      	movs	r2, #0
 800150e:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001510:	4b0a      	ldr	r3, [pc, #40]	; (800153c <MX_CAN1_Init+0x64>)
 8001512:	2200      	movs	r2, #0
 8001514:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8001516:	4b09      	ldr	r3, [pc, #36]	; (800153c <MX_CAN1_Init+0x64>)
 8001518:	2200      	movs	r2, #0
 800151a:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800151c:	4b07      	ldr	r3, [pc, #28]	; (800153c <MX_CAN1_Init+0x64>)
 800151e:	2200      	movs	r2, #0
 8001520:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001522:	4b06      	ldr	r3, [pc, #24]	; (800153c <MX_CAN1_Init+0x64>)
 8001524:	2200      	movs	r2, #0
 8001526:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001528:	4804      	ldr	r0, [pc, #16]	; (800153c <MX_CAN1_Init+0x64>)
 800152a:	f001 fdbd 	bl	80030a8 <HAL_CAN_Init>
 800152e:	4603      	mov	r3, r0
 8001530:	2b00      	cmp	r3, #0
 8001532:	d001      	beq.n	8001538 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8001534:	f000 faa0 	bl	8001a78 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8001538:	bf00      	nop
 800153a:	bd80      	pop	{r7, pc}
 800153c:	20004ecc 	.word	0x20004ecc
 8001540:	40006400 	.word	0x40006400

08001544 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001548:	4b17      	ldr	r3, [pc, #92]	; (80015a8 <MX_SPI1_Init+0x64>)
 800154a:	4a18      	ldr	r2, [pc, #96]	; (80015ac <MX_SPI1_Init+0x68>)
 800154c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800154e:	4b16      	ldr	r3, [pc, #88]	; (80015a8 <MX_SPI1_Init+0x64>)
 8001550:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001554:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001556:	4b14      	ldr	r3, [pc, #80]	; (80015a8 <MX_SPI1_Init+0x64>)
 8001558:	2200      	movs	r2, #0
 800155a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800155c:	4b12      	ldr	r3, [pc, #72]	; (80015a8 <MX_SPI1_Init+0x64>)
 800155e:	2200      	movs	r2, #0
 8001560:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001562:	4b11      	ldr	r3, [pc, #68]	; (80015a8 <MX_SPI1_Init+0x64>)
 8001564:	2202      	movs	r2, #2
 8001566:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001568:	4b0f      	ldr	r3, [pc, #60]	; (80015a8 <MX_SPI1_Init+0x64>)
 800156a:	2201      	movs	r2, #1
 800156c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800156e:	4b0e      	ldr	r3, [pc, #56]	; (80015a8 <MX_SPI1_Init+0x64>)
 8001570:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001574:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8001576:	4b0c      	ldr	r3, [pc, #48]	; (80015a8 <MX_SPI1_Init+0x64>)
 8001578:	2230      	movs	r2, #48	; 0x30
 800157a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800157c:	4b0a      	ldr	r3, [pc, #40]	; (80015a8 <MX_SPI1_Init+0x64>)
 800157e:	2200      	movs	r2, #0
 8001580:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001582:	4b09      	ldr	r3, [pc, #36]	; (80015a8 <MX_SPI1_Init+0x64>)
 8001584:	2200      	movs	r2, #0
 8001586:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001588:	4b07      	ldr	r3, [pc, #28]	; (80015a8 <MX_SPI1_Init+0x64>)
 800158a:	2200      	movs	r2, #0
 800158c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800158e:	4b06      	ldr	r3, [pc, #24]	; (80015a8 <MX_SPI1_Init+0x64>)
 8001590:	220a      	movs	r2, #10
 8001592:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001594:	4804      	ldr	r0, [pc, #16]	; (80015a8 <MX_SPI1_Init+0x64>)
 8001596:	f003 f9b9 	bl	800490c <HAL_SPI_Init>
 800159a:	4603      	mov	r3, r0
 800159c:	2b00      	cmp	r3, #0
 800159e:	d001      	beq.n	80015a4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80015a0:	f000 fa6a 	bl	8001a78 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80015a4:	bf00      	nop
 80015a6:	bd80      	pop	{r7, pc}
 80015a8:	20004e2c 	.word	0x20004e2c
 80015ac:	40013000 	.word	0x40013000

080015b0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b096      	sub	sp, #88	; 0x58
 80015b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015b6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80015ba:	2200      	movs	r2, #0
 80015bc:	601a      	str	r2, [r3, #0]
 80015be:	605a      	str	r2, [r3, #4]
 80015c0:	609a      	str	r2, [r3, #8]
 80015c2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015c4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80015c8:	2200      	movs	r2, #0
 80015ca:	601a      	str	r2, [r3, #0]
 80015cc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80015ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015d2:	2200      	movs	r2, #0
 80015d4:	601a      	str	r2, [r3, #0]
 80015d6:	605a      	str	r2, [r3, #4]
 80015d8:	609a      	str	r2, [r3, #8]
 80015da:	60da      	str	r2, [r3, #12]
 80015dc:	611a      	str	r2, [r3, #16]
 80015de:	615a      	str	r2, [r3, #20]
 80015e0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80015e2:	1d3b      	adds	r3, r7, #4
 80015e4:	2220      	movs	r2, #32
 80015e6:	2100      	movs	r1, #0
 80015e8:	4618      	mov	r0, r3
 80015ea:	f008 ffbf 	bl	800a56c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80015ee:	4b4f      	ldr	r3, [pc, #316]	; (800172c <MX_TIM1_Init+0x17c>)
 80015f0:	4a4f      	ldr	r2, [pc, #316]	; (8001730 <MX_TIM1_Init+0x180>)
 80015f2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 159;
 80015f4:	4b4d      	ldr	r3, [pc, #308]	; (800172c <MX_TIM1_Init+0x17c>)
 80015f6:	229f      	movs	r2, #159	; 0x9f
 80015f8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015fa:	4b4c      	ldr	r3, [pc, #304]	; (800172c <MX_TIM1_Init+0x17c>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001600:	4b4a      	ldr	r3, [pc, #296]	; (800172c <MX_TIM1_Init+0x17c>)
 8001602:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001606:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001608:	4b48      	ldr	r3, [pc, #288]	; (800172c <MX_TIM1_Init+0x17c>)
 800160a:	2200      	movs	r2, #0
 800160c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800160e:	4b47      	ldr	r3, [pc, #284]	; (800172c <MX_TIM1_Init+0x17c>)
 8001610:	2200      	movs	r2, #0
 8001612:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001614:	4b45      	ldr	r3, [pc, #276]	; (800172c <MX_TIM1_Init+0x17c>)
 8001616:	2200      	movs	r2, #0
 8001618:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800161a:	4844      	ldr	r0, [pc, #272]	; (800172c <MX_TIM1_Init+0x17c>)
 800161c:	f003 ff1e 	bl	800545c <HAL_TIM_Base_Init>
 8001620:	4603      	mov	r3, r0
 8001622:	2b00      	cmp	r3, #0
 8001624:	d001      	beq.n	800162a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001626:	f000 fa27 	bl	8001a78 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800162a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800162e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001630:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001634:	4619      	mov	r1, r3
 8001636:	483d      	ldr	r0, [pc, #244]	; (800172c <MX_TIM1_Init+0x17c>)
 8001638:	f004 fbf6 	bl	8005e28 <HAL_TIM_ConfigClockSource>
 800163c:	4603      	mov	r3, r0
 800163e:	2b00      	cmp	r3, #0
 8001640:	d001      	beq.n	8001646 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001642:	f000 fa19 	bl	8001a78 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001646:	4839      	ldr	r0, [pc, #228]	; (800172c <MX_TIM1_Init+0x17c>)
 8001648:	f004 f889 	bl	800575e <HAL_TIM_PWM_Init>
 800164c:	4603      	mov	r3, r0
 800164e:	2b00      	cmp	r3, #0
 8001650:	d001      	beq.n	8001656 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001652:	f000 fa11 	bl	8001a78 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8001656:	4835      	ldr	r0, [pc, #212]	; (800172c <MX_TIM1_Init+0x17c>)
 8001658:	f004 f828 	bl	80056ac <HAL_TIM_OC_Init>
 800165c:	4603      	mov	r3, r0
 800165e:	2b00      	cmp	r3, #0
 8001660:	d001      	beq.n	8001666 <MX_TIM1_Init+0xb6>
  {
    Error_Handler();
 8001662:	f000 fa09 	bl	8001a78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001666:	2300      	movs	r3, #0
 8001668:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800166a:	2300      	movs	r3, #0
 800166c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800166e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001672:	4619      	mov	r1, r3
 8001674:	482d      	ldr	r0, [pc, #180]	; (800172c <MX_TIM1_Init+0x17c>)
 8001676:	f005 f8d7 	bl	8006828 <HAL_TIMEx_MasterConfigSynchronization>
 800167a:	4603      	mov	r3, r0
 800167c:	2b00      	cmp	r3, #0
 800167e:	d001      	beq.n	8001684 <MX_TIM1_Init+0xd4>
  {
    Error_Handler();
 8001680:	f000 f9fa 	bl	8001a78 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001684:	2360      	movs	r3, #96	; 0x60
 8001686:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001688:	2300      	movs	r3, #0
 800168a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800168c:	2300      	movs	r3, #0
 800168e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001690:	2300      	movs	r3, #0
 8001692:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001694:	2300      	movs	r3, #0
 8001696:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001698:	2300      	movs	r3, #0
 800169a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800169c:	2300      	movs	r3, #0
 800169e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80016a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016a4:	2200      	movs	r2, #0
 80016a6:	4619      	mov	r1, r3
 80016a8:	4820      	ldr	r0, [pc, #128]	; (800172c <MX_TIM1_Init+0x17c>)
 80016aa:	f004 faff 	bl	8005cac <HAL_TIM_PWM_ConfigChannel>
 80016ae:	4603      	mov	r3, r0
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d001      	beq.n	80016b8 <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 80016b4:	f000 f9e0 	bl	8001a78 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80016b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016bc:	2204      	movs	r2, #4
 80016be:	4619      	mov	r1, r3
 80016c0:	481a      	ldr	r0, [pc, #104]	; (800172c <MX_TIM1_Init+0x17c>)
 80016c2:	f004 faf3 	bl	8005cac <HAL_TIM_PWM_ConfigChannel>
 80016c6:	4603      	mov	r3, r0
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d001      	beq.n	80016d0 <MX_TIM1_Init+0x120>
  {
    Error_Handler();
 80016cc:	f000 f9d4 	bl	8001a78 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80016d0:	2300      	movs	r3, #0
 80016d2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80016d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016d8:	2208      	movs	r2, #8
 80016da:	4619      	mov	r1, r3
 80016dc:	4813      	ldr	r0, [pc, #76]	; (800172c <MX_TIM1_Init+0x17c>)
 80016de:	f004 f9f9 	bl	8005ad4 <HAL_TIM_OC_ConfigChannel>
 80016e2:	4603      	mov	r3, r0
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d001      	beq.n	80016ec <MX_TIM1_Init+0x13c>
  {
    Error_Handler();
 80016e8:	f000 f9c6 	bl	8001a78 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80016ec:	2300      	movs	r3, #0
 80016ee:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80016f0:	2300      	movs	r3, #0
 80016f2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80016f4:	2300      	movs	r3, #0
 80016f6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80016f8:	2300      	movs	r3, #0
 80016fa:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80016fc:	2300      	movs	r3, #0
 80016fe:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001700:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001704:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001706:	2300      	movs	r3, #0
 8001708:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800170a:	1d3b      	adds	r3, r7, #4
 800170c:	4619      	mov	r1, r3
 800170e:	4807      	ldr	r0, [pc, #28]	; (800172c <MX_TIM1_Init+0x17c>)
 8001710:	f005 f906 	bl	8006920 <HAL_TIMEx_ConfigBreakDeadTime>
 8001714:	4603      	mov	r3, r0
 8001716:	2b00      	cmp	r3, #0
 8001718:	d001      	beq.n	800171e <MX_TIM1_Init+0x16e>
  {
    Error_Handler();
 800171a:	f000 f9ad 	bl	8001a78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800171e:	4803      	ldr	r0, [pc, #12]	; (800172c <MX_TIM1_Init+0x17c>)
 8001720:	f000 fb82 	bl	8001e28 <HAL_TIM_MspPostInit>

}
 8001724:	bf00      	nop
 8001726:	3758      	adds	r7, #88	; 0x58
 8001728:	46bd      	mov	sp, r7
 800172a:	bd80      	pop	{r7, pc}
 800172c:	20004de4 	.word	0x20004de4
 8001730:	40010000 	.word	0x40010000

08001734 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b086      	sub	sp, #24
 8001738:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800173a:	f107 0308 	add.w	r3, r7, #8
 800173e:	2200      	movs	r2, #0
 8001740:	601a      	str	r2, [r3, #0]
 8001742:	605a      	str	r2, [r3, #4]
 8001744:	609a      	str	r2, [r3, #8]
 8001746:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001748:	463b      	mov	r3, r7
 800174a:	2200      	movs	r2, #0
 800174c:	601a      	str	r2, [r3, #0]
 800174e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001750:	4b1d      	ldr	r3, [pc, #116]	; (80017c8 <MX_TIM2_Init+0x94>)
 8001752:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001756:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 79;
 8001758:	4b1b      	ldr	r3, [pc, #108]	; (80017c8 <MX_TIM2_Init+0x94>)
 800175a:	224f      	movs	r2, #79	; 0x4f
 800175c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800175e:	4b1a      	ldr	r3, [pc, #104]	; (80017c8 <MX_TIM2_Init+0x94>)
 8001760:	2200      	movs	r2, #0
 8001762:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001764:	4b18      	ldr	r3, [pc, #96]	; (80017c8 <MX_TIM2_Init+0x94>)
 8001766:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800176a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800176c:	4b16      	ldr	r3, [pc, #88]	; (80017c8 <MX_TIM2_Init+0x94>)
 800176e:	2200      	movs	r2, #0
 8001770:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001772:	4b15      	ldr	r3, [pc, #84]	; (80017c8 <MX_TIM2_Init+0x94>)
 8001774:	2200      	movs	r2, #0
 8001776:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001778:	4813      	ldr	r0, [pc, #76]	; (80017c8 <MX_TIM2_Init+0x94>)
 800177a:	f003 fe6f 	bl	800545c <HAL_TIM_Base_Init>
 800177e:	4603      	mov	r3, r0
 8001780:	2b00      	cmp	r3, #0
 8001782:	d001      	beq.n	8001788 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001784:	f000 f978 	bl	8001a78 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001788:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800178c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800178e:	f107 0308 	add.w	r3, r7, #8
 8001792:	4619      	mov	r1, r3
 8001794:	480c      	ldr	r0, [pc, #48]	; (80017c8 <MX_TIM2_Init+0x94>)
 8001796:	f004 fb47 	bl	8005e28 <HAL_TIM_ConfigClockSource>
 800179a:	4603      	mov	r3, r0
 800179c:	2b00      	cmp	r3, #0
 800179e:	d001      	beq.n	80017a4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80017a0:	f000 f96a 	bl	8001a78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017a4:	2300      	movs	r3, #0
 80017a6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017a8:	2300      	movs	r3, #0
 80017aa:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80017ac:	463b      	mov	r3, r7
 80017ae:	4619      	mov	r1, r3
 80017b0:	4805      	ldr	r0, [pc, #20]	; (80017c8 <MX_TIM2_Init+0x94>)
 80017b2:	f005 f839 	bl	8006828 <HAL_TIMEx_MasterConfigSynchronization>
 80017b6:	4603      	mov	r3, r0
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d001      	beq.n	80017c0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80017bc:	f000 f95c 	bl	8001a78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80017c0:	bf00      	nop
 80017c2:	3718      	adds	r7, #24
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bd80      	pop	{r7, pc}
 80017c8:	20004e84 	.word	0x20004e84

080017cc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b08a      	sub	sp, #40	; 0x28
 80017d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80017d2:	f107 0318 	add.w	r3, r7, #24
 80017d6:	2200      	movs	r2, #0
 80017d8:	601a      	str	r2, [r3, #0]
 80017da:	605a      	str	r2, [r3, #4]
 80017dc:	609a      	str	r2, [r3, #8]
 80017de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017e0:	f107 0310 	add.w	r3, r7, #16
 80017e4:	2200      	movs	r2, #0
 80017e6:	601a      	str	r2, [r3, #0]
 80017e8:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80017ea:	463b      	mov	r3, r7
 80017ec:	2200      	movs	r2, #0
 80017ee:	601a      	str	r2, [r3, #0]
 80017f0:	605a      	str	r2, [r3, #4]
 80017f2:	609a      	str	r2, [r3, #8]
 80017f4:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80017f6:	4b2b      	ldr	r3, [pc, #172]	; (80018a4 <MX_TIM3_Init+0xd8>)
 80017f8:	4a2b      	ldr	r2, [pc, #172]	; (80018a8 <MX_TIM3_Init+0xdc>)
 80017fa:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80017fc:	4b29      	ldr	r3, [pc, #164]	; (80018a4 <MX_TIM3_Init+0xd8>)
 80017fe:	2200      	movs	r2, #0
 8001800:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001802:	4b28      	ldr	r3, [pc, #160]	; (80018a4 <MX_TIM3_Init+0xd8>)
 8001804:	2200      	movs	r2, #0
 8001806:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001808:	4b26      	ldr	r3, [pc, #152]	; (80018a4 <MX_TIM3_Init+0xd8>)
 800180a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800180e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001810:	4b24      	ldr	r3, [pc, #144]	; (80018a4 <MX_TIM3_Init+0xd8>)
 8001812:	2200      	movs	r2, #0
 8001814:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001816:	4b23      	ldr	r3, [pc, #140]	; (80018a4 <MX_TIM3_Init+0xd8>)
 8001818:	2200      	movs	r2, #0
 800181a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800181c:	4821      	ldr	r0, [pc, #132]	; (80018a4 <MX_TIM3_Init+0xd8>)
 800181e:	f003 fe1d 	bl	800545c <HAL_TIM_Base_Init>
 8001822:	4603      	mov	r3, r0
 8001824:	2b00      	cmp	r3, #0
 8001826:	d001      	beq.n	800182c <MX_TIM3_Init+0x60>
  {
    Error_Handler();
 8001828:	f000 f926 	bl	8001a78 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800182c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001830:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001832:	f107 0318 	add.w	r3, r7, #24
 8001836:	4619      	mov	r1, r3
 8001838:	481a      	ldr	r0, [pc, #104]	; (80018a4 <MX_TIM3_Init+0xd8>)
 800183a:	f004 faf5 	bl	8005e28 <HAL_TIM_ConfigClockSource>
 800183e:	4603      	mov	r3, r0
 8001840:	2b00      	cmp	r3, #0
 8001842:	d001      	beq.n	8001848 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001844:	f000 f918 	bl	8001a78 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8001848:	4816      	ldr	r0, [pc, #88]	; (80018a4 <MX_TIM3_Init+0xd8>)
 800184a:	f003 ffe1 	bl	8005810 <HAL_TIM_IC_Init>
 800184e:	4603      	mov	r3, r0
 8001850:	2b00      	cmp	r3, #0
 8001852:	d001      	beq.n	8001858 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001854:	f000 f910 	bl	8001a78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001858:	2300      	movs	r3, #0
 800185a:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800185c:	2300      	movs	r3, #0
 800185e:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001860:	f107 0310 	add.w	r3, r7, #16
 8001864:	4619      	mov	r1, r3
 8001866:	480f      	ldr	r0, [pc, #60]	; (80018a4 <MX_TIM3_Init+0xd8>)
 8001868:	f004 ffde 	bl	8006828 <HAL_TIMEx_MasterConfigSynchronization>
 800186c:	4603      	mov	r3, r0
 800186e:	2b00      	cmp	r3, #0
 8001870:	d001      	beq.n	8001876 <MX_TIM3_Init+0xaa>
  {
    Error_Handler();
 8001872:	f000 f901 	bl	8001a78 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001876:	2300      	movs	r3, #0
 8001878:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800187a:	2301      	movs	r3, #1
 800187c:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800187e:	2300      	movs	r3, #0
 8001880:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001882:	2300      	movs	r3, #0
 8001884:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001886:	463b      	mov	r3, r7
 8001888:	2200      	movs	r2, #0
 800188a:	4619      	mov	r1, r3
 800188c:	4805      	ldr	r0, [pc, #20]	; (80018a4 <MX_TIM3_Init+0xd8>)
 800188e:	f004 f979 	bl	8005b84 <HAL_TIM_IC_ConfigChannel>
 8001892:	4603      	mov	r3, r0
 8001894:	2b00      	cmp	r3, #0
 8001896:	d001      	beq.n	800189c <MX_TIM3_Init+0xd0>
  {
    Error_Handler();
 8001898:	f000 f8ee 	bl	8001a78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800189c:	bf00      	nop
 800189e:	3728      	adds	r7, #40	; 0x28
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bd80      	pop	{r7, pc}
 80018a4:	20004cb0 	.word	0x20004cb0
 80018a8:	40000400 	.word	0x40000400

080018ac <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80018b0:	4b11      	ldr	r3, [pc, #68]	; (80018f8 <MX_USART1_UART_Init+0x4c>)
 80018b2:	4a12      	ldr	r2, [pc, #72]	; (80018fc <MX_USART1_UART_Init+0x50>)
 80018b4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80018b6:	4b10      	ldr	r3, [pc, #64]	; (80018f8 <MX_USART1_UART_Init+0x4c>)
 80018b8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80018bc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80018be:	4b0e      	ldr	r3, [pc, #56]	; (80018f8 <MX_USART1_UART_Init+0x4c>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80018c4:	4b0c      	ldr	r3, [pc, #48]	; (80018f8 <MX_USART1_UART_Init+0x4c>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80018ca:	4b0b      	ldr	r3, [pc, #44]	; (80018f8 <MX_USART1_UART_Init+0x4c>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80018d0:	4b09      	ldr	r3, [pc, #36]	; (80018f8 <MX_USART1_UART_Init+0x4c>)
 80018d2:	220c      	movs	r2, #12
 80018d4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018d6:	4b08      	ldr	r3, [pc, #32]	; (80018f8 <MX_USART1_UART_Init+0x4c>)
 80018d8:	2200      	movs	r2, #0
 80018da:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80018dc:	4b06      	ldr	r3, [pc, #24]	; (80018f8 <MX_USART1_UART_Init+0x4c>)
 80018de:	2200      	movs	r2, #0
 80018e0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80018e2:	4805      	ldr	r0, [pc, #20]	; (80018f8 <MX_USART1_UART_Init+0x4c>)
 80018e4:	f005 f882 	bl	80069ec <HAL_UART_Init>
 80018e8:	4603      	mov	r3, r0
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d001      	beq.n	80018f2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80018ee:	f000 f8c3 	bl	8001a78 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80018f2:	bf00      	nop
 80018f4:	bd80      	pop	{r7, pc}
 80018f6:	bf00      	nop
 80018f8:	20004d40 	.word	0x20004d40
 80018fc:	40011000 	.word	0x40011000

08001900 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b082      	sub	sp, #8
 8001904:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001906:	2300      	movs	r3, #0
 8001908:	607b      	str	r3, [r7, #4]
 800190a:	4b0c      	ldr	r3, [pc, #48]	; (800193c <MX_DMA_Init+0x3c>)
 800190c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800190e:	4a0b      	ldr	r2, [pc, #44]	; (800193c <MX_DMA_Init+0x3c>)
 8001910:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001914:	6313      	str	r3, [r2, #48]	; 0x30
 8001916:	4b09      	ldr	r3, [pc, #36]	; (800193c <MX_DMA_Init+0x3c>)
 8001918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800191a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800191e:	607b      	str	r3, [r7, #4]
 8001920:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8001922:	2200      	movs	r2, #0
 8001924:	2105      	movs	r1, #5
 8001926:	2038      	movs	r0, #56	; 0x38
 8001928:	f001 fd72 	bl	8003410 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800192c:	2038      	movs	r0, #56	; 0x38
 800192e:	f001 fd8b 	bl	8003448 <HAL_NVIC_EnableIRQ>

}
 8001932:	bf00      	nop
 8001934:	3708      	adds	r7, #8
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}
 800193a:	bf00      	nop
 800193c:	40023800 	.word	0x40023800

08001940 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b08a      	sub	sp, #40	; 0x28
 8001944:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001946:	f107 0314 	add.w	r3, r7, #20
 800194a:	2200      	movs	r2, #0
 800194c:	601a      	str	r2, [r3, #0]
 800194e:	605a      	str	r2, [r3, #4]
 8001950:	609a      	str	r2, [r3, #8]
 8001952:	60da      	str	r2, [r3, #12]
 8001954:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001956:	2300      	movs	r3, #0
 8001958:	613b      	str	r3, [r7, #16]
 800195a:	4b3a      	ldr	r3, [pc, #232]	; (8001a44 <MX_GPIO_Init+0x104>)
 800195c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800195e:	4a39      	ldr	r2, [pc, #228]	; (8001a44 <MX_GPIO_Init+0x104>)
 8001960:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001964:	6313      	str	r3, [r2, #48]	; 0x30
 8001966:	4b37      	ldr	r3, [pc, #220]	; (8001a44 <MX_GPIO_Init+0x104>)
 8001968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800196a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800196e:	613b      	str	r3, [r7, #16]
 8001970:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001972:	2300      	movs	r3, #0
 8001974:	60fb      	str	r3, [r7, #12]
 8001976:	4b33      	ldr	r3, [pc, #204]	; (8001a44 <MX_GPIO_Init+0x104>)
 8001978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800197a:	4a32      	ldr	r2, [pc, #200]	; (8001a44 <MX_GPIO_Init+0x104>)
 800197c:	f043 0304 	orr.w	r3, r3, #4
 8001980:	6313      	str	r3, [r2, #48]	; 0x30
 8001982:	4b30      	ldr	r3, [pc, #192]	; (8001a44 <MX_GPIO_Init+0x104>)
 8001984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001986:	f003 0304 	and.w	r3, r3, #4
 800198a:	60fb      	str	r3, [r7, #12]
 800198c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800198e:	2300      	movs	r3, #0
 8001990:	60bb      	str	r3, [r7, #8]
 8001992:	4b2c      	ldr	r3, [pc, #176]	; (8001a44 <MX_GPIO_Init+0x104>)
 8001994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001996:	4a2b      	ldr	r2, [pc, #172]	; (8001a44 <MX_GPIO_Init+0x104>)
 8001998:	f043 0301 	orr.w	r3, r3, #1
 800199c:	6313      	str	r3, [r2, #48]	; 0x30
 800199e:	4b29      	ldr	r3, [pc, #164]	; (8001a44 <MX_GPIO_Init+0x104>)
 80019a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019a2:	f003 0301 	and.w	r3, r3, #1
 80019a6:	60bb      	str	r3, [r7, #8]
 80019a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80019aa:	2300      	movs	r3, #0
 80019ac:	607b      	str	r3, [r7, #4]
 80019ae:	4b25      	ldr	r3, [pc, #148]	; (8001a44 <MX_GPIO_Init+0x104>)
 80019b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019b2:	4a24      	ldr	r2, [pc, #144]	; (8001a44 <MX_GPIO_Init+0x104>)
 80019b4:	f043 0302 	orr.w	r3, r3, #2
 80019b8:	6313      	str	r3, [r2, #48]	; 0x30
 80019ba:	4b22      	ldr	r3, [pc, #136]	; (8001a44 <MX_GPIO_Init+0x104>)
 80019bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019be:	f003 0302 	and.w	r3, r3, #2
 80019c2:	607b      	str	r3, [r7, #4]
 80019c4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 80019c6:	2200      	movs	r2, #0
 80019c8:	2110      	movs	r1, #16
 80019ca:	481f      	ldr	r0, [pc, #124]	; (8001a48 <MX_GPIO_Init+0x108>)
 80019cc:	f002 fac6 	bl	8003f5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS2_GPIO_Port, CS2_Pin, GPIO_PIN_RESET);
 80019d0:	2200      	movs	r2, #0
 80019d2:	2110      	movs	r1, #16
 80019d4:	481d      	ldr	r0, [pc, #116]	; (8001a4c <MX_GPIO_Init+0x10c>)
 80019d6:	f002 fac1 	bl	8003f5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CONTACTOR_Pin|PRECHARGE_Pin|EXT_LED_Pin, GPIO_PIN_RESET);
 80019da:	2200      	movs	r2, #0
 80019dc:	f240 4106 	movw	r1, #1030	; 0x406
 80019e0:	481b      	ldr	r0, [pc, #108]	; (8001a50 <MX_GPIO_Init+0x110>)
 80019e2:	f002 fabb 	bl	8003f5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CS_Pin */
  GPIO_InitStruct.Pin = CS_Pin;
 80019e6:	2310      	movs	r3, #16
 80019e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019ea:	2301      	movs	r3, #1
 80019ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ee:	2300      	movs	r3, #0
 80019f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019f2:	2300      	movs	r3, #0
 80019f4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CS_GPIO_Port, &GPIO_InitStruct);
 80019f6:	f107 0314 	add.w	r3, r7, #20
 80019fa:	4619      	mov	r1, r3
 80019fc:	4812      	ldr	r0, [pc, #72]	; (8001a48 <MX_GPIO_Init+0x108>)
 80019fe:	f002 f911 	bl	8003c24 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS2_Pin */
  GPIO_InitStruct.Pin = CS2_Pin;
 8001a02:	2310      	movs	r3, #16
 8001a04:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a06:	2301      	movs	r3, #1
 8001a08:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CS2_GPIO_Port, &GPIO_InitStruct);
 8001a12:	f107 0314 	add.w	r3, r7, #20
 8001a16:	4619      	mov	r1, r3
 8001a18:	480c      	ldr	r0, [pc, #48]	; (8001a4c <MX_GPIO_Init+0x10c>)
 8001a1a:	f002 f903 	bl	8003c24 <HAL_GPIO_Init>

  /*Configure GPIO pins : CONTACTOR_Pin PRECHARGE_Pin EXT_LED_Pin */
  GPIO_InitStruct.Pin = CONTACTOR_Pin|PRECHARGE_Pin|EXT_LED_Pin;
 8001a1e:	f240 4306 	movw	r3, #1030	; 0x406
 8001a22:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a24:	2301      	movs	r3, #1
 8001a26:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a30:	f107 0314 	add.w	r3, r7, #20
 8001a34:	4619      	mov	r1, r3
 8001a36:	4806      	ldr	r0, [pc, #24]	; (8001a50 <MX_GPIO_Init+0x110>)
 8001a38:	f002 f8f4 	bl	8003c24 <HAL_GPIO_Init>

}
 8001a3c:	bf00      	nop
 8001a3e:	3728      	adds	r7, #40	; 0x28
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bd80      	pop	{r7, pc}
 8001a44:	40023800 	.word	0x40023800
 8001a48:	40020000 	.word	0x40020000
 8001a4c:	40020800 	.word	0x40020800
 8001a50:	40020400 	.word	0x40020400

08001a54 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b082      	sub	sp, #8
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM9) {
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	4a04      	ldr	r2, [pc, #16]	; (8001a74 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d101      	bne.n	8001a6a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001a66:	f000 fe9d 	bl	80027a4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001a6a:	bf00      	nop
 8001a6c:	3708      	adds	r7, #8
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bd80      	pop	{r7, pc}
 8001a72:	bf00      	nop
 8001a74:	40014000 	.word	0x40014000

08001a78 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a7c:	b672      	cpsid	i
}
 8001a7e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a80:	e7fe      	b.n	8001a80 <Error_Handler+0x8>
	...

08001a84 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b082      	sub	sp, #8
 8001a88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	607b      	str	r3, [r7, #4]
 8001a8e:	4b12      	ldr	r3, [pc, #72]	; (8001ad8 <HAL_MspInit+0x54>)
 8001a90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a92:	4a11      	ldr	r2, [pc, #68]	; (8001ad8 <HAL_MspInit+0x54>)
 8001a94:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a98:	6453      	str	r3, [r2, #68]	; 0x44
 8001a9a:	4b0f      	ldr	r3, [pc, #60]	; (8001ad8 <HAL_MspInit+0x54>)
 8001a9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001aa2:	607b      	str	r3, [r7, #4]
 8001aa4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	603b      	str	r3, [r7, #0]
 8001aaa:	4b0b      	ldr	r3, [pc, #44]	; (8001ad8 <HAL_MspInit+0x54>)
 8001aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aae:	4a0a      	ldr	r2, [pc, #40]	; (8001ad8 <HAL_MspInit+0x54>)
 8001ab0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ab4:	6413      	str	r3, [r2, #64]	; 0x40
 8001ab6:	4b08      	ldr	r3, [pc, #32]	; (8001ad8 <HAL_MspInit+0x54>)
 8001ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001abe:	603b      	str	r3, [r7, #0]
 8001ac0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	210f      	movs	r1, #15
 8001ac6:	f06f 0001 	mvn.w	r0, #1
 8001aca:	f001 fca1 	bl	8003410 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ace:	bf00      	nop
 8001ad0:	3708      	adds	r7, #8
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}
 8001ad6:	bf00      	nop
 8001ad8:	40023800 	.word	0x40023800

08001adc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b08a      	sub	sp, #40	; 0x28
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ae4:	f107 0314 	add.w	r3, r7, #20
 8001ae8:	2200      	movs	r2, #0
 8001aea:	601a      	str	r2, [r3, #0]
 8001aec:	605a      	str	r2, [r3, #4]
 8001aee:	609a      	str	r2, [r3, #8]
 8001af0:	60da      	str	r2, [r3, #12]
 8001af2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	4a3c      	ldr	r2, [pc, #240]	; (8001bec <HAL_ADC_MspInit+0x110>)
 8001afa:	4293      	cmp	r3, r2
 8001afc:	d171      	bne.n	8001be2 <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001afe:	2300      	movs	r3, #0
 8001b00:	613b      	str	r3, [r7, #16]
 8001b02:	4b3b      	ldr	r3, [pc, #236]	; (8001bf0 <HAL_ADC_MspInit+0x114>)
 8001b04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b06:	4a3a      	ldr	r2, [pc, #232]	; (8001bf0 <HAL_ADC_MspInit+0x114>)
 8001b08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b0c:	6453      	str	r3, [r2, #68]	; 0x44
 8001b0e:	4b38      	ldr	r3, [pc, #224]	; (8001bf0 <HAL_ADC_MspInit+0x114>)
 8001b10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b16:	613b      	str	r3, [r7, #16]
 8001b18:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	60fb      	str	r3, [r7, #12]
 8001b1e:	4b34      	ldr	r3, [pc, #208]	; (8001bf0 <HAL_ADC_MspInit+0x114>)
 8001b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b22:	4a33      	ldr	r2, [pc, #204]	; (8001bf0 <HAL_ADC_MspInit+0x114>)
 8001b24:	f043 0304 	orr.w	r3, r3, #4
 8001b28:	6313      	str	r3, [r2, #48]	; 0x30
 8001b2a:	4b31      	ldr	r3, [pc, #196]	; (8001bf0 <HAL_ADC_MspInit+0x114>)
 8001b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b2e:	f003 0304 	and.w	r3, r3, #4
 8001b32:	60fb      	str	r3, [r7, #12]
 8001b34:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b36:	2300      	movs	r3, #0
 8001b38:	60bb      	str	r3, [r7, #8]
 8001b3a:	4b2d      	ldr	r3, [pc, #180]	; (8001bf0 <HAL_ADC_MspInit+0x114>)
 8001b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b3e:	4a2c      	ldr	r2, [pc, #176]	; (8001bf0 <HAL_ADC_MspInit+0x114>)
 8001b40:	f043 0301 	orr.w	r3, r3, #1
 8001b44:	6313      	str	r3, [r2, #48]	; 0x30
 8001b46:	4b2a      	ldr	r3, [pc, #168]	; (8001bf0 <HAL_ADC_MspInit+0x114>)
 8001b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b4a:	f003 0301 	and.w	r3, r3, #1
 8001b4e:	60bb      	str	r3, [r7, #8]
 8001b50:	68bb      	ldr	r3, [r7, #8]
    PC1     ------> ADC1_IN11
    PC2     ------> ADC1_IN12
    PC3     ------> ADC1_IN13
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001b52:	230f      	movs	r3, #15
 8001b54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b56:	2303      	movs	r3, #3
 8001b58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b5e:	f107 0314 	add.w	r3, r7, #20
 8001b62:	4619      	mov	r1, r3
 8001b64:	4823      	ldr	r0, [pc, #140]	; (8001bf4 <HAL_ADC_MspInit+0x118>)
 8001b66:	f002 f85d 	bl	8003c24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001b6a:	2302      	movs	r3, #2
 8001b6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b6e:	2303      	movs	r3, #3
 8001b70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b72:	2300      	movs	r3, #0
 8001b74:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b76:	f107 0314 	add.w	r3, r7, #20
 8001b7a:	4619      	mov	r1, r3
 8001b7c:	481e      	ldr	r0, [pc, #120]	; (8001bf8 <HAL_ADC_MspInit+0x11c>)
 8001b7e:	f002 f851 	bl	8003c24 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001b82:	4b1e      	ldr	r3, [pc, #120]	; (8001bfc <HAL_ADC_MspInit+0x120>)
 8001b84:	4a1e      	ldr	r2, [pc, #120]	; (8001c00 <HAL_ADC_MspInit+0x124>)
 8001b86:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001b88:	4b1c      	ldr	r3, [pc, #112]	; (8001bfc <HAL_ADC_MspInit+0x120>)
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001b8e:	4b1b      	ldr	r3, [pc, #108]	; (8001bfc <HAL_ADC_MspInit+0x120>)
 8001b90:	2200      	movs	r2, #0
 8001b92:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b94:	4b19      	ldr	r3, [pc, #100]	; (8001bfc <HAL_ADC_MspInit+0x120>)
 8001b96:	2200      	movs	r2, #0
 8001b98:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001b9a:	4b18      	ldr	r3, [pc, #96]	; (8001bfc <HAL_ADC_MspInit+0x120>)
 8001b9c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001ba0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001ba2:	4b16      	ldr	r3, [pc, #88]	; (8001bfc <HAL_ADC_MspInit+0x120>)
 8001ba4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001ba8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001baa:	4b14      	ldr	r3, [pc, #80]	; (8001bfc <HAL_ADC_MspInit+0x120>)
 8001bac:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001bb0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8001bb2:	4b12      	ldr	r3, [pc, #72]	; (8001bfc <HAL_ADC_MspInit+0x120>)
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001bb8:	4b10      	ldr	r3, [pc, #64]	; (8001bfc <HAL_ADC_MspInit+0x120>)
 8001bba:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001bbe:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001bc0:	4b0e      	ldr	r3, [pc, #56]	; (8001bfc <HAL_ADC_MspInit+0x120>)
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001bc6:	480d      	ldr	r0, [pc, #52]	; (8001bfc <HAL_ADC_MspInit+0x120>)
 8001bc8:	f001 fc4c 	bl	8003464 <HAL_DMA_Init>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d001      	beq.n	8001bd6 <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 8001bd2:	f7ff ff51 	bl	8001a78 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	4a08      	ldr	r2, [pc, #32]	; (8001bfc <HAL_ADC_MspInit+0x120>)
 8001bda:	639a      	str	r2, [r3, #56]	; 0x38
 8001bdc:	4a07      	ldr	r2, [pc, #28]	; (8001bfc <HAL_ADC_MspInit+0x120>)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001be2:	bf00      	nop
 8001be4:	3728      	adds	r7, #40	; 0x28
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}
 8001bea:	bf00      	nop
 8001bec:	40012000 	.word	0x40012000
 8001bf0:	40023800 	.word	0x40023800
 8001bf4:	40020800 	.word	0x40020800
 8001bf8:	40020000 	.word	0x40020000
 8001bfc:	20004d84 	.word	0x20004d84
 8001c00:	40026410 	.word	0x40026410

08001c04 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b08a      	sub	sp, #40	; 0x28
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c0c:	f107 0314 	add.w	r3, r7, #20
 8001c10:	2200      	movs	r2, #0
 8001c12:	601a      	str	r2, [r3, #0]
 8001c14:	605a      	str	r2, [r3, #4]
 8001c16:	609a      	str	r2, [r3, #8]
 8001c18:	60da      	str	r2, [r3, #12]
 8001c1a:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4a19      	ldr	r2, [pc, #100]	; (8001c88 <HAL_CAN_MspInit+0x84>)
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d12c      	bne.n	8001c80 <HAL_CAN_MspInit+0x7c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001c26:	2300      	movs	r3, #0
 8001c28:	613b      	str	r3, [r7, #16]
 8001c2a:	4b18      	ldr	r3, [pc, #96]	; (8001c8c <HAL_CAN_MspInit+0x88>)
 8001c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c2e:	4a17      	ldr	r2, [pc, #92]	; (8001c8c <HAL_CAN_MspInit+0x88>)
 8001c30:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001c34:	6413      	str	r3, [r2, #64]	; 0x40
 8001c36:	4b15      	ldr	r3, [pc, #84]	; (8001c8c <HAL_CAN_MspInit+0x88>)
 8001c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c3e:	613b      	str	r3, [r7, #16]
 8001c40:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c42:	2300      	movs	r3, #0
 8001c44:	60fb      	str	r3, [r7, #12]
 8001c46:	4b11      	ldr	r3, [pc, #68]	; (8001c8c <HAL_CAN_MspInit+0x88>)
 8001c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c4a:	4a10      	ldr	r2, [pc, #64]	; (8001c8c <HAL_CAN_MspInit+0x88>)
 8001c4c:	f043 0301 	orr.w	r3, r3, #1
 8001c50:	6313      	str	r3, [r2, #48]	; 0x30
 8001c52:	4b0e      	ldr	r3, [pc, #56]	; (8001c8c <HAL_CAN_MspInit+0x88>)
 8001c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c56:	f003 0301 	and.w	r3, r3, #1
 8001c5a:	60fb      	str	r3, [r7, #12]
 8001c5c:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001c5e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001c62:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c64:	2302      	movs	r3, #2
 8001c66:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c6c:	2303      	movs	r3, #3
 8001c6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001c70:	2309      	movs	r3, #9
 8001c72:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c74:	f107 0314 	add.w	r3, r7, #20
 8001c78:	4619      	mov	r1, r3
 8001c7a:	4805      	ldr	r0, [pc, #20]	; (8001c90 <HAL_CAN_MspInit+0x8c>)
 8001c7c:	f001 ffd2 	bl	8003c24 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8001c80:	bf00      	nop
 8001c82:	3728      	adds	r7, #40	; 0x28
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bd80      	pop	{r7, pc}
 8001c88:	40006400 	.word	0x40006400
 8001c8c:	40023800 	.word	0x40023800
 8001c90:	40020000 	.word	0x40020000

08001c94 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b08a      	sub	sp, #40	; 0x28
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c9c:	f107 0314 	add.w	r3, r7, #20
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	601a      	str	r2, [r3, #0]
 8001ca4:	605a      	str	r2, [r3, #4]
 8001ca6:	609a      	str	r2, [r3, #8]
 8001ca8:	60da      	str	r2, [r3, #12]
 8001caa:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4a19      	ldr	r2, [pc, #100]	; (8001d18 <HAL_SPI_MspInit+0x84>)
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	d12b      	bne.n	8001d0e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	613b      	str	r3, [r7, #16]
 8001cba:	4b18      	ldr	r3, [pc, #96]	; (8001d1c <HAL_SPI_MspInit+0x88>)
 8001cbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cbe:	4a17      	ldr	r2, [pc, #92]	; (8001d1c <HAL_SPI_MspInit+0x88>)
 8001cc0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001cc4:	6453      	str	r3, [r2, #68]	; 0x44
 8001cc6:	4b15      	ldr	r3, [pc, #84]	; (8001d1c <HAL_SPI_MspInit+0x88>)
 8001cc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001cce:	613b      	str	r3, [r7, #16]
 8001cd0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	60fb      	str	r3, [r7, #12]
 8001cd6:	4b11      	ldr	r3, [pc, #68]	; (8001d1c <HAL_SPI_MspInit+0x88>)
 8001cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cda:	4a10      	ldr	r2, [pc, #64]	; (8001d1c <HAL_SPI_MspInit+0x88>)
 8001cdc:	f043 0301 	orr.w	r3, r3, #1
 8001ce0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ce2:	4b0e      	ldr	r3, [pc, #56]	; (8001d1c <HAL_SPI_MspInit+0x88>)
 8001ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ce6:	f003 0301 	and.w	r3, r3, #1
 8001cea:	60fb      	str	r3, [r7, #12]
 8001cec:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001cee:	23e0      	movs	r3, #224	; 0xe0
 8001cf0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cf2:	2302      	movs	r3, #2
 8001cf4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cfa:	2303      	movs	r3, #3
 8001cfc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001cfe:	2305      	movs	r3, #5
 8001d00:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d02:	f107 0314 	add.w	r3, r7, #20
 8001d06:	4619      	mov	r1, r3
 8001d08:	4805      	ldr	r0, [pc, #20]	; (8001d20 <HAL_SPI_MspInit+0x8c>)
 8001d0a:	f001 ff8b 	bl	8003c24 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001d0e:	bf00      	nop
 8001d10:	3728      	adds	r7, #40	; 0x28
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}
 8001d16:	bf00      	nop
 8001d18:	40013000 	.word	0x40013000
 8001d1c:	40023800 	.word	0x40023800
 8001d20:	40020000 	.word	0x40020000

08001d24 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b08c      	sub	sp, #48	; 0x30
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d2c:	f107 031c 	add.w	r3, r7, #28
 8001d30:	2200      	movs	r2, #0
 8001d32:	601a      	str	r2, [r3, #0]
 8001d34:	605a      	str	r2, [r3, #4]
 8001d36:	609a      	str	r2, [r3, #8]
 8001d38:	60da      	str	r2, [r3, #12]
 8001d3a:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	4a35      	ldr	r2, [pc, #212]	; (8001e18 <HAL_TIM_Base_MspInit+0xf4>)
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d116      	bne.n	8001d74 <HAL_TIM_Base_MspInit+0x50>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001d46:	2300      	movs	r3, #0
 8001d48:	61bb      	str	r3, [r7, #24]
 8001d4a:	4b34      	ldr	r3, [pc, #208]	; (8001e1c <HAL_TIM_Base_MspInit+0xf8>)
 8001d4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d4e:	4a33      	ldr	r2, [pc, #204]	; (8001e1c <HAL_TIM_Base_MspInit+0xf8>)
 8001d50:	f043 0301 	orr.w	r3, r3, #1
 8001d54:	6453      	str	r3, [r2, #68]	; 0x44
 8001d56:	4b31      	ldr	r3, [pc, #196]	; (8001e1c <HAL_TIM_Base_MspInit+0xf8>)
 8001d58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d5a:	f003 0301 	and.w	r3, r3, #1
 8001d5e:	61bb      	str	r3, [r7, #24]
 8001d60:	69bb      	ldr	r3, [r7, #24]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8001d62:	2200      	movs	r2, #0
 8001d64:	2100      	movs	r1, #0
 8001d66:	2018      	movs	r0, #24
 8001d68:	f001 fb52 	bl	8003410 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8001d6c:	2018      	movs	r0, #24
 8001d6e:	f001 fb6b 	bl	8003448 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001d72:	e04c      	b.n	8001e0e <HAL_TIM_Base_MspInit+0xea>
  else if(htim_base->Instance==TIM2)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d7c:	d10e      	bne.n	8001d9c <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001d7e:	2300      	movs	r3, #0
 8001d80:	617b      	str	r3, [r7, #20]
 8001d82:	4b26      	ldr	r3, [pc, #152]	; (8001e1c <HAL_TIM_Base_MspInit+0xf8>)
 8001d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d86:	4a25      	ldr	r2, [pc, #148]	; (8001e1c <HAL_TIM_Base_MspInit+0xf8>)
 8001d88:	f043 0301 	orr.w	r3, r3, #1
 8001d8c:	6413      	str	r3, [r2, #64]	; 0x40
 8001d8e:	4b23      	ldr	r3, [pc, #140]	; (8001e1c <HAL_TIM_Base_MspInit+0xf8>)
 8001d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d92:	f003 0301 	and.w	r3, r3, #1
 8001d96:	617b      	str	r3, [r7, #20]
 8001d98:	697b      	ldr	r3, [r7, #20]
}
 8001d9a:	e038      	b.n	8001e0e <HAL_TIM_Base_MspInit+0xea>
  else if(htim_base->Instance==TIM3)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	4a1f      	ldr	r2, [pc, #124]	; (8001e20 <HAL_TIM_Base_MspInit+0xfc>)
 8001da2:	4293      	cmp	r3, r2
 8001da4:	d133      	bne.n	8001e0e <HAL_TIM_Base_MspInit+0xea>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001da6:	2300      	movs	r3, #0
 8001da8:	613b      	str	r3, [r7, #16]
 8001daa:	4b1c      	ldr	r3, [pc, #112]	; (8001e1c <HAL_TIM_Base_MspInit+0xf8>)
 8001dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dae:	4a1b      	ldr	r2, [pc, #108]	; (8001e1c <HAL_TIM_Base_MspInit+0xf8>)
 8001db0:	f043 0302 	orr.w	r3, r3, #2
 8001db4:	6413      	str	r3, [r2, #64]	; 0x40
 8001db6:	4b19      	ldr	r3, [pc, #100]	; (8001e1c <HAL_TIM_Base_MspInit+0xf8>)
 8001db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dba:	f003 0302 	and.w	r3, r3, #2
 8001dbe:	613b      	str	r3, [r7, #16]
 8001dc0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	60fb      	str	r3, [r7, #12]
 8001dc6:	4b15      	ldr	r3, [pc, #84]	; (8001e1c <HAL_TIM_Base_MspInit+0xf8>)
 8001dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dca:	4a14      	ldr	r2, [pc, #80]	; (8001e1c <HAL_TIM_Base_MspInit+0xf8>)
 8001dcc:	f043 0304 	orr.w	r3, r3, #4
 8001dd0:	6313      	str	r3, [r2, #48]	; 0x30
 8001dd2:	4b12      	ldr	r3, [pc, #72]	; (8001e1c <HAL_TIM_Base_MspInit+0xf8>)
 8001dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dd6:	f003 0304 	and.w	r3, r3, #4
 8001dda:	60fb      	str	r3, [r7, #12]
 8001ddc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TIM3_CH1_IMD_IN_Pin;
 8001dde:	2340      	movs	r3, #64	; 0x40
 8001de0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001de2:	2302      	movs	r3, #2
 8001de4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001de6:	2300      	movs	r3, #0
 8001de8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dea:	2300      	movs	r3, #0
 8001dec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001dee:	2302      	movs	r3, #2
 8001df0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(TIM3_CH1_IMD_IN_GPIO_Port, &GPIO_InitStruct);
 8001df2:	f107 031c 	add.w	r3, r7, #28
 8001df6:	4619      	mov	r1, r3
 8001df8:	480a      	ldr	r0, [pc, #40]	; (8001e24 <HAL_TIM_Base_MspInit+0x100>)
 8001dfa:	f001 ff13 	bl	8003c24 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8001dfe:	2200      	movs	r2, #0
 8001e00:	2105      	movs	r1, #5
 8001e02:	201d      	movs	r0, #29
 8001e04:	f001 fb04 	bl	8003410 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001e08:	201d      	movs	r0, #29
 8001e0a:	f001 fb1d 	bl	8003448 <HAL_NVIC_EnableIRQ>
}
 8001e0e:	bf00      	nop
 8001e10:	3730      	adds	r7, #48	; 0x30
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}
 8001e16:	bf00      	nop
 8001e18:	40010000 	.word	0x40010000
 8001e1c:	40023800 	.word	0x40023800
 8001e20:	40000400 	.word	0x40000400
 8001e24:	40020800 	.word	0x40020800

08001e28 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b088      	sub	sp, #32
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e30:	f107 030c 	add.w	r3, r7, #12
 8001e34:	2200      	movs	r2, #0
 8001e36:	601a      	str	r2, [r3, #0]
 8001e38:	605a      	str	r2, [r3, #4]
 8001e3a:	609a      	str	r2, [r3, #8]
 8001e3c:	60da      	str	r2, [r3, #12]
 8001e3e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4a12      	ldr	r2, [pc, #72]	; (8001e90 <HAL_TIM_MspPostInit+0x68>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d11e      	bne.n	8001e88 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	60bb      	str	r3, [r7, #8]
 8001e4e:	4b11      	ldr	r3, [pc, #68]	; (8001e94 <HAL_TIM_MspPostInit+0x6c>)
 8001e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e52:	4a10      	ldr	r2, [pc, #64]	; (8001e94 <HAL_TIM_MspPostInit+0x6c>)
 8001e54:	f043 0301 	orr.w	r3, r3, #1
 8001e58:	6313      	str	r3, [r2, #48]	; 0x30
 8001e5a:	4b0e      	ldr	r3, [pc, #56]	; (8001e94 <HAL_TIM_MspPostInit+0x6c>)
 8001e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e5e:	f003 0301 	and.w	r3, r3, #1
 8001e62:	60bb      	str	r3, [r7, #8]
 8001e64:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = TIM1_CH1_BLUE_Pin|TIM1_CH2_GREEN_Pin|TIM1_CH3_RED_Pin;
 8001e66:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8001e6a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e6c:	2302      	movs	r3, #2
 8001e6e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e70:	2300      	movs	r3, #0
 8001e72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e74:	2300      	movs	r3, #0
 8001e76:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001e78:	2301      	movs	r3, #1
 8001e7a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e7c:	f107 030c 	add.w	r3, r7, #12
 8001e80:	4619      	mov	r1, r3
 8001e82:	4805      	ldr	r0, [pc, #20]	; (8001e98 <HAL_TIM_MspPostInit+0x70>)
 8001e84:	f001 fece 	bl	8003c24 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001e88:	bf00      	nop
 8001e8a:	3720      	adds	r7, #32
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	bd80      	pop	{r7, pc}
 8001e90:	40010000 	.word	0x40010000
 8001e94:	40023800 	.word	0x40023800
 8001e98:	40020000 	.word	0x40020000

08001e9c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b08a      	sub	sp, #40	; 0x28
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ea4:	f107 0314 	add.w	r3, r7, #20
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	601a      	str	r2, [r3, #0]
 8001eac:	605a      	str	r2, [r3, #4]
 8001eae:	609a      	str	r2, [r3, #8]
 8001eb0:	60da      	str	r2, [r3, #12]
 8001eb2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4a19      	ldr	r2, [pc, #100]	; (8001f20 <HAL_UART_MspInit+0x84>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d12b      	bne.n	8001f16 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	613b      	str	r3, [r7, #16]
 8001ec2:	4b18      	ldr	r3, [pc, #96]	; (8001f24 <HAL_UART_MspInit+0x88>)
 8001ec4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ec6:	4a17      	ldr	r2, [pc, #92]	; (8001f24 <HAL_UART_MspInit+0x88>)
 8001ec8:	f043 0310 	orr.w	r3, r3, #16
 8001ecc:	6453      	str	r3, [r2, #68]	; 0x44
 8001ece:	4b15      	ldr	r3, [pc, #84]	; (8001f24 <HAL_UART_MspInit+0x88>)
 8001ed0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ed2:	f003 0310 	and.w	r3, r3, #16
 8001ed6:	613b      	str	r3, [r7, #16]
 8001ed8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001eda:	2300      	movs	r3, #0
 8001edc:	60fb      	str	r3, [r7, #12]
 8001ede:	4b11      	ldr	r3, [pc, #68]	; (8001f24 <HAL_UART_MspInit+0x88>)
 8001ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ee2:	4a10      	ldr	r2, [pc, #64]	; (8001f24 <HAL_UART_MspInit+0x88>)
 8001ee4:	f043 0302 	orr.w	r3, r3, #2
 8001ee8:	6313      	str	r3, [r2, #48]	; 0x30
 8001eea:	4b0e      	ldr	r3, [pc, #56]	; (8001f24 <HAL_UART_MspInit+0x88>)
 8001eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eee:	f003 0302 	and.w	r3, r3, #2
 8001ef2:	60fb      	str	r3, [r7, #12]
 8001ef4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001ef6:	23c0      	movs	r3, #192	; 0xc0
 8001ef8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001efa:	2302      	movs	r3, #2
 8001efc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001efe:	2300      	movs	r3, #0
 8001f00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f02:	2303      	movs	r3, #3
 8001f04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001f06:	2307      	movs	r3, #7
 8001f08:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f0a:	f107 0314 	add.w	r3, r7, #20
 8001f0e:	4619      	mov	r1, r3
 8001f10:	4805      	ldr	r0, [pc, #20]	; (8001f28 <HAL_UART_MspInit+0x8c>)
 8001f12:	f001 fe87 	bl	8003c24 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001f16:	bf00      	nop
 8001f18:	3728      	adds	r7, #40	; 0x28
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}
 8001f1e:	bf00      	nop
 8001f20:	40011000 	.word	0x40011000
 8001f24:	40023800 	.word	0x40023800
 8001f28:	40020400 	.word	0x40020400

08001f2c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b08c      	sub	sp, #48	; 0x30
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001f34:	2300      	movs	r3, #0
 8001f36:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM9 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, TickPriority ,0);
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	6879      	ldr	r1, [r7, #4]
 8001f40:	2018      	movs	r0, #24
 8001f42:	f001 fa65 	bl	8003410 <HAL_NVIC_SetPriority>

  /* Enable the TIM9 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8001f46:	2018      	movs	r0, #24
 8001f48:	f001 fa7e 	bl	8003448 <HAL_NVIC_EnableIRQ>
  /* Enable TIM9 clock */
  __HAL_RCC_TIM9_CLK_ENABLE();
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	60fb      	str	r3, [r7, #12]
 8001f50:	4b1f      	ldr	r3, [pc, #124]	; (8001fd0 <HAL_InitTick+0xa4>)
 8001f52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f54:	4a1e      	ldr	r2, [pc, #120]	; (8001fd0 <HAL_InitTick+0xa4>)
 8001f56:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f5a:	6453      	str	r3, [r2, #68]	; 0x44
 8001f5c:	4b1c      	ldr	r3, [pc, #112]	; (8001fd0 <HAL_InitTick+0xa4>)
 8001f5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f60:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f64:	60fb      	str	r3, [r7, #12]
 8001f66:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001f68:	f107 0210 	add.w	r2, r7, #16
 8001f6c:	f107 0314 	add.w	r3, r7, #20
 8001f70:	4611      	mov	r1, r2
 8001f72:	4618      	mov	r0, r3
 8001f74:	f002 fc98 	bl	80048a8 <HAL_RCC_GetClockConfig>

  /* Compute TIM9 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8001f78:	f002 fc82 	bl	8004880 <HAL_RCC_GetPCLK2Freq>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	005b      	lsls	r3, r3, #1
 8001f80:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM9 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001f82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f84:	4a13      	ldr	r2, [pc, #76]	; (8001fd4 <HAL_InitTick+0xa8>)
 8001f86:	fba2 2303 	umull	r2, r3, r2, r3
 8001f8a:	0c9b      	lsrs	r3, r3, #18
 8001f8c:	3b01      	subs	r3, #1
 8001f8e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM9 */
  htim9.Instance = TIM9;
 8001f90:	4b11      	ldr	r3, [pc, #68]	; (8001fd8 <HAL_InitTick+0xac>)
 8001f92:	4a12      	ldr	r2, [pc, #72]	; (8001fdc <HAL_InitTick+0xb0>)
 8001f94:	601a      	str	r2, [r3, #0]
  + Period = [(TIM9CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim9.Init.Period = (1000000U / 1000U) - 1U;
 8001f96:	4b10      	ldr	r3, [pc, #64]	; (8001fd8 <HAL_InitTick+0xac>)
 8001f98:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001f9c:	60da      	str	r2, [r3, #12]
  htim9.Init.Prescaler = uwPrescalerValue;
 8001f9e:	4a0e      	ldr	r2, [pc, #56]	; (8001fd8 <HAL_InitTick+0xac>)
 8001fa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fa2:	6053      	str	r3, [r2, #4]
  htim9.Init.ClockDivision = 0;
 8001fa4:	4b0c      	ldr	r3, [pc, #48]	; (8001fd8 <HAL_InitTick+0xac>)
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	611a      	str	r2, [r3, #16]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001faa:	4b0b      	ldr	r3, [pc, #44]	; (8001fd8 <HAL_InitTick+0xac>)
 8001fac:	2200      	movs	r2, #0
 8001fae:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim9) == HAL_OK)
 8001fb0:	4809      	ldr	r0, [pc, #36]	; (8001fd8 <HAL_InitTick+0xac>)
 8001fb2:	f003 fa53 	bl	800545c <HAL_TIM_Base_Init>
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d104      	bne.n	8001fc6 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim9);
 8001fbc:	4806      	ldr	r0, [pc, #24]	; (8001fd8 <HAL_InitTick+0xac>)
 8001fbe:	f003 fb05 	bl	80055cc <HAL_TIM_Base_Start_IT>
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	e000      	b.n	8001fc8 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8001fc6:	2301      	movs	r3, #1
}
 8001fc8:	4618      	mov	r0, r3
 8001fca:	3730      	adds	r7, #48	; 0x30
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	bd80      	pop	{r7, pc}
 8001fd0:	40023800 	.word	0x40023800
 8001fd4:	431bde83 	.word	0x431bde83
 8001fd8:	20004ef4 	.word	0x20004ef4
 8001fdc:	40014000 	.word	0x40014000

08001fe0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001fe4:	e7fe      	b.n	8001fe4 <NMI_Handler+0x4>

08001fe6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001fe6:	b480      	push	{r7}
 8001fe8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001fea:	e7fe      	b.n	8001fea <HardFault_Handler+0x4>

08001fec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001fec:	b480      	push	{r7}
 8001fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ff0:	e7fe      	b.n	8001ff0 <MemManage_Handler+0x4>

08001ff2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ff2:	b480      	push	{r7}
 8001ff4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ff6:	e7fe      	b.n	8001ff6 <BusFault_Handler+0x4>

08001ff8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ffc:	e7fe      	b.n	8001ffc <UsageFault_Handler+0x4>

08001ffe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ffe:	b480      	push	{r7}
 8002000:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002002:	bf00      	nop
 8002004:	46bd      	mov	sp, r7
 8002006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200a:	4770      	bx	lr

0800200c <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002010:	4803      	ldr	r0, [pc, #12]	; (8002020 <TIM1_BRK_TIM9_IRQHandler+0x14>)
 8002012:	f003 fc56 	bl	80058c2 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim9);
 8002016:	4803      	ldr	r0, [pc, #12]	; (8002024 <TIM1_BRK_TIM9_IRQHandler+0x18>)
 8002018:	f003 fc53 	bl	80058c2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 800201c:	bf00      	nop
 800201e:	bd80      	pop	{r7, pc}
 8002020:	20004de4 	.word	0x20004de4
 8002024:	20004ef4 	.word	0x20004ef4

08002028 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800202c:	4802      	ldr	r0, [pc, #8]	; (8002038 <TIM3_IRQHandler+0x10>)
 800202e:	f003 fc48 	bl	80058c2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002032:	bf00      	nop
 8002034:	bd80      	pop	{r7, pc}
 8002036:	bf00      	nop
 8002038:	20004cb0 	.word	0x20004cb0

0800203c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002040:	4802      	ldr	r0, [pc, #8]	; (800204c <DMA2_Stream0_IRQHandler+0x10>)
 8002042:	f001 fb85 	bl	8003750 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002046:	bf00      	nop
 8002048:	bd80      	pop	{r7, pc}
 800204a:	bf00      	nop
 800204c:	20004d84 	.word	0x20004d84

08002050 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b086      	sub	sp, #24
 8002054:	af00      	add	r7, sp, #0
 8002056:	60f8      	str	r0, [r7, #12]
 8002058:	60b9      	str	r1, [r7, #8]
 800205a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800205c:	2300      	movs	r3, #0
 800205e:	617b      	str	r3, [r7, #20]
 8002060:	e00a      	b.n	8002078 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002062:	f7fe fdd1 	bl	8000c08 <__io_getchar>
 8002066:	4601      	mov	r1, r0
 8002068:	68bb      	ldr	r3, [r7, #8]
 800206a:	1c5a      	adds	r2, r3, #1
 800206c:	60ba      	str	r2, [r7, #8]
 800206e:	b2ca      	uxtb	r2, r1
 8002070:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002072:	697b      	ldr	r3, [r7, #20]
 8002074:	3301      	adds	r3, #1
 8002076:	617b      	str	r3, [r7, #20]
 8002078:	697a      	ldr	r2, [r7, #20]
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	429a      	cmp	r2, r3
 800207e:	dbf0      	blt.n	8002062 <_read+0x12>
	}

return len;
 8002080:	687b      	ldr	r3, [r7, #4]
}
 8002082:	4618      	mov	r0, r3
 8002084:	3718      	adds	r7, #24
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}

0800208a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800208a:	b580      	push	{r7, lr}
 800208c:	b086      	sub	sp, #24
 800208e:	af00      	add	r7, sp, #0
 8002090:	60f8      	str	r0, [r7, #12]
 8002092:	60b9      	str	r1, [r7, #8]
 8002094:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002096:	2300      	movs	r3, #0
 8002098:	617b      	str	r3, [r7, #20]
 800209a:	e009      	b.n	80020b0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800209c:	68bb      	ldr	r3, [r7, #8]
 800209e:	1c5a      	adds	r2, r3, #1
 80020a0:	60ba      	str	r2, [r7, #8]
 80020a2:	781b      	ldrb	r3, [r3, #0]
 80020a4:	4618      	mov	r0, r3
 80020a6:	f7fe fd9d 	bl	8000be4 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020aa:	697b      	ldr	r3, [r7, #20]
 80020ac:	3301      	adds	r3, #1
 80020ae:	617b      	str	r3, [r7, #20]
 80020b0:	697a      	ldr	r2, [r7, #20]
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	429a      	cmp	r2, r3
 80020b6:	dbf1      	blt.n	800209c <_write+0x12>
	}
	return len;
 80020b8:	687b      	ldr	r3, [r7, #4]
}
 80020ba:	4618      	mov	r0, r3
 80020bc:	3718      	adds	r7, #24
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd80      	pop	{r7, pc}

080020c2 <_close>:

int _close(int file)
{
 80020c2:	b480      	push	{r7}
 80020c4:	b083      	sub	sp, #12
 80020c6:	af00      	add	r7, sp, #0
 80020c8:	6078      	str	r0, [r7, #4]
	return -1;
 80020ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80020ce:	4618      	mov	r0, r3
 80020d0:	370c      	adds	r7, #12
 80020d2:	46bd      	mov	sp, r7
 80020d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d8:	4770      	bx	lr

080020da <_fstat>:


int _fstat(int file, struct stat *st)
{
 80020da:	b480      	push	{r7}
 80020dc:	b083      	sub	sp, #12
 80020de:	af00      	add	r7, sp, #0
 80020e0:	6078      	str	r0, [r7, #4]
 80020e2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80020ea:	605a      	str	r2, [r3, #4]
	return 0;
 80020ec:	2300      	movs	r3, #0
}
 80020ee:	4618      	mov	r0, r3
 80020f0:	370c      	adds	r7, #12
 80020f2:	46bd      	mov	sp, r7
 80020f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f8:	4770      	bx	lr

080020fa <_isatty>:

int _isatty(int file)
{
 80020fa:	b480      	push	{r7}
 80020fc:	b083      	sub	sp, #12
 80020fe:	af00      	add	r7, sp, #0
 8002100:	6078      	str	r0, [r7, #4]
	return 1;
 8002102:	2301      	movs	r3, #1
}
 8002104:	4618      	mov	r0, r3
 8002106:	370c      	adds	r7, #12
 8002108:	46bd      	mov	sp, r7
 800210a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210e:	4770      	bx	lr

08002110 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002110:	b480      	push	{r7}
 8002112:	b085      	sub	sp, #20
 8002114:	af00      	add	r7, sp, #0
 8002116:	60f8      	str	r0, [r7, #12]
 8002118:	60b9      	str	r1, [r7, #8]
 800211a:	607a      	str	r2, [r7, #4]
	return 0;
 800211c:	2300      	movs	r3, #0
}
 800211e:	4618      	mov	r0, r3
 8002120:	3714      	adds	r7, #20
 8002122:	46bd      	mov	sp, r7
 8002124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002128:	4770      	bx	lr
	...

0800212c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b086      	sub	sp, #24
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002134:	4a14      	ldr	r2, [pc, #80]	; (8002188 <_sbrk+0x5c>)
 8002136:	4b15      	ldr	r3, [pc, #84]	; (800218c <_sbrk+0x60>)
 8002138:	1ad3      	subs	r3, r2, r3
 800213a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800213c:	697b      	ldr	r3, [r7, #20]
 800213e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002140:	4b13      	ldr	r3, [pc, #76]	; (8002190 <_sbrk+0x64>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	2b00      	cmp	r3, #0
 8002146:	d102      	bne.n	800214e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002148:	4b11      	ldr	r3, [pc, #68]	; (8002190 <_sbrk+0x64>)
 800214a:	4a12      	ldr	r2, [pc, #72]	; (8002194 <_sbrk+0x68>)
 800214c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800214e:	4b10      	ldr	r3, [pc, #64]	; (8002190 <_sbrk+0x64>)
 8002150:	681a      	ldr	r2, [r3, #0]
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	4413      	add	r3, r2
 8002156:	693a      	ldr	r2, [r7, #16]
 8002158:	429a      	cmp	r2, r3
 800215a:	d207      	bcs.n	800216c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800215c:	f008 f9ce 	bl	800a4fc <__errno>
 8002160:	4603      	mov	r3, r0
 8002162:	220c      	movs	r2, #12
 8002164:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002166:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800216a:	e009      	b.n	8002180 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800216c:	4b08      	ldr	r3, [pc, #32]	; (8002190 <_sbrk+0x64>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002172:	4b07      	ldr	r3, [pc, #28]	; (8002190 <_sbrk+0x64>)
 8002174:	681a      	ldr	r2, [r3, #0]
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	4413      	add	r3, r2
 800217a:	4a05      	ldr	r2, [pc, #20]	; (8002190 <_sbrk+0x64>)
 800217c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800217e:	68fb      	ldr	r3, [r7, #12]
}
 8002180:	4618      	mov	r0, r3
 8002182:	3718      	adds	r7, #24
 8002184:	46bd      	mov	sp, r7
 8002186:	bd80      	pop	{r7, pc}
 8002188:	20020000 	.word	0x20020000
 800218c:	00000400 	.word	0x00000400
 8002190:	20000118 	.word	0x20000118
 8002194:	20005998 	.word	0x20005998

08002198 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002198:	b480      	push	{r7}
 800219a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800219c:	4b06      	ldr	r3, [pc, #24]	; (80021b8 <SystemInit+0x20>)
 800219e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021a2:	4a05      	ldr	r2, [pc, #20]	; (80021b8 <SystemInit+0x20>)
 80021a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80021a8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80021ac:	bf00      	nop
 80021ae:	46bd      	mov	sp, r7
 80021b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b4:	4770      	bx	lr
 80021b6:	bf00      	nop
 80021b8:	e000ed00 	.word	0xe000ed00

080021bc <start_timers>:
#include <stdint.h>
#include "main.h"
#include "timer_utils.h"

void start_timers() {
 80021bc:	b580      	push	{r7, lr}
 80021be:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start(&htim2);
 80021c0:	4802      	ldr	r0, [pc, #8]	; (80021cc <start_timers+0x10>)
 80021c2:	f003 f99b 	bl	80054fc <HAL_TIM_Base_Start>
}
 80021c6:	bf00      	nop
 80021c8:	bd80      	pop	{r7, pc}
 80021ca:	bf00      	nop
 80021cc:	20004e84 	.word	0x20004e84

080021d0 <delay_us>:

void delay_us(uint16_t us) {
 80021d0:	b480      	push	{r7}
 80021d2:	b083      	sub	sp, #12
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	4603      	mov	r3, r0
 80021d8:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim2, 0);
 80021da:	4b09      	ldr	r3, [pc, #36]	; (8002200 <delay_us+0x30>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	2200      	movs	r2, #0
 80021e0:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim2) < us) { asm("NOP"); }
 80021e2:	e000      	b.n	80021e6 <delay_us+0x16>
 80021e4:	bf00      	nop
 80021e6:	4b06      	ldr	r3, [pc, #24]	; (8002200 <delay_us+0x30>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80021ec:	88fb      	ldrh	r3, [r7, #6]
 80021ee:	429a      	cmp	r2, r3
 80021f0:	d3f8      	bcc.n	80021e4 <delay_us+0x14>
}
 80021f2:	bf00      	nop
 80021f4:	bf00      	nop
 80021f6:	370c      	adds	r7, #12
 80021f8:	46bd      	mov	sp, r7
 80021fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fe:	4770      	bx	lr
 8002200:	20004e84 	.word	0x20004e84

08002204 <ext_led_blink_thread_fn>:
const osThreadAttr_t ext_led_blink_thread_attrs = {
	.name = "ext_led_blink_thread",
	.priority = (osPriority_t)osPriorityIdle
};

void ext_led_blink_thread_fn(void* arg) {
 8002204:	b580      	push	{r7, lr}
 8002206:	b082      	sub	sp, #8
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
	while (1) {
		HAL_GPIO_TogglePin(GPIOB, CONTACTOR_Pin);
 800220c:	2102      	movs	r1, #2
 800220e:	4804      	ldr	r0, [pc, #16]	; (8002220 <ext_led_blink_thread_fn+0x1c>)
 8002210:	f001 febd 	bl	8003f8e <HAL_GPIO_TogglePin>
		osDelay(1000);
 8002214:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002218:	f005 fa05 	bl	8007626 <osDelay>
		HAL_GPIO_TogglePin(GPIOB, CONTACTOR_Pin);
 800221c:	e7f6      	b.n	800220c <ext_led_blink_thread_fn+0x8>
 800221e:	bf00      	nop
 8002220:	40020400 	.word	0x40020400

08002224 <fsm_thread_fn>:
const osThreadAttr_t fsm_thread_attrs = {
	.name = "state_machine_thread",
	.priority = (osPriority_t)osPriorityNormal
};

void fsm_thread_fn(void* arg) {
 8002224:	b580      	push	{r7, lr}
 8002226:	b082      	sub	sp, #8
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
	while (1) {
		printf("buck temp = %.4f\r\n", global_bms_data.buck_temp);
 800222c:	4b1b      	ldr	r3, [pc, #108]	; (800229c <fsm_thread_fn+0x78>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	4618      	mov	r0, r3
 8002232:	f7fe fab3 	bl	800079c <__aeabi_f2d>
 8002236:	4602      	mov	r2, r0
 8002238:	460b      	mov	r3, r1
 800223a:	4819      	ldr	r0, [pc, #100]	; (80022a0 <fsm_thread_fn+0x7c>)
 800223c:	f008 f99e 	bl	800a57c <iprintf>
		printf("mc cap voltage = %.4f\r\n", global_bms_data.mc_cap_voltage);
 8002240:	4b16      	ldr	r3, [pc, #88]	; (800229c <fsm_thread_fn+0x78>)
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	4618      	mov	r0, r3
 8002246:	f7fe faa9 	bl	800079c <__aeabi_f2d>
 800224a:	4602      	mov	r2, r0
 800224c:	460b      	mov	r3, r1
 800224e:	4815      	ldr	r0, [pc, #84]	; (80022a4 <fsm_thread_fn+0x80>)
 8002250:	f008 f994 	bl	800a57c <iprintf>
		printf("contactor voltage = %.4f\r\n", global_bms_data.contactor_voltage);
 8002254:	4b11      	ldr	r3, [pc, #68]	; (800229c <fsm_thread_fn+0x78>)
 8002256:	689b      	ldr	r3, [r3, #8]
 8002258:	4618      	mov	r0, r3
 800225a:	f7fe fa9f 	bl	800079c <__aeabi_f2d>
 800225e:	4602      	mov	r2, r0
 8002260:	460b      	mov	r3, r1
 8002262:	4811      	ldr	r0, [pc, #68]	; (80022a8 <fsm_thread_fn+0x84>)
 8002264:	f008 f98a 	bl	800a57c <iprintf>
		printf("battery voltage = %.4f\r\n", global_bms_data.battery.voltage);
 8002268:	4b0c      	ldr	r3, [pc, #48]	; (800229c <fsm_thread_fn+0x78>)
 800226a:	68db      	ldr	r3, [r3, #12]
 800226c:	4618      	mov	r0, r3
 800226e:	f7fe fa95 	bl	800079c <__aeabi_f2d>
 8002272:	4602      	mov	r2, r0
 8002274:	460b      	mov	r3, r1
 8002276:	480d      	ldr	r0, [pc, #52]	; (80022ac <fsm_thread_fn+0x88>)
 8002278:	f008 f980 	bl	800a57c <iprintf>
		printf("battery current = %.4f\r\n\r\n", global_bms_data.battery.current);
 800227c:	4b07      	ldr	r3, [pc, #28]	; (800229c <fsm_thread_fn+0x78>)
 800227e:	691b      	ldr	r3, [r3, #16]
 8002280:	4618      	mov	r0, r3
 8002282:	f7fe fa8b 	bl	800079c <__aeabi_f2d>
 8002286:	4602      	mov	r2, r0
 8002288:	460b      	mov	r3, r1
 800228a:	4809      	ldr	r0, [pc, #36]	; (80022b0 <fsm_thread_fn+0x8c>)
 800228c:	f008 f976 	bl	800a57c <iprintf>

		osDelay(500);
 8002290:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002294:	f005 f9c7 	bl	8007626 <osDelay>
		printf("buck temp = %.4f\r\n", global_bms_data.buck_temp);
 8002298:	e7c8      	b.n	800222c <fsm_thread_fn+0x8>
 800229a:	bf00      	nop
 800229c:	20004a64 	.word	0x20004a64
 80022a0:	0800b984 	.word	0x0800b984
 80022a4:	0800b998 	.word	0x0800b998
 80022a8:	0800b9b0 	.word	0x0800b9b0
 80022ac:	0800b9cc 	.word	0x0800b9cc
 80022b0:	0800b9e8 	.word	0x0800b9e8

080022b4 <HAL_ADC_ConvCpltCallback>:
	.stack_size = 1024*5
};

uint16_t ADC_buffer[ADC_NUM_CONVERSIONS*ADC_DECIMATION_COEFF];

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b084      	sub	sp, #16
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef status = HAL_ADC_Stop_DMA(hadc);
 80022bc:	6878      	ldr	r0, [r7, #4]
 80022be:	f000 fbe5 	bl	8002a8c <HAL_ADC_Stop_DMA>
 80022c2:	4603      	mov	r3, r0
 80022c4:	73fb      	strb	r3, [r7, #15]
	if (status != HAL_OK) {
 80022c6:	7bfb      	ldrb	r3, [r7, #15]
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d006      	beq.n	80022da <HAL_ADC_ConvCpltCallback+0x26>
		printf("Error: HAL_ADC_Stop_DMA failed with status code %d\r\n", status);
 80022cc:	7bfb      	ldrb	r3, [r7, #15]
 80022ce:	4619      	mov	r1, r3
 80022d0:	4807      	ldr	r0, [pc, #28]	; (80022f0 <HAL_ADC_ConvCpltCallback+0x3c>)
 80022d2:	f008 f953 	bl	800a57c <iprintf>
		Error_Handler();
 80022d6:	f7ff fbcf 	bl	8001a78 <Error_Handler>
	}
	osThreadFlagsSet(measurements_thread, 0x00000001U);		// set flag to signal that ADC conversion has completed
 80022da:	4b06      	ldr	r3, [pc, #24]	; (80022f4 <HAL_ADC_ConvCpltCallback+0x40>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	2101      	movs	r1, #1
 80022e0:	4618      	mov	r0, r3
 80022e2:	f005 f8d1 	bl	8007488 <osThreadFlagsSet>
}
 80022e6:	bf00      	nop
 80022e8:	3710      	adds	r7, #16
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bd80      	pop	{r7, pc}
 80022ee:	bf00      	nop
 80022f0:	0800ba18 	.word	0x0800ba18
 80022f4:	20004aec 	.word	0x20004aec

080022f8 <_adc_decimation>:

void _adc_decimation() {
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b084      	sub	sp, #16
 80022fc:	af00      	add	r7, sp, #0
	for (uint8_t i = 0; i < ADC_NUM_CONVERSIONS; i++) {
 80022fe:	2300      	movs	r3, #0
 8002300:	73fb      	strb	r3, [r7, #15]
 8002302:	e04e      	b.n	80023a2 <_adc_decimation+0xaa>
		uint32_t sum = 0;
 8002304:	2300      	movs	r3, #0
 8002306:	60bb      	str	r3, [r7, #8]
		for (uint16_t j = 0; j < ADC_DECIMATION_COEFF; j++) {
 8002308:	2300      	movs	r3, #0
 800230a:	80fb      	strh	r3, [r7, #6]
 800230c:	e00f      	b.n	800232e <_adc_decimation+0x36>
			sum += ADC_buffer[i + ADC_NUM_CONVERSIONS*j];
 800230e:	7bf9      	ldrb	r1, [r7, #15]
 8002310:	88fa      	ldrh	r2, [r7, #6]
 8002312:	4613      	mov	r3, r2
 8002314:	009b      	lsls	r3, r3, #2
 8002316:	4413      	add	r3, r2
 8002318:	440b      	add	r3, r1
 800231a:	4a29      	ldr	r2, [pc, #164]	; (80023c0 <_adc_decimation+0xc8>)
 800231c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002320:	461a      	mov	r2, r3
 8002322:	68bb      	ldr	r3, [r7, #8]
 8002324:	4413      	add	r3, r2
 8002326:	60bb      	str	r3, [r7, #8]
		for (uint16_t j = 0; j < ADC_DECIMATION_COEFF; j++) {
 8002328:	88fb      	ldrh	r3, [r7, #6]
 800232a:	3301      	adds	r3, #1
 800232c:	80fb      	strh	r3, [r7, #6]
 800232e:	88fb      	ldrh	r3, [r7, #6]
 8002330:	2bff      	cmp	r3, #255	; 0xff
 8002332:	d9ec      	bls.n	800230e <_adc_decimation+0x16>
		}
		float voltage = (sum/ADC_DECIMATION_COEFF)*ADC_TO_VOLTAGE_COEFF;
 8002334:	68bb      	ldr	r3, [r7, #8]
 8002336:	0a1b      	lsrs	r3, r3, #8
 8002338:	4618      	mov	r0, r3
 800233a:	f7fe fa0d 	bl	8000758 <__aeabi_ui2d>
 800233e:	a31e      	add	r3, pc, #120	; (adr r3, 80023b8 <_adc_decimation+0xc0>)
 8002340:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002344:	f7fd ff9c 	bl	8000280 <__aeabi_dmul>
 8002348:	4602      	mov	r2, r0
 800234a:	460b      	mov	r3, r1
 800234c:	4610      	mov	r0, r2
 800234e:	4619      	mov	r1, r3
 8002350:	f7fe fa7c 	bl	800084c <__aeabi_d2f>
 8002354:	4603      	mov	r3, r0
 8002356:	603b      	str	r3, [r7, #0]

		if (i == 0) { global_bms_data.buck_temp = voltage; }
 8002358:	7bfb      	ldrb	r3, [r7, #15]
 800235a:	2b00      	cmp	r3, #0
 800235c:	d103      	bne.n	8002366 <_adc_decimation+0x6e>
 800235e:	4a19      	ldr	r2, [pc, #100]	; (80023c4 <_adc_decimation+0xcc>)
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	6013      	str	r3, [r2, #0]
 8002364:	e01a      	b.n	800239c <_adc_decimation+0xa4>
		else if (i == 1) { global_bms_data.battery.current = voltage; }
 8002366:	7bfb      	ldrb	r3, [r7, #15]
 8002368:	2b01      	cmp	r3, #1
 800236a:	d103      	bne.n	8002374 <_adc_decimation+0x7c>
 800236c:	4a15      	ldr	r2, [pc, #84]	; (80023c4 <_adc_decimation+0xcc>)
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	6113      	str	r3, [r2, #16]
 8002372:	e013      	b.n	800239c <_adc_decimation+0xa4>
		else if (i == 2) { global_bms_data.battery.voltage = voltage; }
 8002374:	7bfb      	ldrb	r3, [r7, #15]
 8002376:	2b02      	cmp	r3, #2
 8002378:	d103      	bne.n	8002382 <_adc_decimation+0x8a>
 800237a:	4a12      	ldr	r2, [pc, #72]	; (80023c4 <_adc_decimation+0xcc>)
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	60d3      	str	r3, [r2, #12]
 8002380:	e00c      	b.n	800239c <_adc_decimation+0xa4>
		else if (i == 3) { global_bms_data.mc_cap_voltage = voltage; }
 8002382:	7bfb      	ldrb	r3, [r7, #15]
 8002384:	2b03      	cmp	r3, #3
 8002386:	d103      	bne.n	8002390 <_adc_decimation+0x98>
 8002388:	4a0e      	ldr	r2, [pc, #56]	; (80023c4 <_adc_decimation+0xcc>)
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	6053      	str	r3, [r2, #4]
 800238e:	e005      	b.n	800239c <_adc_decimation+0xa4>
		else if (i == 4) { global_bms_data.contactor_voltage = voltage; }
 8002390:	7bfb      	ldrb	r3, [r7, #15]
 8002392:	2b04      	cmp	r3, #4
 8002394:	d102      	bne.n	800239c <_adc_decimation+0xa4>
 8002396:	4a0b      	ldr	r2, [pc, #44]	; (80023c4 <_adc_decimation+0xcc>)
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	6093      	str	r3, [r2, #8]
	for (uint8_t i = 0; i < ADC_NUM_CONVERSIONS; i++) {
 800239c:	7bfb      	ldrb	r3, [r7, #15]
 800239e:	3301      	adds	r3, #1
 80023a0:	73fb      	strb	r3, [r7, #15]
 80023a2:	7bfb      	ldrb	r3, [r7, #15]
 80023a4:	2b04      	cmp	r3, #4
 80023a6:	d9ad      	bls.n	8002304 <_adc_decimation+0xc>
	}
}
 80023a8:	bf00      	nop
 80023aa:	bf00      	nop
 80023ac:	3710      	adds	r7, #16
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bd80      	pop	{r7, pc}
 80023b2:	bf00      	nop
 80023b4:	f3af 8000 	nop.w
 80023b8:	66666666 	.word	0x66666666
 80023bc:	3f4a6666 	.word	0x3f4a6666
 80023c0:	20004f3c 	.word	0x20004f3c
 80023c4:	20004a64 	.word	0x20004a64

080023c8 <measurements_thread_fn>:

void measurements_thread_fn(void* arg) {
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b084      	sub	sp, #16
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
	while (1) {
		// MISC ADC READINGS
		osKernelLock();
 80023d0:	f004 ff2e 	bl	8007230 <osKernelLock>
		HAL_StatusTypeDef status = HAL_ADC_Start_DMA(&hadc1, (uint32_t*)ADC_buffer, ADC_NUM_CONVERSIONS*ADC_DECIMATION_COEFF);
 80023d4:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 80023d8:	4926      	ldr	r1, [pc, #152]	; (8002474 <measurements_thread_fn+0xac>)
 80023da:	4827      	ldr	r0, [pc, #156]	; (8002478 <measurements_thread_fn+0xb0>)
 80023dc:	f000 fa46 	bl	800286c <HAL_ADC_Start_DMA>
 80023e0:	4603      	mov	r3, r0
 80023e2:	73fb      	strb	r3, [r7, #15]
		if (status != HAL_OK) {
 80023e4:	7bfb      	ldrb	r3, [r7, #15]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d004      	beq.n	80023f4 <measurements_thread_fn+0x2c>
			printf("Error: HAL_ADC_Start_DMA failed with status code %d\r\n", status);
 80023ea:	7bfb      	ldrb	r3, [r7, #15]
 80023ec:	4619      	mov	r1, r3
 80023ee:	4823      	ldr	r0, [pc, #140]	; (800247c <measurements_thread_fn+0xb4>)
 80023f0:	f008 f8c4 	bl	800a57c <iprintf>
		}
		osKernelUnlock();
 80023f4:	f004 ff42 	bl	800727c <osKernelUnlock>
		// wait for signal from HAL_ADC_ConvCpltCallback and give execution over to other threads
		osThreadFlagsWait(0x00000001U, osFlagsWaitAll, 0U);		// 0U for no timeout
 80023f8:	2200      	movs	r2, #0
 80023fa:	2101      	movs	r1, #1
 80023fc:	2001      	movs	r0, #1
 80023fe:	f005 f891 	bl	8007524 <osThreadFlagsWait>
		_adc_decimation();
 8002402:	f7ff ff79 	bl	80022f8 <_adc_decimation>

		// LTC6813 COMMANDS
		osKernelLock();
 8002406:	f004 ff13 	bl	8007230 <osKernelLock>

		Ltc6813_wakeup_sleep(&ltc6813);
 800240a:	481d      	ldr	r0, [pc, #116]	; (8002480 <measurements_thread_fn+0xb8>)
 800240c:	f7fe fe9e 	bl	800114c <Ltc6813_wakeup_sleep>

		printf("CFG A\r\n");
 8002410:	481c      	ldr	r0, [pc, #112]	; (8002484 <measurements_thread_fn+0xbc>)
 8002412:	f008 f939 	bl	800a688 <puts>
		Ltc6813_wakeup_idle(&ltc6813);
 8002416:	481a      	ldr	r0, [pc, #104]	; (8002480 <measurements_thread_fn+0xb8>)
 8002418:	f7fe fead 	bl	8001176 <Ltc6813_wakeup_idle>
		if ( Ltc6813_read_cfga(&ltc6813) ) { printf("PEC SUCCESS\r\n"); }
 800241c:	4818      	ldr	r0, [pc, #96]	; (8002480 <measurements_thread_fn+0xb8>)
 800241e:	f7fe feef 	bl	8001200 <Ltc6813_read_cfga>
 8002422:	4603      	mov	r3, r0
 8002424:	2b00      	cmp	r3, #0
 8002426:	d003      	beq.n	8002430 <measurements_thread_fn+0x68>
 8002428:	4817      	ldr	r0, [pc, #92]	; (8002488 <measurements_thread_fn+0xc0>)
 800242a:	f008 f92d 	bl	800a688 <puts>
 800242e:	e002      	b.n	8002436 <measurements_thread_fn+0x6e>
		else { printf("PEC FAIL\r\n"); }
 8002430:	4816      	ldr	r0, [pc, #88]	; (800248c <measurements_thread_fn+0xc4>)
 8002432:	f008 f929 	bl	800a688 <puts>
		Buffer_print( &(ltc6813.cfga_bfr) );
 8002436:	4816      	ldr	r0, [pc, #88]	; (8002490 <measurements_thread_fn+0xc8>)
 8002438:	f7fe fd7a 	bl	8000f30 <Buffer_print>

		printf("CFG B\r\n");
 800243c:	4815      	ldr	r0, [pc, #84]	; (8002494 <measurements_thread_fn+0xcc>)
 800243e:	f008 f923 	bl	800a688 <puts>
		Ltc6813_wakeup_idle(&ltc6813);
 8002442:	480f      	ldr	r0, [pc, #60]	; (8002480 <measurements_thread_fn+0xb8>)
 8002444:	f7fe fe97 	bl	8001176 <Ltc6813_wakeup_idle>
		if ( Ltc6813_read_cfgb(&ltc6813) ) { printf("PEC SUCCESS\r\n"); }
 8002448:	480d      	ldr	r0, [pc, #52]	; (8002480 <measurements_thread_fn+0xb8>)
 800244a:	f7fe ff0d 	bl	8001268 <Ltc6813_read_cfgb>
 800244e:	4603      	mov	r3, r0
 8002450:	2b00      	cmp	r3, #0
 8002452:	d003      	beq.n	800245c <measurements_thread_fn+0x94>
 8002454:	480c      	ldr	r0, [pc, #48]	; (8002488 <measurements_thread_fn+0xc0>)
 8002456:	f008 f917 	bl	800a688 <puts>
 800245a:	e002      	b.n	8002462 <measurements_thread_fn+0x9a>
		else { printf("PEC FAIL\r\n"); }
 800245c:	480b      	ldr	r0, [pc, #44]	; (800248c <measurements_thread_fn+0xc4>)
 800245e:	f008 f913 	bl	800a688 <puts>
		Buffer_print( &(ltc6813.cfgb_bfr) );
 8002462:	480d      	ldr	r0, [pc, #52]	; (8002498 <measurements_thread_fn+0xd0>)
 8002464:	f7fe fd64 	bl	8000f30 <Buffer_print>

		osKernelUnlock();
 8002468:	f004 ff08 	bl	800727c <osKernelUnlock>

		osDelay(200);
 800246c:	20c8      	movs	r0, #200	; 0xc8
 800246e:	f005 f8da 	bl	8007626 <osDelay>
	while (1) {
 8002472:	e7ad      	b.n	80023d0 <measurements_thread_fn+0x8>
 8002474:	20004f3c 	.word	0x20004f3c
 8002478:	20004cf8 	.word	0x20004cf8
 800247c:	0800ba50 	.word	0x0800ba50
 8002480:	20004b1c 	.word	0x20004b1c
 8002484:	0800ba88 	.word	0x0800ba88
 8002488:	0800ba90 	.word	0x0800ba90
 800248c:	0800baa0 	.word	0x0800baa0
 8002490:	20004bde 	.word	0x20004bde
 8002494:	0800baac 	.word	0x0800baac
 8002498:	20004c43 	.word	0x20004c43

0800249c <InitializeEvent>:


/* USER CODE BEGIN 4 */
/* Defining the conditions necessary for state transitions */

State_t InitializeEvent(void) {
 800249c:	b580      	push	{r7, lr}
 800249e:	af00      	add	r7, sp, #0
	osDelay(3000); // This is added to show it enters the initialize state for 3 seconds during testing
 80024a0:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80024a4:	f005 f8bf 	bl	8007626 <osDelay>
	return Idle;
 80024a8:	2301      	movs	r3, #1
}
 80024aa:	4618      	mov	r0, r3
 80024ac:	bd80      	pop	{r7, pc}
	...

080024b0 <IdleEvent>:

State_t IdleEvent(void) {
 80024b0:	b580      	push	{r7, lr}
 80024b2:	af00      	add	r7, sp, #0
	osThreadResume(MeasurementsHandle); // Resumes measurement if the previous state was Sleep
 80024b4:	4b12      	ldr	r3, [pc, #72]	; (8002500 <IdleEvent+0x50>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4618      	mov	r0, r3
 80024ba:	f004 ffc4 	bl	8007446 <osThreadResume>
	HAL_GPIO_WritePin(CONTACTOR_GPIO_Port, CONTACTOR_Pin, 0);
 80024be:	2200      	movs	r2, #0
 80024c0:	2102      	movs	r1, #2
 80024c2:	4810      	ldr	r0, [pc, #64]	; (8002504 <IdleEvent+0x54>)
 80024c4:	f001 fd4a 	bl	8003f5c <HAL_GPIO_WritePin>
	HAL_UART_Receive (&huart1, UART1_rxBuffer, 4, 5000);
 80024c8:	f241 3388 	movw	r3, #5000	; 0x1388
 80024cc:	2204      	movs	r2, #4
 80024ce:	490e      	ldr	r1, [pc, #56]	; (8002508 <IdleEvent+0x58>)
 80024d0:	480e      	ldr	r0, [pc, #56]	; (800250c <IdleEvent+0x5c>)
 80024d2:	f004 fb6a 	bl	8006baa <HAL_UART_Receive>
	if (UART1_rxBuffer == "Strt") {
 80024d6:	4a0c      	ldr	r2, [pc, #48]	; (8002508 <IdleEvent+0x58>)
 80024d8:	4b0d      	ldr	r3, [pc, #52]	; (8002510 <IdleEvent+0x60>)
 80024da:	429a      	cmp	r2, r3
 80024dc:	d101      	bne.n	80024e2 <IdleEvent+0x32>
		return Precharging;
 80024de:	2302      	movs	r3, #2
 80024e0:	e00c      	b.n	80024fc <IdleEvent+0x4c>
	} else if (UART1_rxBuffer == "Chrg") {
 80024e2:	4a09      	ldr	r2, [pc, #36]	; (8002508 <IdleEvent+0x58>)
 80024e4:	4b0b      	ldr	r3, [pc, #44]	; (8002514 <IdleEvent+0x64>)
 80024e6:	429a      	cmp	r2, r3
 80024e8:	d101      	bne.n	80024ee <IdleEvent+0x3e>
		return Charging;
 80024ea:	2308      	movs	r3, #8
 80024ec:	e006      	b.n	80024fc <IdleEvent+0x4c>
	} else if (UART1_rxBuffer == "Stop") {
 80024ee:	4a06      	ldr	r2, [pc, #24]	; (8002508 <IdleEvent+0x58>)
 80024f0:	4b09      	ldr	r3, [pc, #36]	; (8002518 <IdleEvent+0x68>)
 80024f2:	429a      	cmp	r2, r3
 80024f4:	d101      	bne.n	80024fa <IdleEvent+0x4a>
		return Sleep;
 80024f6:	2305      	movs	r3, #5
 80024f8:	e000      	b.n	80024fc <IdleEvent+0x4c>
	} else {
		return Idle;
 80024fa:	2301      	movs	r3, #1
	}
	return;
}
 80024fc:	4618      	mov	r0, r3
 80024fe:	bd80      	pop	{r7, pc}
 8002500:	2000593c 	.word	0x2000593c
 8002504:	40020400 	.word	0x40020400
 8002508:	2000011c 	.word	0x2000011c
 800250c:	20004d40 	.word	0x20004d40
 8002510:	0800bb40 	.word	0x0800bb40
 8002514:	0800bb48 	.word	0x0800bb48
 8002518:	0800bae8 	.word	0x0800bae8

0800251c <PrechargingEvent>:

State_t PrechargingEvent(void) {
 800251c:	b580      	push	{r7, lr}
 800251e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(PRECHARGE_GPIO_Port, PRECHARGE_Pin, 1);
 8002520:	2201      	movs	r2, #1
 8002522:	2104      	movs	r1, #4
 8002524:	4804      	ldr	r0, [pc, #16]	; (8002538 <PrechargingEvent+0x1c>)
 8002526:	f001 fd19 	bl	8003f5c <HAL_GPIO_WritePin>
	osDelay(3000);
 800252a:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800252e:	f005 f87a 	bl	8007626 <osDelay>
	return Run;
 8002532:	2303      	movs	r3, #3
}
 8002534:	4618      	mov	r0, r3
 8002536:	bd80      	pop	{r7, pc}
 8002538:	40020400 	.word	0x40020400

0800253c <RunEvent>:

State_t RunEvent(void) {
 800253c:	b580      	push	{r7, lr}
 800253e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(CONTACTOR_GPIO_Port, CONTACTOR_Pin, 1);
 8002540:	2201      	movs	r2, #1
 8002542:	2102      	movs	r1, #2
 8002544:	4808      	ldr	r0, [pc, #32]	; (8002568 <RunEvent+0x2c>)
 8002546:	f001 fd09 	bl	8003f5c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PRECHARGE_GPIO_Port, PRECHARGE_Pin, 0);
 800254a:	2200      	movs	r2, #0
 800254c:	2104      	movs	r1, #4
 800254e:	4806      	ldr	r0, [pc, #24]	; (8002568 <RunEvent+0x2c>)
 8002550:	f001 fd04 	bl	8003f5c <HAL_GPIO_WritePin>
	// Replace pin with UART Receive
	if (UART1_rxBuffer == "Stop") {
 8002554:	4a05      	ldr	r2, [pc, #20]	; (800256c <RunEvent+0x30>)
 8002556:	4b06      	ldr	r3, [pc, #24]	; (8002570 <RunEvent+0x34>)
 8002558:	429a      	cmp	r2, r3
 800255a:	d101      	bne.n	8002560 <RunEvent+0x24>
		return Stop;
 800255c:	2304      	movs	r3, #4
 800255e:	e000      	b.n	8002562 <RunEvent+0x26>
	} else {
		return Run;
 8002560:	2303      	movs	r3, #3
	}
}
 8002562:	4618      	mov	r0, r3
 8002564:	bd80      	pop	{r7, pc}
 8002566:	bf00      	nop
 8002568:	40020400 	.word	0x40020400
 800256c:	2000011c 	.word	0x2000011c
 8002570:	0800bae8 	.word	0x0800bae8

08002574 <StopEvent>:

State_t StopEvent(void) {
 8002574:	b580      	push	{r7, lr}
 8002576:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(CONTACTOR_GPIO_Port, CONTACTOR_Pin, 0);
 8002578:	2200      	movs	r2, #0
 800257a:	2102      	movs	r1, #2
 800257c:	4805      	ldr	r0, [pc, #20]	; (8002594 <StopEvent+0x20>)
 800257e:	f001 fced 	bl	8003f5c <HAL_GPIO_WritePin>
	// Replace pin with UART Receive
	if (UART1_rxBuffer == "Rset") {
 8002582:	4a05      	ldr	r2, [pc, #20]	; (8002598 <StopEvent+0x24>)
 8002584:	4b05      	ldr	r3, [pc, #20]	; (800259c <StopEvent+0x28>)
 8002586:	429a      	cmp	r2, r3
 8002588:	d101      	bne.n	800258e <StopEvent+0x1a>
		return Idle;
 800258a:	2301      	movs	r3, #1
 800258c:	e000      	b.n	8002590 <StopEvent+0x1c>
	} else {
		return Stop;
 800258e:	2304      	movs	r3, #4
	}
}
 8002590:	4618      	mov	r0, r3
 8002592:	bd80      	pop	{r7, pc}
 8002594:	40020400 	.word	0x40020400
 8002598:	2000011c 	.word	0x2000011c
 800259c:	0800bb50 	.word	0x0800bb50

080025a0 <SleepEvent>:

State_t SleepEvent(void) {
 80025a0:	b580      	push	{r7, lr}
 80025a2:	af00      	add	r7, sp, #0
	osThreadSuspend(MeasurementsHandle); // Pauses measurements
 80025a4:	4b06      	ldr	r3, [pc, #24]	; (80025c0 <SleepEvent+0x20>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4618      	mov	r0, r3
 80025aa:	f004 ff2b 	bl	8007404 <osThreadSuspend>
	// Replace pin with UART Receive
	if (UART1_rxBuffer == "Rset") {
 80025ae:	4a05      	ldr	r2, [pc, #20]	; (80025c4 <SleepEvent+0x24>)
 80025b0:	4b05      	ldr	r3, [pc, #20]	; (80025c8 <SleepEvent+0x28>)
 80025b2:	429a      	cmp	r2, r3
 80025b4:	d101      	bne.n	80025ba <SleepEvent+0x1a>
		return Idle;
 80025b6:	2301      	movs	r3, #1
 80025b8:	e000      	b.n	80025bc <SleepEvent+0x1c>
	} else {
		return Sleep;
 80025ba:	2305      	movs	r3, #5
	}
}
 80025bc:	4618      	mov	r0, r3
 80025be:	bd80      	pop	{r7, pc}
 80025c0:	2000593c 	.word	0x2000593c
 80025c4:	2000011c 	.word	0x2000011c
 80025c8:	0800bb50 	.word	0x0800bb50

080025cc <NormalDangerFaultEvent>:

State_t NormalDangerFaultEvent(void) {
 80025cc:	b580      	push	{r7, lr}
 80025ce:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(CONTACTOR_GPIO_Port, CONTACTOR_Pin, 0);
 80025d0:	2200      	movs	r2, #0
 80025d2:	2102      	movs	r1, #2
 80025d4:	4805      	ldr	r0, [pc, #20]	; (80025ec <NormalDangerFaultEvent+0x20>)
 80025d6:	f001 fcc1 	bl	8003f5c <HAL_GPIO_WritePin>
	// Replace pin with UART Receive
	if (UART1_rxBuffer == "Rset") {
 80025da:	4a05      	ldr	r2, [pc, #20]	; (80025f0 <NormalDangerFaultEvent+0x24>)
 80025dc:	4b05      	ldr	r3, [pc, #20]	; (80025f4 <NormalDangerFaultEvent+0x28>)
 80025de:	429a      	cmp	r2, r3
 80025e0:	d101      	bne.n	80025e6 <NormalDangerFaultEvent+0x1a>
		return Idle;
 80025e2:	2301      	movs	r3, #1
 80025e4:	e000      	b.n	80025e8 <NormalDangerFaultEvent+0x1c>
} else {
		return NormalDangerFault;
 80025e6:	2306      	movs	r3, #6
	}
}
 80025e8:	4618      	mov	r0, r3
 80025ea:	bd80      	pop	{r7, pc}
 80025ec:	40020400 	.word	0x40020400
 80025f0:	2000011c 	.word	0x2000011c
 80025f4:	0800bb50 	.word	0x0800bb50

080025f8 <SevereDangerFaultEvent>:

State_t SevereDangerFaultEvent(void) {
 80025f8:	b580      	push	{r7, lr}
 80025fa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(CONTACTOR_GPIO_Port, CONTACTOR_Pin, 0);
 80025fc:	2200      	movs	r2, #0
 80025fe:	2102      	movs	r1, #2
 8002600:	4802      	ldr	r0, [pc, #8]	; (800260c <SevereDangerFaultEvent+0x14>)
 8002602:	f001 fcab 	bl	8003f5c <HAL_GPIO_WritePin>
	return SevereDangerFault;
 8002606:	2307      	movs	r3, #7
}
 8002608:	4618      	mov	r0, r3
 800260a:	bd80      	pop	{r7, pc}
 800260c:	40020400 	.word	0x40020400

08002610 <ChargingEvent>:

State_t ChargingEvent(void) {
 8002610:	b580      	push	{r7, lr}
 8002612:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(CONTACTOR_GPIO_Port, CONTACTOR_Pin, 1);
 8002614:	2201      	movs	r2, #1
 8002616:	2102      	movs	r1, #2
 8002618:	4808      	ldr	r0, [pc, #32]	; (800263c <ChargingEvent+0x2c>)
 800261a:	f001 fc9f 	bl	8003f5c <HAL_GPIO_WritePin>
	if (global_bms_data.battery.voltage > 51600) {
 800261e:	4b08      	ldr	r3, [pc, #32]	; (8002640 <ChargingEvent+0x30>)
 8002620:	edd3 7a03 	vldr	s15, [r3, #12]
 8002624:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8002644 <ChargingEvent+0x34>
 8002628:	eef4 7ac7 	vcmpe.f32	s15, s14
 800262c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002630:	dd01      	ble.n	8002636 <ChargingEvent+0x26>
		return Charged;
 8002632:	2309      	movs	r3, #9
 8002634:	e000      	b.n	8002638 <ChargingEvent+0x28>
	} else {
		return Charging;
 8002636:	2308      	movs	r3, #8
	}
}
 8002638:	4618      	mov	r0, r3
 800263a:	bd80      	pop	{r7, pc}
 800263c:	40020400 	.word	0x40020400
 8002640:	20004a64 	.word	0x20004a64
 8002644:	47499000 	.word	0x47499000

08002648 <ChargedEvent>:

State_t ChargedEvent(void) {
 8002648:	b580      	push	{r7, lr}
 800264a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(CONTACTOR_GPIO_Port, CONTACTOR_Pin, 0);
 800264c:	2200      	movs	r2, #0
 800264e:	2102      	movs	r1, #2
 8002650:	4805      	ldr	r0, [pc, #20]	; (8002668 <ChargedEvent+0x20>)
 8002652:	f001 fc83 	bl	8003f5c <HAL_GPIO_WritePin>
	// Replace pin with UART Receive
	if (UART1_rxBuffer == "Rset") {
 8002656:	4a05      	ldr	r2, [pc, #20]	; (800266c <ChargedEvent+0x24>)
 8002658:	4b05      	ldr	r3, [pc, #20]	; (8002670 <ChargedEvent+0x28>)
 800265a:	429a      	cmp	r2, r3
 800265c:	d101      	bne.n	8002662 <ChargedEvent+0x1a>
		return Idle;
 800265e:	2301      	movs	r3, #1
 8002660:	e000      	b.n	8002664 <ChargedEvent+0x1c>
} else {
		return Charged;
 8002662:	2309      	movs	r3, #9
	}
}
 8002664:	4618      	mov	r0, r3
 8002666:	bd80      	pop	{r7, pc}
 8002668:	40020400 	.word	0x40020400
 800266c:	2000011c 	.word	0x2000011c
 8002670:	0800bb50 	.word	0x0800bb50

08002674 <BalancingEvent>:

State_t BalancingEvent(void) {
 8002674:	b480      	push	{r7}
 8002676:	af00      	add	r7, sp, #0
	return Balancing;
 8002678:	230a      	movs	r3, #10
}
 800267a:	4618      	mov	r0, r3
 800267c:	46bd      	mov	sp, r7
 800267e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002682:	4770      	bx	lr

08002684 <StartStateMachine>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartStateMachine */
void StartStateMachine(void *argument)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b09c      	sub	sp, #112	; 0x70
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartStateMachine */
  /* Infinite loop */
  for(;;)
  {
	// Print CurrentState in serial terminal if the state changes
	if (OldState != CurrentState) {
 800268c:	4b19      	ldr	r3, [pc, #100]	; (80026f4 <StartStateMachine+0x70>)
 800268e:	781a      	ldrb	r2, [r3, #0]
 8002690:	4b19      	ldr	r3, [pc, #100]	; (80026f8 <StartStateMachine+0x74>)
 8002692:	781b      	ldrb	r3, [r3, #0]
 8002694:	429a      	cmp	r2, r3
 8002696:	d019      	beq.n	80026cc <StartStateMachine+0x48>
		char dataState[100];
		sprintf(dataState, "Current State: %s\r\n", StateNames[CurrentState]);
 8002698:	4b17      	ldr	r3, [pc, #92]	; (80026f8 <StartStateMachine+0x74>)
 800269a:	781b      	ldrb	r3, [r3, #0]
 800269c:	461a      	mov	r2, r3
 800269e:	4b17      	ldr	r3, [pc, #92]	; (80026fc <StartStateMachine+0x78>)
 80026a0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80026a4:	f107 030c 	add.w	r3, r7, #12
 80026a8:	4915      	ldr	r1, [pc, #84]	; (8002700 <StartStateMachine+0x7c>)
 80026aa:	4618      	mov	r0, r3
 80026ac:	f007 fff4 	bl	800a698 <siprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*)dataState, strlen(dataState), 500);
 80026b0:	f107 030c 	add.w	r3, r7, #12
 80026b4:	4618      	mov	r0, r3
 80026b6:	f7fd fd8b 	bl	80001d0 <strlen>
 80026ba:	4603      	mov	r3, r0
 80026bc:	b29a      	uxth	r2, r3
 80026be:	f107 010c 	add.w	r1, r7, #12
 80026c2:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80026c6:	480f      	ldr	r0, [pc, #60]	; (8002704 <StartStateMachine+0x80>)
 80026c8:	f004 f9dd 	bl	8006a86 <HAL_UART_Transmit>
	}
	OldState = CurrentState;
 80026cc:	4b0a      	ldr	r3, [pc, #40]	; (80026f8 <StartStateMachine+0x74>)
 80026ce:	781a      	ldrb	r2, [r3, #0]
 80026d0:	4b08      	ldr	r3, [pc, #32]	; (80026f4 <StartStateMachine+0x70>)
 80026d2:	701a      	strb	r2, [r3, #0]
	CurrentState = (*SM[CurrentState].Event)();
 80026d4:	4b08      	ldr	r3, [pc, #32]	; (80026f8 <StartStateMachine+0x74>)
 80026d6:	781b      	ldrb	r3, [r3, #0]
 80026d8:	4a0b      	ldr	r2, [pc, #44]	; (8002708 <StartStateMachine+0x84>)
 80026da:	00db      	lsls	r3, r3, #3
 80026dc:	4413      	add	r3, r2
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	4798      	blx	r3
 80026e2:	4603      	mov	r3, r0
 80026e4:	461a      	mov	r2, r3
 80026e6:	4b04      	ldr	r3, [pc, #16]	; (80026f8 <StartStateMachine+0x74>)
 80026e8:	701a      	strb	r2, [r3, #0]
	osDelay(200);
 80026ea:	20c8      	movs	r0, #200	; 0xc8
 80026ec:	f004 ff9b 	bl	8007626 <osDelay>
	if (OldState != CurrentState) {
 80026f0:	e7cc      	b.n	800268c <StartStateMachine+0x8>
 80026f2:	bf00      	nop
 80026f4:	20000030 	.word	0x20000030
 80026f8:	20000120 	.word	0x20000120
 80026fc:	20000004 	.word	0x20000004
 8002700:	0800bb58 	.word	0x0800bb58
 8002704:	20004d40 	.word	0x20004d40
 8002708:	20000034 	.word	0x20000034

0800270c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800270c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002744 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002710:	480d      	ldr	r0, [pc, #52]	; (8002748 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002712:	490e      	ldr	r1, [pc, #56]	; (800274c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002714:	4a0e      	ldr	r2, [pc, #56]	; (8002750 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002716:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002718:	e002      	b.n	8002720 <LoopCopyDataInit>

0800271a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800271a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800271c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800271e:	3304      	adds	r3, #4

08002720 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002720:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002722:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002724:	d3f9      	bcc.n	800271a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002726:	4a0b      	ldr	r2, [pc, #44]	; (8002754 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002728:	4c0b      	ldr	r4, [pc, #44]	; (8002758 <LoopFillZerobss+0x26>)
  movs r3, #0
 800272a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800272c:	e001      	b.n	8002732 <LoopFillZerobss>

0800272e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800272e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002730:	3204      	adds	r2, #4

08002732 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002732:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002734:	d3fb      	bcc.n	800272e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002736:	f7ff fd2f 	bl	8002198 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800273a:	f007 fee5 	bl	800a508 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800273e:	f7fe fdc9 	bl	80012d4 <main>
  bx  lr    
 8002742:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002744:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002748:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800274c:	200000fc 	.word	0x200000fc
  ldr r2, =_sidata
 8002750:	0800beb8 	.word	0x0800beb8
  ldr r2, =_sbss
 8002754:	200000fc 	.word	0x200000fc
  ldr r4, =_ebss
 8002758:	20005994 	.word	0x20005994

0800275c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800275c:	e7fe      	b.n	800275c <ADC_IRQHandler>
	...

08002760 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002764:	4b0e      	ldr	r3, [pc, #56]	; (80027a0 <HAL_Init+0x40>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	4a0d      	ldr	r2, [pc, #52]	; (80027a0 <HAL_Init+0x40>)
 800276a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800276e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002770:	4b0b      	ldr	r3, [pc, #44]	; (80027a0 <HAL_Init+0x40>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	4a0a      	ldr	r2, [pc, #40]	; (80027a0 <HAL_Init+0x40>)
 8002776:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800277a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800277c:	4b08      	ldr	r3, [pc, #32]	; (80027a0 <HAL_Init+0x40>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4a07      	ldr	r2, [pc, #28]	; (80027a0 <HAL_Init+0x40>)
 8002782:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002786:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002788:	2003      	movs	r0, #3
 800278a:	f000 fe36 	bl	80033fa <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800278e:	2000      	movs	r0, #0
 8002790:	f7ff fbcc 	bl	8001f2c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002794:	f7ff f976 	bl	8001a84 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002798:	2300      	movs	r3, #0
}
 800279a:	4618      	mov	r0, r3
 800279c:	bd80      	pop	{r7, pc}
 800279e:	bf00      	nop
 80027a0:	40023c00 	.word	0x40023c00

080027a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80027a4:	b480      	push	{r7}
 80027a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80027a8:	4b06      	ldr	r3, [pc, #24]	; (80027c4 <HAL_IncTick+0x20>)
 80027aa:	781b      	ldrb	r3, [r3, #0]
 80027ac:	461a      	mov	r2, r3
 80027ae:	4b06      	ldr	r3, [pc, #24]	; (80027c8 <HAL_IncTick+0x24>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4413      	add	r3, r2
 80027b4:	4a04      	ldr	r2, [pc, #16]	; (80027c8 <HAL_IncTick+0x24>)
 80027b6:	6013      	str	r3, [r2, #0]
}
 80027b8:	bf00      	nop
 80027ba:	46bd      	mov	sp, r7
 80027bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c0:	4770      	bx	lr
 80027c2:	bf00      	nop
 80027c4:	20000090 	.word	0x20000090
 80027c8:	20005940 	.word	0x20005940

080027cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80027cc:	b480      	push	{r7}
 80027ce:	af00      	add	r7, sp, #0
  return uwTick;
 80027d0:	4b03      	ldr	r3, [pc, #12]	; (80027e0 <HAL_GetTick+0x14>)
 80027d2:	681b      	ldr	r3, [r3, #0]
}
 80027d4:	4618      	mov	r0, r3
 80027d6:	46bd      	mov	sp, r7
 80027d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027dc:	4770      	bx	lr
 80027de:	bf00      	nop
 80027e0:	20005940 	.word	0x20005940

080027e4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b084      	sub	sp, #16
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80027ec:	2300      	movs	r3, #0
 80027ee:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d101      	bne.n	80027fa <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80027f6:	2301      	movs	r3, #1
 80027f8:	e033      	b.n	8002862 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d109      	bne.n	8002816 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002802:	6878      	ldr	r0, [r7, #4]
 8002804:	f7ff f96a 	bl	8001adc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2200      	movs	r2, #0
 800280c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	2200      	movs	r2, #0
 8002812:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800281a:	f003 0310 	and.w	r3, r3, #16
 800281e:	2b00      	cmp	r3, #0
 8002820:	d118      	bne.n	8002854 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002826:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800282a:	f023 0302 	bic.w	r3, r3, #2
 800282e:	f043 0202 	orr.w	r2, r3, #2
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002836:	6878      	ldr	r0, [r7, #4]
 8002838:	f000 fab8 	bl	8002dac <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2200      	movs	r2, #0
 8002840:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002846:	f023 0303 	bic.w	r3, r3, #3
 800284a:	f043 0201 	orr.w	r2, r3, #1
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	641a      	str	r2, [r3, #64]	; 0x40
 8002852:	e001      	b.n	8002858 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002854:	2301      	movs	r3, #1
 8002856:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2200      	movs	r2, #0
 800285c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002860:	7bfb      	ldrb	r3, [r7, #15]
}
 8002862:	4618      	mov	r0, r3
 8002864:	3710      	adds	r7, #16
 8002866:	46bd      	mov	sp, r7
 8002868:	bd80      	pop	{r7, pc}
	...

0800286c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b086      	sub	sp, #24
 8002870:	af00      	add	r7, sp, #0
 8002872:	60f8      	str	r0, [r7, #12]
 8002874:	60b9      	str	r1, [r7, #8]
 8002876:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002878:	2300      	movs	r3, #0
 800287a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002882:	2b01      	cmp	r3, #1
 8002884:	d101      	bne.n	800288a <HAL_ADC_Start_DMA+0x1e>
 8002886:	2302      	movs	r3, #2
 8002888:	e0e9      	b.n	8002a5e <HAL_ADC_Start_DMA+0x1f2>
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	2201      	movs	r2, #1
 800288e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	689b      	ldr	r3, [r3, #8]
 8002898:	f003 0301 	and.w	r3, r3, #1
 800289c:	2b01      	cmp	r3, #1
 800289e:	d018      	beq.n	80028d2 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	689a      	ldr	r2, [r3, #8]
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f042 0201 	orr.w	r2, r2, #1
 80028ae:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80028b0:	4b6d      	ldr	r3, [pc, #436]	; (8002a68 <HAL_ADC_Start_DMA+0x1fc>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4a6d      	ldr	r2, [pc, #436]	; (8002a6c <HAL_ADC_Start_DMA+0x200>)
 80028b6:	fba2 2303 	umull	r2, r3, r2, r3
 80028ba:	0c9a      	lsrs	r2, r3, #18
 80028bc:	4613      	mov	r3, r2
 80028be:	005b      	lsls	r3, r3, #1
 80028c0:	4413      	add	r3, r2
 80028c2:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80028c4:	e002      	b.n	80028cc <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80028c6:	693b      	ldr	r3, [r7, #16]
 80028c8:	3b01      	subs	r3, #1
 80028ca:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80028cc:	693b      	ldr	r3, [r7, #16]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d1f9      	bne.n	80028c6 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	689b      	ldr	r3, [r3, #8]
 80028d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80028e0:	d107      	bne.n	80028f2 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	689a      	ldr	r2, [r3, #8]
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80028f0:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	689b      	ldr	r3, [r3, #8]
 80028f8:	f003 0301 	and.w	r3, r3, #1
 80028fc:	2b01      	cmp	r3, #1
 80028fe:	f040 80a1 	bne.w	8002a44 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002906:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800290a:	f023 0301 	bic.w	r3, r3, #1
 800290e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002920:	2b00      	cmp	r3, #0
 8002922:	d007      	beq.n	8002934 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002928:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800292c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002938:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800293c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002940:	d106      	bne.n	8002950 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002946:	f023 0206 	bic.w	r2, r3, #6
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	645a      	str	r2, [r3, #68]	; 0x44
 800294e:	e002      	b.n	8002956 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	2200      	movs	r2, #0
 8002954:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	2200      	movs	r2, #0
 800295a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800295e:	4b44      	ldr	r3, [pc, #272]	; (8002a70 <HAL_ADC_Start_DMA+0x204>)
 8002960:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002966:	4a43      	ldr	r2, [pc, #268]	; (8002a74 <HAL_ADC_Start_DMA+0x208>)
 8002968:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800296e:	4a42      	ldr	r2, [pc, #264]	; (8002a78 <HAL_ADC_Start_DMA+0x20c>)
 8002970:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002976:	4a41      	ldr	r2, [pc, #260]	; (8002a7c <HAL_ADC_Start_DMA+0x210>)
 8002978:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002982:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	685a      	ldr	r2, [r3, #4]
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8002992:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	689a      	ldr	r2, [r3, #8]
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80029a2:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	334c      	adds	r3, #76	; 0x4c
 80029ae:	4619      	mov	r1, r3
 80029b0:	68ba      	ldr	r2, [r7, #8]
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	f000 fe04 	bl	80035c0 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80029b8:	697b      	ldr	r3, [r7, #20]
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	f003 031f 	and.w	r3, r3, #31
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d12a      	bne.n	8002a1a <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4a2d      	ldr	r2, [pc, #180]	; (8002a80 <HAL_ADC_Start_DMA+0x214>)
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d015      	beq.n	80029fa <HAL_ADC_Start_DMA+0x18e>
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4a2c      	ldr	r2, [pc, #176]	; (8002a84 <HAL_ADC_Start_DMA+0x218>)
 80029d4:	4293      	cmp	r3, r2
 80029d6:	d105      	bne.n	80029e4 <HAL_ADC_Start_DMA+0x178>
 80029d8:	4b25      	ldr	r3, [pc, #148]	; (8002a70 <HAL_ADC_Start_DMA+0x204>)
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	f003 031f 	and.w	r3, r3, #31
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d00a      	beq.n	80029fa <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4a27      	ldr	r2, [pc, #156]	; (8002a88 <HAL_ADC_Start_DMA+0x21c>)
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d136      	bne.n	8002a5c <HAL_ADC_Start_DMA+0x1f0>
 80029ee:	4b20      	ldr	r3, [pc, #128]	; (8002a70 <HAL_ADC_Start_DMA+0x204>)
 80029f0:	685b      	ldr	r3, [r3, #4]
 80029f2:	f003 0310 	and.w	r3, r3, #16
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d130      	bne.n	8002a5c <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	689b      	ldr	r3, [r3, #8]
 8002a00:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d129      	bne.n	8002a5c <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	689a      	ldr	r2, [r3, #8]
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002a16:	609a      	str	r2, [r3, #8]
 8002a18:	e020      	b.n	8002a5c <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4a18      	ldr	r2, [pc, #96]	; (8002a80 <HAL_ADC_Start_DMA+0x214>)
 8002a20:	4293      	cmp	r3, r2
 8002a22:	d11b      	bne.n	8002a5c <HAL_ADC_Start_DMA+0x1f0>
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	689b      	ldr	r3, [r3, #8]
 8002a2a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d114      	bne.n	8002a5c <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	689a      	ldr	r2, [r3, #8]
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002a40:	609a      	str	r2, [r3, #8]
 8002a42:	e00b      	b.n	8002a5c <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a48:	f043 0210 	orr.w	r2, r3, #16
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a54:	f043 0201 	orr.w	r2, r3, #1
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002a5c:	2300      	movs	r3, #0
}
 8002a5e:	4618      	mov	r0, r3
 8002a60:	3718      	adds	r7, #24
 8002a62:	46bd      	mov	sp, r7
 8002a64:	bd80      	pop	{r7, pc}
 8002a66:	bf00      	nop
 8002a68:	20000000 	.word	0x20000000
 8002a6c:	431bde83 	.word	0x431bde83
 8002a70:	40012300 	.word	0x40012300
 8002a74:	08002fa5 	.word	0x08002fa5
 8002a78:	0800305f 	.word	0x0800305f
 8002a7c:	0800307b 	.word	0x0800307b
 8002a80:	40012000 	.word	0x40012000
 8002a84:	40012100 	.word	0x40012100
 8002a88:	40012200 	.word	0x40012200

08002a8c <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b084      	sub	sp, #16
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a94:	2300      	movs	r3, #0
 8002a96:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a9e:	2b01      	cmp	r3, #1
 8002aa0:	d101      	bne.n	8002aa6 <HAL_ADC_Stop_DMA+0x1a>
 8002aa2:	2302      	movs	r3, #2
 8002aa4:	e048      	b.n	8002b38 <HAL_ADC_Stop_DMA+0xac>
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2201      	movs	r2, #1
 8002aaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	689a      	ldr	r2, [r3, #8]
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f022 0201 	bic.w	r2, r2, #1
 8002abc:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	689b      	ldr	r3, [r3, #8]
 8002ac4:	f003 0301 	and.w	r3, r3, #1
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d130      	bne.n	8002b2e <HAL_ADC_Stop_DMA+0xa2>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	689a      	ldr	r2, [r3, #8]
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002ada:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ae0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002ae4:	b2db      	uxtb	r3, r3
 8002ae6:	2b02      	cmp	r3, #2
 8002ae8:	d10f      	bne.n	8002b0a <HAL_ADC_Stop_DMA+0x7e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002aee:	4618      	mov	r0, r3
 8002af0:	f000 fdbe 	bl	8003670 <HAL_DMA_Abort>
 8002af4:	4603      	mov	r3, r0
 8002af6:	73fb      	strb	r3, [r7, #15]
      
      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8002af8:	7bfb      	ldrb	r3, [r7, #15]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d005      	beq.n	8002b0a <HAL_ADC_Stop_DMA+0x7e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b02:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	685a      	ldr	r2, [r3, #4]
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8002b18:	605a      	str	r2, [r3, #4]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b1e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002b22:	f023 0301 	bic.w	r3, r3, #1
 8002b26:	f043 0201 	orr.w	r2, r3, #1
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	2200      	movs	r2, #0
 8002b32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002b36:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b38:	4618      	mov	r0, r3
 8002b3a:	3710      	adds	r7, #16
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	bd80      	pop	{r7, pc}

08002b40 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002b40:	b480      	push	{r7}
 8002b42:	b083      	sub	sp, #12
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8002b48:	bf00      	nop
 8002b4a:	370c      	adds	r7, #12
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b52:	4770      	bx	lr

08002b54 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002b54:	b480      	push	{r7}
 8002b56:	b083      	sub	sp, #12
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002b5c:	bf00      	nop
 8002b5e:	370c      	adds	r7, #12
 8002b60:	46bd      	mov	sp, r7
 8002b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b66:	4770      	bx	lr

08002b68 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	b085      	sub	sp, #20
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
 8002b70:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002b72:	2300      	movs	r3, #0
 8002b74:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b7c:	2b01      	cmp	r3, #1
 8002b7e:	d101      	bne.n	8002b84 <HAL_ADC_ConfigChannel+0x1c>
 8002b80:	2302      	movs	r3, #2
 8002b82:	e105      	b.n	8002d90 <HAL_ADC_ConfigChannel+0x228>
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2201      	movs	r2, #1
 8002b88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	2b09      	cmp	r3, #9
 8002b92:	d925      	bls.n	8002be0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	68d9      	ldr	r1, [r3, #12]
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	b29b      	uxth	r3, r3
 8002ba0:	461a      	mov	r2, r3
 8002ba2:	4613      	mov	r3, r2
 8002ba4:	005b      	lsls	r3, r3, #1
 8002ba6:	4413      	add	r3, r2
 8002ba8:	3b1e      	subs	r3, #30
 8002baa:	2207      	movs	r2, #7
 8002bac:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb0:	43da      	mvns	r2, r3
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	400a      	ands	r2, r1
 8002bb8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	68d9      	ldr	r1, [r3, #12]
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	689a      	ldr	r2, [r3, #8]
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	b29b      	uxth	r3, r3
 8002bca:	4618      	mov	r0, r3
 8002bcc:	4603      	mov	r3, r0
 8002bce:	005b      	lsls	r3, r3, #1
 8002bd0:	4403      	add	r3, r0
 8002bd2:	3b1e      	subs	r3, #30
 8002bd4:	409a      	lsls	r2, r3
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	430a      	orrs	r2, r1
 8002bdc:	60da      	str	r2, [r3, #12]
 8002bde:	e022      	b.n	8002c26 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	6919      	ldr	r1, [r3, #16]
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	b29b      	uxth	r3, r3
 8002bec:	461a      	mov	r2, r3
 8002bee:	4613      	mov	r3, r2
 8002bf0:	005b      	lsls	r3, r3, #1
 8002bf2:	4413      	add	r3, r2
 8002bf4:	2207      	movs	r2, #7
 8002bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8002bfa:	43da      	mvns	r2, r3
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	400a      	ands	r2, r1
 8002c02:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	6919      	ldr	r1, [r3, #16]
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	689a      	ldr	r2, [r3, #8]
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	b29b      	uxth	r3, r3
 8002c14:	4618      	mov	r0, r3
 8002c16:	4603      	mov	r3, r0
 8002c18:	005b      	lsls	r3, r3, #1
 8002c1a:	4403      	add	r3, r0
 8002c1c:	409a      	lsls	r2, r3
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	430a      	orrs	r2, r1
 8002c24:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	685b      	ldr	r3, [r3, #4]
 8002c2a:	2b06      	cmp	r3, #6
 8002c2c:	d824      	bhi.n	8002c78 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	685a      	ldr	r2, [r3, #4]
 8002c38:	4613      	mov	r3, r2
 8002c3a:	009b      	lsls	r3, r3, #2
 8002c3c:	4413      	add	r3, r2
 8002c3e:	3b05      	subs	r3, #5
 8002c40:	221f      	movs	r2, #31
 8002c42:	fa02 f303 	lsl.w	r3, r2, r3
 8002c46:	43da      	mvns	r2, r3
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	400a      	ands	r2, r1
 8002c4e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	b29b      	uxth	r3, r3
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	685a      	ldr	r2, [r3, #4]
 8002c62:	4613      	mov	r3, r2
 8002c64:	009b      	lsls	r3, r3, #2
 8002c66:	4413      	add	r3, r2
 8002c68:	3b05      	subs	r3, #5
 8002c6a:	fa00 f203 	lsl.w	r2, r0, r3
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	430a      	orrs	r2, r1
 8002c74:	635a      	str	r2, [r3, #52]	; 0x34
 8002c76:	e04c      	b.n	8002d12 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	2b0c      	cmp	r3, #12
 8002c7e:	d824      	bhi.n	8002cca <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	685a      	ldr	r2, [r3, #4]
 8002c8a:	4613      	mov	r3, r2
 8002c8c:	009b      	lsls	r3, r3, #2
 8002c8e:	4413      	add	r3, r2
 8002c90:	3b23      	subs	r3, #35	; 0x23
 8002c92:	221f      	movs	r2, #31
 8002c94:	fa02 f303 	lsl.w	r3, r2, r3
 8002c98:	43da      	mvns	r2, r3
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	400a      	ands	r2, r1
 8002ca0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	b29b      	uxth	r3, r3
 8002cae:	4618      	mov	r0, r3
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	685a      	ldr	r2, [r3, #4]
 8002cb4:	4613      	mov	r3, r2
 8002cb6:	009b      	lsls	r3, r3, #2
 8002cb8:	4413      	add	r3, r2
 8002cba:	3b23      	subs	r3, #35	; 0x23
 8002cbc:	fa00 f203 	lsl.w	r2, r0, r3
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	430a      	orrs	r2, r1
 8002cc6:	631a      	str	r2, [r3, #48]	; 0x30
 8002cc8:	e023      	b.n	8002d12 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	685a      	ldr	r2, [r3, #4]
 8002cd4:	4613      	mov	r3, r2
 8002cd6:	009b      	lsls	r3, r3, #2
 8002cd8:	4413      	add	r3, r2
 8002cda:	3b41      	subs	r3, #65	; 0x41
 8002cdc:	221f      	movs	r2, #31
 8002cde:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce2:	43da      	mvns	r2, r3
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	400a      	ands	r2, r1
 8002cea:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	b29b      	uxth	r3, r3
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	685a      	ldr	r2, [r3, #4]
 8002cfe:	4613      	mov	r3, r2
 8002d00:	009b      	lsls	r3, r3, #2
 8002d02:	4413      	add	r3, r2
 8002d04:	3b41      	subs	r3, #65	; 0x41
 8002d06:	fa00 f203 	lsl.w	r2, r0, r3
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	430a      	orrs	r2, r1
 8002d10:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002d12:	4b22      	ldr	r3, [pc, #136]	; (8002d9c <HAL_ADC_ConfigChannel+0x234>)
 8002d14:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	4a21      	ldr	r2, [pc, #132]	; (8002da0 <HAL_ADC_ConfigChannel+0x238>)
 8002d1c:	4293      	cmp	r3, r2
 8002d1e:	d109      	bne.n	8002d34 <HAL_ADC_ConfigChannel+0x1cc>
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	2b12      	cmp	r3, #18
 8002d26:	d105      	bne.n	8002d34 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	685b      	ldr	r3, [r3, #4]
 8002d2c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4a19      	ldr	r2, [pc, #100]	; (8002da0 <HAL_ADC_ConfigChannel+0x238>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d123      	bne.n	8002d86 <HAL_ADC_ConfigChannel+0x21e>
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	2b10      	cmp	r3, #16
 8002d44:	d003      	beq.n	8002d4e <HAL_ADC_ConfigChannel+0x1e6>
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	2b11      	cmp	r3, #17
 8002d4c:	d11b      	bne.n	8002d86 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	685b      	ldr	r3, [r3, #4]
 8002d52:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	2b10      	cmp	r3, #16
 8002d60:	d111      	bne.n	8002d86 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002d62:	4b10      	ldr	r3, [pc, #64]	; (8002da4 <HAL_ADC_ConfigChannel+0x23c>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4a10      	ldr	r2, [pc, #64]	; (8002da8 <HAL_ADC_ConfigChannel+0x240>)
 8002d68:	fba2 2303 	umull	r2, r3, r2, r3
 8002d6c:	0c9a      	lsrs	r2, r3, #18
 8002d6e:	4613      	mov	r3, r2
 8002d70:	009b      	lsls	r3, r3, #2
 8002d72:	4413      	add	r3, r2
 8002d74:	005b      	lsls	r3, r3, #1
 8002d76:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002d78:	e002      	b.n	8002d80 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002d7a:	68bb      	ldr	r3, [r7, #8]
 8002d7c:	3b01      	subs	r3, #1
 8002d7e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002d80:	68bb      	ldr	r3, [r7, #8]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d1f9      	bne.n	8002d7a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	2200      	movs	r2, #0
 8002d8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002d8e:	2300      	movs	r3, #0
}
 8002d90:	4618      	mov	r0, r3
 8002d92:	3714      	adds	r7, #20
 8002d94:	46bd      	mov	sp, r7
 8002d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9a:	4770      	bx	lr
 8002d9c:	40012300 	.word	0x40012300
 8002da0:	40012000 	.word	0x40012000
 8002da4:	20000000 	.word	0x20000000
 8002da8:	431bde83 	.word	0x431bde83

08002dac <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002dac:	b480      	push	{r7}
 8002dae:	b085      	sub	sp, #20
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002db4:	4b79      	ldr	r3, [pc, #484]	; (8002f9c <ADC_Init+0x1f0>)
 8002db6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	685b      	ldr	r3, [r3, #4]
 8002dbc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	685a      	ldr	r2, [r3, #4]
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	685b      	ldr	r3, [r3, #4]
 8002dcc:	431a      	orrs	r2, r3
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	685a      	ldr	r2, [r3, #4]
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002de0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	6859      	ldr	r1, [r3, #4]
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	691b      	ldr	r3, [r3, #16]
 8002dec:	021a      	lsls	r2, r3, #8
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	430a      	orrs	r2, r1
 8002df4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	685a      	ldr	r2, [r3, #4]
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002e04:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	6859      	ldr	r1, [r3, #4]
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	689a      	ldr	r2, [r3, #8]
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	430a      	orrs	r2, r1
 8002e16:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	689a      	ldr	r2, [r3, #8]
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e26:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	6899      	ldr	r1, [r3, #8]
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	68da      	ldr	r2, [r3, #12]
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	430a      	orrs	r2, r1
 8002e38:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e3e:	4a58      	ldr	r2, [pc, #352]	; (8002fa0 <ADC_Init+0x1f4>)
 8002e40:	4293      	cmp	r3, r2
 8002e42:	d022      	beq.n	8002e8a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	689a      	ldr	r2, [r3, #8]
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002e52:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	6899      	ldr	r1, [r3, #8]
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	430a      	orrs	r2, r1
 8002e64:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	689a      	ldr	r2, [r3, #8]
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002e74:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	6899      	ldr	r1, [r3, #8]
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	430a      	orrs	r2, r1
 8002e86:	609a      	str	r2, [r3, #8]
 8002e88:	e00f      	b.n	8002eaa <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	689a      	ldr	r2, [r3, #8]
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002e98:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	689a      	ldr	r2, [r3, #8]
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002ea8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	689a      	ldr	r2, [r3, #8]
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f022 0202 	bic.w	r2, r2, #2
 8002eb8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	6899      	ldr	r1, [r3, #8]
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	7e1b      	ldrb	r3, [r3, #24]
 8002ec4:	005a      	lsls	r2, r3, #1
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	430a      	orrs	r2, r1
 8002ecc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d01b      	beq.n	8002f10 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	685a      	ldr	r2, [r3, #4]
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002ee6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	685a      	ldr	r2, [r3, #4]
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002ef6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	6859      	ldr	r1, [r3, #4]
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f02:	3b01      	subs	r3, #1
 8002f04:	035a      	lsls	r2, r3, #13
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	430a      	orrs	r2, r1
 8002f0c:	605a      	str	r2, [r3, #4]
 8002f0e:	e007      	b.n	8002f20 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	685a      	ldr	r2, [r3, #4]
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002f1e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002f2e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	69db      	ldr	r3, [r3, #28]
 8002f3a:	3b01      	subs	r3, #1
 8002f3c:	051a      	lsls	r2, r3, #20
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	430a      	orrs	r2, r1
 8002f44:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	689a      	ldr	r2, [r3, #8]
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002f54:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	6899      	ldr	r1, [r3, #8]
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002f62:	025a      	lsls	r2, r3, #9
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	430a      	orrs	r2, r1
 8002f6a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	689a      	ldr	r2, [r3, #8]
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f7a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	6899      	ldr	r1, [r3, #8]
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	695b      	ldr	r3, [r3, #20]
 8002f86:	029a      	lsls	r2, r3, #10
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	430a      	orrs	r2, r1
 8002f8e:	609a      	str	r2, [r3, #8]
}
 8002f90:	bf00      	nop
 8002f92:	3714      	adds	r7, #20
 8002f94:	46bd      	mov	sp, r7
 8002f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9a:	4770      	bx	lr
 8002f9c:	40012300 	.word	0x40012300
 8002fa0:	0f000001 	.word	0x0f000001

08002fa4 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b084      	sub	sp, #16
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fb0:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fb6:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d13c      	bne.n	8003038 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fc2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	689b      	ldr	r3, [r3, #8]
 8002fd0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d12b      	bne.n	8003030 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d127      	bne.n	8003030 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fe6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d006      	beq.n	8002ffc <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	689b      	ldr	r3, [r3, #8]
 8002ff4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d119      	bne.n	8003030 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	685a      	ldr	r2, [r3, #4]
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f022 0220 	bic.w	r2, r2, #32
 800300a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003010:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800301c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003020:	2b00      	cmp	r3, #0
 8003022:	d105      	bne.n	8003030 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003028:	f043 0201 	orr.w	r2, r3, #1
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003030:	68f8      	ldr	r0, [r7, #12]
 8003032:	f7ff f93f 	bl	80022b4 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003036:	e00e      	b.n	8003056 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800303c:	f003 0310 	and.w	r3, r3, #16
 8003040:	2b00      	cmp	r3, #0
 8003042:	d003      	beq.n	800304c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8003044:	68f8      	ldr	r0, [r7, #12]
 8003046:	f7ff fd85 	bl	8002b54 <HAL_ADC_ErrorCallback>
}
 800304a:	e004      	b.n	8003056 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003050:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003052:	6878      	ldr	r0, [r7, #4]
 8003054:	4798      	blx	r3
}
 8003056:	bf00      	nop
 8003058:	3710      	adds	r7, #16
 800305a:	46bd      	mov	sp, r7
 800305c:	bd80      	pop	{r7, pc}

0800305e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800305e:	b580      	push	{r7, lr}
 8003060:	b084      	sub	sp, #16
 8003062:	af00      	add	r7, sp, #0
 8003064:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800306a:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800306c:	68f8      	ldr	r0, [r7, #12]
 800306e:	f7ff fd67 	bl	8002b40 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003072:	bf00      	nop
 8003074:	3710      	adds	r7, #16
 8003076:	46bd      	mov	sp, r7
 8003078:	bd80      	pop	{r7, pc}

0800307a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800307a:	b580      	push	{r7, lr}
 800307c:	b084      	sub	sp, #16
 800307e:	af00      	add	r7, sp, #0
 8003080:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003086:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	2240      	movs	r2, #64	; 0x40
 800308c:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003092:	f043 0204 	orr.w	r2, r3, #4
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800309a:	68f8      	ldr	r0, [r7, #12]
 800309c:	f7ff fd5a 	bl	8002b54 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80030a0:	bf00      	nop
 80030a2:	3710      	adds	r7, #16
 80030a4:	46bd      	mov	sp, r7
 80030a6:	bd80      	pop	{r7, pc}

080030a8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b084      	sub	sp, #16
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d101      	bne.n	80030ba <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80030b6:	2301      	movs	r3, #1
 80030b8:	e0ed      	b.n	8003296 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80030c0:	b2db      	uxtb	r3, r3
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d102      	bne.n	80030cc <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80030c6:	6878      	ldr	r0, [r7, #4]
 80030c8:	f7fe fd9c 	bl	8001c04 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	681a      	ldr	r2, [r3, #0]
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f022 0202 	bic.w	r2, r2, #2
 80030da:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80030dc:	f7ff fb76 	bl	80027cc <HAL_GetTick>
 80030e0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80030e2:	e012      	b.n	800310a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80030e4:	f7ff fb72 	bl	80027cc <HAL_GetTick>
 80030e8:	4602      	mov	r2, r0
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	1ad3      	subs	r3, r2, r3
 80030ee:	2b0a      	cmp	r3, #10
 80030f0:	d90b      	bls.n	800310a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030f6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2205      	movs	r2, #5
 8003102:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003106:	2301      	movs	r3, #1
 8003108:	e0c5      	b.n	8003296 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	685b      	ldr	r3, [r3, #4]
 8003110:	f003 0302 	and.w	r3, r3, #2
 8003114:	2b00      	cmp	r3, #0
 8003116:	d1e5      	bne.n	80030e4 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	681a      	ldr	r2, [r3, #0]
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f042 0201 	orr.w	r2, r2, #1
 8003126:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003128:	f7ff fb50 	bl	80027cc <HAL_GetTick>
 800312c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800312e:	e012      	b.n	8003156 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003130:	f7ff fb4c 	bl	80027cc <HAL_GetTick>
 8003134:	4602      	mov	r2, r0
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	1ad3      	subs	r3, r2, r3
 800313a:	2b0a      	cmp	r3, #10
 800313c:	d90b      	bls.n	8003156 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003142:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2205      	movs	r2, #5
 800314e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003152:	2301      	movs	r3, #1
 8003154:	e09f      	b.n	8003296 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	685b      	ldr	r3, [r3, #4]
 800315c:	f003 0301 	and.w	r3, r3, #1
 8003160:	2b00      	cmp	r3, #0
 8003162:	d0e5      	beq.n	8003130 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	7e1b      	ldrb	r3, [r3, #24]
 8003168:	2b01      	cmp	r3, #1
 800316a:	d108      	bne.n	800317e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	681a      	ldr	r2, [r3, #0]
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800317a:	601a      	str	r2, [r3, #0]
 800317c:	e007      	b.n	800318e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	681a      	ldr	r2, [r3, #0]
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800318c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	7e5b      	ldrb	r3, [r3, #25]
 8003192:	2b01      	cmp	r3, #1
 8003194:	d108      	bne.n	80031a8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	681a      	ldr	r2, [r3, #0]
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80031a4:	601a      	str	r2, [r3, #0]
 80031a6:	e007      	b.n	80031b8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	681a      	ldr	r2, [r3, #0]
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80031b6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	7e9b      	ldrb	r3, [r3, #26]
 80031bc:	2b01      	cmp	r3, #1
 80031be:	d108      	bne.n	80031d2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	681a      	ldr	r2, [r3, #0]
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f042 0220 	orr.w	r2, r2, #32
 80031ce:	601a      	str	r2, [r3, #0]
 80031d0:	e007      	b.n	80031e2 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	681a      	ldr	r2, [r3, #0]
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f022 0220 	bic.w	r2, r2, #32
 80031e0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	7edb      	ldrb	r3, [r3, #27]
 80031e6:	2b01      	cmp	r3, #1
 80031e8:	d108      	bne.n	80031fc <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	681a      	ldr	r2, [r3, #0]
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f022 0210 	bic.w	r2, r2, #16
 80031f8:	601a      	str	r2, [r3, #0]
 80031fa:	e007      	b.n	800320c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	681a      	ldr	r2, [r3, #0]
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f042 0210 	orr.w	r2, r2, #16
 800320a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	7f1b      	ldrb	r3, [r3, #28]
 8003210:	2b01      	cmp	r3, #1
 8003212:	d108      	bne.n	8003226 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	681a      	ldr	r2, [r3, #0]
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f042 0208 	orr.w	r2, r2, #8
 8003222:	601a      	str	r2, [r3, #0]
 8003224:	e007      	b.n	8003236 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	681a      	ldr	r2, [r3, #0]
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f022 0208 	bic.w	r2, r2, #8
 8003234:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	7f5b      	ldrb	r3, [r3, #29]
 800323a:	2b01      	cmp	r3, #1
 800323c:	d108      	bne.n	8003250 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	681a      	ldr	r2, [r3, #0]
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f042 0204 	orr.w	r2, r2, #4
 800324c:	601a      	str	r2, [r3, #0]
 800324e:	e007      	b.n	8003260 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	681a      	ldr	r2, [r3, #0]
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f022 0204 	bic.w	r2, r2, #4
 800325e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	689a      	ldr	r2, [r3, #8]
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	68db      	ldr	r3, [r3, #12]
 8003268:	431a      	orrs	r2, r3
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	691b      	ldr	r3, [r3, #16]
 800326e:	431a      	orrs	r2, r3
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	695b      	ldr	r3, [r3, #20]
 8003274:	ea42 0103 	orr.w	r1, r2, r3
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	1e5a      	subs	r2, r3, #1
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	430a      	orrs	r2, r1
 8003284:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	2200      	movs	r2, #0
 800328a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2201      	movs	r2, #1
 8003290:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8003294:	2300      	movs	r3, #0
}
 8003296:	4618      	mov	r0, r3
 8003298:	3710      	adds	r7, #16
 800329a:	46bd      	mov	sp, r7
 800329c:	bd80      	pop	{r7, pc}
	...

080032a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80032a0:	b480      	push	{r7}
 80032a2:	b085      	sub	sp, #20
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	f003 0307 	and.w	r3, r3, #7
 80032ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80032b0:	4b0c      	ldr	r3, [pc, #48]	; (80032e4 <__NVIC_SetPriorityGrouping+0x44>)
 80032b2:	68db      	ldr	r3, [r3, #12]
 80032b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80032b6:	68ba      	ldr	r2, [r7, #8]
 80032b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80032bc:	4013      	ands	r3, r2
 80032be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80032c4:	68bb      	ldr	r3, [r7, #8]
 80032c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80032c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80032cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80032d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80032d2:	4a04      	ldr	r2, [pc, #16]	; (80032e4 <__NVIC_SetPriorityGrouping+0x44>)
 80032d4:	68bb      	ldr	r3, [r7, #8]
 80032d6:	60d3      	str	r3, [r2, #12]
}
 80032d8:	bf00      	nop
 80032da:	3714      	adds	r7, #20
 80032dc:	46bd      	mov	sp, r7
 80032de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e2:	4770      	bx	lr
 80032e4:	e000ed00 	.word	0xe000ed00

080032e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80032e8:	b480      	push	{r7}
 80032ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80032ec:	4b04      	ldr	r3, [pc, #16]	; (8003300 <__NVIC_GetPriorityGrouping+0x18>)
 80032ee:	68db      	ldr	r3, [r3, #12]
 80032f0:	0a1b      	lsrs	r3, r3, #8
 80032f2:	f003 0307 	and.w	r3, r3, #7
}
 80032f6:	4618      	mov	r0, r3
 80032f8:	46bd      	mov	sp, r7
 80032fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fe:	4770      	bx	lr
 8003300:	e000ed00 	.word	0xe000ed00

08003304 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003304:	b480      	push	{r7}
 8003306:	b083      	sub	sp, #12
 8003308:	af00      	add	r7, sp, #0
 800330a:	4603      	mov	r3, r0
 800330c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800330e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003312:	2b00      	cmp	r3, #0
 8003314:	db0b      	blt.n	800332e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003316:	79fb      	ldrb	r3, [r7, #7]
 8003318:	f003 021f 	and.w	r2, r3, #31
 800331c:	4907      	ldr	r1, [pc, #28]	; (800333c <__NVIC_EnableIRQ+0x38>)
 800331e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003322:	095b      	lsrs	r3, r3, #5
 8003324:	2001      	movs	r0, #1
 8003326:	fa00 f202 	lsl.w	r2, r0, r2
 800332a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800332e:	bf00      	nop
 8003330:	370c      	adds	r7, #12
 8003332:	46bd      	mov	sp, r7
 8003334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003338:	4770      	bx	lr
 800333a:	bf00      	nop
 800333c:	e000e100 	.word	0xe000e100

08003340 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003340:	b480      	push	{r7}
 8003342:	b083      	sub	sp, #12
 8003344:	af00      	add	r7, sp, #0
 8003346:	4603      	mov	r3, r0
 8003348:	6039      	str	r1, [r7, #0]
 800334a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800334c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003350:	2b00      	cmp	r3, #0
 8003352:	db0a      	blt.n	800336a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	b2da      	uxtb	r2, r3
 8003358:	490c      	ldr	r1, [pc, #48]	; (800338c <__NVIC_SetPriority+0x4c>)
 800335a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800335e:	0112      	lsls	r2, r2, #4
 8003360:	b2d2      	uxtb	r2, r2
 8003362:	440b      	add	r3, r1
 8003364:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003368:	e00a      	b.n	8003380 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	b2da      	uxtb	r2, r3
 800336e:	4908      	ldr	r1, [pc, #32]	; (8003390 <__NVIC_SetPriority+0x50>)
 8003370:	79fb      	ldrb	r3, [r7, #7]
 8003372:	f003 030f 	and.w	r3, r3, #15
 8003376:	3b04      	subs	r3, #4
 8003378:	0112      	lsls	r2, r2, #4
 800337a:	b2d2      	uxtb	r2, r2
 800337c:	440b      	add	r3, r1
 800337e:	761a      	strb	r2, [r3, #24]
}
 8003380:	bf00      	nop
 8003382:	370c      	adds	r7, #12
 8003384:	46bd      	mov	sp, r7
 8003386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338a:	4770      	bx	lr
 800338c:	e000e100 	.word	0xe000e100
 8003390:	e000ed00 	.word	0xe000ed00

08003394 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003394:	b480      	push	{r7}
 8003396:	b089      	sub	sp, #36	; 0x24
 8003398:	af00      	add	r7, sp, #0
 800339a:	60f8      	str	r0, [r7, #12]
 800339c:	60b9      	str	r1, [r7, #8]
 800339e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	f003 0307 	and.w	r3, r3, #7
 80033a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80033a8:	69fb      	ldr	r3, [r7, #28]
 80033aa:	f1c3 0307 	rsb	r3, r3, #7
 80033ae:	2b04      	cmp	r3, #4
 80033b0:	bf28      	it	cs
 80033b2:	2304      	movcs	r3, #4
 80033b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80033b6:	69fb      	ldr	r3, [r7, #28]
 80033b8:	3304      	adds	r3, #4
 80033ba:	2b06      	cmp	r3, #6
 80033bc:	d902      	bls.n	80033c4 <NVIC_EncodePriority+0x30>
 80033be:	69fb      	ldr	r3, [r7, #28]
 80033c0:	3b03      	subs	r3, #3
 80033c2:	e000      	b.n	80033c6 <NVIC_EncodePriority+0x32>
 80033c4:	2300      	movs	r3, #0
 80033c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033c8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80033cc:	69bb      	ldr	r3, [r7, #24]
 80033ce:	fa02 f303 	lsl.w	r3, r2, r3
 80033d2:	43da      	mvns	r2, r3
 80033d4:	68bb      	ldr	r3, [r7, #8]
 80033d6:	401a      	ands	r2, r3
 80033d8:	697b      	ldr	r3, [r7, #20]
 80033da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80033dc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80033e0:	697b      	ldr	r3, [r7, #20]
 80033e2:	fa01 f303 	lsl.w	r3, r1, r3
 80033e6:	43d9      	mvns	r1, r3
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033ec:	4313      	orrs	r3, r2
         );
}
 80033ee:	4618      	mov	r0, r3
 80033f0:	3724      	adds	r7, #36	; 0x24
 80033f2:	46bd      	mov	sp, r7
 80033f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f8:	4770      	bx	lr

080033fa <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033fa:	b580      	push	{r7, lr}
 80033fc:	b082      	sub	sp, #8
 80033fe:	af00      	add	r7, sp, #0
 8003400:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003402:	6878      	ldr	r0, [r7, #4]
 8003404:	f7ff ff4c 	bl	80032a0 <__NVIC_SetPriorityGrouping>
}
 8003408:	bf00      	nop
 800340a:	3708      	adds	r7, #8
 800340c:	46bd      	mov	sp, r7
 800340e:	bd80      	pop	{r7, pc}

08003410 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003410:	b580      	push	{r7, lr}
 8003412:	b086      	sub	sp, #24
 8003414:	af00      	add	r7, sp, #0
 8003416:	4603      	mov	r3, r0
 8003418:	60b9      	str	r1, [r7, #8]
 800341a:	607a      	str	r2, [r7, #4]
 800341c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800341e:	2300      	movs	r3, #0
 8003420:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003422:	f7ff ff61 	bl	80032e8 <__NVIC_GetPriorityGrouping>
 8003426:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003428:	687a      	ldr	r2, [r7, #4]
 800342a:	68b9      	ldr	r1, [r7, #8]
 800342c:	6978      	ldr	r0, [r7, #20]
 800342e:	f7ff ffb1 	bl	8003394 <NVIC_EncodePriority>
 8003432:	4602      	mov	r2, r0
 8003434:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003438:	4611      	mov	r1, r2
 800343a:	4618      	mov	r0, r3
 800343c:	f7ff ff80 	bl	8003340 <__NVIC_SetPriority>
}
 8003440:	bf00      	nop
 8003442:	3718      	adds	r7, #24
 8003444:	46bd      	mov	sp, r7
 8003446:	bd80      	pop	{r7, pc}

08003448 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b082      	sub	sp, #8
 800344c:	af00      	add	r7, sp, #0
 800344e:	4603      	mov	r3, r0
 8003450:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003452:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003456:	4618      	mov	r0, r3
 8003458:	f7ff ff54 	bl	8003304 <__NVIC_EnableIRQ>
}
 800345c:	bf00      	nop
 800345e:	3708      	adds	r7, #8
 8003460:	46bd      	mov	sp, r7
 8003462:	bd80      	pop	{r7, pc}

08003464 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	b086      	sub	sp, #24
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800346c:	2300      	movs	r3, #0
 800346e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003470:	f7ff f9ac 	bl	80027cc <HAL_GetTick>
 8003474:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2b00      	cmp	r3, #0
 800347a:	d101      	bne.n	8003480 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800347c:	2301      	movs	r3, #1
 800347e:	e099      	b.n	80035b4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2200      	movs	r2, #0
 8003484:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2202      	movs	r2, #2
 800348c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	681a      	ldr	r2, [r3, #0]
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f022 0201 	bic.w	r2, r2, #1
 800349e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80034a0:	e00f      	b.n	80034c2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80034a2:	f7ff f993 	bl	80027cc <HAL_GetTick>
 80034a6:	4602      	mov	r2, r0
 80034a8:	693b      	ldr	r3, [r7, #16]
 80034aa:	1ad3      	subs	r3, r2, r3
 80034ac:	2b05      	cmp	r3, #5
 80034ae:	d908      	bls.n	80034c2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2220      	movs	r2, #32
 80034b4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	2203      	movs	r2, #3
 80034ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80034be:	2303      	movs	r3, #3
 80034c0:	e078      	b.n	80035b4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f003 0301 	and.w	r3, r3, #1
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d1e8      	bne.n	80034a2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80034d8:	697a      	ldr	r2, [r7, #20]
 80034da:	4b38      	ldr	r3, [pc, #224]	; (80035bc <HAL_DMA_Init+0x158>)
 80034dc:	4013      	ands	r3, r2
 80034de:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	685a      	ldr	r2, [r3, #4]
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	689b      	ldr	r3, [r3, #8]
 80034e8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80034ee:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	691b      	ldr	r3, [r3, #16]
 80034f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80034fa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	699b      	ldr	r3, [r3, #24]
 8003500:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003506:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6a1b      	ldr	r3, [r3, #32]
 800350c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800350e:	697a      	ldr	r2, [r7, #20]
 8003510:	4313      	orrs	r3, r2
 8003512:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003518:	2b04      	cmp	r3, #4
 800351a:	d107      	bne.n	800352c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003524:	4313      	orrs	r3, r2
 8003526:	697a      	ldr	r2, [r7, #20]
 8003528:	4313      	orrs	r3, r2
 800352a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	697a      	ldr	r2, [r7, #20]
 8003532:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	695b      	ldr	r3, [r3, #20]
 800353a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800353c:	697b      	ldr	r3, [r7, #20]
 800353e:	f023 0307 	bic.w	r3, r3, #7
 8003542:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003548:	697a      	ldr	r2, [r7, #20]
 800354a:	4313      	orrs	r3, r2
 800354c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003552:	2b04      	cmp	r3, #4
 8003554:	d117      	bne.n	8003586 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800355a:	697a      	ldr	r2, [r7, #20]
 800355c:	4313      	orrs	r3, r2
 800355e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003564:	2b00      	cmp	r3, #0
 8003566:	d00e      	beq.n	8003586 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003568:	6878      	ldr	r0, [r7, #4]
 800356a:	f000 fadf 	bl	8003b2c <DMA_CheckFifoParam>
 800356e:	4603      	mov	r3, r0
 8003570:	2b00      	cmp	r3, #0
 8003572:	d008      	beq.n	8003586 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2240      	movs	r2, #64	; 0x40
 8003578:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2201      	movs	r2, #1
 800357e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003582:	2301      	movs	r3, #1
 8003584:	e016      	b.n	80035b4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	697a      	ldr	r2, [r7, #20]
 800358c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800358e:	6878      	ldr	r0, [r7, #4]
 8003590:	f000 fa96 	bl	8003ac0 <DMA_CalcBaseAndBitshift>
 8003594:	4603      	mov	r3, r0
 8003596:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800359c:	223f      	movs	r2, #63	; 0x3f
 800359e:	409a      	lsls	r2, r3
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2200      	movs	r2, #0
 80035a8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2201      	movs	r2, #1
 80035ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80035b2:	2300      	movs	r3, #0
}
 80035b4:	4618      	mov	r0, r3
 80035b6:	3718      	adds	r7, #24
 80035b8:	46bd      	mov	sp, r7
 80035ba:	bd80      	pop	{r7, pc}
 80035bc:	f010803f 	.word	0xf010803f

080035c0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b086      	sub	sp, #24
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	60f8      	str	r0, [r7, #12]
 80035c8:	60b9      	str	r1, [r7, #8]
 80035ca:	607a      	str	r2, [r7, #4]
 80035cc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80035ce:	2300      	movs	r3, #0
 80035d0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035d6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80035de:	2b01      	cmp	r3, #1
 80035e0:	d101      	bne.n	80035e6 <HAL_DMA_Start_IT+0x26>
 80035e2:	2302      	movs	r3, #2
 80035e4:	e040      	b.n	8003668 <HAL_DMA_Start_IT+0xa8>
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	2201      	movs	r2, #1
 80035ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80035f4:	b2db      	uxtb	r3, r3
 80035f6:	2b01      	cmp	r3, #1
 80035f8:	d12f      	bne.n	800365a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	2202      	movs	r2, #2
 80035fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	2200      	movs	r2, #0
 8003606:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	687a      	ldr	r2, [r7, #4]
 800360c:	68b9      	ldr	r1, [r7, #8]
 800360e:	68f8      	ldr	r0, [r7, #12]
 8003610:	f000 fa28 	bl	8003a64 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003618:	223f      	movs	r2, #63	; 0x3f
 800361a:	409a      	lsls	r2, r3
 800361c:	693b      	ldr	r3, [r7, #16]
 800361e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	681a      	ldr	r2, [r3, #0]
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f042 0216 	orr.w	r2, r2, #22
 800362e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003634:	2b00      	cmp	r3, #0
 8003636:	d007      	beq.n	8003648 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	681a      	ldr	r2, [r3, #0]
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f042 0208 	orr.w	r2, r2, #8
 8003646:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	681a      	ldr	r2, [r3, #0]
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f042 0201 	orr.w	r2, r2, #1
 8003656:	601a      	str	r2, [r3, #0]
 8003658:	e005      	b.n	8003666 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	2200      	movs	r2, #0
 800365e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003662:	2302      	movs	r3, #2
 8003664:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003666:	7dfb      	ldrb	r3, [r7, #23]
}
 8003668:	4618      	mov	r0, r3
 800366a:	3718      	adds	r7, #24
 800366c:	46bd      	mov	sp, r7
 800366e:	bd80      	pop	{r7, pc}

08003670 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b084      	sub	sp, #16
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800367c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800367e:	f7ff f8a5 	bl	80027cc <HAL_GetTick>
 8003682:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800368a:	b2db      	uxtb	r3, r3
 800368c:	2b02      	cmp	r3, #2
 800368e:	d008      	beq.n	80036a2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2280      	movs	r2, #128	; 0x80
 8003694:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	2200      	movs	r2, #0
 800369a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800369e:	2301      	movs	r3, #1
 80036a0:	e052      	b.n	8003748 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	681a      	ldr	r2, [r3, #0]
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f022 0216 	bic.w	r2, r2, #22
 80036b0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	695a      	ldr	r2, [r3, #20]
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80036c0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d103      	bne.n	80036d2 <HAL_DMA_Abort+0x62>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d007      	beq.n	80036e2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	681a      	ldr	r2, [r3, #0]
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f022 0208 	bic.w	r2, r2, #8
 80036e0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	681a      	ldr	r2, [r3, #0]
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f022 0201 	bic.w	r2, r2, #1
 80036f0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80036f2:	e013      	b.n	800371c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80036f4:	f7ff f86a 	bl	80027cc <HAL_GetTick>
 80036f8:	4602      	mov	r2, r0
 80036fa:	68bb      	ldr	r3, [r7, #8]
 80036fc:	1ad3      	subs	r3, r2, r3
 80036fe:	2b05      	cmp	r3, #5
 8003700:	d90c      	bls.n	800371c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	2220      	movs	r2, #32
 8003706:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2200      	movs	r2, #0
 800370c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2203      	movs	r2, #3
 8003714:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8003718:	2303      	movs	r3, #3
 800371a:	e015      	b.n	8003748 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f003 0301 	and.w	r3, r3, #1
 8003726:	2b00      	cmp	r3, #0
 8003728:	d1e4      	bne.n	80036f4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800372e:	223f      	movs	r2, #63	; 0x3f
 8003730:	409a      	lsls	r2, r3
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2200      	movs	r2, #0
 800373a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2201      	movs	r2, #1
 8003742:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8003746:	2300      	movs	r3, #0
}
 8003748:	4618      	mov	r0, r3
 800374a:	3710      	adds	r7, #16
 800374c:	46bd      	mov	sp, r7
 800374e:	bd80      	pop	{r7, pc}

08003750 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003750:	b580      	push	{r7, lr}
 8003752:	b086      	sub	sp, #24
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003758:	2300      	movs	r3, #0
 800375a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800375c:	4b92      	ldr	r3, [pc, #584]	; (80039a8 <HAL_DMA_IRQHandler+0x258>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4a92      	ldr	r2, [pc, #584]	; (80039ac <HAL_DMA_IRQHandler+0x25c>)
 8003762:	fba2 2303 	umull	r2, r3, r2, r3
 8003766:	0a9b      	lsrs	r3, r3, #10
 8003768:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800376e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003770:	693b      	ldr	r3, [r7, #16]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800377a:	2208      	movs	r2, #8
 800377c:	409a      	lsls	r2, r3
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	4013      	ands	r3, r2
 8003782:	2b00      	cmp	r3, #0
 8003784:	d01a      	beq.n	80037bc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f003 0304 	and.w	r3, r3, #4
 8003790:	2b00      	cmp	r3, #0
 8003792:	d013      	beq.n	80037bc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	681a      	ldr	r2, [r3, #0]
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f022 0204 	bic.w	r2, r2, #4
 80037a2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037a8:	2208      	movs	r2, #8
 80037aa:	409a      	lsls	r2, r3
 80037ac:	693b      	ldr	r3, [r7, #16]
 80037ae:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037b4:	f043 0201 	orr.w	r2, r3, #1
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037c0:	2201      	movs	r2, #1
 80037c2:	409a      	lsls	r2, r3
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	4013      	ands	r3, r2
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d012      	beq.n	80037f2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	695b      	ldr	r3, [r3, #20]
 80037d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d00b      	beq.n	80037f2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037de:	2201      	movs	r2, #1
 80037e0:	409a      	lsls	r2, r3
 80037e2:	693b      	ldr	r3, [r7, #16]
 80037e4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037ea:	f043 0202 	orr.w	r2, r3, #2
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037f6:	2204      	movs	r2, #4
 80037f8:	409a      	lsls	r2, r3
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	4013      	ands	r3, r2
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d012      	beq.n	8003828 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f003 0302 	and.w	r3, r3, #2
 800380c:	2b00      	cmp	r3, #0
 800380e:	d00b      	beq.n	8003828 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003814:	2204      	movs	r2, #4
 8003816:	409a      	lsls	r2, r3
 8003818:	693b      	ldr	r3, [r7, #16]
 800381a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003820:	f043 0204 	orr.w	r2, r3, #4
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800382c:	2210      	movs	r2, #16
 800382e:	409a      	lsls	r2, r3
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	4013      	ands	r3, r2
 8003834:	2b00      	cmp	r3, #0
 8003836:	d043      	beq.n	80038c0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f003 0308 	and.w	r3, r3, #8
 8003842:	2b00      	cmp	r3, #0
 8003844:	d03c      	beq.n	80038c0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800384a:	2210      	movs	r2, #16
 800384c:	409a      	lsls	r2, r3
 800384e:	693b      	ldr	r3, [r7, #16]
 8003850:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800385c:	2b00      	cmp	r3, #0
 800385e:	d018      	beq.n	8003892 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800386a:	2b00      	cmp	r3, #0
 800386c:	d108      	bne.n	8003880 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003872:	2b00      	cmp	r3, #0
 8003874:	d024      	beq.n	80038c0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800387a:	6878      	ldr	r0, [r7, #4]
 800387c:	4798      	blx	r3
 800387e:	e01f      	b.n	80038c0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003884:	2b00      	cmp	r3, #0
 8003886:	d01b      	beq.n	80038c0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800388c:	6878      	ldr	r0, [r7, #4]
 800388e:	4798      	blx	r3
 8003890:	e016      	b.n	80038c0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800389c:	2b00      	cmp	r3, #0
 800389e:	d107      	bne.n	80038b0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	681a      	ldr	r2, [r3, #0]
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f022 0208 	bic.w	r2, r2, #8
 80038ae:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d003      	beq.n	80038c0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038bc:	6878      	ldr	r0, [r7, #4]
 80038be:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038c4:	2220      	movs	r2, #32
 80038c6:	409a      	lsls	r2, r3
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	4013      	ands	r3, r2
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	f000 808e 	beq.w	80039ee <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f003 0310 	and.w	r3, r3, #16
 80038dc:	2b00      	cmp	r3, #0
 80038de:	f000 8086 	beq.w	80039ee <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038e6:	2220      	movs	r2, #32
 80038e8:	409a      	lsls	r2, r3
 80038ea:	693b      	ldr	r3, [r7, #16]
 80038ec:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80038f4:	b2db      	uxtb	r3, r3
 80038f6:	2b05      	cmp	r3, #5
 80038f8:	d136      	bne.n	8003968 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	681a      	ldr	r2, [r3, #0]
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f022 0216 	bic.w	r2, r2, #22
 8003908:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	695a      	ldr	r2, [r3, #20]
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003918:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800391e:	2b00      	cmp	r3, #0
 8003920:	d103      	bne.n	800392a <HAL_DMA_IRQHandler+0x1da>
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003926:	2b00      	cmp	r3, #0
 8003928:	d007      	beq.n	800393a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	681a      	ldr	r2, [r3, #0]
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f022 0208 	bic.w	r2, r2, #8
 8003938:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800393e:	223f      	movs	r2, #63	; 0x3f
 8003940:	409a      	lsls	r2, r3
 8003942:	693b      	ldr	r3, [r7, #16]
 8003944:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2200      	movs	r2, #0
 800394a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2201      	movs	r2, #1
 8003952:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800395a:	2b00      	cmp	r3, #0
 800395c:	d07d      	beq.n	8003a5a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003962:	6878      	ldr	r0, [r7, #4]
 8003964:	4798      	blx	r3
        }
        return;
 8003966:	e078      	b.n	8003a5a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003972:	2b00      	cmp	r3, #0
 8003974:	d01c      	beq.n	80039b0 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003980:	2b00      	cmp	r3, #0
 8003982:	d108      	bne.n	8003996 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003988:	2b00      	cmp	r3, #0
 800398a:	d030      	beq.n	80039ee <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003990:	6878      	ldr	r0, [r7, #4]
 8003992:	4798      	blx	r3
 8003994:	e02b      	b.n	80039ee <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800399a:	2b00      	cmp	r3, #0
 800399c:	d027      	beq.n	80039ee <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039a2:	6878      	ldr	r0, [r7, #4]
 80039a4:	4798      	blx	r3
 80039a6:	e022      	b.n	80039ee <HAL_DMA_IRQHandler+0x29e>
 80039a8:	20000000 	.word	0x20000000
 80039ac:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d10f      	bne.n	80039de <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	681a      	ldr	r2, [r3, #0]
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f022 0210 	bic.w	r2, r2, #16
 80039cc:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	2200      	movs	r2, #0
 80039d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	2201      	movs	r2, #1
 80039da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d003      	beq.n	80039ee <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039ea:	6878      	ldr	r0, [r7, #4]
 80039ec:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d032      	beq.n	8003a5c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039fa:	f003 0301 	and.w	r3, r3, #1
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d022      	beq.n	8003a48 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2205      	movs	r2, #5
 8003a06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	681a      	ldr	r2, [r3, #0]
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f022 0201 	bic.w	r2, r2, #1
 8003a18:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003a1a:	68bb      	ldr	r3, [r7, #8]
 8003a1c:	3301      	adds	r3, #1
 8003a1e:	60bb      	str	r3, [r7, #8]
 8003a20:	697a      	ldr	r2, [r7, #20]
 8003a22:	429a      	cmp	r2, r3
 8003a24:	d307      	bcc.n	8003a36 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f003 0301 	and.w	r3, r3, #1
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d1f2      	bne.n	8003a1a <HAL_DMA_IRQHandler+0x2ca>
 8003a34:	e000      	b.n	8003a38 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8003a36:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2201      	movs	r2, #1
 8003a44:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d005      	beq.n	8003a5c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a54:	6878      	ldr	r0, [r7, #4]
 8003a56:	4798      	blx	r3
 8003a58:	e000      	b.n	8003a5c <HAL_DMA_IRQHandler+0x30c>
        return;
 8003a5a:	bf00      	nop
    }
  }
}
 8003a5c:	3718      	adds	r7, #24
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	bd80      	pop	{r7, pc}
 8003a62:	bf00      	nop

08003a64 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003a64:	b480      	push	{r7}
 8003a66:	b085      	sub	sp, #20
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	60f8      	str	r0, [r7, #12]
 8003a6c:	60b9      	str	r1, [r7, #8]
 8003a6e:	607a      	str	r2, [r7, #4]
 8003a70:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	681a      	ldr	r2, [r3, #0]
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003a80:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	683a      	ldr	r2, [r7, #0]
 8003a88:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	689b      	ldr	r3, [r3, #8]
 8003a8e:	2b40      	cmp	r3, #64	; 0x40
 8003a90:	d108      	bne.n	8003aa4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	687a      	ldr	r2, [r7, #4]
 8003a98:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	68ba      	ldr	r2, [r7, #8]
 8003aa0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003aa2:	e007      	b.n	8003ab4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	68ba      	ldr	r2, [r7, #8]
 8003aaa:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	687a      	ldr	r2, [r7, #4]
 8003ab2:	60da      	str	r2, [r3, #12]
}
 8003ab4:	bf00      	nop
 8003ab6:	3714      	adds	r7, #20
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003abe:	4770      	bx	lr

08003ac0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003ac0:	b480      	push	{r7}
 8003ac2:	b085      	sub	sp, #20
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	b2db      	uxtb	r3, r3
 8003ace:	3b10      	subs	r3, #16
 8003ad0:	4a14      	ldr	r2, [pc, #80]	; (8003b24 <DMA_CalcBaseAndBitshift+0x64>)
 8003ad2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ad6:	091b      	lsrs	r3, r3, #4
 8003ad8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003ada:	4a13      	ldr	r2, [pc, #76]	; (8003b28 <DMA_CalcBaseAndBitshift+0x68>)
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	4413      	add	r3, r2
 8003ae0:	781b      	ldrb	r3, [r3, #0]
 8003ae2:	461a      	mov	r2, r3
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	2b03      	cmp	r3, #3
 8003aec:	d909      	bls.n	8003b02 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003af6:	f023 0303 	bic.w	r3, r3, #3
 8003afa:	1d1a      	adds	r2, r3, #4
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	659a      	str	r2, [r3, #88]	; 0x58
 8003b00:	e007      	b.n	8003b12 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003b0a:	f023 0303 	bic.w	r3, r3, #3
 8003b0e:	687a      	ldr	r2, [r7, #4]
 8003b10:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003b16:	4618      	mov	r0, r3
 8003b18:	3714      	adds	r7, #20
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b20:	4770      	bx	lr
 8003b22:	bf00      	nop
 8003b24:	aaaaaaab 	.word	0xaaaaaaab
 8003b28:	0800be08 	.word	0x0800be08

08003b2c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003b2c:	b480      	push	{r7}
 8003b2e:	b085      	sub	sp, #20
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b34:	2300      	movs	r3, #0
 8003b36:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b3c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	699b      	ldr	r3, [r3, #24]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d11f      	bne.n	8003b86 <DMA_CheckFifoParam+0x5a>
 8003b46:	68bb      	ldr	r3, [r7, #8]
 8003b48:	2b03      	cmp	r3, #3
 8003b4a:	d856      	bhi.n	8003bfa <DMA_CheckFifoParam+0xce>
 8003b4c:	a201      	add	r2, pc, #4	; (adr r2, 8003b54 <DMA_CheckFifoParam+0x28>)
 8003b4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b52:	bf00      	nop
 8003b54:	08003b65 	.word	0x08003b65
 8003b58:	08003b77 	.word	0x08003b77
 8003b5c:	08003b65 	.word	0x08003b65
 8003b60:	08003bfb 	.word	0x08003bfb
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b68:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d046      	beq.n	8003bfe <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003b70:	2301      	movs	r3, #1
 8003b72:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b74:	e043      	b.n	8003bfe <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b7a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003b7e:	d140      	bne.n	8003c02 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003b80:	2301      	movs	r3, #1
 8003b82:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b84:	e03d      	b.n	8003c02 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	699b      	ldr	r3, [r3, #24]
 8003b8a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b8e:	d121      	bne.n	8003bd4 <DMA_CheckFifoParam+0xa8>
 8003b90:	68bb      	ldr	r3, [r7, #8]
 8003b92:	2b03      	cmp	r3, #3
 8003b94:	d837      	bhi.n	8003c06 <DMA_CheckFifoParam+0xda>
 8003b96:	a201      	add	r2, pc, #4	; (adr r2, 8003b9c <DMA_CheckFifoParam+0x70>)
 8003b98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b9c:	08003bad 	.word	0x08003bad
 8003ba0:	08003bb3 	.word	0x08003bb3
 8003ba4:	08003bad 	.word	0x08003bad
 8003ba8:	08003bc5 	.word	0x08003bc5
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003bac:	2301      	movs	r3, #1
 8003bae:	73fb      	strb	r3, [r7, #15]
      break;
 8003bb0:	e030      	b.n	8003c14 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bb6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d025      	beq.n	8003c0a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003bc2:	e022      	b.n	8003c0a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bc8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003bcc:	d11f      	bne.n	8003c0e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003bce:	2301      	movs	r3, #1
 8003bd0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003bd2:	e01c      	b.n	8003c0e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003bd4:	68bb      	ldr	r3, [r7, #8]
 8003bd6:	2b02      	cmp	r3, #2
 8003bd8:	d903      	bls.n	8003be2 <DMA_CheckFifoParam+0xb6>
 8003bda:	68bb      	ldr	r3, [r7, #8]
 8003bdc:	2b03      	cmp	r3, #3
 8003bde:	d003      	beq.n	8003be8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003be0:	e018      	b.n	8003c14 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003be2:	2301      	movs	r3, #1
 8003be4:	73fb      	strb	r3, [r7, #15]
      break;
 8003be6:	e015      	b.n	8003c14 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d00e      	beq.n	8003c12 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003bf4:	2301      	movs	r3, #1
 8003bf6:	73fb      	strb	r3, [r7, #15]
      break;
 8003bf8:	e00b      	b.n	8003c12 <DMA_CheckFifoParam+0xe6>
      break;
 8003bfa:	bf00      	nop
 8003bfc:	e00a      	b.n	8003c14 <DMA_CheckFifoParam+0xe8>
      break;
 8003bfe:	bf00      	nop
 8003c00:	e008      	b.n	8003c14 <DMA_CheckFifoParam+0xe8>
      break;
 8003c02:	bf00      	nop
 8003c04:	e006      	b.n	8003c14 <DMA_CheckFifoParam+0xe8>
      break;
 8003c06:	bf00      	nop
 8003c08:	e004      	b.n	8003c14 <DMA_CheckFifoParam+0xe8>
      break;
 8003c0a:	bf00      	nop
 8003c0c:	e002      	b.n	8003c14 <DMA_CheckFifoParam+0xe8>
      break;   
 8003c0e:	bf00      	nop
 8003c10:	e000      	b.n	8003c14 <DMA_CheckFifoParam+0xe8>
      break;
 8003c12:	bf00      	nop
    }
  } 
  
  return status; 
 8003c14:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c16:	4618      	mov	r0, r3
 8003c18:	3714      	adds	r7, #20
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c20:	4770      	bx	lr
 8003c22:	bf00      	nop

08003c24 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003c24:	b480      	push	{r7}
 8003c26:	b089      	sub	sp, #36	; 0x24
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
 8003c2c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003c2e:	2300      	movs	r3, #0
 8003c30:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003c32:	2300      	movs	r3, #0
 8003c34:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003c36:	2300      	movs	r3, #0
 8003c38:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	61fb      	str	r3, [r7, #28]
 8003c3e:	e16b      	b.n	8003f18 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003c40:	2201      	movs	r2, #1
 8003c42:	69fb      	ldr	r3, [r7, #28]
 8003c44:	fa02 f303 	lsl.w	r3, r2, r3
 8003c48:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	697a      	ldr	r2, [r7, #20]
 8003c50:	4013      	ands	r3, r2
 8003c52:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003c54:	693a      	ldr	r2, [r7, #16]
 8003c56:	697b      	ldr	r3, [r7, #20]
 8003c58:	429a      	cmp	r2, r3
 8003c5a:	f040 815a 	bne.w	8003f12 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	685b      	ldr	r3, [r3, #4]
 8003c62:	f003 0303 	and.w	r3, r3, #3
 8003c66:	2b01      	cmp	r3, #1
 8003c68:	d005      	beq.n	8003c76 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	685b      	ldr	r3, [r3, #4]
 8003c6e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003c72:	2b02      	cmp	r3, #2
 8003c74:	d130      	bne.n	8003cd8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	689b      	ldr	r3, [r3, #8]
 8003c7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003c7c:	69fb      	ldr	r3, [r7, #28]
 8003c7e:	005b      	lsls	r3, r3, #1
 8003c80:	2203      	movs	r2, #3
 8003c82:	fa02 f303 	lsl.w	r3, r2, r3
 8003c86:	43db      	mvns	r3, r3
 8003c88:	69ba      	ldr	r2, [r7, #24]
 8003c8a:	4013      	ands	r3, r2
 8003c8c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	68da      	ldr	r2, [r3, #12]
 8003c92:	69fb      	ldr	r3, [r7, #28]
 8003c94:	005b      	lsls	r3, r3, #1
 8003c96:	fa02 f303 	lsl.w	r3, r2, r3
 8003c9a:	69ba      	ldr	r2, [r7, #24]
 8003c9c:	4313      	orrs	r3, r2
 8003c9e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	69ba      	ldr	r2, [r7, #24]
 8003ca4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	685b      	ldr	r3, [r3, #4]
 8003caa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003cac:	2201      	movs	r2, #1
 8003cae:	69fb      	ldr	r3, [r7, #28]
 8003cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8003cb4:	43db      	mvns	r3, r3
 8003cb6:	69ba      	ldr	r2, [r7, #24]
 8003cb8:	4013      	ands	r3, r2
 8003cba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003cbc:	683b      	ldr	r3, [r7, #0]
 8003cbe:	685b      	ldr	r3, [r3, #4]
 8003cc0:	091b      	lsrs	r3, r3, #4
 8003cc2:	f003 0201 	and.w	r2, r3, #1
 8003cc6:	69fb      	ldr	r3, [r7, #28]
 8003cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8003ccc:	69ba      	ldr	r2, [r7, #24]
 8003cce:	4313      	orrs	r3, r2
 8003cd0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	69ba      	ldr	r2, [r7, #24]
 8003cd6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	685b      	ldr	r3, [r3, #4]
 8003cdc:	f003 0303 	and.w	r3, r3, #3
 8003ce0:	2b03      	cmp	r3, #3
 8003ce2:	d017      	beq.n	8003d14 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	68db      	ldr	r3, [r3, #12]
 8003ce8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003cea:	69fb      	ldr	r3, [r7, #28]
 8003cec:	005b      	lsls	r3, r3, #1
 8003cee:	2203      	movs	r2, #3
 8003cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8003cf4:	43db      	mvns	r3, r3
 8003cf6:	69ba      	ldr	r2, [r7, #24]
 8003cf8:	4013      	ands	r3, r2
 8003cfa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	689a      	ldr	r2, [r3, #8]
 8003d00:	69fb      	ldr	r3, [r7, #28]
 8003d02:	005b      	lsls	r3, r3, #1
 8003d04:	fa02 f303 	lsl.w	r3, r2, r3
 8003d08:	69ba      	ldr	r2, [r7, #24]
 8003d0a:	4313      	orrs	r3, r2
 8003d0c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	69ba      	ldr	r2, [r7, #24]
 8003d12:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	685b      	ldr	r3, [r3, #4]
 8003d18:	f003 0303 	and.w	r3, r3, #3
 8003d1c:	2b02      	cmp	r3, #2
 8003d1e:	d123      	bne.n	8003d68 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003d20:	69fb      	ldr	r3, [r7, #28]
 8003d22:	08da      	lsrs	r2, r3, #3
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	3208      	adds	r2, #8
 8003d28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003d2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003d2e:	69fb      	ldr	r3, [r7, #28]
 8003d30:	f003 0307 	and.w	r3, r3, #7
 8003d34:	009b      	lsls	r3, r3, #2
 8003d36:	220f      	movs	r2, #15
 8003d38:	fa02 f303 	lsl.w	r3, r2, r3
 8003d3c:	43db      	mvns	r3, r3
 8003d3e:	69ba      	ldr	r2, [r7, #24]
 8003d40:	4013      	ands	r3, r2
 8003d42:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003d44:	683b      	ldr	r3, [r7, #0]
 8003d46:	691a      	ldr	r2, [r3, #16]
 8003d48:	69fb      	ldr	r3, [r7, #28]
 8003d4a:	f003 0307 	and.w	r3, r3, #7
 8003d4e:	009b      	lsls	r3, r3, #2
 8003d50:	fa02 f303 	lsl.w	r3, r2, r3
 8003d54:	69ba      	ldr	r2, [r7, #24]
 8003d56:	4313      	orrs	r3, r2
 8003d58:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003d5a:	69fb      	ldr	r3, [r7, #28]
 8003d5c:	08da      	lsrs	r2, r3, #3
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	3208      	adds	r2, #8
 8003d62:	69b9      	ldr	r1, [r7, #24]
 8003d64:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003d6e:	69fb      	ldr	r3, [r7, #28]
 8003d70:	005b      	lsls	r3, r3, #1
 8003d72:	2203      	movs	r2, #3
 8003d74:	fa02 f303 	lsl.w	r3, r2, r3
 8003d78:	43db      	mvns	r3, r3
 8003d7a:	69ba      	ldr	r2, [r7, #24]
 8003d7c:	4013      	ands	r3, r2
 8003d7e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	685b      	ldr	r3, [r3, #4]
 8003d84:	f003 0203 	and.w	r2, r3, #3
 8003d88:	69fb      	ldr	r3, [r7, #28]
 8003d8a:	005b      	lsls	r3, r3, #1
 8003d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d90:	69ba      	ldr	r2, [r7, #24]
 8003d92:	4313      	orrs	r3, r2
 8003d94:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	69ba      	ldr	r2, [r7, #24]
 8003d9a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	685b      	ldr	r3, [r3, #4]
 8003da0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	f000 80b4 	beq.w	8003f12 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003daa:	2300      	movs	r3, #0
 8003dac:	60fb      	str	r3, [r7, #12]
 8003dae:	4b60      	ldr	r3, [pc, #384]	; (8003f30 <HAL_GPIO_Init+0x30c>)
 8003db0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003db2:	4a5f      	ldr	r2, [pc, #380]	; (8003f30 <HAL_GPIO_Init+0x30c>)
 8003db4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003db8:	6453      	str	r3, [r2, #68]	; 0x44
 8003dba:	4b5d      	ldr	r3, [pc, #372]	; (8003f30 <HAL_GPIO_Init+0x30c>)
 8003dbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dbe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003dc2:	60fb      	str	r3, [r7, #12]
 8003dc4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003dc6:	4a5b      	ldr	r2, [pc, #364]	; (8003f34 <HAL_GPIO_Init+0x310>)
 8003dc8:	69fb      	ldr	r3, [r7, #28]
 8003dca:	089b      	lsrs	r3, r3, #2
 8003dcc:	3302      	adds	r3, #2
 8003dce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003dd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003dd4:	69fb      	ldr	r3, [r7, #28]
 8003dd6:	f003 0303 	and.w	r3, r3, #3
 8003dda:	009b      	lsls	r3, r3, #2
 8003ddc:	220f      	movs	r2, #15
 8003dde:	fa02 f303 	lsl.w	r3, r2, r3
 8003de2:	43db      	mvns	r3, r3
 8003de4:	69ba      	ldr	r2, [r7, #24]
 8003de6:	4013      	ands	r3, r2
 8003de8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	4a52      	ldr	r2, [pc, #328]	; (8003f38 <HAL_GPIO_Init+0x314>)
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d02b      	beq.n	8003e4a <HAL_GPIO_Init+0x226>
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	4a51      	ldr	r2, [pc, #324]	; (8003f3c <HAL_GPIO_Init+0x318>)
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d025      	beq.n	8003e46 <HAL_GPIO_Init+0x222>
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	4a50      	ldr	r2, [pc, #320]	; (8003f40 <HAL_GPIO_Init+0x31c>)
 8003dfe:	4293      	cmp	r3, r2
 8003e00:	d01f      	beq.n	8003e42 <HAL_GPIO_Init+0x21e>
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	4a4f      	ldr	r2, [pc, #316]	; (8003f44 <HAL_GPIO_Init+0x320>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d019      	beq.n	8003e3e <HAL_GPIO_Init+0x21a>
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	4a4e      	ldr	r2, [pc, #312]	; (8003f48 <HAL_GPIO_Init+0x324>)
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d013      	beq.n	8003e3a <HAL_GPIO_Init+0x216>
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	4a4d      	ldr	r2, [pc, #308]	; (8003f4c <HAL_GPIO_Init+0x328>)
 8003e16:	4293      	cmp	r3, r2
 8003e18:	d00d      	beq.n	8003e36 <HAL_GPIO_Init+0x212>
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	4a4c      	ldr	r2, [pc, #304]	; (8003f50 <HAL_GPIO_Init+0x32c>)
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d007      	beq.n	8003e32 <HAL_GPIO_Init+0x20e>
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	4a4b      	ldr	r2, [pc, #300]	; (8003f54 <HAL_GPIO_Init+0x330>)
 8003e26:	4293      	cmp	r3, r2
 8003e28:	d101      	bne.n	8003e2e <HAL_GPIO_Init+0x20a>
 8003e2a:	2307      	movs	r3, #7
 8003e2c:	e00e      	b.n	8003e4c <HAL_GPIO_Init+0x228>
 8003e2e:	2308      	movs	r3, #8
 8003e30:	e00c      	b.n	8003e4c <HAL_GPIO_Init+0x228>
 8003e32:	2306      	movs	r3, #6
 8003e34:	e00a      	b.n	8003e4c <HAL_GPIO_Init+0x228>
 8003e36:	2305      	movs	r3, #5
 8003e38:	e008      	b.n	8003e4c <HAL_GPIO_Init+0x228>
 8003e3a:	2304      	movs	r3, #4
 8003e3c:	e006      	b.n	8003e4c <HAL_GPIO_Init+0x228>
 8003e3e:	2303      	movs	r3, #3
 8003e40:	e004      	b.n	8003e4c <HAL_GPIO_Init+0x228>
 8003e42:	2302      	movs	r3, #2
 8003e44:	e002      	b.n	8003e4c <HAL_GPIO_Init+0x228>
 8003e46:	2301      	movs	r3, #1
 8003e48:	e000      	b.n	8003e4c <HAL_GPIO_Init+0x228>
 8003e4a:	2300      	movs	r3, #0
 8003e4c:	69fa      	ldr	r2, [r7, #28]
 8003e4e:	f002 0203 	and.w	r2, r2, #3
 8003e52:	0092      	lsls	r2, r2, #2
 8003e54:	4093      	lsls	r3, r2
 8003e56:	69ba      	ldr	r2, [r7, #24]
 8003e58:	4313      	orrs	r3, r2
 8003e5a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003e5c:	4935      	ldr	r1, [pc, #212]	; (8003f34 <HAL_GPIO_Init+0x310>)
 8003e5e:	69fb      	ldr	r3, [r7, #28]
 8003e60:	089b      	lsrs	r3, r3, #2
 8003e62:	3302      	adds	r3, #2
 8003e64:	69ba      	ldr	r2, [r7, #24]
 8003e66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003e6a:	4b3b      	ldr	r3, [pc, #236]	; (8003f58 <HAL_GPIO_Init+0x334>)
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e70:	693b      	ldr	r3, [r7, #16]
 8003e72:	43db      	mvns	r3, r3
 8003e74:	69ba      	ldr	r2, [r7, #24]
 8003e76:	4013      	ands	r3, r2
 8003e78:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	685b      	ldr	r3, [r3, #4]
 8003e7e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d003      	beq.n	8003e8e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003e86:	69ba      	ldr	r2, [r7, #24]
 8003e88:	693b      	ldr	r3, [r7, #16]
 8003e8a:	4313      	orrs	r3, r2
 8003e8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003e8e:	4a32      	ldr	r2, [pc, #200]	; (8003f58 <HAL_GPIO_Init+0x334>)
 8003e90:	69bb      	ldr	r3, [r7, #24]
 8003e92:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003e94:	4b30      	ldr	r3, [pc, #192]	; (8003f58 <HAL_GPIO_Init+0x334>)
 8003e96:	685b      	ldr	r3, [r3, #4]
 8003e98:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e9a:	693b      	ldr	r3, [r7, #16]
 8003e9c:	43db      	mvns	r3, r3
 8003e9e:	69ba      	ldr	r2, [r7, #24]
 8003ea0:	4013      	ands	r3, r2
 8003ea2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003ea4:	683b      	ldr	r3, [r7, #0]
 8003ea6:	685b      	ldr	r3, [r3, #4]
 8003ea8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d003      	beq.n	8003eb8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003eb0:	69ba      	ldr	r2, [r7, #24]
 8003eb2:	693b      	ldr	r3, [r7, #16]
 8003eb4:	4313      	orrs	r3, r2
 8003eb6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003eb8:	4a27      	ldr	r2, [pc, #156]	; (8003f58 <HAL_GPIO_Init+0x334>)
 8003eba:	69bb      	ldr	r3, [r7, #24]
 8003ebc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003ebe:	4b26      	ldr	r3, [pc, #152]	; (8003f58 <HAL_GPIO_Init+0x334>)
 8003ec0:	689b      	ldr	r3, [r3, #8]
 8003ec2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ec4:	693b      	ldr	r3, [r7, #16]
 8003ec6:	43db      	mvns	r3, r3
 8003ec8:	69ba      	ldr	r2, [r7, #24]
 8003eca:	4013      	ands	r3, r2
 8003ecc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003ece:	683b      	ldr	r3, [r7, #0]
 8003ed0:	685b      	ldr	r3, [r3, #4]
 8003ed2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d003      	beq.n	8003ee2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003eda:	69ba      	ldr	r2, [r7, #24]
 8003edc:	693b      	ldr	r3, [r7, #16]
 8003ede:	4313      	orrs	r3, r2
 8003ee0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003ee2:	4a1d      	ldr	r2, [pc, #116]	; (8003f58 <HAL_GPIO_Init+0x334>)
 8003ee4:	69bb      	ldr	r3, [r7, #24]
 8003ee6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003ee8:	4b1b      	ldr	r3, [pc, #108]	; (8003f58 <HAL_GPIO_Init+0x334>)
 8003eea:	68db      	ldr	r3, [r3, #12]
 8003eec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003eee:	693b      	ldr	r3, [r7, #16]
 8003ef0:	43db      	mvns	r3, r3
 8003ef2:	69ba      	ldr	r2, [r7, #24]
 8003ef4:	4013      	ands	r3, r2
 8003ef6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	685b      	ldr	r3, [r3, #4]
 8003efc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d003      	beq.n	8003f0c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003f04:	69ba      	ldr	r2, [r7, #24]
 8003f06:	693b      	ldr	r3, [r7, #16]
 8003f08:	4313      	orrs	r3, r2
 8003f0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003f0c:	4a12      	ldr	r2, [pc, #72]	; (8003f58 <HAL_GPIO_Init+0x334>)
 8003f0e:	69bb      	ldr	r3, [r7, #24]
 8003f10:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003f12:	69fb      	ldr	r3, [r7, #28]
 8003f14:	3301      	adds	r3, #1
 8003f16:	61fb      	str	r3, [r7, #28]
 8003f18:	69fb      	ldr	r3, [r7, #28]
 8003f1a:	2b0f      	cmp	r3, #15
 8003f1c:	f67f ae90 	bls.w	8003c40 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003f20:	bf00      	nop
 8003f22:	bf00      	nop
 8003f24:	3724      	adds	r7, #36	; 0x24
 8003f26:	46bd      	mov	sp, r7
 8003f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2c:	4770      	bx	lr
 8003f2e:	bf00      	nop
 8003f30:	40023800 	.word	0x40023800
 8003f34:	40013800 	.word	0x40013800
 8003f38:	40020000 	.word	0x40020000
 8003f3c:	40020400 	.word	0x40020400
 8003f40:	40020800 	.word	0x40020800
 8003f44:	40020c00 	.word	0x40020c00
 8003f48:	40021000 	.word	0x40021000
 8003f4c:	40021400 	.word	0x40021400
 8003f50:	40021800 	.word	0x40021800
 8003f54:	40021c00 	.word	0x40021c00
 8003f58:	40013c00 	.word	0x40013c00

08003f5c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003f5c:	b480      	push	{r7}
 8003f5e:	b083      	sub	sp, #12
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
 8003f64:	460b      	mov	r3, r1
 8003f66:	807b      	strh	r3, [r7, #2]
 8003f68:	4613      	mov	r3, r2
 8003f6a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003f6c:	787b      	ldrb	r3, [r7, #1]
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d003      	beq.n	8003f7a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003f72:	887a      	ldrh	r2, [r7, #2]
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003f78:	e003      	b.n	8003f82 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003f7a:	887b      	ldrh	r3, [r7, #2]
 8003f7c:	041a      	lsls	r2, r3, #16
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	619a      	str	r2, [r3, #24]
}
 8003f82:	bf00      	nop
 8003f84:	370c      	adds	r7, #12
 8003f86:	46bd      	mov	sp, r7
 8003f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8c:	4770      	bx	lr

08003f8e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003f8e:	b480      	push	{r7}
 8003f90:	b085      	sub	sp, #20
 8003f92:	af00      	add	r7, sp, #0
 8003f94:	6078      	str	r0, [r7, #4]
 8003f96:	460b      	mov	r3, r1
 8003f98:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	695b      	ldr	r3, [r3, #20]
 8003f9e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003fa0:	887a      	ldrh	r2, [r7, #2]
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	4013      	ands	r3, r2
 8003fa6:	041a      	lsls	r2, r3, #16
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	43d9      	mvns	r1, r3
 8003fac:	887b      	ldrh	r3, [r7, #2]
 8003fae:	400b      	ands	r3, r1
 8003fb0:	431a      	orrs	r2, r3
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	619a      	str	r2, [r3, #24]
}
 8003fb6:	bf00      	nop
 8003fb8:	3714      	adds	r7, #20
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc0:	4770      	bx	lr
	...

08003fc4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b086      	sub	sp, #24
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d101      	bne.n	8003fd6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003fd2:	2301      	movs	r3, #1
 8003fd4:	e264      	b.n	80044a0 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f003 0301 	and.w	r3, r3, #1
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d075      	beq.n	80040ce <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003fe2:	4ba3      	ldr	r3, [pc, #652]	; (8004270 <HAL_RCC_OscConfig+0x2ac>)
 8003fe4:	689b      	ldr	r3, [r3, #8]
 8003fe6:	f003 030c 	and.w	r3, r3, #12
 8003fea:	2b04      	cmp	r3, #4
 8003fec:	d00c      	beq.n	8004008 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003fee:	4ba0      	ldr	r3, [pc, #640]	; (8004270 <HAL_RCC_OscConfig+0x2ac>)
 8003ff0:	689b      	ldr	r3, [r3, #8]
 8003ff2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003ff6:	2b08      	cmp	r3, #8
 8003ff8:	d112      	bne.n	8004020 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003ffa:	4b9d      	ldr	r3, [pc, #628]	; (8004270 <HAL_RCC_OscConfig+0x2ac>)
 8003ffc:	685b      	ldr	r3, [r3, #4]
 8003ffe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004002:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004006:	d10b      	bne.n	8004020 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004008:	4b99      	ldr	r3, [pc, #612]	; (8004270 <HAL_RCC_OscConfig+0x2ac>)
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004010:	2b00      	cmp	r3, #0
 8004012:	d05b      	beq.n	80040cc <HAL_RCC_OscConfig+0x108>
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	685b      	ldr	r3, [r3, #4]
 8004018:	2b00      	cmp	r3, #0
 800401a:	d157      	bne.n	80040cc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800401c:	2301      	movs	r3, #1
 800401e:	e23f      	b.n	80044a0 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	685b      	ldr	r3, [r3, #4]
 8004024:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004028:	d106      	bne.n	8004038 <HAL_RCC_OscConfig+0x74>
 800402a:	4b91      	ldr	r3, [pc, #580]	; (8004270 <HAL_RCC_OscConfig+0x2ac>)
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	4a90      	ldr	r2, [pc, #576]	; (8004270 <HAL_RCC_OscConfig+0x2ac>)
 8004030:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004034:	6013      	str	r3, [r2, #0]
 8004036:	e01d      	b.n	8004074 <HAL_RCC_OscConfig+0xb0>
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	685b      	ldr	r3, [r3, #4]
 800403c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004040:	d10c      	bne.n	800405c <HAL_RCC_OscConfig+0x98>
 8004042:	4b8b      	ldr	r3, [pc, #556]	; (8004270 <HAL_RCC_OscConfig+0x2ac>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	4a8a      	ldr	r2, [pc, #552]	; (8004270 <HAL_RCC_OscConfig+0x2ac>)
 8004048:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800404c:	6013      	str	r3, [r2, #0]
 800404e:	4b88      	ldr	r3, [pc, #544]	; (8004270 <HAL_RCC_OscConfig+0x2ac>)
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	4a87      	ldr	r2, [pc, #540]	; (8004270 <HAL_RCC_OscConfig+0x2ac>)
 8004054:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004058:	6013      	str	r3, [r2, #0]
 800405a:	e00b      	b.n	8004074 <HAL_RCC_OscConfig+0xb0>
 800405c:	4b84      	ldr	r3, [pc, #528]	; (8004270 <HAL_RCC_OscConfig+0x2ac>)
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	4a83      	ldr	r2, [pc, #524]	; (8004270 <HAL_RCC_OscConfig+0x2ac>)
 8004062:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004066:	6013      	str	r3, [r2, #0]
 8004068:	4b81      	ldr	r3, [pc, #516]	; (8004270 <HAL_RCC_OscConfig+0x2ac>)
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	4a80      	ldr	r2, [pc, #512]	; (8004270 <HAL_RCC_OscConfig+0x2ac>)
 800406e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004072:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	685b      	ldr	r3, [r3, #4]
 8004078:	2b00      	cmp	r3, #0
 800407a:	d013      	beq.n	80040a4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800407c:	f7fe fba6 	bl	80027cc <HAL_GetTick>
 8004080:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004082:	e008      	b.n	8004096 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004084:	f7fe fba2 	bl	80027cc <HAL_GetTick>
 8004088:	4602      	mov	r2, r0
 800408a:	693b      	ldr	r3, [r7, #16]
 800408c:	1ad3      	subs	r3, r2, r3
 800408e:	2b64      	cmp	r3, #100	; 0x64
 8004090:	d901      	bls.n	8004096 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004092:	2303      	movs	r3, #3
 8004094:	e204      	b.n	80044a0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004096:	4b76      	ldr	r3, [pc, #472]	; (8004270 <HAL_RCC_OscConfig+0x2ac>)
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d0f0      	beq.n	8004084 <HAL_RCC_OscConfig+0xc0>
 80040a2:	e014      	b.n	80040ce <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040a4:	f7fe fb92 	bl	80027cc <HAL_GetTick>
 80040a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80040aa:	e008      	b.n	80040be <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80040ac:	f7fe fb8e 	bl	80027cc <HAL_GetTick>
 80040b0:	4602      	mov	r2, r0
 80040b2:	693b      	ldr	r3, [r7, #16]
 80040b4:	1ad3      	subs	r3, r2, r3
 80040b6:	2b64      	cmp	r3, #100	; 0x64
 80040b8:	d901      	bls.n	80040be <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80040ba:	2303      	movs	r3, #3
 80040bc:	e1f0      	b.n	80044a0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80040be:	4b6c      	ldr	r3, [pc, #432]	; (8004270 <HAL_RCC_OscConfig+0x2ac>)
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d1f0      	bne.n	80040ac <HAL_RCC_OscConfig+0xe8>
 80040ca:	e000      	b.n	80040ce <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f003 0302 	and.w	r3, r3, #2
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d063      	beq.n	80041a2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80040da:	4b65      	ldr	r3, [pc, #404]	; (8004270 <HAL_RCC_OscConfig+0x2ac>)
 80040dc:	689b      	ldr	r3, [r3, #8]
 80040de:	f003 030c 	and.w	r3, r3, #12
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d00b      	beq.n	80040fe <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80040e6:	4b62      	ldr	r3, [pc, #392]	; (8004270 <HAL_RCC_OscConfig+0x2ac>)
 80040e8:	689b      	ldr	r3, [r3, #8]
 80040ea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80040ee:	2b08      	cmp	r3, #8
 80040f0:	d11c      	bne.n	800412c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80040f2:	4b5f      	ldr	r3, [pc, #380]	; (8004270 <HAL_RCC_OscConfig+0x2ac>)
 80040f4:	685b      	ldr	r3, [r3, #4]
 80040f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d116      	bne.n	800412c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80040fe:	4b5c      	ldr	r3, [pc, #368]	; (8004270 <HAL_RCC_OscConfig+0x2ac>)
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f003 0302 	and.w	r3, r3, #2
 8004106:	2b00      	cmp	r3, #0
 8004108:	d005      	beq.n	8004116 <HAL_RCC_OscConfig+0x152>
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	68db      	ldr	r3, [r3, #12]
 800410e:	2b01      	cmp	r3, #1
 8004110:	d001      	beq.n	8004116 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004112:	2301      	movs	r3, #1
 8004114:	e1c4      	b.n	80044a0 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004116:	4b56      	ldr	r3, [pc, #344]	; (8004270 <HAL_RCC_OscConfig+0x2ac>)
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	691b      	ldr	r3, [r3, #16]
 8004122:	00db      	lsls	r3, r3, #3
 8004124:	4952      	ldr	r1, [pc, #328]	; (8004270 <HAL_RCC_OscConfig+0x2ac>)
 8004126:	4313      	orrs	r3, r2
 8004128:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800412a:	e03a      	b.n	80041a2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	68db      	ldr	r3, [r3, #12]
 8004130:	2b00      	cmp	r3, #0
 8004132:	d020      	beq.n	8004176 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004134:	4b4f      	ldr	r3, [pc, #316]	; (8004274 <HAL_RCC_OscConfig+0x2b0>)
 8004136:	2201      	movs	r2, #1
 8004138:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800413a:	f7fe fb47 	bl	80027cc <HAL_GetTick>
 800413e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004140:	e008      	b.n	8004154 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004142:	f7fe fb43 	bl	80027cc <HAL_GetTick>
 8004146:	4602      	mov	r2, r0
 8004148:	693b      	ldr	r3, [r7, #16]
 800414a:	1ad3      	subs	r3, r2, r3
 800414c:	2b02      	cmp	r3, #2
 800414e:	d901      	bls.n	8004154 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004150:	2303      	movs	r3, #3
 8004152:	e1a5      	b.n	80044a0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004154:	4b46      	ldr	r3, [pc, #280]	; (8004270 <HAL_RCC_OscConfig+0x2ac>)
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f003 0302 	and.w	r3, r3, #2
 800415c:	2b00      	cmp	r3, #0
 800415e:	d0f0      	beq.n	8004142 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004160:	4b43      	ldr	r3, [pc, #268]	; (8004270 <HAL_RCC_OscConfig+0x2ac>)
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	691b      	ldr	r3, [r3, #16]
 800416c:	00db      	lsls	r3, r3, #3
 800416e:	4940      	ldr	r1, [pc, #256]	; (8004270 <HAL_RCC_OscConfig+0x2ac>)
 8004170:	4313      	orrs	r3, r2
 8004172:	600b      	str	r3, [r1, #0]
 8004174:	e015      	b.n	80041a2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004176:	4b3f      	ldr	r3, [pc, #252]	; (8004274 <HAL_RCC_OscConfig+0x2b0>)
 8004178:	2200      	movs	r2, #0
 800417a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800417c:	f7fe fb26 	bl	80027cc <HAL_GetTick>
 8004180:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004182:	e008      	b.n	8004196 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004184:	f7fe fb22 	bl	80027cc <HAL_GetTick>
 8004188:	4602      	mov	r2, r0
 800418a:	693b      	ldr	r3, [r7, #16]
 800418c:	1ad3      	subs	r3, r2, r3
 800418e:	2b02      	cmp	r3, #2
 8004190:	d901      	bls.n	8004196 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004192:	2303      	movs	r3, #3
 8004194:	e184      	b.n	80044a0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004196:	4b36      	ldr	r3, [pc, #216]	; (8004270 <HAL_RCC_OscConfig+0x2ac>)
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f003 0302 	and.w	r3, r3, #2
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d1f0      	bne.n	8004184 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f003 0308 	and.w	r3, r3, #8
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d030      	beq.n	8004210 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	695b      	ldr	r3, [r3, #20]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d016      	beq.n	80041e4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80041b6:	4b30      	ldr	r3, [pc, #192]	; (8004278 <HAL_RCC_OscConfig+0x2b4>)
 80041b8:	2201      	movs	r2, #1
 80041ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041bc:	f7fe fb06 	bl	80027cc <HAL_GetTick>
 80041c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80041c2:	e008      	b.n	80041d6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80041c4:	f7fe fb02 	bl	80027cc <HAL_GetTick>
 80041c8:	4602      	mov	r2, r0
 80041ca:	693b      	ldr	r3, [r7, #16]
 80041cc:	1ad3      	subs	r3, r2, r3
 80041ce:	2b02      	cmp	r3, #2
 80041d0:	d901      	bls.n	80041d6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80041d2:	2303      	movs	r3, #3
 80041d4:	e164      	b.n	80044a0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80041d6:	4b26      	ldr	r3, [pc, #152]	; (8004270 <HAL_RCC_OscConfig+0x2ac>)
 80041d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80041da:	f003 0302 	and.w	r3, r3, #2
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d0f0      	beq.n	80041c4 <HAL_RCC_OscConfig+0x200>
 80041e2:	e015      	b.n	8004210 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80041e4:	4b24      	ldr	r3, [pc, #144]	; (8004278 <HAL_RCC_OscConfig+0x2b4>)
 80041e6:	2200      	movs	r2, #0
 80041e8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80041ea:	f7fe faef 	bl	80027cc <HAL_GetTick>
 80041ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80041f0:	e008      	b.n	8004204 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80041f2:	f7fe faeb 	bl	80027cc <HAL_GetTick>
 80041f6:	4602      	mov	r2, r0
 80041f8:	693b      	ldr	r3, [r7, #16]
 80041fa:	1ad3      	subs	r3, r2, r3
 80041fc:	2b02      	cmp	r3, #2
 80041fe:	d901      	bls.n	8004204 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004200:	2303      	movs	r3, #3
 8004202:	e14d      	b.n	80044a0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004204:	4b1a      	ldr	r3, [pc, #104]	; (8004270 <HAL_RCC_OscConfig+0x2ac>)
 8004206:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004208:	f003 0302 	and.w	r3, r3, #2
 800420c:	2b00      	cmp	r3, #0
 800420e:	d1f0      	bne.n	80041f2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f003 0304 	and.w	r3, r3, #4
 8004218:	2b00      	cmp	r3, #0
 800421a:	f000 80a0 	beq.w	800435e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800421e:	2300      	movs	r3, #0
 8004220:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004222:	4b13      	ldr	r3, [pc, #76]	; (8004270 <HAL_RCC_OscConfig+0x2ac>)
 8004224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004226:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800422a:	2b00      	cmp	r3, #0
 800422c:	d10f      	bne.n	800424e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800422e:	2300      	movs	r3, #0
 8004230:	60bb      	str	r3, [r7, #8]
 8004232:	4b0f      	ldr	r3, [pc, #60]	; (8004270 <HAL_RCC_OscConfig+0x2ac>)
 8004234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004236:	4a0e      	ldr	r2, [pc, #56]	; (8004270 <HAL_RCC_OscConfig+0x2ac>)
 8004238:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800423c:	6413      	str	r3, [r2, #64]	; 0x40
 800423e:	4b0c      	ldr	r3, [pc, #48]	; (8004270 <HAL_RCC_OscConfig+0x2ac>)
 8004240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004242:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004246:	60bb      	str	r3, [r7, #8]
 8004248:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800424a:	2301      	movs	r3, #1
 800424c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800424e:	4b0b      	ldr	r3, [pc, #44]	; (800427c <HAL_RCC_OscConfig+0x2b8>)
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004256:	2b00      	cmp	r3, #0
 8004258:	d121      	bne.n	800429e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800425a:	4b08      	ldr	r3, [pc, #32]	; (800427c <HAL_RCC_OscConfig+0x2b8>)
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	4a07      	ldr	r2, [pc, #28]	; (800427c <HAL_RCC_OscConfig+0x2b8>)
 8004260:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004264:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004266:	f7fe fab1 	bl	80027cc <HAL_GetTick>
 800426a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800426c:	e011      	b.n	8004292 <HAL_RCC_OscConfig+0x2ce>
 800426e:	bf00      	nop
 8004270:	40023800 	.word	0x40023800
 8004274:	42470000 	.word	0x42470000
 8004278:	42470e80 	.word	0x42470e80
 800427c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004280:	f7fe faa4 	bl	80027cc <HAL_GetTick>
 8004284:	4602      	mov	r2, r0
 8004286:	693b      	ldr	r3, [r7, #16]
 8004288:	1ad3      	subs	r3, r2, r3
 800428a:	2b02      	cmp	r3, #2
 800428c:	d901      	bls.n	8004292 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800428e:	2303      	movs	r3, #3
 8004290:	e106      	b.n	80044a0 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004292:	4b85      	ldr	r3, [pc, #532]	; (80044a8 <HAL_RCC_OscConfig+0x4e4>)
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800429a:	2b00      	cmp	r3, #0
 800429c:	d0f0      	beq.n	8004280 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	689b      	ldr	r3, [r3, #8]
 80042a2:	2b01      	cmp	r3, #1
 80042a4:	d106      	bne.n	80042b4 <HAL_RCC_OscConfig+0x2f0>
 80042a6:	4b81      	ldr	r3, [pc, #516]	; (80044ac <HAL_RCC_OscConfig+0x4e8>)
 80042a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042aa:	4a80      	ldr	r2, [pc, #512]	; (80044ac <HAL_RCC_OscConfig+0x4e8>)
 80042ac:	f043 0301 	orr.w	r3, r3, #1
 80042b0:	6713      	str	r3, [r2, #112]	; 0x70
 80042b2:	e01c      	b.n	80042ee <HAL_RCC_OscConfig+0x32a>
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	689b      	ldr	r3, [r3, #8]
 80042b8:	2b05      	cmp	r3, #5
 80042ba:	d10c      	bne.n	80042d6 <HAL_RCC_OscConfig+0x312>
 80042bc:	4b7b      	ldr	r3, [pc, #492]	; (80044ac <HAL_RCC_OscConfig+0x4e8>)
 80042be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042c0:	4a7a      	ldr	r2, [pc, #488]	; (80044ac <HAL_RCC_OscConfig+0x4e8>)
 80042c2:	f043 0304 	orr.w	r3, r3, #4
 80042c6:	6713      	str	r3, [r2, #112]	; 0x70
 80042c8:	4b78      	ldr	r3, [pc, #480]	; (80044ac <HAL_RCC_OscConfig+0x4e8>)
 80042ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042cc:	4a77      	ldr	r2, [pc, #476]	; (80044ac <HAL_RCC_OscConfig+0x4e8>)
 80042ce:	f043 0301 	orr.w	r3, r3, #1
 80042d2:	6713      	str	r3, [r2, #112]	; 0x70
 80042d4:	e00b      	b.n	80042ee <HAL_RCC_OscConfig+0x32a>
 80042d6:	4b75      	ldr	r3, [pc, #468]	; (80044ac <HAL_RCC_OscConfig+0x4e8>)
 80042d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042da:	4a74      	ldr	r2, [pc, #464]	; (80044ac <HAL_RCC_OscConfig+0x4e8>)
 80042dc:	f023 0301 	bic.w	r3, r3, #1
 80042e0:	6713      	str	r3, [r2, #112]	; 0x70
 80042e2:	4b72      	ldr	r3, [pc, #456]	; (80044ac <HAL_RCC_OscConfig+0x4e8>)
 80042e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042e6:	4a71      	ldr	r2, [pc, #452]	; (80044ac <HAL_RCC_OscConfig+0x4e8>)
 80042e8:	f023 0304 	bic.w	r3, r3, #4
 80042ec:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	689b      	ldr	r3, [r3, #8]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d015      	beq.n	8004322 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042f6:	f7fe fa69 	bl	80027cc <HAL_GetTick>
 80042fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042fc:	e00a      	b.n	8004314 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80042fe:	f7fe fa65 	bl	80027cc <HAL_GetTick>
 8004302:	4602      	mov	r2, r0
 8004304:	693b      	ldr	r3, [r7, #16]
 8004306:	1ad3      	subs	r3, r2, r3
 8004308:	f241 3288 	movw	r2, #5000	; 0x1388
 800430c:	4293      	cmp	r3, r2
 800430e:	d901      	bls.n	8004314 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004310:	2303      	movs	r3, #3
 8004312:	e0c5      	b.n	80044a0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004314:	4b65      	ldr	r3, [pc, #404]	; (80044ac <HAL_RCC_OscConfig+0x4e8>)
 8004316:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004318:	f003 0302 	and.w	r3, r3, #2
 800431c:	2b00      	cmp	r3, #0
 800431e:	d0ee      	beq.n	80042fe <HAL_RCC_OscConfig+0x33a>
 8004320:	e014      	b.n	800434c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004322:	f7fe fa53 	bl	80027cc <HAL_GetTick>
 8004326:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004328:	e00a      	b.n	8004340 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800432a:	f7fe fa4f 	bl	80027cc <HAL_GetTick>
 800432e:	4602      	mov	r2, r0
 8004330:	693b      	ldr	r3, [r7, #16]
 8004332:	1ad3      	subs	r3, r2, r3
 8004334:	f241 3288 	movw	r2, #5000	; 0x1388
 8004338:	4293      	cmp	r3, r2
 800433a:	d901      	bls.n	8004340 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800433c:	2303      	movs	r3, #3
 800433e:	e0af      	b.n	80044a0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004340:	4b5a      	ldr	r3, [pc, #360]	; (80044ac <HAL_RCC_OscConfig+0x4e8>)
 8004342:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004344:	f003 0302 	and.w	r3, r3, #2
 8004348:	2b00      	cmp	r3, #0
 800434a:	d1ee      	bne.n	800432a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800434c:	7dfb      	ldrb	r3, [r7, #23]
 800434e:	2b01      	cmp	r3, #1
 8004350:	d105      	bne.n	800435e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004352:	4b56      	ldr	r3, [pc, #344]	; (80044ac <HAL_RCC_OscConfig+0x4e8>)
 8004354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004356:	4a55      	ldr	r2, [pc, #340]	; (80044ac <HAL_RCC_OscConfig+0x4e8>)
 8004358:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800435c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	699b      	ldr	r3, [r3, #24]
 8004362:	2b00      	cmp	r3, #0
 8004364:	f000 809b 	beq.w	800449e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004368:	4b50      	ldr	r3, [pc, #320]	; (80044ac <HAL_RCC_OscConfig+0x4e8>)
 800436a:	689b      	ldr	r3, [r3, #8]
 800436c:	f003 030c 	and.w	r3, r3, #12
 8004370:	2b08      	cmp	r3, #8
 8004372:	d05c      	beq.n	800442e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	699b      	ldr	r3, [r3, #24]
 8004378:	2b02      	cmp	r3, #2
 800437a:	d141      	bne.n	8004400 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800437c:	4b4c      	ldr	r3, [pc, #304]	; (80044b0 <HAL_RCC_OscConfig+0x4ec>)
 800437e:	2200      	movs	r2, #0
 8004380:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004382:	f7fe fa23 	bl	80027cc <HAL_GetTick>
 8004386:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004388:	e008      	b.n	800439c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800438a:	f7fe fa1f 	bl	80027cc <HAL_GetTick>
 800438e:	4602      	mov	r2, r0
 8004390:	693b      	ldr	r3, [r7, #16]
 8004392:	1ad3      	subs	r3, r2, r3
 8004394:	2b02      	cmp	r3, #2
 8004396:	d901      	bls.n	800439c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004398:	2303      	movs	r3, #3
 800439a:	e081      	b.n	80044a0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800439c:	4b43      	ldr	r3, [pc, #268]	; (80044ac <HAL_RCC_OscConfig+0x4e8>)
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d1f0      	bne.n	800438a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	69da      	ldr	r2, [r3, #28]
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	6a1b      	ldr	r3, [r3, #32]
 80043b0:	431a      	orrs	r2, r3
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043b6:	019b      	lsls	r3, r3, #6
 80043b8:	431a      	orrs	r2, r3
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043be:	085b      	lsrs	r3, r3, #1
 80043c0:	3b01      	subs	r3, #1
 80043c2:	041b      	lsls	r3, r3, #16
 80043c4:	431a      	orrs	r2, r3
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043ca:	061b      	lsls	r3, r3, #24
 80043cc:	4937      	ldr	r1, [pc, #220]	; (80044ac <HAL_RCC_OscConfig+0x4e8>)
 80043ce:	4313      	orrs	r3, r2
 80043d0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80043d2:	4b37      	ldr	r3, [pc, #220]	; (80044b0 <HAL_RCC_OscConfig+0x4ec>)
 80043d4:	2201      	movs	r2, #1
 80043d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043d8:	f7fe f9f8 	bl	80027cc <HAL_GetTick>
 80043dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043de:	e008      	b.n	80043f2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80043e0:	f7fe f9f4 	bl	80027cc <HAL_GetTick>
 80043e4:	4602      	mov	r2, r0
 80043e6:	693b      	ldr	r3, [r7, #16]
 80043e8:	1ad3      	subs	r3, r2, r3
 80043ea:	2b02      	cmp	r3, #2
 80043ec:	d901      	bls.n	80043f2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80043ee:	2303      	movs	r3, #3
 80043f0:	e056      	b.n	80044a0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043f2:	4b2e      	ldr	r3, [pc, #184]	; (80044ac <HAL_RCC_OscConfig+0x4e8>)
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d0f0      	beq.n	80043e0 <HAL_RCC_OscConfig+0x41c>
 80043fe:	e04e      	b.n	800449e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004400:	4b2b      	ldr	r3, [pc, #172]	; (80044b0 <HAL_RCC_OscConfig+0x4ec>)
 8004402:	2200      	movs	r2, #0
 8004404:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004406:	f7fe f9e1 	bl	80027cc <HAL_GetTick>
 800440a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800440c:	e008      	b.n	8004420 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800440e:	f7fe f9dd 	bl	80027cc <HAL_GetTick>
 8004412:	4602      	mov	r2, r0
 8004414:	693b      	ldr	r3, [r7, #16]
 8004416:	1ad3      	subs	r3, r2, r3
 8004418:	2b02      	cmp	r3, #2
 800441a:	d901      	bls.n	8004420 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800441c:	2303      	movs	r3, #3
 800441e:	e03f      	b.n	80044a0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004420:	4b22      	ldr	r3, [pc, #136]	; (80044ac <HAL_RCC_OscConfig+0x4e8>)
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004428:	2b00      	cmp	r3, #0
 800442a:	d1f0      	bne.n	800440e <HAL_RCC_OscConfig+0x44a>
 800442c:	e037      	b.n	800449e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	699b      	ldr	r3, [r3, #24]
 8004432:	2b01      	cmp	r3, #1
 8004434:	d101      	bne.n	800443a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004436:	2301      	movs	r3, #1
 8004438:	e032      	b.n	80044a0 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800443a:	4b1c      	ldr	r3, [pc, #112]	; (80044ac <HAL_RCC_OscConfig+0x4e8>)
 800443c:	685b      	ldr	r3, [r3, #4]
 800443e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	699b      	ldr	r3, [r3, #24]
 8004444:	2b01      	cmp	r3, #1
 8004446:	d028      	beq.n	800449a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004452:	429a      	cmp	r2, r3
 8004454:	d121      	bne.n	800449a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004460:	429a      	cmp	r2, r3
 8004462:	d11a      	bne.n	800449a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004464:	68fa      	ldr	r2, [r7, #12]
 8004466:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800446a:	4013      	ands	r3, r2
 800446c:	687a      	ldr	r2, [r7, #4]
 800446e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004470:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004472:	4293      	cmp	r3, r2
 8004474:	d111      	bne.n	800449a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004480:	085b      	lsrs	r3, r3, #1
 8004482:	3b01      	subs	r3, #1
 8004484:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004486:	429a      	cmp	r2, r3
 8004488:	d107      	bne.n	800449a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004494:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004496:	429a      	cmp	r2, r3
 8004498:	d001      	beq.n	800449e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800449a:	2301      	movs	r3, #1
 800449c:	e000      	b.n	80044a0 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800449e:	2300      	movs	r3, #0
}
 80044a0:	4618      	mov	r0, r3
 80044a2:	3718      	adds	r7, #24
 80044a4:	46bd      	mov	sp, r7
 80044a6:	bd80      	pop	{r7, pc}
 80044a8:	40007000 	.word	0x40007000
 80044ac:	40023800 	.word	0x40023800
 80044b0:	42470060 	.word	0x42470060

080044b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80044b4:	b580      	push	{r7, lr}
 80044b6:	b084      	sub	sp, #16
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
 80044bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d101      	bne.n	80044c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80044c4:	2301      	movs	r3, #1
 80044c6:	e0cc      	b.n	8004662 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80044c8:	4b68      	ldr	r3, [pc, #416]	; (800466c <HAL_RCC_ClockConfig+0x1b8>)
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f003 0307 	and.w	r3, r3, #7
 80044d0:	683a      	ldr	r2, [r7, #0]
 80044d2:	429a      	cmp	r2, r3
 80044d4:	d90c      	bls.n	80044f0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044d6:	4b65      	ldr	r3, [pc, #404]	; (800466c <HAL_RCC_ClockConfig+0x1b8>)
 80044d8:	683a      	ldr	r2, [r7, #0]
 80044da:	b2d2      	uxtb	r2, r2
 80044dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80044de:	4b63      	ldr	r3, [pc, #396]	; (800466c <HAL_RCC_ClockConfig+0x1b8>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f003 0307 	and.w	r3, r3, #7
 80044e6:	683a      	ldr	r2, [r7, #0]
 80044e8:	429a      	cmp	r2, r3
 80044ea:	d001      	beq.n	80044f0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80044ec:	2301      	movs	r3, #1
 80044ee:	e0b8      	b.n	8004662 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f003 0302 	and.w	r3, r3, #2
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d020      	beq.n	800453e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f003 0304 	and.w	r3, r3, #4
 8004504:	2b00      	cmp	r3, #0
 8004506:	d005      	beq.n	8004514 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004508:	4b59      	ldr	r3, [pc, #356]	; (8004670 <HAL_RCC_ClockConfig+0x1bc>)
 800450a:	689b      	ldr	r3, [r3, #8]
 800450c:	4a58      	ldr	r2, [pc, #352]	; (8004670 <HAL_RCC_ClockConfig+0x1bc>)
 800450e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004512:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f003 0308 	and.w	r3, r3, #8
 800451c:	2b00      	cmp	r3, #0
 800451e:	d005      	beq.n	800452c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004520:	4b53      	ldr	r3, [pc, #332]	; (8004670 <HAL_RCC_ClockConfig+0x1bc>)
 8004522:	689b      	ldr	r3, [r3, #8]
 8004524:	4a52      	ldr	r2, [pc, #328]	; (8004670 <HAL_RCC_ClockConfig+0x1bc>)
 8004526:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800452a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800452c:	4b50      	ldr	r3, [pc, #320]	; (8004670 <HAL_RCC_ClockConfig+0x1bc>)
 800452e:	689b      	ldr	r3, [r3, #8]
 8004530:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	689b      	ldr	r3, [r3, #8]
 8004538:	494d      	ldr	r1, [pc, #308]	; (8004670 <HAL_RCC_ClockConfig+0x1bc>)
 800453a:	4313      	orrs	r3, r2
 800453c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f003 0301 	and.w	r3, r3, #1
 8004546:	2b00      	cmp	r3, #0
 8004548:	d044      	beq.n	80045d4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	685b      	ldr	r3, [r3, #4]
 800454e:	2b01      	cmp	r3, #1
 8004550:	d107      	bne.n	8004562 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004552:	4b47      	ldr	r3, [pc, #284]	; (8004670 <HAL_RCC_ClockConfig+0x1bc>)
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800455a:	2b00      	cmp	r3, #0
 800455c:	d119      	bne.n	8004592 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800455e:	2301      	movs	r3, #1
 8004560:	e07f      	b.n	8004662 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	685b      	ldr	r3, [r3, #4]
 8004566:	2b02      	cmp	r3, #2
 8004568:	d003      	beq.n	8004572 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800456e:	2b03      	cmp	r3, #3
 8004570:	d107      	bne.n	8004582 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004572:	4b3f      	ldr	r3, [pc, #252]	; (8004670 <HAL_RCC_ClockConfig+0x1bc>)
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800457a:	2b00      	cmp	r3, #0
 800457c:	d109      	bne.n	8004592 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800457e:	2301      	movs	r3, #1
 8004580:	e06f      	b.n	8004662 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004582:	4b3b      	ldr	r3, [pc, #236]	; (8004670 <HAL_RCC_ClockConfig+0x1bc>)
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f003 0302 	and.w	r3, r3, #2
 800458a:	2b00      	cmp	r3, #0
 800458c:	d101      	bne.n	8004592 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800458e:	2301      	movs	r3, #1
 8004590:	e067      	b.n	8004662 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004592:	4b37      	ldr	r3, [pc, #220]	; (8004670 <HAL_RCC_ClockConfig+0x1bc>)
 8004594:	689b      	ldr	r3, [r3, #8]
 8004596:	f023 0203 	bic.w	r2, r3, #3
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	685b      	ldr	r3, [r3, #4]
 800459e:	4934      	ldr	r1, [pc, #208]	; (8004670 <HAL_RCC_ClockConfig+0x1bc>)
 80045a0:	4313      	orrs	r3, r2
 80045a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80045a4:	f7fe f912 	bl	80027cc <HAL_GetTick>
 80045a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045aa:	e00a      	b.n	80045c2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80045ac:	f7fe f90e 	bl	80027cc <HAL_GetTick>
 80045b0:	4602      	mov	r2, r0
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	1ad3      	subs	r3, r2, r3
 80045b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80045ba:	4293      	cmp	r3, r2
 80045bc:	d901      	bls.n	80045c2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80045be:	2303      	movs	r3, #3
 80045c0:	e04f      	b.n	8004662 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045c2:	4b2b      	ldr	r3, [pc, #172]	; (8004670 <HAL_RCC_ClockConfig+0x1bc>)
 80045c4:	689b      	ldr	r3, [r3, #8]
 80045c6:	f003 020c 	and.w	r2, r3, #12
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	685b      	ldr	r3, [r3, #4]
 80045ce:	009b      	lsls	r3, r3, #2
 80045d0:	429a      	cmp	r2, r3
 80045d2:	d1eb      	bne.n	80045ac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80045d4:	4b25      	ldr	r3, [pc, #148]	; (800466c <HAL_RCC_ClockConfig+0x1b8>)
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f003 0307 	and.w	r3, r3, #7
 80045dc:	683a      	ldr	r2, [r7, #0]
 80045de:	429a      	cmp	r2, r3
 80045e0:	d20c      	bcs.n	80045fc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045e2:	4b22      	ldr	r3, [pc, #136]	; (800466c <HAL_RCC_ClockConfig+0x1b8>)
 80045e4:	683a      	ldr	r2, [r7, #0]
 80045e6:	b2d2      	uxtb	r2, r2
 80045e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80045ea:	4b20      	ldr	r3, [pc, #128]	; (800466c <HAL_RCC_ClockConfig+0x1b8>)
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f003 0307 	and.w	r3, r3, #7
 80045f2:	683a      	ldr	r2, [r7, #0]
 80045f4:	429a      	cmp	r2, r3
 80045f6:	d001      	beq.n	80045fc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80045f8:	2301      	movs	r3, #1
 80045fa:	e032      	b.n	8004662 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f003 0304 	and.w	r3, r3, #4
 8004604:	2b00      	cmp	r3, #0
 8004606:	d008      	beq.n	800461a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004608:	4b19      	ldr	r3, [pc, #100]	; (8004670 <HAL_RCC_ClockConfig+0x1bc>)
 800460a:	689b      	ldr	r3, [r3, #8]
 800460c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	68db      	ldr	r3, [r3, #12]
 8004614:	4916      	ldr	r1, [pc, #88]	; (8004670 <HAL_RCC_ClockConfig+0x1bc>)
 8004616:	4313      	orrs	r3, r2
 8004618:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f003 0308 	and.w	r3, r3, #8
 8004622:	2b00      	cmp	r3, #0
 8004624:	d009      	beq.n	800463a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004626:	4b12      	ldr	r3, [pc, #72]	; (8004670 <HAL_RCC_ClockConfig+0x1bc>)
 8004628:	689b      	ldr	r3, [r3, #8]
 800462a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	691b      	ldr	r3, [r3, #16]
 8004632:	00db      	lsls	r3, r3, #3
 8004634:	490e      	ldr	r1, [pc, #56]	; (8004670 <HAL_RCC_ClockConfig+0x1bc>)
 8004636:	4313      	orrs	r3, r2
 8004638:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800463a:	f000 f821 	bl	8004680 <HAL_RCC_GetSysClockFreq>
 800463e:	4602      	mov	r2, r0
 8004640:	4b0b      	ldr	r3, [pc, #44]	; (8004670 <HAL_RCC_ClockConfig+0x1bc>)
 8004642:	689b      	ldr	r3, [r3, #8]
 8004644:	091b      	lsrs	r3, r3, #4
 8004646:	f003 030f 	and.w	r3, r3, #15
 800464a:	490a      	ldr	r1, [pc, #40]	; (8004674 <HAL_RCC_ClockConfig+0x1c0>)
 800464c:	5ccb      	ldrb	r3, [r1, r3]
 800464e:	fa22 f303 	lsr.w	r3, r2, r3
 8004652:	4a09      	ldr	r2, [pc, #36]	; (8004678 <HAL_RCC_ClockConfig+0x1c4>)
 8004654:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004656:	4b09      	ldr	r3, [pc, #36]	; (800467c <HAL_RCC_ClockConfig+0x1c8>)
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	4618      	mov	r0, r3
 800465c:	f7fd fc66 	bl	8001f2c <HAL_InitTick>

  return HAL_OK;
 8004660:	2300      	movs	r3, #0
}
 8004662:	4618      	mov	r0, r3
 8004664:	3710      	adds	r7, #16
 8004666:	46bd      	mov	sp, r7
 8004668:	bd80      	pop	{r7, pc}
 800466a:	bf00      	nop
 800466c:	40023c00 	.word	0x40023c00
 8004670:	40023800 	.word	0x40023800
 8004674:	0800bb84 	.word	0x0800bb84
 8004678:	20000000 	.word	0x20000000
 800467c:	2000008c 	.word	0x2000008c

08004680 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004680:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004684:	b084      	sub	sp, #16
 8004686:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004688:	2300      	movs	r3, #0
 800468a:	607b      	str	r3, [r7, #4]
 800468c:	2300      	movs	r3, #0
 800468e:	60fb      	str	r3, [r7, #12]
 8004690:	2300      	movs	r3, #0
 8004692:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004694:	2300      	movs	r3, #0
 8004696:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004698:	4b67      	ldr	r3, [pc, #412]	; (8004838 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800469a:	689b      	ldr	r3, [r3, #8]
 800469c:	f003 030c 	and.w	r3, r3, #12
 80046a0:	2b08      	cmp	r3, #8
 80046a2:	d00d      	beq.n	80046c0 <HAL_RCC_GetSysClockFreq+0x40>
 80046a4:	2b08      	cmp	r3, #8
 80046a6:	f200 80bd 	bhi.w	8004824 <HAL_RCC_GetSysClockFreq+0x1a4>
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d002      	beq.n	80046b4 <HAL_RCC_GetSysClockFreq+0x34>
 80046ae:	2b04      	cmp	r3, #4
 80046b0:	d003      	beq.n	80046ba <HAL_RCC_GetSysClockFreq+0x3a>
 80046b2:	e0b7      	b.n	8004824 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80046b4:	4b61      	ldr	r3, [pc, #388]	; (800483c <HAL_RCC_GetSysClockFreq+0x1bc>)
 80046b6:	60bb      	str	r3, [r7, #8]
       break;
 80046b8:	e0b7      	b.n	800482a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80046ba:	4b60      	ldr	r3, [pc, #384]	; (800483c <HAL_RCC_GetSysClockFreq+0x1bc>)
 80046bc:	60bb      	str	r3, [r7, #8]
      break;
 80046be:	e0b4      	b.n	800482a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80046c0:	4b5d      	ldr	r3, [pc, #372]	; (8004838 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80046c2:	685b      	ldr	r3, [r3, #4]
 80046c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80046c8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80046ca:	4b5b      	ldr	r3, [pc, #364]	; (8004838 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80046cc:	685b      	ldr	r3, [r3, #4]
 80046ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d04d      	beq.n	8004772 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80046d6:	4b58      	ldr	r3, [pc, #352]	; (8004838 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80046d8:	685b      	ldr	r3, [r3, #4]
 80046da:	099b      	lsrs	r3, r3, #6
 80046dc:	461a      	mov	r2, r3
 80046de:	f04f 0300 	mov.w	r3, #0
 80046e2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80046e6:	f04f 0100 	mov.w	r1, #0
 80046ea:	ea02 0800 	and.w	r8, r2, r0
 80046ee:	ea03 0901 	and.w	r9, r3, r1
 80046f2:	4640      	mov	r0, r8
 80046f4:	4649      	mov	r1, r9
 80046f6:	f04f 0200 	mov.w	r2, #0
 80046fa:	f04f 0300 	mov.w	r3, #0
 80046fe:	014b      	lsls	r3, r1, #5
 8004700:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004704:	0142      	lsls	r2, r0, #5
 8004706:	4610      	mov	r0, r2
 8004708:	4619      	mov	r1, r3
 800470a:	ebb0 0008 	subs.w	r0, r0, r8
 800470e:	eb61 0109 	sbc.w	r1, r1, r9
 8004712:	f04f 0200 	mov.w	r2, #0
 8004716:	f04f 0300 	mov.w	r3, #0
 800471a:	018b      	lsls	r3, r1, #6
 800471c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004720:	0182      	lsls	r2, r0, #6
 8004722:	1a12      	subs	r2, r2, r0
 8004724:	eb63 0301 	sbc.w	r3, r3, r1
 8004728:	f04f 0000 	mov.w	r0, #0
 800472c:	f04f 0100 	mov.w	r1, #0
 8004730:	00d9      	lsls	r1, r3, #3
 8004732:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004736:	00d0      	lsls	r0, r2, #3
 8004738:	4602      	mov	r2, r0
 800473a:	460b      	mov	r3, r1
 800473c:	eb12 0208 	adds.w	r2, r2, r8
 8004740:	eb43 0309 	adc.w	r3, r3, r9
 8004744:	f04f 0000 	mov.w	r0, #0
 8004748:	f04f 0100 	mov.w	r1, #0
 800474c:	0299      	lsls	r1, r3, #10
 800474e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004752:	0290      	lsls	r0, r2, #10
 8004754:	4602      	mov	r2, r0
 8004756:	460b      	mov	r3, r1
 8004758:	4610      	mov	r0, r2
 800475a:	4619      	mov	r1, r3
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	461a      	mov	r2, r3
 8004760:	f04f 0300 	mov.w	r3, #0
 8004764:	f7fc f8c2 	bl	80008ec <__aeabi_uldivmod>
 8004768:	4602      	mov	r2, r0
 800476a:	460b      	mov	r3, r1
 800476c:	4613      	mov	r3, r2
 800476e:	60fb      	str	r3, [r7, #12]
 8004770:	e04a      	b.n	8004808 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004772:	4b31      	ldr	r3, [pc, #196]	; (8004838 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004774:	685b      	ldr	r3, [r3, #4]
 8004776:	099b      	lsrs	r3, r3, #6
 8004778:	461a      	mov	r2, r3
 800477a:	f04f 0300 	mov.w	r3, #0
 800477e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004782:	f04f 0100 	mov.w	r1, #0
 8004786:	ea02 0400 	and.w	r4, r2, r0
 800478a:	ea03 0501 	and.w	r5, r3, r1
 800478e:	4620      	mov	r0, r4
 8004790:	4629      	mov	r1, r5
 8004792:	f04f 0200 	mov.w	r2, #0
 8004796:	f04f 0300 	mov.w	r3, #0
 800479a:	014b      	lsls	r3, r1, #5
 800479c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80047a0:	0142      	lsls	r2, r0, #5
 80047a2:	4610      	mov	r0, r2
 80047a4:	4619      	mov	r1, r3
 80047a6:	1b00      	subs	r0, r0, r4
 80047a8:	eb61 0105 	sbc.w	r1, r1, r5
 80047ac:	f04f 0200 	mov.w	r2, #0
 80047b0:	f04f 0300 	mov.w	r3, #0
 80047b4:	018b      	lsls	r3, r1, #6
 80047b6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80047ba:	0182      	lsls	r2, r0, #6
 80047bc:	1a12      	subs	r2, r2, r0
 80047be:	eb63 0301 	sbc.w	r3, r3, r1
 80047c2:	f04f 0000 	mov.w	r0, #0
 80047c6:	f04f 0100 	mov.w	r1, #0
 80047ca:	00d9      	lsls	r1, r3, #3
 80047cc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80047d0:	00d0      	lsls	r0, r2, #3
 80047d2:	4602      	mov	r2, r0
 80047d4:	460b      	mov	r3, r1
 80047d6:	1912      	adds	r2, r2, r4
 80047d8:	eb45 0303 	adc.w	r3, r5, r3
 80047dc:	f04f 0000 	mov.w	r0, #0
 80047e0:	f04f 0100 	mov.w	r1, #0
 80047e4:	0299      	lsls	r1, r3, #10
 80047e6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80047ea:	0290      	lsls	r0, r2, #10
 80047ec:	4602      	mov	r2, r0
 80047ee:	460b      	mov	r3, r1
 80047f0:	4610      	mov	r0, r2
 80047f2:	4619      	mov	r1, r3
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	461a      	mov	r2, r3
 80047f8:	f04f 0300 	mov.w	r3, #0
 80047fc:	f7fc f876 	bl	80008ec <__aeabi_uldivmod>
 8004800:	4602      	mov	r2, r0
 8004802:	460b      	mov	r3, r1
 8004804:	4613      	mov	r3, r2
 8004806:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004808:	4b0b      	ldr	r3, [pc, #44]	; (8004838 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800480a:	685b      	ldr	r3, [r3, #4]
 800480c:	0c1b      	lsrs	r3, r3, #16
 800480e:	f003 0303 	and.w	r3, r3, #3
 8004812:	3301      	adds	r3, #1
 8004814:	005b      	lsls	r3, r3, #1
 8004816:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004818:	68fa      	ldr	r2, [r7, #12]
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004820:	60bb      	str	r3, [r7, #8]
      break;
 8004822:	e002      	b.n	800482a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004824:	4b05      	ldr	r3, [pc, #20]	; (800483c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004826:	60bb      	str	r3, [r7, #8]
      break;
 8004828:	bf00      	nop
    }
  }
  return sysclockfreq;
 800482a:	68bb      	ldr	r3, [r7, #8]
}
 800482c:	4618      	mov	r0, r3
 800482e:	3710      	adds	r7, #16
 8004830:	46bd      	mov	sp, r7
 8004832:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004836:	bf00      	nop
 8004838:	40023800 	.word	0x40023800
 800483c:	00f42400 	.word	0x00f42400

08004840 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004840:	b480      	push	{r7}
 8004842:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004844:	4b03      	ldr	r3, [pc, #12]	; (8004854 <HAL_RCC_GetHCLKFreq+0x14>)
 8004846:	681b      	ldr	r3, [r3, #0]
}
 8004848:	4618      	mov	r0, r3
 800484a:	46bd      	mov	sp, r7
 800484c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004850:	4770      	bx	lr
 8004852:	bf00      	nop
 8004854:	20000000 	.word	0x20000000

08004858 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004858:	b580      	push	{r7, lr}
 800485a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800485c:	f7ff fff0 	bl	8004840 <HAL_RCC_GetHCLKFreq>
 8004860:	4602      	mov	r2, r0
 8004862:	4b05      	ldr	r3, [pc, #20]	; (8004878 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004864:	689b      	ldr	r3, [r3, #8]
 8004866:	0a9b      	lsrs	r3, r3, #10
 8004868:	f003 0307 	and.w	r3, r3, #7
 800486c:	4903      	ldr	r1, [pc, #12]	; (800487c <HAL_RCC_GetPCLK1Freq+0x24>)
 800486e:	5ccb      	ldrb	r3, [r1, r3]
 8004870:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004874:	4618      	mov	r0, r3
 8004876:	bd80      	pop	{r7, pc}
 8004878:	40023800 	.word	0x40023800
 800487c:	0800bb94 	.word	0x0800bb94

08004880 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004880:	b580      	push	{r7, lr}
 8004882:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004884:	f7ff ffdc 	bl	8004840 <HAL_RCC_GetHCLKFreq>
 8004888:	4602      	mov	r2, r0
 800488a:	4b05      	ldr	r3, [pc, #20]	; (80048a0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800488c:	689b      	ldr	r3, [r3, #8]
 800488e:	0b5b      	lsrs	r3, r3, #13
 8004890:	f003 0307 	and.w	r3, r3, #7
 8004894:	4903      	ldr	r1, [pc, #12]	; (80048a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004896:	5ccb      	ldrb	r3, [r1, r3]
 8004898:	fa22 f303 	lsr.w	r3, r2, r3
}
 800489c:	4618      	mov	r0, r3
 800489e:	bd80      	pop	{r7, pc}
 80048a0:	40023800 	.word	0x40023800
 80048a4:	0800bb94 	.word	0x0800bb94

080048a8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80048a8:	b480      	push	{r7}
 80048aa:	b083      	sub	sp, #12
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
 80048b0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	220f      	movs	r2, #15
 80048b6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80048b8:	4b12      	ldr	r3, [pc, #72]	; (8004904 <HAL_RCC_GetClockConfig+0x5c>)
 80048ba:	689b      	ldr	r3, [r3, #8]
 80048bc:	f003 0203 	and.w	r2, r3, #3
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80048c4:	4b0f      	ldr	r3, [pc, #60]	; (8004904 <HAL_RCC_GetClockConfig+0x5c>)
 80048c6:	689b      	ldr	r3, [r3, #8]
 80048c8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80048d0:	4b0c      	ldr	r3, [pc, #48]	; (8004904 <HAL_RCC_GetClockConfig+0x5c>)
 80048d2:	689b      	ldr	r3, [r3, #8]
 80048d4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80048dc:	4b09      	ldr	r3, [pc, #36]	; (8004904 <HAL_RCC_GetClockConfig+0x5c>)
 80048de:	689b      	ldr	r3, [r3, #8]
 80048e0:	08db      	lsrs	r3, r3, #3
 80048e2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80048ea:	4b07      	ldr	r3, [pc, #28]	; (8004908 <HAL_RCC_GetClockConfig+0x60>)
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f003 0207 	and.w	r2, r3, #7
 80048f2:	683b      	ldr	r3, [r7, #0]
 80048f4:	601a      	str	r2, [r3, #0]
}
 80048f6:	bf00      	nop
 80048f8:	370c      	adds	r7, #12
 80048fa:	46bd      	mov	sp, r7
 80048fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004900:	4770      	bx	lr
 8004902:	bf00      	nop
 8004904:	40023800 	.word	0x40023800
 8004908:	40023c00 	.word	0x40023c00

0800490c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800490c:	b580      	push	{r7, lr}
 800490e:	b082      	sub	sp, #8
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2b00      	cmp	r3, #0
 8004918:	d101      	bne.n	800491e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800491a:	2301      	movs	r3, #1
 800491c:	e07b      	b.n	8004a16 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004922:	2b00      	cmp	r3, #0
 8004924:	d108      	bne.n	8004938 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	685b      	ldr	r3, [r3, #4]
 800492a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800492e:	d009      	beq.n	8004944 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2200      	movs	r2, #0
 8004934:	61da      	str	r2, [r3, #28]
 8004936:	e005      	b.n	8004944 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2200      	movs	r2, #0
 800493c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	2200      	movs	r2, #0
 8004942:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2200      	movs	r2, #0
 8004948:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004950:	b2db      	uxtb	r3, r3
 8004952:	2b00      	cmp	r3, #0
 8004954:	d106      	bne.n	8004964 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	2200      	movs	r2, #0
 800495a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800495e:	6878      	ldr	r0, [r7, #4]
 8004960:	f7fd f998 	bl	8001c94 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2202      	movs	r2, #2
 8004968:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	681a      	ldr	r2, [r3, #0]
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800497a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	685b      	ldr	r3, [r3, #4]
 8004980:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	689b      	ldr	r3, [r3, #8]
 8004988:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800498c:	431a      	orrs	r2, r3
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	68db      	ldr	r3, [r3, #12]
 8004992:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004996:	431a      	orrs	r2, r3
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	691b      	ldr	r3, [r3, #16]
 800499c:	f003 0302 	and.w	r3, r3, #2
 80049a0:	431a      	orrs	r2, r3
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	695b      	ldr	r3, [r3, #20]
 80049a6:	f003 0301 	and.w	r3, r3, #1
 80049aa:	431a      	orrs	r2, r3
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	699b      	ldr	r3, [r3, #24]
 80049b0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80049b4:	431a      	orrs	r2, r3
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	69db      	ldr	r3, [r3, #28]
 80049ba:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80049be:	431a      	orrs	r2, r3
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	6a1b      	ldr	r3, [r3, #32]
 80049c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049c8:	ea42 0103 	orr.w	r1, r2, r3
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049d0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	430a      	orrs	r2, r1
 80049da:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	699b      	ldr	r3, [r3, #24]
 80049e0:	0c1b      	lsrs	r3, r3, #16
 80049e2:	f003 0104 	and.w	r1, r3, #4
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ea:	f003 0210 	and.w	r2, r3, #16
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	430a      	orrs	r2, r1
 80049f4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	69da      	ldr	r2, [r3, #28]
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004a04:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	2200      	movs	r2, #0
 8004a0a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2201      	movs	r2, #1
 8004a10:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004a14:	2300      	movs	r3, #0
}
 8004a16:	4618      	mov	r0, r3
 8004a18:	3708      	adds	r7, #8
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	bd80      	pop	{r7, pc}

08004a1e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a1e:	b580      	push	{r7, lr}
 8004a20:	b088      	sub	sp, #32
 8004a22:	af00      	add	r7, sp, #0
 8004a24:	60f8      	str	r0, [r7, #12]
 8004a26:	60b9      	str	r1, [r7, #8]
 8004a28:	603b      	str	r3, [r7, #0]
 8004a2a:	4613      	mov	r3, r2
 8004a2c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004a2e:	2300      	movs	r3, #0
 8004a30:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004a38:	2b01      	cmp	r3, #1
 8004a3a:	d101      	bne.n	8004a40 <HAL_SPI_Transmit+0x22>
 8004a3c:	2302      	movs	r3, #2
 8004a3e:	e126      	b.n	8004c8e <HAL_SPI_Transmit+0x270>
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	2201      	movs	r2, #1
 8004a44:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004a48:	f7fd fec0 	bl	80027cc <HAL_GetTick>
 8004a4c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004a4e:	88fb      	ldrh	r3, [r7, #6]
 8004a50:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004a58:	b2db      	uxtb	r3, r3
 8004a5a:	2b01      	cmp	r3, #1
 8004a5c:	d002      	beq.n	8004a64 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004a5e:	2302      	movs	r3, #2
 8004a60:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004a62:	e10b      	b.n	8004c7c <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004a64:	68bb      	ldr	r3, [r7, #8]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d002      	beq.n	8004a70 <HAL_SPI_Transmit+0x52>
 8004a6a:	88fb      	ldrh	r3, [r7, #6]
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d102      	bne.n	8004a76 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004a70:	2301      	movs	r3, #1
 8004a72:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004a74:	e102      	b.n	8004c7c <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	2203      	movs	r2, #3
 8004a7a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	2200      	movs	r2, #0
 8004a82:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	68ba      	ldr	r2, [r7, #8]
 8004a88:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	88fa      	ldrh	r2, [r7, #6]
 8004a8e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	88fa      	ldrh	r2, [r7, #6]
 8004a94:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	2200      	movs	r2, #0
 8004a9a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	2200      	movs	r2, #0
 8004aac:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	689b      	ldr	r3, [r3, #8]
 8004ab8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004abc:	d10f      	bne.n	8004ade <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	681a      	ldr	r2, [r3, #0]
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004acc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	681a      	ldr	r2, [r3, #0]
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004adc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ae8:	2b40      	cmp	r3, #64	; 0x40
 8004aea:	d007      	beq.n	8004afc <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	681a      	ldr	r2, [r3, #0]
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004afa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	68db      	ldr	r3, [r3, #12]
 8004b00:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b04:	d14b      	bne.n	8004b9e <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	685b      	ldr	r3, [r3, #4]
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d002      	beq.n	8004b14 <HAL_SPI_Transmit+0xf6>
 8004b0e:	8afb      	ldrh	r3, [r7, #22]
 8004b10:	2b01      	cmp	r3, #1
 8004b12:	d13e      	bne.n	8004b92 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b18:	881a      	ldrh	r2, [r3, #0]
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b24:	1c9a      	adds	r2, r3, #2
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b2e:	b29b      	uxth	r3, r3
 8004b30:	3b01      	subs	r3, #1
 8004b32:	b29a      	uxth	r2, r3
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004b38:	e02b      	b.n	8004b92 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	689b      	ldr	r3, [r3, #8]
 8004b40:	f003 0302 	and.w	r3, r3, #2
 8004b44:	2b02      	cmp	r3, #2
 8004b46:	d112      	bne.n	8004b6e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b4c:	881a      	ldrh	r2, [r3, #0]
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b58:	1c9a      	adds	r2, r3, #2
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b62:	b29b      	uxth	r3, r3
 8004b64:	3b01      	subs	r3, #1
 8004b66:	b29a      	uxth	r2, r3
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	86da      	strh	r2, [r3, #54]	; 0x36
 8004b6c:	e011      	b.n	8004b92 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004b6e:	f7fd fe2d 	bl	80027cc <HAL_GetTick>
 8004b72:	4602      	mov	r2, r0
 8004b74:	69bb      	ldr	r3, [r7, #24]
 8004b76:	1ad3      	subs	r3, r2, r3
 8004b78:	683a      	ldr	r2, [r7, #0]
 8004b7a:	429a      	cmp	r2, r3
 8004b7c:	d803      	bhi.n	8004b86 <HAL_SPI_Transmit+0x168>
 8004b7e:	683b      	ldr	r3, [r7, #0]
 8004b80:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004b84:	d102      	bne.n	8004b8c <HAL_SPI_Transmit+0x16e>
 8004b86:	683b      	ldr	r3, [r7, #0]
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d102      	bne.n	8004b92 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8004b8c:	2303      	movs	r3, #3
 8004b8e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004b90:	e074      	b.n	8004c7c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b96:	b29b      	uxth	r3, r3
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d1ce      	bne.n	8004b3a <HAL_SPI_Transmit+0x11c>
 8004b9c:	e04c      	b.n	8004c38 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	685b      	ldr	r3, [r3, #4]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d002      	beq.n	8004bac <HAL_SPI_Transmit+0x18e>
 8004ba6:	8afb      	ldrh	r3, [r7, #22]
 8004ba8:	2b01      	cmp	r3, #1
 8004baa:	d140      	bne.n	8004c2e <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	330c      	adds	r3, #12
 8004bb6:	7812      	ldrb	r2, [r2, #0]
 8004bb8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bbe:	1c5a      	adds	r2, r3, #1
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004bc8:	b29b      	uxth	r3, r3
 8004bca:	3b01      	subs	r3, #1
 8004bcc:	b29a      	uxth	r2, r3
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004bd2:	e02c      	b.n	8004c2e <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	689b      	ldr	r3, [r3, #8]
 8004bda:	f003 0302 	and.w	r3, r3, #2
 8004bde:	2b02      	cmp	r3, #2
 8004be0:	d113      	bne.n	8004c0a <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	330c      	adds	r3, #12
 8004bec:	7812      	ldrb	r2, [r2, #0]
 8004bee:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bf4:	1c5a      	adds	r2, r3, #1
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004bfe:	b29b      	uxth	r3, r3
 8004c00:	3b01      	subs	r3, #1
 8004c02:	b29a      	uxth	r2, r3
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	86da      	strh	r2, [r3, #54]	; 0x36
 8004c08:	e011      	b.n	8004c2e <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004c0a:	f7fd fddf 	bl	80027cc <HAL_GetTick>
 8004c0e:	4602      	mov	r2, r0
 8004c10:	69bb      	ldr	r3, [r7, #24]
 8004c12:	1ad3      	subs	r3, r2, r3
 8004c14:	683a      	ldr	r2, [r7, #0]
 8004c16:	429a      	cmp	r2, r3
 8004c18:	d803      	bhi.n	8004c22 <HAL_SPI_Transmit+0x204>
 8004c1a:	683b      	ldr	r3, [r7, #0]
 8004c1c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004c20:	d102      	bne.n	8004c28 <HAL_SPI_Transmit+0x20a>
 8004c22:	683b      	ldr	r3, [r7, #0]
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d102      	bne.n	8004c2e <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8004c28:	2303      	movs	r3, #3
 8004c2a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004c2c:	e026      	b.n	8004c7c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004c32:	b29b      	uxth	r3, r3
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d1cd      	bne.n	8004bd4 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004c38:	69ba      	ldr	r2, [r7, #24]
 8004c3a:	6839      	ldr	r1, [r7, #0]
 8004c3c:	68f8      	ldr	r0, [r7, #12]
 8004c3e:	f000 fbcb 	bl	80053d8 <SPI_EndRxTxTransaction>
 8004c42:	4603      	mov	r3, r0
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d002      	beq.n	8004c4e <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	2220      	movs	r2, #32
 8004c4c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	689b      	ldr	r3, [r3, #8]
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d10a      	bne.n	8004c6c <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004c56:	2300      	movs	r3, #0
 8004c58:	613b      	str	r3, [r7, #16]
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	68db      	ldr	r3, [r3, #12]
 8004c60:	613b      	str	r3, [r7, #16]
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	689b      	ldr	r3, [r3, #8]
 8004c68:	613b      	str	r3, [r7, #16]
 8004c6a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d002      	beq.n	8004c7a <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8004c74:	2301      	movs	r3, #1
 8004c76:	77fb      	strb	r3, [r7, #31]
 8004c78:	e000      	b.n	8004c7c <HAL_SPI_Transmit+0x25e>
  }

error:
 8004c7a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	2201      	movs	r2, #1
 8004c80:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	2200      	movs	r2, #0
 8004c88:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004c8c:	7ffb      	ldrb	r3, [r7, #31]
}
 8004c8e:	4618      	mov	r0, r3
 8004c90:	3720      	adds	r7, #32
 8004c92:	46bd      	mov	sp, r7
 8004c94:	bd80      	pop	{r7, pc}

08004c96 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c96:	b580      	push	{r7, lr}
 8004c98:	b088      	sub	sp, #32
 8004c9a:	af02      	add	r7, sp, #8
 8004c9c:	60f8      	str	r0, [r7, #12]
 8004c9e:	60b9      	str	r1, [r7, #8]
 8004ca0:	603b      	str	r3, [r7, #0]
 8004ca2:	4613      	mov	r3, r2
 8004ca4:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	685b      	ldr	r3, [r3, #4]
 8004cae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004cb2:	d112      	bne.n	8004cda <HAL_SPI_Receive+0x44>
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	689b      	ldr	r3, [r3, #8]
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d10e      	bne.n	8004cda <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	2204      	movs	r2, #4
 8004cc0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004cc4:	88fa      	ldrh	r2, [r7, #6]
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	9300      	str	r3, [sp, #0]
 8004cca:	4613      	mov	r3, r2
 8004ccc:	68ba      	ldr	r2, [r7, #8]
 8004cce:	68b9      	ldr	r1, [r7, #8]
 8004cd0:	68f8      	ldr	r0, [r7, #12]
 8004cd2:	f000 f8f1 	bl	8004eb8 <HAL_SPI_TransmitReceive>
 8004cd6:	4603      	mov	r3, r0
 8004cd8:	e0ea      	b.n	8004eb0 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004ce0:	2b01      	cmp	r3, #1
 8004ce2:	d101      	bne.n	8004ce8 <HAL_SPI_Receive+0x52>
 8004ce4:	2302      	movs	r3, #2
 8004ce6:	e0e3      	b.n	8004eb0 <HAL_SPI_Receive+0x21a>
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	2201      	movs	r2, #1
 8004cec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004cf0:	f7fd fd6c 	bl	80027cc <HAL_GetTick>
 8004cf4:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004cfc:	b2db      	uxtb	r3, r3
 8004cfe:	2b01      	cmp	r3, #1
 8004d00:	d002      	beq.n	8004d08 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8004d02:	2302      	movs	r3, #2
 8004d04:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004d06:	e0ca      	b.n	8004e9e <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8004d08:	68bb      	ldr	r3, [r7, #8]
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d002      	beq.n	8004d14 <HAL_SPI_Receive+0x7e>
 8004d0e:	88fb      	ldrh	r3, [r7, #6]
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d102      	bne.n	8004d1a <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004d14:	2301      	movs	r3, #1
 8004d16:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004d18:	e0c1      	b.n	8004e9e <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	2204      	movs	r2, #4
 8004d1e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	2200      	movs	r2, #0
 8004d26:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	68ba      	ldr	r2, [r7, #8]
 8004d2c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	88fa      	ldrh	r2, [r7, #6]
 8004d32:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	88fa      	ldrh	r2, [r7, #6]
 8004d38:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	2200      	movs	r2, #0
 8004d44:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	2200      	movs	r2, #0
 8004d4a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	2200      	movs	r2, #0
 8004d50:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	2200      	movs	r2, #0
 8004d56:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	689b      	ldr	r3, [r3, #8]
 8004d5c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d60:	d10f      	bne.n	8004d82 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	681a      	ldr	r2, [r3, #0]
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d70:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	681a      	ldr	r2, [r3, #0]
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004d80:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d8c:	2b40      	cmp	r3, #64	; 0x40
 8004d8e:	d007      	beq.n	8004da0 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	681a      	ldr	r2, [r3, #0]
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004d9e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	68db      	ldr	r3, [r3, #12]
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d162      	bne.n	8004e6e <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004da8:	e02e      	b.n	8004e08 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	689b      	ldr	r3, [r3, #8]
 8004db0:	f003 0301 	and.w	r3, r3, #1
 8004db4:	2b01      	cmp	r3, #1
 8004db6:	d115      	bne.n	8004de4 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f103 020c 	add.w	r2, r3, #12
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dc4:	7812      	ldrb	r2, [r2, #0]
 8004dc6:	b2d2      	uxtb	r2, r2
 8004dc8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dce:	1c5a      	adds	r2, r3, #1
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004dd8:	b29b      	uxth	r3, r3
 8004dda:	3b01      	subs	r3, #1
 8004ddc:	b29a      	uxth	r2, r3
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004de2:	e011      	b.n	8004e08 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004de4:	f7fd fcf2 	bl	80027cc <HAL_GetTick>
 8004de8:	4602      	mov	r2, r0
 8004dea:	693b      	ldr	r3, [r7, #16]
 8004dec:	1ad3      	subs	r3, r2, r3
 8004dee:	683a      	ldr	r2, [r7, #0]
 8004df0:	429a      	cmp	r2, r3
 8004df2:	d803      	bhi.n	8004dfc <HAL_SPI_Receive+0x166>
 8004df4:	683b      	ldr	r3, [r7, #0]
 8004df6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004dfa:	d102      	bne.n	8004e02 <HAL_SPI_Receive+0x16c>
 8004dfc:	683b      	ldr	r3, [r7, #0]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d102      	bne.n	8004e08 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8004e02:	2303      	movs	r3, #3
 8004e04:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004e06:	e04a      	b.n	8004e9e <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e0c:	b29b      	uxth	r3, r3
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d1cb      	bne.n	8004daa <HAL_SPI_Receive+0x114>
 8004e12:	e031      	b.n	8004e78 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	689b      	ldr	r3, [r3, #8]
 8004e1a:	f003 0301 	and.w	r3, r3, #1
 8004e1e:	2b01      	cmp	r3, #1
 8004e20:	d113      	bne.n	8004e4a <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	68da      	ldr	r2, [r3, #12]
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e2c:	b292      	uxth	r2, r2
 8004e2e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e34:	1c9a      	adds	r2, r3, #2
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e3e:	b29b      	uxth	r3, r3
 8004e40:	3b01      	subs	r3, #1
 8004e42:	b29a      	uxth	r2, r3
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004e48:	e011      	b.n	8004e6e <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004e4a:	f7fd fcbf 	bl	80027cc <HAL_GetTick>
 8004e4e:	4602      	mov	r2, r0
 8004e50:	693b      	ldr	r3, [r7, #16]
 8004e52:	1ad3      	subs	r3, r2, r3
 8004e54:	683a      	ldr	r2, [r7, #0]
 8004e56:	429a      	cmp	r2, r3
 8004e58:	d803      	bhi.n	8004e62 <HAL_SPI_Receive+0x1cc>
 8004e5a:	683b      	ldr	r3, [r7, #0]
 8004e5c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004e60:	d102      	bne.n	8004e68 <HAL_SPI_Receive+0x1d2>
 8004e62:	683b      	ldr	r3, [r7, #0]
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d102      	bne.n	8004e6e <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8004e68:	2303      	movs	r3, #3
 8004e6a:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004e6c:	e017      	b.n	8004e9e <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e72:	b29b      	uxth	r3, r3
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d1cd      	bne.n	8004e14 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004e78:	693a      	ldr	r2, [r7, #16]
 8004e7a:	6839      	ldr	r1, [r7, #0]
 8004e7c:	68f8      	ldr	r0, [r7, #12]
 8004e7e:	f000 fa45 	bl	800530c <SPI_EndRxTransaction>
 8004e82:	4603      	mov	r3, r0
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d002      	beq.n	8004e8e <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	2220      	movs	r2, #32
 8004e8c:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d002      	beq.n	8004e9c <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8004e96:	2301      	movs	r3, #1
 8004e98:	75fb      	strb	r3, [r7, #23]
 8004e9a:	e000      	b.n	8004e9e <HAL_SPI_Receive+0x208>
  }

error :
 8004e9c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	2201      	movs	r2, #1
 8004ea2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004eae:	7dfb      	ldrb	r3, [r7, #23]
}
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	3718      	adds	r7, #24
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	bd80      	pop	{r7, pc}

08004eb8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	b08c      	sub	sp, #48	; 0x30
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	60f8      	str	r0, [r7, #12]
 8004ec0:	60b9      	str	r1, [r7, #8]
 8004ec2:	607a      	str	r2, [r7, #4]
 8004ec4:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004ec6:	2301      	movs	r3, #1
 8004ec8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004eca:	2300      	movs	r3, #0
 8004ecc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004ed6:	2b01      	cmp	r3, #1
 8004ed8:	d101      	bne.n	8004ede <HAL_SPI_TransmitReceive+0x26>
 8004eda:	2302      	movs	r3, #2
 8004edc:	e18a      	b.n	80051f4 <HAL_SPI_TransmitReceive+0x33c>
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	2201      	movs	r2, #1
 8004ee2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004ee6:	f7fd fc71 	bl	80027cc <HAL_GetTick>
 8004eea:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004ef2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	685b      	ldr	r3, [r3, #4]
 8004efa:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004efc:	887b      	ldrh	r3, [r7, #2]
 8004efe:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004f00:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004f04:	2b01      	cmp	r3, #1
 8004f06:	d00f      	beq.n	8004f28 <HAL_SPI_TransmitReceive+0x70>
 8004f08:	69fb      	ldr	r3, [r7, #28]
 8004f0a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004f0e:	d107      	bne.n	8004f20 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	689b      	ldr	r3, [r3, #8]
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d103      	bne.n	8004f20 <HAL_SPI_TransmitReceive+0x68>
 8004f18:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004f1c:	2b04      	cmp	r3, #4
 8004f1e:	d003      	beq.n	8004f28 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004f20:	2302      	movs	r3, #2
 8004f22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004f26:	e15b      	b.n	80051e0 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004f28:	68bb      	ldr	r3, [r7, #8]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d005      	beq.n	8004f3a <HAL_SPI_TransmitReceive+0x82>
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d002      	beq.n	8004f3a <HAL_SPI_TransmitReceive+0x82>
 8004f34:	887b      	ldrh	r3, [r7, #2]
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d103      	bne.n	8004f42 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004f3a:	2301      	movs	r3, #1
 8004f3c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004f40:	e14e      	b.n	80051e0 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004f48:	b2db      	uxtb	r3, r3
 8004f4a:	2b04      	cmp	r3, #4
 8004f4c:	d003      	beq.n	8004f56 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	2205      	movs	r2, #5
 8004f52:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	2200      	movs	r2, #0
 8004f5a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	687a      	ldr	r2, [r7, #4]
 8004f60:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	887a      	ldrh	r2, [r7, #2]
 8004f66:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	887a      	ldrh	r2, [r7, #2]
 8004f6c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	68ba      	ldr	r2, [r7, #8]
 8004f72:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	887a      	ldrh	r2, [r7, #2]
 8004f78:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	887a      	ldrh	r2, [r7, #2]
 8004f7e:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	2200      	movs	r2, #0
 8004f84:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	2200      	movs	r2, #0
 8004f8a:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f96:	2b40      	cmp	r3, #64	; 0x40
 8004f98:	d007      	beq.n	8004faa <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	681a      	ldr	r2, [r3, #0]
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004fa8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	68db      	ldr	r3, [r3, #12]
 8004fae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004fb2:	d178      	bne.n	80050a6 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	685b      	ldr	r3, [r3, #4]
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d002      	beq.n	8004fc2 <HAL_SPI_TransmitReceive+0x10a>
 8004fbc:	8b7b      	ldrh	r3, [r7, #26]
 8004fbe:	2b01      	cmp	r3, #1
 8004fc0:	d166      	bne.n	8005090 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fc6:	881a      	ldrh	r2, [r3, #0]
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fd2:	1c9a      	adds	r2, r3, #2
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004fdc:	b29b      	uxth	r3, r3
 8004fde:	3b01      	subs	r3, #1
 8004fe0:	b29a      	uxth	r2, r3
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004fe6:	e053      	b.n	8005090 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	689b      	ldr	r3, [r3, #8]
 8004fee:	f003 0302 	and.w	r3, r3, #2
 8004ff2:	2b02      	cmp	r3, #2
 8004ff4:	d11b      	bne.n	800502e <HAL_SPI_TransmitReceive+0x176>
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ffa:	b29b      	uxth	r3, r3
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d016      	beq.n	800502e <HAL_SPI_TransmitReceive+0x176>
 8005000:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005002:	2b01      	cmp	r3, #1
 8005004:	d113      	bne.n	800502e <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800500a:	881a      	ldrh	r2, [r3, #0]
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005016:	1c9a      	adds	r2, r3, #2
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005020:	b29b      	uxth	r3, r3
 8005022:	3b01      	subs	r3, #1
 8005024:	b29a      	uxth	r2, r3
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800502a:	2300      	movs	r3, #0
 800502c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	689b      	ldr	r3, [r3, #8]
 8005034:	f003 0301 	and.w	r3, r3, #1
 8005038:	2b01      	cmp	r3, #1
 800503a:	d119      	bne.n	8005070 <HAL_SPI_TransmitReceive+0x1b8>
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005040:	b29b      	uxth	r3, r3
 8005042:	2b00      	cmp	r3, #0
 8005044:	d014      	beq.n	8005070 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	68da      	ldr	r2, [r3, #12]
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005050:	b292      	uxth	r2, r2
 8005052:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005058:	1c9a      	adds	r2, r3, #2
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005062:	b29b      	uxth	r3, r3
 8005064:	3b01      	subs	r3, #1
 8005066:	b29a      	uxth	r2, r3
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800506c:	2301      	movs	r3, #1
 800506e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005070:	f7fd fbac 	bl	80027cc <HAL_GetTick>
 8005074:	4602      	mov	r2, r0
 8005076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005078:	1ad3      	subs	r3, r2, r3
 800507a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800507c:	429a      	cmp	r2, r3
 800507e:	d807      	bhi.n	8005090 <HAL_SPI_TransmitReceive+0x1d8>
 8005080:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005082:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005086:	d003      	beq.n	8005090 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8005088:	2303      	movs	r3, #3
 800508a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800508e:	e0a7      	b.n	80051e0 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005094:	b29b      	uxth	r3, r3
 8005096:	2b00      	cmp	r3, #0
 8005098:	d1a6      	bne.n	8004fe8 <HAL_SPI_TransmitReceive+0x130>
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800509e:	b29b      	uxth	r3, r3
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d1a1      	bne.n	8004fe8 <HAL_SPI_TransmitReceive+0x130>
 80050a4:	e07c      	b.n	80051a0 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	685b      	ldr	r3, [r3, #4]
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d002      	beq.n	80050b4 <HAL_SPI_TransmitReceive+0x1fc>
 80050ae:	8b7b      	ldrh	r3, [r7, #26]
 80050b0:	2b01      	cmp	r3, #1
 80050b2:	d16b      	bne.n	800518c <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	330c      	adds	r3, #12
 80050be:	7812      	ldrb	r2, [r2, #0]
 80050c0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050c6:	1c5a      	adds	r2, r3, #1
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80050d0:	b29b      	uxth	r3, r3
 80050d2:	3b01      	subs	r3, #1
 80050d4:	b29a      	uxth	r2, r3
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80050da:	e057      	b.n	800518c <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	689b      	ldr	r3, [r3, #8]
 80050e2:	f003 0302 	and.w	r3, r3, #2
 80050e6:	2b02      	cmp	r3, #2
 80050e8:	d11c      	bne.n	8005124 <HAL_SPI_TransmitReceive+0x26c>
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80050ee:	b29b      	uxth	r3, r3
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d017      	beq.n	8005124 <HAL_SPI_TransmitReceive+0x26c>
 80050f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050f6:	2b01      	cmp	r3, #1
 80050f8:	d114      	bne.n	8005124 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	330c      	adds	r3, #12
 8005104:	7812      	ldrb	r2, [r2, #0]
 8005106:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800510c:	1c5a      	adds	r2, r3, #1
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005116:	b29b      	uxth	r3, r3
 8005118:	3b01      	subs	r3, #1
 800511a:	b29a      	uxth	r2, r3
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005120:	2300      	movs	r3, #0
 8005122:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	689b      	ldr	r3, [r3, #8]
 800512a:	f003 0301 	and.w	r3, r3, #1
 800512e:	2b01      	cmp	r3, #1
 8005130:	d119      	bne.n	8005166 <HAL_SPI_TransmitReceive+0x2ae>
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005136:	b29b      	uxth	r3, r3
 8005138:	2b00      	cmp	r3, #0
 800513a:	d014      	beq.n	8005166 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	68da      	ldr	r2, [r3, #12]
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005146:	b2d2      	uxtb	r2, r2
 8005148:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800514e:	1c5a      	adds	r2, r3, #1
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005158:	b29b      	uxth	r3, r3
 800515a:	3b01      	subs	r3, #1
 800515c:	b29a      	uxth	r2, r3
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005162:	2301      	movs	r3, #1
 8005164:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005166:	f7fd fb31 	bl	80027cc <HAL_GetTick>
 800516a:	4602      	mov	r2, r0
 800516c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800516e:	1ad3      	subs	r3, r2, r3
 8005170:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005172:	429a      	cmp	r2, r3
 8005174:	d803      	bhi.n	800517e <HAL_SPI_TransmitReceive+0x2c6>
 8005176:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005178:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800517c:	d102      	bne.n	8005184 <HAL_SPI_TransmitReceive+0x2cc>
 800517e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005180:	2b00      	cmp	r3, #0
 8005182:	d103      	bne.n	800518c <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8005184:	2303      	movs	r3, #3
 8005186:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800518a:	e029      	b.n	80051e0 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005190:	b29b      	uxth	r3, r3
 8005192:	2b00      	cmp	r3, #0
 8005194:	d1a2      	bne.n	80050dc <HAL_SPI_TransmitReceive+0x224>
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800519a:	b29b      	uxth	r3, r3
 800519c:	2b00      	cmp	r3, #0
 800519e:	d19d      	bne.n	80050dc <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80051a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051a2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80051a4:	68f8      	ldr	r0, [r7, #12]
 80051a6:	f000 f917 	bl	80053d8 <SPI_EndRxTxTransaction>
 80051aa:	4603      	mov	r3, r0
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d006      	beq.n	80051be <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80051b0:	2301      	movs	r3, #1
 80051b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	2220      	movs	r2, #32
 80051ba:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80051bc:	e010      	b.n	80051e0 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	689b      	ldr	r3, [r3, #8]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d10b      	bne.n	80051de <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80051c6:	2300      	movs	r3, #0
 80051c8:	617b      	str	r3, [r7, #20]
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	68db      	ldr	r3, [r3, #12]
 80051d0:	617b      	str	r3, [r7, #20]
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	689b      	ldr	r3, [r3, #8]
 80051d8:	617b      	str	r3, [r7, #20]
 80051da:	697b      	ldr	r3, [r7, #20]
 80051dc:	e000      	b.n	80051e0 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80051de:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	2201      	movs	r2, #1
 80051e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	2200      	movs	r2, #0
 80051ec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80051f0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80051f4:	4618      	mov	r0, r3
 80051f6:	3730      	adds	r7, #48	; 0x30
 80051f8:	46bd      	mov	sp, r7
 80051fa:	bd80      	pop	{r7, pc}

080051fc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80051fc:	b580      	push	{r7, lr}
 80051fe:	b088      	sub	sp, #32
 8005200:	af00      	add	r7, sp, #0
 8005202:	60f8      	str	r0, [r7, #12]
 8005204:	60b9      	str	r1, [r7, #8]
 8005206:	603b      	str	r3, [r7, #0]
 8005208:	4613      	mov	r3, r2
 800520a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800520c:	f7fd fade 	bl	80027cc <HAL_GetTick>
 8005210:	4602      	mov	r2, r0
 8005212:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005214:	1a9b      	subs	r3, r3, r2
 8005216:	683a      	ldr	r2, [r7, #0]
 8005218:	4413      	add	r3, r2
 800521a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800521c:	f7fd fad6 	bl	80027cc <HAL_GetTick>
 8005220:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005222:	4b39      	ldr	r3, [pc, #228]	; (8005308 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	015b      	lsls	r3, r3, #5
 8005228:	0d1b      	lsrs	r3, r3, #20
 800522a:	69fa      	ldr	r2, [r7, #28]
 800522c:	fb02 f303 	mul.w	r3, r2, r3
 8005230:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005232:	e054      	b.n	80052de <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005234:	683b      	ldr	r3, [r7, #0]
 8005236:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800523a:	d050      	beq.n	80052de <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800523c:	f7fd fac6 	bl	80027cc <HAL_GetTick>
 8005240:	4602      	mov	r2, r0
 8005242:	69bb      	ldr	r3, [r7, #24]
 8005244:	1ad3      	subs	r3, r2, r3
 8005246:	69fa      	ldr	r2, [r7, #28]
 8005248:	429a      	cmp	r2, r3
 800524a:	d902      	bls.n	8005252 <SPI_WaitFlagStateUntilTimeout+0x56>
 800524c:	69fb      	ldr	r3, [r7, #28]
 800524e:	2b00      	cmp	r3, #0
 8005250:	d13d      	bne.n	80052ce <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	685a      	ldr	r2, [r3, #4]
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005260:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	685b      	ldr	r3, [r3, #4]
 8005266:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800526a:	d111      	bne.n	8005290 <SPI_WaitFlagStateUntilTimeout+0x94>
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	689b      	ldr	r3, [r3, #8]
 8005270:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005274:	d004      	beq.n	8005280 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	689b      	ldr	r3, [r3, #8]
 800527a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800527e:	d107      	bne.n	8005290 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	681a      	ldr	r2, [r3, #0]
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800528e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005294:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005298:	d10f      	bne.n	80052ba <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	681a      	ldr	r2, [r3, #0]
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80052a8:	601a      	str	r2, [r3, #0]
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	681a      	ldr	r2, [r3, #0]
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80052b8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	2201      	movs	r2, #1
 80052be:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	2200      	movs	r2, #0
 80052c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80052ca:	2303      	movs	r3, #3
 80052cc:	e017      	b.n	80052fe <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80052ce:	697b      	ldr	r3, [r7, #20]
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d101      	bne.n	80052d8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80052d4:	2300      	movs	r3, #0
 80052d6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80052d8:	697b      	ldr	r3, [r7, #20]
 80052da:	3b01      	subs	r3, #1
 80052dc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	689a      	ldr	r2, [r3, #8]
 80052e4:	68bb      	ldr	r3, [r7, #8]
 80052e6:	4013      	ands	r3, r2
 80052e8:	68ba      	ldr	r2, [r7, #8]
 80052ea:	429a      	cmp	r2, r3
 80052ec:	bf0c      	ite	eq
 80052ee:	2301      	moveq	r3, #1
 80052f0:	2300      	movne	r3, #0
 80052f2:	b2db      	uxtb	r3, r3
 80052f4:	461a      	mov	r2, r3
 80052f6:	79fb      	ldrb	r3, [r7, #7]
 80052f8:	429a      	cmp	r2, r3
 80052fa:	d19b      	bne.n	8005234 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80052fc:	2300      	movs	r3, #0
}
 80052fe:	4618      	mov	r0, r3
 8005300:	3720      	adds	r7, #32
 8005302:	46bd      	mov	sp, r7
 8005304:	bd80      	pop	{r7, pc}
 8005306:	bf00      	nop
 8005308:	20000000 	.word	0x20000000

0800530c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800530c:	b580      	push	{r7, lr}
 800530e:	b086      	sub	sp, #24
 8005310:	af02      	add	r7, sp, #8
 8005312:	60f8      	str	r0, [r7, #12]
 8005314:	60b9      	str	r1, [r7, #8]
 8005316:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	685b      	ldr	r3, [r3, #4]
 800531c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005320:	d111      	bne.n	8005346 <SPI_EndRxTransaction+0x3a>
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	689b      	ldr	r3, [r3, #8]
 8005326:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800532a:	d004      	beq.n	8005336 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	689b      	ldr	r3, [r3, #8]
 8005330:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005334:	d107      	bne.n	8005346 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	681a      	ldr	r2, [r3, #0]
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005344:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	685b      	ldr	r3, [r3, #4]
 800534a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800534e:	d12a      	bne.n	80053a6 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	689b      	ldr	r3, [r3, #8]
 8005354:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005358:	d012      	beq.n	8005380 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	9300      	str	r3, [sp, #0]
 800535e:	68bb      	ldr	r3, [r7, #8]
 8005360:	2200      	movs	r2, #0
 8005362:	2180      	movs	r1, #128	; 0x80
 8005364:	68f8      	ldr	r0, [r7, #12]
 8005366:	f7ff ff49 	bl	80051fc <SPI_WaitFlagStateUntilTimeout>
 800536a:	4603      	mov	r3, r0
 800536c:	2b00      	cmp	r3, #0
 800536e:	d02d      	beq.n	80053cc <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005374:	f043 0220 	orr.w	r2, r3, #32
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800537c:	2303      	movs	r3, #3
 800537e:	e026      	b.n	80053ce <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	9300      	str	r3, [sp, #0]
 8005384:	68bb      	ldr	r3, [r7, #8]
 8005386:	2200      	movs	r2, #0
 8005388:	2101      	movs	r1, #1
 800538a:	68f8      	ldr	r0, [r7, #12]
 800538c:	f7ff ff36 	bl	80051fc <SPI_WaitFlagStateUntilTimeout>
 8005390:	4603      	mov	r3, r0
 8005392:	2b00      	cmp	r3, #0
 8005394:	d01a      	beq.n	80053cc <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800539a:	f043 0220 	orr.w	r2, r3, #32
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80053a2:	2303      	movs	r3, #3
 80053a4:	e013      	b.n	80053ce <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	9300      	str	r3, [sp, #0]
 80053aa:	68bb      	ldr	r3, [r7, #8]
 80053ac:	2200      	movs	r2, #0
 80053ae:	2101      	movs	r1, #1
 80053b0:	68f8      	ldr	r0, [r7, #12]
 80053b2:	f7ff ff23 	bl	80051fc <SPI_WaitFlagStateUntilTimeout>
 80053b6:	4603      	mov	r3, r0
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d007      	beq.n	80053cc <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053c0:	f043 0220 	orr.w	r2, r3, #32
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80053c8:	2303      	movs	r3, #3
 80053ca:	e000      	b.n	80053ce <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80053cc:	2300      	movs	r3, #0
}
 80053ce:	4618      	mov	r0, r3
 80053d0:	3710      	adds	r7, #16
 80053d2:	46bd      	mov	sp, r7
 80053d4:	bd80      	pop	{r7, pc}
	...

080053d8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80053d8:	b580      	push	{r7, lr}
 80053da:	b088      	sub	sp, #32
 80053dc:	af02      	add	r7, sp, #8
 80053de:	60f8      	str	r0, [r7, #12]
 80053e0:	60b9      	str	r1, [r7, #8]
 80053e2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80053e4:	4b1b      	ldr	r3, [pc, #108]	; (8005454 <SPI_EndRxTxTransaction+0x7c>)
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	4a1b      	ldr	r2, [pc, #108]	; (8005458 <SPI_EndRxTxTransaction+0x80>)
 80053ea:	fba2 2303 	umull	r2, r3, r2, r3
 80053ee:	0d5b      	lsrs	r3, r3, #21
 80053f0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80053f4:	fb02 f303 	mul.w	r3, r2, r3
 80053f8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	685b      	ldr	r3, [r3, #4]
 80053fe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005402:	d112      	bne.n	800542a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	9300      	str	r3, [sp, #0]
 8005408:	68bb      	ldr	r3, [r7, #8]
 800540a:	2200      	movs	r2, #0
 800540c:	2180      	movs	r1, #128	; 0x80
 800540e:	68f8      	ldr	r0, [r7, #12]
 8005410:	f7ff fef4 	bl	80051fc <SPI_WaitFlagStateUntilTimeout>
 8005414:	4603      	mov	r3, r0
 8005416:	2b00      	cmp	r3, #0
 8005418:	d016      	beq.n	8005448 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800541e:	f043 0220 	orr.w	r2, r3, #32
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005426:	2303      	movs	r3, #3
 8005428:	e00f      	b.n	800544a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800542a:	697b      	ldr	r3, [r7, #20]
 800542c:	2b00      	cmp	r3, #0
 800542e:	d00a      	beq.n	8005446 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005430:	697b      	ldr	r3, [r7, #20]
 8005432:	3b01      	subs	r3, #1
 8005434:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	689b      	ldr	r3, [r3, #8]
 800543c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005440:	2b80      	cmp	r3, #128	; 0x80
 8005442:	d0f2      	beq.n	800542a <SPI_EndRxTxTransaction+0x52>
 8005444:	e000      	b.n	8005448 <SPI_EndRxTxTransaction+0x70>
        break;
 8005446:	bf00      	nop
  }

  return HAL_OK;
 8005448:	2300      	movs	r3, #0
}
 800544a:	4618      	mov	r0, r3
 800544c:	3718      	adds	r7, #24
 800544e:	46bd      	mov	sp, r7
 8005450:	bd80      	pop	{r7, pc}
 8005452:	bf00      	nop
 8005454:	20000000 	.word	0x20000000
 8005458:	165e9f81 	.word	0x165e9f81

0800545c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800545c:	b580      	push	{r7, lr}
 800545e:	b082      	sub	sp, #8
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2b00      	cmp	r3, #0
 8005468:	d101      	bne.n	800546e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800546a:	2301      	movs	r3, #1
 800546c:	e041      	b.n	80054f2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005474:	b2db      	uxtb	r3, r3
 8005476:	2b00      	cmp	r3, #0
 8005478:	d106      	bne.n	8005488 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	2200      	movs	r2, #0
 800547e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005482:	6878      	ldr	r0, [r7, #4]
 8005484:	f7fc fc4e 	bl	8001d24 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2202      	movs	r2, #2
 800548c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681a      	ldr	r2, [r3, #0]
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	3304      	adds	r3, #4
 8005498:	4619      	mov	r1, r3
 800549a:	4610      	mov	r0, r2
 800549c:	f000 fdb0 	bl	8006000 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2201      	movs	r2, #1
 80054a4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	2201      	movs	r2, #1
 80054ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2201      	movs	r2, #1
 80054b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2201      	movs	r2, #1
 80054bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	2201      	movs	r2, #1
 80054c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	2201      	movs	r2, #1
 80054cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2201      	movs	r2, #1
 80054d4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	2201      	movs	r2, #1
 80054dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2201      	movs	r2, #1
 80054e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2201      	movs	r2, #1
 80054ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80054f0:	2300      	movs	r3, #0
}
 80054f2:	4618      	mov	r0, r3
 80054f4:	3708      	adds	r7, #8
 80054f6:	46bd      	mov	sp, r7
 80054f8:	bd80      	pop	{r7, pc}
	...

080054fc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80054fc:	b480      	push	{r7}
 80054fe:	b085      	sub	sp, #20
 8005500:	af00      	add	r7, sp, #0
 8005502:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800550a:	b2db      	uxtb	r3, r3
 800550c:	2b01      	cmp	r3, #1
 800550e:	d001      	beq.n	8005514 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005510:	2301      	movs	r3, #1
 8005512:	e046      	b.n	80055a2 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2202      	movs	r2, #2
 8005518:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	4a23      	ldr	r2, [pc, #140]	; (80055b0 <HAL_TIM_Base_Start+0xb4>)
 8005522:	4293      	cmp	r3, r2
 8005524:	d022      	beq.n	800556c <HAL_TIM_Base_Start+0x70>
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800552e:	d01d      	beq.n	800556c <HAL_TIM_Base_Start+0x70>
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	4a1f      	ldr	r2, [pc, #124]	; (80055b4 <HAL_TIM_Base_Start+0xb8>)
 8005536:	4293      	cmp	r3, r2
 8005538:	d018      	beq.n	800556c <HAL_TIM_Base_Start+0x70>
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	4a1e      	ldr	r2, [pc, #120]	; (80055b8 <HAL_TIM_Base_Start+0xbc>)
 8005540:	4293      	cmp	r3, r2
 8005542:	d013      	beq.n	800556c <HAL_TIM_Base_Start+0x70>
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	4a1c      	ldr	r2, [pc, #112]	; (80055bc <HAL_TIM_Base_Start+0xc0>)
 800554a:	4293      	cmp	r3, r2
 800554c:	d00e      	beq.n	800556c <HAL_TIM_Base_Start+0x70>
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	4a1b      	ldr	r2, [pc, #108]	; (80055c0 <HAL_TIM_Base_Start+0xc4>)
 8005554:	4293      	cmp	r3, r2
 8005556:	d009      	beq.n	800556c <HAL_TIM_Base_Start+0x70>
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	4a19      	ldr	r2, [pc, #100]	; (80055c4 <HAL_TIM_Base_Start+0xc8>)
 800555e:	4293      	cmp	r3, r2
 8005560:	d004      	beq.n	800556c <HAL_TIM_Base_Start+0x70>
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	4a18      	ldr	r2, [pc, #96]	; (80055c8 <HAL_TIM_Base_Start+0xcc>)
 8005568:	4293      	cmp	r3, r2
 800556a:	d111      	bne.n	8005590 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	689b      	ldr	r3, [r3, #8]
 8005572:	f003 0307 	and.w	r3, r3, #7
 8005576:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	2b06      	cmp	r3, #6
 800557c:	d010      	beq.n	80055a0 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	681a      	ldr	r2, [r3, #0]
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f042 0201 	orr.w	r2, r2, #1
 800558c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800558e:	e007      	b.n	80055a0 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	681a      	ldr	r2, [r3, #0]
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f042 0201 	orr.w	r2, r2, #1
 800559e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80055a0:	2300      	movs	r3, #0
}
 80055a2:	4618      	mov	r0, r3
 80055a4:	3714      	adds	r7, #20
 80055a6:	46bd      	mov	sp, r7
 80055a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ac:	4770      	bx	lr
 80055ae:	bf00      	nop
 80055b0:	40010000 	.word	0x40010000
 80055b4:	40000400 	.word	0x40000400
 80055b8:	40000800 	.word	0x40000800
 80055bc:	40000c00 	.word	0x40000c00
 80055c0:	40010400 	.word	0x40010400
 80055c4:	40014000 	.word	0x40014000
 80055c8:	40001800 	.word	0x40001800

080055cc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80055cc:	b480      	push	{r7}
 80055ce:	b085      	sub	sp, #20
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055da:	b2db      	uxtb	r3, r3
 80055dc:	2b01      	cmp	r3, #1
 80055de:	d001      	beq.n	80055e4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80055e0:	2301      	movs	r3, #1
 80055e2:	e04e      	b.n	8005682 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2202      	movs	r2, #2
 80055e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	68da      	ldr	r2, [r3, #12]
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f042 0201 	orr.w	r2, r2, #1
 80055fa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	4a23      	ldr	r2, [pc, #140]	; (8005690 <HAL_TIM_Base_Start_IT+0xc4>)
 8005602:	4293      	cmp	r3, r2
 8005604:	d022      	beq.n	800564c <HAL_TIM_Base_Start_IT+0x80>
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800560e:	d01d      	beq.n	800564c <HAL_TIM_Base_Start_IT+0x80>
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	4a1f      	ldr	r2, [pc, #124]	; (8005694 <HAL_TIM_Base_Start_IT+0xc8>)
 8005616:	4293      	cmp	r3, r2
 8005618:	d018      	beq.n	800564c <HAL_TIM_Base_Start_IT+0x80>
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	4a1e      	ldr	r2, [pc, #120]	; (8005698 <HAL_TIM_Base_Start_IT+0xcc>)
 8005620:	4293      	cmp	r3, r2
 8005622:	d013      	beq.n	800564c <HAL_TIM_Base_Start_IT+0x80>
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	4a1c      	ldr	r2, [pc, #112]	; (800569c <HAL_TIM_Base_Start_IT+0xd0>)
 800562a:	4293      	cmp	r3, r2
 800562c:	d00e      	beq.n	800564c <HAL_TIM_Base_Start_IT+0x80>
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	4a1b      	ldr	r2, [pc, #108]	; (80056a0 <HAL_TIM_Base_Start_IT+0xd4>)
 8005634:	4293      	cmp	r3, r2
 8005636:	d009      	beq.n	800564c <HAL_TIM_Base_Start_IT+0x80>
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	4a19      	ldr	r2, [pc, #100]	; (80056a4 <HAL_TIM_Base_Start_IT+0xd8>)
 800563e:	4293      	cmp	r3, r2
 8005640:	d004      	beq.n	800564c <HAL_TIM_Base_Start_IT+0x80>
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	4a18      	ldr	r2, [pc, #96]	; (80056a8 <HAL_TIM_Base_Start_IT+0xdc>)
 8005648:	4293      	cmp	r3, r2
 800564a:	d111      	bne.n	8005670 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	689b      	ldr	r3, [r3, #8]
 8005652:	f003 0307 	and.w	r3, r3, #7
 8005656:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	2b06      	cmp	r3, #6
 800565c:	d010      	beq.n	8005680 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	681a      	ldr	r2, [r3, #0]
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f042 0201 	orr.w	r2, r2, #1
 800566c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800566e:	e007      	b.n	8005680 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	681a      	ldr	r2, [r3, #0]
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f042 0201 	orr.w	r2, r2, #1
 800567e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005680:	2300      	movs	r3, #0
}
 8005682:	4618      	mov	r0, r3
 8005684:	3714      	adds	r7, #20
 8005686:	46bd      	mov	sp, r7
 8005688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568c:	4770      	bx	lr
 800568e:	bf00      	nop
 8005690:	40010000 	.word	0x40010000
 8005694:	40000400 	.word	0x40000400
 8005698:	40000800 	.word	0x40000800
 800569c:	40000c00 	.word	0x40000c00
 80056a0:	40010400 	.word	0x40010400
 80056a4:	40014000 	.word	0x40014000
 80056a8:	40001800 	.word	0x40001800

080056ac <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80056ac:	b580      	push	{r7, lr}
 80056ae:	b082      	sub	sp, #8
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d101      	bne.n	80056be <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80056ba:	2301      	movs	r3, #1
 80056bc:	e041      	b.n	8005742 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056c4:	b2db      	uxtb	r3, r3
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d106      	bne.n	80056d8 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	2200      	movs	r2, #0
 80056ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80056d2:	6878      	ldr	r0, [r7, #4]
 80056d4:	f000 f839 	bl	800574a <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2202      	movs	r2, #2
 80056dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681a      	ldr	r2, [r3, #0]
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	3304      	adds	r3, #4
 80056e8:	4619      	mov	r1, r3
 80056ea:	4610      	mov	r0, r2
 80056ec:	f000 fc88 	bl	8006000 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2201      	movs	r2, #1
 80056f4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2201      	movs	r2, #1
 80056fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	2201      	movs	r2, #1
 8005704:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2201      	movs	r2, #1
 800570c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	2201      	movs	r2, #1
 8005714:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2201      	movs	r2, #1
 800571c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2201      	movs	r2, #1
 8005724:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	2201      	movs	r2, #1
 800572c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2201      	movs	r2, #1
 8005734:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	2201      	movs	r2, #1
 800573c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005740:	2300      	movs	r3, #0
}
 8005742:	4618      	mov	r0, r3
 8005744:	3708      	adds	r7, #8
 8005746:	46bd      	mov	sp, r7
 8005748:	bd80      	pop	{r7, pc}

0800574a <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800574a:	b480      	push	{r7}
 800574c:	b083      	sub	sp, #12
 800574e:	af00      	add	r7, sp, #0
 8005750:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8005752:	bf00      	nop
 8005754:	370c      	adds	r7, #12
 8005756:	46bd      	mov	sp, r7
 8005758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575c:	4770      	bx	lr

0800575e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800575e:	b580      	push	{r7, lr}
 8005760:	b082      	sub	sp, #8
 8005762:	af00      	add	r7, sp, #0
 8005764:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	2b00      	cmp	r3, #0
 800576a:	d101      	bne.n	8005770 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800576c:	2301      	movs	r3, #1
 800576e:	e041      	b.n	80057f4 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005776:	b2db      	uxtb	r3, r3
 8005778:	2b00      	cmp	r3, #0
 800577a:	d106      	bne.n	800578a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2200      	movs	r2, #0
 8005780:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005784:	6878      	ldr	r0, [r7, #4]
 8005786:	f000 f839 	bl	80057fc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	2202      	movs	r2, #2
 800578e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681a      	ldr	r2, [r3, #0]
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	3304      	adds	r3, #4
 800579a:	4619      	mov	r1, r3
 800579c:	4610      	mov	r0, r2
 800579e:	f000 fc2f 	bl	8006000 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	2201      	movs	r2, #1
 80057a6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	2201      	movs	r2, #1
 80057ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	2201      	movs	r2, #1
 80057b6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	2201      	movs	r2, #1
 80057be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	2201      	movs	r2, #1
 80057c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	2201      	movs	r2, #1
 80057ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	2201      	movs	r2, #1
 80057d6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	2201      	movs	r2, #1
 80057de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	2201      	movs	r2, #1
 80057e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	2201      	movs	r2, #1
 80057ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80057f2:	2300      	movs	r3, #0
}
 80057f4:	4618      	mov	r0, r3
 80057f6:	3708      	adds	r7, #8
 80057f8:	46bd      	mov	sp, r7
 80057fa:	bd80      	pop	{r7, pc}

080057fc <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80057fc:	b480      	push	{r7}
 80057fe:	b083      	sub	sp, #12
 8005800:	af00      	add	r7, sp, #0
 8005802:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005804:	bf00      	nop
 8005806:	370c      	adds	r7, #12
 8005808:	46bd      	mov	sp, r7
 800580a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580e:	4770      	bx	lr

08005810 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8005810:	b580      	push	{r7, lr}
 8005812:	b082      	sub	sp, #8
 8005814:	af00      	add	r7, sp, #0
 8005816:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2b00      	cmp	r3, #0
 800581c:	d101      	bne.n	8005822 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800581e:	2301      	movs	r3, #1
 8005820:	e041      	b.n	80058a6 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005828:	b2db      	uxtb	r3, r3
 800582a:	2b00      	cmp	r3, #0
 800582c:	d106      	bne.n	800583c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	2200      	movs	r2, #0
 8005832:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8005836:	6878      	ldr	r0, [r7, #4]
 8005838:	f000 f839 	bl	80058ae <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2202      	movs	r2, #2
 8005840:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681a      	ldr	r2, [r3, #0]
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	3304      	adds	r3, #4
 800584c:	4619      	mov	r1, r3
 800584e:	4610      	mov	r0, r2
 8005850:	f000 fbd6 	bl	8006000 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	2201      	movs	r2, #1
 8005858:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2201      	movs	r2, #1
 8005860:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2201      	movs	r2, #1
 8005868:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	2201      	movs	r2, #1
 8005870:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2201      	movs	r2, #1
 8005878:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	2201      	movs	r2, #1
 8005880:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2201      	movs	r2, #1
 8005888:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2201      	movs	r2, #1
 8005890:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2201      	movs	r2, #1
 8005898:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2201      	movs	r2, #1
 80058a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80058a4:	2300      	movs	r3, #0
}
 80058a6:	4618      	mov	r0, r3
 80058a8:	3708      	adds	r7, #8
 80058aa:	46bd      	mov	sp, r7
 80058ac:	bd80      	pop	{r7, pc}

080058ae <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80058ae:	b480      	push	{r7}
 80058b0:	b083      	sub	sp, #12
 80058b2:	af00      	add	r7, sp, #0
 80058b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80058b6:	bf00      	nop
 80058b8:	370c      	adds	r7, #12
 80058ba:	46bd      	mov	sp, r7
 80058bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c0:	4770      	bx	lr

080058c2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80058c2:	b580      	push	{r7, lr}
 80058c4:	b082      	sub	sp, #8
 80058c6:	af00      	add	r7, sp, #0
 80058c8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	691b      	ldr	r3, [r3, #16]
 80058d0:	f003 0302 	and.w	r3, r3, #2
 80058d4:	2b02      	cmp	r3, #2
 80058d6:	d122      	bne.n	800591e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	68db      	ldr	r3, [r3, #12]
 80058de:	f003 0302 	and.w	r3, r3, #2
 80058e2:	2b02      	cmp	r3, #2
 80058e4:	d11b      	bne.n	800591e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f06f 0202 	mvn.w	r2, #2
 80058ee:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2201      	movs	r2, #1
 80058f4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	699b      	ldr	r3, [r3, #24]
 80058fc:	f003 0303 	and.w	r3, r3, #3
 8005900:	2b00      	cmp	r3, #0
 8005902:	d003      	beq.n	800590c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005904:	6878      	ldr	r0, [r7, #4]
 8005906:	f000 fb5d 	bl	8005fc4 <HAL_TIM_IC_CaptureCallback>
 800590a:	e005      	b.n	8005918 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800590c:	6878      	ldr	r0, [r7, #4]
 800590e:	f000 fb4f 	bl	8005fb0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005912:	6878      	ldr	r0, [r7, #4]
 8005914:	f000 fb60 	bl	8005fd8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	2200      	movs	r2, #0
 800591c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	691b      	ldr	r3, [r3, #16]
 8005924:	f003 0304 	and.w	r3, r3, #4
 8005928:	2b04      	cmp	r3, #4
 800592a:	d122      	bne.n	8005972 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	68db      	ldr	r3, [r3, #12]
 8005932:	f003 0304 	and.w	r3, r3, #4
 8005936:	2b04      	cmp	r3, #4
 8005938:	d11b      	bne.n	8005972 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	f06f 0204 	mvn.w	r2, #4
 8005942:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	2202      	movs	r2, #2
 8005948:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	699b      	ldr	r3, [r3, #24]
 8005950:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005954:	2b00      	cmp	r3, #0
 8005956:	d003      	beq.n	8005960 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005958:	6878      	ldr	r0, [r7, #4]
 800595a:	f000 fb33 	bl	8005fc4 <HAL_TIM_IC_CaptureCallback>
 800595e:	e005      	b.n	800596c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005960:	6878      	ldr	r0, [r7, #4]
 8005962:	f000 fb25 	bl	8005fb0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005966:	6878      	ldr	r0, [r7, #4]
 8005968:	f000 fb36 	bl	8005fd8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2200      	movs	r2, #0
 8005970:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	691b      	ldr	r3, [r3, #16]
 8005978:	f003 0308 	and.w	r3, r3, #8
 800597c:	2b08      	cmp	r3, #8
 800597e:	d122      	bne.n	80059c6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	68db      	ldr	r3, [r3, #12]
 8005986:	f003 0308 	and.w	r3, r3, #8
 800598a:	2b08      	cmp	r3, #8
 800598c:	d11b      	bne.n	80059c6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	f06f 0208 	mvn.w	r2, #8
 8005996:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	2204      	movs	r2, #4
 800599c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	69db      	ldr	r3, [r3, #28]
 80059a4:	f003 0303 	and.w	r3, r3, #3
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d003      	beq.n	80059b4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80059ac:	6878      	ldr	r0, [r7, #4]
 80059ae:	f000 fb09 	bl	8005fc4 <HAL_TIM_IC_CaptureCallback>
 80059b2:	e005      	b.n	80059c0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80059b4:	6878      	ldr	r0, [r7, #4]
 80059b6:	f000 fafb 	bl	8005fb0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059ba:	6878      	ldr	r0, [r7, #4]
 80059bc:	f000 fb0c 	bl	8005fd8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	2200      	movs	r2, #0
 80059c4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	691b      	ldr	r3, [r3, #16]
 80059cc:	f003 0310 	and.w	r3, r3, #16
 80059d0:	2b10      	cmp	r3, #16
 80059d2:	d122      	bne.n	8005a1a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	68db      	ldr	r3, [r3, #12]
 80059da:	f003 0310 	and.w	r3, r3, #16
 80059de:	2b10      	cmp	r3, #16
 80059e0:	d11b      	bne.n	8005a1a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	f06f 0210 	mvn.w	r2, #16
 80059ea:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	2208      	movs	r2, #8
 80059f0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	69db      	ldr	r3, [r3, #28]
 80059f8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d003      	beq.n	8005a08 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a00:	6878      	ldr	r0, [r7, #4]
 8005a02:	f000 fadf 	bl	8005fc4 <HAL_TIM_IC_CaptureCallback>
 8005a06:	e005      	b.n	8005a14 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a08:	6878      	ldr	r0, [r7, #4]
 8005a0a:	f000 fad1 	bl	8005fb0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a0e:	6878      	ldr	r0, [r7, #4]
 8005a10:	f000 fae2 	bl	8005fd8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	2200      	movs	r2, #0
 8005a18:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	691b      	ldr	r3, [r3, #16]
 8005a20:	f003 0301 	and.w	r3, r3, #1
 8005a24:	2b01      	cmp	r3, #1
 8005a26:	d10e      	bne.n	8005a46 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	68db      	ldr	r3, [r3, #12]
 8005a2e:	f003 0301 	and.w	r3, r3, #1
 8005a32:	2b01      	cmp	r3, #1
 8005a34:	d107      	bne.n	8005a46 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	f06f 0201 	mvn.w	r2, #1
 8005a3e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005a40:	6878      	ldr	r0, [r7, #4]
 8005a42:	f7fc f807 	bl	8001a54 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	691b      	ldr	r3, [r3, #16]
 8005a4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a50:	2b80      	cmp	r3, #128	; 0x80
 8005a52:	d10e      	bne.n	8005a72 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	68db      	ldr	r3, [r3, #12]
 8005a5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a5e:	2b80      	cmp	r3, #128	; 0x80
 8005a60:	d107      	bne.n	8005a72 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005a6a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005a6c:	6878      	ldr	r0, [r7, #4]
 8005a6e:	f000 ffb3 	bl	80069d8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	691b      	ldr	r3, [r3, #16]
 8005a78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a7c:	2b40      	cmp	r3, #64	; 0x40
 8005a7e:	d10e      	bne.n	8005a9e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	68db      	ldr	r3, [r3, #12]
 8005a86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a8a:	2b40      	cmp	r3, #64	; 0x40
 8005a8c:	d107      	bne.n	8005a9e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005a96:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005a98:	6878      	ldr	r0, [r7, #4]
 8005a9a:	f000 faa7 	bl	8005fec <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	691b      	ldr	r3, [r3, #16]
 8005aa4:	f003 0320 	and.w	r3, r3, #32
 8005aa8:	2b20      	cmp	r3, #32
 8005aaa:	d10e      	bne.n	8005aca <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	68db      	ldr	r3, [r3, #12]
 8005ab2:	f003 0320 	and.w	r3, r3, #32
 8005ab6:	2b20      	cmp	r3, #32
 8005ab8:	d107      	bne.n	8005aca <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	f06f 0220 	mvn.w	r2, #32
 8005ac2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005ac4:	6878      	ldr	r0, [r7, #4]
 8005ac6:	f000 ff7d 	bl	80069c4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005aca:	bf00      	nop
 8005acc:	3708      	adds	r7, #8
 8005ace:	46bd      	mov	sp, r7
 8005ad0:	bd80      	pop	{r7, pc}
	...

08005ad4 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8005ad4:	b580      	push	{r7, lr}
 8005ad6:	b084      	sub	sp, #16
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	60f8      	str	r0, [r7, #12]
 8005adc:	60b9      	str	r1, [r7, #8]
 8005ade:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ae6:	2b01      	cmp	r3, #1
 8005ae8:	d101      	bne.n	8005aee <HAL_TIM_OC_ConfigChannel+0x1a>
 8005aea:	2302      	movs	r3, #2
 8005aec:	e046      	b.n	8005b7c <HAL_TIM_OC_ConfigChannel+0xa8>
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	2201      	movs	r2, #1
 8005af2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	2b0c      	cmp	r3, #12
 8005afa:	d839      	bhi.n	8005b70 <HAL_TIM_OC_ConfigChannel+0x9c>
 8005afc:	a201      	add	r2, pc, #4	; (adr r2, 8005b04 <HAL_TIM_OC_ConfigChannel+0x30>)
 8005afe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b02:	bf00      	nop
 8005b04:	08005b39 	.word	0x08005b39
 8005b08:	08005b71 	.word	0x08005b71
 8005b0c:	08005b71 	.word	0x08005b71
 8005b10:	08005b71 	.word	0x08005b71
 8005b14:	08005b47 	.word	0x08005b47
 8005b18:	08005b71 	.word	0x08005b71
 8005b1c:	08005b71 	.word	0x08005b71
 8005b20:	08005b71 	.word	0x08005b71
 8005b24:	08005b55 	.word	0x08005b55
 8005b28:	08005b71 	.word	0x08005b71
 8005b2c:	08005b71 	.word	0x08005b71
 8005b30:	08005b71 	.word	0x08005b71
 8005b34:	08005b63 	.word	0x08005b63
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	68b9      	ldr	r1, [r7, #8]
 8005b3e:	4618      	mov	r0, r3
 8005b40:	f000 fafe 	bl	8006140 <TIM_OC1_SetConfig>
      break;
 8005b44:	e015      	b.n	8005b72 <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	68b9      	ldr	r1, [r7, #8]
 8005b4c:	4618      	mov	r0, r3
 8005b4e:	f000 fb67 	bl	8006220 <TIM_OC2_SetConfig>
      break;
 8005b52:	e00e      	b.n	8005b72 <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	68b9      	ldr	r1, [r7, #8]
 8005b5a:	4618      	mov	r0, r3
 8005b5c:	f000 fbd6 	bl	800630c <TIM_OC3_SetConfig>
      break;
 8005b60:	e007      	b.n	8005b72 <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	68b9      	ldr	r1, [r7, #8]
 8005b68:	4618      	mov	r0, r3
 8005b6a:	f000 fc43 	bl	80063f4 <TIM_OC4_SetConfig>
      break;
 8005b6e:	e000      	b.n	8005b72 <HAL_TIM_OC_ConfigChannel+0x9e>
    }

    default:
      break;
 8005b70:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	2200      	movs	r2, #0
 8005b76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005b7a:	2300      	movs	r3, #0
}
 8005b7c:	4618      	mov	r0, r3
 8005b7e:	3710      	adds	r7, #16
 8005b80:	46bd      	mov	sp, r7
 8005b82:	bd80      	pop	{r7, pc}

08005b84 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8005b84:	b580      	push	{r7, lr}
 8005b86:	b084      	sub	sp, #16
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	60f8      	str	r0, [r7, #12]
 8005b8c:	60b9      	str	r1, [r7, #8]
 8005b8e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b96:	2b01      	cmp	r3, #1
 8005b98:	d101      	bne.n	8005b9e <HAL_TIM_IC_ConfigChannel+0x1a>
 8005b9a:	2302      	movs	r3, #2
 8005b9c:	e082      	b.n	8005ca4 <HAL_TIM_IC_ConfigChannel+0x120>
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	2201      	movs	r2, #1
 8005ba2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d11b      	bne.n	8005be4 <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	6818      	ldr	r0, [r3, #0]
 8005bb0:	68bb      	ldr	r3, [r7, #8]
 8005bb2:	6819      	ldr	r1, [r3, #0]
 8005bb4:	68bb      	ldr	r3, [r7, #8]
 8005bb6:	685a      	ldr	r2, [r3, #4]
 8005bb8:	68bb      	ldr	r3, [r7, #8]
 8005bba:	68db      	ldr	r3, [r3, #12]
 8005bbc:	f000 fc70 	bl	80064a0 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	699a      	ldr	r2, [r3, #24]
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	f022 020c 	bic.w	r2, r2, #12
 8005bce:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	6999      	ldr	r1, [r3, #24]
 8005bd6:	68bb      	ldr	r3, [r7, #8]
 8005bd8:	689a      	ldr	r2, [r3, #8]
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	430a      	orrs	r2, r1
 8005be0:	619a      	str	r2, [r3, #24]
 8005be2:	e05a      	b.n	8005c9a <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	2b04      	cmp	r3, #4
 8005be8:	d11c      	bne.n	8005c24 <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	6818      	ldr	r0, [r3, #0]
 8005bee:	68bb      	ldr	r3, [r7, #8]
 8005bf0:	6819      	ldr	r1, [r3, #0]
 8005bf2:	68bb      	ldr	r3, [r7, #8]
 8005bf4:	685a      	ldr	r2, [r3, #4]
 8005bf6:	68bb      	ldr	r3, [r7, #8]
 8005bf8:	68db      	ldr	r3, [r3, #12]
 8005bfa:	f000 fcf4 	bl	80065e6 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	699a      	ldr	r2, [r3, #24]
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005c0c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	6999      	ldr	r1, [r3, #24]
 8005c14:	68bb      	ldr	r3, [r7, #8]
 8005c16:	689b      	ldr	r3, [r3, #8]
 8005c18:	021a      	lsls	r2, r3, #8
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	430a      	orrs	r2, r1
 8005c20:	619a      	str	r2, [r3, #24]
 8005c22:	e03a      	b.n	8005c9a <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	2b08      	cmp	r3, #8
 8005c28:	d11b      	bne.n	8005c62 <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	6818      	ldr	r0, [r3, #0]
 8005c2e:	68bb      	ldr	r3, [r7, #8]
 8005c30:	6819      	ldr	r1, [r3, #0]
 8005c32:	68bb      	ldr	r3, [r7, #8]
 8005c34:	685a      	ldr	r2, [r3, #4]
 8005c36:	68bb      	ldr	r3, [r7, #8]
 8005c38:	68db      	ldr	r3, [r3, #12]
 8005c3a:	f000 fd41 	bl	80066c0 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	69da      	ldr	r2, [r3, #28]
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f022 020c 	bic.w	r2, r2, #12
 8005c4c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	69d9      	ldr	r1, [r3, #28]
 8005c54:	68bb      	ldr	r3, [r7, #8]
 8005c56:	689a      	ldr	r2, [r3, #8]
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	430a      	orrs	r2, r1
 8005c5e:	61da      	str	r2, [r3, #28]
 8005c60:	e01b      	b.n	8005c9a <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	6818      	ldr	r0, [r3, #0]
 8005c66:	68bb      	ldr	r3, [r7, #8]
 8005c68:	6819      	ldr	r1, [r3, #0]
 8005c6a:	68bb      	ldr	r3, [r7, #8]
 8005c6c:	685a      	ldr	r2, [r3, #4]
 8005c6e:	68bb      	ldr	r3, [r7, #8]
 8005c70:	68db      	ldr	r3, [r3, #12]
 8005c72:	f000 fd61 	bl	8006738 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	69da      	ldr	r2, [r3, #28]
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005c84:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	69d9      	ldr	r1, [r3, #28]
 8005c8c:	68bb      	ldr	r3, [r7, #8]
 8005c8e:	689b      	ldr	r3, [r3, #8]
 8005c90:	021a      	lsls	r2, r3, #8
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	430a      	orrs	r2, r1
 8005c98:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	2200      	movs	r2, #0
 8005c9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005ca2:	2300      	movs	r3, #0
}
 8005ca4:	4618      	mov	r0, r3
 8005ca6:	3710      	adds	r7, #16
 8005ca8:	46bd      	mov	sp, r7
 8005caa:	bd80      	pop	{r7, pc}

08005cac <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005cac:	b580      	push	{r7, lr}
 8005cae:	b084      	sub	sp, #16
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	60f8      	str	r0, [r7, #12]
 8005cb4:	60b9      	str	r1, [r7, #8]
 8005cb6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005cbe:	2b01      	cmp	r3, #1
 8005cc0:	d101      	bne.n	8005cc6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8005cc2:	2302      	movs	r3, #2
 8005cc4:	e0ac      	b.n	8005e20 <HAL_TIM_PWM_ConfigChannel+0x174>
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	2201      	movs	r2, #1
 8005cca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	2b0c      	cmp	r3, #12
 8005cd2:	f200 809f 	bhi.w	8005e14 <HAL_TIM_PWM_ConfigChannel+0x168>
 8005cd6:	a201      	add	r2, pc, #4	; (adr r2, 8005cdc <HAL_TIM_PWM_ConfigChannel+0x30>)
 8005cd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cdc:	08005d11 	.word	0x08005d11
 8005ce0:	08005e15 	.word	0x08005e15
 8005ce4:	08005e15 	.word	0x08005e15
 8005ce8:	08005e15 	.word	0x08005e15
 8005cec:	08005d51 	.word	0x08005d51
 8005cf0:	08005e15 	.word	0x08005e15
 8005cf4:	08005e15 	.word	0x08005e15
 8005cf8:	08005e15 	.word	0x08005e15
 8005cfc:	08005d93 	.word	0x08005d93
 8005d00:	08005e15 	.word	0x08005e15
 8005d04:	08005e15 	.word	0x08005e15
 8005d08:	08005e15 	.word	0x08005e15
 8005d0c:	08005dd3 	.word	0x08005dd3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	68b9      	ldr	r1, [r7, #8]
 8005d16:	4618      	mov	r0, r3
 8005d18:	f000 fa12 	bl	8006140 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	699a      	ldr	r2, [r3, #24]
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	f042 0208 	orr.w	r2, r2, #8
 8005d2a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	699a      	ldr	r2, [r3, #24]
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	f022 0204 	bic.w	r2, r2, #4
 8005d3a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	6999      	ldr	r1, [r3, #24]
 8005d42:	68bb      	ldr	r3, [r7, #8]
 8005d44:	691a      	ldr	r2, [r3, #16]
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	430a      	orrs	r2, r1
 8005d4c:	619a      	str	r2, [r3, #24]
      break;
 8005d4e:	e062      	b.n	8005e16 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	68b9      	ldr	r1, [r7, #8]
 8005d56:	4618      	mov	r0, r3
 8005d58:	f000 fa62 	bl	8006220 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	699a      	ldr	r2, [r3, #24]
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005d6a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	699a      	ldr	r2, [r3, #24]
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005d7a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	6999      	ldr	r1, [r3, #24]
 8005d82:	68bb      	ldr	r3, [r7, #8]
 8005d84:	691b      	ldr	r3, [r3, #16]
 8005d86:	021a      	lsls	r2, r3, #8
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	430a      	orrs	r2, r1
 8005d8e:	619a      	str	r2, [r3, #24]
      break;
 8005d90:	e041      	b.n	8005e16 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	68b9      	ldr	r1, [r7, #8]
 8005d98:	4618      	mov	r0, r3
 8005d9a:	f000 fab7 	bl	800630c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	69da      	ldr	r2, [r3, #28]
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	f042 0208 	orr.w	r2, r2, #8
 8005dac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	69da      	ldr	r2, [r3, #28]
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	f022 0204 	bic.w	r2, r2, #4
 8005dbc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	69d9      	ldr	r1, [r3, #28]
 8005dc4:	68bb      	ldr	r3, [r7, #8]
 8005dc6:	691a      	ldr	r2, [r3, #16]
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	430a      	orrs	r2, r1
 8005dce:	61da      	str	r2, [r3, #28]
      break;
 8005dd0:	e021      	b.n	8005e16 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	68b9      	ldr	r1, [r7, #8]
 8005dd8:	4618      	mov	r0, r3
 8005dda:	f000 fb0b 	bl	80063f4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	69da      	ldr	r2, [r3, #28]
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005dec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	69da      	ldr	r2, [r3, #28]
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005dfc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	69d9      	ldr	r1, [r3, #28]
 8005e04:	68bb      	ldr	r3, [r7, #8]
 8005e06:	691b      	ldr	r3, [r3, #16]
 8005e08:	021a      	lsls	r2, r3, #8
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	430a      	orrs	r2, r1
 8005e10:	61da      	str	r2, [r3, #28]
      break;
 8005e12:	e000      	b.n	8005e16 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8005e14:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	2200      	movs	r2, #0
 8005e1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005e1e:	2300      	movs	r3, #0
}
 8005e20:	4618      	mov	r0, r3
 8005e22:	3710      	adds	r7, #16
 8005e24:	46bd      	mov	sp, r7
 8005e26:	bd80      	pop	{r7, pc}

08005e28 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005e28:	b580      	push	{r7, lr}
 8005e2a:	b084      	sub	sp, #16
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	6078      	str	r0, [r7, #4]
 8005e30:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e38:	2b01      	cmp	r3, #1
 8005e3a:	d101      	bne.n	8005e40 <HAL_TIM_ConfigClockSource+0x18>
 8005e3c:	2302      	movs	r3, #2
 8005e3e:	e0b3      	b.n	8005fa8 <HAL_TIM_ConfigClockSource+0x180>
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	2201      	movs	r2, #1
 8005e44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2202      	movs	r2, #2
 8005e4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	689b      	ldr	r3, [r3, #8]
 8005e56:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005e5e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005e66:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	68fa      	ldr	r2, [r7, #12]
 8005e6e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005e70:	683b      	ldr	r3, [r7, #0]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e78:	d03e      	beq.n	8005ef8 <HAL_TIM_ConfigClockSource+0xd0>
 8005e7a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e7e:	f200 8087 	bhi.w	8005f90 <HAL_TIM_ConfigClockSource+0x168>
 8005e82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e86:	f000 8085 	beq.w	8005f94 <HAL_TIM_ConfigClockSource+0x16c>
 8005e8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e8e:	d87f      	bhi.n	8005f90 <HAL_TIM_ConfigClockSource+0x168>
 8005e90:	2b70      	cmp	r3, #112	; 0x70
 8005e92:	d01a      	beq.n	8005eca <HAL_TIM_ConfigClockSource+0xa2>
 8005e94:	2b70      	cmp	r3, #112	; 0x70
 8005e96:	d87b      	bhi.n	8005f90 <HAL_TIM_ConfigClockSource+0x168>
 8005e98:	2b60      	cmp	r3, #96	; 0x60
 8005e9a:	d050      	beq.n	8005f3e <HAL_TIM_ConfigClockSource+0x116>
 8005e9c:	2b60      	cmp	r3, #96	; 0x60
 8005e9e:	d877      	bhi.n	8005f90 <HAL_TIM_ConfigClockSource+0x168>
 8005ea0:	2b50      	cmp	r3, #80	; 0x50
 8005ea2:	d03c      	beq.n	8005f1e <HAL_TIM_ConfigClockSource+0xf6>
 8005ea4:	2b50      	cmp	r3, #80	; 0x50
 8005ea6:	d873      	bhi.n	8005f90 <HAL_TIM_ConfigClockSource+0x168>
 8005ea8:	2b40      	cmp	r3, #64	; 0x40
 8005eaa:	d058      	beq.n	8005f5e <HAL_TIM_ConfigClockSource+0x136>
 8005eac:	2b40      	cmp	r3, #64	; 0x40
 8005eae:	d86f      	bhi.n	8005f90 <HAL_TIM_ConfigClockSource+0x168>
 8005eb0:	2b30      	cmp	r3, #48	; 0x30
 8005eb2:	d064      	beq.n	8005f7e <HAL_TIM_ConfigClockSource+0x156>
 8005eb4:	2b30      	cmp	r3, #48	; 0x30
 8005eb6:	d86b      	bhi.n	8005f90 <HAL_TIM_ConfigClockSource+0x168>
 8005eb8:	2b20      	cmp	r3, #32
 8005eba:	d060      	beq.n	8005f7e <HAL_TIM_ConfigClockSource+0x156>
 8005ebc:	2b20      	cmp	r3, #32
 8005ebe:	d867      	bhi.n	8005f90 <HAL_TIM_ConfigClockSource+0x168>
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d05c      	beq.n	8005f7e <HAL_TIM_ConfigClockSource+0x156>
 8005ec4:	2b10      	cmp	r3, #16
 8005ec6:	d05a      	beq.n	8005f7e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8005ec8:	e062      	b.n	8005f90 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	6818      	ldr	r0, [r3, #0]
 8005ece:	683b      	ldr	r3, [r7, #0]
 8005ed0:	6899      	ldr	r1, [r3, #8]
 8005ed2:	683b      	ldr	r3, [r7, #0]
 8005ed4:	685a      	ldr	r2, [r3, #4]
 8005ed6:	683b      	ldr	r3, [r7, #0]
 8005ed8:	68db      	ldr	r3, [r3, #12]
 8005eda:	f000 fc85 	bl	80067e8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	689b      	ldr	r3, [r3, #8]
 8005ee4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005eec:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	68fa      	ldr	r2, [r7, #12]
 8005ef4:	609a      	str	r2, [r3, #8]
      break;
 8005ef6:	e04e      	b.n	8005f96 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	6818      	ldr	r0, [r3, #0]
 8005efc:	683b      	ldr	r3, [r7, #0]
 8005efe:	6899      	ldr	r1, [r3, #8]
 8005f00:	683b      	ldr	r3, [r7, #0]
 8005f02:	685a      	ldr	r2, [r3, #4]
 8005f04:	683b      	ldr	r3, [r7, #0]
 8005f06:	68db      	ldr	r3, [r3, #12]
 8005f08:	f000 fc6e 	bl	80067e8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	689a      	ldr	r2, [r3, #8]
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005f1a:	609a      	str	r2, [r3, #8]
      break;
 8005f1c:	e03b      	b.n	8005f96 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	6818      	ldr	r0, [r3, #0]
 8005f22:	683b      	ldr	r3, [r7, #0]
 8005f24:	6859      	ldr	r1, [r3, #4]
 8005f26:	683b      	ldr	r3, [r7, #0]
 8005f28:	68db      	ldr	r3, [r3, #12]
 8005f2a:	461a      	mov	r2, r3
 8005f2c:	f000 fb2c 	bl	8006588 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	2150      	movs	r1, #80	; 0x50
 8005f36:	4618      	mov	r0, r3
 8005f38:	f000 fc3b 	bl	80067b2 <TIM_ITRx_SetConfig>
      break;
 8005f3c:	e02b      	b.n	8005f96 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	6818      	ldr	r0, [r3, #0]
 8005f42:	683b      	ldr	r3, [r7, #0]
 8005f44:	6859      	ldr	r1, [r3, #4]
 8005f46:	683b      	ldr	r3, [r7, #0]
 8005f48:	68db      	ldr	r3, [r3, #12]
 8005f4a:	461a      	mov	r2, r3
 8005f4c:	f000 fb88 	bl	8006660 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	2160      	movs	r1, #96	; 0x60
 8005f56:	4618      	mov	r0, r3
 8005f58:	f000 fc2b 	bl	80067b2 <TIM_ITRx_SetConfig>
      break;
 8005f5c:	e01b      	b.n	8005f96 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	6818      	ldr	r0, [r3, #0]
 8005f62:	683b      	ldr	r3, [r7, #0]
 8005f64:	6859      	ldr	r1, [r3, #4]
 8005f66:	683b      	ldr	r3, [r7, #0]
 8005f68:	68db      	ldr	r3, [r3, #12]
 8005f6a:	461a      	mov	r2, r3
 8005f6c:	f000 fb0c 	bl	8006588 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	2140      	movs	r1, #64	; 0x40
 8005f76:	4618      	mov	r0, r3
 8005f78:	f000 fc1b 	bl	80067b2 <TIM_ITRx_SetConfig>
      break;
 8005f7c:	e00b      	b.n	8005f96 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681a      	ldr	r2, [r3, #0]
 8005f82:	683b      	ldr	r3, [r7, #0]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	4619      	mov	r1, r3
 8005f88:	4610      	mov	r0, r2
 8005f8a:	f000 fc12 	bl	80067b2 <TIM_ITRx_SetConfig>
        break;
 8005f8e:	e002      	b.n	8005f96 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8005f90:	bf00      	nop
 8005f92:	e000      	b.n	8005f96 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8005f94:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	2201      	movs	r2, #1
 8005f9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	2200      	movs	r2, #0
 8005fa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005fa6:	2300      	movs	r3, #0
}
 8005fa8:	4618      	mov	r0, r3
 8005faa:	3710      	adds	r7, #16
 8005fac:	46bd      	mov	sp, r7
 8005fae:	bd80      	pop	{r7, pc}

08005fb0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005fb0:	b480      	push	{r7}
 8005fb2:	b083      	sub	sp, #12
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005fb8:	bf00      	nop
 8005fba:	370c      	adds	r7, #12
 8005fbc:	46bd      	mov	sp, r7
 8005fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc2:	4770      	bx	lr

08005fc4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005fc4:	b480      	push	{r7}
 8005fc6:	b083      	sub	sp, #12
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005fcc:	bf00      	nop
 8005fce:	370c      	adds	r7, #12
 8005fd0:	46bd      	mov	sp, r7
 8005fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd6:	4770      	bx	lr

08005fd8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005fd8:	b480      	push	{r7}
 8005fda:	b083      	sub	sp, #12
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005fe0:	bf00      	nop
 8005fe2:	370c      	adds	r7, #12
 8005fe4:	46bd      	mov	sp, r7
 8005fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fea:	4770      	bx	lr

08005fec <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005fec:	b480      	push	{r7}
 8005fee:	b083      	sub	sp, #12
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005ff4:	bf00      	nop
 8005ff6:	370c      	adds	r7, #12
 8005ff8:	46bd      	mov	sp, r7
 8005ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffe:	4770      	bx	lr

08006000 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006000:	b480      	push	{r7}
 8006002:	b085      	sub	sp, #20
 8006004:	af00      	add	r7, sp, #0
 8006006:	6078      	str	r0, [r7, #4]
 8006008:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	4a40      	ldr	r2, [pc, #256]	; (8006114 <TIM_Base_SetConfig+0x114>)
 8006014:	4293      	cmp	r3, r2
 8006016:	d013      	beq.n	8006040 <TIM_Base_SetConfig+0x40>
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800601e:	d00f      	beq.n	8006040 <TIM_Base_SetConfig+0x40>
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	4a3d      	ldr	r2, [pc, #244]	; (8006118 <TIM_Base_SetConfig+0x118>)
 8006024:	4293      	cmp	r3, r2
 8006026:	d00b      	beq.n	8006040 <TIM_Base_SetConfig+0x40>
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	4a3c      	ldr	r2, [pc, #240]	; (800611c <TIM_Base_SetConfig+0x11c>)
 800602c:	4293      	cmp	r3, r2
 800602e:	d007      	beq.n	8006040 <TIM_Base_SetConfig+0x40>
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	4a3b      	ldr	r2, [pc, #236]	; (8006120 <TIM_Base_SetConfig+0x120>)
 8006034:	4293      	cmp	r3, r2
 8006036:	d003      	beq.n	8006040 <TIM_Base_SetConfig+0x40>
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	4a3a      	ldr	r2, [pc, #232]	; (8006124 <TIM_Base_SetConfig+0x124>)
 800603c:	4293      	cmp	r3, r2
 800603e:	d108      	bne.n	8006052 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006046:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006048:	683b      	ldr	r3, [r7, #0]
 800604a:	685b      	ldr	r3, [r3, #4]
 800604c:	68fa      	ldr	r2, [r7, #12]
 800604e:	4313      	orrs	r3, r2
 8006050:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	4a2f      	ldr	r2, [pc, #188]	; (8006114 <TIM_Base_SetConfig+0x114>)
 8006056:	4293      	cmp	r3, r2
 8006058:	d02b      	beq.n	80060b2 <TIM_Base_SetConfig+0xb2>
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006060:	d027      	beq.n	80060b2 <TIM_Base_SetConfig+0xb2>
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	4a2c      	ldr	r2, [pc, #176]	; (8006118 <TIM_Base_SetConfig+0x118>)
 8006066:	4293      	cmp	r3, r2
 8006068:	d023      	beq.n	80060b2 <TIM_Base_SetConfig+0xb2>
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	4a2b      	ldr	r2, [pc, #172]	; (800611c <TIM_Base_SetConfig+0x11c>)
 800606e:	4293      	cmp	r3, r2
 8006070:	d01f      	beq.n	80060b2 <TIM_Base_SetConfig+0xb2>
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	4a2a      	ldr	r2, [pc, #168]	; (8006120 <TIM_Base_SetConfig+0x120>)
 8006076:	4293      	cmp	r3, r2
 8006078:	d01b      	beq.n	80060b2 <TIM_Base_SetConfig+0xb2>
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	4a29      	ldr	r2, [pc, #164]	; (8006124 <TIM_Base_SetConfig+0x124>)
 800607e:	4293      	cmp	r3, r2
 8006080:	d017      	beq.n	80060b2 <TIM_Base_SetConfig+0xb2>
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	4a28      	ldr	r2, [pc, #160]	; (8006128 <TIM_Base_SetConfig+0x128>)
 8006086:	4293      	cmp	r3, r2
 8006088:	d013      	beq.n	80060b2 <TIM_Base_SetConfig+0xb2>
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	4a27      	ldr	r2, [pc, #156]	; (800612c <TIM_Base_SetConfig+0x12c>)
 800608e:	4293      	cmp	r3, r2
 8006090:	d00f      	beq.n	80060b2 <TIM_Base_SetConfig+0xb2>
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	4a26      	ldr	r2, [pc, #152]	; (8006130 <TIM_Base_SetConfig+0x130>)
 8006096:	4293      	cmp	r3, r2
 8006098:	d00b      	beq.n	80060b2 <TIM_Base_SetConfig+0xb2>
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	4a25      	ldr	r2, [pc, #148]	; (8006134 <TIM_Base_SetConfig+0x134>)
 800609e:	4293      	cmp	r3, r2
 80060a0:	d007      	beq.n	80060b2 <TIM_Base_SetConfig+0xb2>
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	4a24      	ldr	r2, [pc, #144]	; (8006138 <TIM_Base_SetConfig+0x138>)
 80060a6:	4293      	cmp	r3, r2
 80060a8:	d003      	beq.n	80060b2 <TIM_Base_SetConfig+0xb2>
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	4a23      	ldr	r2, [pc, #140]	; (800613c <TIM_Base_SetConfig+0x13c>)
 80060ae:	4293      	cmp	r3, r2
 80060b0:	d108      	bne.n	80060c4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80060b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80060ba:	683b      	ldr	r3, [r7, #0]
 80060bc:	68db      	ldr	r3, [r3, #12]
 80060be:	68fa      	ldr	r2, [r7, #12]
 80060c0:	4313      	orrs	r3, r2
 80060c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80060ca:	683b      	ldr	r3, [r7, #0]
 80060cc:	695b      	ldr	r3, [r3, #20]
 80060ce:	4313      	orrs	r3, r2
 80060d0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	68fa      	ldr	r2, [r7, #12]
 80060d6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80060d8:	683b      	ldr	r3, [r7, #0]
 80060da:	689a      	ldr	r2, [r3, #8]
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80060e0:	683b      	ldr	r3, [r7, #0]
 80060e2:	681a      	ldr	r2, [r3, #0]
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	4a0a      	ldr	r2, [pc, #40]	; (8006114 <TIM_Base_SetConfig+0x114>)
 80060ec:	4293      	cmp	r3, r2
 80060ee:	d003      	beq.n	80060f8 <TIM_Base_SetConfig+0xf8>
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	4a0c      	ldr	r2, [pc, #48]	; (8006124 <TIM_Base_SetConfig+0x124>)
 80060f4:	4293      	cmp	r3, r2
 80060f6:	d103      	bne.n	8006100 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80060f8:	683b      	ldr	r3, [r7, #0]
 80060fa:	691a      	ldr	r2, [r3, #16]
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	2201      	movs	r2, #1
 8006104:	615a      	str	r2, [r3, #20]
}
 8006106:	bf00      	nop
 8006108:	3714      	adds	r7, #20
 800610a:	46bd      	mov	sp, r7
 800610c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006110:	4770      	bx	lr
 8006112:	bf00      	nop
 8006114:	40010000 	.word	0x40010000
 8006118:	40000400 	.word	0x40000400
 800611c:	40000800 	.word	0x40000800
 8006120:	40000c00 	.word	0x40000c00
 8006124:	40010400 	.word	0x40010400
 8006128:	40014000 	.word	0x40014000
 800612c:	40014400 	.word	0x40014400
 8006130:	40014800 	.word	0x40014800
 8006134:	40001800 	.word	0x40001800
 8006138:	40001c00 	.word	0x40001c00
 800613c:	40002000 	.word	0x40002000

08006140 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006140:	b480      	push	{r7}
 8006142:	b087      	sub	sp, #28
 8006144:	af00      	add	r7, sp, #0
 8006146:	6078      	str	r0, [r7, #4]
 8006148:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	6a1b      	ldr	r3, [r3, #32]
 800614e:	f023 0201 	bic.w	r2, r3, #1
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	6a1b      	ldr	r3, [r3, #32]
 800615a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	685b      	ldr	r3, [r3, #4]
 8006160:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	699b      	ldr	r3, [r3, #24]
 8006166:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800616e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	f023 0303 	bic.w	r3, r3, #3
 8006176:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006178:	683b      	ldr	r3, [r7, #0]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	68fa      	ldr	r2, [r7, #12]
 800617e:	4313      	orrs	r3, r2
 8006180:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006182:	697b      	ldr	r3, [r7, #20]
 8006184:	f023 0302 	bic.w	r3, r3, #2
 8006188:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800618a:	683b      	ldr	r3, [r7, #0]
 800618c:	689b      	ldr	r3, [r3, #8]
 800618e:	697a      	ldr	r2, [r7, #20]
 8006190:	4313      	orrs	r3, r2
 8006192:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	4a20      	ldr	r2, [pc, #128]	; (8006218 <TIM_OC1_SetConfig+0xd8>)
 8006198:	4293      	cmp	r3, r2
 800619a:	d003      	beq.n	80061a4 <TIM_OC1_SetConfig+0x64>
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	4a1f      	ldr	r2, [pc, #124]	; (800621c <TIM_OC1_SetConfig+0xdc>)
 80061a0:	4293      	cmp	r3, r2
 80061a2:	d10c      	bne.n	80061be <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80061a4:	697b      	ldr	r3, [r7, #20]
 80061a6:	f023 0308 	bic.w	r3, r3, #8
 80061aa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80061ac:	683b      	ldr	r3, [r7, #0]
 80061ae:	68db      	ldr	r3, [r3, #12]
 80061b0:	697a      	ldr	r2, [r7, #20]
 80061b2:	4313      	orrs	r3, r2
 80061b4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80061b6:	697b      	ldr	r3, [r7, #20]
 80061b8:	f023 0304 	bic.w	r3, r3, #4
 80061bc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	4a15      	ldr	r2, [pc, #84]	; (8006218 <TIM_OC1_SetConfig+0xd8>)
 80061c2:	4293      	cmp	r3, r2
 80061c4:	d003      	beq.n	80061ce <TIM_OC1_SetConfig+0x8e>
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	4a14      	ldr	r2, [pc, #80]	; (800621c <TIM_OC1_SetConfig+0xdc>)
 80061ca:	4293      	cmp	r3, r2
 80061cc:	d111      	bne.n	80061f2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80061ce:	693b      	ldr	r3, [r7, #16]
 80061d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80061d4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80061d6:	693b      	ldr	r3, [r7, #16]
 80061d8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80061dc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80061de:	683b      	ldr	r3, [r7, #0]
 80061e0:	695b      	ldr	r3, [r3, #20]
 80061e2:	693a      	ldr	r2, [r7, #16]
 80061e4:	4313      	orrs	r3, r2
 80061e6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80061e8:	683b      	ldr	r3, [r7, #0]
 80061ea:	699b      	ldr	r3, [r3, #24]
 80061ec:	693a      	ldr	r2, [r7, #16]
 80061ee:	4313      	orrs	r3, r2
 80061f0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	693a      	ldr	r2, [r7, #16]
 80061f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	68fa      	ldr	r2, [r7, #12]
 80061fc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80061fe:	683b      	ldr	r3, [r7, #0]
 8006200:	685a      	ldr	r2, [r3, #4]
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	697a      	ldr	r2, [r7, #20]
 800620a:	621a      	str	r2, [r3, #32]
}
 800620c:	bf00      	nop
 800620e:	371c      	adds	r7, #28
 8006210:	46bd      	mov	sp, r7
 8006212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006216:	4770      	bx	lr
 8006218:	40010000 	.word	0x40010000
 800621c:	40010400 	.word	0x40010400

08006220 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006220:	b480      	push	{r7}
 8006222:	b087      	sub	sp, #28
 8006224:	af00      	add	r7, sp, #0
 8006226:	6078      	str	r0, [r7, #4]
 8006228:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	6a1b      	ldr	r3, [r3, #32]
 800622e:	f023 0210 	bic.w	r2, r3, #16
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	6a1b      	ldr	r3, [r3, #32]
 800623a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	685b      	ldr	r3, [r3, #4]
 8006240:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	699b      	ldr	r3, [r3, #24]
 8006246:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800624e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006256:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006258:	683b      	ldr	r3, [r7, #0]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	021b      	lsls	r3, r3, #8
 800625e:	68fa      	ldr	r2, [r7, #12]
 8006260:	4313      	orrs	r3, r2
 8006262:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006264:	697b      	ldr	r3, [r7, #20]
 8006266:	f023 0320 	bic.w	r3, r3, #32
 800626a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800626c:	683b      	ldr	r3, [r7, #0]
 800626e:	689b      	ldr	r3, [r3, #8]
 8006270:	011b      	lsls	r3, r3, #4
 8006272:	697a      	ldr	r2, [r7, #20]
 8006274:	4313      	orrs	r3, r2
 8006276:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	4a22      	ldr	r2, [pc, #136]	; (8006304 <TIM_OC2_SetConfig+0xe4>)
 800627c:	4293      	cmp	r3, r2
 800627e:	d003      	beq.n	8006288 <TIM_OC2_SetConfig+0x68>
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	4a21      	ldr	r2, [pc, #132]	; (8006308 <TIM_OC2_SetConfig+0xe8>)
 8006284:	4293      	cmp	r3, r2
 8006286:	d10d      	bne.n	80062a4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006288:	697b      	ldr	r3, [r7, #20]
 800628a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800628e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006290:	683b      	ldr	r3, [r7, #0]
 8006292:	68db      	ldr	r3, [r3, #12]
 8006294:	011b      	lsls	r3, r3, #4
 8006296:	697a      	ldr	r2, [r7, #20]
 8006298:	4313      	orrs	r3, r2
 800629a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800629c:	697b      	ldr	r3, [r7, #20]
 800629e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80062a2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	4a17      	ldr	r2, [pc, #92]	; (8006304 <TIM_OC2_SetConfig+0xe4>)
 80062a8:	4293      	cmp	r3, r2
 80062aa:	d003      	beq.n	80062b4 <TIM_OC2_SetConfig+0x94>
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	4a16      	ldr	r2, [pc, #88]	; (8006308 <TIM_OC2_SetConfig+0xe8>)
 80062b0:	4293      	cmp	r3, r2
 80062b2:	d113      	bne.n	80062dc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80062b4:	693b      	ldr	r3, [r7, #16]
 80062b6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80062ba:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80062bc:	693b      	ldr	r3, [r7, #16]
 80062be:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80062c2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80062c4:	683b      	ldr	r3, [r7, #0]
 80062c6:	695b      	ldr	r3, [r3, #20]
 80062c8:	009b      	lsls	r3, r3, #2
 80062ca:	693a      	ldr	r2, [r7, #16]
 80062cc:	4313      	orrs	r3, r2
 80062ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80062d0:	683b      	ldr	r3, [r7, #0]
 80062d2:	699b      	ldr	r3, [r3, #24]
 80062d4:	009b      	lsls	r3, r3, #2
 80062d6:	693a      	ldr	r2, [r7, #16]
 80062d8:	4313      	orrs	r3, r2
 80062da:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	693a      	ldr	r2, [r7, #16]
 80062e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	68fa      	ldr	r2, [r7, #12]
 80062e6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80062e8:	683b      	ldr	r3, [r7, #0]
 80062ea:	685a      	ldr	r2, [r3, #4]
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	697a      	ldr	r2, [r7, #20]
 80062f4:	621a      	str	r2, [r3, #32]
}
 80062f6:	bf00      	nop
 80062f8:	371c      	adds	r7, #28
 80062fa:	46bd      	mov	sp, r7
 80062fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006300:	4770      	bx	lr
 8006302:	bf00      	nop
 8006304:	40010000 	.word	0x40010000
 8006308:	40010400 	.word	0x40010400

0800630c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800630c:	b480      	push	{r7}
 800630e:	b087      	sub	sp, #28
 8006310:	af00      	add	r7, sp, #0
 8006312:	6078      	str	r0, [r7, #4]
 8006314:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	6a1b      	ldr	r3, [r3, #32]
 800631a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	6a1b      	ldr	r3, [r3, #32]
 8006326:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	685b      	ldr	r3, [r3, #4]
 800632c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	69db      	ldr	r3, [r3, #28]
 8006332:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800633a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	f023 0303 	bic.w	r3, r3, #3
 8006342:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006344:	683b      	ldr	r3, [r7, #0]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	68fa      	ldr	r2, [r7, #12]
 800634a:	4313      	orrs	r3, r2
 800634c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800634e:	697b      	ldr	r3, [r7, #20]
 8006350:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006354:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006356:	683b      	ldr	r3, [r7, #0]
 8006358:	689b      	ldr	r3, [r3, #8]
 800635a:	021b      	lsls	r3, r3, #8
 800635c:	697a      	ldr	r2, [r7, #20]
 800635e:	4313      	orrs	r3, r2
 8006360:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	4a21      	ldr	r2, [pc, #132]	; (80063ec <TIM_OC3_SetConfig+0xe0>)
 8006366:	4293      	cmp	r3, r2
 8006368:	d003      	beq.n	8006372 <TIM_OC3_SetConfig+0x66>
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	4a20      	ldr	r2, [pc, #128]	; (80063f0 <TIM_OC3_SetConfig+0xe4>)
 800636e:	4293      	cmp	r3, r2
 8006370:	d10d      	bne.n	800638e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006372:	697b      	ldr	r3, [r7, #20]
 8006374:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006378:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800637a:	683b      	ldr	r3, [r7, #0]
 800637c:	68db      	ldr	r3, [r3, #12]
 800637e:	021b      	lsls	r3, r3, #8
 8006380:	697a      	ldr	r2, [r7, #20]
 8006382:	4313      	orrs	r3, r2
 8006384:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006386:	697b      	ldr	r3, [r7, #20]
 8006388:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800638c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	4a16      	ldr	r2, [pc, #88]	; (80063ec <TIM_OC3_SetConfig+0xe0>)
 8006392:	4293      	cmp	r3, r2
 8006394:	d003      	beq.n	800639e <TIM_OC3_SetConfig+0x92>
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	4a15      	ldr	r2, [pc, #84]	; (80063f0 <TIM_OC3_SetConfig+0xe4>)
 800639a:	4293      	cmp	r3, r2
 800639c:	d113      	bne.n	80063c6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800639e:	693b      	ldr	r3, [r7, #16]
 80063a0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80063a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80063a6:	693b      	ldr	r3, [r7, #16]
 80063a8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80063ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80063ae:	683b      	ldr	r3, [r7, #0]
 80063b0:	695b      	ldr	r3, [r3, #20]
 80063b2:	011b      	lsls	r3, r3, #4
 80063b4:	693a      	ldr	r2, [r7, #16]
 80063b6:	4313      	orrs	r3, r2
 80063b8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80063ba:	683b      	ldr	r3, [r7, #0]
 80063bc:	699b      	ldr	r3, [r3, #24]
 80063be:	011b      	lsls	r3, r3, #4
 80063c0:	693a      	ldr	r2, [r7, #16]
 80063c2:	4313      	orrs	r3, r2
 80063c4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	693a      	ldr	r2, [r7, #16]
 80063ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	68fa      	ldr	r2, [r7, #12]
 80063d0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80063d2:	683b      	ldr	r3, [r7, #0]
 80063d4:	685a      	ldr	r2, [r3, #4]
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	697a      	ldr	r2, [r7, #20]
 80063de:	621a      	str	r2, [r3, #32]
}
 80063e0:	bf00      	nop
 80063e2:	371c      	adds	r7, #28
 80063e4:	46bd      	mov	sp, r7
 80063e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ea:	4770      	bx	lr
 80063ec:	40010000 	.word	0x40010000
 80063f0:	40010400 	.word	0x40010400

080063f4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80063f4:	b480      	push	{r7}
 80063f6:	b087      	sub	sp, #28
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	6078      	str	r0, [r7, #4]
 80063fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	6a1b      	ldr	r3, [r3, #32]
 8006402:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	6a1b      	ldr	r3, [r3, #32]
 800640e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	685b      	ldr	r3, [r3, #4]
 8006414:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	69db      	ldr	r3, [r3, #28]
 800641a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006422:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800642a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800642c:	683b      	ldr	r3, [r7, #0]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	021b      	lsls	r3, r3, #8
 8006432:	68fa      	ldr	r2, [r7, #12]
 8006434:	4313      	orrs	r3, r2
 8006436:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006438:	693b      	ldr	r3, [r7, #16]
 800643a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800643e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006440:	683b      	ldr	r3, [r7, #0]
 8006442:	689b      	ldr	r3, [r3, #8]
 8006444:	031b      	lsls	r3, r3, #12
 8006446:	693a      	ldr	r2, [r7, #16]
 8006448:	4313      	orrs	r3, r2
 800644a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	4a12      	ldr	r2, [pc, #72]	; (8006498 <TIM_OC4_SetConfig+0xa4>)
 8006450:	4293      	cmp	r3, r2
 8006452:	d003      	beq.n	800645c <TIM_OC4_SetConfig+0x68>
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	4a11      	ldr	r2, [pc, #68]	; (800649c <TIM_OC4_SetConfig+0xa8>)
 8006458:	4293      	cmp	r3, r2
 800645a:	d109      	bne.n	8006470 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800645c:	697b      	ldr	r3, [r7, #20]
 800645e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006462:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006464:	683b      	ldr	r3, [r7, #0]
 8006466:	695b      	ldr	r3, [r3, #20]
 8006468:	019b      	lsls	r3, r3, #6
 800646a:	697a      	ldr	r2, [r7, #20]
 800646c:	4313      	orrs	r3, r2
 800646e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	697a      	ldr	r2, [r7, #20]
 8006474:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	68fa      	ldr	r2, [r7, #12]
 800647a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800647c:	683b      	ldr	r3, [r7, #0]
 800647e:	685a      	ldr	r2, [r3, #4]
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	693a      	ldr	r2, [r7, #16]
 8006488:	621a      	str	r2, [r3, #32]
}
 800648a:	bf00      	nop
 800648c:	371c      	adds	r7, #28
 800648e:	46bd      	mov	sp, r7
 8006490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006494:	4770      	bx	lr
 8006496:	bf00      	nop
 8006498:	40010000 	.word	0x40010000
 800649c:	40010400 	.word	0x40010400

080064a0 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80064a0:	b480      	push	{r7}
 80064a2:	b087      	sub	sp, #28
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	60f8      	str	r0, [r7, #12]
 80064a8:	60b9      	str	r1, [r7, #8]
 80064aa:	607a      	str	r2, [r7, #4]
 80064ac:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	6a1b      	ldr	r3, [r3, #32]
 80064b2:	f023 0201 	bic.w	r2, r3, #1
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	699b      	ldr	r3, [r3, #24]
 80064be:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	6a1b      	ldr	r3, [r3, #32]
 80064c4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	4a28      	ldr	r2, [pc, #160]	; (800656c <TIM_TI1_SetConfig+0xcc>)
 80064ca:	4293      	cmp	r3, r2
 80064cc:	d01b      	beq.n	8006506 <TIM_TI1_SetConfig+0x66>
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064d4:	d017      	beq.n	8006506 <TIM_TI1_SetConfig+0x66>
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	4a25      	ldr	r2, [pc, #148]	; (8006570 <TIM_TI1_SetConfig+0xd0>)
 80064da:	4293      	cmp	r3, r2
 80064dc:	d013      	beq.n	8006506 <TIM_TI1_SetConfig+0x66>
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	4a24      	ldr	r2, [pc, #144]	; (8006574 <TIM_TI1_SetConfig+0xd4>)
 80064e2:	4293      	cmp	r3, r2
 80064e4:	d00f      	beq.n	8006506 <TIM_TI1_SetConfig+0x66>
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	4a23      	ldr	r2, [pc, #140]	; (8006578 <TIM_TI1_SetConfig+0xd8>)
 80064ea:	4293      	cmp	r3, r2
 80064ec:	d00b      	beq.n	8006506 <TIM_TI1_SetConfig+0x66>
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	4a22      	ldr	r2, [pc, #136]	; (800657c <TIM_TI1_SetConfig+0xdc>)
 80064f2:	4293      	cmp	r3, r2
 80064f4:	d007      	beq.n	8006506 <TIM_TI1_SetConfig+0x66>
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	4a21      	ldr	r2, [pc, #132]	; (8006580 <TIM_TI1_SetConfig+0xe0>)
 80064fa:	4293      	cmp	r3, r2
 80064fc:	d003      	beq.n	8006506 <TIM_TI1_SetConfig+0x66>
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	4a20      	ldr	r2, [pc, #128]	; (8006584 <TIM_TI1_SetConfig+0xe4>)
 8006502:	4293      	cmp	r3, r2
 8006504:	d101      	bne.n	800650a <TIM_TI1_SetConfig+0x6a>
 8006506:	2301      	movs	r3, #1
 8006508:	e000      	b.n	800650c <TIM_TI1_SetConfig+0x6c>
 800650a:	2300      	movs	r3, #0
 800650c:	2b00      	cmp	r3, #0
 800650e:	d008      	beq.n	8006522 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006510:	697b      	ldr	r3, [r7, #20]
 8006512:	f023 0303 	bic.w	r3, r3, #3
 8006516:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006518:	697a      	ldr	r2, [r7, #20]
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	4313      	orrs	r3, r2
 800651e:	617b      	str	r3, [r7, #20]
 8006520:	e003      	b.n	800652a <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8006522:	697b      	ldr	r3, [r7, #20]
 8006524:	f043 0301 	orr.w	r3, r3, #1
 8006528:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800652a:	697b      	ldr	r3, [r7, #20]
 800652c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006530:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8006532:	683b      	ldr	r3, [r7, #0]
 8006534:	011b      	lsls	r3, r3, #4
 8006536:	b2db      	uxtb	r3, r3
 8006538:	697a      	ldr	r2, [r7, #20]
 800653a:	4313      	orrs	r3, r2
 800653c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800653e:	693b      	ldr	r3, [r7, #16]
 8006540:	f023 030a 	bic.w	r3, r3, #10
 8006544:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8006546:	68bb      	ldr	r3, [r7, #8]
 8006548:	f003 030a 	and.w	r3, r3, #10
 800654c:	693a      	ldr	r2, [r7, #16]
 800654e:	4313      	orrs	r3, r2
 8006550:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	697a      	ldr	r2, [r7, #20]
 8006556:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	693a      	ldr	r2, [r7, #16]
 800655c:	621a      	str	r2, [r3, #32]
}
 800655e:	bf00      	nop
 8006560:	371c      	adds	r7, #28
 8006562:	46bd      	mov	sp, r7
 8006564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006568:	4770      	bx	lr
 800656a:	bf00      	nop
 800656c:	40010000 	.word	0x40010000
 8006570:	40000400 	.word	0x40000400
 8006574:	40000800 	.word	0x40000800
 8006578:	40000c00 	.word	0x40000c00
 800657c:	40010400 	.word	0x40010400
 8006580:	40014000 	.word	0x40014000
 8006584:	40001800 	.word	0x40001800

08006588 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006588:	b480      	push	{r7}
 800658a:	b087      	sub	sp, #28
 800658c:	af00      	add	r7, sp, #0
 800658e:	60f8      	str	r0, [r7, #12]
 8006590:	60b9      	str	r1, [r7, #8]
 8006592:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	6a1b      	ldr	r3, [r3, #32]
 8006598:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	6a1b      	ldr	r3, [r3, #32]
 800659e:	f023 0201 	bic.w	r2, r3, #1
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	699b      	ldr	r3, [r3, #24]
 80065aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80065ac:	693b      	ldr	r3, [r7, #16]
 80065ae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80065b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	011b      	lsls	r3, r3, #4
 80065b8:	693a      	ldr	r2, [r7, #16]
 80065ba:	4313      	orrs	r3, r2
 80065bc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80065be:	697b      	ldr	r3, [r7, #20]
 80065c0:	f023 030a 	bic.w	r3, r3, #10
 80065c4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80065c6:	697a      	ldr	r2, [r7, #20]
 80065c8:	68bb      	ldr	r3, [r7, #8]
 80065ca:	4313      	orrs	r3, r2
 80065cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	693a      	ldr	r2, [r7, #16]
 80065d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	697a      	ldr	r2, [r7, #20]
 80065d8:	621a      	str	r2, [r3, #32]
}
 80065da:	bf00      	nop
 80065dc:	371c      	adds	r7, #28
 80065de:	46bd      	mov	sp, r7
 80065e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e4:	4770      	bx	lr

080065e6 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80065e6:	b480      	push	{r7}
 80065e8:	b087      	sub	sp, #28
 80065ea:	af00      	add	r7, sp, #0
 80065ec:	60f8      	str	r0, [r7, #12]
 80065ee:	60b9      	str	r1, [r7, #8]
 80065f0:	607a      	str	r2, [r7, #4]
 80065f2:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	6a1b      	ldr	r3, [r3, #32]
 80065f8:	f023 0210 	bic.w	r2, r3, #16
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	699b      	ldr	r3, [r3, #24]
 8006604:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	6a1b      	ldr	r3, [r3, #32]
 800660a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800660c:	697b      	ldr	r3, [r7, #20]
 800660e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006612:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	021b      	lsls	r3, r3, #8
 8006618:	697a      	ldr	r2, [r7, #20]
 800661a:	4313      	orrs	r3, r2
 800661c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800661e:	697b      	ldr	r3, [r7, #20]
 8006620:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006624:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8006626:	683b      	ldr	r3, [r7, #0]
 8006628:	031b      	lsls	r3, r3, #12
 800662a:	b29b      	uxth	r3, r3
 800662c:	697a      	ldr	r2, [r7, #20]
 800662e:	4313      	orrs	r3, r2
 8006630:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006632:	693b      	ldr	r3, [r7, #16]
 8006634:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006638:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800663a:	68bb      	ldr	r3, [r7, #8]
 800663c:	011b      	lsls	r3, r3, #4
 800663e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8006642:	693a      	ldr	r2, [r7, #16]
 8006644:	4313      	orrs	r3, r2
 8006646:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	697a      	ldr	r2, [r7, #20]
 800664c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	693a      	ldr	r2, [r7, #16]
 8006652:	621a      	str	r2, [r3, #32]
}
 8006654:	bf00      	nop
 8006656:	371c      	adds	r7, #28
 8006658:	46bd      	mov	sp, r7
 800665a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800665e:	4770      	bx	lr

08006660 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006660:	b480      	push	{r7}
 8006662:	b087      	sub	sp, #28
 8006664:	af00      	add	r7, sp, #0
 8006666:	60f8      	str	r0, [r7, #12]
 8006668:	60b9      	str	r1, [r7, #8]
 800666a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	6a1b      	ldr	r3, [r3, #32]
 8006670:	f023 0210 	bic.w	r2, r3, #16
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	699b      	ldr	r3, [r3, #24]
 800667c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	6a1b      	ldr	r3, [r3, #32]
 8006682:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006684:	697b      	ldr	r3, [r7, #20]
 8006686:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800668a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	031b      	lsls	r3, r3, #12
 8006690:	697a      	ldr	r2, [r7, #20]
 8006692:	4313      	orrs	r3, r2
 8006694:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006696:	693b      	ldr	r3, [r7, #16]
 8006698:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800669c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800669e:	68bb      	ldr	r3, [r7, #8]
 80066a0:	011b      	lsls	r3, r3, #4
 80066a2:	693a      	ldr	r2, [r7, #16]
 80066a4:	4313      	orrs	r3, r2
 80066a6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	697a      	ldr	r2, [r7, #20]
 80066ac:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	693a      	ldr	r2, [r7, #16]
 80066b2:	621a      	str	r2, [r3, #32]
}
 80066b4:	bf00      	nop
 80066b6:	371c      	adds	r7, #28
 80066b8:	46bd      	mov	sp, r7
 80066ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066be:	4770      	bx	lr

080066c0 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80066c0:	b480      	push	{r7}
 80066c2:	b087      	sub	sp, #28
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	60f8      	str	r0, [r7, #12]
 80066c8:	60b9      	str	r1, [r7, #8]
 80066ca:	607a      	str	r2, [r7, #4]
 80066cc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	6a1b      	ldr	r3, [r3, #32]
 80066d2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	69db      	ldr	r3, [r3, #28]
 80066de:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	6a1b      	ldr	r3, [r3, #32]
 80066e4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80066e6:	697b      	ldr	r3, [r7, #20]
 80066e8:	f023 0303 	bic.w	r3, r3, #3
 80066ec:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80066ee:	697a      	ldr	r2, [r7, #20]
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	4313      	orrs	r3, r2
 80066f4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80066f6:	697b      	ldr	r3, [r7, #20]
 80066f8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80066fc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80066fe:	683b      	ldr	r3, [r7, #0]
 8006700:	011b      	lsls	r3, r3, #4
 8006702:	b2db      	uxtb	r3, r3
 8006704:	697a      	ldr	r2, [r7, #20]
 8006706:	4313      	orrs	r3, r2
 8006708:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800670a:	693b      	ldr	r3, [r7, #16]
 800670c:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8006710:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8006712:	68bb      	ldr	r3, [r7, #8]
 8006714:	021b      	lsls	r3, r3, #8
 8006716:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800671a:	693a      	ldr	r2, [r7, #16]
 800671c:	4313      	orrs	r3, r2
 800671e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	697a      	ldr	r2, [r7, #20]
 8006724:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	693a      	ldr	r2, [r7, #16]
 800672a:	621a      	str	r2, [r3, #32]
}
 800672c:	bf00      	nop
 800672e:	371c      	adds	r7, #28
 8006730:	46bd      	mov	sp, r7
 8006732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006736:	4770      	bx	lr

08006738 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006738:	b480      	push	{r7}
 800673a:	b087      	sub	sp, #28
 800673c:	af00      	add	r7, sp, #0
 800673e:	60f8      	str	r0, [r7, #12]
 8006740:	60b9      	str	r1, [r7, #8]
 8006742:	607a      	str	r2, [r7, #4]
 8006744:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	6a1b      	ldr	r3, [r3, #32]
 800674a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	69db      	ldr	r3, [r3, #28]
 8006756:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	6a1b      	ldr	r3, [r3, #32]
 800675c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800675e:	697b      	ldr	r3, [r7, #20]
 8006760:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006764:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	021b      	lsls	r3, r3, #8
 800676a:	697a      	ldr	r2, [r7, #20]
 800676c:	4313      	orrs	r3, r2
 800676e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8006770:	697b      	ldr	r3, [r7, #20]
 8006772:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006776:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006778:	683b      	ldr	r3, [r7, #0]
 800677a:	031b      	lsls	r3, r3, #12
 800677c:	b29b      	uxth	r3, r3
 800677e:	697a      	ldr	r2, [r7, #20]
 8006780:	4313      	orrs	r3, r2
 8006782:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8006784:	693b      	ldr	r3, [r7, #16]
 8006786:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800678a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800678c:	68bb      	ldr	r3, [r7, #8]
 800678e:	031b      	lsls	r3, r3, #12
 8006790:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8006794:	693a      	ldr	r2, [r7, #16]
 8006796:	4313      	orrs	r3, r2
 8006798:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	697a      	ldr	r2, [r7, #20]
 800679e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	693a      	ldr	r2, [r7, #16]
 80067a4:	621a      	str	r2, [r3, #32]
}
 80067a6:	bf00      	nop
 80067a8:	371c      	adds	r7, #28
 80067aa:	46bd      	mov	sp, r7
 80067ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b0:	4770      	bx	lr

080067b2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80067b2:	b480      	push	{r7}
 80067b4:	b085      	sub	sp, #20
 80067b6:	af00      	add	r7, sp, #0
 80067b8:	6078      	str	r0, [r7, #4]
 80067ba:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	689b      	ldr	r3, [r3, #8]
 80067c0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067c8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80067ca:	683a      	ldr	r2, [r7, #0]
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	4313      	orrs	r3, r2
 80067d0:	f043 0307 	orr.w	r3, r3, #7
 80067d4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	68fa      	ldr	r2, [r7, #12]
 80067da:	609a      	str	r2, [r3, #8]
}
 80067dc:	bf00      	nop
 80067de:	3714      	adds	r7, #20
 80067e0:	46bd      	mov	sp, r7
 80067e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e6:	4770      	bx	lr

080067e8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80067e8:	b480      	push	{r7}
 80067ea:	b087      	sub	sp, #28
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	60f8      	str	r0, [r7, #12]
 80067f0:	60b9      	str	r1, [r7, #8]
 80067f2:	607a      	str	r2, [r7, #4]
 80067f4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	689b      	ldr	r3, [r3, #8]
 80067fa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80067fc:	697b      	ldr	r3, [r7, #20]
 80067fe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006802:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006804:	683b      	ldr	r3, [r7, #0]
 8006806:	021a      	lsls	r2, r3, #8
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	431a      	orrs	r2, r3
 800680c:	68bb      	ldr	r3, [r7, #8]
 800680e:	4313      	orrs	r3, r2
 8006810:	697a      	ldr	r2, [r7, #20]
 8006812:	4313      	orrs	r3, r2
 8006814:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	697a      	ldr	r2, [r7, #20]
 800681a:	609a      	str	r2, [r3, #8]
}
 800681c:	bf00      	nop
 800681e:	371c      	adds	r7, #28
 8006820:	46bd      	mov	sp, r7
 8006822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006826:	4770      	bx	lr

08006828 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006828:	b480      	push	{r7}
 800682a:	b085      	sub	sp, #20
 800682c:	af00      	add	r7, sp, #0
 800682e:	6078      	str	r0, [r7, #4]
 8006830:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006838:	2b01      	cmp	r3, #1
 800683a:	d101      	bne.n	8006840 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800683c:	2302      	movs	r3, #2
 800683e:	e05a      	b.n	80068f6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	2201      	movs	r2, #1
 8006844:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	2202      	movs	r2, #2
 800684c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	685b      	ldr	r3, [r3, #4]
 8006856:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	689b      	ldr	r3, [r3, #8]
 800685e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006866:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006868:	683b      	ldr	r3, [r7, #0]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	68fa      	ldr	r2, [r7, #12]
 800686e:	4313      	orrs	r3, r2
 8006870:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	68fa      	ldr	r2, [r7, #12]
 8006878:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	4a21      	ldr	r2, [pc, #132]	; (8006904 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006880:	4293      	cmp	r3, r2
 8006882:	d022      	beq.n	80068ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800688c:	d01d      	beq.n	80068ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	4a1d      	ldr	r2, [pc, #116]	; (8006908 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006894:	4293      	cmp	r3, r2
 8006896:	d018      	beq.n	80068ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	4a1b      	ldr	r2, [pc, #108]	; (800690c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800689e:	4293      	cmp	r3, r2
 80068a0:	d013      	beq.n	80068ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	4a1a      	ldr	r2, [pc, #104]	; (8006910 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80068a8:	4293      	cmp	r3, r2
 80068aa:	d00e      	beq.n	80068ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	4a18      	ldr	r2, [pc, #96]	; (8006914 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80068b2:	4293      	cmp	r3, r2
 80068b4:	d009      	beq.n	80068ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	4a17      	ldr	r2, [pc, #92]	; (8006918 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80068bc:	4293      	cmp	r3, r2
 80068be:	d004      	beq.n	80068ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	4a15      	ldr	r2, [pc, #84]	; (800691c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80068c6:	4293      	cmp	r3, r2
 80068c8:	d10c      	bne.n	80068e4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80068ca:	68bb      	ldr	r3, [r7, #8]
 80068cc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80068d0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80068d2:	683b      	ldr	r3, [r7, #0]
 80068d4:	685b      	ldr	r3, [r3, #4]
 80068d6:	68ba      	ldr	r2, [r7, #8]
 80068d8:	4313      	orrs	r3, r2
 80068da:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	68ba      	ldr	r2, [r7, #8]
 80068e2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	2201      	movs	r2, #1
 80068e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	2200      	movs	r2, #0
 80068f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80068f4:	2300      	movs	r3, #0
}
 80068f6:	4618      	mov	r0, r3
 80068f8:	3714      	adds	r7, #20
 80068fa:	46bd      	mov	sp, r7
 80068fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006900:	4770      	bx	lr
 8006902:	bf00      	nop
 8006904:	40010000 	.word	0x40010000
 8006908:	40000400 	.word	0x40000400
 800690c:	40000800 	.word	0x40000800
 8006910:	40000c00 	.word	0x40000c00
 8006914:	40010400 	.word	0x40010400
 8006918:	40014000 	.word	0x40014000
 800691c:	40001800 	.word	0x40001800

08006920 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006920:	b480      	push	{r7}
 8006922:	b085      	sub	sp, #20
 8006924:	af00      	add	r7, sp, #0
 8006926:	6078      	str	r0, [r7, #4]
 8006928:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800692a:	2300      	movs	r3, #0
 800692c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006934:	2b01      	cmp	r3, #1
 8006936:	d101      	bne.n	800693c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006938:	2302      	movs	r3, #2
 800693a:	e03d      	b.n	80069b8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	2201      	movs	r2, #1
 8006940:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800694a:	683b      	ldr	r3, [r7, #0]
 800694c:	68db      	ldr	r3, [r3, #12]
 800694e:	4313      	orrs	r3, r2
 8006950:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006958:	683b      	ldr	r3, [r7, #0]
 800695a:	689b      	ldr	r3, [r3, #8]
 800695c:	4313      	orrs	r3, r2
 800695e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006966:	683b      	ldr	r3, [r7, #0]
 8006968:	685b      	ldr	r3, [r3, #4]
 800696a:	4313      	orrs	r3, r2
 800696c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006974:	683b      	ldr	r3, [r7, #0]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	4313      	orrs	r3, r2
 800697a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006982:	683b      	ldr	r3, [r7, #0]
 8006984:	691b      	ldr	r3, [r3, #16]
 8006986:	4313      	orrs	r3, r2
 8006988:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006990:	683b      	ldr	r3, [r7, #0]
 8006992:	695b      	ldr	r3, [r3, #20]
 8006994:	4313      	orrs	r3, r2
 8006996:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800699e:	683b      	ldr	r3, [r7, #0]
 80069a0:	69db      	ldr	r3, [r3, #28]
 80069a2:	4313      	orrs	r3, r2
 80069a4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	68fa      	ldr	r2, [r7, #12]
 80069ac:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	2200      	movs	r2, #0
 80069b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80069b6:	2300      	movs	r3, #0
}
 80069b8:	4618      	mov	r0, r3
 80069ba:	3714      	adds	r7, #20
 80069bc:	46bd      	mov	sp, r7
 80069be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c2:	4770      	bx	lr

080069c4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80069c4:	b480      	push	{r7}
 80069c6:	b083      	sub	sp, #12
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80069cc:	bf00      	nop
 80069ce:	370c      	adds	r7, #12
 80069d0:	46bd      	mov	sp, r7
 80069d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d6:	4770      	bx	lr

080069d8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80069d8:	b480      	push	{r7}
 80069da:	b083      	sub	sp, #12
 80069dc:	af00      	add	r7, sp, #0
 80069de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80069e0:	bf00      	nop
 80069e2:	370c      	adds	r7, #12
 80069e4:	46bd      	mov	sp, r7
 80069e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ea:	4770      	bx	lr

080069ec <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80069ec:	b580      	push	{r7, lr}
 80069ee:	b082      	sub	sp, #8
 80069f0:	af00      	add	r7, sp, #0
 80069f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d101      	bne.n	80069fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80069fa:	2301      	movs	r3, #1
 80069fc:	e03f      	b.n	8006a7e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a04:	b2db      	uxtb	r3, r3
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d106      	bne.n	8006a18 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	2200      	movs	r2, #0
 8006a0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006a12:	6878      	ldr	r0, [r7, #4]
 8006a14:	f7fb fa42 	bl	8001e9c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	2224      	movs	r2, #36	; 0x24
 8006a1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	68da      	ldr	r2, [r3, #12]
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006a2e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006a30:	6878      	ldr	r0, [r7, #4]
 8006a32:	f000 f9a7 	bl	8006d84 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	691a      	ldr	r2, [r3, #16]
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006a44:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	695a      	ldr	r2, [r3, #20]
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006a54:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	68da      	ldr	r2, [r3, #12]
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006a64:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	2200      	movs	r2, #0
 8006a6a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	2220      	movs	r2, #32
 8006a70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	2220      	movs	r2, #32
 8006a78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006a7c:	2300      	movs	r3, #0
}
 8006a7e:	4618      	mov	r0, r3
 8006a80:	3708      	adds	r7, #8
 8006a82:	46bd      	mov	sp, r7
 8006a84:	bd80      	pop	{r7, pc}

08006a86 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006a86:	b580      	push	{r7, lr}
 8006a88:	b08a      	sub	sp, #40	; 0x28
 8006a8a:	af02      	add	r7, sp, #8
 8006a8c:	60f8      	str	r0, [r7, #12]
 8006a8e:	60b9      	str	r1, [r7, #8]
 8006a90:	603b      	str	r3, [r7, #0]
 8006a92:	4613      	mov	r3, r2
 8006a94:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006a96:	2300      	movs	r3, #0
 8006a98:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006aa0:	b2db      	uxtb	r3, r3
 8006aa2:	2b20      	cmp	r3, #32
 8006aa4:	d17c      	bne.n	8006ba0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006aa6:	68bb      	ldr	r3, [r7, #8]
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d002      	beq.n	8006ab2 <HAL_UART_Transmit+0x2c>
 8006aac:	88fb      	ldrh	r3, [r7, #6]
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d101      	bne.n	8006ab6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006ab2:	2301      	movs	r3, #1
 8006ab4:	e075      	b.n	8006ba2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006abc:	2b01      	cmp	r3, #1
 8006abe:	d101      	bne.n	8006ac4 <HAL_UART_Transmit+0x3e>
 8006ac0:	2302      	movs	r3, #2
 8006ac2:	e06e      	b.n	8006ba2 <HAL_UART_Transmit+0x11c>
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	2201      	movs	r2, #1
 8006ac8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	2200      	movs	r2, #0
 8006ad0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	2221      	movs	r2, #33	; 0x21
 8006ad6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006ada:	f7fb fe77 	bl	80027cc <HAL_GetTick>
 8006ade:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	88fa      	ldrh	r2, [r7, #6]
 8006ae4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	88fa      	ldrh	r2, [r7, #6]
 8006aea:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	689b      	ldr	r3, [r3, #8]
 8006af0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006af4:	d108      	bne.n	8006b08 <HAL_UART_Transmit+0x82>
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	691b      	ldr	r3, [r3, #16]
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d104      	bne.n	8006b08 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8006afe:	2300      	movs	r3, #0
 8006b00:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006b02:	68bb      	ldr	r3, [r7, #8]
 8006b04:	61bb      	str	r3, [r7, #24]
 8006b06:	e003      	b.n	8006b10 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8006b08:	68bb      	ldr	r3, [r7, #8]
 8006b0a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006b0c:	2300      	movs	r3, #0
 8006b0e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	2200      	movs	r2, #0
 8006b14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8006b18:	e02a      	b.n	8006b70 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006b1a:	683b      	ldr	r3, [r7, #0]
 8006b1c:	9300      	str	r3, [sp, #0]
 8006b1e:	697b      	ldr	r3, [r7, #20]
 8006b20:	2200      	movs	r2, #0
 8006b22:	2180      	movs	r1, #128	; 0x80
 8006b24:	68f8      	ldr	r0, [r7, #12]
 8006b26:	f000 f8e2 	bl	8006cee <UART_WaitOnFlagUntilTimeout>
 8006b2a:	4603      	mov	r3, r0
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d001      	beq.n	8006b34 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006b30:	2303      	movs	r3, #3
 8006b32:	e036      	b.n	8006ba2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006b34:	69fb      	ldr	r3, [r7, #28]
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d10b      	bne.n	8006b52 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006b3a:	69bb      	ldr	r3, [r7, #24]
 8006b3c:	881b      	ldrh	r3, [r3, #0]
 8006b3e:	461a      	mov	r2, r3
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006b48:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006b4a:	69bb      	ldr	r3, [r7, #24]
 8006b4c:	3302      	adds	r3, #2
 8006b4e:	61bb      	str	r3, [r7, #24]
 8006b50:	e007      	b.n	8006b62 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006b52:	69fb      	ldr	r3, [r7, #28]
 8006b54:	781a      	ldrb	r2, [r3, #0]
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006b5c:	69fb      	ldr	r3, [r7, #28]
 8006b5e:	3301      	adds	r3, #1
 8006b60:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006b66:	b29b      	uxth	r3, r3
 8006b68:	3b01      	subs	r3, #1
 8006b6a:	b29a      	uxth	r2, r3
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006b74:	b29b      	uxth	r3, r3
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d1cf      	bne.n	8006b1a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006b7a:	683b      	ldr	r3, [r7, #0]
 8006b7c:	9300      	str	r3, [sp, #0]
 8006b7e:	697b      	ldr	r3, [r7, #20]
 8006b80:	2200      	movs	r2, #0
 8006b82:	2140      	movs	r1, #64	; 0x40
 8006b84:	68f8      	ldr	r0, [r7, #12]
 8006b86:	f000 f8b2 	bl	8006cee <UART_WaitOnFlagUntilTimeout>
 8006b8a:	4603      	mov	r3, r0
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d001      	beq.n	8006b94 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006b90:	2303      	movs	r3, #3
 8006b92:	e006      	b.n	8006ba2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	2220      	movs	r2, #32
 8006b98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006b9c:	2300      	movs	r3, #0
 8006b9e:	e000      	b.n	8006ba2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006ba0:	2302      	movs	r3, #2
  }
}
 8006ba2:	4618      	mov	r0, r3
 8006ba4:	3720      	adds	r7, #32
 8006ba6:	46bd      	mov	sp, r7
 8006ba8:	bd80      	pop	{r7, pc}

08006baa <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006baa:	b580      	push	{r7, lr}
 8006bac:	b08a      	sub	sp, #40	; 0x28
 8006bae:	af02      	add	r7, sp, #8
 8006bb0:	60f8      	str	r0, [r7, #12]
 8006bb2:	60b9      	str	r1, [r7, #8]
 8006bb4:	603b      	str	r3, [r7, #0]
 8006bb6:	4613      	mov	r3, r2
 8006bb8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006bba:	2300      	movs	r3, #0
 8006bbc:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006bc4:	b2db      	uxtb	r3, r3
 8006bc6:	2b20      	cmp	r3, #32
 8006bc8:	f040 808c 	bne.w	8006ce4 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006bcc:	68bb      	ldr	r3, [r7, #8]
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d002      	beq.n	8006bd8 <HAL_UART_Receive+0x2e>
 8006bd2:	88fb      	ldrh	r3, [r7, #6]
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d101      	bne.n	8006bdc <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8006bd8:	2301      	movs	r3, #1
 8006bda:	e084      	b.n	8006ce6 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006be2:	2b01      	cmp	r3, #1
 8006be4:	d101      	bne.n	8006bea <HAL_UART_Receive+0x40>
 8006be6:	2302      	movs	r3, #2
 8006be8:	e07d      	b.n	8006ce6 <HAL_UART_Receive+0x13c>
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	2201      	movs	r2, #1
 8006bee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	2200      	movs	r2, #0
 8006bf6:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	2222      	movs	r2, #34	; 0x22
 8006bfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	2200      	movs	r2, #0
 8006c04:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006c06:	f7fb fde1 	bl	80027cc <HAL_GetTick>
 8006c0a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	88fa      	ldrh	r2, [r7, #6]
 8006c10:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	88fa      	ldrh	r2, [r7, #6]
 8006c16:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	689b      	ldr	r3, [r3, #8]
 8006c1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c20:	d108      	bne.n	8006c34 <HAL_UART_Receive+0x8a>
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	691b      	ldr	r3, [r3, #16]
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d104      	bne.n	8006c34 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8006c2a:	2300      	movs	r3, #0
 8006c2c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006c2e:	68bb      	ldr	r3, [r7, #8]
 8006c30:	61bb      	str	r3, [r7, #24]
 8006c32:	e003      	b.n	8006c3c <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8006c34:	68bb      	ldr	r3, [r7, #8]
 8006c36:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006c38:	2300      	movs	r3, #0
 8006c3a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	2200      	movs	r2, #0
 8006c40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8006c44:	e043      	b.n	8006cce <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8006c46:	683b      	ldr	r3, [r7, #0]
 8006c48:	9300      	str	r3, [sp, #0]
 8006c4a:	697b      	ldr	r3, [r7, #20]
 8006c4c:	2200      	movs	r2, #0
 8006c4e:	2120      	movs	r1, #32
 8006c50:	68f8      	ldr	r0, [r7, #12]
 8006c52:	f000 f84c 	bl	8006cee <UART_WaitOnFlagUntilTimeout>
 8006c56:	4603      	mov	r3, r0
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d001      	beq.n	8006c60 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8006c5c:	2303      	movs	r3, #3
 8006c5e:	e042      	b.n	8006ce6 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8006c60:	69fb      	ldr	r3, [r7, #28]
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d10c      	bne.n	8006c80 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	685b      	ldr	r3, [r3, #4]
 8006c6c:	b29b      	uxth	r3, r3
 8006c6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c72:	b29a      	uxth	r2, r3
 8006c74:	69bb      	ldr	r3, [r7, #24]
 8006c76:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8006c78:	69bb      	ldr	r3, [r7, #24]
 8006c7a:	3302      	adds	r3, #2
 8006c7c:	61bb      	str	r3, [r7, #24]
 8006c7e:	e01f      	b.n	8006cc0 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	689b      	ldr	r3, [r3, #8]
 8006c84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c88:	d007      	beq.n	8006c9a <HAL_UART_Receive+0xf0>
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	689b      	ldr	r3, [r3, #8]
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d10a      	bne.n	8006ca8 <HAL_UART_Receive+0xfe>
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	691b      	ldr	r3, [r3, #16]
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d106      	bne.n	8006ca8 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	685b      	ldr	r3, [r3, #4]
 8006ca0:	b2da      	uxtb	r2, r3
 8006ca2:	69fb      	ldr	r3, [r7, #28]
 8006ca4:	701a      	strb	r2, [r3, #0]
 8006ca6:	e008      	b.n	8006cba <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	685b      	ldr	r3, [r3, #4]
 8006cae:	b2db      	uxtb	r3, r3
 8006cb0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006cb4:	b2da      	uxtb	r2, r3
 8006cb6:	69fb      	ldr	r3, [r7, #28]
 8006cb8:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8006cba:	69fb      	ldr	r3, [r7, #28]
 8006cbc:	3301      	adds	r3, #1
 8006cbe:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006cc4:	b29b      	uxth	r3, r3
 8006cc6:	3b01      	subs	r3, #1
 8006cc8:	b29a      	uxth	r2, r3
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006cd2:	b29b      	uxth	r3, r3
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d1b6      	bne.n	8006c46 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	2220      	movs	r2, #32
 8006cdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8006ce0:	2300      	movs	r3, #0
 8006ce2:	e000      	b.n	8006ce6 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8006ce4:	2302      	movs	r3, #2
  }
}
 8006ce6:	4618      	mov	r0, r3
 8006ce8:	3720      	adds	r7, #32
 8006cea:	46bd      	mov	sp, r7
 8006cec:	bd80      	pop	{r7, pc}

08006cee <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8006cee:	b580      	push	{r7, lr}
 8006cf0:	b084      	sub	sp, #16
 8006cf2:	af00      	add	r7, sp, #0
 8006cf4:	60f8      	str	r0, [r7, #12]
 8006cf6:	60b9      	str	r1, [r7, #8]
 8006cf8:	603b      	str	r3, [r7, #0]
 8006cfa:	4613      	mov	r3, r2
 8006cfc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006cfe:	e02c      	b.n	8006d5a <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006d00:	69bb      	ldr	r3, [r7, #24]
 8006d02:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006d06:	d028      	beq.n	8006d5a <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006d08:	69bb      	ldr	r3, [r7, #24]
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d007      	beq.n	8006d1e <UART_WaitOnFlagUntilTimeout+0x30>
 8006d0e:	f7fb fd5d 	bl	80027cc <HAL_GetTick>
 8006d12:	4602      	mov	r2, r0
 8006d14:	683b      	ldr	r3, [r7, #0]
 8006d16:	1ad3      	subs	r3, r2, r3
 8006d18:	69ba      	ldr	r2, [r7, #24]
 8006d1a:	429a      	cmp	r2, r3
 8006d1c:	d21d      	bcs.n	8006d5a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	68da      	ldr	r2, [r3, #12]
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006d2c:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	695a      	ldr	r2, [r3, #20]
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	f022 0201 	bic.w	r2, r2, #1
 8006d3c:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	2220      	movs	r2, #32
 8006d42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	2220      	movs	r2, #32
 8006d4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	2200      	movs	r2, #0
 8006d52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006d56:	2303      	movs	r3, #3
 8006d58:	e00f      	b.n	8006d7a <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	681a      	ldr	r2, [r3, #0]
 8006d60:	68bb      	ldr	r3, [r7, #8]
 8006d62:	4013      	ands	r3, r2
 8006d64:	68ba      	ldr	r2, [r7, #8]
 8006d66:	429a      	cmp	r2, r3
 8006d68:	bf0c      	ite	eq
 8006d6a:	2301      	moveq	r3, #1
 8006d6c:	2300      	movne	r3, #0
 8006d6e:	b2db      	uxtb	r3, r3
 8006d70:	461a      	mov	r2, r3
 8006d72:	79fb      	ldrb	r3, [r7, #7]
 8006d74:	429a      	cmp	r2, r3
 8006d76:	d0c3      	beq.n	8006d00 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006d78:	2300      	movs	r3, #0
}
 8006d7a:	4618      	mov	r0, r3
 8006d7c:	3710      	adds	r7, #16
 8006d7e:	46bd      	mov	sp, r7
 8006d80:	bd80      	pop	{r7, pc}
	...

08006d84 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006d84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d88:	b09f      	sub	sp, #124	; 0x7c
 8006d8a:	af00      	add	r7, sp, #0
 8006d8c:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006d8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	691b      	ldr	r3, [r3, #16]
 8006d94:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006d98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d9a:	68d9      	ldr	r1, [r3, #12]
 8006d9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d9e:	681a      	ldr	r2, [r3, #0]
 8006da0:	ea40 0301 	orr.w	r3, r0, r1
 8006da4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006da6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006da8:	689a      	ldr	r2, [r3, #8]
 8006daa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006dac:	691b      	ldr	r3, [r3, #16]
 8006dae:	431a      	orrs	r2, r3
 8006db0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006db2:	695b      	ldr	r3, [r3, #20]
 8006db4:	431a      	orrs	r2, r3
 8006db6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006db8:	69db      	ldr	r3, [r3, #28]
 8006dba:	4313      	orrs	r3, r2
 8006dbc:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8006dbe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	68db      	ldr	r3, [r3, #12]
 8006dc4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006dc8:	f021 010c 	bic.w	r1, r1, #12
 8006dcc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006dce:	681a      	ldr	r2, [r3, #0]
 8006dd0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006dd2:	430b      	orrs	r3, r1
 8006dd4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006dd6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	695b      	ldr	r3, [r3, #20]
 8006ddc:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006de0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006de2:	6999      	ldr	r1, [r3, #24]
 8006de4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006de6:	681a      	ldr	r2, [r3, #0]
 8006de8:	ea40 0301 	orr.w	r3, r0, r1
 8006dec:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006dee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006df0:	681a      	ldr	r2, [r3, #0]
 8006df2:	4bc5      	ldr	r3, [pc, #788]	; (8007108 <UART_SetConfig+0x384>)
 8006df4:	429a      	cmp	r2, r3
 8006df6:	d004      	beq.n	8006e02 <UART_SetConfig+0x7e>
 8006df8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006dfa:	681a      	ldr	r2, [r3, #0]
 8006dfc:	4bc3      	ldr	r3, [pc, #780]	; (800710c <UART_SetConfig+0x388>)
 8006dfe:	429a      	cmp	r2, r3
 8006e00:	d103      	bne.n	8006e0a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006e02:	f7fd fd3d 	bl	8004880 <HAL_RCC_GetPCLK2Freq>
 8006e06:	6778      	str	r0, [r7, #116]	; 0x74
 8006e08:	e002      	b.n	8006e10 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006e0a:	f7fd fd25 	bl	8004858 <HAL_RCC_GetPCLK1Freq>
 8006e0e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006e10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e12:	69db      	ldr	r3, [r3, #28]
 8006e14:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006e18:	f040 80b6 	bne.w	8006f88 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006e1c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006e1e:	461c      	mov	r4, r3
 8006e20:	f04f 0500 	mov.w	r5, #0
 8006e24:	4622      	mov	r2, r4
 8006e26:	462b      	mov	r3, r5
 8006e28:	1891      	adds	r1, r2, r2
 8006e2a:	6439      	str	r1, [r7, #64]	; 0x40
 8006e2c:	415b      	adcs	r3, r3
 8006e2e:	647b      	str	r3, [r7, #68]	; 0x44
 8006e30:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006e34:	1912      	adds	r2, r2, r4
 8006e36:	eb45 0303 	adc.w	r3, r5, r3
 8006e3a:	f04f 0000 	mov.w	r0, #0
 8006e3e:	f04f 0100 	mov.w	r1, #0
 8006e42:	00d9      	lsls	r1, r3, #3
 8006e44:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006e48:	00d0      	lsls	r0, r2, #3
 8006e4a:	4602      	mov	r2, r0
 8006e4c:	460b      	mov	r3, r1
 8006e4e:	1911      	adds	r1, r2, r4
 8006e50:	6639      	str	r1, [r7, #96]	; 0x60
 8006e52:	416b      	adcs	r3, r5
 8006e54:	667b      	str	r3, [r7, #100]	; 0x64
 8006e56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e58:	685b      	ldr	r3, [r3, #4]
 8006e5a:	461a      	mov	r2, r3
 8006e5c:	f04f 0300 	mov.w	r3, #0
 8006e60:	1891      	adds	r1, r2, r2
 8006e62:	63b9      	str	r1, [r7, #56]	; 0x38
 8006e64:	415b      	adcs	r3, r3
 8006e66:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006e68:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006e6c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8006e70:	f7f9 fd3c 	bl	80008ec <__aeabi_uldivmod>
 8006e74:	4602      	mov	r2, r0
 8006e76:	460b      	mov	r3, r1
 8006e78:	4ba5      	ldr	r3, [pc, #660]	; (8007110 <UART_SetConfig+0x38c>)
 8006e7a:	fba3 2302 	umull	r2, r3, r3, r2
 8006e7e:	095b      	lsrs	r3, r3, #5
 8006e80:	011e      	lsls	r6, r3, #4
 8006e82:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006e84:	461c      	mov	r4, r3
 8006e86:	f04f 0500 	mov.w	r5, #0
 8006e8a:	4622      	mov	r2, r4
 8006e8c:	462b      	mov	r3, r5
 8006e8e:	1891      	adds	r1, r2, r2
 8006e90:	6339      	str	r1, [r7, #48]	; 0x30
 8006e92:	415b      	adcs	r3, r3
 8006e94:	637b      	str	r3, [r7, #52]	; 0x34
 8006e96:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8006e9a:	1912      	adds	r2, r2, r4
 8006e9c:	eb45 0303 	adc.w	r3, r5, r3
 8006ea0:	f04f 0000 	mov.w	r0, #0
 8006ea4:	f04f 0100 	mov.w	r1, #0
 8006ea8:	00d9      	lsls	r1, r3, #3
 8006eaa:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006eae:	00d0      	lsls	r0, r2, #3
 8006eb0:	4602      	mov	r2, r0
 8006eb2:	460b      	mov	r3, r1
 8006eb4:	1911      	adds	r1, r2, r4
 8006eb6:	65b9      	str	r1, [r7, #88]	; 0x58
 8006eb8:	416b      	adcs	r3, r5
 8006eba:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006ebc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ebe:	685b      	ldr	r3, [r3, #4]
 8006ec0:	461a      	mov	r2, r3
 8006ec2:	f04f 0300 	mov.w	r3, #0
 8006ec6:	1891      	adds	r1, r2, r2
 8006ec8:	62b9      	str	r1, [r7, #40]	; 0x28
 8006eca:	415b      	adcs	r3, r3
 8006ecc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006ece:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006ed2:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8006ed6:	f7f9 fd09 	bl	80008ec <__aeabi_uldivmod>
 8006eda:	4602      	mov	r2, r0
 8006edc:	460b      	mov	r3, r1
 8006ede:	4b8c      	ldr	r3, [pc, #560]	; (8007110 <UART_SetConfig+0x38c>)
 8006ee0:	fba3 1302 	umull	r1, r3, r3, r2
 8006ee4:	095b      	lsrs	r3, r3, #5
 8006ee6:	2164      	movs	r1, #100	; 0x64
 8006ee8:	fb01 f303 	mul.w	r3, r1, r3
 8006eec:	1ad3      	subs	r3, r2, r3
 8006eee:	00db      	lsls	r3, r3, #3
 8006ef0:	3332      	adds	r3, #50	; 0x32
 8006ef2:	4a87      	ldr	r2, [pc, #540]	; (8007110 <UART_SetConfig+0x38c>)
 8006ef4:	fba2 2303 	umull	r2, r3, r2, r3
 8006ef8:	095b      	lsrs	r3, r3, #5
 8006efa:	005b      	lsls	r3, r3, #1
 8006efc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006f00:	441e      	add	r6, r3
 8006f02:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006f04:	4618      	mov	r0, r3
 8006f06:	f04f 0100 	mov.w	r1, #0
 8006f0a:	4602      	mov	r2, r0
 8006f0c:	460b      	mov	r3, r1
 8006f0e:	1894      	adds	r4, r2, r2
 8006f10:	623c      	str	r4, [r7, #32]
 8006f12:	415b      	adcs	r3, r3
 8006f14:	627b      	str	r3, [r7, #36]	; 0x24
 8006f16:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006f1a:	1812      	adds	r2, r2, r0
 8006f1c:	eb41 0303 	adc.w	r3, r1, r3
 8006f20:	f04f 0400 	mov.w	r4, #0
 8006f24:	f04f 0500 	mov.w	r5, #0
 8006f28:	00dd      	lsls	r5, r3, #3
 8006f2a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006f2e:	00d4      	lsls	r4, r2, #3
 8006f30:	4622      	mov	r2, r4
 8006f32:	462b      	mov	r3, r5
 8006f34:	1814      	adds	r4, r2, r0
 8006f36:	653c      	str	r4, [r7, #80]	; 0x50
 8006f38:	414b      	adcs	r3, r1
 8006f3a:	657b      	str	r3, [r7, #84]	; 0x54
 8006f3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f3e:	685b      	ldr	r3, [r3, #4]
 8006f40:	461a      	mov	r2, r3
 8006f42:	f04f 0300 	mov.w	r3, #0
 8006f46:	1891      	adds	r1, r2, r2
 8006f48:	61b9      	str	r1, [r7, #24]
 8006f4a:	415b      	adcs	r3, r3
 8006f4c:	61fb      	str	r3, [r7, #28]
 8006f4e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006f52:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8006f56:	f7f9 fcc9 	bl	80008ec <__aeabi_uldivmod>
 8006f5a:	4602      	mov	r2, r0
 8006f5c:	460b      	mov	r3, r1
 8006f5e:	4b6c      	ldr	r3, [pc, #432]	; (8007110 <UART_SetConfig+0x38c>)
 8006f60:	fba3 1302 	umull	r1, r3, r3, r2
 8006f64:	095b      	lsrs	r3, r3, #5
 8006f66:	2164      	movs	r1, #100	; 0x64
 8006f68:	fb01 f303 	mul.w	r3, r1, r3
 8006f6c:	1ad3      	subs	r3, r2, r3
 8006f6e:	00db      	lsls	r3, r3, #3
 8006f70:	3332      	adds	r3, #50	; 0x32
 8006f72:	4a67      	ldr	r2, [pc, #412]	; (8007110 <UART_SetConfig+0x38c>)
 8006f74:	fba2 2303 	umull	r2, r3, r2, r3
 8006f78:	095b      	lsrs	r3, r3, #5
 8006f7a:	f003 0207 	and.w	r2, r3, #7
 8006f7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	4432      	add	r2, r6
 8006f84:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006f86:	e0b9      	b.n	80070fc <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006f88:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006f8a:	461c      	mov	r4, r3
 8006f8c:	f04f 0500 	mov.w	r5, #0
 8006f90:	4622      	mov	r2, r4
 8006f92:	462b      	mov	r3, r5
 8006f94:	1891      	adds	r1, r2, r2
 8006f96:	6139      	str	r1, [r7, #16]
 8006f98:	415b      	adcs	r3, r3
 8006f9a:	617b      	str	r3, [r7, #20]
 8006f9c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006fa0:	1912      	adds	r2, r2, r4
 8006fa2:	eb45 0303 	adc.w	r3, r5, r3
 8006fa6:	f04f 0000 	mov.w	r0, #0
 8006faa:	f04f 0100 	mov.w	r1, #0
 8006fae:	00d9      	lsls	r1, r3, #3
 8006fb0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006fb4:	00d0      	lsls	r0, r2, #3
 8006fb6:	4602      	mov	r2, r0
 8006fb8:	460b      	mov	r3, r1
 8006fba:	eb12 0804 	adds.w	r8, r2, r4
 8006fbe:	eb43 0905 	adc.w	r9, r3, r5
 8006fc2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006fc4:	685b      	ldr	r3, [r3, #4]
 8006fc6:	4618      	mov	r0, r3
 8006fc8:	f04f 0100 	mov.w	r1, #0
 8006fcc:	f04f 0200 	mov.w	r2, #0
 8006fd0:	f04f 0300 	mov.w	r3, #0
 8006fd4:	008b      	lsls	r3, r1, #2
 8006fd6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006fda:	0082      	lsls	r2, r0, #2
 8006fdc:	4640      	mov	r0, r8
 8006fde:	4649      	mov	r1, r9
 8006fe0:	f7f9 fc84 	bl	80008ec <__aeabi_uldivmod>
 8006fe4:	4602      	mov	r2, r0
 8006fe6:	460b      	mov	r3, r1
 8006fe8:	4b49      	ldr	r3, [pc, #292]	; (8007110 <UART_SetConfig+0x38c>)
 8006fea:	fba3 2302 	umull	r2, r3, r3, r2
 8006fee:	095b      	lsrs	r3, r3, #5
 8006ff0:	011e      	lsls	r6, r3, #4
 8006ff2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006ff4:	4618      	mov	r0, r3
 8006ff6:	f04f 0100 	mov.w	r1, #0
 8006ffa:	4602      	mov	r2, r0
 8006ffc:	460b      	mov	r3, r1
 8006ffe:	1894      	adds	r4, r2, r2
 8007000:	60bc      	str	r4, [r7, #8]
 8007002:	415b      	adcs	r3, r3
 8007004:	60fb      	str	r3, [r7, #12]
 8007006:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800700a:	1812      	adds	r2, r2, r0
 800700c:	eb41 0303 	adc.w	r3, r1, r3
 8007010:	f04f 0400 	mov.w	r4, #0
 8007014:	f04f 0500 	mov.w	r5, #0
 8007018:	00dd      	lsls	r5, r3, #3
 800701a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800701e:	00d4      	lsls	r4, r2, #3
 8007020:	4622      	mov	r2, r4
 8007022:	462b      	mov	r3, r5
 8007024:	1814      	adds	r4, r2, r0
 8007026:	64bc      	str	r4, [r7, #72]	; 0x48
 8007028:	414b      	adcs	r3, r1
 800702a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800702c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800702e:	685b      	ldr	r3, [r3, #4]
 8007030:	4618      	mov	r0, r3
 8007032:	f04f 0100 	mov.w	r1, #0
 8007036:	f04f 0200 	mov.w	r2, #0
 800703a:	f04f 0300 	mov.w	r3, #0
 800703e:	008b      	lsls	r3, r1, #2
 8007040:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007044:	0082      	lsls	r2, r0, #2
 8007046:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800704a:	f7f9 fc4f 	bl	80008ec <__aeabi_uldivmod>
 800704e:	4602      	mov	r2, r0
 8007050:	460b      	mov	r3, r1
 8007052:	4b2f      	ldr	r3, [pc, #188]	; (8007110 <UART_SetConfig+0x38c>)
 8007054:	fba3 1302 	umull	r1, r3, r3, r2
 8007058:	095b      	lsrs	r3, r3, #5
 800705a:	2164      	movs	r1, #100	; 0x64
 800705c:	fb01 f303 	mul.w	r3, r1, r3
 8007060:	1ad3      	subs	r3, r2, r3
 8007062:	011b      	lsls	r3, r3, #4
 8007064:	3332      	adds	r3, #50	; 0x32
 8007066:	4a2a      	ldr	r2, [pc, #168]	; (8007110 <UART_SetConfig+0x38c>)
 8007068:	fba2 2303 	umull	r2, r3, r2, r3
 800706c:	095b      	lsrs	r3, r3, #5
 800706e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007072:	441e      	add	r6, r3
 8007074:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007076:	4618      	mov	r0, r3
 8007078:	f04f 0100 	mov.w	r1, #0
 800707c:	4602      	mov	r2, r0
 800707e:	460b      	mov	r3, r1
 8007080:	1894      	adds	r4, r2, r2
 8007082:	603c      	str	r4, [r7, #0]
 8007084:	415b      	adcs	r3, r3
 8007086:	607b      	str	r3, [r7, #4]
 8007088:	e9d7 2300 	ldrd	r2, r3, [r7]
 800708c:	1812      	adds	r2, r2, r0
 800708e:	eb41 0303 	adc.w	r3, r1, r3
 8007092:	f04f 0400 	mov.w	r4, #0
 8007096:	f04f 0500 	mov.w	r5, #0
 800709a:	00dd      	lsls	r5, r3, #3
 800709c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80070a0:	00d4      	lsls	r4, r2, #3
 80070a2:	4622      	mov	r2, r4
 80070a4:	462b      	mov	r3, r5
 80070a6:	eb12 0a00 	adds.w	sl, r2, r0
 80070aa:	eb43 0b01 	adc.w	fp, r3, r1
 80070ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80070b0:	685b      	ldr	r3, [r3, #4]
 80070b2:	4618      	mov	r0, r3
 80070b4:	f04f 0100 	mov.w	r1, #0
 80070b8:	f04f 0200 	mov.w	r2, #0
 80070bc:	f04f 0300 	mov.w	r3, #0
 80070c0:	008b      	lsls	r3, r1, #2
 80070c2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80070c6:	0082      	lsls	r2, r0, #2
 80070c8:	4650      	mov	r0, sl
 80070ca:	4659      	mov	r1, fp
 80070cc:	f7f9 fc0e 	bl	80008ec <__aeabi_uldivmod>
 80070d0:	4602      	mov	r2, r0
 80070d2:	460b      	mov	r3, r1
 80070d4:	4b0e      	ldr	r3, [pc, #56]	; (8007110 <UART_SetConfig+0x38c>)
 80070d6:	fba3 1302 	umull	r1, r3, r3, r2
 80070da:	095b      	lsrs	r3, r3, #5
 80070dc:	2164      	movs	r1, #100	; 0x64
 80070de:	fb01 f303 	mul.w	r3, r1, r3
 80070e2:	1ad3      	subs	r3, r2, r3
 80070e4:	011b      	lsls	r3, r3, #4
 80070e6:	3332      	adds	r3, #50	; 0x32
 80070e8:	4a09      	ldr	r2, [pc, #36]	; (8007110 <UART_SetConfig+0x38c>)
 80070ea:	fba2 2303 	umull	r2, r3, r2, r3
 80070ee:	095b      	lsrs	r3, r3, #5
 80070f0:	f003 020f 	and.w	r2, r3, #15
 80070f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	4432      	add	r2, r6
 80070fa:	609a      	str	r2, [r3, #8]
}
 80070fc:	bf00      	nop
 80070fe:	377c      	adds	r7, #124	; 0x7c
 8007100:	46bd      	mov	sp, r7
 8007102:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007106:	bf00      	nop
 8007108:	40011000 	.word	0x40011000
 800710c:	40011400 	.word	0x40011400
 8007110:	51eb851f 	.word	0x51eb851f

08007114 <__NVIC_SetPriority>:
{
 8007114:	b480      	push	{r7}
 8007116:	b083      	sub	sp, #12
 8007118:	af00      	add	r7, sp, #0
 800711a:	4603      	mov	r3, r0
 800711c:	6039      	str	r1, [r7, #0]
 800711e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007120:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007124:	2b00      	cmp	r3, #0
 8007126:	db0a      	blt.n	800713e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007128:	683b      	ldr	r3, [r7, #0]
 800712a:	b2da      	uxtb	r2, r3
 800712c:	490c      	ldr	r1, [pc, #48]	; (8007160 <__NVIC_SetPriority+0x4c>)
 800712e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007132:	0112      	lsls	r2, r2, #4
 8007134:	b2d2      	uxtb	r2, r2
 8007136:	440b      	add	r3, r1
 8007138:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800713c:	e00a      	b.n	8007154 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800713e:	683b      	ldr	r3, [r7, #0]
 8007140:	b2da      	uxtb	r2, r3
 8007142:	4908      	ldr	r1, [pc, #32]	; (8007164 <__NVIC_SetPriority+0x50>)
 8007144:	79fb      	ldrb	r3, [r7, #7]
 8007146:	f003 030f 	and.w	r3, r3, #15
 800714a:	3b04      	subs	r3, #4
 800714c:	0112      	lsls	r2, r2, #4
 800714e:	b2d2      	uxtb	r2, r2
 8007150:	440b      	add	r3, r1
 8007152:	761a      	strb	r2, [r3, #24]
}
 8007154:	bf00      	nop
 8007156:	370c      	adds	r7, #12
 8007158:	46bd      	mov	sp, r7
 800715a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800715e:	4770      	bx	lr
 8007160:	e000e100 	.word	0xe000e100
 8007164:	e000ed00 	.word	0xe000ed00

08007168 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8007168:	b580      	push	{r7, lr}
 800716a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800716c:	4b05      	ldr	r3, [pc, #20]	; (8007184 <SysTick_Handler+0x1c>)
 800716e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8007170:	f001 ff6c 	bl	800904c <xTaskGetSchedulerState>
 8007174:	4603      	mov	r3, r0
 8007176:	2b01      	cmp	r3, #1
 8007178:	d001      	beq.n	800717e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800717a:	f002 ff45 	bl	800a008 <xPortSysTickHandler>
  }
}
 800717e:	bf00      	nop
 8007180:	bd80      	pop	{r7, pc}
 8007182:	bf00      	nop
 8007184:	e000e010 	.word	0xe000e010

08007188 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8007188:	b580      	push	{r7, lr}
 800718a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800718c:	2100      	movs	r1, #0
 800718e:	f06f 0004 	mvn.w	r0, #4
 8007192:	f7ff ffbf 	bl	8007114 <__NVIC_SetPriority>
#endif
}
 8007196:	bf00      	nop
 8007198:	bd80      	pop	{r7, pc}
	...

0800719c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800719c:	b480      	push	{r7}
 800719e:	b083      	sub	sp, #12
 80071a0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80071a2:	f3ef 8305 	mrs	r3, IPSR
 80071a6:	603b      	str	r3, [r7, #0]
  return(result);
 80071a8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d003      	beq.n	80071b6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80071ae:	f06f 0305 	mvn.w	r3, #5
 80071b2:	607b      	str	r3, [r7, #4]
 80071b4:	e00c      	b.n	80071d0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80071b6:	4b0a      	ldr	r3, [pc, #40]	; (80071e0 <osKernelInitialize+0x44>)
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d105      	bne.n	80071ca <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80071be:	4b08      	ldr	r3, [pc, #32]	; (80071e0 <osKernelInitialize+0x44>)
 80071c0:	2201      	movs	r2, #1
 80071c2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80071c4:	2300      	movs	r3, #0
 80071c6:	607b      	str	r3, [r7, #4]
 80071c8:	e002      	b.n	80071d0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80071ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80071ce:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80071d0:	687b      	ldr	r3, [r7, #4]
}
 80071d2:	4618      	mov	r0, r3
 80071d4:	370c      	adds	r7, #12
 80071d6:	46bd      	mov	sp, r7
 80071d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071dc:	4770      	bx	lr
 80071de:	bf00      	nop
 80071e0:	20000124 	.word	0x20000124

080071e4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80071e4:	b580      	push	{r7, lr}
 80071e6:	b082      	sub	sp, #8
 80071e8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80071ea:	f3ef 8305 	mrs	r3, IPSR
 80071ee:	603b      	str	r3, [r7, #0]
  return(result);
 80071f0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d003      	beq.n	80071fe <osKernelStart+0x1a>
    stat = osErrorISR;
 80071f6:	f06f 0305 	mvn.w	r3, #5
 80071fa:	607b      	str	r3, [r7, #4]
 80071fc:	e010      	b.n	8007220 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80071fe:	4b0b      	ldr	r3, [pc, #44]	; (800722c <osKernelStart+0x48>)
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	2b01      	cmp	r3, #1
 8007204:	d109      	bne.n	800721a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8007206:	f7ff ffbf 	bl	8007188 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800720a:	4b08      	ldr	r3, [pc, #32]	; (800722c <osKernelStart+0x48>)
 800720c:	2202      	movs	r2, #2
 800720e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8007210:	f001 fad4 	bl	80087bc <vTaskStartScheduler>
      stat = osOK;
 8007214:	2300      	movs	r3, #0
 8007216:	607b      	str	r3, [r7, #4]
 8007218:	e002      	b.n	8007220 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800721a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800721e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007220:	687b      	ldr	r3, [r7, #4]
}
 8007222:	4618      	mov	r0, r3
 8007224:	3708      	adds	r7, #8
 8007226:	46bd      	mov	sp, r7
 8007228:	bd80      	pop	{r7, pc}
 800722a:	bf00      	nop
 800722c:	20000124 	.word	0x20000124

08007230 <osKernelLock>:

int32_t osKernelLock (void) {
 8007230:	b580      	push	{r7, lr}
 8007232:	b082      	sub	sp, #8
 8007234:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007236:	f3ef 8305 	mrs	r3, IPSR
 800723a:	603b      	str	r3, [r7, #0]
  return(result);
 800723c:	683b      	ldr	r3, [r7, #0]
  int32_t lock;

  if (IS_IRQ()) {
 800723e:	2b00      	cmp	r3, #0
 8007240:	d003      	beq.n	800724a <osKernelLock+0x1a>
    lock = (int32_t)osErrorISR;
 8007242:	f06f 0305 	mvn.w	r3, #5
 8007246:	607b      	str	r3, [r7, #4]
 8007248:	e013      	b.n	8007272 <osKernelLock+0x42>
  }
  else {
    switch (xTaskGetSchedulerState()) {
 800724a:	f001 feff 	bl	800904c <xTaskGetSchedulerState>
 800724e:	4603      	mov	r3, r0
 8007250:	2b00      	cmp	r3, #0
 8007252:	d002      	beq.n	800725a <osKernelLock+0x2a>
 8007254:	2b02      	cmp	r3, #2
 8007256:	d003      	beq.n	8007260 <osKernelLock+0x30>
 8007258:	e007      	b.n	800726a <osKernelLock+0x3a>
      case taskSCHEDULER_SUSPENDED:
        lock = 1;
 800725a:	2301      	movs	r3, #1
 800725c:	607b      	str	r3, [r7, #4]
        break;
 800725e:	e008      	b.n	8007272 <osKernelLock+0x42>

      case taskSCHEDULER_RUNNING:
        vTaskSuspendAll();
 8007260:	f001 fb12 	bl	8008888 <vTaskSuspendAll>
        lock = 0;
 8007264:	2300      	movs	r3, #0
 8007266:	607b      	str	r3, [r7, #4]
        break;
 8007268:	e003      	b.n	8007272 <osKernelLock+0x42>

      case taskSCHEDULER_NOT_STARTED:
      default:
        lock = (int32_t)osError;
 800726a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800726e:	607b      	str	r3, [r7, #4]
        break;
 8007270:	bf00      	nop
    }
  }

  return (lock);
 8007272:	687b      	ldr	r3, [r7, #4]
}
 8007274:	4618      	mov	r0, r3
 8007276:	3708      	adds	r7, #8
 8007278:	46bd      	mov	sp, r7
 800727a:	bd80      	pop	{r7, pc}

0800727c <osKernelUnlock>:

int32_t osKernelUnlock (void) {
 800727c:	b580      	push	{r7, lr}
 800727e:	b082      	sub	sp, #8
 8007280:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007282:	f3ef 8305 	mrs	r3, IPSR
 8007286:	603b      	str	r3, [r7, #0]
  return(result);
 8007288:	683b      	ldr	r3, [r7, #0]
  int32_t lock;

  if (IS_IRQ()) {
 800728a:	2b00      	cmp	r3, #0
 800728c:	d003      	beq.n	8007296 <osKernelUnlock+0x1a>
    lock = (int32_t)osErrorISR;
 800728e:	f06f 0305 	mvn.w	r3, #5
 8007292:	607b      	str	r3, [r7, #4]
 8007294:	e01f      	b.n	80072d6 <osKernelUnlock+0x5a>
  }
  else {
    switch (xTaskGetSchedulerState()) {
 8007296:	f001 fed9 	bl	800904c <xTaskGetSchedulerState>
 800729a:	4603      	mov	r3, r0
 800729c:	2b00      	cmp	r3, #0
 800729e:	d002      	beq.n	80072a6 <osKernelUnlock+0x2a>
 80072a0:	2b02      	cmp	r3, #2
 80072a2:	d010      	beq.n	80072c6 <osKernelUnlock+0x4a>
 80072a4:	e012      	b.n	80072cc <osKernelUnlock+0x50>
      case taskSCHEDULER_SUSPENDED:
        lock = 1;
 80072a6:	2301      	movs	r3, #1
 80072a8:	607b      	str	r3, [r7, #4]

        if (xTaskResumeAll() != pdTRUE) {
 80072aa:	f001 fafb 	bl	80088a4 <xTaskResumeAll>
 80072ae:	4603      	mov	r3, r0
 80072b0:	2b01      	cmp	r3, #1
 80072b2:	d00f      	beq.n	80072d4 <osKernelUnlock+0x58>
          if (xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED) {
 80072b4:	f001 feca 	bl	800904c <xTaskGetSchedulerState>
 80072b8:	4603      	mov	r3, r0
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d10a      	bne.n	80072d4 <osKernelUnlock+0x58>
            lock = (int32_t)osError;
 80072be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80072c2:	607b      	str	r3, [r7, #4]
          }
        }
        break;
 80072c4:	e006      	b.n	80072d4 <osKernelUnlock+0x58>

      case taskSCHEDULER_RUNNING:
        lock = 0;
 80072c6:	2300      	movs	r3, #0
 80072c8:	607b      	str	r3, [r7, #4]
        break;
 80072ca:	e004      	b.n	80072d6 <osKernelUnlock+0x5a>

      case taskSCHEDULER_NOT_STARTED:
      default:
        lock = (int32_t)osError;
 80072cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80072d0:	607b      	str	r3, [r7, #4]
        break;
 80072d2:	e000      	b.n	80072d6 <osKernelUnlock+0x5a>
        break;
 80072d4:	bf00      	nop
    }
  }

  return (lock);
 80072d6:	687b      	ldr	r3, [r7, #4]
}
 80072d8:	4618      	mov	r0, r3
 80072da:	3708      	adds	r7, #8
 80072dc:	46bd      	mov	sp, r7
 80072de:	bd80      	pop	{r7, pc}

080072e0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80072e0:	b580      	push	{r7, lr}
 80072e2:	b08e      	sub	sp, #56	; 0x38
 80072e4:	af04      	add	r7, sp, #16
 80072e6:	60f8      	str	r0, [r7, #12]
 80072e8:	60b9      	str	r1, [r7, #8]
 80072ea:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80072ec:	2300      	movs	r3, #0
 80072ee:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80072f0:	f3ef 8305 	mrs	r3, IPSR
 80072f4:	617b      	str	r3, [r7, #20]
  return(result);
 80072f6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d17e      	bne.n	80073fa <osThreadNew+0x11a>
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d07b      	beq.n	80073fa <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8007302:	2380      	movs	r3, #128	; 0x80
 8007304:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8007306:	2318      	movs	r3, #24
 8007308:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800730a:	2300      	movs	r3, #0
 800730c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800730e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007312:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	2b00      	cmp	r3, #0
 8007318:	d045      	beq.n	80073a6 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	2b00      	cmp	r3, #0
 8007320:	d002      	beq.n	8007328 <osThreadNew+0x48>
        name = attr->name;
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	699b      	ldr	r3, [r3, #24]
 800732c:	2b00      	cmp	r3, #0
 800732e:	d002      	beq.n	8007336 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	699b      	ldr	r3, [r3, #24]
 8007334:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8007336:	69fb      	ldr	r3, [r7, #28]
 8007338:	2b00      	cmp	r3, #0
 800733a:	d008      	beq.n	800734e <osThreadNew+0x6e>
 800733c:	69fb      	ldr	r3, [r7, #28]
 800733e:	2b38      	cmp	r3, #56	; 0x38
 8007340:	d805      	bhi.n	800734e <osThreadNew+0x6e>
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	685b      	ldr	r3, [r3, #4]
 8007346:	f003 0301 	and.w	r3, r3, #1
 800734a:	2b00      	cmp	r3, #0
 800734c:	d001      	beq.n	8007352 <osThreadNew+0x72>
        return (NULL);
 800734e:	2300      	movs	r3, #0
 8007350:	e054      	b.n	80073fc <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	695b      	ldr	r3, [r3, #20]
 8007356:	2b00      	cmp	r3, #0
 8007358:	d003      	beq.n	8007362 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	695b      	ldr	r3, [r3, #20]
 800735e:	089b      	lsrs	r3, r3, #2
 8007360:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	689b      	ldr	r3, [r3, #8]
 8007366:	2b00      	cmp	r3, #0
 8007368:	d00e      	beq.n	8007388 <osThreadNew+0xa8>
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	68db      	ldr	r3, [r3, #12]
 800736e:	2b5b      	cmp	r3, #91	; 0x5b
 8007370:	d90a      	bls.n	8007388 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007376:	2b00      	cmp	r3, #0
 8007378:	d006      	beq.n	8007388 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	695b      	ldr	r3, [r3, #20]
 800737e:	2b00      	cmp	r3, #0
 8007380:	d002      	beq.n	8007388 <osThreadNew+0xa8>
        mem = 1;
 8007382:	2301      	movs	r3, #1
 8007384:	61bb      	str	r3, [r7, #24]
 8007386:	e010      	b.n	80073aa <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	689b      	ldr	r3, [r3, #8]
 800738c:	2b00      	cmp	r3, #0
 800738e:	d10c      	bne.n	80073aa <osThreadNew+0xca>
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	68db      	ldr	r3, [r3, #12]
 8007394:	2b00      	cmp	r3, #0
 8007396:	d108      	bne.n	80073aa <osThreadNew+0xca>
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	691b      	ldr	r3, [r3, #16]
 800739c:	2b00      	cmp	r3, #0
 800739e:	d104      	bne.n	80073aa <osThreadNew+0xca>
          mem = 0;
 80073a0:	2300      	movs	r3, #0
 80073a2:	61bb      	str	r3, [r7, #24]
 80073a4:	e001      	b.n	80073aa <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80073a6:	2300      	movs	r3, #0
 80073a8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80073aa:	69bb      	ldr	r3, [r7, #24]
 80073ac:	2b01      	cmp	r3, #1
 80073ae:	d110      	bne.n	80073d2 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80073b4:	687a      	ldr	r2, [r7, #4]
 80073b6:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80073b8:	9202      	str	r2, [sp, #8]
 80073ba:	9301      	str	r3, [sp, #4]
 80073bc:	69fb      	ldr	r3, [r7, #28]
 80073be:	9300      	str	r3, [sp, #0]
 80073c0:	68bb      	ldr	r3, [r7, #8]
 80073c2:	6a3a      	ldr	r2, [r7, #32]
 80073c4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80073c6:	68f8      	ldr	r0, [r7, #12]
 80073c8:	f000 ff1c 	bl	8008204 <xTaskCreateStatic>
 80073cc:	4603      	mov	r3, r0
 80073ce:	613b      	str	r3, [r7, #16]
 80073d0:	e013      	b.n	80073fa <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80073d2:	69bb      	ldr	r3, [r7, #24]
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d110      	bne.n	80073fa <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80073d8:	6a3b      	ldr	r3, [r7, #32]
 80073da:	b29a      	uxth	r2, r3
 80073dc:	f107 0310 	add.w	r3, r7, #16
 80073e0:	9301      	str	r3, [sp, #4]
 80073e2:	69fb      	ldr	r3, [r7, #28]
 80073e4:	9300      	str	r3, [sp, #0]
 80073e6:	68bb      	ldr	r3, [r7, #8]
 80073e8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80073ea:	68f8      	ldr	r0, [r7, #12]
 80073ec:	f000 ff67 	bl	80082be <xTaskCreate>
 80073f0:	4603      	mov	r3, r0
 80073f2:	2b01      	cmp	r3, #1
 80073f4:	d001      	beq.n	80073fa <osThreadNew+0x11a>
            hTask = NULL;
 80073f6:	2300      	movs	r3, #0
 80073f8:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80073fa:	693b      	ldr	r3, [r7, #16]
}
 80073fc:	4618      	mov	r0, r3
 80073fe:	3728      	adds	r7, #40	; 0x28
 8007400:	46bd      	mov	sp, r7
 8007402:	bd80      	pop	{r7, pc}

08007404 <osThreadSuspend>:

  return (stat);
}

#if (configUSE_OS2_THREAD_SUSPEND_RESUME == 1)
osStatus_t osThreadSuspend (osThreadId_t thread_id) {
 8007404:	b580      	push	{r7, lr}
 8007406:	b086      	sub	sp, #24
 8007408:	af00      	add	r7, sp, #0
 800740a:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007410:	f3ef 8305 	mrs	r3, IPSR
 8007414:	60fb      	str	r3, [r7, #12]
  return(result);
 8007416:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007418:	2b00      	cmp	r3, #0
 800741a:	d003      	beq.n	8007424 <osThreadSuspend+0x20>
    stat = osErrorISR;
 800741c:	f06f 0305 	mvn.w	r3, #5
 8007420:	617b      	str	r3, [r7, #20]
 8007422:	e00b      	b.n	800743c <osThreadSuspend+0x38>
  }
  else if (hTask == NULL) {
 8007424:	693b      	ldr	r3, [r7, #16]
 8007426:	2b00      	cmp	r3, #0
 8007428:	d103      	bne.n	8007432 <osThreadSuspend+0x2e>
    stat = osErrorParameter;
 800742a:	f06f 0303 	mvn.w	r3, #3
 800742e:	617b      	str	r3, [r7, #20]
 8007430:	e004      	b.n	800743c <osThreadSuspend+0x38>
  }
  else {
    stat = osOK;
 8007432:	2300      	movs	r3, #0
 8007434:	617b      	str	r3, [r7, #20]
    vTaskSuspend (hTask);
 8007436:	6938      	ldr	r0, [r7, #16]
 8007438:	f001 f8ba 	bl	80085b0 <vTaskSuspend>
  }

  return (stat);
 800743c:	697b      	ldr	r3, [r7, #20]
}
 800743e:	4618      	mov	r0, r3
 8007440:	3718      	adds	r7, #24
 8007442:	46bd      	mov	sp, r7
 8007444:	bd80      	pop	{r7, pc}

08007446 <osThreadResume>:

osStatus_t osThreadResume (osThreadId_t thread_id) {
 8007446:	b580      	push	{r7, lr}
 8007448:	b086      	sub	sp, #24
 800744a:	af00      	add	r7, sp, #0
 800744c:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007452:	f3ef 8305 	mrs	r3, IPSR
 8007456:	60fb      	str	r3, [r7, #12]
  return(result);
 8007458:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 800745a:	2b00      	cmp	r3, #0
 800745c:	d003      	beq.n	8007466 <osThreadResume+0x20>
    stat = osErrorISR;
 800745e:	f06f 0305 	mvn.w	r3, #5
 8007462:	617b      	str	r3, [r7, #20]
 8007464:	e00b      	b.n	800747e <osThreadResume+0x38>
  }
  else if (hTask == NULL) {
 8007466:	693b      	ldr	r3, [r7, #16]
 8007468:	2b00      	cmp	r3, #0
 800746a:	d103      	bne.n	8007474 <osThreadResume+0x2e>
    stat = osErrorParameter;
 800746c:	f06f 0303 	mvn.w	r3, #3
 8007470:	617b      	str	r3, [r7, #20]
 8007472:	e004      	b.n	800747e <osThreadResume+0x38>
  }
  else {
    stat = osOK;
 8007474:	2300      	movs	r3, #0
 8007476:	617b      	str	r3, [r7, #20]
    vTaskResume (hTask);
 8007478:	6938      	ldr	r0, [r7, #16]
 800747a:	f001 f941 	bl	8008700 <vTaskResume>
  }

  return (stat);
 800747e:	697b      	ldr	r3, [r7, #20]
}
 8007480:	4618      	mov	r0, r3
 8007482:	3718      	adds	r7, #24
 8007484:	46bd      	mov	sp, r7
 8007486:	bd80      	pop	{r7, pc}

08007488 <osThreadFlagsSet>:
  return (count);
}
#endif /* (configUSE_OS2_THREAD_ENUMERATE == 1) */

#if (configUSE_OS2_THREAD_FLAGS == 1)
uint32_t osThreadFlagsSet (osThreadId_t thread_id, uint32_t flags) {
 8007488:	b580      	push	{r7, lr}
 800748a:	b088      	sub	sp, #32
 800748c:	af02      	add	r7, sp, #8
 800748e:	6078      	str	r0, [r7, #4]
 8007490:	6039      	str	r1, [r7, #0]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	617b      	str	r3, [r7, #20]
  uint32_t rflags;
  BaseType_t yield;

  if ((hTask == NULL) || ((flags & THREAD_FLAGS_INVALID_BITS) != 0U)) {
 8007496:	697b      	ldr	r3, [r7, #20]
 8007498:	2b00      	cmp	r3, #0
 800749a:	d002      	beq.n	80074a2 <osThreadFlagsSet+0x1a>
 800749c:	683b      	ldr	r3, [r7, #0]
 800749e:	2b00      	cmp	r3, #0
 80074a0:	da03      	bge.n	80074aa <osThreadFlagsSet+0x22>
    rflags = (uint32_t)osErrorParameter;
 80074a2:	f06f 0303 	mvn.w	r3, #3
 80074a6:	60fb      	str	r3, [r7, #12]
 80074a8:	e035      	b.n	8007516 <osThreadFlagsSet+0x8e>
  }
  else {
    rflags = (uint32_t)osError;
 80074aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80074ae:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80074b0:	f3ef 8305 	mrs	r3, IPSR
 80074b4:	613b      	str	r3, [r7, #16]
  return(result);
 80074b6:	693b      	ldr	r3, [r7, #16]

    if (IS_IRQ()) {
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d01f      	beq.n	80074fc <osThreadFlagsSet+0x74>
      yield = pdFALSE;
 80074bc:	2300      	movs	r3, #0
 80074be:	60bb      	str	r3, [r7, #8]

      (void)xTaskNotifyFromISR (hTask, flags, eSetBits, &yield);
 80074c0:	f107 0308 	add.w	r3, r7, #8
 80074c4:	9300      	str	r3, [sp, #0]
 80074c6:	2300      	movs	r3, #0
 80074c8:	2201      	movs	r2, #1
 80074ca:	6839      	ldr	r1, [r7, #0]
 80074cc:	6978      	ldr	r0, [r7, #20]
 80074ce:	f001 ff5b 	bl	8009388 <xTaskGenericNotifyFromISR>
      (void)xTaskNotifyAndQueryFromISR (hTask, 0, eNoAction, &rflags, NULL);
 80074d2:	f107 030c 	add.w	r3, r7, #12
 80074d6:	2200      	movs	r2, #0
 80074d8:	9200      	str	r2, [sp, #0]
 80074da:	2200      	movs	r2, #0
 80074dc:	2100      	movs	r1, #0
 80074de:	6978      	ldr	r0, [r7, #20]
 80074e0:	f001 ff52 	bl	8009388 <xTaskGenericNotifyFromISR>

      portYIELD_FROM_ISR (yield);
 80074e4:	68bb      	ldr	r3, [r7, #8]
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d015      	beq.n	8007516 <osThreadFlagsSet+0x8e>
 80074ea:	4b0d      	ldr	r3, [pc, #52]	; (8007520 <osThreadFlagsSet+0x98>)
 80074ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80074f0:	601a      	str	r2, [r3, #0]
 80074f2:	f3bf 8f4f 	dsb	sy
 80074f6:	f3bf 8f6f 	isb	sy
 80074fa:	e00c      	b.n	8007516 <osThreadFlagsSet+0x8e>
    }
    else {
      (void)xTaskNotify (hTask, flags, eSetBits);
 80074fc:	2300      	movs	r3, #0
 80074fe:	2201      	movs	r2, #1
 8007500:	6839      	ldr	r1, [r7, #0]
 8007502:	6978      	ldr	r0, [r7, #20]
 8007504:	f001 fe88 	bl	8009218 <xTaskGenericNotify>
      (void)xTaskNotifyAndQuery (hTask, 0, eNoAction, &rflags);
 8007508:	f107 030c 	add.w	r3, r7, #12
 800750c:	2200      	movs	r2, #0
 800750e:	2100      	movs	r1, #0
 8007510:	6978      	ldr	r0, [r7, #20]
 8007512:	f001 fe81 	bl	8009218 <xTaskGenericNotify>
    }
  }
  /* Return flags after setting */
  return (rflags);
 8007516:	68fb      	ldr	r3, [r7, #12]
}
 8007518:	4618      	mov	r0, r3
 800751a:	3718      	adds	r7, #24
 800751c:	46bd      	mov	sp, r7
 800751e:	bd80      	pop	{r7, pc}
 8007520:	e000ed04 	.word	0xe000ed04

08007524 <osThreadFlagsWait>:
  }

  return (rflags);
}

uint32_t osThreadFlagsWait (uint32_t flags, uint32_t options, uint32_t timeout) {
 8007524:	b580      	push	{r7, lr}
 8007526:	b08c      	sub	sp, #48	; 0x30
 8007528:	af00      	add	r7, sp, #0
 800752a:	60f8      	str	r0, [r7, #12]
 800752c:	60b9      	str	r1, [r7, #8]
 800752e:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007530:	f3ef 8305 	mrs	r3, IPSR
 8007534:	617b      	str	r3, [r7, #20]
  return(result);
 8007536:	697b      	ldr	r3, [r7, #20]
  uint32_t rflags, nval;
  uint32_t clear;
  TickType_t t0, td, tout;
  BaseType_t rval;

  if (IS_IRQ()) {
 8007538:	2b00      	cmp	r3, #0
 800753a:	d003      	beq.n	8007544 <osThreadFlagsWait+0x20>
    rflags = (uint32_t)osErrorISR;
 800753c:	f06f 0305 	mvn.w	r3, #5
 8007540:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007542:	e06b      	b.n	800761c <osThreadFlagsWait+0xf8>
  }
  else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	2b00      	cmp	r3, #0
 8007548:	da03      	bge.n	8007552 <osThreadFlagsWait+0x2e>
    rflags = (uint32_t)osErrorParameter;
 800754a:	f06f 0303 	mvn.w	r3, #3
 800754e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007550:	e064      	b.n	800761c <osThreadFlagsWait+0xf8>
  }
  else {
    if ((options & osFlagsNoClear) == osFlagsNoClear) {
 8007552:	68bb      	ldr	r3, [r7, #8]
 8007554:	f003 0302 	and.w	r3, r3, #2
 8007558:	2b00      	cmp	r3, #0
 800755a:	d002      	beq.n	8007562 <osThreadFlagsWait+0x3e>
      clear = 0U;
 800755c:	2300      	movs	r3, #0
 800755e:	62bb      	str	r3, [r7, #40]	; 0x28
 8007560:	e001      	b.n	8007566 <osThreadFlagsWait+0x42>
    } else {
      clear = flags;
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    rflags = 0U;
 8007566:	2300      	movs	r3, #0
 8007568:	62fb      	str	r3, [r7, #44]	; 0x2c
    tout   = timeout;
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	627b      	str	r3, [r7, #36]	; 0x24

    t0 = xTaskGetTickCount();
 800756e:	f001 fa37 	bl	80089e0 <xTaskGetTickCount>
 8007572:	6238      	str	r0, [r7, #32]
    do {
      rval = xTaskNotifyWait (0, clear, &nval, tout);
 8007574:	f107 0210 	add.w	r2, r7, #16
 8007578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800757a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800757c:	2000      	movs	r0, #0
 800757e:	f001 fdf1 	bl	8009164 <xTaskNotifyWait>
 8007582:	61f8      	str	r0, [r7, #28]

      if (rval == pdPASS) {
 8007584:	69fb      	ldr	r3, [r7, #28]
 8007586:	2b01      	cmp	r3, #1
 8007588:	d137      	bne.n	80075fa <osThreadFlagsWait+0xd6>
        rflags &= flags;
 800758a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	4013      	ands	r3, r2
 8007590:	62fb      	str	r3, [r7, #44]	; 0x2c
        rflags |= nval;
 8007592:	693b      	ldr	r3, [r7, #16]
 8007594:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007596:	4313      	orrs	r3, r2
 8007598:	62fb      	str	r3, [r7, #44]	; 0x2c

        if ((options & osFlagsWaitAll) == osFlagsWaitAll) {
 800759a:	68bb      	ldr	r3, [r7, #8]
 800759c:	f003 0301 	and.w	r3, r3, #1
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d00c      	beq.n	80075be <osThreadFlagsWait+0x9a>
          if ((flags & rflags) == flags) {
 80075a4:	68fa      	ldr	r2, [r7, #12]
 80075a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075a8:	4013      	ands	r3, r2
 80075aa:	68fa      	ldr	r2, [r7, #12]
 80075ac:	429a      	cmp	r2, r3
 80075ae:	d032      	beq.n	8007616 <osThreadFlagsWait+0xf2>
            break;
          } else {
            if (timeout == 0U) {
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d10f      	bne.n	80075d6 <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 80075b6:	f06f 0302 	mvn.w	r3, #2
 80075ba:	62fb      	str	r3, [r7, #44]	; 0x2c
              break;
 80075bc:	e02e      	b.n	800761c <osThreadFlagsWait+0xf8>
            }
          }
        }
        else {
          if ((flags & rflags) != 0) {
 80075be:	68fa      	ldr	r2, [r7, #12]
 80075c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075c2:	4013      	ands	r3, r2
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d128      	bne.n	800761a <osThreadFlagsWait+0xf6>
            break;
          } else {
            if (timeout == 0U) {
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d103      	bne.n	80075d6 <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 80075ce:	f06f 0302 	mvn.w	r3, #2
 80075d2:	62fb      	str	r3, [r7, #44]	; 0x2c
              break;
 80075d4:	e022      	b.n	800761c <osThreadFlagsWait+0xf8>
            }
          }
        }

        /* Update timeout */
        td = xTaskGetTickCount() - t0;
 80075d6:	f001 fa03 	bl	80089e0 <xTaskGetTickCount>
 80075da:	4602      	mov	r2, r0
 80075dc:	6a3b      	ldr	r3, [r7, #32]
 80075de:	1ad3      	subs	r3, r2, r3
 80075e0:	61bb      	str	r3, [r7, #24]

        if (td > tout) {
 80075e2:	69ba      	ldr	r2, [r7, #24]
 80075e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075e6:	429a      	cmp	r2, r3
 80075e8:	d902      	bls.n	80075f0 <osThreadFlagsWait+0xcc>
          tout  = 0;
 80075ea:	2300      	movs	r3, #0
 80075ec:	627b      	str	r3, [r7, #36]	; 0x24
 80075ee:	e00e      	b.n	800760e <osThreadFlagsWait+0xea>
        } else {
          tout -= td;
 80075f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80075f2:	69bb      	ldr	r3, [r7, #24]
 80075f4:	1ad3      	subs	r3, r2, r3
 80075f6:	627b      	str	r3, [r7, #36]	; 0x24
 80075f8:	e009      	b.n	800760e <osThreadFlagsWait+0xea>
        }
      }
      else {
        if (timeout == 0) {
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d103      	bne.n	8007608 <osThreadFlagsWait+0xe4>
          rflags = (uint32_t)osErrorResource;
 8007600:	f06f 0302 	mvn.w	r3, #2
 8007604:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007606:	e002      	b.n	800760e <osThreadFlagsWait+0xea>
        } else {
          rflags = (uint32_t)osErrorTimeout;
 8007608:	f06f 0301 	mvn.w	r3, #1
 800760c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
      }
    }
    while (rval != pdFAIL);
 800760e:	69fb      	ldr	r3, [r7, #28]
 8007610:	2b00      	cmp	r3, #0
 8007612:	d1af      	bne.n	8007574 <osThreadFlagsWait+0x50>
 8007614:	e002      	b.n	800761c <osThreadFlagsWait+0xf8>
            break;
 8007616:	bf00      	nop
 8007618:	e000      	b.n	800761c <osThreadFlagsWait+0xf8>
            break;
 800761a:	bf00      	nop
  }

  /* Return flags before clearing */
  return (rflags);
 800761c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800761e:	4618      	mov	r0, r3
 8007620:	3730      	adds	r7, #48	; 0x30
 8007622:	46bd      	mov	sp, r7
 8007624:	bd80      	pop	{r7, pc}

08007626 <osDelay>:
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8007626:	b580      	push	{r7, lr}
 8007628:	b084      	sub	sp, #16
 800762a:	af00      	add	r7, sp, #0
 800762c:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800762e:	f3ef 8305 	mrs	r3, IPSR
 8007632:	60bb      	str	r3, [r7, #8]
  return(result);
 8007634:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007636:	2b00      	cmp	r3, #0
 8007638:	d003      	beq.n	8007642 <osDelay+0x1c>
    stat = osErrorISR;
 800763a:	f06f 0305 	mvn.w	r3, #5
 800763e:	60fb      	str	r3, [r7, #12]
 8007640:	e007      	b.n	8007652 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8007642:	2300      	movs	r3, #0
 8007644:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	2b00      	cmp	r3, #0
 800764a:	d002      	beq.n	8007652 <osDelay+0x2c>
      vTaskDelay(ticks);
 800764c:	6878      	ldr	r0, [r7, #4]
 800764e:	f000 ff7b 	bl	8008548 <vTaskDelay>
    }
  }

  return (stat);
 8007652:	68fb      	ldr	r3, [r7, #12]
}
 8007654:	4618      	mov	r0, r3
 8007656:	3710      	adds	r7, #16
 8007658:	46bd      	mov	sp, r7
 800765a:	bd80      	pop	{r7, pc}

0800765c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800765c:	b480      	push	{r7}
 800765e:	b085      	sub	sp, #20
 8007660:	af00      	add	r7, sp, #0
 8007662:	60f8      	str	r0, [r7, #12]
 8007664:	60b9      	str	r1, [r7, #8]
 8007666:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	4a07      	ldr	r2, [pc, #28]	; (8007688 <vApplicationGetIdleTaskMemory+0x2c>)
 800766c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800766e:	68bb      	ldr	r3, [r7, #8]
 8007670:	4a06      	ldr	r2, [pc, #24]	; (800768c <vApplicationGetIdleTaskMemory+0x30>)
 8007672:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	2280      	movs	r2, #128	; 0x80
 8007678:	601a      	str	r2, [r3, #0]
}
 800767a:	bf00      	nop
 800767c:	3714      	adds	r7, #20
 800767e:	46bd      	mov	sp, r7
 8007680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007684:	4770      	bx	lr
 8007686:	bf00      	nop
 8007688:	20000128 	.word	0x20000128
 800768c:	20000184 	.word	0x20000184

08007690 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007690:	b480      	push	{r7}
 8007692:	b085      	sub	sp, #20
 8007694:	af00      	add	r7, sp, #0
 8007696:	60f8      	str	r0, [r7, #12]
 8007698:	60b9      	str	r1, [r7, #8]
 800769a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	4a07      	ldr	r2, [pc, #28]	; (80076bc <vApplicationGetTimerTaskMemory+0x2c>)
 80076a0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80076a2:	68bb      	ldr	r3, [r7, #8]
 80076a4:	4a06      	ldr	r2, [pc, #24]	; (80076c0 <vApplicationGetTimerTaskMemory+0x30>)
 80076a6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80076ae:	601a      	str	r2, [r3, #0]
}
 80076b0:	bf00      	nop
 80076b2:	3714      	adds	r7, #20
 80076b4:	46bd      	mov	sp, r7
 80076b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ba:	4770      	bx	lr
 80076bc:	20000384 	.word	0x20000384
 80076c0:	200003e0 	.word	0x200003e0

080076c4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80076c4:	b480      	push	{r7}
 80076c6:	b083      	sub	sp, #12
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	f103 0208 	add.w	r2, r3, #8
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80076dc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	f103 0208 	add.w	r2, r3, #8
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	f103 0208 	add.w	r2, r3, #8
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	2200      	movs	r2, #0
 80076f6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80076f8:	bf00      	nop
 80076fa:	370c      	adds	r7, #12
 80076fc:	46bd      	mov	sp, r7
 80076fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007702:	4770      	bx	lr

08007704 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007704:	b480      	push	{r7}
 8007706:	b083      	sub	sp, #12
 8007708:	af00      	add	r7, sp, #0
 800770a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	2200      	movs	r2, #0
 8007710:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007712:	bf00      	nop
 8007714:	370c      	adds	r7, #12
 8007716:	46bd      	mov	sp, r7
 8007718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800771c:	4770      	bx	lr

0800771e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800771e:	b480      	push	{r7}
 8007720:	b085      	sub	sp, #20
 8007722:	af00      	add	r7, sp, #0
 8007724:	6078      	str	r0, [r7, #4]
 8007726:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	685b      	ldr	r3, [r3, #4]
 800772c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800772e:	683b      	ldr	r3, [r7, #0]
 8007730:	68fa      	ldr	r2, [r7, #12]
 8007732:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	689a      	ldr	r2, [r3, #8]
 8007738:	683b      	ldr	r3, [r7, #0]
 800773a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	689b      	ldr	r3, [r3, #8]
 8007740:	683a      	ldr	r2, [r7, #0]
 8007742:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	683a      	ldr	r2, [r7, #0]
 8007748:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800774a:	683b      	ldr	r3, [r7, #0]
 800774c:	687a      	ldr	r2, [r7, #4]
 800774e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	1c5a      	adds	r2, r3, #1
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	601a      	str	r2, [r3, #0]
}
 800775a:	bf00      	nop
 800775c:	3714      	adds	r7, #20
 800775e:	46bd      	mov	sp, r7
 8007760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007764:	4770      	bx	lr

08007766 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007766:	b480      	push	{r7}
 8007768:	b085      	sub	sp, #20
 800776a:	af00      	add	r7, sp, #0
 800776c:	6078      	str	r0, [r7, #4]
 800776e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007770:	683b      	ldr	r3, [r7, #0]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007776:	68bb      	ldr	r3, [r7, #8]
 8007778:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800777c:	d103      	bne.n	8007786 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	691b      	ldr	r3, [r3, #16]
 8007782:	60fb      	str	r3, [r7, #12]
 8007784:	e00c      	b.n	80077a0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	3308      	adds	r3, #8
 800778a:	60fb      	str	r3, [r7, #12]
 800778c:	e002      	b.n	8007794 <vListInsert+0x2e>
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	685b      	ldr	r3, [r3, #4]
 8007792:	60fb      	str	r3, [r7, #12]
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	685b      	ldr	r3, [r3, #4]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	68ba      	ldr	r2, [r7, #8]
 800779c:	429a      	cmp	r2, r3
 800779e:	d2f6      	bcs.n	800778e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	685a      	ldr	r2, [r3, #4]
 80077a4:	683b      	ldr	r3, [r7, #0]
 80077a6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80077a8:	683b      	ldr	r3, [r7, #0]
 80077aa:	685b      	ldr	r3, [r3, #4]
 80077ac:	683a      	ldr	r2, [r7, #0]
 80077ae:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80077b0:	683b      	ldr	r3, [r7, #0]
 80077b2:	68fa      	ldr	r2, [r7, #12]
 80077b4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	683a      	ldr	r2, [r7, #0]
 80077ba:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80077bc:	683b      	ldr	r3, [r7, #0]
 80077be:	687a      	ldr	r2, [r7, #4]
 80077c0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	1c5a      	adds	r2, r3, #1
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	601a      	str	r2, [r3, #0]
}
 80077cc:	bf00      	nop
 80077ce:	3714      	adds	r7, #20
 80077d0:	46bd      	mov	sp, r7
 80077d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d6:	4770      	bx	lr

080077d8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80077d8:	b480      	push	{r7}
 80077da:	b085      	sub	sp, #20
 80077dc:	af00      	add	r7, sp, #0
 80077de:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	691b      	ldr	r3, [r3, #16]
 80077e4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	685b      	ldr	r3, [r3, #4]
 80077ea:	687a      	ldr	r2, [r7, #4]
 80077ec:	6892      	ldr	r2, [r2, #8]
 80077ee:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	689b      	ldr	r3, [r3, #8]
 80077f4:	687a      	ldr	r2, [r7, #4]
 80077f6:	6852      	ldr	r2, [r2, #4]
 80077f8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	685b      	ldr	r3, [r3, #4]
 80077fe:	687a      	ldr	r2, [r7, #4]
 8007800:	429a      	cmp	r2, r3
 8007802:	d103      	bne.n	800780c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	689a      	ldr	r2, [r3, #8]
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	2200      	movs	r2, #0
 8007810:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	1e5a      	subs	r2, r3, #1
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	681b      	ldr	r3, [r3, #0]
}
 8007820:	4618      	mov	r0, r3
 8007822:	3714      	adds	r7, #20
 8007824:	46bd      	mov	sp, r7
 8007826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800782a:	4770      	bx	lr

0800782c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800782c:	b580      	push	{r7, lr}
 800782e:	b084      	sub	sp, #16
 8007830:	af00      	add	r7, sp, #0
 8007832:	6078      	str	r0, [r7, #4]
 8007834:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	2b00      	cmp	r3, #0
 800783e:	d10a      	bne.n	8007856 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007840:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007844:	f383 8811 	msr	BASEPRI, r3
 8007848:	f3bf 8f6f 	isb	sy
 800784c:	f3bf 8f4f 	dsb	sy
 8007850:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007852:	bf00      	nop
 8007854:	e7fe      	b.n	8007854 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8007856:	f002 fb45 	bl	8009ee4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	681a      	ldr	r2, [r3, #0]
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007862:	68f9      	ldr	r1, [r7, #12]
 8007864:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007866:	fb01 f303 	mul.w	r3, r1, r3
 800786a:	441a      	add	r2, r3
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	2200      	movs	r2, #0
 8007874:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	681a      	ldr	r2, [r3, #0]
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	681a      	ldr	r2, [r3, #0]
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007886:	3b01      	subs	r3, #1
 8007888:	68f9      	ldr	r1, [r7, #12]
 800788a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800788c:	fb01 f303 	mul.w	r3, r1, r3
 8007890:	441a      	add	r2, r3
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	22ff      	movs	r2, #255	; 0xff
 800789a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	22ff      	movs	r2, #255	; 0xff
 80078a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80078a6:	683b      	ldr	r3, [r7, #0]
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d114      	bne.n	80078d6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	691b      	ldr	r3, [r3, #16]
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d01a      	beq.n	80078ea <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	3310      	adds	r3, #16
 80078b8:	4618      	mov	r0, r3
 80078ba:	f001 fa09 	bl	8008cd0 <xTaskRemoveFromEventList>
 80078be:	4603      	mov	r3, r0
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d012      	beq.n	80078ea <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80078c4:	4b0c      	ldr	r3, [pc, #48]	; (80078f8 <xQueueGenericReset+0xcc>)
 80078c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80078ca:	601a      	str	r2, [r3, #0]
 80078cc:	f3bf 8f4f 	dsb	sy
 80078d0:	f3bf 8f6f 	isb	sy
 80078d4:	e009      	b.n	80078ea <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	3310      	adds	r3, #16
 80078da:	4618      	mov	r0, r3
 80078dc:	f7ff fef2 	bl	80076c4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	3324      	adds	r3, #36	; 0x24
 80078e4:	4618      	mov	r0, r3
 80078e6:	f7ff feed 	bl	80076c4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80078ea:	f002 fb2b 	bl	8009f44 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80078ee:	2301      	movs	r3, #1
}
 80078f0:	4618      	mov	r0, r3
 80078f2:	3710      	adds	r7, #16
 80078f4:	46bd      	mov	sp, r7
 80078f6:	bd80      	pop	{r7, pc}
 80078f8:	e000ed04 	.word	0xe000ed04

080078fc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80078fc:	b580      	push	{r7, lr}
 80078fe:	b08e      	sub	sp, #56	; 0x38
 8007900:	af02      	add	r7, sp, #8
 8007902:	60f8      	str	r0, [r7, #12]
 8007904:	60b9      	str	r1, [r7, #8]
 8007906:	607a      	str	r2, [r7, #4]
 8007908:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	2b00      	cmp	r3, #0
 800790e:	d10a      	bne.n	8007926 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8007910:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007914:	f383 8811 	msr	BASEPRI, r3
 8007918:	f3bf 8f6f 	isb	sy
 800791c:	f3bf 8f4f 	dsb	sy
 8007920:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007922:	bf00      	nop
 8007924:	e7fe      	b.n	8007924 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007926:	683b      	ldr	r3, [r7, #0]
 8007928:	2b00      	cmp	r3, #0
 800792a:	d10a      	bne.n	8007942 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800792c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007930:	f383 8811 	msr	BASEPRI, r3
 8007934:	f3bf 8f6f 	isb	sy
 8007938:	f3bf 8f4f 	dsb	sy
 800793c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800793e:	bf00      	nop
 8007940:	e7fe      	b.n	8007940 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	2b00      	cmp	r3, #0
 8007946:	d002      	beq.n	800794e <xQueueGenericCreateStatic+0x52>
 8007948:	68bb      	ldr	r3, [r7, #8]
 800794a:	2b00      	cmp	r3, #0
 800794c:	d001      	beq.n	8007952 <xQueueGenericCreateStatic+0x56>
 800794e:	2301      	movs	r3, #1
 8007950:	e000      	b.n	8007954 <xQueueGenericCreateStatic+0x58>
 8007952:	2300      	movs	r3, #0
 8007954:	2b00      	cmp	r3, #0
 8007956:	d10a      	bne.n	800796e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8007958:	f04f 0350 	mov.w	r3, #80	; 0x50
 800795c:	f383 8811 	msr	BASEPRI, r3
 8007960:	f3bf 8f6f 	isb	sy
 8007964:	f3bf 8f4f 	dsb	sy
 8007968:	623b      	str	r3, [r7, #32]
}
 800796a:	bf00      	nop
 800796c:	e7fe      	b.n	800796c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	2b00      	cmp	r3, #0
 8007972:	d102      	bne.n	800797a <xQueueGenericCreateStatic+0x7e>
 8007974:	68bb      	ldr	r3, [r7, #8]
 8007976:	2b00      	cmp	r3, #0
 8007978:	d101      	bne.n	800797e <xQueueGenericCreateStatic+0x82>
 800797a:	2301      	movs	r3, #1
 800797c:	e000      	b.n	8007980 <xQueueGenericCreateStatic+0x84>
 800797e:	2300      	movs	r3, #0
 8007980:	2b00      	cmp	r3, #0
 8007982:	d10a      	bne.n	800799a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8007984:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007988:	f383 8811 	msr	BASEPRI, r3
 800798c:	f3bf 8f6f 	isb	sy
 8007990:	f3bf 8f4f 	dsb	sy
 8007994:	61fb      	str	r3, [r7, #28]
}
 8007996:	bf00      	nop
 8007998:	e7fe      	b.n	8007998 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800799a:	2350      	movs	r3, #80	; 0x50
 800799c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800799e:	697b      	ldr	r3, [r7, #20]
 80079a0:	2b50      	cmp	r3, #80	; 0x50
 80079a2:	d00a      	beq.n	80079ba <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80079a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079a8:	f383 8811 	msr	BASEPRI, r3
 80079ac:	f3bf 8f6f 	isb	sy
 80079b0:	f3bf 8f4f 	dsb	sy
 80079b4:	61bb      	str	r3, [r7, #24]
}
 80079b6:	bf00      	nop
 80079b8:	e7fe      	b.n	80079b8 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80079ba:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80079bc:	683b      	ldr	r3, [r7, #0]
 80079be:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80079c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d00d      	beq.n	80079e2 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80079c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079c8:	2201      	movs	r2, #1
 80079ca:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80079ce:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80079d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079d4:	9300      	str	r3, [sp, #0]
 80079d6:	4613      	mov	r3, r2
 80079d8:	687a      	ldr	r2, [r7, #4]
 80079da:	68b9      	ldr	r1, [r7, #8]
 80079dc:	68f8      	ldr	r0, [r7, #12]
 80079de:	f000 f805 	bl	80079ec <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80079e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80079e4:	4618      	mov	r0, r3
 80079e6:	3730      	adds	r7, #48	; 0x30
 80079e8:	46bd      	mov	sp, r7
 80079ea:	bd80      	pop	{r7, pc}

080079ec <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80079ec:	b580      	push	{r7, lr}
 80079ee:	b084      	sub	sp, #16
 80079f0:	af00      	add	r7, sp, #0
 80079f2:	60f8      	str	r0, [r7, #12]
 80079f4:	60b9      	str	r1, [r7, #8]
 80079f6:	607a      	str	r2, [r7, #4]
 80079f8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80079fa:	68bb      	ldr	r3, [r7, #8]
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d103      	bne.n	8007a08 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007a00:	69bb      	ldr	r3, [r7, #24]
 8007a02:	69ba      	ldr	r2, [r7, #24]
 8007a04:	601a      	str	r2, [r3, #0]
 8007a06:	e002      	b.n	8007a0e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007a08:	69bb      	ldr	r3, [r7, #24]
 8007a0a:	687a      	ldr	r2, [r7, #4]
 8007a0c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007a0e:	69bb      	ldr	r3, [r7, #24]
 8007a10:	68fa      	ldr	r2, [r7, #12]
 8007a12:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007a14:	69bb      	ldr	r3, [r7, #24]
 8007a16:	68ba      	ldr	r2, [r7, #8]
 8007a18:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007a1a:	2101      	movs	r1, #1
 8007a1c:	69b8      	ldr	r0, [r7, #24]
 8007a1e:	f7ff ff05 	bl	800782c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007a22:	69bb      	ldr	r3, [r7, #24]
 8007a24:	78fa      	ldrb	r2, [r7, #3]
 8007a26:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007a2a:	bf00      	nop
 8007a2c:	3710      	adds	r7, #16
 8007a2e:	46bd      	mov	sp, r7
 8007a30:	bd80      	pop	{r7, pc}
	...

08007a34 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007a34:	b580      	push	{r7, lr}
 8007a36:	b08e      	sub	sp, #56	; 0x38
 8007a38:	af00      	add	r7, sp, #0
 8007a3a:	60f8      	str	r0, [r7, #12]
 8007a3c:	60b9      	str	r1, [r7, #8]
 8007a3e:	607a      	str	r2, [r7, #4]
 8007a40:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007a42:	2300      	movs	r3, #0
 8007a44:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007a4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d10a      	bne.n	8007a66 <xQueueGenericSend+0x32>
	__asm volatile
 8007a50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a54:	f383 8811 	msr	BASEPRI, r3
 8007a58:	f3bf 8f6f 	isb	sy
 8007a5c:	f3bf 8f4f 	dsb	sy
 8007a60:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007a62:	bf00      	nop
 8007a64:	e7fe      	b.n	8007a64 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007a66:	68bb      	ldr	r3, [r7, #8]
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d103      	bne.n	8007a74 <xQueueGenericSend+0x40>
 8007a6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d101      	bne.n	8007a78 <xQueueGenericSend+0x44>
 8007a74:	2301      	movs	r3, #1
 8007a76:	e000      	b.n	8007a7a <xQueueGenericSend+0x46>
 8007a78:	2300      	movs	r3, #0
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d10a      	bne.n	8007a94 <xQueueGenericSend+0x60>
	__asm volatile
 8007a7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a82:	f383 8811 	msr	BASEPRI, r3
 8007a86:	f3bf 8f6f 	isb	sy
 8007a8a:	f3bf 8f4f 	dsb	sy
 8007a8e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007a90:	bf00      	nop
 8007a92:	e7fe      	b.n	8007a92 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007a94:	683b      	ldr	r3, [r7, #0]
 8007a96:	2b02      	cmp	r3, #2
 8007a98:	d103      	bne.n	8007aa2 <xQueueGenericSend+0x6e>
 8007a9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a9e:	2b01      	cmp	r3, #1
 8007aa0:	d101      	bne.n	8007aa6 <xQueueGenericSend+0x72>
 8007aa2:	2301      	movs	r3, #1
 8007aa4:	e000      	b.n	8007aa8 <xQueueGenericSend+0x74>
 8007aa6:	2300      	movs	r3, #0
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d10a      	bne.n	8007ac2 <xQueueGenericSend+0x8e>
	__asm volatile
 8007aac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ab0:	f383 8811 	msr	BASEPRI, r3
 8007ab4:	f3bf 8f6f 	isb	sy
 8007ab8:	f3bf 8f4f 	dsb	sy
 8007abc:	623b      	str	r3, [r7, #32]
}
 8007abe:	bf00      	nop
 8007ac0:	e7fe      	b.n	8007ac0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007ac2:	f001 fac3 	bl	800904c <xTaskGetSchedulerState>
 8007ac6:	4603      	mov	r3, r0
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d102      	bne.n	8007ad2 <xQueueGenericSend+0x9e>
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d101      	bne.n	8007ad6 <xQueueGenericSend+0xa2>
 8007ad2:	2301      	movs	r3, #1
 8007ad4:	e000      	b.n	8007ad8 <xQueueGenericSend+0xa4>
 8007ad6:	2300      	movs	r3, #0
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d10a      	bne.n	8007af2 <xQueueGenericSend+0xbe>
	__asm volatile
 8007adc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ae0:	f383 8811 	msr	BASEPRI, r3
 8007ae4:	f3bf 8f6f 	isb	sy
 8007ae8:	f3bf 8f4f 	dsb	sy
 8007aec:	61fb      	str	r3, [r7, #28]
}
 8007aee:	bf00      	nop
 8007af0:	e7fe      	b.n	8007af0 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007af2:	f002 f9f7 	bl	8009ee4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007af6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007af8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007afa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007afc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007afe:	429a      	cmp	r2, r3
 8007b00:	d302      	bcc.n	8007b08 <xQueueGenericSend+0xd4>
 8007b02:	683b      	ldr	r3, [r7, #0]
 8007b04:	2b02      	cmp	r3, #2
 8007b06:	d129      	bne.n	8007b5c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007b08:	683a      	ldr	r2, [r7, #0]
 8007b0a:	68b9      	ldr	r1, [r7, #8]
 8007b0c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007b0e:	f000 fa0b 	bl	8007f28 <prvCopyDataToQueue>
 8007b12:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007b14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d010      	beq.n	8007b3e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007b1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b1e:	3324      	adds	r3, #36	; 0x24
 8007b20:	4618      	mov	r0, r3
 8007b22:	f001 f8d5 	bl	8008cd0 <xTaskRemoveFromEventList>
 8007b26:	4603      	mov	r3, r0
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d013      	beq.n	8007b54 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007b2c:	4b3f      	ldr	r3, [pc, #252]	; (8007c2c <xQueueGenericSend+0x1f8>)
 8007b2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007b32:	601a      	str	r2, [r3, #0]
 8007b34:	f3bf 8f4f 	dsb	sy
 8007b38:	f3bf 8f6f 	isb	sy
 8007b3c:	e00a      	b.n	8007b54 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007b3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d007      	beq.n	8007b54 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007b44:	4b39      	ldr	r3, [pc, #228]	; (8007c2c <xQueueGenericSend+0x1f8>)
 8007b46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007b4a:	601a      	str	r2, [r3, #0]
 8007b4c:	f3bf 8f4f 	dsb	sy
 8007b50:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007b54:	f002 f9f6 	bl	8009f44 <vPortExitCritical>
				return pdPASS;
 8007b58:	2301      	movs	r3, #1
 8007b5a:	e063      	b.n	8007c24 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d103      	bne.n	8007b6a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007b62:	f002 f9ef 	bl	8009f44 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007b66:	2300      	movs	r3, #0
 8007b68:	e05c      	b.n	8007c24 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007b6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d106      	bne.n	8007b7e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007b70:	f107 0314 	add.w	r3, r7, #20
 8007b74:	4618      	mov	r0, r3
 8007b76:	f001 f90f 	bl	8008d98 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007b7a:	2301      	movs	r3, #1
 8007b7c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007b7e:	f002 f9e1 	bl	8009f44 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007b82:	f000 fe81 	bl	8008888 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007b86:	f002 f9ad 	bl	8009ee4 <vPortEnterCritical>
 8007b8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b8c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007b90:	b25b      	sxtb	r3, r3
 8007b92:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007b96:	d103      	bne.n	8007ba0 <xQueueGenericSend+0x16c>
 8007b98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b9a:	2200      	movs	r2, #0
 8007b9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007ba0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ba2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007ba6:	b25b      	sxtb	r3, r3
 8007ba8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007bac:	d103      	bne.n	8007bb6 <xQueueGenericSend+0x182>
 8007bae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bb0:	2200      	movs	r2, #0
 8007bb2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007bb6:	f002 f9c5 	bl	8009f44 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007bba:	1d3a      	adds	r2, r7, #4
 8007bbc:	f107 0314 	add.w	r3, r7, #20
 8007bc0:	4611      	mov	r1, r2
 8007bc2:	4618      	mov	r0, r3
 8007bc4:	f001 f8fe 	bl	8008dc4 <xTaskCheckForTimeOut>
 8007bc8:	4603      	mov	r3, r0
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d124      	bne.n	8007c18 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007bce:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007bd0:	f000 faa2 	bl	8008118 <prvIsQueueFull>
 8007bd4:	4603      	mov	r3, r0
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d018      	beq.n	8007c0c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007bda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bdc:	3310      	adds	r3, #16
 8007bde:	687a      	ldr	r2, [r7, #4]
 8007be0:	4611      	mov	r1, r2
 8007be2:	4618      	mov	r0, r3
 8007be4:	f001 f824 	bl	8008c30 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007be8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007bea:	f000 fa2d 	bl	8008048 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007bee:	f000 fe59 	bl	80088a4 <xTaskResumeAll>
 8007bf2:	4603      	mov	r3, r0
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	f47f af7c 	bne.w	8007af2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8007bfa:	4b0c      	ldr	r3, [pc, #48]	; (8007c2c <xQueueGenericSend+0x1f8>)
 8007bfc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007c00:	601a      	str	r2, [r3, #0]
 8007c02:	f3bf 8f4f 	dsb	sy
 8007c06:	f3bf 8f6f 	isb	sy
 8007c0a:	e772      	b.n	8007af2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007c0c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007c0e:	f000 fa1b 	bl	8008048 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007c12:	f000 fe47 	bl	80088a4 <xTaskResumeAll>
 8007c16:	e76c      	b.n	8007af2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007c18:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007c1a:	f000 fa15 	bl	8008048 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007c1e:	f000 fe41 	bl	80088a4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007c22:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007c24:	4618      	mov	r0, r3
 8007c26:	3738      	adds	r7, #56	; 0x38
 8007c28:	46bd      	mov	sp, r7
 8007c2a:	bd80      	pop	{r7, pc}
 8007c2c:	e000ed04 	.word	0xe000ed04

08007c30 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007c30:	b580      	push	{r7, lr}
 8007c32:	b090      	sub	sp, #64	; 0x40
 8007c34:	af00      	add	r7, sp, #0
 8007c36:	60f8      	str	r0, [r7, #12]
 8007c38:	60b9      	str	r1, [r7, #8]
 8007c3a:	607a      	str	r2, [r7, #4]
 8007c3c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8007c42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d10a      	bne.n	8007c5e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8007c48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c4c:	f383 8811 	msr	BASEPRI, r3
 8007c50:	f3bf 8f6f 	isb	sy
 8007c54:	f3bf 8f4f 	dsb	sy
 8007c58:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007c5a:	bf00      	nop
 8007c5c:	e7fe      	b.n	8007c5c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007c5e:	68bb      	ldr	r3, [r7, #8]
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d103      	bne.n	8007c6c <xQueueGenericSendFromISR+0x3c>
 8007c64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d101      	bne.n	8007c70 <xQueueGenericSendFromISR+0x40>
 8007c6c:	2301      	movs	r3, #1
 8007c6e:	e000      	b.n	8007c72 <xQueueGenericSendFromISR+0x42>
 8007c70:	2300      	movs	r3, #0
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d10a      	bne.n	8007c8c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8007c76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c7a:	f383 8811 	msr	BASEPRI, r3
 8007c7e:	f3bf 8f6f 	isb	sy
 8007c82:	f3bf 8f4f 	dsb	sy
 8007c86:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007c88:	bf00      	nop
 8007c8a:	e7fe      	b.n	8007c8a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007c8c:	683b      	ldr	r3, [r7, #0]
 8007c8e:	2b02      	cmp	r3, #2
 8007c90:	d103      	bne.n	8007c9a <xQueueGenericSendFromISR+0x6a>
 8007c92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c96:	2b01      	cmp	r3, #1
 8007c98:	d101      	bne.n	8007c9e <xQueueGenericSendFromISR+0x6e>
 8007c9a:	2301      	movs	r3, #1
 8007c9c:	e000      	b.n	8007ca0 <xQueueGenericSendFromISR+0x70>
 8007c9e:	2300      	movs	r3, #0
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d10a      	bne.n	8007cba <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8007ca4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ca8:	f383 8811 	msr	BASEPRI, r3
 8007cac:	f3bf 8f6f 	isb	sy
 8007cb0:	f3bf 8f4f 	dsb	sy
 8007cb4:	623b      	str	r3, [r7, #32]
}
 8007cb6:	bf00      	nop
 8007cb8:	e7fe      	b.n	8007cb8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007cba:	f002 f9f5 	bl	800a0a8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007cbe:	f3ef 8211 	mrs	r2, BASEPRI
 8007cc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cc6:	f383 8811 	msr	BASEPRI, r3
 8007cca:	f3bf 8f6f 	isb	sy
 8007cce:	f3bf 8f4f 	dsb	sy
 8007cd2:	61fa      	str	r2, [r7, #28]
 8007cd4:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007cd6:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007cd8:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007cda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cdc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007cde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ce0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ce2:	429a      	cmp	r2, r3
 8007ce4:	d302      	bcc.n	8007cec <xQueueGenericSendFromISR+0xbc>
 8007ce6:	683b      	ldr	r3, [r7, #0]
 8007ce8:	2b02      	cmp	r3, #2
 8007cea:	d12f      	bne.n	8007d4c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007cec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007cf2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007cf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cfa:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007cfc:	683a      	ldr	r2, [r7, #0]
 8007cfe:	68b9      	ldr	r1, [r7, #8]
 8007d00:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007d02:	f000 f911 	bl	8007f28 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007d06:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8007d0a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007d0e:	d112      	bne.n	8007d36 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007d10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d016      	beq.n	8007d46 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007d18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d1a:	3324      	adds	r3, #36	; 0x24
 8007d1c:	4618      	mov	r0, r3
 8007d1e:	f000 ffd7 	bl	8008cd0 <xTaskRemoveFromEventList>
 8007d22:	4603      	mov	r3, r0
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d00e      	beq.n	8007d46 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d00b      	beq.n	8007d46 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	2201      	movs	r2, #1
 8007d32:	601a      	str	r2, [r3, #0]
 8007d34:	e007      	b.n	8007d46 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007d36:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007d3a:	3301      	adds	r3, #1
 8007d3c:	b2db      	uxtb	r3, r3
 8007d3e:	b25a      	sxtb	r2, r3
 8007d40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d42:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007d46:	2301      	movs	r3, #1
 8007d48:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8007d4a:	e001      	b.n	8007d50 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007d4c:	2300      	movs	r3, #0
 8007d4e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007d50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d52:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007d54:	697b      	ldr	r3, [r7, #20]
 8007d56:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007d5a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007d5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8007d5e:	4618      	mov	r0, r3
 8007d60:	3740      	adds	r7, #64	; 0x40
 8007d62:	46bd      	mov	sp, r7
 8007d64:	bd80      	pop	{r7, pc}
	...

08007d68 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007d68:	b580      	push	{r7, lr}
 8007d6a:	b08c      	sub	sp, #48	; 0x30
 8007d6c:	af00      	add	r7, sp, #0
 8007d6e:	60f8      	str	r0, [r7, #12]
 8007d70:	60b9      	str	r1, [r7, #8]
 8007d72:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007d74:	2300      	movs	r3, #0
 8007d76:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007d7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d10a      	bne.n	8007d98 <xQueueReceive+0x30>
	__asm volatile
 8007d82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d86:	f383 8811 	msr	BASEPRI, r3
 8007d8a:	f3bf 8f6f 	isb	sy
 8007d8e:	f3bf 8f4f 	dsb	sy
 8007d92:	623b      	str	r3, [r7, #32]
}
 8007d94:	bf00      	nop
 8007d96:	e7fe      	b.n	8007d96 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007d98:	68bb      	ldr	r3, [r7, #8]
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d103      	bne.n	8007da6 <xQueueReceive+0x3e>
 8007d9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d101      	bne.n	8007daa <xQueueReceive+0x42>
 8007da6:	2301      	movs	r3, #1
 8007da8:	e000      	b.n	8007dac <xQueueReceive+0x44>
 8007daa:	2300      	movs	r3, #0
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d10a      	bne.n	8007dc6 <xQueueReceive+0x5e>
	__asm volatile
 8007db0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007db4:	f383 8811 	msr	BASEPRI, r3
 8007db8:	f3bf 8f6f 	isb	sy
 8007dbc:	f3bf 8f4f 	dsb	sy
 8007dc0:	61fb      	str	r3, [r7, #28]
}
 8007dc2:	bf00      	nop
 8007dc4:	e7fe      	b.n	8007dc4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007dc6:	f001 f941 	bl	800904c <xTaskGetSchedulerState>
 8007dca:	4603      	mov	r3, r0
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d102      	bne.n	8007dd6 <xQueueReceive+0x6e>
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d101      	bne.n	8007dda <xQueueReceive+0x72>
 8007dd6:	2301      	movs	r3, #1
 8007dd8:	e000      	b.n	8007ddc <xQueueReceive+0x74>
 8007dda:	2300      	movs	r3, #0
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d10a      	bne.n	8007df6 <xQueueReceive+0x8e>
	__asm volatile
 8007de0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007de4:	f383 8811 	msr	BASEPRI, r3
 8007de8:	f3bf 8f6f 	isb	sy
 8007dec:	f3bf 8f4f 	dsb	sy
 8007df0:	61bb      	str	r3, [r7, #24]
}
 8007df2:	bf00      	nop
 8007df4:	e7fe      	b.n	8007df4 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007df6:	f002 f875 	bl	8009ee4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007dfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007dfe:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d01f      	beq.n	8007e46 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007e06:	68b9      	ldr	r1, [r7, #8]
 8007e08:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007e0a:	f000 f8f7 	bl	8007ffc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e10:	1e5a      	subs	r2, r3, #1
 8007e12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e14:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007e16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e18:	691b      	ldr	r3, [r3, #16]
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d00f      	beq.n	8007e3e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007e1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e20:	3310      	adds	r3, #16
 8007e22:	4618      	mov	r0, r3
 8007e24:	f000 ff54 	bl	8008cd0 <xTaskRemoveFromEventList>
 8007e28:	4603      	mov	r3, r0
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d007      	beq.n	8007e3e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007e2e:	4b3d      	ldr	r3, [pc, #244]	; (8007f24 <xQueueReceive+0x1bc>)
 8007e30:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e34:	601a      	str	r2, [r3, #0]
 8007e36:	f3bf 8f4f 	dsb	sy
 8007e3a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007e3e:	f002 f881 	bl	8009f44 <vPortExitCritical>
				return pdPASS;
 8007e42:	2301      	movs	r3, #1
 8007e44:	e069      	b.n	8007f1a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d103      	bne.n	8007e54 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007e4c:	f002 f87a 	bl	8009f44 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007e50:	2300      	movs	r3, #0
 8007e52:	e062      	b.n	8007f1a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007e54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d106      	bne.n	8007e68 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007e5a:	f107 0310 	add.w	r3, r7, #16
 8007e5e:	4618      	mov	r0, r3
 8007e60:	f000 ff9a 	bl	8008d98 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007e64:	2301      	movs	r3, #1
 8007e66:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007e68:	f002 f86c 	bl	8009f44 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007e6c:	f000 fd0c 	bl	8008888 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007e70:	f002 f838 	bl	8009ee4 <vPortEnterCritical>
 8007e74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e76:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007e7a:	b25b      	sxtb	r3, r3
 8007e7c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007e80:	d103      	bne.n	8007e8a <xQueueReceive+0x122>
 8007e82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e84:	2200      	movs	r2, #0
 8007e86:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007e8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e8c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007e90:	b25b      	sxtb	r3, r3
 8007e92:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007e96:	d103      	bne.n	8007ea0 <xQueueReceive+0x138>
 8007e98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e9a:	2200      	movs	r2, #0
 8007e9c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007ea0:	f002 f850 	bl	8009f44 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007ea4:	1d3a      	adds	r2, r7, #4
 8007ea6:	f107 0310 	add.w	r3, r7, #16
 8007eaa:	4611      	mov	r1, r2
 8007eac:	4618      	mov	r0, r3
 8007eae:	f000 ff89 	bl	8008dc4 <xTaskCheckForTimeOut>
 8007eb2:	4603      	mov	r3, r0
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d123      	bne.n	8007f00 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007eb8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007eba:	f000 f917 	bl	80080ec <prvIsQueueEmpty>
 8007ebe:	4603      	mov	r3, r0
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d017      	beq.n	8007ef4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007ec4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ec6:	3324      	adds	r3, #36	; 0x24
 8007ec8:	687a      	ldr	r2, [r7, #4]
 8007eca:	4611      	mov	r1, r2
 8007ecc:	4618      	mov	r0, r3
 8007ece:	f000 feaf 	bl	8008c30 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007ed2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007ed4:	f000 f8b8 	bl	8008048 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007ed8:	f000 fce4 	bl	80088a4 <xTaskResumeAll>
 8007edc:	4603      	mov	r3, r0
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d189      	bne.n	8007df6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8007ee2:	4b10      	ldr	r3, [pc, #64]	; (8007f24 <xQueueReceive+0x1bc>)
 8007ee4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007ee8:	601a      	str	r2, [r3, #0]
 8007eea:	f3bf 8f4f 	dsb	sy
 8007eee:	f3bf 8f6f 	isb	sy
 8007ef2:	e780      	b.n	8007df6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007ef4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007ef6:	f000 f8a7 	bl	8008048 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007efa:	f000 fcd3 	bl	80088a4 <xTaskResumeAll>
 8007efe:	e77a      	b.n	8007df6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007f00:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007f02:	f000 f8a1 	bl	8008048 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007f06:	f000 fccd 	bl	80088a4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007f0a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007f0c:	f000 f8ee 	bl	80080ec <prvIsQueueEmpty>
 8007f10:	4603      	mov	r3, r0
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	f43f af6f 	beq.w	8007df6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007f18:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007f1a:	4618      	mov	r0, r3
 8007f1c:	3730      	adds	r7, #48	; 0x30
 8007f1e:	46bd      	mov	sp, r7
 8007f20:	bd80      	pop	{r7, pc}
 8007f22:	bf00      	nop
 8007f24:	e000ed04 	.word	0xe000ed04

08007f28 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007f28:	b580      	push	{r7, lr}
 8007f2a:	b086      	sub	sp, #24
 8007f2c:	af00      	add	r7, sp, #0
 8007f2e:	60f8      	str	r0, [r7, #12]
 8007f30:	60b9      	str	r1, [r7, #8]
 8007f32:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007f34:	2300      	movs	r3, #0
 8007f36:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f3c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d10d      	bne.n	8007f62 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d14d      	bne.n	8007fea <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	689b      	ldr	r3, [r3, #8]
 8007f52:	4618      	mov	r0, r3
 8007f54:	f001 f898 	bl	8009088 <xTaskPriorityDisinherit>
 8007f58:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	2200      	movs	r2, #0
 8007f5e:	609a      	str	r2, [r3, #8]
 8007f60:	e043      	b.n	8007fea <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d119      	bne.n	8007f9c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	6858      	ldr	r0, [r3, #4]
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f70:	461a      	mov	r2, r3
 8007f72:	68b9      	ldr	r1, [r7, #8]
 8007f74:	f002 faec 	bl	800a550 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	685a      	ldr	r2, [r3, #4]
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f80:	441a      	add	r2, r3
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	685a      	ldr	r2, [r3, #4]
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	689b      	ldr	r3, [r3, #8]
 8007f8e:	429a      	cmp	r2, r3
 8007f90:	d32b      	bcc.n	8007fea <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	681a      	ldr	r2, [r3, #0]
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	605a      	str	r2, [r3, #4]
 8007f9a:	e026      	b.n	8007fea <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	68d8      	ldr	r0, [r3, #12]
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fa4:	461a      	mov	r2, r3
 8007fa6:	68b9      	ldr	r1, [r7, #8]
 8007fa8:	f002 fad2 	bl	800a550 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	68da      	ldr	r2, [r3, #12]
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fb4:	425b      	negs	r3, r3
 8007fb6:	441a      	add	r2, r3
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	68da      	ldr	r2, [r3, #12]
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	429a      	cmp	r2, r3
 8007fc6:	d207      	bcs.n	8007fd8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	689a      	ldr	r2, [r3, #8]
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fd0:	425b      	negs	r3, r3
 8007fd2:	441a      	add	r2, r3
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	2b02      	cmp	r3, #2
 8007fdc:	d105      	bne.n	8007fea <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007fde:	693b      	ldr	r3, [r7, #16]
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d002      	beq.n	8007fea <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007fe4:	693b      	ldr	r3, [r7, #16]
 8007fe6:	3b01      	subs	r3, #1
 8007fe8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007fea:	693b      	ldr	r3, [r7, #16]
 8007fec:	1c5a      	adds	r2, r3, #1
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8007ff2:	697b      	ldr	r3, [r7, #20]
}
 8007ff4:	4618      	mov	r0, r3
 8007ff6:	3718      	adds	r7, #24
 8007ff8:	46bd      	mov	sp, r7
 8007ffa:	bd80      	pop	{r7, pc}

08007ffc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007ffc:	b580      	push	{r7, lr}
 8007ffe:	b082      	sub	sp, #8
 8008000:	af00      	add	r7, sp, #0
 8008002:	6078      	str	r0, [r7, #4]
 8008004:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800800a:	2b00      	cmp	r3, #0
 800800c:	d018      	beq.n	8008040 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	68da      	ldr	r2, [r3, #12]
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008016:	441a      	add	r2, r3
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	68da      	ldr	r2, [r3, #12]
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	689b      	ldr	r3, [r3, #8]
 8008024:	429a      	cmp	r2, r3
 8008026:	d303      	bcc.n	8008030 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681a      	ldr	r2, [r3, #0]
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	68d9      	ldr	r1, [r3, #12]
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008038:	461a      	mov	r2, r3
 800803a:	6838      	ldr	r0, [r7, #0]
 800803c:	f002 fa88 	bl	800a550 <memcpy>
	}
}
 8008040:	bf00      	nop
 8008042:	3708      	adds	r7, #8
 8008044:	46bd      	mov	sp, r7
 8008046:	bd80      	pop	{r7, pc}

08008048 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008048:	b580      	push	{r7, lr}
 800804a:	b084      	sub	sp, #16
 800804c:	af00      	add	r7, sp, #0
 800804e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008050:	f001 ff48 	bl	8009ee4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800805a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800805c:	e011      	b.n	8008082 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008062:	2b00      	cmp	r3, #0
 8008064:	d012      	beq.n	800808c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	3324      	adds	r3, #36	; 0x24
 800806a:	4618      	mov	r0, r3
 800806c:	f000 fe30 	bl	8008cd0 <xTaskRemoveFromEventList>
 8008070:	4603      	mov	r3, r0
 8008072:	2b00      	cmp	r3, #0
 8008074:	d001      	beq.n	800807a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008076:	f000 ff07 	bl	8008e88 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800807a:	7bfb      	ldrb	r3, [r7, #15]
 800807c:	3b01      	subs	r3, #1
 800807e:	b2db      	uxtb	r3, r3
 8008080:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008082:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008086:	2b00      	cmp	r3, #0
 8008088:	dce9      	bgt.n	800805e <prvUnlockQueue+0x16>
 800808a:	e000      	b.n	800808e <prvUnlockQueue+0x46>
					break;
 800808c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	22ff      	movs	r2, #255	; 0xff
 8008092:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8008096:	f001 ff55 	bl	8009f44 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800809a:	f001 ff23 	bl	8009ee4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80080a4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80080a6:	e011      	b.n	80080cc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	691b      	ldr	r3, [r3, #16]
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d012      	beq.n	80080d6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	3310      	adds	r3, #16
 80080b4:	4618      	mov	r0, r3
 80080b6:	f000 fe0b 	bl	8008cd0 <xTaskRemoveFromEventList>
 80080ba:	4603      	mov	r3, r0
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d001      	beq.n	80080c4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80080c0:	f000 fee2 	bl	8008e88 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80080c4:	7bbb      	ldrb	r3, [r7, #14]
 80080c6:	3b01      	subs	r3, #1
 80080c8:	b2db      	uxtb	r3, r3
 80080ca:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80080cc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	dce9      	bgt.n	80080a8 <prvUnlockQueue+0x60>
 80080d4:	e000      	b.n	80080d8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80080d6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	22ff      	movs	r2, #255	; 0xff
 80080dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80080e0:	f001 ff30 	bl	8009f44 <vPortExitCritical>
}
 80080e4:	bf00      	nop
 80080e6:	3710      	adds	r7, #16
 80080e8:	46bd      	mov	sp, r7
 80080ea:	bd80      	pop	{r7, pc}

080080ec <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80080ec:	b580      	push	{r7, lr}
 80080ee:	b084      	sub	sp, #16
 80080f0:	af00      	add	r7, sp, #0
 80080f2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80080f4:	f001 fef6 	bl	8009ee4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d102      	bne.n	8008106 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008100:	2301      	movs	r3, #1
 8008102:	60fb      	str	r3, [r7, #12]
 8008104:	e001      	b.n	800810a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008106:	2300      	movs	r3, #0
 8008108:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800810a:	f001 ff1b 	bl	8009f44 <vPortExitCritical>

	return xReturn;
 800810e:	68fb      	ldr	r3, [r7, #12]
}
 8008110:	4618      	mov	r0, r3
 8008112:	3710      	adds	r7, #16
 8008114:	46bd      	mov	sp, r7
 8008116:	bd80      	pop	{r7, pc}

08008118 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008118:	b580      	push	{r7, lr}
 800811a:	b084      	sub	sp, #16
 800811c:	af00      	add	r7, sp, #0
 800811e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008120:	f001 fee0 	bl	8009ee4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800812c:	429a      	cmp	r2, r3
 800812e:	d102      	bne.n	8008136 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008130:	2301      	movs	r3, #1
 8008132:	60fb      	str	r3, [r7, #12]
 8008134:	e001      	b.n	800813a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008136:	2300      	movs	r3, #0
 8008138:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800813a:	f001 ff03 	bl	8009f44 <vPortExitCritical>

	return xReturn;
 800813e:	68fb      	ldr	r3, [r7, #12]
}
 8008140:	4618      	mov	r0, r3
 8008142:	3710      	adds	r7, #16
 8008144:	46bd      	mov	sp, r7
 8008146:	bd80      	pop	{r7, pc}

08008148 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008148:	b480      	push	{r7}
 800814a:	b085      	sub	sp, #20
 800814c:	af00      	add	r7, sp, #0
 800814e:	6078      	str	r0, [r7, #4]
 8008150:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008152:	2300      	movs	r3, #0
 8008154:	60fb      	str	r3, [r7, #12]
 8008156:	e014      	b.n	8008182 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008158:	4a0f      	ldr	r2, [pc, #60]	; (8008198 <vQueueAddToRegistry+0x50>)
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008160:	2b00      	cmp	r3, #0
 8008162:	d10b      	bne.n	800817c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008164:	490c      	ldr	r1, [pc, #48]	; (8008198 <vQueueAddToRegistry+0x50>)
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	683a      	ldr	r2, [r7, #0]
 800816a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800816e:	4a0a      	ldr	r2, [pc, #40]	; (8008198 <vQueueAddToRegistry+0x50>)
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	00db      	lsls	r3, r3, #3
 8008174:	4413      	add	r3, r2
 8008176:	687a      	ldr	r2, [r7, #4]
 8008178:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800817a:	e006      	b.n	800818a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	3301      	adds	r3, #1
 8008180:	60fb      	str	r3, [r7, #12]
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	2b07      	cmp	r3, #7
 8008186:	d9e7      	bls.n	8008158 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008188:	bf00      	nop
 800818a:	bf00      	nop
 800818c:	3714      	adds	r7, #20
 800818e:	46bd      	mov	sp, r7
 8008190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008194:	4770      	bx	lr
 8008196:	bf00      	nop
 8008198:	20005944 	.word	0x20005944

0800819c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800819c:	b580      	push	{r7, lr}
 800819e:	b086      	sub	sp, #24
 80081a0:	af00      	add	r7, sp, #0
 80081a2:	60f8      	str	r0, [r7, #12]
 80081a4:	60b9      	str	r1, [r7, #8]
 80081a6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80081ac:	f001 fe9a 	bl	8009ee4 <vPortEnterCritical>
 80081b0:	697b      	ldr	r3, [r7, #20]
 80081b2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80081b6:	b25b      	sxtb	r3, r3
 80081b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80081bc:	d103      	bne.n	80081c6 <vQueueWaitForMessageRestricted+0x2a>
 80081be:	697b      	ldr	r3, [r7, #20]
 80081c0:	2200      	movs	r2, #0
 80081c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80081c6:	697b      	ldr	r3, [r7, #20]
 80081c8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80081cc:	b25b      	sxtb	r3, r3
 80081ce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80081d2:	d103      	bne.n	80081dc <vQueueWaitForMessageRestricted+0x40>
 80081d4:	697b      	ldr	r3, [r7, #20]
 80081d6:	2200      	movs	r2, #0
 80081d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80081dc:	f001 feb2 	bl	8009f44 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80081e0:	697b      	ldr	r3, [r7, #20]
 80081e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d106      	bne.n	80081f6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80081e8:	697b      	ldr	r3, [r7, #20]
 80081ea:	3324      	adds	r3, #36	; 0x24
 80081ec:	687a      	ldr	r2, [r7, #4]
 80081ee:	68b9      	ldr	r1, [r7, #8]
 80081f0:	4618      	mov	r0, r3
 80081f2:	f000 fd41 	bl	8008c78 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80081f6:	6978      	ldr	r0, [r7, #20]
 80081f8:	f7ff ff26 	bl	8008048 <prvUnlockQueue>
	}
 80081fc:	bf00      	nop
 80081fe:	3718      	adds	r7, #24
 8008200:	46bd      	mov	sp, r7
 8008202:	bd80      	pop	{r7, pc}

08008204 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008204:	b580      	push	{r7, lr}
 8008206:	b08e      	sub	sp, #56	; 0x38
 8008208:	af04      	add	r7, sp, #16
 800820a:	60f8      	str	r0, [r7, #12]
 800820c:	60b9      	str	r1, [r7, #8]
 800820e:	607a      	str	r2, [r7, #4]
 8008210:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008212:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008214:	2b00      	cmp	r3, #0
 8008216:	d10a      	bne.n	800822e <xTaskCreateStatic+0x2a>
	__asm volatile
 8008218:	f04f 0350 	mov.w	r3, #80	; 0x50
 800821c:	f383 8811 	msr	BASEPRI, r3
 8008220:	f3bf 8f6f 	isb	sy
 8008224:	f3bf 8f4f 	dsb	sy
 8008228:	623b      	str	r3, [r7, #32]
}
 800822a:	bf00      	nop
 800822c:	e7fe      	b.n	800822c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800822e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008230:	2b00      	cmp	r3, #0
 8008232:	d10a      	bne.n	800824a <xTaskCreateStatic+0x46>
	__asm volatile
 8008234:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008238:	f383 8811 	msr	BASEPRI, r3
 800823c:	f3bf 8f6f 	isb	sy
 8008240:	f3bf 8f4f 	dsb	sy
 8008244:	61fb      	str	r3, [r7, #28]
}
 8008246:	bf00      	nop
 8008248:	e7fe      	b.n	8008248 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800824a:	235c      	movs	r3, #92	; 0x5c
 800824c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800824e:	693b      	ldr	r3, [r7, #16]
 8008250:	2b5c      	cmp	r3, #92	; 0x5c
 8008252:	d00a      	beq.n	800826a <xTaskCreateStatic+0x66>
	__asm volatile
 8008254:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008258:	f383 8811 	msr	BASEPRI, r3
 800825c:	f3bf 8f6f 	isb	sy
 8008260:	f3bf 8f4f 	dsb	sy
 8008264:	61bb      	str	r3, [r7, #24]
}
 8008266:	bf00      	nop
 8008268:	e7fe      	b.n	8008268 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800826a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800826c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800826e:	2b00      	cmp	r3, #0
 8008270:	d01e      	beq.n	80082b0 <xTaskCreateStatic+0xac>
 8008272:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008274:	2b00      	cmp	r3, #0
 8008276:	d01b      	beq.n	80082b0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008278:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800827a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800827c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800827e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008280:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008284:	2202      	movs	r2, #2
 8008286:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800828a:	2300      	movs	r3, #0
 800828c:	9303      	str	r3, [sp, #12]
 800828e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008290:	9302      	str	r3, [sp, #8]
 8008292:	f107 0314 	add.w	r3, r7, #20
 8008296:	9301      	str	r3, [sp, #4]
 8008298:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800829a:	9300      	str	r3, [sp, #0]
 800829c:	683b      	ldr	r3, [r7, #0]
 800829e:	687a      	ldr	r2, [r7, #4]
 80082a0:	68b9      	ldr	r1, [r7, #8]
 80082a2:	68f8      	ldr	r0, [r7, #12]
 80082a4:	f000 f850 	bl	8008348 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80082a8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80082aa:	f000 f8dd 	bl	8008468 <prvAddNewTaskToReadyList>
 80082ae:	e001      	b.n	80082b4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80082b0:	2300      	movs	r3, #0
 80082b2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80082b4:	697b      	ldr	r3, [r7, #20]
	}
 80082b6:	4618      	mov	r0, r3
 80082b8:	3728      	adds	r7, #40	; 0x28
 80082ba:	46bd      	mov	sp, r7
 80082bc:	bd80      	pop	{r7, pc}

080082be <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80082be:	b580      	push	{r7, lr}
 80082c0:	b08c      	sub	sp, #48	; 0x30
 80082c2:	af04      	add	r7, sp, #16
 80082c4:	60f8      	str	r0, [r7, #12]
 80082c6:	60b9      	str	r1, [r7, #8]
 80082c8:	603b      	str	r3, [r7, #0]
 80082ca:	4613      	mov	r3, r2
 80082cc:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80082ce:	88fb      	ldrh	r3, [r7, #6]
 80082d0:	009b      	lsls	r3, r3, #2
 80082d2:	4618      	mov	r0, r3
 80082d4:	f001 ff28 	bl	800a128 <pvPortMalloc>
 80082d8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80082da:	697b      	ldr	r3, [r7, #20]
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d00e      	beq.n	80082fe <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80082e0:	205c      	movs	r0, #92	; 0x5c
 80082e2:	f001 ff21 	bl	800a128 <pvPortMalloc>
 80082e6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80082e8:	69fb      	ldr	r3, [r7, #28]
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d003      	beq.n	80082f6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80082ee:	69fb      	ldr	r3, [r7, #28]
 80082f0:	697a      	ldr	r2, [r7, #20]
 80082f2:	631a      	str	r2, [r3, #48]	; 0x30
 80082f4:	e005      	b.n	8008302 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80082f6:	6978      	ldr	r0, [r7, #20]
 80082f8:	f001 ffe2 	bl	800a2c0 <vPortFree>
 80082fc:	e001      	b.n	8008302 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80082fe:	2300      	movs	r3, #0
 8008300:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008302:	69fb      	ldr	r3, [r7, #28]
 8008304:	2b00      	cmp	r3, #0
 8008306:	d017      	beq.n	8008338 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008308:	69fb      	ldr	r3, [r7, #28]
 800830a:	2200      	movs	r2, #0
 800830c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008310:	88fa      	ldrh	r2, [r7, #6]
 8008312:	2300      	movs	r3, #0
 8008314:	9303      	str	r3, [sp, #12]
 8008316:	69fb      	ldr	r3, [r7, #28]
 8008318:	9302      	str	r3, [sp, #8]
 800831a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800831c:	9301      	str	r3, [sp, #4]
 800831e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008320:	9300      	str	r3, [sp, #0]
 8008322:	683b      	ldr	r3, [r7, #0]
 8008324:	68b9      	ldr	r1, [r7, #8]
 8008326:	68f8      	ldr	r0, [r7, #12]
 8008328:	f000 f80e 	bl	8008348 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800832c:	69f8      	ldr	r0, [r7, #28]
 800832e:	f000 f89b 	bl	8008468 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008332:	2301      	movs	r3, #1
 8008334:	61bb      	str	r3, [r7, #24]
 8008336:	e002      	b.n	800833e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008338:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800833c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800833e:	69bb      	ldr	r3, [r7, #24]
	}
 8008340:	4618      	mov	r0, r3
 8008342:	3720      	adds	r7, #32
 8008344:	46bd      	mov	sp, r7
 8008346:	bd80      	pop	{r7, pc}

08008348 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008348:	b580      	push	{r7, lr}
 800834a:	b088      	sub	sp, #32
 800834c:	af00      	add	r7, sp, #0
 800834e:	60f8      	str	r0, [r7, #12]
 8008350:	60b9      	str	r1, [r7, #8]
 8008352:	607a      	str	r2, [r7, #4]
 8008354:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008356:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008358:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	009b      	lsls	r3, r3, #2
 800835e:	461a      	mov	r2, r3
 8008360:	21a5      	movs	r1, #165	; 0xa5
 8008362:	f002 f903 	bl	800a56c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008366:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008368:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008370:	3b01      	subs	r3, #1
 8008372:	009b      	lsls	r3, r3, #2
 8008374:	4413      	add	r3, r2
 8008376:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008378:	69bb      	ldr	r3, [r7, #24]
 800837a:	f023 0307 	bic.w	r3, r3, #7
 800837e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008380:	69bb      	ldr	r3, [r7, #24]
 8008382:	f003 0307 	and.w	r3, r3, #7
 8008386:	2b00      	cmp	r3, #0
 8008388:	d00a      	beq.n	80083a0 <prvInitialiseNewTask+0x58>
	__asm volatile
 800838a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800838e:	f383 8811 	msr	BASEPRI, r3
 8008392:	f3bf 8f6f 	isb	sy
 8008396:	f3bf 8f4f 	dsb	sy
 800839a:	617b      	str	r3, [r7, #20]
}
 800839c:	bf00      	nop
 800839e:	e7fe      	b.n	800839e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80083a0:	68bb      	ldr	r3, [r7, #8]
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d01f      	beq.n	80083e6 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80083a6:	2300      	movs	r3, #0
 80083a8:	61fb      	str	r3, [r7, #28]
 80083aa:	e012      	b.n	80083d2 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80083ac:	68ba      	ldr	r2, [r7, #8]
 80083ae:	69fb      	ldr	r3, [r7, #28]
 80083b0:	4413      	add	r3, r2
 80083b2:	7819      	ldrb	r1, [r3, #0]
 80083b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80083b6:	69fb      	ldr	r3, [r7, #28]
 80083b8:	4413      	add	r3, r2
 80083ba:	3334      	adds	r3, #52	; 0x34
 80083bc:	460a      	mov	r2, r1
 80083be:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80083c0:	68ba      	ldr	r2, [r7, #8]
 80083c2:	69fb      	ldr	r3, [r7, #28]
 80083c4:	4413      	add	r3, r2
 80083c6:	781b      	ldrb	r3, [r3, #0]
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d006      	beq.n	80083da <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80083cc:	69fb      	ldr	r3, [r7, #28]
 80083ce:	3301      	adds	r3, #1
 80083d0:	61fb      	str	r3, [r7, #28]
 80083d2:	69fb      	ldr	r3, [r7, #28]
 80083d4:	2b0f      	cmp	r3, #15
 80083d6:	d9e9      	bls.n	80083ac <prvInitialiseNewTask+0x64>
 80083d8:	e000      	b.n	80083dc <prvInitialiseNewTask+0x94>
			{
				break;
 80083da:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80083dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083de:	2200      	movs	r2, #0
 80083e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80083e4:	e003      	b.n	80083ee <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80083e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083e8:	2200      	movs	r2, #0
 80083ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80083ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083f0:	2b37      	cmp	r3, #55	; 0x37
 80083f2:	d901      	bls.n	80083f8 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80083f4:	2337      	movs	r3, #55	; 0x37
 80083f6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80083f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80083fc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80083fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008400:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008402:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008404:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008406:	2200      	movs	r2, #0
 8008408:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800840a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800840c:	3304      	adds	r3, #4
 800840e:	4618      	mov	r0, r3
 8008410:	f7ff f978 	bl	8007704 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008414:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008416:	3318      	adds	r3, #24
 8008418:	4618      	mov	r0, r3
 800841a:	f7ff f973 	bl	8007704 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800841e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008420:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008422:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008424:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008426:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800842a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800842c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800842e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008430:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008432:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008434:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008436:	2200      	movs	r2, #0
 8008438:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800843a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800843c:	2200      	movs	r2, #0
 800843e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008442:	683a      	ldr	r2, [r7, #0]
 8008444:	68f9      	ldr	r1, [r7, #12]
 8008446:	69b8      	ldr	r0, [r7, #24]
 8008448:	f001 fc1c 	bl	8009c84 <pxPortInitialiseStack>
 800844c:	4602      	mov	r2, r0
 800844e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008450:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008452:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008454:	2b00      	cmp	r3, #0
 8008456:	d002      	beq.n	800845e <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008458:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800845a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800845c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800845e:	bf00      	nop
 8008460:	3720      	adds	r7, #32
 8008462:	46bd      	mov	sp, r7
 8008464:	bd80      	pop	{r7, pc}
	...

08008468 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008468:	b580      	push	{r7, lr}
 800846a:	b082      	sub	sp, #8
 800846c:	af00      	add	r7, sp, #0
 800846e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008470:	f001 fd38 	bl	8009ee4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008474:	4b2d      	ldr	r3, [pc, #180]	; (800852c <prvAddNewTaskToReadyList+0xc4>)
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	3301      	adds	r3, #1
 800847a:	4a2c      	ldr	r2, [pc, #176]	; (800852c <prvAddNewTaskToReadyList+0xc4>)
 800847c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800847e:	4b2c      	ldr	r3, [pc, #176]	; (8008530 <prvAddNewTaskToReadyList+0xc8>)
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	2b00      	cmp	r3, #0
 8008484:	d109      	bne.n	800849a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008486:	4a2a      	ldr	r2, [pc, #168]	; (8008530 <prvAddNewTaskToReadyList+0xc8>)
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800848c:	4b27      	ldr	r3, [pc, #156]	; (800852c <prvAddNewTaskToReadyList+0xc4>)
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	2b01      	cmp	r3, #1
 8008492:	d110      	bne.n	80084b6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008494:	f000 fd1c 	bl	8008ed0 <prvInitialiseTaskLists>
 8008498:	e00d      	b.n	80084b6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800849a:	4b26      	ldr	r3, [pc, #152]	; (8008534 <prvAddNewTaskToReadyList+0xcc>)
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d109      	bne.n	80084b6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80084a2:	4b23      	ldr	r3, [pc, #140]	; (8008530 <prvAddNewTaskToReadyList+0xc8>)
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084ac:	429a      	cmp	r2, r3
 80084ae:	d802      	bhi.n	80084b6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80084b0:	4a1f      	ldr	r2, [pc, #124]	; (8008530 <prvAddNewTaskToReadyList+0xc8>)
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80084b6:	4b20      	ldr	r3, [pc, #128]	; (8008538 <prvAddNewTaskToReadyList+0xd0>)
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	3301      	adds	r3, #1
 80084bc:	4a1e      	ldr	r2, [pc, #120]	; (8008538 <prvAddNewTaskToReadyList+0xd0>)
 80084be:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80084c0:	4b1d      	ldr	r3, [pc, #116]	; (8008538 <prvAddNewTaskToReadyList+0xd0>)
 80084c2:	681a      	ldr	r2, [r3, #0]
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084cc:	4b1b      	ldr	r3, [pc, #108]	; (800853c <prvAddNewTaskToReadyList+0xd4>)
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	429a      	cmp	r2, r3
 80084d2:	d903      	bls.n	80084dc <prvAddNewTaskToReadyList+0x74>
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084d8:	4a18      	ldr	r2, [pc, #96]	; (800853c <prvAddNewTaskToReadyList+0xd4>)
 80084da:	6013      	str	r3, [r2, #0]
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084e0:	4613      	mov	r3, r2
 80084e2:	009b      	lsls	r3, r3, #2
 80084e4:	4413      	add	r3, r2
 80084e6:	009b      	lsls	r3, r3, #2
 80084e8:	4a15      	ldr	r2, [pc, #84]	; (8008540 <prvAddNewTaskToReadyList+0xd8>)
 80084ea:	441a      	add	r2, r3
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	3304      	adds	r3, #4
 80084f0:	4619      	mov	r1, r3
 80084f2:	4610      	mov	r0, r2
 80084f4:	f7ff f913 	bl	800771e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80084f8:	f001 fd24 	bl	8009f44 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80084fc:	4b0d      	ldr	r3, [pc, #52]	; (8008534 <prvAddNewTaskToReadyList+0xcc>)
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	2b00      	cmp	r3, #0
 8008502:	d00e      	beq.n	8008522 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008504:	4b0a      	ldr	r3, [pc, #40]	; (8008530 <prvAddNewTaskToReadyList+0xc8>)
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800850e:	429a      	cmp	r2, r3
 8008510:	d207      	bcs.n	8008522 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008512:	4b0c      	ldr	r3, [pc, #48]	; (8008544 <prvAddNewTaskToReadyList+0xdc>)
 8008514:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008518:	601a      	str	r2, [r3, #0]
 800851a:	f3bf 8f4f 	dsb	sy
 800851e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008522:	bf00      	nop
 8008524:	3708      	adds	r7, #8
 8008526:	46bd      	mov	sp, r7
 8008528:	bd80      	pop	{r7, pc}
 800852a:	bf00      	nop
 800852c:	20000cb4 	.word	0x20000cb4
 8008530:	200007e0 	.word	0x200007e0
 8008534:	20000cc0 	.word	0x20000cc0
 8008538:	20000cd0 	.word	0x20000cd0
 800853c:	20000cbc 	.word	0x20000cbc
 8008540:	200007e4 	.word	0x200007e4
 8008544:	e000ed04 	.word	0xe000ed04

08008548 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008548:	b580      	push	{r7, lr}
 800854a:	b084      	sub	sp, #16
 800854c:	af00      	add	r7, sp, #0
 800854e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008550:	2300      	movs	r3, #0
 8008552:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	2b00      	cmp	r3, #0
 8008558:	d017      	beq.n	800858a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800855a:	4b13      	ldr	r3, [pc, #76]	; (80085a8 <vTaskDelay+0x60>)
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	2b00      	cmp	r3, #0
 8008560:	d00a      	beq.n	8008578 <vTaskDelay+0x30>
	__asm volatile
 8008562:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008566:	f383 8811 	msr	BASEPRI, r3
 800856a:	f3bf 8f6f 	isb	sy
 800856e:	f3bf 8f4f 	dsb	sy
 8008572:	60bb      	str	r3, [r7, #8]
}
 8008574:	bf00      	nop
 8008576:	e7fe      	b.n	8008576 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008578:	f000 f986 	bl	8008888 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800857c:	2100      	movs	r1, #0
 800857e:	6878      	ldr	r0, [r7, #4]
 8008580:	f000 ffde 	bl	8009540 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008584:	f000 f98e 	bl	80088a4 <xTaskResumeAll>
 8008588:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	2b00      	cmp	r3, #0
 800858e:	d107      	bne.n	80085a0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8008590:	4b06      	ldr	r3, [pc, #24]	; (80085ac <vTaskDelay+0x64>)
 8008592:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008596:	601a      	str	r2, [r3, #0]
 8008598:	f3bf 8f4f 	dsb	sy
 800859c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80085a0:	bf00      	nop
 80085a2:	3710      	adds	r7, #16
 80085a4:	46bd      	mov	sp, r7
 80085a6:	bd80      	pop	{r7, pc}
 80085a8:	20000cdc 	.word	0x20000cdc
 80085ac:	e000ed04 	.word	0xe000ed04

080085b0 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 80085b0:	b580      	push	{r7, lr}
 80085b2:	b084      	sub	sp, #16
 80085b4:	af00      	add	r7, sp, #0
 80085b6:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 80085b8:	f001 fc94 	bl	8009ee4 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d102      	bne.n	80085c8 <vTaskSuspend+0x18>
 80085c2:	4b30      	ldr	r3, [pc, #192]	; (8008684 <vTaskSuspend+0xd4>)
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	e000      	b.n	80085ca <vTaskSuspend+0x1a>
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	3304      	adds	r3, #4
 80085d0:	4618      	mov	r0, r3
 80085d2:	f7ff f901 	bl	80077d8 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d004      	beq.n	80085e8 <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	3318      	adds	r3, #24
 80085e2:	4618      	mov	r0, r3
 80085e4:	f7ff f8f8 	bl	80077d8 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	3304      	adds	r3, #4
 80085ec:	4619      	mov	r1, r3
 80085ee:	4826      	ldr	r0, [pc, #152]	; (8008688 <vTaskSuspend+0xd8>)
 80085f0:	f7ff f895 	bl	800771e <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80085fa:	b2db      	uxtb	r3, r3
 80085fc:	2b01      	cmp	r3, #1
 80085fe:	d103      	bne.n	8008608 <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	2200      	movs	r2, #0
 8008604:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 8008608:	f001 fc9c 	bl	8009f44 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 800860c:	4b1f      	ldr	r3, [pc, #124]	; (800868c <vTaskSuspend+0xdc>)
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	2b00      	cmp	r3, #0
 8008612:	d005      	beq.n	8008620 <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 8008614:	f001 fc66 	bl	8009ee4 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 8008618:	f000 fcf8 	bl	800900c <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 800861c:	f001 fc92 	bl	8009f44 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 8008620:	4b18      	ldr	r3, [pc, #96]	; (8008684 <vTaskSuspend+0xd4>)
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	68fa      	ldr	r2, [r7, #12]
 8008626:	429a      	cmp	r2, r3
 8008628:	d127      	bne.n	800867a <vTaskSuspend+0xca>
		{
			if( xSchedulerRunning != pdFALSE )
 800862a:	4b18      	ldr	r3, [pc, #96]	; (800868c <vTaskSuspend+0xdc>)
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	2b00      	cmp	r3, #0
 8008630:	d017      	beq.n	8008662 <vTaskSuspend+0xb2>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 8008632:	4b17      	ldr	r3, [pc, #92]	; (8008690 <vTaskSuspend+0xe0>)
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	2b00      	cmp	r3, #0
 8008638:	d00a      	beq.n	8008650 <vTaskSuspend+0xa0>
	__asm volatile
 800863a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800863e:	f383 8811 	msr	BASEPRI, r3
 8008642:	f3bf 8f6f 	isb	sy
 8008646:	f3bf 8f4f 	dsb	sy
 800864a:	60bb      	str	r3, [r7, #8]
}
 800864c:	bf00      	nop
 800864e:	e7fe      	b.n	800864e <vTaskSuspend+0x9e>
				portYIELD_WITHIN_API();
 8008650:	4b10      	ldr	r3, [pc, #64]	; (8008694 <vTaskSuspend+0xe4>)
 8008652:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008656:	601a      	str	r2, [r3, #0]
 8008658:	f3bf 8f4f 	dsb	sy
 800865c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008660:	e00b      	b.n	800867a <vTaskSuspend+0xca>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 8008662:	4b09      	ldr	r3, [pc, #36]	; (8008688 <vTaskSuspend+0xd8>)
 8008664:	681a      	ldr	r2, [r3, #0]
 8008666:	4b0c      	ldr	r3, [pc, #48]	; (8008698 <vTaskSuspend+0xe8>)
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	429a      	cmp	r2, r3
 800866c:	d103      	bne.n	8008676 <vTaskSuspend+0xc6>
					pxCurrentTCB = NULL;
 800866e:	4b05      	ldr	r3, [pc, #20]	; (8008684 <vTaskSuspend+0xd4>)
 8008670:	2200      	movs	r2, #0
 8008672:	601a      	str	r2, [r3, #0]
	}
 8008674:	e001      	b.n	800867a <vTaskSuspend+0xca>
					vTaskSwitchContext();
 8008676:	f000 fa7d 	bl	8008b74 <vTaskSwitchContext>
	}
 800867a:	bf00      	nop
 800867c:	3710      	adds	r7, #16
 800867e:	46bd      	mov	sp, r7
 8008680:	bd80      	pop	{r7, pc}
 8008682:	bf00      	nop
 8008684:	200007e0 	.word	0x200007e0
 8008688:	20000ca0 	.word	0x20000ca0
 800868c:	20000cc0 	.word	0x20000cc0
 8008690:	20000cdc 	.word	0x20000cdc
 8008694:	e000ed04 	.word	0xe000ed04
 8008698:	20000cb4 	.word	0x20000cb4

0800869c <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 800869c:	b480      	push	{r7}
 800869e:	b087      	sub	sp, #28
 80086a0:	af00      	add	r7, sp, #0
 80086a2:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 80086a4:	2300      	movs	r3, #0
 80086a6:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d10a      	bne.n	80086c8 <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 80086b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086b6:	f383 8811 	msr	BASEPRI, r3
 80086ba:	f3bf 8f6f 	isb	sy
 80086be:	f3bf 8f4f 	dsb	sy
 80086c2:	60fb      	str	r3, [r7, #12]
}
 80086c4:	bf00      	nop
 80086c6:	e7fe      	b.n	80086c6 <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 80086c8:	693b      	ldr	r3, [r7, #16]
 80086ca:	695b      	ldr	r3, [r3, #20]
 80086cc:	4a0a      	ldr	r2, [pc, #40]	; (80086f8 <prvTaskIsTaskSuspended+0x5c>)
 80086ce:	4293      	cmp	r3, r2
 80086d0:	d10a      	bne.n	80086e8 <prvTaskIsTaskSuspended+0x4c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 80086d2:	693b      	ldr	r3, [r7, #16]
 80086d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086d6:	4a09      	ldr	r2, [pc, #36]	; (80086fc <prvTaskIsTaskSuspended+0x60>)
 80086d8:	4293      	cmp	r3, r2
 80086da:	d005      	beq.n	80086e8 <prvTaskIsTaskSuspended+0x4c>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 80086dc:	693b      	ldr	r3, [r7, #16]
 80086de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d101      	bne.n	80086e8 <prvTaskIsTaskSuspended+0x4c>
				{
					xReturn = pdTRUE;
 80086e4:	2301      	movs	r3, #1
 80086e6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80086e8:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 80086ea:	4618      	mov	r0, r3
 80086ec:	371c      	adds	r7, #28
 80086ee:	46bd      	mov	sp, r7
 80086f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f4:	4770      	bx	lr
 80086f6:	bf00      	nop
 80086f8:	20000ca0 	.word	0x20000ca0
 80086fc:	20000c74 	.word	0x20000c74

08008700 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 8008700:	b580      	push	{r7, lr}
 8008702:	b084      	sub	sp, #16
 8008704:	af00      	add	r7, sp, #0
 8008706:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	2b00      	cmp	r3, #0
 8008710:	d10a      	bne.n	8008728 <vTaskResume+0x28>
	__asm volatile
 8008712:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008716:	f383 8811 	msr	BASEPRI, r3
 800871a:	f3bf 8f6f 	isb	sy
 800871e:	f3bf 8f4f 	dsb	sy
 8008722:	60bb      	str	r3, [r7, #8]
}
 8008724:	bf00      	nop
 8008726:	e7fe      	b.n	8008726 <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 8008728:	4b20      	ldr	r3, [pc, #128]	; (80087ac <vTaskResume+0xac>)
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	68fa      	ldr	r2, [r7, #12]
 800872e:	429a      	cmp	r2, r3
 8008730:	d038      	beq.n	80087a4 <vTaskResume+0xa4>
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	2b00      	cmp	r3, #0
 8008736:	d035      	beq.n	80087a4 <vTaskResume+0xa4>
		{
			taskENTER_CRITICAL();
 8008738:	f001 fbd4 	bl	8009ee4 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 800873c:	68f8      	ldr	r0, [r7, #12]
 800873e:	f7ff ffad 	bl	800869c <prvTaskIsTaskSuspended>
 8008742:	4603      	mov	r3, r0
 8008744:	2b00      	cmp	r3, #0
 8008746:	d02b      	beq.n	80087a0 <vTaskResume+0xa0>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	3304      	adds	r3, #4
 800874c:	4618      	mov	r0, r3
 800874e:	f7ff f843 	bl	80077d8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008756:	4b16      	ldr	r3, [pc, #88]	; (80087b0 <vTaskResume+0xb0>)
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	429a      	cmp	r2, r3
 800875c:	d903      	bls.n	8008766 <vTaskResume+0x66>
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008762:	4a13      	ldr	r2, [pc, #76]	; (80087b0 <vTaskResume+0xb0>)
 8008764:	6013      	str	r3, [r2, #0]
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800876a:	4613      	mov	r3, r2
 800876c:	009b      	lsls	r3, r3, #2
 800876e:	4413      	add	r3, r2
 8008770:	009b      	lsls	r3, r3, #2
 8008772:	4a10      	ldr	r2, [pc, #64]	; (80087b4 <vTaskResume+0xb4>)
 8008774:	441a      	add	r2, r3
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	3304      	adds	r3, #4
 800877a:	4619      	mov	r1, r3
 800877c:	4610      	mov	r0, r2
 800877e:	f7fe ffce 	bl	800771e <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008786:	4b09      	ldr	r3, [pc, #36]	; (80087ac <vTaskResume+0xac>)
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800878c:	429a      	cmp	r2, r3
 800878e:	d307      	bcc.n	80087a0 <vTaskResume+0xa0>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 8008790:	4b09      	ldr	r3, [pc, #36]	; (80087b8 <vTaskResume+0xb8>)
 8008792:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008796:	601a      	str	r2, [r3, #0]
 8008798:	f3bf 8f4f 	dsb	sy
 800879c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 80087a0:	f001 fbd0 	bl	8009f44 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80087a4:	bf00      	nop
 80087a6:	3710      	adds	r7, #16
 80087a8:	46bd      	mov	sp, r7
 80087aa:	bd80      	pop	{r7, pc}
 80087ac:	200007e0 	.word	0x200007e0
 80087b0:	20000cbc 	.word	0x20000cbc
 80087b4:	200007e4 	.word	0x200007e4
 80087b8:	e000ed04 	.word	0xe000ed04

080087bc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80087bc:	b580      	push	{r7, lr}
 80087be:	b08a      	sub	sp, #40	; 0x28
 80087c0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80087c2:	2300      	movs	r3, #0
 80087c4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80087c6:	2300      	movs	r3, #0
 80087c8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80087ca:	463a      	mov	r2, r7
 80087cc:	1d39      	adds	r1, r7, #4
 80087ce:	f107 0308 	add.w	r3, r7, #8
 80087d2:	4618      	mov	r0, r3
 80087d4:	f7fe ff42 	bl	800765c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80087d8:	6839      	ldr	r1, [r7, #0]
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	68ba      	ldr	r2, [r7, #8]
 80087de:	9202      	str	r2, [sp, #8]
 80087e0:	9301      	str	r3, [sp, #4]
 80087e2:	2300      	movs	r3, #0
 80087e4:	9300      	str	r3, [sp, #0]
 80087e6:	2300      	movs	r3, #0
 80087e8:	460a      	mov	r2, r1
 80087ea:	4921      	ldr	r1, [pc, #132]	; (8008870 <vTaskStartScheduler+0xb4>)
 80087ec:	4821      	ldr	r0, [pc, #132]	; (8008874 <vTaskStartScheduler+0xb8>)
 80087ee:	f7ff fd09 	bl	8008204 <xTaskCreateStatic>
 80087f2:	4603      	mov	r3, r0
 80087f4:	4a20      	ldr	r2, [pc, #128]	; (8008878 <vTaskStartScheduler+0xbc>)
 80087f6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80087f8:	4b1f      	ldr	r3, [pc, #124]	; (8008878 <vTaskStartScheduler+0xbc>)
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d002      	beq.n	8008806 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008800:	2301      	movs	r3, #1
 8008802:	617b      	str	r3, [r7, #20]
 8008804:	e001      	b.n	800880a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008806:	2300      	movs	r3, #0
 8008808:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800880a:	697b      	ldr	r3, [r7, #20]
 800880c:	2b01      	cmp	r3, #1
 800880e:	d102      	bne.n	8008816 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008810:	f000 feea 	bl	80095e8 <xTimerCreateTimerTask>
 8008814:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008816:	697b      	ldr	r3, [r7, #20]
 8008818:	2b01      	cmp	r3, #1
 800881a:	d116      	bne.n	800884a <vTaskStartScheduler+0x8e>
	__asm volatile
 800881c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008820:	f383 8811 	msr	BASEPRI, r3
 8008824:	f3bf 8f6f 	isb	sy
 8008828:	f3bf 8f4f 	dsb	sy
 800882c:	613b      	str	r3, [r7, #16]
}
 800882e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008830:	4b12      	ldr	r3, [pc, #72]	; (800887c <vTaskStartScheduler+0xc0>)
 8008832:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008836:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008838:	4b11      	ldr	r3, [pc, #68]	; (8008880 <vTaskStartScheduler+0xc4>)
 800883a:	2201      	movs	r2, #1
 800883c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800883e:	4b11      	ldr	r3, [pc, #68]	; (8008884 <vTaskStartScheduler+0xc8>)
 8008840:	2200      	movs	r2, #0
 8008842:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008844:	f001 faac 	bl	8009da0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008848:	e00e      	b.n	8008868 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800884a:	697b      	ldr	r3, [r7, #20]
 800884c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008850:	d10a      	bne.n	8008868 <vTaskStartScheduler+0xac>
	__asm volatile
 8008852:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008856:	f383 8811 	msr	BASEPRI, r3
 800885a:	f3bf 8f6f 	isb	sy
 800885e:	f3bf 8f4f 	dsb	sy
 8008862:	60fb      	str	r3, [r7, #12]
}
 8008864:	bf00      	nop
 8008866:	e7fe      	b.n	8008866 <vTaskStartScheduler+0xaa>
}
 8008868:	bf00      	nop
 800886a:	3718      	adds	r7, #24
 800886c:	46bd      	mov	sp, r7
 800886e:	bd80      	pop	{r7, pc}
 8008870:	0800bb6c 	.word	0x0800bb6c
 8008874:	08008ea1 	.word	0x08008ea1
 8008878:	20000cd8 	.word	0x20000cd8
 800887c:	20000cd4 	.word	0x20000cd4
 8008880:	20000cc0 	.word	0x20000cc0
 8008884:	20000cb8 	.word	0x20000cb8

08008888 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008888:	b480      	push	{r7}
 800888a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800888c:	4b04      	ldr	r3, [pc, #16]	; (80088a0 <vTaskSuspendAll+0x18>)
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	3301      	adds	r3, #1
 8008892:	4a03      	ldr	r2, [pc, #12]	; (80088a0 <vTaskSuspendAll+0x18>)
 8008894:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8008896:	bf00      	nop
 8008898:	46bd      	mov	sp, r7
 800889a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800889e:	4770      	bx	lr
 80088a0:	20000cdc 	.word	0x20000cdc

080088a4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80088a4:	b580      	push	{r7, lr}
 80088a6:	b084      	sub	sp, #16
 80088a8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80088aa:	2300      	movs	r3, #0
 80088ac:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80088ae:	2300      	movs	r3, #0
 80088b0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80088b2:	4b42      	ldr	r3, [pc, #264]	; (80089bc <xTaskResumeAll+0x118>)
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d10a      	bne.n	80088d0 <xTaskResumeAll+0x2c>
	__asm volatile
 80088ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088be:	f383 8811 	msr	BASEPRI, r3
 80088c2:	f3bf 8f6f 	isb	sy
 80088c6:	f3bf 8f4f 	dsb	sy
 80088ca:	603b      	str	r3, [r7, #0]
}
 80088cc:	bf00      	nop
 80088ce:	e7fe      	b.n	80088ce <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80088d0:	f001 fb08 	bl	8009ee4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80088d4:	4b39      	ldr	r3, [pc, #228]	; (80089bc <xTaskResumeAll+0x118>)
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	3b01      	subs	r3, #1
 80088da:	4a38      	ldr	r2, [pc, #224]	; (80089bc <xTaskResumeAll+0x118>)
 80088dc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80088de:	4b37      	ldr	r3, [pc, #220]	; (80089bc <xTaskResumeAll+0x118>)
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d162      	bne.n	80089ac <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80088e6:	4b36      	ldr	r3, [pc, #216]	; (80089c0 <xTaskResumeAll+0x11c>)
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d05e      	beq.n	80089ac <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80088ee:	e02f      	b.n	8008950 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80088f0:	4b34      	ldr	r3, [pc, #208]	; (80089c4 <xTaskResumeAll+0x120>)
 80088f2:	68db      	ldr	r3, [r3, #12]
 80088f4:	68db      	ldr	r3, [r3, #12]
 80088f6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	3318      	adds	r3, #24
 80088fc:	4618      	mov	r0, r3
 80088fe:	f7fe ff6b 	bl	80077d8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	3304      	adds	r3, #4
 8008906:	4618      	mov	r0, r3
 8008908:	f7fe ff66 	bl	80077d8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008910:	4b2d      	ldr	r3, [pc, #180]	; (80089c8 <xTaskResumeAll+0x124>)
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	429a      	cmp	r2, r3
 8008916:	d903      	bls.n	8008920 <xTaskResumeAll+0x7c>
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800891c:	4a2a      	ldr	r2, [pc, #168]	; (80089c8 <xTaskResumeAll+0x124>)
 800891e:	6013      	str	r3, [r2, #0]
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008924:	4613      	mov	r3, r2
 8008926:	009b      	lsls	r3, r3, #2
 8008928:	4413      	add	r3, r2
 800892a:	009b      	lsls	r3, r3, #2
 800892c:	4a27      	ldr	r2, [pc, #156]	; (80089cc <xTaskResumeAll+0x128>)
 800892e:	441a      	add	r2, r3
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	3304      	adds	r3, #4
 8008934:	4619      	mov	r1, r3
 8008936:	4610      	mov	r0, r2
 8008938:	f7fe fef1 	bl	800771e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008940:	4b23      	ldr	r3, [pc, #140]	; (80089d0 <xTaskResumeAll+0x12c>)
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008946:	429a      	cmp	r2, r3
 8008948:	d302      	bcc.n	8008950 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800894a:	4b22      	ldr	r3, [pc, #136]	; (80089d4 <xTaskResumeAll+0x130>)
 800894c:	2201      	movs	r2, #1
 800894e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008950:	4b1c      	ldr	r3, [pc, #112]	; (80089c4 <xTaskResumeAll+0x120>)
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	2b00      	cmp	r3, #0
 8008956:	d1cb      	bne.n	80088f0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	2b00      	cmp	r3, #0
 800895c:	d001      	beq.n	8008962 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800895e:	f000 fb55 	bl	800900c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008962:	4b1d      	ldr	r3, [pc, #116]	; (80089d8 <xTaskResumeAll+0x134>)
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	2b00      	cmp	r3, #0
 800896c:	d010      	beq.n	8008990 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800896e:	f000 f847 	bl	8008a00 <xTaskIncrementTick>
 8008972:	4603      	mov	r3, r0
 8008974:	2b00      	cmp	r3, #0
 8008976:	d002      	beq.n	800897e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8008978:	4b16      	ldr	r3, [pc, #88]	; (80089d4 <xTaskResumeAll+0x130>)
 800897a:	2201      	movs	r2, #1
 800897c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	3b01      	subs	r3, #1
 8008982:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	2b00      	cmp	r3, #0
 8008988:	d1f1      	bne.n	800896e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800898a:	4b13      	ldr	r3, [pc, #76]	; (80089d8 <xTaskResumeAll+0x134>)
 800898c:	2200      	movs	r2, #0
 800898e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008990:	4b10      	ldr	r3, [pc, #64]	; (80089d4 <xTaskResumeAll+0x130>)
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	2b00      	cmp	r3, #0
 8008996:	d009      	beq.n	80089ac <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008998:	2301      	movs	r3, #1
 800899a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800899c:	4b0f      	ldr	r3, [pc, #60]	; (80089dc <xTaskResumeAll+0x138>)
 800899e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80089a2:	601a      	str	r2, [r3, #0]
 80089a4:	f3bf 8f4f 	dsb	sy
 80089a8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80089ac:	f001 faca 	bl	8009f44 <vPortExitCritical>

	return xAlreadyYielded;
 80089b0:	68bb      	ldr	r3, [r7, #8]
}
 80089b2:	4618      	mov	r0, r3
 80089b4:	3710      	adds	r7, #16
 80089b6:	46bd      	mov	sp, r7
 80089b8:	bd80      	pop	{r7, pc}
 80089ba:	bf00      	nop
 80089bc:	20000cdc 	.word	0x20000cdc
 80089c0:	20000cb4 	.word	0x20000cb4
 80089c4:	20000c74 	.word	0x20000c74
 80089c8:	20000cbc 	.word	0x20000cbc
 80089cc:	200007e4 	.word	0x200007e4
 80089d0:	200007e0 	.word	0x200007e0
 80089d4:	20000cc8 	.word	0x20000cc8
 80089d8:	20000cc4 	.word	0x20000cc4
 80089dc:	e000ed04 	.word	0xe000ed04

080089e0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80089e0:	b480      	push	{r7}
 80089e2:	b083      	sub	sp, #12
 80089e4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80089e6:	4b05      	ldr	r3, [pc, #20]	; (80089fc <xTaskGetTickCount+0x1c>)
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80089ec:	687b      	ldr	r3, [r7, #4]
}
 80089ee:	4618      	mov	r0, r3
 80089f0:	370c      	adds	r7, #12
 80089f2:	46bd      	mov	sp, r7
 80089f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089f8:	4770      	bx	lr
 80089fa:	bf00      	nop
 80089fc:	20000cb8 	.word	0x20000cb8

08008a00 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008a00:	b580      	push	{r7, lr}
 8008a02:	b086      	sub	sp, #24
 8008a04:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008a06:	2300      	movs	r3, #0
 8008a08:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008a0a:	4b4f      	ldr	r3, [pc, #316]	; (8008b48 <xTaskIncrementTick+0x148>)
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	f040 808f 	bne.w	8008b32 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008a14:	4b4d      	ldr	r3, [pc, #308]	; (8008b4c <xTaskIncrementTick+0x14c>)
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	3301      	adds	r3, #1
 8008a1a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008a1c:	4a4b      	ldr	r2, [pc, #300]	; (8008b4c <xTaskIncrementTick+0x14c>)
 8008a1e:	693b      	ldr	r3, [r7, #16]
 8008a20:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008a22:	693b      	ldr	r3, [r7, #16]
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d120      	bne.n	8008a6a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8008a28:	4b49      	ldr	r3, [pc, #292]	; (8008b50 <xTaskIncrementTick+0x150>)
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d00a      	beq.n	8008a48 <xTaskIncrementTick+0x48>
	__asm volatile
 8008a32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a36:	f383 8811 	msr	BASEPRI, r3
 8008a3a:	f3bf 8f6f 	isb	sy
 8008a3e:	f3bf 8f4f 	dsb	sy
 8008a42:	603b      	str	r3, [r7, #0]
}
 8008a44:	bf00      	nop
 8008a46:	e7fe      	b.n	8008a46 <xTaskIncrementTick+0x46>
 8008a48:	4b41      	ldr	r3, [pc, #260]	; (8008b50 <xTaskIncrementTick+0x150>)
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	60fb      	str	r3, [r7, #12]
 8008a4e:	4b41      	ldr	r3, [pc, #260]	; (8008b54 <xTaskIncrementTick+0x154>)
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	4a3f      	ldr	r2, [pc, #252]	; (8008b50 <xTaskIncrementTick+0x150>)
 8008a54:	6013      	str	r3, [r2, #0]
 8008a56:	4a3f      	ldr	r2, [pc, #252]	; (8008b54 <xTaskIncrementTick+0x154>)
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	6013      	str	r3, [r2, #0]
 8008a5c:	4b3e      	ldr	r3, [pc, #248]	; (8008b58 <xTaskIncrementTick+0x158>)
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	3301      	adds	r3, #1
 8008a62:	4a3d      	ldr	r2, [pc, #244]	; (8008b58 <xTaskIncrementTick+0x158>)
 8008a64:	6013      	str	r3, [r2, #0]
 8008a66:	f000 fad1 	bl	800900c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008a6a:	4b3c      	ldr	r3, [pc, #240]	; (8008b5c <xTaskIncrementTick+0x15c>)
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	693a      	ldr	r2, [r7, #16]
 8008a70:	429a      	cmp	r2, r3
 8008a72:	d349      	bcc.n	8008b08 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008a74:	4b36      	ldr	r3, [pc, #216]	; (8008b50 <xTaskIncrementTick+0x150>)
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d104      	bne.n	8008a88 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008a7e:	4b37      	ldr	r3, [pc, #220]	; (8008b5c <xTaskIncrementTick+0x15c>)
 8008a80:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008a84:	601a      	str	r2, [r3, #0]
					break;
 8008a86:	e03f      	b.n	8008b08 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008a88:	4b31      	ldr	r3, [pc, #196]	; (8008b50 <xTaskIncrementTick+0x150>)
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	68db      	ldr	r3, [r3, #12]
 8008a8e:	68db      	ldr	r3, [r3, #12]
 8008a90:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008a92:	68bb      	ldr	r3, [r7, #8]
 8008a94:	685b      	ldr	r3, [r3, #4]
 8008a96:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008a98:	693a      	ldr	r2, [r7, #16]
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	429a      	cmp	r2, r3
 8008a9e:	d203      	bcs.n	8008aa8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008aa0:	4a2e      	ldr	r2, [pc, #184]	; (8008b5c <xTaskIncrementTick+0x15c>)
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008aa6:	e02f      	b.n	8008b08 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008aa8:	68bb      	ldr	r3, [r7, #8]
 8008aaa:	3304      	adds	r3, #4
 8008aac:	4618      	mov	r0, r3
 8008aae:	f7fe fe93 	bl	80077d8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008ab2:	68bb      	ldr	r3, [r7, #8]
 8008ab4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d004      	beq.n	8008ac4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008aba:	68bb      	ldr	r3, [r7, #8]
 8008abc:	3318      	adds	r3, #24
 8008abe:	4618      	mov	r0, r3
 8008ac0:	f7fe fe8a 	bl	80077d8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008ac4:	68bb      	ldr	r3, [r7, #8]
 8008ac6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ac8:	4b25      	ldr	r3, [pc, #148]	; (8008b60 <xTaskIncrementTick+0x160>)
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	429a      	cmp	r2, r3
 8008ace:	d903      	bls.n	8008ad8 <xTaskIncrementTick+0xd8>
 8008ad0:	68bb      	ldr	r3, [r7, #8]
 8008ad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ad4:	4a22      	ldr	r2, [pc, #136]	; (8008b60 <xTaskIncrementTick+0x160>)
 8008ad6:	6013      	str	r3, [r2, #0]
 8008ad8:	68bb      	ldr	r3, [r7, #8]
 8008ada:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008adc:	4613      	mov	r3, r2
 8008ade:	009b      	lsls	r3, r3, #2
 8008ae0:	4413      	add	r3, r2
 8008ae2:	009b      	lsls	r3, r3, #2
 8008ae4:	4a1f      	ldr	r2, [pc, #124]	; (8008b64 <xTaskIncrementTick+0x164>)
 8008ae6:	441a      	add	r2, r3
 8008ae8:	68bb      	ldr	r3, [r7, #8]
 8008aea:	3304      	adds	r3, #4
 8008aec:	4619      	mov	r1, r3
 8008aee:	4610      	mov	r0, r2
 8008af0:	f7fe fe15 	bl	800771e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008af4:	68bb      	ldr	r3, [r7, #8]
 8008af6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008af8:	4b1b      	ldr	r3, [pc, #108]	; (8008b68 <xTaskIncrementTick+0x168>)
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008afe:	429a      	cmp	r2, r3
 8008b00:	d3b8      	bcc.n	8008a74 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8008b02:	2301      	movs	r3, #1
 8008b04:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008b06:	e7b5      	b.n	8008a74 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008b08:	4b17      	ldr	r3, [pc, #92]	; (8008b68 <xTaskIncrementTick+0x168>)
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b0e:	4915      	ldr	r1, [pc, #84]	; (8008b64 <xTaskIncrementTick+0x164>)
 8008b10:	4613      	mov	r3, r2
 8008b12:	009b      	lsls	r3, r3, #2
 8008b14:	4413      	add	r3, r2
 8008b16:	009b      	lsls	r3, r3, #2
 8008b18:	440b      	add	r3, r1
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	2b01      	cmp	r3, #1
 8008b1e:	d901      	bls.n	8008b24 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8008b20:	2301      	movs	r3, #1
 8008b22:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008b24:	4b11      	ldr	r3, [pc, #68]	; (8008b6c <xTaskIncrementTick+0x16c>)
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d007      	beq.n	8008b3c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8008b2c:	2301      	movs	r3, #1
 8008b2e:	617b      	str	r3, [r7, #20]
 8008b30:	e004      	b.n	8008b3c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008b32:	4b0f      	ldr	r3, [pc, #60]	; (8008b70 <xTaskIncrementTick+0x170>)
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	3301      	adds	r3, #1
 8008b38:	4a0d      	ldr	r2, [pc, #52]	; (8008b70 <xTaskIncrementTick+0x170>)
 8008b3a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8008b3c:	697b      	ldr	r3, [r7, #20]
}
 8008b3e:	4618      	mov	r0, r3
 8008b40:	3718      	adds	r7, #24
 8008b42:	46bd      	mov	sp, r7
 8008b44:	bd80      	pop	{r7, pc}
 8008b46:	bf00      	nop
 8008b48:	20000cdc 	.word	0x20000cdc
 8008b4c:	20000cb8 	.word	0x20000cb8
 8008b50:	20000c6c 	.word	0x20000c6c
 8008b54:	20000c70 	.word	0x20000c70
 8008b58:	20000ccc 	.word	0x20000ccc
 8008b5c:	20000cd4 	.word	0x20000cd4
 8008b60:	20000cbc 	.word	0x20000cbc
 8008b64:	200007e4 	.word	0x200007e4
 8008b68:	200007e0 	.word	0x200007e0
 8008b6c:	20000cc8 	.word	0x20000cc8
 8008b70:	20000cc4 	.word	0x20000cc4

08008b74 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008b74:	b480      	push	{r7}
 8008b76:	b085      	sub	sp, #20
 8008b78:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008b7a:	4b28      	ldr	r3, [pc, #160]	; (8008c1c <vTaskSwitchContext+0xa8>)
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d003      	beq.n	8008b8a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008b82:	4b27      	ldr	r3, [pc, #156]	; (8008c20 <vTaskSwitchContext+0xac>)
 8008b84:	2201      	movs	r2, #1
 8008b86:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008b88:	e041      	b.n	8008c0e <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8008b8a:	4b25      	ldr	r3, [pc, #148]	; (8008c20 <vTaskSwitchContext+0xac>)
 8008b8c:	2200      	movs	r2, #0
 8008b8e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008b90:	4b24      	ldr	r3, [pc, #144]	; (8008c24 <vTaskSwitchContext+0xb0>)
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	60fb      	str	r3, [r7, #12]
 8008b96:	e010      	b.n	8008bba <vTaskSwitchContext+0x46>
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d10a      	bne.n	8008bb4 <vTaskSwitchContext+0x40>
	__asm volatile
 8008b9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ba2:	f383 8811 	msr	BASEPRI, r3
 8008ba6:	f3bf 8f6f 	isb	sy
 8008baa:	f3bf 8f4f 	dsb	sy
 8008bae:	607b      	str	r3, [r7, #4]
}
 8008bb0:	bf00      	nop
 8008bb2:	e7fe      	b.n	8008bb2 <vTaskSwitchContext+0x3e>
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	3b01      	subs	r3, #1
 8008bb8:	60fb      	str	r3, [r7, #12]
 8008bba:	491b      	ldr	r1, [pc, #108]	; (8008c28 <vTaskSwitchContext+0xb4>)
 8008bbc:	68fa      	ldr	r2, [r7, #12]
 8008bbe:	4613      	mov	r3, r2
 8008bc0:	009b      	lsls	r3, r3, #2
 8008bc2:	4413      	add	r3, r2
 8008bc4:	009b      	lsls	r3, r3, #2
 8008bc6:	440b      	add	r3, r1
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d0e4      	beq.n	8008b98 <vTaskSwitchContext+0x24>
 8008bce:	68fa      	ldr	r2, [r7, #12]
 8008bd0:	4613      	mov	r3, r2
 8008bd2:	009b      	lsls	r3, r3, #2
 8008bd4:	4413      	add	r3, r2
 8008bd6:	009b      	lsls	r3, r3, #2
 8008bd8:	4a13      	ldr	r2, [pc, #76]	; (8008c28 <vTaskSwitchContext+0xb4>)
 8008bda:	4413      	add	r3, r2
 8008bdc:	60bb      	str	r3, [r7, #8]
 8008bde:	68bb      	ldr	r3, [r7, #8]
 8008be0:	685b      	ldr	r3, [r3, #4]
 8008be2:	685a      	ldr	r2, [r3, #4]
 8008be4:	68bb      	ldr	r3, [r7, #8]
 8008be6:	605a      	str	r2, [r3, #4]
 8008be8:	68bb      	ldr	r3, [r7, #8]
 8008bea:	685a      	ldr	r2, [r3, #4]
 8008bec:	68bb      	ldr	r3, [r7, #8]
 8008bee:	3308      	adds	r3, #8
 8008bf0:	429a      	cmp	r2, r3
 8008bf2:	d104      	bne.n	8008bfe <vTaskSwitchContext+0x8a>
 8008bf4:	68bb      	ldr	r3, [r7, #8]
 8008bf6:	685b      	ldr	r3, [r3, #4]
 8008bf8:	685a      	ldr	r2, [r3, #4]
 8008bfa:	68bb      	ldr	r3, [r7, #8]
 8008bfc:	605a      	str	r2, [r3, #4]
 8008bfe:	68bb      	ldr	r3, [r7, #8]
 8008c00:	685b      	ldr	r3, [r3, #4]
 8008c02:	68db      	ldr	r3, [r3, #12]
 8008c04:	4a09      	ldr	r2, [pc, #36]	; (8008c2c <vTaskSwitchContext+0xb8>)
 8008c06:	6013      	str	r3, [r2, #0]
 8008c08:	4a06      	ldr	r2, [pc, #24]	; (8008c24 <vTaskSwitchContext+0xb0>)
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	6013      	str	r3, [r2, #0]
}
 8008c0e:	bf00      	nop
 8008c10:	3714      	adds	r7, #20
 8008c12:	46bd      	mov	sp, r7
 8008c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c18:	4770      	bx	lr
 8008c1a:	bf00      	nop
 8008c1c:	20000cdc 	.word	0x20000cdc
 8008c20:	20000cc8 	.word	0x20000cc8
 8008c24:	20000cbc 	.word	0x20000cbc
 8008c28:	200007e4 	.word	0x200007e4
 8008c2c:	200007e0 	.word	0x200007e0

08008c30 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008c30:	b580      	push	{r7, lr}
 8008c32:	b084      	sub	sp, #16
 8008c34:	af00      	add	r7, sp, #0
 8008c36:	6078      	str	r0, [r7, #4]
 8008c38:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d10a      	bne.n	8008c56 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8008c40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c44:	f383 8811 	msr	BASEPRI, r3
 8008c48:	f3bf 8f6f 	isb	sy
 8008c4c:	f3bf 8f4f 	dsb	sy
 8008c50:	60fb      	str	r3, [r7, #12]
}
 8008c52:	bf00      	nop
 8008c54:	e7fe      	b.n	8008c54 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008c56:	4b07      	ldr	r3, [pc, #28]	; (8008c74 <vTaskPlaceOnEventList+0x44>)
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	3318      	adds	r3, #24
 8008c5c:	4619      	mov	r1, r3
 8008c5e:	6878      	ldr	r0, [r7, #4]
 8008c60:	f7fe fd81 	bl	8007766 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008c64:	2101      	movs	r1, #1
 8008c66:	6838      	ldr	r0, [r7, #0]
 8008c68:	f000 fc6a 	bl	8009540 <prvAddCurrentTaskToDelayedList>
}
 8008c6c:	bf00      	nop
 8008c6e:	3710      	adds	r7, #16
 8008c70:	46bd      	mov	sp, r7
 8008c72:	bd80      	pop	{r7, pc}
 8008c74:	200007e0 	.word	0x200007e0

08008c78 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008c78:	b580      	push	{r7, lr}
 8008c7a:	b086      	sub	sp, #24
 8008c7c:	af00      	add	r7, sp, #0
 8008c7e:	60f8      	str	r0, [r7, #12]
 8008c80:	60b9      	str	r1, [r7, #8]
 8008c82:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d10a      	bne.n	8008ca0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8008c8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c8e:	f383 8811 	msr	BASEPRI, r3
 8008c92:	f3bf 8f6f 	isb	sy
 8008c96:	f3bf 8f4f 	dsb	sy
 8008c9a:	617b      	str	r3, [r7, #20]
}
 8008c9c:	bf00      	nop
 8008c9e:	e7fe      	b.n	8008c9e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008ca0:	4b0a      	ldr	r3, [pc, #40]	; (8008ccc <vTaskPlaceOnEventListRestricted+0x54>)
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	3318      	adds	r3, #24
 8008ca6:	4619      	mov	r1, r3
 8008ca8:	68f8      	ldr	r0, [r7, #12]
 8008caa:	f7fe fd38 	bl	800771e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d002      	beq.n	8008cba <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8008cb4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008cb8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008cba:	6879      	ldr	r1, [r7, #4]
 8008cbc:	68b8      	ldr	r0, [r7, #8]
 8008cbe:	f000 fc3f 	bl	8009540 <prvAddCurrentTaskToDelayedList>
	}
 8008cc2:	bf00      	nop
 8008cc4:	3718      	adds	r7, #24
 8008cc6:	46bd      	mov	sp, r7
 8008cc8:	bd80      	pop	{r7, pc}
 8008cca:	bf00      	nop
 8008ccc:	200007e0 	.word	0x200007e0

08008cd0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008cd0:	b580      	push	{r7, lr}
 8008cd2:	b086      	sub	sp, #24
 8008cd4:	af00      	add	r7, sp, #0
 8008cd6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	68db      	ldr	r3, [r3, #12]
 8008cdc:	68db      	ldr	r3, [r3, #12]
 8008cde:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008ce0:	693b      	ldr	r3, [r7, #16]
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d10a      	bne.n	8008cfc <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8008ce6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cea:	f383 8811 	msr	BASEPRI, r3
 8008cee:	f3bf 8f6f 	isb	sy
 8008cf2:	f3bf 8f4f 	dsb	sy
 8008cf6:	60fb      	str	r3, [r7, #12]
}
 8008cf8:	bf00      	nop
 8008cfa:	e7fe      	b.n	8008cfa <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008cfc:	693b      	ldr	r3, [r7, #16]
 8008cfe:	3318      	adds	r3, #24
 8008d00:	4618      	mov	r0, r3
 8008d02:	f7fe fd69 	bl	80077d8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008d06:	4b1e      	ldr	r3, [pc, #120]	; (8008d80 <xTaskRemoveFromEventList+0xb0>)
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d11d      	bne.n	8008d4a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008d0e:	693b      	ldr	r3, [r7, #16]
 8008d10:	3304      	adds	r3, #4
 8008d12:	4618      	mov	r0, r3
 8008d14:	f7fe fd60 	bl	80077d8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008d18:	693b      	ldr	r3, [r7, #16]
 8008d1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d1c:	4b19      	ldr	r3, [pc, #100]	; (8008d84 <xTaskRemoveFromEventList+0xb4>)
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	429a      	cmp	r2, r3
 8008d22:	d903      	bls.n	8008d2c <xTaskRemoveFromEventList+0x5c>
 8008d24:	693b      	ldr	r3, [r7, #16]
 8008d26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d28:	4a16      	ldr	r2, [pc, #88]	; (8008d84 <xTaskRemoveFromEventList+0xb4>)
 8008d2a:	6013      	str	r3, [r2, #0]
 8008d2c:	693b      	ldr	r3, [r7, #16]
 8008d2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d30:	4613      	mov	r3, r2
 8008d32:	009b      	lsls	r3, r3, #2
 8008d34:	4413      	add	r3, r2
 8008d36:	009b      	lsls	r3, r3, #2
 8008d38:	4a13      	ldr	r2, [pc, #76]	; (8008d88 <xTaskRemoveFromEventList+0xb8>)
 8008d3a:	441a      	add	r2, r3
 8008d3c:	693b      	ldr	r3, [r7, #16]
 8008d3e:	3304      	adds	r3, #4
 8008d40:	4619      	mov	r1, r3
 8008d42:	4610      	mov	r0, r2
 8008d44:	f7fe fceb 	bl	800771e <vListInsertEnd>
 8008d48:	e005      	b.n	8008d56 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008d4a:	693b      	ldr	r3, [r7, #16]
 8008d4c:	3318      	adds	r3, #24
 8008d4e:	4619      	mov	r1, r3
 8008d50:	480e      	ldr	r0, [pc, #56]	; (8008d8c <xTaskRemoveFromEventList+0xbc>)
 8008d52:	f7fe fce4 	bl	800771e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008d56:	693b      	ldr	r3, [r7, #16]
 8008d58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d5a:	4b0d      	ldr	r3, [pc, #52]	; (8008d90 <xTaskRemoveFromEventList+0xc0>)
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d60:	429a      	cmp	r2, r3
 8008d62:	d905      	bls.n	8008d70 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008d64:	2301      	movs	r3, #1
 8008d66:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008d68:	4b0a      	ldr	r3, [pc, #40]	; (8008d94 <xTaskRemoveFromEventList+0xc4>)
 8008d6a:	2201      	movs	r2, #1
 8008d6c:	601a      	str	r2, [r3, #0]
 8008d6e:	e001      	b.n	8008d74 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8008d70:	2300      	movs	r3, #0
 8008d72:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008d74:	697b      	ldr	r3, [r7, #20]
}
 8008d76:	4618      	mov	r0, r3
 8008d78:	3718      	adds	r7, #24
 8008d7a:	46bd      	mov	sp, r7
 8008d7c:	bd80      	pop	{r7, pc}
 8008d7e:	bf00      	nop
 8008d80:	20000cdc 	.word	0x20000cdc
 8008d84:	20000cbc 	.word	0x20000cbc
 8008d88:	200007e4 	.word	0x200007e4
 8008d8c:	20000c74 	.word	0x20000c74
 8008d90:	200007e0 	.word	0x200007e0
 8008d94:	20000cc8 	.word	0x20000cc8

08008d98 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008d98:	b480      	push	{r7}
 8008d9a:	b083      	sub	sp, #12
 8008d9c:	af00      	add	r7, sp, #0
 8008d9e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008da0:	4b06      	ldr	r3, [pc, #24]	; (8008dbc <vTaskInternalSetTimeOutState+0x24>)
 8008da2:	681a      	ldr	r2, [r3, #0]
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008da8:	4b05      	ldr	r3, [pc, #20]	; (8008dc0 <vTaskInternalSetTimeOutState+0x28>)
 8008daa:	681a      	ldr	r2, [r3, #0]
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	605a      	str	r2, [r3, #4]
}
 8008db0:	bf00      	nop
 8008db2:	370c      	adds	r7, #12
 8008db4:	46bd      	mov	sp, r7
 8008db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dba:	4770      	bx	lr
 8008dbc:	20000ccc 	.word	0x20000ccc
 8008dc0:	20000cb8 	.word	0x20000cb8

08008dc4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008dc4:	b580      	push	{r7, lr}
 8008dc6:	b088      	sub	sp, #32
 8008dc8:	af00      	add	r7, sp, #0
 8008dca:	6078      	str	r0, [r7, #4]
 8008dcc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d10a      	bne.n	8008dea <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8008dd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dd8:	f383 8811 	msr	BASEPRI, r3
 8008ddc:	f3bf 8f6f 	isb	sy
 8008de0:	f3bf 8f4f 	dsb	sy
 8008de4:	613b      	str	r3, [r7, #16]
}
 8008de6:	bf00      	nop
 8008de8:	e7fe      	b.n	8008de8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8008dea:	683b      	ldr	r3, [r7, #0]
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d10a      	bne.n	8008e06 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8008df0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008df4:	f383 8811 	msr	BASEPRI, r3
 8008df8:	f3bf 8f6f 	isb	sy
 8008dfc:	f3bf 8f4f 	dsb	sy
 8008e00:	60fb      	str	r3, [r7, #12]
}
 8008e02:	bf00      	nop
 8008e04:	e7fe      	b.n	8008e04 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8008e06:	f001 f86d 	bl	8009ee4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008e0a:	4b1d      	ldr	r3, [pc, #116]	; (8008e80 <xTaskCheckForTimeOut+0xbc>)
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	685b      	ldr	r3, [r3, #4]
 8008e14:	69ba      	ldr	r2, [r7, #24]
 8008e16:	1ad3      	subs	r3, r2, r3
 8008e18:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008e1a:	683b      	ldr	r3, [r7, #0]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008e22:	d102      	bne.n	8008e2a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008e24:	2300      	movs	r3, #0
 8008e26:	61fb      	str	r3, [r7, #28]
 8008e28:	e023      	b.n	8008e72 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	681a      	ldr	r2, [r3, #0]
 8008e2e:	4b15      	ldr	r3, [pc, #84]	; (8008e84 <xTaskCheckForTimeOut+0xc0>)
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	429a      	cmp	r2, r3
 8008e34:	d007      	beq.n	8008e46 <xTaskCheckForTimeOut+0x82>
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	685b      	ldr	r3, [r3, #4]
 8008e3a:	69ba      	ldr	r2, [r7, #24]
 8008e3c:	429a      	cmp	r2, r3
 8008e3e:	d302      	bcc.n	8008e46 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008e40:	2301      	movs	r3, #1
 8008e42:	61fb      	str	r3, [r7, #28]
 8008e44:	e015      	b.n	8008e72 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008e46:	683b      	ldr	r3, [r7, #0]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	697a      	ldr	r2, [r7, #20]
 8008e4c:	429a      	cmp	r2, r3
 8008e4e:	d20b      	bcs.n	8008e68 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008e50:	683b      	ldr	r3, [r7, #0]
 8008e52:	681a      	ldr	r2, [r3, #0]
 8008e54:	697b      	ldr	r3, [r7, #20]
 8008e56:	1ad2      	subs	r2, r2, r3
 8008e58:	683b      	ldr	r3, [r7, #0]
 8008e5a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008e5c:	6878      	ldr	r0, [r7, #4]
 8008e5e:	f7ff ff9b 	bl	8008d98 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008e62:	2300      	movs	r3, #0
 8008e64:	61fb      	str	r3, [r7, #28]
 8008e66:	e004      	b.n	8008e72 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8008e68:	683b      	ldr	r3, [r7, #0]
 8008e6a:	2200      	movs	r2, #0
 8008e6c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008e6e:	2301      	movs	r3, #1
 8008e70:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008e72:	f001 f867 	bl	8009f44 <vPortExitCritical>

	return xReturn;
 8008e76:	69fb      	ldr	r3, [r7, #28]
}
 8008e78:	4618      	mov	r0, r3
 8008e7a:	3720      	adds	r7, #32
 8008e7c:	46bd      	mov	sp, r7
 8008e7e:	bd80      	pop	{r7, pc}
 8008e80:	20000cb8 	.word	0x20000cb8
 8008e84:	20000ccc 	.word	0x20000ccc

08008e88 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008e88:	b480      	push	{r7}
 8008e8a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008e8c:	4b03      	ldr	r3, [pc, #12]	; (8008e9c <vTaskMissedYield+0x14>)
 8008e8e:	2201      	movs	r2, #1
 8008e90:	601a      	str	r2, [r3, #0]
}
 8008e92:	bf00      	nop
 8008e94:	46bd      	mov	sp, r7
 8008e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e9a:	4770      	bx	lr
 8008e9c:	20000cc8 	.word	0x20000cc8

08008ea0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008ea0:	b580      	push	{r7, lr}
 8008ea2:	b082      	sub	sp, #8
 8008ea4:	af00      	add	r7, sp, #0
 8008ea6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008ea8:	f000 f852 	bl	8008f50 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008eac:	4b06      	ldr	r3, [pc, #24]	; (8008ec8 <prvIdleTask+0x28>)
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	2b01      	cmp	r3, #1
 8008eb2:	d9f9      	bls.n	8008ea8 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008eb4:	4b05      	ldr	r3, [pc, #20]	; (8008ecc <prvIdleTask+0x2c>)
 8008eb6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008eba:	601a      	str	r2, [r3, #0]
 8008ebc:	f3bf 8f4f 	dsb	sy
 8008ec0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008ec4:	e7f0      	b.n	8008ea8 <prvIdleTask+0x8>
 8008ec6:	bf00      	nop
 8008ec8:	200007e4 	.word	0x200007e4
 8008ecc:	e000ed04 	.word	0xe000ed04

08008ed0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008ed0:	b580      	push	{r7, lr}
 8008ed2:	b082      	sub	sp, #8
 8008ed4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008ed6:	2300      	movs	r3, #0
 8008ed8:	607b      	str	r3, [r7, #4]
 8008eda:	e00c      	b.n	8008ef6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008edc:	687a      	ldr	r2, [r7, #4]
 8008ede:	4613      	mov	r3, r2
 8008ee0:	009b      	lsls	r3, r3, #2
 8008ee2:	4413      	add	r3, r2
 8008ee4:	009b      	lsls	r3, r3, #2
 8008ee6:	4a12      	ldr	r2, [pc, #72]	; (8008f30 <prvInitialiseTaskLists+0x60>)
 8008ee8:	4413      	add	r3, r2
 8008eea:	4618      	mov	r0, r3
 8008eec:	f7fe fbea 	bl	80076c4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	3301      	adds	r3, #1
 8008ef4:	607b      	str	r3, [r7, #4]
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	2b37      	cmp	r3, #55	; 0x37
 8008efa:	d9ef      	bls.n	8008edc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008efc:	480d      	ldr	r0, [pc, #52]	; (8008f34 <prvInitialiseTaskLists+0x64>)
 8008efe:	f7fe fbe1 	bl	80076c4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008f02:	480d      	ldr	r0, [pc, #52]	; (8008f38 <prvInitialiseTaskLists+0x68>)
 8008f04:	f7fe fbde 	bl	80076c4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008f08:	480c      	ldr	r0, [pc, #48]	; (8008f3c <prvInitialiseTaskLists+0x6c>)
 8008f0a:	f7fe fbdb 	bl	80076c4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008f0e:	480c      	ldr	r0, [pc, #48]	; (8008f40 <prvInitialiseTaskLists+0x70>)
 8008f10:	f7fe fbd8 	bl	80076c4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008f14:	480b      	ldr	r0, [pc, #44]	; (8008f44 <prvInitialiseTaskLists+0x74>)
 8008f16:	f7fe fbd5 	bl	80076c4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008f1a:	4b0b      	ldr	r3, [pc, #44]	; (8008f48 <prvInitialiseTaskLists+0x78>)
 8008f1c:	4a05      	ldr	r2, [pc, #20]	; (8008f34 <prvInitialiseTaskLists+0x64>)
 8008f1e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008f20:	4b0a      	ldr	r3, [pc, #40]	; (8008f4c <prvInitialiseTaskLists+0x7c>)
 8008f22:	4a05      	ldr	r2, [pc, #20]	; (8008f38 <prvInitialiseTaskLists+0x68>)
 8008f24:	601a      	str	r2, [r3, #0]
}
 8008f26:	bf00      	nop
 8008f28:	3708      	adds	r7, #8
 8008f2a:	46bd      	mov	sp, r7
 8008f2c:	bd80      	pop	{r7, pc}
 8008f2e:	bf00      	nop
 8008f30:	200007e4 	.word	0x200007e4
 8008f34:	20000c44 	.word	0x20000c44
 8008f38:	20000c58 	.word	0x20000c58
 8008f3c:	20000c74 	.word	0x20000c74
 8008f40:	20000c88 	.word	0x20000c88
 8008f44:	20000ca0 	.word	0x20000ca0
 8008f48:	20000c6c 	.word	0x20000c6c
 8008f4c:	20000c70 	.word	0x20000c70

08008f50 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008f50:	b580      	push	{r7, lr}
 8008f52:	b082      	sub	sp, #8
 8008f54:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008f56:	e019      	b.n	8008f8c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008f58:	f000 ffc4 	bl	8009ee4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008f5c:	4b10      	ldr	r3, [pc, #64]	; (8008fa0 <prvCheckTasksWaitingTermination+0x50>)
 8008f5e:	68db      	ldr	r3, [r3, #12]
 8008f60:	68db      	ldr	r3, [r3, #12]
 8008f62:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	3304      	adds	r3, #4
 8008f68:	4618      	mov	r0, r3
 8008f6a:	f7fe fc35 	bl	80077d8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008f6e:	4b0d      	ldr	r3, [pc, #52]	; (8008fa4 <prvCheckTasksWaitingTermination+0x54>)
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	3b01      	subs	r3, #1
 8008f74:	4a0b      	ldr	r2, [pc, #44]	; (8008fa4 <prvCheckTasksWaitingTermination+0x54>)
 8008f76:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008f78:	4b0b      	ldr	r3, [pc, #44]	; (8008fa8 <prvCheckTasksWaitingTermination+0x58>)
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	3b01      	subs	r3, #1
 8008f7e:	4a0a      	ldr	r2, [pc, #40]	; (8008fa8 <prvCheckTasksWaitingTermination+0x58>)
 8008f80:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008f82:	f000 ffdf 	bl	8009f44 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008f86:	6878      	ldr	r0, [r7, #4]
 8008f88:	f000 f810 	bl	8008fac <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008f8c:	4b06      	ldr	r3, [pc, #24]	; (8008fa8 <prvCheckTasksWaitingTermination+0x58>)
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d1e1      	bne.n	8008f58 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008f94:	bf00      	nop
 8008f96:	bf00      	nop
 8008f98:	3708      	adds	r7, #8
 8008f9a:	46bd      	mov	sp, r7
 8008f9c:	bd80      	pop	{r7, pc}
 8008f9e:	bf00      	nop
 8008fa0:	20000c88 	.word	0x20000c88
 8008fa4:	20000cb4 	.word	0x20000cb4
 8008fa8:	20000c9c 	.word	0x20000c9c

08008fac <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008fac:	b580      	push	{r7, lr}
 8008fae:	b084      	sub	sp, #16
 8008fb0:	af00      	add	r7, sp, #0
 8008fb2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d108      	bne.n	8008fd0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008fc2:	4618      	mov	r0, r3
 8008fc4:	f001 f97c 	bl	800a2c0 <vPortFree>
				vPortFree( pxTCB );
 8008fc8:	6878      	ldr	r0, [r7, #4]
 8008fca:	f001 f979 	bl	800a2c0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008fce:	e018      	b.n	8009002 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8008fd6:	2b01      	cmp	r3, #1
 8008fd8:	d103      	bne.n	8008fe2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8008fda:	6878      	ldr	r0, [r7, #4]
 8008fdc:	f001 f970 	bl	800a2c0 <vPortFree>
	}
 8008fe0:	e00f      	b.n	8009002 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8008fe8:	2b02      	cmp	r3, #2
 8008fea:	d00a      	beq.n	8009002 <prvDeleteTCB+0x56>
	__asm volatile
 8008fec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ff0:	f383 8811 	msr	BASEPRI, r3
 8008ff4:	f3bf 8f6f 	isb	sy
 8008ff8:	f3bf 8f4f 	dsb	sy
 8008ffc:	60fb      	str	r3, [r7, #12]
}
 8008ffe:	bf00      	nop
 8009000:	e7fe      	b.n	8009000 <prvDeleteTCB+0x54>
	}
 8009002:	bf00      	nop
 8009004:	3710      	adds	r7, #16
 8009006:	46bd      	mov	sp, r7
 8009008:	bd80      	pop	{r7, pc}
	...

0800900c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800900c:	b480      	push	{r7}
 800900e:	b083      	sub	sp, #12
 8009010:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009012:	4b0c      	ldr	r3, [pc, #48]	; (8009044 <prvResetNextTaskUnblockTime+0x38>)
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	2b00      	cmp	r3, #0
 800901a:	d104      	bne.n	8009026 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800901c:	4b0a      	ldr	r3, [pc, #40]	; (8009048 <prvResetNextTaskUnblockTime+0x3c>)
 800901e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009022:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009024:	e008      	b.n	8009038 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009026:	4b07      	ldr	r3, [pc, #28]	; (8009044 <prvResetNextTaskUnblockTime+0x38>)
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	68db      	ldr	r3, [r3, #12]
 800902c:	68db      	ldr	r3, [r3, #12]
 800902e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	685b      	ldr	r3, [r3, #4]
 8009034:	4a04      	ldr	r2, [pc, #16]	; (8009048 <prvResetNextTaskUnblockTime+0x3c>)
 8009036:	6013      	str	r3, [r2, #0]
}
 8009038:	bf00      	nop
 800903a:	370c      	adds	r7, #12
 800903c:	46bd      	mov	sp, r7
 800903e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009042:	4770      	bx	lr
 8009044:	20000c6c 	.word	0x20000c6c
 8009048:	20000cd4 	.word	0x20000cd4

0800904c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800904c:	b480      	push	{r7}
 800904e:	b083      	sub	sp, #12
 8009050:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009052:	4b0b      	ldr	r3, [pc, #44]	; (8009080 <xTaskGetSchedulerState+0x34>)
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	2b00      	cmp	r3, #0
 8009058:	d102      	bne.n	8009060 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800905a:	2301      	movs	r3, #1
 800905c:	607b      	str	r3, [r7, #4]
 800905e:	e008      	b.n	8009072 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009060:	4b08      	ldr	r3, [pc, #32]	; (8009084 <xTaskGetSchedulerState+0x38>)
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	2b00      	cmp	r3, #0
 8009066:	d102      	bne.n	800906e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009068:	2302      	movs	r3, #2
 800906a:	607b      	str	r3, [r7, #4]
 800906c:	e001      	b.n	8009072 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800906e:	2300      	movs	r3, #0
 8009070:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009072:	687b      	ldr	r3, [r7, #4]
	}
 8009074:	4618      	mov	r0, r3
 8009076:	370c      	adds	r7, #12
 8009078:	46bd      	mov	sp, r7
 800907a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800907e:	4770      	bx	lr
 8009080:	20000cc0 	.word	0x20000cc0
 8009084:	20000cdc 	.word	0x20000cdc

08009088 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009088:	b580      	push	{r7, lr}
 800908a:	b086      	sub	sp, #24
 800908c:	af00      	add	r7, sp, #0
 800908e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009094:	2300      	movs	r3, #0
 8009096:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	2b00      	cmp	r3, #0
 800909c:	d056      	beq.n	800914c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800909e:	4b2e      	ldr	r3, [pc, #184]	; (8009158 <xTaskPriorityDisinherit+0xd0>)
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	693a      	ldr	r2, [r7, #16]
 80090a4:	429a      	cmp	r2, r3
 80090a6:	d00a      	beq.n	80090be <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80090a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090ac:	f383 8811 	msr	BASEPRI, r3
 80090b0:	f3bf 8f6f 	isb	sy
 80090b4:	f3bf 8f4f 	dsb	sy
 80090b8:	60fb      	str	r3, [r7, #12]
}
 80090ba:	bf00      	nop
 80090bc:	e7fe      	b.n	80090bc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80090be:	693b      	ldr	r3, [r7, #16]
 80090c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d10a      	bne.n	80090dc <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80090c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090ca:	f383 8811 	msr	BASEPRI, r3
 80090ce:	f3bf 8f6f 	isb	sy
 80090d2:	f3bf 8f4f 	dsb	sy
 80090d6:	60bb      	str	r3, [r7, #8]
}
 80090d8:	bf00      	nop
 80090da:	e7fe      	b.n	80090da <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80090dc:	693b      	ldr	r3, [r7, #16]
 80090de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80090e0:	1e5a      	subs	r2, r3, #1
 80090e2:	693b      	ldr	r3, [r7, #16]
 80090e4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80090e6:	693b      	ldr	r3, [r7, #16]
 80090e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80090ea:	693b      	ldr	r3, [r7, #16]
 80090ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80090ee:	429a      	cmp	r2, r3
 80090f0:	d02c      	beq.n	800914c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80090f2:	693b      	ldr	r3, [r7, #16]
 80090f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d128      	bne.n	800914c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80090fa:	693b      	ldr	r3, [r7, #16]
 80090fc:	3304      	adds	r3, #4
 80090fe:	4618      	mov	r0, r3
 8009100:	f7fe fb6a 	bl	80077d8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009104:	693b      	ldr	r3, [r7, #16]
 8009106:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009108:	693b      	ldr	r3, [r7, #16]
 800910a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800910c:	693b      	ldr	r3, [r7, #16]
 800910e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009110:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009114:	693b      	ldr	r3, [r7, #16]
 8009116:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009118:	693b      	ldr	r3, [r7, #16]
 800911a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800911c:	4b0f      	ldr	r3, [pc, #60]	; (800915c <xTaskPriorityDisinherit+0xd4>)
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	429a      	cmp	r2, r3
 8009122:	d903      	bls.n	800912c <xTaskPriorityDisinherit+0xa4>
 8009124:	693b      	ldr	r3, [r7, #16]
 8009126:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009128:	4a0c      	ldr	r2, [pc, #48]	; (800915c <xTaskPriorityDisinherit+0xd4>)
 800912a:	6013      	str	r3, [r2, #0]
 800912c:	693b      	ldr	r3, [r7, #16]
 800912e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009130:	4613      	mov	r3, r2
 8009132:	009b      	lsls	r3, r3, #2
 8009134:	4413      	add	r3, r2
 8009136:	009b      	lsls	r3, r3, #2
 8009138:	4a09      	ldr	r2, [pc, #36]	; (8009160 <xTaskPriorityDisinherit+0xd8>)
 800913a:	441a      	add	r2, r3
 800913c:	693b      	ldr	r3, [r7, #16]
 800913e:	3304      	adds	r3, #4
 8009140:	4619      	mov	r1, r3
 8009142:	4610      	mov	r0, r2
 8009144:	f7fe faeb 	bl	800771e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009148:	2301      	movs	r3, #1
 800914a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800914c:	697b      	ldr	r3, [r7, #20]
	}
 800914e:	4618      	mov	r0, r3
 8009150:	3718      	adds	r7, #24
 8009152:	46bd      	mov	sp, r7
 8009154:	bd80      	pop	{r7, pc}
 8009156:	bf00      	nop
 8009158:	200007e0 	.word	0x200007e0
 800915c:	20000cbc 	.word	0x20000cbc
 8009160:	200007e4 	.word	0x200007e4

08009164 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8009164:	b580      	push	{r7, lr}
 8009166:	b086      	sub	sp, #24
 8009168:	af00      	add	r7, sp, #0
 800916a:	60f8      	str	r0, [r7, #12]
 800916c:	60b9      	str	r1, [r7, #8]
 800916e:	607a      	str	r2, [r7, #4]
 8009170:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 8009172:	f000 feb7 	bl	8009ee4 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8009176:	4b26      	ldr	r3, [pc, #152]	; (8009210 <xTaskNotifyWait+0xac>)
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800917e:	b2db      	uxtb	r3, r3
 8009180:	2b02      	cmp	r3, #2
 8009182:	d01a      	beq.n	80091ba <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8009184:	4b22      	ldr	r3, [pc, #136]	; (8009210 <xTaskNotifyWait+0xac>)
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800918a:	68fa      	ldr	r2, [r7, #12]
 800918c:	43d2      	mvns	r2, r2
 800918e:	400a      	ands	r2, r1
 8009190:	655a      	str	r2, [r3, #84]	; 0x54

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8009192:	4b1f      	ldr	r3, [pc, #124]	; (8009210 <xTaskNotifyWait+0xac>)
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	2201      	movs	r2, #1
 8009198:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

				if( xTicksToWait > ( TickType_t ) 0 )
 800919c:	683b      	ldr	r3, [r7, #0]
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d00b      	beq.n	80091ba <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80091a2:	2101      	movs	r1, #1
 80091a4:	6838      	ldr	r0, [r7, #0]
 80091a6:	f000 f9cb 	bl	8009540 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 80091aa:	4b1a      	ldr	r3, [pc, #104]	; (8009214 <xTaskNotifyWait+0xb0>)
 80091ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80091b0:	601a      	str	r2, [r3, #0]
 80091b2:	f3bf 8f4f 	dsb	sy
 80091b6:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 80091ba:	f000 fec3 	bl	8009f44 <vPortExitCritical>

		taskENTER_CRITICAL();
 80091be:	f000 fe91 	bl	8009ee4 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d004      	beq.n	80091d2 <xTaskNotifyWait+0x6e>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 80091c8:	4b11      	ldr	r3, [pc, #68]	; (8009210 <xTaskNotifyWait+0xac>)
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 80091d2:	4b0f      	ldr	r3, [pc, #60]	; (8009210 <xTaskNotifyWait+0xac>)
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80091da:	b2db      	uxtb	r3, r3
 80091dc:	2b02      	cmp	r3, #2
 80091de:	d002      	beq.n	80091e6 <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 80091e0:	2300      	movs	r3, #0
 80091e2:	617b      	str	r3, [r7, #20]
 80091e4:	e008      	b.n	80091f8 <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 80091e6:	4b0a      	ldr	r3, [pc, #40]	; (8009210 <xTaskNotifyWait+0xac>)
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80091ec:	68ba      	ldr	r2, [r7, #8]
 80091ee:	43d2      	mvns	r2, r2
 80091f0:	400a      	ands	r2, r1
 80091f2:	655a      	str	r2, [r3, #84]	; 0x54
				xReturn = pdTRUE;
 80091f4:	2301      	movs	r3, #1
 80091f6:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80091f8:	4b05      	ldr	r3, [pc, #20]	; (8009210 <xTaskNotifyWait+0xac>)
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	2200      	movs	r2, #0
 80091fe:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		}
		taskEXIT_CRITICAL();
 8009202:	f000 fe9f 	bl	8009f44 <vPortExitCritical>

		return xReturn;
 8009206:	697b      	ldr	r3, [r7, #20]
	}
 8009208:	4618      	mov	r0, r3
 800920a:	3718      	adds	r7, #24
 800920c:	46bd      	mov	sp, r7
 800920e:	bd80      	pop	{r7, pc}
 8009210:	200007e0 	.word	0x200007e0
 8009214:	e000ed04 	.word	0xe000ed04

08009218 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8009218:	b580      	push	{r7, lr}
 800921a:	b08a      	sub	sp, #40	; 0x28
 800921c:	af00      	add	r7, sp, #0
 800921e:	60f8      	str	r0, [r7, #12]
 8009220:	60b9      	str	r1, [r7, #8]
 8009222:	603b      	str	r3, [r7, #0]
 8009224:	4613      	mov	r3, r2
 8009226:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8009228:	2301      	movs	r3, #1
 800922a:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	2b00      	cmp	r3, #0
 8009230:	d10a      	bne.n	8009248 <xTaskGenericNotify+0x30>
	__asm volatile
 8009232:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009236:	f383 8811 	msr	BASEPRI, r3
 800923a:	f3bf 8f6f 	isb	sy
 800923e:	f3bf 8f4f 	dsb	sy
 8009242:	61bb      	str	r3, [r7, #24]
}
 8009244:	bf00      	nop
 8009246:	e7fe      	b.n	8009246 <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 800924c:	f000 fe4a 	bl	8009ee4 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8009250:	683b      	ldr	r3, [r7, #0]
 8009252:	2b00      	cmp	r3, #0
 8009254:	d003      	beq.n	800925e <xTaskGenericNotify+0x46>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8009256:	6a3b      	ldr	r3, [r7, #32]
 8009258:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800925a:	683b      	ldr	r3, [r7, #0]
 800925c:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800925e:	6a3b      	ldr	r3, [r7, #32]
 8009260:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8009264:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8009266:	6a3b      	ldr	r3, [r7, #32]
 8009268:	2202      	movs	r2, #2
 800926a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			switch( eAction )
 800926e:	79fb      	ldrb	r3, [r7, #7]
 8009270:	2b04      	cmp	r3, #4
 8009272:	d828      	bhi.n	80092c6 <xTaskGenericNotify+0xae>
 8009274:	a201      	add	r2, pc, #4	; (adr r2, 800927c <xTaskGenericNotify+0x64>)
 8009276:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800927a:	bf00      	nop
 800927c:	080092e7 	.word	0x080092e7
 8009280:	08009291 	.word	0x08009291
 8009284:	0800929f 	.word	0x0800929f
 8009288:	080092ab 	.word	0x080092ab
 800928c:	080092b3 	.word	0x080092b3
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8009290:	6a3b      	ldr	r3, [r7, #32]
 8009292:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009294:	68bb      	ldr	r3, [r7, #8]
 8009296:	431a      	orrs	r2, r3
 8009298:	6a3b      	ldr	r3, [r7, #32]
 800929a:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800929c:	e026      	b.n	80092ec <xTaskGenericNotify+0xd4>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800929e:	6a3b      	ldr	r3, [r7, #32]
 80092a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80092a2:	1c5a      	adds	r2, r3, #1
 80092a4:	6a3b      	ldr	r3, [r7, #32]
 80092a6:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 80092a8:	e020      	b.n	80092ec <xTaskGenericNotify+0xd4>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 80092aa:	6a3b      	ldr	r3, [r7, #32]
 80092ac:	68ba      	ldr	r2, [r7, #8]
 80092ae:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 80092b0:	e01c      	b.n	80092ec <xTaskGenericNotify+0xd4>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80092b2:	7ffb      	ldrb	r3, [r7, #31]
 80092b4:	2b02      	cmp	r3, #2
 80092b6:	d003      	beq.n	80092c0 <xTaskGenericNotify+0xa8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 80092b8:	6a3b      	ldr	r3, [r7, #32]
 80092ba:	68ba      	ldr	r2, [r7, #8]
 80092bc:	655a      	str	r2, [r3, #84]	; 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 80092be:	e015      	b.n	80092ec <xTaskGenericNotify+0xd4>
						xReturn = pdFAIL;
 80092c0:	2300      	movs	r3, #0
 80092c2:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 80092c4:	e012      	b.n	80092ec <xTaskGenericNotify+0xd4>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 80092c6:	6a3b      	ldr	r3, [r7, #32]
 80092c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80092ca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80092ce:	d00c      	beq.n	80092ea <xTaskGenericNotify+0xd2>
	__asm volatile
 80092d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092d4:	f383 8811 	msr	BASEPRI, r3
 80092d8:	f3bf 8f6f 	isb	sy
 80092dc:	f3bf 8f4f 	dsb	sy
 80092e0:	617b      	str	r3, [r7, #20]
}
 80092e2:	bf00      	nop
 80092e4:	e7fe      	b.n	80092e4 <xTaskGenericNotify+0xcc>
					break;
 80092e6:	bf00      	nop
 80092e8:	e000      	b.n	80092ec <xTaskGenericNotify+0xd4>

					break;
 80092ea:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80092ec:	7ffb      	ldrb	r3, [r7, #31]
 80092ee:	2b01      	cmp	r3, #1
 80092f0:	d13a      	bne.n	8009368 <xTaskGenericNotify+0x150>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80092f2:	6a3b      	ldr	r3, [r7, #32]
 80092f4:	3304      	adds	r3, #4
 80092f6:	4618      	mov	r0, r3
 80092f8:	f7fe fa6e 	bl	80077d8 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 80092fc:	6a3b      	ldr	r3, [r7, #32]
 80092fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009300:	4b1d      	ldr	r3, [pc, #116]	; (8009378 <xTaskGenericNotify+0x160>)
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	429a      	cmp	r2, r3
 8009306:	d903      	bls.n	8009310 <xTaskGenericNotify+0xf8>
 8009308:	6a3b      	ldr	r3, [r7, #32]
 800930a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800930c:	4a1a      	ldr	r2, [pc, #104]	; (8009378 <xTaskGenericNotify+0x160>)
 800930e:	6013      	str	r3, [r2, #0]
 8009310:	6a3b      	ldr	r3, [r7, #32]
 8009312:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009314:	4613      	mov	r3, r2
 8009316:	009b      	lsls	r3, r3, #2
 8009318:	4413      	add	r3, r2
 800931a:	009b      	lsls	r3, r3, #2
 800931c:	4a17      	ldr	r2, [pc, #92]	; (800937c <xTaskGenericNotify+0x164>)
 800931e:	441a      	add	r2, r3
 8009320:	6a3b      	ldr	r3, [r7, #32]
 8009322:	3304      	adds	r3, #4
 8009324:	4619      	mov	r1, r3
 8009326:	4610      	mov	r0, r2
 8009328:	f7fe f9f9 	bl	800771e <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800932c:	6a3b      	ldr	r3, [r7, #32]
 800932e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009330:	2b00      	cmp	r3, #0
 8009332:	d00a      	beq.n	800934a <xTaskGenericNotify+0x132>
	__asm volatile
 8009334:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009338:	f383 8811 	msr	BASEPRI, r3
 800933c:	f3bf 8f6f 	isb	sy
 8009340:	f3bf 8f4f 	dsb	sy
 8009344:	613b      	str	r3, [r7, #16]
}
 8009346:	bf00      	nop
 8009348:	e7fe      	b.n	8009348 <xTaskGenericNotify+0x130>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800934a:	6a3b      	ldr	r3, [r7, #32]
 800934c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800934e:	4b0c      	ldr	r3, [pc, #48]	; (8009380 <xTaskGenericNotify+0x168>)
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009354:	429a      	cmp	r2, r3
 8009356:	d907      	bls.n	8009368 <xTaskGenericNotify+0x150>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 8009358:	4b0a      	ldr	r3, [pc, #40]	; (8009384 <xTaskGenericNotify+0x16c>)
 800935a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800935e:	601a      	str	r2, [r3, #0]
 8009360:	f3bf 8f4f 	dsb	sy
 8009364:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8009368:	f000 fdec 	bl	8009f44 <vPortExitCritical>

		return xReturn;
 800936c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800936e:	4618      	mov	r0, r3
 8009370:	3728      	adds	r7, #40	; 0x28
 8009372:	46bd      	mov	sp, r7
 8009374:	bd80      	pop	{r7, pc}
 8009376:	bf00      	nop
 8009378:	20000cbc 	.word	0x20000cbc
 800937c:	200007e4 	.word	0x200007e4
 8009380:	200007e0 	.word	0x200007e0
 8009384:	e000ed04 	.word	0xe000ed04

08009388 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8009388:	b580      	push	{r7, lr}
 800938a:	b08e      	sub	sp, #56	; 0x38
 800938c:	af00      	add	r7, sp, #0
 800938e:	60f8      	str	r0, [r7, #12]
 8009390:	60b9      	str	r1, [r7, #8]
 8009392:	603b      	str	r3, [r7, #0]
 8009394:	4613      	mov	r3, r2
 8009396:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8009398:	2301      	movs	r3, #1
 800939a:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d10a      	bne.n	80093b8 <xTaskGenericNotifyFromISR+0x30>
	__asm volatile
 80093a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093a6:	f383 8811 	msr	BASEPRI, r3
 80093aa:	f3bf 8f6f 	isb	sy
 80093ae:	f3bf 8f4f 	dsb	sy
 80093b2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80093b4:	bf00      	nop
 80093b6:	e7fe      	b.n	80093b6 <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80093b8:	f000 fe76 	bl	800a0a8 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 80093c0:	f3ef 8211 	mrs	r2, BASEPRI
 80093c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093c8:	f383 8811 	msr	BASEPRI, r3
 80093cc:	f3bf 8f6f 	isb	sy
 80093d0:	f3bf 8f4f 	dsb	sy
 80093d4:	623a      	str	r2, [r7, #32]
 80093d6:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 80093d8:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80093da:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 80093dc:	683b      	ldr	r3, [r7, #0]
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d003      	beq.n	80093ea <xTaskGenericNotifyFromISR+0x62>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 80093e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093e4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80093e6:	683b      	ldr	r3, [r7, #0]
 80093e8:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 80093ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093ec:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80093f0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 80093f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093f6:	2202      	movs	r2, #2
 80093f8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			switch( eAction )
 80093fc:	79fb      	ldrb	r3, [r7, #7]
 80093fe:	2b04      	cmp	r3, #4
 8009400:	d828      	bhi.n	8009454 <xTaskGenericNotifyFromISR+0xcc>
 8009402:	a201      	add	r2, pc, #4	; (adr r2, 8009408 <xTaskGenericNotifyFromISR+0x80>)
 8009404:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009408:	08009475 	.word	0x08009475
 800940c:	0800941d 	.word	0x0800941d
 8009410:	0800942b 	.word	0x0800942b
 8009414:	08009437 	.word	0x08009437
 8009418:	0800943f 	.word	0x0800943f
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800941c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800941e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009420:	68bb      	ldr	r3, [r7, #8]
 8009422:	431a      	orrs	r2, r3
 8009424:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009426:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8009428:	e027      	b.n	800947a <xTaskGenericNotifyFromISR+0xf2>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800942a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800942c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800942e:	1c5a      	adds	r2, r3, #1
 8009430:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009432:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8009434:	e021      	b.n	800947a <xTaskGenericNotifyFromISR+0xf2>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8009436:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009438:	68ba      	ldr	r2, [r7, #8]
 800943a:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800943c:	e01d      	b.n	800947a <xTaskGenericNotifyFromISR+0xf2>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800943e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009442:	2b02      	cmp	r3, #2
 8009444:	d003      	beq.n	800944e <xTaskGenericNotifyFromISR+0xc6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8009446:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009448:	68ba      	ldr	r2, [r7, #8]
 800944a:	655a      	str	r2, [r3, #84]	; 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800944c:	e015      	b.n	800947a <xTaskGenericNotifyFromISR+0xf2>
						xReturn = pdFAIL;
 800944e:	2300      	movs	r3, #0
 8009450:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 8009452:	e012      	b.n	800947a <xTaskGenericNotifyFromISR+0xf2>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8009454:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009456:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009458:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800945c:	d00c      	beq.n	8009478 <xTaskGenericNotifyFromISR+0xf0>
	__asm volatile
 800945e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009462:	f383 8811 	msr	BASEPRI, r3
 8009466:	f3bf 8f6f 	isb	sy
 800946a:	f3bf 8f4f 	dsb	sy
 800946e:	61bb      	str	r3, [r7, #24]
}
 8009470:	bf00      	nop
 8009472:	e7fe      	b.n	8009472 <xTaskGenericNotifyFromISR+0xea>
					break;
 8009474:	bf00      	nop
 8009476:	e000      	b.n	800947a <xTaskGenericNotifyFromISR+0xf2>
					break;
 8009478:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800947a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800947e:	2b01      	cmp	r3, #1
 8009480:	d146      	bne.n	8009510 <xTaskGenericNotifyFromISR+0x188>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8009482:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009484:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009486:	2b00      	cmp	r3, #0
 8009488:	d00a      	beq.n	80094a0 <xTaskGenericNotifyFromISR+0x118>
	__asm volatile
 800948a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800948e:	f383 8811 	msr	BASEPRI, r3
 8009492:	f3bf 8f6f 	isb	sy
 8009496:	f3bf 8f4f 	dsb	sy
 800949a:	617b      	str	r3, [r7, #20]
}
 800949c:	bf00      	nop
 800949e:	e7fe      	b.n	800949e <xTaskGenericNotifyFromISR+0x116>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80094a0:	4b21      	ldr	r3, [pc, #132]	; (8009528 <xTaskGenericNotifyFromISR+0x1a0>)
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d11d      	bne.n	80094e4 <xTaskGenericNotifyFromISR+0x15c>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80094a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094aa:	3304      	adds	r3, #4
 80094ac:	4618      	mov	r0, r3
 80094ae:	f7fe f993 	bl	80077d8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80094b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80094b6:	4b1d      	ldr	r3, [pc, #116]	; (800952c <xTaskGenericNotifyFromISR+0x1a4>)
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	429a      	cmp	r2, r3
 80094bc:	d903      	bls.n	80094c6 <xTaskGenericNotifyFromISR+0x13e>
 80094be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094c2:	4a1a      	ldr	r2, [pc, #104]	; (800952c <xTaskGenericNotifyFromISR+0x1a4>)
 80094c4:	6013      	str	r3, [r2, #0]
 80094c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80094ca:	4613      	mov	r3, r2
 80094cc:	009b      	lsls	r3, r3, #2
 80094ce:	4413      	add	r3, r2
 80094d0:	009b      	lsls	r3, r3, #2
 80094d2:	4a17      	ldr	r2, [pc, #92]	; (8009530 <xTaskGenericNotifyFromISR+0x1a8>)
 80094d4:	441a      	add	r2, r3
 80094d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094d8:	3304      	adds	r3, #4
 80094da:	4619      	mov	r1, r3
 80094dc:	4610      	mov	r0, r2
 80094de:	f7fe f91e 	bl	800771e <vListInsertEnd>
 80094e2:	e005      	b.n	80094f0 <xTaskGenericNotifyFromISR+0x168>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 80094e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094e6:	3318      	adds	r3, #24
 80094e8:	4619      	mov	r1, r3
 80094ea:	4812      	ldr	r0, [pc, #72]	; (8009534 <xTaskGenericNotifyFromISR+0x1ac>)
 80094ec:	f7fe f917 	bl	800771e <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80094f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80094f4:	4b10      	ldr	r3, [pc, #64]	; (8009538 <xTaskGenericNotifyFromISR+0x1b0>)
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094fa:	429a      	cmp	r2, r3
 80094fc:	d908      	bls.n	8009510 <xTaskGenericNotifyFromISR+0x188>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 80094fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009500:	2b00      	cmp	r3, #0
 8009502:	d002      	beq.n	800950a <xTaskGenericNotifyFromISR+0x182>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8009504:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009506:	2201      	movs	r2, #1
 8009508:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 800950a:	4b0c      	ldr	r3, [pc, #48]	; (800953c <xTaskGenericNotifyFromISR+0x1b4>)
 800950c:	2201      	movs	r2, #1
 800950e:	601a      	str	r2, [r3, #0]
 8009510:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009512:	613b      	str	r3, [r7, #16]
	__asm volatile
 8009514:	693b      	ldr	r3, [r7, #16]
 8009516:	f383 8811 	msr	BASEPRI, r3
}
 800951a:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 800951c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 800951e:	4618      	mov	r0, r3
 8009520:	3738      	adds	r7, #56	; 0x38
 8009522:	46bd      	mov	sp, r7
 8009524:	bd80      	pop	{r7, pc}
 8009526:	bf00      	nop
 8009528:	20000cdc 	.word	0x20000cdc
 800952c:	20000cbc 	.word	0x20000cbc
 8009530:	200007e4 	.word	0x200007e4
 8009534:	20000c74 	.word	0x20000c74
 8009538:	200007e0 	.word	0x200007e0
 800953c:	20000cc8 	.word	0x20000cc8

08009540 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009540:	b580      	push	{r7, lr}
 8009542:	b084      	sub	sp, #16
 8009544:	af00      	add	r7, sp, #0
 8009546:	6078      	str	r0, [r7, #4]
 8009548:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800954a:	4b21      	ldr	r3, [pc, #132]	; (80095d0 <prvAddCurrentTaskToDelayedList+0x90>)
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009550:	4b20      	ldr	r3, [pc, #128]	; (80095d4 <prvAddCurrentTaskToDelayedList+0x94>)
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	3304      	adds	r3, #4
 8009556:	4618      	mov	r0, r3
 8009558:	f7fe f93e 	bl	80077d8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009562:	d10a      	bne.n	800957a <prvAddCurrentTaskToDelayedList+0x3a>
 8009564:	683b      	ldr	r3, [r7, #0]
 8009566:	2b00      	cmp	r3, #0
 8009568:	d007      	beq.n	800957a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800956a:	4b1a      	ldr	r3, [pc, #104]	; (80095d4 <prvAddCurrentTaskToDelayedList+0x94>)
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	3304      	adds	r3, #4
 8009570:	4619      	mov	r1, r3
 8009572:	4819      	ldr	r0, [pc, #100]	; (80095d8 <prvAddCurrentTaskToDelayedList+0x98>)
 8009574:	f7fe f8d3 	bl	800771e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009578:	e026      	b.n	80095c8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800957a:	68fa      	ldr	r2, [r7, #12]
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	4413      	add	r3, r2
 8009580:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009582:	4b14      	ldr	r3, [pc, #80]	; (80095d4 <prvAddCurrentTaskToDelayedList+0x94>)
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	68ba      	ldr	r2, [r7, #8]
 8009588:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800958a:	68ba      	ldr	r2, [r7, #8]
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	429a      	cmp	r2, r3
 8009590:	d209      	bcs.n	80095a6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009592:	4b12      	ldr	r3, [pc, #72]	; (80095dc <prvAddCurrentTaskToDelayedList+0x9c>)
 8009594:	681a      	ldr	r2, [r3, #0]
 8009596:	4b0f      	ldr	r3, [pc, #60]	; (80095d4 <prvAddCurrentTaskToDelayedList+0x94>)
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	3304      	adds	r3, #4
 800959c:	4619      	mov	r1, r3
 800959e:	4610      	mov	r0, r2
 80095a0:	f7fe f8e1 	bl	8007766 <vListInsert>
}
 80095a4:	e010      	b.n	80095c8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80095a6:	4b0e      	ldr	r3, [pc, #56]	; (80095e0 <prvAddCurrentTaskToDelayedList+0xa0>)
 80095a8:	681a      	ldr	r2, [r3, #0]
 80095aa:	4b0a      	ldr	r3, [pc, #40]	; (80095d4 <prvAddCurrentTaskToDelayedList+0x94>)
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	3304      	adds	r3, #4
 80095b0:	4619      	mov	r1, r3
 80095b2:	4610      	mov	r0, r2
 80095b4:	f7fe f8d7 	bl	8007766 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80095b8:	4b0a      	ldr	r3, [pc, #40]	; (80095e4 <prvAddCurrentTaskToDelayedList+0xa4>)
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	68ba      	ldr	r2, [r7, #8]
 80095be:	429a      	cmp	r2, r3
 80095c0:	d202      	bcs.n	80095c8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80095c2:	4a08      	ldr	r2, [pc, #32]	; (80095e4 <prvAddCurrentTaskToDelayedList+0xa4>)
 80095c4:	68bb      	ldr	r3, [r7, #8]
 80095c6:	6013      	str	r3, [r2, #0]
}
 80095c8:	bf00      	nop
 80095ca:	3710      	adds	r7, #16
 80095cc:	46bd      	mov	sp, r7
 80095ce:	bd80      	pop	{r7, pc}
 80095d0:	20000cb8 	.word	0x20000cb8
 80095d4:	200007e0 	.word	0x200007e0
 80095d8:	20000ca0 	.word	0x20000ca0
 80095dc:	20000c70 	.word	0x20000c70
 80095e0:	20000c6c 	.word	0x20000c6c
 80095e4:	20000cd4 	.word	0x20000cd4

080095e8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80095e8:	b580      	push	{r7, lr}
 80095ea:	b08a      	sub	sp, #40	; 0x28
 80095ec:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80095ee:	2300      	movs	r3, #0
 80095f0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80095f2:	f000 fb07 	bl	8009c04 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80095f6:	4b1c      	ldr	r3, [pc, #112]	; (8009668 <xTimerCreateTimerTask+0x80>)
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d021      	beq.n	8009642 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80095fe:	2300      	movs	r3, #0
 8009600:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009602:	2300      	movs	r3, #0
 8009604:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009606:	1d3a      	adds	r2, r7, #4
 8009608:	f107 0108 	add.w	r1, r7, #8
 800960c:	f107 030c 	add.w	r3, r7, #12
 8009610:	4618      	mov	r0, r3
 8009612:	f7fe f83d 	bl	8007690 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009616:	6879      	ldr	r1, [r7, #4]
 8009618:	68bb      	ldr	r3, [r7, #8]
 800961a:	68fa      	ldr	r2, [r7, #12]
 800961c:	9202      	str	r2, [sp, #8]
 800961e:	9301      	str	r3, [sp, #4]
 8009620:	2302      	movs	r3, #2
 8009622:	9300      	str	r3, [sp, #0]
 8009624:	2300      	movs	r3, #0
 8009626:	460a      	mov	r2, r1
 8009628:	4910      	ldr	r1, [pc, #64]	; (800966c <xTimerCreateTimerTask+0x84>)
 800962a:	4811      	ldr	r0, [pc, #68]	; (8009670 <xTimerCreateTimerTask+0x88>)
 800962c:	f7fe fdea 	bl	8008204 <xTaskCreateStatic>
 8009630:	4603      	mov	r3, r0
 8009632:	4a10      	ldr	r2, [pc, #64]	; (8009674 <xTimerCreateTimerTask+0x8c>)
 8009634:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8009636:	4b0f      	ldr	r3, [pc, #60]	; (8009674 <xTimerCreateTimerTask+0x8c>)
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	2b00      	cmp	r3, #0
 800963c:	d001      	beq.n	8009642 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800963e:	2301      	movs	r3, #1
 8009640:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8009642:	697b      	ldr	r3, [r7, #20]
 8009644:	2b00      	cmp	r3, #0
 8009646:	d10a      	bne.n	800965e <xTimerCreateTimerTask+0x76>
	__asm volatile
 8009648:	f04f 0350 	mov.w	r3, #80	; 0x50
 800964c:	f383 8811 	msr	BASEPRI, r3
 8009650:	f3bf 8f6f 	isb	sy
 8009654:	f3bf 8f4f 	dsb	sy
 8009658:	613b      	str	r3, [r7, #16]
}
 800965a:	bf00      	nop
 800965c:	e7fe      	b.n	800965c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800965e:	697b      	ldr	r3, [r7, #20]
}
 8009660:	4618      	mov	r0, r3
 8009662:	3718      	adds	r7, #24
 8009664:	46bd      	mov	sp, r7
 8009666:	bd80      	pop	{r7, pc}
 8009668:	20000d10 	.word	0x20000d10
 800966c:	0800bb74 	.word	0x0800bb74
 8009670:	080097ad 	.word	0x080097ad
 8009674:	20000d14 	.word	0x20000d14

08009678 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009678:	b580      	push	{r7, lr}
 800967a:	b08a      	sub	sp, #40	; 0x28
 800967c:	af00      	add	r7, sp, #0
 800967e:	60f8      	str	r0, [r7, #12]
 8009680:	60b9      	str	r1, [r7, #8]
 8009682:	607a      	str	r2, [r7, #4]
 8009684:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8009686:	2300      	movs	r3, #0
 8009688:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	2b00      	cmp	r3, #0
 800968e:	d10a      	bne.n	80096a6 <xTimerGenericCommand+0x2e>
	__asm volatile
 8009690:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009694:	f383 8811 	msr	BASEPRI, r3
 8009698:	f3bf 8f6f 	isb	sy
 800969c:	f3bf 8f4f 	dsb	sy
 80096a0:	623b      	str	r3, [r7, #32]
}
 80096a2:	bf00      	nop
 80096a4:	e7fe      	b.n	80096a4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80096a6:	4b1a      	ldr	r3, [pc, #104]	; (8009710 <xTimerGenericCommand+0x98>)
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d02a      	beq.n	8009704 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80096ae:	68bb      	ldr	r3, [r7, #8]
 80096b0:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80096ba:	68bb      	ldr	r3, [r7, #8]
 80096bc:	2b05      	cmp	r3, #5
 80096be:	dc18      	bgt.n	80096f2 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80096c0:	f7ff fcc4 	bl	800904c <xTaskGetSchedulerState>
 80096c4:	4603      	mov	r3, r0
 80096c6:	2b02      	cmp	r3, #2
 80096c8:	d109      	bne.n	80096de <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80096ca:	4b11      	ldr	r3, [pc, #68]	; (8009710 <xTimerGenericCommand+0x98>)
 80096cc:	6818      	ldr	r0, [r3, #0]
 80096ce:	f107 0110 	add.w	r1, r7, #16
 80096d2:	2300      	movs	r3, #0
 80096d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80096d6:	f7fe f9ad 	bl	8007a34 <xQueueGenericSend>
 80096da:	6278      	str	r0, [r7, #36]	; 0x24
 80096dc:	e012      	b.n	8009704 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80096de:	4b0c      	ldr	r3, [pc, #48]	; (8009710 <xTimerGenericCommand+0x98>)
 80096e0:	6818      	ldr	r0, [r3, #0]
 80096e2:	f107 0110 	add.w	r1, r7, #16
 80096e6:	2300      	movs	r3, #0
 80096e8:	2200      	movs	r2, #0
 80096ea:	f7fe f9a3 	bl	8007a34 <xQueueGenericSend>
 80096ee:	6278      	str	r0, [r7, #36]	; 0x24
 80096f0:	e008      	b.n	8009704 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80096f2:	4b07      	ldr	r3, [pc, #28]	; (8009710 <xTimerGenericCommand+0x98>)
 80096f4:	6818      	ldr	r0, [r3, #0]
 80096f6:	f107 0110 	add.w	r1, r7, #16
 80096fa:	2300      	movs	r3, #0
 80096fc:	683a      	ldr	r2, [r7, #0]
 80096fe:	f7fe fa97 	bl	8007c30 <xQueueGenericSendFromISR>
 8009702:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009706:	4618      	mov	r0, r3
 8009708:	3728      	adds	r7, #40	; 0x28
 800970a:	46bd      	mov	sp, r7
 800970c:	bd80      	pop	{r7, pc}
 800970e:	bf00      	nop
 8009710:	20000d10 	.word	0x20000d10

08009714 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009714:	b580      	push	{r7, lr}
 8009716:	b088      	sub	sp, #32
 8009718:	af02      	add	r7, sp, #8
 800971a:	6078      	str	r0, [r7, #4]
 800971c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800971e:	4b22      	ldr	r3, [pc, #136]	; (80097a8 <prvProcessExpiredTimer+0x94>)
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	68db      	ldr	r3, [r3, #12]
 8009724:	68db      	ldr	r3, [r3, #12]
 8009726:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009728:	697b      	ldr	r3, [r7, #20]
 800972a:	3304      	adds	r3, #4
 800972c:	4618      	mov	r0, r3
 800972e:	f7fe f853 	bl	80077d8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009732:	697b      	ldr	r3, [r7, #20]
 8009734:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009738:	f003 0304 	and.w	r3, r3, #4
 800973c:	2b00      	cmp	r3, #0
 800973e:	d022      	beq.n	8009786 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009740:	697b      	ldr	r3, [r7, #20]
 8009742:	699a      	ldr	r2, [r3, #24]
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	18d1      	adds	r1, r2, r3
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	683a      	ldr	r2, [r7, #0]
 800974c:	6978      	ldr	r0, [r7, #20]
 800974e:	f000 f8d1 	bl	80098f4 <prvInsertTimerInActiveList>
 8009752:	4603      	mov	r3, r0
 8009754:	2b00      	cmp	r3, #0
 8009756:	d01f      	beq.n	8009798 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009758:	2300      	movs	r3, #0
 800975a:	9300      	str	r3, [sp, #0]
 800975c:	2300      	movs	r3, #0
 800975e:	687a      	ldr	r2, [r7, #4]
 8009760:	2100      	movs	r1, #0
 8009762:	6978      	ldr	r0, [r7, #20]
 8009764:	f7ff ff88 	bl	8009678 <xTimerGenericCommand>
 8009768:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800976a:	693b      	ldr	r3, [r7, #16]
 800976c:	2b00      	cmp	r3, #0
 800976e:	d113      	bne.n	8009798 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8009770:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009774:	f383 8811 	msr	BASEPRI, r3
 8009778:	f3bf 8f6f 	isb	sy
 800977c:	f3bf 8f4f 	dsb	sy
 8009780:	60fb      	str	r3, [r7, #12]
}
 8009782:	bf00      	nop
 8009784:	e7fe      	b.n	8009784 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009786:	697b      	ldr	r3, [r7, #20]
 8009788:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800978c:	f023 0301 	bic.w	r3, r3, #1
 8009790:	b2da      	uxtb	r2, r3
 8009792:	697b      	ldr	r3, [r7, #20]
 8009794:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009798:	697b      	ldr	r3, [r7, #20]
 800979a:	6a1b      	ldr	r3, [r3, #32]
 800979c:	6978      	ldr	r0, [r7, #20]
 800979e:	4798      	blx	r3
}
 80097a0:	bf00      	nop
 80097a2:	3718      	adds	r7, #24
 80097a4:	46bd      	mov	sp, r7
 80097a6:	bd80      	pop	{r7, pc}
 80097a8:	20000d08 	.word	0x20000d08

080097ac <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80097ac:	b580      	push	{r7, lr}
 80097ae:	b084      	sub	sp, #16
 80097b0:	af00      	add	r7, sp, #0
 80097b2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80097b4:	f107 0308 	add.w	r3, r7, #8
 80097b8:	4618      	mov	r0, r3
 80097ba:	f000 f857 	bl	800986c <prvGetNextExpireTime>
 80097be:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80097c0:	68bb      	ldr	r3, [r7, #8]
 80097c2:	4619      	mov	r1, r3
 80097c4:	68f8      	ldr	r0, [r7, #12]
 80097c6:	f000 f803 	bl	80097d0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80097ca:	f000 f8d5 	bl	8009978 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80097ce:	e7f1      	b.n	80097b4 <prvTimerTask+0x8>

080097d0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80097d0:	b580      	push	{r7, lr}
 80097d2:	b084      	sub	sp, #16
 80097d4:	af00      	add	r7, sp, #0
 80097d6:	6078      	str	r0, [r7, #4]
 80097d8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80097da:	f7ff f855 	bl	8008888 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80097de:	f107 0308 	add.w	r3, r7, #8
 80097e2:	4618      	mov	r0, r3
 80097e4:	f000 f866 	bl	80098b4 <prvSampleTimeNow>
 80097e8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80097ea:	68bb      	ldr	r3, [r7, #8]
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d130      	bne.n	8009852 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80097f0:	683b      	ldr	r3, [r7, #0]
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d10a      	bne.n	800980c <prvProcessTimerOrBlockTask+0x3c>
 80097f6:	687a      	ldr	r2, [r7, #4]
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	429a      	cmp	r2, r3
 80097fc:	d806      	bhi.n	800980c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80097fe:	f7ff f851 	bl	80088a4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009802:	68f9      	ldr	r1, [r7, #12]
 8009804:	6878      	ldr	r0, [r7, #4]
 8009806:	f7ff ff85 	bl	8009714 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800980a:	e024      	b.n	8009856 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800980c:	683b      	ldr	r3, [r7, #0]
 800980e:	2b00      	cmp	r3, #0
 8009810:	d008      	beq.n	8009824 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009812:	4b13      	ldr	r3, [pc, #76]	; (8009860 <prvProcessTimerOrBlockTask+0x90>)
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	2b00      	cmp	r3, #0
 800981a:	d101      	bne.n	8009820 <prvProcessTimerOrBlockTask+0x50>
 800981c:	2301      	movs	r3, #1
 800981e:	e000      	b.n	8009822 <prvProcessTimerOrBlockTask+0x52>
 8009820:	2300      	movs	r3, #0
 8009822:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009824:	4b0f      	ldr	r3, [pc, #60]	; (8009864 <prvProcessTimerOrBlockTask+0x94>)
 8009826:	6818      	ldr	r0, [r3, #0]
 8009828:	687a      	ldr	r2, [r7, #4]
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	1ad3      	subs	r3, r2, r3
 800982e:	683a      	ldr	r2, [r7, #0]
 8009830:	4619      	mov	r1, r3
 8009832:	f7fe fcb3 	bl	800819c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009836:	f7ff f835 	bl	80088a4 <xTaskResumeAll>
 800983a:	4603      	mov	r3, r0
 800983c:	2b00      	cmp	r3, #0
 800983e:	d10a      	bne.n	8009856 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009840:	4b09      	ldr	r3, [pc, #36]	; (8009868 <prvProcessTimerOrBlockTask+0x98>)
 8009842:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009846:	601a      	str	r2, [r3, #0]
 8009848:	f3bf 8f4f 	dsb	sy
 800984c:	f3bf 8f6f 	isb	sy
}
 8009850:	e001      	b.n	8009856 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8009852:	f7ff f827 	bl	80088a4 <xTaskResumeAll>
}
 8009856:	bf00      	nop
 8009858:	3710      	adds	r7, #16
 800985a:	46bd      	mov	sp, r7
 800985c:	bd80      	pop	{r7, pc}
 800985e:	bf00      	nop
 8009860:	20000d0c 	.word	0x20000d0c
 8009864:	20000d10 	.word	0x20000d10
 8009868:	e000ed04 	.word	0xe000ed04

0800986c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800986c:	b480      	push	{r7}
 800986e:	b085      	sub	sp, #20
 8009870:	af00      	add	r7, sp, #0
 8009872:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009874:	4b0e      	ldr	r3, [pc, #56]	; (80098b0 <prvGetNextExpireTime+0x44>)
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	2b00      	cmp	r3, #0
 800987c:	d101      	bne.n	8009882 <prvGetNextExpireTime+0x16>
 800987e:	2201      	movs	r2, #1
 8009880:	e000      	b.n	8009884 <prvGetNextExpireTime+0x18>
 8009882:	2200      	movs	r2, #0
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	2b00      	cmp	r3, #0
 800988e:	d105      	bne.n	800989c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009890:	4b07      	ldr	r3, [pc, #28]	; (80098b0 <prvGetNextExpireTime+0x44>)
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	68db      	ldr	r3, [r3, #12]
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	60fb      	str	r3, [r7, #12]
 800989a:	e001      	b.n	80098a0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800989c:	2300      	movs	r3, #0
 800989e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80098a0:	68fb      	ldr	r3, [r7, #12]
}
 80098a2:	4618      	mov	r0, r3
 80098a4:	3714      	adds	r7, #20
 80098a6:	46bd      	mov	sp, r7
 80098a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ac:	4770      	bx	lr
 80098ae:	bf00      	nop
 80098b0:	20000d08 	.word	0x20000d08

080098b4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80098b4:	b580      	push	{r7, lr}
 80098b6:	b084      	sub	sp, #16
 80098b8:	af00      	add	r7, sp, #0
 80098ba:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80098bc:	f7ff f890 	bl	80089e0 <xTaskGetTickCount>
 80098c0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80098c2:	4b0b      	ldr	r3, [pc, #44]	; (80098f0 <prvSampleTimeNow+0x3c>)
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	68fa      	ldr	r2, [r7, #12]
 80098c8:	429a      	cmp	r2, r3
 80098ca:	d205      	bcs.n	80098d8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80098cc:	f000 f936 	bl	8009b3c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	2201      	movs	r2, #1
 80098d4:	601a      	str	r2, [r3, #0]
 80098d6:	e002      	b.n	80098de <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	2200      	movs	r2, #0
 80098dc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80098de:	4a04      	ldr	r2, [pc, #16]	; (80098f0 <prvSampleTimeNow+0x3c>)
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80098e4:	68fb      	ldr	r3, [r7, #12]
}
 80098e6:	4618      	mov	r0, r3
 80098e8:	3710      	adds	r7, #16
 80098ea:	46bd      	mov	sp, r7
 80098ec:	bd80      	pop	{r7, pc}
 80098ee:	bf00      	nop
 80098f0:	20000d18 	.word	0x20000d18

080098f4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80098f4:	b580      	push	{r7, lr}
 80098f6:	b086      	sub	sp, #24
 80098f8:	af00      	add	r7, sp, #0
 80098fa:	60f8      	str	r0, [r7, #12]
 80098fc:	60b9      	str	r1, [r7, #8]
 80098fe:	607a      	str	r2, [r7, #4]
 8009900:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8009902:	2300      	movs	r3, #0
 8009904:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	68ba      	ldr	r2, [r7, #8]
 800990a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	68fa      	ldr	r2, [r7, #12]
 8009910:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009912:	68ba      	ldr	r2, [r7, #8]
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	429a      	cmp	r2, r3
 8009918:	d812      	bhi.n	8009940 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800991a:	687a      	ldr	r2, [r7, #4]
 800991c:	683b      	ldr	r3, [r7, #0]
 800991e:	1ad2      	subs	r2, r2, r3
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	699b      	ldr	r3, [r3, #24]
 8009924:	429a      	cmp	r2, r3
 8009926:	d302      	bcc.n	800992e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009928:	2301      	movs	r3, #1
 800992a:	617b      	str	r3, [r7, #20]
 800992c:	e01b      	b.n	8009966 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800992e:	4b10      	ldr	r3, [pc, #64]	; (8009970 <prvInsertTimerInActiveList+0x7c>)
 8009930:	681a      	ldr	r2, [r3, #0]
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	3304      	adds	r3, #4
 8009936:	4619      	mov	r1, r3
 8009938:	4610      	mov	r0, r2
 800993a:	f7fd ff14 	bl	8007766 <vListInsert>
 800993e:	e012      	b.n	8009966 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009940:	687a      	ldr	r2, [r7, #4]
 8009942:	683b      	ldr	r3, [r7, #0]
 8009944:	429a      	cmp	r2, r3
 8009946:	d206      	bcs.n	8009956 <prvInsertTimerInActiveList+0x62>
 8009948:	68ba      	ldr	r2, [r7, #8]
 800994a:	683b      	ldr	r3, [r7, #0]
 800994c:	429a      	cmp	r2, r3
 800994e:	d302      	bcc.n	8009956 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009950:	2301      	movs	r3, #1
 8009952:	617b      	str	r3, [r7, #20]
 8009954:	e007      	b.n	8009966 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009956:	4b07      	ldr	r3, [pc, #28]	; (8009974 <prvInsertTimerInActiveList+0x80>)
 8009958:	681a      	ldr	r2, [r3, #0]
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	3304      	adds	r3, #4
 800995e:	4619      	mov	r1, r3
 8009960:	4610      	mov	r0, r2
 8009962:	f7fd ff00 	bl	8007766 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8009966:	697b      	ldr	r3, [r7, #20]
}
 8009968:	4618      	mov	r0, r3
 800996a:	3718      	adds	r7, #24
 800996c:	46bd      	mov	sp, r7
 800996e:	bd80      	pop	{r7, pc}
 8009970:	20000d0c 	.word	0x20000d0c
 8009974:	20000d08 	.word	0x20000d08

08009978 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009978:	b580      	push	{r7, lr}
 800997a:	b08e      	sub	sp, #56	; 0x38
 800997c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800997e:	e0ca      	b.n	8009b16 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	2b00      	cmp	r3, #0
 8009984:	da18      	bge.n	80099b8 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8009986:	1d3b      	adds	r3, r7, #4
 8009988:	3304      	adds	r3, #4
 800998a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800998c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800998e:	2b00      	cmp	r3, #0
 8009990:	d10a      	bne.n	80099a8 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8009992:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009996:	f383 8811 	msr	BASEPRI, r3
 800999a:	f3bf 8f6f 	isb	sy
 800999e:	f3bf 8f4f 	dsb	sy
 80099a2:	61fb      	str	r3, [r7, #28]
}
 80099a4:	bf00      	nop
 80099a6:	e7fe      	b.n	80099a6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80099a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80099ae:	6850      	ldr	r0, [r2, #4]
 80099b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80099b2:	6892      	ldr	r2, [r2, #8]
 80099b4:	4611      	mov	r1, r2
 80099b6:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	f2c0 80aa 	blt.w	8009b14 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80099c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099c6:	695b      	ldr	r3, [r3, #20]
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	d004      	beq.n	80099d6 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80099cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099ce:	3304      	adds	r3, #4
 80099d0:	4618      	mov	r0, r3
 80099d2:	f7fd ff01 	bl	80077d8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80099d6:	463b      	mov	r3, r7
 80099d8:	4618      	mov	r0, r3
 80099da:	f7ff ff6b 	bl	80098b4 <prvSampleTimeNow>
 80099de:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	2b09      	cmp	r3, #9
 80099e4:	f200 8097 	bhi.w	8009b16 <prvProcessReceivedCommands+0x19e>
 80099e8:	a201      	add	r2, pc, #4	; (adr r2, 80099f0 <prvProcessReceivedCommands+0x78>)
 80099ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099ee:	bf00      	nop
 80099f0:	08009a19 	.word	0x08009a19
 80099f4:	08009a19 	.word	0x08009a19
 80099f8:	08009a19 	.word	0x08009a19
 80099fc:	08009a8d 	.word	0x08009a8d
 8009a00:	08009aa1 	.word	0x08009aa1
 8009a04:	08009aeb 	.word	0x08009aeb
 8009a08:	08009a19 	.word	0x08009a19
 8009a0c:	08009a19 	.word	0x08009a19
 8009a10:	08009a8d 	.word	0x08009a8d
 8009a14:	08009aa1 	.word	0x08009aa1
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009a18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a1a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009a1e:	f043 0301 	orr.w	r3, r3, #1
 8009a22:	b2da      	uxtb	r2, r3
 8009a24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a26:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009a2a:	68ba      	ldr	r2, [r7, #8]
 8009a2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a2e:	699b      	ldr	r3, [r3, #24]
 8009a30:	18d1      	adds	r1, r2, r3
 8009a32:	68bb      	ldr	r3, [r7, #8]
 8009a34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009a36:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009a38:	f7ff ff5c 	bl	80098f4 <prvInsertTimerInActiveList>
 8009a3c:	4603      	mov	r3, r0
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	d069      	beq.n	8009b16 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009a42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a44:	6a1b      	ldr	r3, [r3, #32]
 8009a46:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009a48:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009a4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a4c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009a50:	f003 0304 	and.w	r3, r3, #4
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d05e      	beq.n	8009b16 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009a58:	68ba      	ldr	r2, [r7, #8]
 8009a5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a5c:	699b      	ldr	r3, [r3, #24]
 8009a5e:	441a      	add	r2, r3
 8009a60:	2300      	movs	r3, #0
 8009a62:	9300      	str	r3, [sp, #0]
 8009a64:	2300      	movs	r3, #0
 8009a66:	2100      	movs	r1, #0
 8009a68:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009a6a:	f7ff fe05 	bl	8009678 <xTimerGenericCommand>
 8009a6e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009a70:	6a3b      	ldr	r3, [r7, #32]
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d14f      	bne.n	8009b16 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8009a76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a7a:	f383 8811 	msr	BASEPRI, r3
 8009a7e:	f3bf 8f6f 	isb	sy
 8009a82:	f3bf 8f4f 	dsb	sy
 8009a86:	61bb      	str	r3, [r7, #24]
}
 8009a88:	bf00      	nop
 8009a8a:	e7fe      	b.n	8009a8a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009a8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a8e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009a92:	f023 0301 	bic.w	r3, r3, #1
 8009a96:	b2da      	uxtb	r2, r3
 8009a98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a9a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8009a9e:	e03a      	b.n	8009b16 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009aa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009aa2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009aa6:	f043 0301 	orr.w	r3, r3, #1
 8009aaa:	b2da      	uxtb	r2, r3
 8009aac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009aae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009ab2:	68ba      	ldr	r2, [r7, #8]
 8009ab4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ab6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009ab8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009aba:	699b      	ldr	r3, [r3, #24]
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d10a      	bne.n	8009ad6 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8009ac0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ac4:	f383 8811 	msr	BASEPRI, r3
 8009ac8:	f3bf 8f6f 	isb	sy
 8009acc:	f3bf 8f4f 	dsb	sy
 8009ad0:	617b      	str	r3, [r7, #20]
}
 8009ad2:	bf00      	nop
 8009ad4:	e7fe      	b.n	8009ad4 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009ad6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ad8:	699a      	ldr	r2, [r3, #24]
 8009ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009adc:	18d1      	adds	r1, r2, r3
 8009ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ae0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009ae2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009ae4:	f7ff ff06 	bl	80098f4 <prvInsertTimerInActiveList>
					break;
 8009ae8:	e015      	b.n	8009b16 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009aea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009aec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009af0:	f003 0302 	and.w	r3, r3, #2
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d103      	bne.n	8009b00 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8009af8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009afa:	f000 fbe1 	bl	800a2c0 <vPortFree>
 8009afe:	e00a      	b.n	8009b16 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009b00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b02:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009b06:	f023 0301 	bic.w	r3, r3, #1
 8009b0a:	b2da      	uxtb	r2, r3
 8009b0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b0e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009b12:	e000      	b.n	8009b16 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8009b14:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009b16:	4b08      	ldr	r3, [pc, #32]	; (8009b38 <prvProcessReceivedCommands+0x1c0>)
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	1d39      	adds	r1, r7, #4
 8009b1c:	2200      	movs	r2, #0
 8009b1e:	4618      	mov	r0, r3
 8009b20:	f7fe f922 	bl	8007d68 <xQueueReceive>
 8009b24:	4603      	mov	r3, r0
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	f47f af2a 	bne.w	8009980 <prvProcessReceivedCommands+0x8>
	}
}
 8009b2c:	bf00      	nop
 8009b2e:	bf00      	nop
 8009b30:	3730      	adds	r7, #48	; 0x30
 8009b32:	46bd      	mov	sp, r7
 8009b34:	bd80      	pop	{r7, pc}
 8009b36:	bf00      	nop
 8009b38:	20000d10 	.word	0x20000d10

08009b3c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009b3c:	b580      	push	{r7, lr}
 8009b3e:	b088      	sub	sp, #32
 8009b40:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009b42:	e048      	b.n	8009bd6 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009b44:	4b2d      	ldr	r3, [pc, #180]	; (8009bfc <prvSwitchTimerLists+0xc0>)
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	68db      	ldr	r3, [r3, #12]
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009b4e:	4b2b      	ldr	r3, [pc, #172]	; (8009bfc <prvSwitchTimerLists+0xc0>)
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	68db      	ldr	r3, [r3, #12]
 8009b54:	68db      	ldr	r3, [r3, #12]
 8009b56:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	3304      	adds	r3, #4
 8009b5c:	4618      	mov	r0, r3
 8009b5e:	f7fd fe3b 	bl	80077d8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	6a1b      	ldr	r3, [r3, #32]
 8009b66:	68f8      	ldr	r0, [r7, #12]
 8009b68:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009b70:	f003 0304 	and.w	r3, r3, #4
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d02e      	beq.n	8009bd6 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	699b      	ldr	r3, [r3, #24]
 8009b7c:	693a      	ldr	r2, [r7, #16]
 8009b7e:	4413      	add	r3, r2
 8009b80:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009b82:	68ba      	ldr	r2, [r7, #8]
 8009b84:	693b      	ldr	r3, [r7, #16]
 8009b86:	429a      	cmp	r2, r3
 8009b88:	d90e      	bls.n	8009ba8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009b8a:	68fb      	ldr	r3, [r7, #12]
 8009b8c:	68ba      	ldr	r2, [r7, #8]
 8009b8e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	68fa      	ldr	r2, [r7, #12]
 8009b94:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009b96:	4b19      	ldr	r3, [pc, #100]	; (8009bfc <prvSwitchTimerLists+0xc0>)
 8009b98:	681a      	ldr	r2, [r3, #0]
 8009b9a:	68fb      	ldr	r3, [r7, #12]
 8009b9c:	3304      	adds	r3, #4
 8009b9e:	4619      	mov	r1, r3
 8009ba0:	4610      	mov	r0, r2
 8009ba2:	f7fd fde0 	bl	8007766 <vListInsert>
 8009ba6:	e016      	b.n	8009bd6 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009ba8:	2300      	movs	r3, #0
 8009baa:	9300      	str	r3, [sp, #0]
 8009bac:	2300      	movs	r3, #0
 8009bae:	693a      	ldr	r2, [r7, #16]
 8009bb0:	2100      	movs	r1, #0
 8009bb2:	68f8      	ldr	r0, [r7, #12]
 8009bb4:	f7ff fd60 	bl	8009678 <xTimerGenericCommand>
 8009bb8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d10a      	bne.n	8009bd6 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8009bc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bc4:	f383 8811 	msr	BASEPRI, r3
 8009bc8:	f3bf 8f6f 	isb	sy
 8009bcc:	f3bf 8f4f 	dsb	sy
 8009bd0:	603b      	str	r3, [r7, #0]
}
 8009bd2:	bf00      	nop
 8009bd4:	e7fe      	b.n	8009bd4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009bd6:	4b09      	ldr	r3, [pc, #36]	; (8009bfc <prvSwitchTimerLists+0xc0>)
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d1b1      	bne.n	8009b44 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009be0:	4b06      	ldr	r3, [pc, #24]	; (8009bfc <prvSwitchTimerLists+0xc0>)
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009be6:	4b06      	ldr	r3, [pc, #24]	; (8009c00 <prvSwitchTimerLists+0xc4>)
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	4a04      	ldr	r2, [pc, #16]	; (8009bfc <prvSwitchTimerLists+0xc0>)
 8009bec:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009bee:	4a04      	ldr	r2, [pc, #16]	; (8009c00 <prvSwitchTimerLists+0xc4>)
 8009bf0:	697b      	ldr	r3, [r7, #20]
 8009bf2:	6013      	str	r3, [r2, #0]
}
 8009bf4:	bf00      	nop
 8009bf6:	3718      	adds	r7, #24
 8009bf8:	46bd      	mov	sp, r7
 8009bfa:	bd80      	pop	{r7, pc}
 8009bfc:	20000d08 	.word	0x20000d08
 8009c00:	20000d0c 	.word	0x20000d0c

08009c04 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009c04:	b580      	push	{r7, lr}
 8009c06:	b082      	sub	sp, #8
 8009c08:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009c0a:	f000 f96b 	bl	8009ee4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009c0e:	4b15      	ldr	r3, [pc, #84]	; (8009c64 <prvCheckForValidListAndQueue+0x60>)
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d120      	bne.n	8009c58 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009c16:	4814      	ldr	r0, [pc, #80]	; (8009c68 <prvCheckForValidListAndQueue+0x64>)
 8009c18:	f7fd fd54 	bl	80076c4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009c1c:	4813      	ldr	r0, [pc, #76]	; (8009c6c <prvCheckForValidListAndQueue+0x68>)
 8009c1e:	f7fd fd51 	bl	80076c4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009c22:	4b13      	ldr	r3, [pc, #76]	; (8009c70 <prvCheckForValidListAndQueue+0x6c>)
 8009c24:	4a10      	ldr	r2, [pc, #64]	; (8009c68 <prvCheckForValidListAndQueue+0x64>)
 8009c26:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009c28:	4b12      	ldr	r3, [pc, #72]	; (8009c74 <prvCheckForValidListAndQueue+0x70>)
 8009c2a:	4a10      	ldr	r2, [pc, #64]	; (8009c6c <prvCheckForValidListAndQueue+0x68>)
 8009c2c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009c2e:	2300      	movs	r3, #0
 8009c30:	9300      	str	r3, [sp, #0]
 8009c32:	4b11      	ldr	r3, [pc, #68]	; (8009c78 <prvCheckForValidListAndQueue+0x74>)
 8009c34:	4a11      	ldr	r2, [pc, #68]	; (8009c7c <prvCheckForValidListAndQueue+0x78>)
 8009c36:	2110      	movs	r1, #16
 8009c38:	200a      	movs	r0, #10
 8009c3a:	f7fd fe5f 	bl	80078fc <xQueueGenericCreateStatic>
 8009c3e:	4603      	mov	r3, r0
 8009c40:	4a08      	ldr	r2, [pc, #32]	; (8009c64 <prvCheckForValidListAndQueue+0x60>)
 8009c42:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009c44:	4b07      	ldr	r3, [pc, #28]	; (8009c64 <prvCheckForValidListAndQueue+0x60>)
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d005      	beq.n	8009c58 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009c4c:	4b05      	ldr	r3, [pc, #20]	; (8009c64 <prvCheckForValidListAndQueue+0x60>)
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	490b      	ldr	r1, [pc, #44]	; (8009c80 <prvCheckForValidListAndQueue+0x7c>)
 8009c52:	4618      	mov	r0, r3
 8009c54:	f7fe fa78 	bl	8008148 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009c58:	f000 f974 	bl	8009f44 <vPortExitCritical>
}
 8009c5c:	bf00      	nop
 8009c5e:	46bd      	mov	sp, r7
 8009c60:	bd80      	pop	{r7, pc}
 8009c62:	bf00      	nop
 8009c64:	20000d10 	.word	0x20000d10
 8009c68:	20000ce0 	.word	0x20000ce0
 8009c6c:	20000cf4 	.word	0x20000cf4
 8009c70:	20000d08 	.word	0x20000d08
 8009c74:	20000d0c 	.word	0x20000d0c
 8009c78:	20000dbc 	.word	0x20000dbc
 8009c7c:	20000d1c 	.word	0x20000d1c
 8009c80:	0800bb7c 	.word	0x0800bb7c

08009c84 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009c84:	b480      	push	{r7}
 8009c86:	b085      	sub	sp, #20
 8009c88:	af00      	add	r7, sp, #0
 8009c8a:	60f8      	str	r0, [r7, #12]
 8009c8c:	60b9      	str	r1, [r7, #8]
 8009c8e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	3b04      	subs	r3, #4
 8009c94:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009c9c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	3b04      	subs	r3, #4
 8009ca2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009ca4:	68bb      	ldr	r3, [r7, #8]
 8009ca6:	f023 0201 	bic.w	r2, r3, #1
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	3b04      	subs	r3, #4
 8009cb2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009cb4:	4a0c      	ldr	r2, [pc, #48]	; (8009ce8 <pxPortInitialiseStack+0x64>)
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	3b14      	subs	r3, #20
 8009cbe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009cc0:	687a      	ldr	r2, [r7, #4]
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	3b04      	subs	r3, #4
 8009cca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	f06f 0202 	mvn.w	r2, #2
 8009cd2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	3b20      	subs	r3, #32
 8009cd8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009cda:	68fb      	ldr	r3, [r7, #12]
}
 8009cdc:	4618      	mov	r0, r3
 8009cde:	3714      	adds	r7, #20
 8009ce0:	46bd      	mov	sp, r7
 8009ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ce6:	4770      	bx	lr
 8009ce8:	08009ced 	.word	0x08009ced

08009cec <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009cec:	b480      	push	{r7}
 8009cee:	b085      	sub	sp, #20
 8009cf0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009cf2:	2300      	movs	r3, #0
 8009cf4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009cf6:	4b12      	ldr	r3, [pc, #72]	; (8009d40 <prvTaskExitError+0x54>)
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009cfe:	d00a      	beq.n	8009d16 <prvTaskExitError+0x2a>
	__asm volatile
 8009d00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d04:	f383 8811 	msr	BASEPRI, r3
 8009d08:	f3bf 8f6f 	isb	sy
 8009d0c:	f3bf 8f4f 	dsb	sy
 8009d10:	60fb      	str	r3, [r7, #12]
}
 8009d12:	bf00      	nop
 8009d14:	e7fe      	b.n	8009d14 <prvTaskExitError+0x28>
	__asm volatile
 8009d16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d1a:	f383 8811 	msr	BASEPRI, r3
 8009d1e:	f3bf 8f6f 	isb	sy
 8009d22:	f3bf 8f4f 	dsb	sy
 8009d26:	60bb      	str	r3, [r7, #8]
}
 8009d28:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009d2a:	bf00      	nop
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d0fc      	beq.n	8009d2c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009d32:	bf00      	nop
 8009d34:	bf00      	nop
 8009d36:	3714      	adds	r7, #20
 8009d38:	46bd      	mov	sp, r7
 8009d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d3e:	4770      	bx	lr
 8009d40:	20000094 	.word	0x20000094
	...

08009d50 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009d50:	4b07      	ldr	r3, [pc, #28]	; (8009d70 <pxCurrentTCBConst2>)
 8009d52:	6819      	ldr	r1, [r3, #0]
 8009d54:	6808      	ldr	r0, [r1, #0]
 8009d56:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d5a:	f380 8809 	msr	PSP, r0
 8009d5e:	f3bf 8f6f 	isb	sy
 8009d62:	f04f 0000 	mov.w	r0, #0
 8009d66:	f380 8811 	msr	BASEPRI, r0
 8009d6a:	4770      	bx	lr
 8009d6c:	f3af 8000 	nop.w

08009d70 <pxCurrentTCBConst2>:
 8009d70:	200007e0 	.word	0x200007e0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009d74:	bf00      	nop
 8009d76:	bf00      	nop

08009d78 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009d78:	4808      	ldr	r0, [pc, #32]	; (8009d9c <prvPortStartFirstTask+0x24>)
 8009d7a:	6800      	ldr	r0, [r0, #0]
 8009d7c:	6800      	ldr	r0, [r0, #0]
 8009d7e:	f380 8808 	msr	MSP, r0
 8009d82:	f04f 0000 	mov.w	r0, #0
 8009d86:	f380 8814 	msr	CONTROL, r0
 8009d8a:	b662      	cpsie	i
 8009d8c:	b661      	cpsie	f
 8009d8e:	f3bf 8f4f 	dsb	sy
 8009d92:	f3bf 8f6f 	isb	sy
 8009d96:	df00      	svc	0
 8009d98:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009d9a:	bf00      	nop
 8009d9c:	e000ed08 	.word	0xe000ed08

08009da0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009da0:	b580      	push	{r7, lr}
 8009da2:	b086      	sub	sp, #24
 8009da4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009da6:	4b46      	ldr	r3, [pc, #280]	; (8009ec0 <xPortStartScheduler+0x120>)
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	4a46      	ldr	r2, [pc, #280]	; (8009ec4 <xPortStartScheduler+0x124>)
 8009dac:	4293      	cmp	r3, r2
 8009dae:	d10a      	bne.n	8009dc6 <xPortStartScheduler+0x26>
	__asm volatile
 8009db0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009db4:	f383 8811 	msr	BASEPRI, r3
 8009db8:	f3bf 8f6f 	isb	sy
 8009dbc:	f3bf 8f4f 	dsb	sy
 8009dc0:	613b      	str	r3, [r7, #16]
}
 8009dc2:	bf00      	nop
 8009dc4:	e7fe      	b.n	8009dc4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009dc6:	4b3e      	ldr	r3, [pc, #248]	; (8009ec0 <xPortStartScheduler+0x120>)
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	4a3f      	ldr	r2, [pc, #252]	; (8009ec8 <xPortStartScheduler+0x128>)
 8009dcc:	4293      	cmp	r3, r2
 8009dce:	d10a      	bne.n	8009de6 <xPortStartScheduler+0x46>
	__asm volatile
 8009dd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dd4:	f383 8811 	msr	BASEPRI, r3
 8009dd8:	f3bf 8f6f 	isb	sy
 8009ddc:	f3bf 8f4f 	dsb	sy
 8009de0:	60fb      	str	r3, [r7, #12]
}
 8009de2:	bf00      	nop
 8009de4:	e7fe      	b.n	8009de4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009de6:	4b39      	ldr	r3, [pc, #228]	; (8009ecc <xPortStartScheduler+0x12c>)
 8009de8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009dea:	697b      	ldr	r3, [r7, #20]
 8009dec:	781b      	ldrb	r3, [r3, #0]
 8009dee:	b2db      	uxtb	r3, r3
 8009df0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009df2:	697b      	ldr	r3, [r7, #20]
 8009df4:	22ff      	movs	r2, #255	; 0xff
 8009df6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009df8:	697b      	ldr	r3, [r7, #20]
 8009dfa:	781b      	ldrb	r3, [r3, #0]
 8009dfc:	b2db      	uxtb	r3, r3
 8009dfe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009e00:	78fb      	ldrb	r3, [r7, #3]
 8009e02:	b2db      	uxtb	r3, r3
 8009e04:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009e08:	b2da      	uxtb	r2, r3
 8009e0a:	4b31      	ldr	r3, [pc, #196]	; (8009ed0 <xPortStartScheduler+0x130>)
 8009e0c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009e0e:	4b31      	ldr	r3, [pc, #196]	; (8009ed4 <xPortStartScheduler+0x134>)
 8009e10:	2207      	movs	r2, #7
 8009e12:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009e14:	e009      	b.n	8009e2a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8009e16:	4b2f      	ldr	r3, [pc, #188]	; (8009ed4 <xPortStartScheduler+0x134>)
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	3b01      	subs	r3, #1
 8009e1c:	4a2d      	ldr	r2, [pc, #180]	; (8009ed4 <xPortStartScheduler+0x134>)
 8009e1e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009e20:	78fb      	ldrb	r3, [r7, #3]
 8009e22:	b2db      	uxtb	r3, r3
 8009e24:	005b      	lsls	r3, r3, #1
 8009e26:	b2db      	uxtb	r3, r3
 8009e28:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009e2a:	78fb      	ldrb	r3, [r7, #3]
 8009e2c:	b2db      	uxtb	r3, r3
 8009e2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009e32:	2b80      	cmp	r3, #128	; 0x80
 8009e34:	d0ef      	beq.n	8009e16 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009e36:	4b27      	ldr	r3, [pc, #156]	; (8009ed4 <xPortStartScheduler+0x134>)
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	f1c3 0307 	rsb	r3, r3, #7
 8009e3e:	2b04      	cmp	r3, #4
 8009e40:	d00a      	beq.n	8009e58 <xPortStartScheduler+0xb8>
	__asm volatile
 8009e42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e46:	f383 8811 	msr	BASEPRI, r3
 8009e4a:	f3bf 8f6f 	isb	sy
 8009e4e:	f3bf 8f4f 	dsb	sy
 8009e52:	60bb      	str	r3, [r7, #8]
}
 8009e54:	bf00      	nop
 8009e56:	e7fe      	b.n	8009e56 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009e58:	4b1e      	ldr	r3, [pc, #120]	; (8009ed4 <xPortStartScheduler+0x134>)
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	021b      	lsls	r3, r3, #8
 8009e5e:	4a1d      	ldr	r2, [pc, #116]	; (8009ed4 <xPortStartScheduler+0x134>)
 8009e60:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009e62:	4b1c      	ldr	r3, [pc, #112]	; (8009ed4 <xPortStartScheduler+0x134>)
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009e6a:	4a1a      	ldr	r2, [pc, #104]	; (8009ed4 <xPortStartScheduler+0x134>)
 8009e6c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	b2da      	uxtb	r2, r3
 8009e72:	697b      	ldr	r3, [r7, #20]
 8009e74:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009e76:	4b18      	ldr	r3, [pc, #96]	; (8009ed8 <xPortStartScheduler+0x138>)
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	4a17      	ldr	r2, [pc, #92]	; (8009ed8 <xPortStartScheduler+0x138>)
 8009e7c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009e80:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009e82:	4b15      	ldr	r3, [pc, #84]	; (8009ed8 <xPortStartScheduler+0x138>)
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	4a14      	ldr	r2, [pc, #80]	; (8009ed8 <xPortStartScheduler+0x138>)
 8009e88:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8009e8c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009e8e:	f000 f8dd 	bl	800a04c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009e92:	4b12      	ldr	r3, [pc, #72]	; (8009edc <xPortStartScheduler+0x13c>)
 8009e94:	2200      	movs	r2, #0
 8009e96:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009e98:	f000 f8fc 	bl	800a094 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009e9c:	4b10      	ldr	r3, [pc, #64]	; (8009ee0 <xPortStartScheduler+0x140>)
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	4a0f      	ldr	r2, [pc, #60]	; (8009ee0 <xPortStartScheduler+0x140>)
 8009ea2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8009ea6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009ea8:	f7ff ff66 	bl	8009d78 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009eac:	f7fe fe62 	bl	8008b74 <vTaskSwitchContext>
	prvTaskExitError();
 8009eb0:	f7ff ff1c 	bl	8009cec <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009eb4:	2300      	movs	r3, #0
}
 8009eb6:	4618      	mov	r0, r3
 8009eb8:	3718      	adds	r7, #24
 8009eba:	46bd      	mov	sp, r7
 8009ebc:	bd80      	pop	{r7, pc}
 8009ebe:	bf00      	nop
 8009ec0:	e000ed00 	.word	0xe000ed00
 8009ec4:	410fc271 	.word	0x410fc271
 8009ec8:	410fc270 	.word	0x410fc270
 8009ecc:	e000e400 	.word	0xe000e400
 8009ed0:	20000e0c 	.word	0x20000e0c
 8009ed4:	20000e10 	.word	0x20000e10
 8009ed8:	e000ed20 	.word	0xe000ed20
 8009edc:	20000094 	.word	0x20000094
 8009ee0:	e000ef34 	.word	0xe000ef34

08009ee4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009ee4:	b480      	push	{r7}
 8009ee6:	b083      	sub	sp, #12
 8009ee8:	af00      	add	r7, sp, #0
	__asm volatile
 8009eea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009eee:	f383 8811 	msr	BASEPRI, r3
 8009ef2:	f3bf 8f6f 	isb	sy
 8009ef6:	f3bf 8f4f 	dsb	sy
 8009efa:	607b      	str	r3, [r7, #4]
}
 8009efc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009efe:	4b0f      	ldr	r3, [pc, #60]	; (8009f3c <vPortEnterCritical+0x58>)
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	3301      	adds	r3, #1
 8009f04:	4a0d      	ldr	r2, [pc, #52]	; (8009f3c <vPortEnterCritical+0x58>)
 8009f06:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009f08:	4b0c      	ldr	r3, [pc, #48]	; (8009f3c <vPortEnterCritical+0x58>)
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	2b01      	cmp	r3, #1
 8009f0e:	d10f      	bne.n	8009f30 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009f10:	4b0b      	ldr	r3, [pc, #44]	; (8009f40 <vPortEnterCritical+0x5c>)
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	b2db      	uxtb	r3, r3
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d00a      	beq.n	8009f30 <vPortEnterCritical+0x4c>
	__asm volatile
 8009f1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f1e:	f383 8811 	msr	BASEPRI, r3
 8009f22:	f3bf 8f6f 	isb	sy
 8009f26:	f3bf 8f4f 	dsb	sy
 8009f2a:	603b      	str	r3, [r7, #0]
}
 8009f2c:	bf00      	nop
 8009f2e:	e7fe      	b.n	8009f2e <vPortEnterCritical+0x4a>
	}
}
 8009f30:	bf00      	nop
 8009f32:	370c      	adds	r7, #12
 8009f34:	46bd      	mov	sp, r7
 8009f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f3a:	4770      	bx	lr
 8009f3c:	20000094 	.word	0x20000094
 8009f40:	e000ed04 	.word	0xe000ed04

08009f44 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009f44:	b480      	push	{r7}
 8009f46:	b083      	sub	sp, #12
 8009f48:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009f4a:	4b12      	ldr	r3, [pc, #72]	; (8009f94 <vPortExitCritical+0x50>)
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	d10a      	bne.n	8009f68 <vPortExitCritical+0x24>
	__asm volatile
 8009f52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f56:	f383 8811 	msr	BASEPRI, r3
 8009f5a:	f3bf 8f6f 	isb	sy
 8009f5e:	f3bf 8f4f 	dsb	sy
 8009f62:	607b      	str	r3, [r7, #4]
}
 8009f64:	bf00      	nop
 8009f66:	e7fe      	b.n	8009f66 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009f68:	4b0a      	ldr	r3, [pc, #40]	; (8009f94 <vPortExitCritical+0x50>)
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	3b01      	subs	r3, #1
 8009f6e:	4a09      	ldr	r2, [pc, #36]	; (8009f94 <vPortExitCritical+0x50>)
 8009f70:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009f72:	4b08      	ldr	r3, [pc, #32]	; (8009f94 <vPortExitCritical+0x50>)
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d105      	bne.n	8009f86 <vPortExitCritical+0x42>
 8009f7a:	2300      	movs	r3, #0
 8009f7c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009f7e:	683b      	ldr	r3, [r7, #0]
 8009f80:	f383 8811 	msr	BASEPRI, r3
}
 8009f84:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009f86:	bf00      	nop
 8009f88:	370c      	adds	r7, #12
 8009f8a:	46bd      	mov	sp, r7
 8009f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f90:	4770      	bx	lr
 8009f92:	bf00      	nop
 8009f94:	20000094 	.word	0x20000094
	...

08009fa0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009fa0:	f3ef 8009 	mrs	r0, PSP
 8009fa4:	f3bf 8f6f 	isb	sy
 8009fa8:	4b15      	ldr	r3, [pc, #84]	; (800a000 <pxCurrentTCBConst>)
 8009faa:	681a      	ldr	r2, [r3, #0]
 8009fac:	f01e 0f10 	tst.w	lr, #16
 8009fb0:	bf08      	it	eq
 8009fb2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009fb6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fba:	6010      	str	r0, [r2, #0]
 8009fbc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009fc0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009fc4:	f380 8811 	msr	BASEPRI, r0
 8009fc8:	f3bf 8f4f 	dsb	sy
 8009fcc:	f3bf 8f6f 	isb	sy
 8009fd0:	f7fe fdd0 	bl	8008b74 <vTaskSwitchContext>
 8009fd4:	f04f 0000 	mov.w	r0, #0
 8009fd8:	f380 8811 	msr	BASEPRI, r0
 8009fdc:	bc09      	pop	{r0, r3}
 8009fde:	6819      	ldr	r1, [r3, #0]
 8009fe0:	6808      	ldr	r0, [r1, #0]
 8009fe2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fe6:	f01e 0f10 	tst.w	lr, #16
 8009fea:	bf08      	it	eq
 8009fec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009ff0:	f380 8809 	msr	PSP, r0
 8009ff4:	f3bf 8f6f 	isb	sy
 8009ff8:	4770      	bx	lr
 8009ffa:	bf00      	nop
 8009ffc:	f3af 8000 	nop.w

0800a000 <pxCurrentTCBConst>:
 800a000:	200007e0 	.word	0x200007e0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a004:	bf00      	nop
 800a006:	bf00      	nop

0800a008 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a008:	b580      	push	{r7, lr}
 800a00a:	b082      	sub	sp, #8
 800a00c:	af00      	add	r7, sp, #0
	__asm volatile
 800a00e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a012:	f383 8811 	msr	BASEPRI, r3
 800a016:	f3bf 8f6f 	isb	sy
 800a01a:	f3bf 8f4f 	dsb	sy
 800a01e:	607b      	str	r3, [r7, #4]
}
 800a020:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a022:	f7fe fced 	bl	8008a00 <xTaskIncrementTick>
 800a026:	4603      	mov	r3, r0
 800a028:	2b00      	cmp	r3, #0
 800a02a:	d003      	beq.n	800a034 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a02c:	4b06      	ldr	r3, [pc, #24]	; (800a048 <xPortSysTickHandler+0x40>)
 800a02e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a032:	601a      	str	r2, [r3, #0]
 800a034:	2300      	movs	r3, #0
 800a036:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a038:	683b      	ldr	r3, [r7, #0]
 800a03a:	f383 8811 	msr	BASEPRI, r3
}
 800a03e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a040:	bf00      	nop
 800a042:	3708      	adds	r7, #8
 800a044:	46bd      	mov	sp, r7
 800a046:	bd80      	pop	{r7, pc}
 800a048:	e000ed04 	.word	0xe000ed04

0800a04c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a04c:	b480      	push	{r7}
 800a04e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a050:	4b0b      	ldr	r3, [pc, #44]	; (800a080 <vPortSetupTimerInterrupt+0x34>)
 800a052:	2200      	movs	r2, #0
 800a054:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a056:	4b0b      	ldr	r3, [pc, #44]	; (800a084 <vPortSetupTimerInterrupt+0x38>)
 800a058:	2200      	movs	r2, #0
 800a05a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a05c:	4b0a      	ldr	r3, [pc, #40]	; (800a088 <vPortSetupTimerInterrupt+0x3c>)
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	4a0a      	ldr	r2, [pc, #40]	; (800a08c <vPortSetupTimerInterrupt+0x40>)
 800a062:	fba2 2303 	umull	r2, r3, r2, r3
 800a066:	099b      	lsrs	r3, r3, #6
 800a068:	4a09      	ldr	r2, [pc, #36]	; (800a090 <vPortSetupTimerInterrupt+0x44>)
 800a06a:	3b01      	subs	r3, #1
 800a06c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a06e:	4b04      	ldr	r3, [pc, #16]	; (800a080 <vPortSetupTimerInterrupt+0x34>)
 800a070:	2207      	movs	r2, #7
 800a072:	601a      	str	r2, [r3, #0]
}
 800a074:	bf00      	nop
 800a076:	46bd      	mov	sp, r7
 800a078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a07c:	4770      	bx	lr
 800a07e:	bf00      	nop
 800a080:	e000e010 	.word	0xe000e010
 800a084:	e000e018 	.word	0xe000e018
 800a088:	20000000 	.word	0x20000000
 800a08c:	10624dd3 	.word	0x10624dd3
 800a090:	e000e014 	.word	0xe000e014

0800a094 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a094:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800a0a4 <vPortEnableVFP+0x10>
 800a098:	6801      	ldr	r1, [r0, #0]
 800a09a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800a09e:	6001      	str	r1, [r0, #0]
 800a0a0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a0a2:	bf00      	nop
 800a0a4:	e000ed88 	.word	0xe000ed88

0800a0a8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a0a8:	b480      	push	{r7}
 800a0aa:	b085      	sub	sp, #20
 800a0ac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a0ae:	f3ef 8305 	mrs	r3, IPSR
 800a0b2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	2b0f      	cmp	r3, #15
 800a0b8:	d914      	bls.n	800a0e4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a0ba:	4a17      	ldr	r2, [pc, #92]	; (800a118 <vPortValidateInterruptPriority+0x70>)
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	4413      	add	r3, r2
 800a0c0:	781b      	ldrb	r3, [r3, #0]
 800a0c2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a0c4:	4b15      	ldr	r3, [pc, #84]	; (800a11c <vPortValidateInterruptPriority+0x74>)
 800a0c6:	781b      	ldrb	r3, [r3, #0]
 800a0c8:	7afa      	ldrb	r2, [r7, #11]
 800a0ca:	429a      	cmp	r2, r3
 800a0cc:	d20a      	bcs.n	800a0e4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800a0ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0d2:	f383 8811 	msr	BASEPRI, r3
 800a0d6:	f3bf 8f6f 	isb	sy
 800a0da:	f3bf 8f4f 	dsb	sy
 800a0de:	607b      	str	r3, [r7, #4]
}
 800a0e0:	bf00      	nop
 800a0e2:	e7fe      	b.n	800a0e2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a0e4:	4b0e      	ldr	r3, [pc, #56]	; (800a120 <vPortValidateInterruptPriority+0x78>)
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a0ec:	4b0d      	ldr	r3, [pc, #52]	; (800a124 <vPortValidateInterruptPriority+0x7c>)
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	429a      	cmp	r2, r3
 800a0f2:	d90a      	bls.n	800a10a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800a0f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0f8:	f383 8811 	msr	BASEPRI, r3
 800a0fc:	f3bf 8f6f 	isb	sy
 800a100:	f3bf 8f4f 	dsb	sy
 800a104:	603b      	str	r3, [r7, #0]
}
 800a106:	bf00      	nop
 800a108:	e7fe      	b.n	800a108 <vPortValidateInterruptPriority+0x60>
	}
 800a10a:	bf00      	nop
 800a10c:	3714      	adds	r7, #20
 800a10e:	46bd      	mov	sp, r7
 800a110:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a114:	4770      	bx	lr
 800a116:	bf00      	nop
 800a118:	e000e3f0 	.word	0xe000e3f0
 800a11c:	20000e0c 	.word	0x20000e0c
 800a120:	e000ed0c 	.word	0xe000ed0c
 800a124:	20000e10 	.word	0x20000e10

0800a128 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a128:	b580      	push	{r7, lr}
 800a12a:	b08a      	sub	sp, #40	; 0x28
 800a12c:	af00      	add	r7, sp, #0
 800a12e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a130:	2300      	movs	r3, #0
 800a132:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a134:	f7fe fba8 	bl	8008888 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a138:	4b5b      	ldr	r3, [pc, #364]	; (800a2a8 <pvPortMalloc+0x180>)
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	d101      	bne.n	800a144 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a140:	f000 f920 	bl	800a384 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a144:	4b59      	ldr	r3, [pc, #356]	; (800a2ac <pvPortMalloc+0x184>)
 800a146:	681a      	ldr	r2, [r3, #0]
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	4013      	ands	r3, r2
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	f040 8093 	bne.w	800a278 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	2b00      	cmp	r3, #0
 800a156:	d01d      	beq.n	800a194 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800a158:	2208      	movs	r2, #8
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	4413      	add	r3, r2
 800a15e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	f003 0307 	and.w	r3, r3, #7
 800a166:	2b00      	cmp	r3, #0
 800a168:	d014      	beq.n	800a194 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	f023 0307 	bic.w	r3, r3, #7
 800a170:	3308      	adds	r3, #8
 800a172:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	f003 0307 	and.w	r3, r3, #7
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	d00a      	beq.n	800a194 <pvPortMalloc+0x6c>
	__asm volatile
 800a17e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a182:	f383 8811 	msr	BASEPRI, r3
 800a186:	f3bf 8f6f 	isb	sy
 800a18a:	f3bf 8f4f 	dsb	sy
 800a18e:	617b      	str	r3, [r7, #20]
}
 800a190:	bf00      	nop
 800a192:	e7fe      	b.n	800a192 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	2b00      	cmp	r3, #0
 800a198:	d06e      	beq.n	800a278 <pvPortMalloc+0x150>
 800a19a:	4b45      	ldr	r3, [pc, #276]	; (800a2b0 <pvPortMalloc+0x188>)
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	687a      	ldr	r2, [r7, #4]
 800a1a0:	429a      	cmp	r2, r3
 800a1a2:	d869      	bhi.n	800a278 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a1a4:	4b43      	ldr	r3, [pc, #268]	; (800a2b4 <pvPortMalloc+0x18c>)
 800a1a6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a1a8:	4b42      	ldr	r3, [pc, #264]	; (800a2b4 <pvPortMalloc+0x18c>)
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a1ae:	e004      	b.n	800a1ba <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800a1b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1b2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a1b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a1ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1bc:	685b      	ldr	r3, [r3, #4]
 800a1be:	687a      	ldr	r2, [r7, #4]
 800a1c0:	429a      	cmp	r2, r3
 800a1c2:	d903      	bls.n	800a1cc <pvPortMalloc+0xa4>
 800a1c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	d1f1      	bne.n	800a1b0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a1cc:	4b36      	ldr	r3, [pc, #216]	; (800a2a8 <pvPortMalloc+0x180>)
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a1d2:	429a      	cmp	r2, r3
 800a1d4:	d050      	beq.n	800a278 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a1d6:	6a3b      	ldr	r3, [r7, #32]
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	2208      	movs	r2, #8
 800a1dc:	4413      	add	r3, r2
 800a1de:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a1e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1e2:	681a      	ldr	r2, [r3, #0]
 800a1e4:	6a3b      	ldr	r3, [r7, #32]
 800a1e6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a1e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1ea:	685a      	ldr	r2, [r3, #4]
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	1ad2      	subs	r2, r2, r3
 800a1f0:	2308      	movs	r3, #8
 800a1f2:	005b      	lsls	r3, r3, #1
 800a1f4:	429a      	cmp	r2, r3
 800a1f6:	d91f      	bls.n	800a238 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a1f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	4413      	add	r3, r2
 800a1fe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a200:	69bb      	ldr	r3, [r7, #24]
 800a202:	f003 0307 	and.w	r3, r3, #7
 800a206:	2b00      	cmp	r3, #0
 800a208:	d00a      	beq.n	800a220 <pvPortMalloc+0xf8>
	__asm volatile
 800a20a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a20e:	f383 8811 	msr	BASEPRI, r3
 800a212:	f3bf 8f6f 	isb	sy
 800a216:	f3bf 8f4f 	dsb	sy
 800a21a:	613b      	str	r3, [r7, #16]
}
 800a21c:	bf00      	nop
 800a21e:	e7fe      	b.n	800a21e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a222:	685a      	ldr	r2, [r3, #4]
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	1ad2      	subs	r2, r2, r3
 800a228:	69bb      	ldr	r3, [r7, #24]
 800a22a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a22c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a22e:	687a      	ldr	r2, [r7, #4]
 800a230:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a232:	69b8      	ldr	r0, [r7, #24]
 800a234:	f000 f908 	bl	800a448 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a238:	4b1d      	ldr	r3, [pc, #116]	; (800a2b0 <pvPortMalloc+0x188>)
 800a23a:	681a      	ldr	r2, [r3, #0]
 800a23c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a23e:	685b      	ldr	r3, [r3, #4]
 800a240:	1ad3      	subs	r3, r2, r3
 800a242:	4a1b      	ldr	r2, [pc, #108]	; (800a2b0 <pvPortMalloc+0x188>)
 800a244:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a246:	4b1a      	ldr	r3, [pc, #104]	; (800a2b0 <pvPortMalloc+0x188>)
 800a248:	681a      	ldr	r2, [r3, #0]
 800a24a:	4b1b      	ldr	r3, [pc, #108]	; (800a2b8 <pvPortMalloc+0x190>)
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	429a      	cmp	r2, r3
 800a250:	d203      	bcs.n	800a25a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a252:	4b17      	ldr	r3, [pc, #92]	; (800a2b0 <pvPortMalloc+0x188>)
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	4a18      	ldr	r2, [pc, #96]	; (800a2b8 <pvPortMalloc+0x190>)
 800a258:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a25a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a25c:	685a      	ldr	r2, [r3, #4]
 800a25e:	4b13      	ldr	r3, [pc, #76]	; (800a2ac <pvPortMalloc+0x184>)
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	431a      	orrs	r2, r3
 800a264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a266:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a26a:	2200      	movs	r2, #0
 800a26c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800a26e:	4b13      	ldr	r3, [pc, #76]	; (800a2bc <pvPortMalloc+0x194>)
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	3301      	adds	r3, #1
 800a274:	4a11      	ldr	r2, [pc, #68]	; (800a2bc <pvPortMalloc+0x194>)
 800a276:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a278:	f7fe fb14 	bl	80088a4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a27c:	69fb      	ldr	r3, [r7, #28]
 800a27e:	f003 0307 	and.w	r3, r3, #7
 800a282:	2b00      	cmp	r3, #0
 800a284:	d00a      	beq.n	800a29c <pvPortMalloc+0x174>
	__asm volatile
 800a286:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a28a:	f383 8811 	msr	BASEPRI, r3
 800a28e:	f3bf 8f6f 	isb	sy
 800a292:	f3bf 8f4f 	dsb	sy
 800a296:	60fb      	str	r3, [r7, #12]
}
 800a298:	bf00      	nop
 800a29a:	e7fe      	b.n	800a29a <pvPortMalloc+0x172>
	return pvReturn;
 800a29c:	69fb      	ldr	r3, [r7, #28]
}
 800a29e:	4618      	mov	r0, r3
 800a2a0:	3728      	adds	r7, #40	; 0x28
 800a2a2:	46bd      	mov	sp, r7
 800a2a4:	bd80      	pop	{r7, pc}
 800a2a6:	bf00      	nop
 800a2a8:	20004a1c 	.word	0x20004a1c
 800a2ac:	20004a30 	.word	0x20004a30
 800a2b0:	20004a20 	.word	0x20004a20
 800a2b4:	20004a14 	.word	0x20004a14
 800a2b8:	20004a24 	.word	0x20004a24
 800a2bc:	20004a28 	.word	0x20004a28

0800a2c0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a2c0:	b580      	push	{r7, lr}
 800a2c2:	b086      	sub	sp, #24
 800a2c4:	af00      	add	r7, sp, #0
 800a2c6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d04d      	beq.n	800a36e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a2d2:	2308      	movs	r3, #8
 800a2d4:	425b      	negs	r3, r3
 800a2d6:	697a      	ldr	r2, [r7, #20]
 800a2d8:	4413      	add	r3, r2
 800a2da:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a2dc:	697b      	ldr	r3, [r7, #20]
 800a2de:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a2e0:	693b      	ldr	r3, [r7, #16]
 800a2e2:	685a      	ldr	r2, [r3, #4]
 800a2e4:	4b24      	ldr	r3, [pc, #144]	; (800a378 <vPortFree+0xb8>)
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	4013      	ands	r3, r2
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	d10a      	bne.n	800a304 <vPortFree+0x44>
	__asm volatile
 800a2ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2f2:	f383 8811 	msr	BASEPRI, r3
 800a2f6:	f3bf 8f6f 	isb	sy
 800a2fa:	f3bf 8f4f 	dsb	sy
 800a2fe:	60fb      	str	r3, [r7, #12]
}
 800a300:	bf00      	nop
 800a302:	e7fe      	b.n	800a302 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a304:	693b      	ldr	r3, [r7, #16]
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	2b00      	cmp	r3, #0
 800a30a:	d00a      	beq.n	800a322 <vPortFree+0x62>
	__asm volatile
 800a30c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a310:	f383 8811 	msr	BASEPRI, r3
 800a314:	f3bf 8f6f 	isb	sy
 800a318:	f3bf 8f4f 	dsb	sy
 800a31c:	60bb      	str	r3, [r7, #8]
}
 800a31e:	bf00      	nop
 800a320:	e7fe      	b.n	800a320 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a322:	693b      	ldr	r3, [r7, #16]
 800a324:	685a      	ldr	r2, [r3, #4]
 800a326:	4b14      	ldr	r3, [pc, #80]	; (800a378 <vPortFree+0xb8>)
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	4013      	ands	r3, r2
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d01e      	beq.n	800a36e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a330:	693b      	ldr	r3, [r7, #16]
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	2b00      	cmp	r3, #0
 800a336:	d11a      	bne.n	800a36e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a338:	693b      	ldr	r3, [r7, #16]
 800a33a:	685a      	ldr	r2, [r3, #4]
 800a33c:	4b0e      	ldr	r3, [pc, #56]	; (800a378 <vPortFree+0xb8>)
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	43db      	mvns	r3, r3
 800a342:	401a      	ands	r2, r3
 800a344:	693b      	ldr	r3, [r7, #16]
 800a346:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a348:	f7fe fa9e 	bl	8008888 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a34c:	693b      	ldr	r3, [r7, #16]
 800a34e:	685a      	ldr	r2, [r3, #4]
 800a350:	4b0a      	ldr	r3, [pc, #40]	; (800a37c <vPortFree+0xbc>)
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	4413      	add	r3, r2
 800a356:	4a09      	ldr	r2, [pc, #36]	; (800a37c <vPortFree+0xbc>)
 800a358:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a35a:	6938      	ldr	r0, [r7, #16]
 800a35c:	f000 f874 	bl	800a448 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800a360:	4b07      	ldr	r3, [pc, #28]	; (800a380 <vPortFree+0xc0>)
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	3301      	adds	r3, #1
 800a366:	4a06      	ldr	r2, [pc, #24]	; (800a380 <vPortFree+0xc0>)
 800a368:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800a36a:	f7fe fa9b 	bl	80088a4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a36e:	bf00      	nop
 800a370:	3718      	adds	r7, #24
 800a372:	46bd      	mov	sp, r7
 800a374:	bd80      	pop	{r7, pc}
 800a376:	bf00      	nop
 800a378:	20004a30 	.word	0x20004a30
 800a37c:	20004a20 	.word	0x20004a20
 800a380:	20004a2c 	.word	0x20004a2c

0800a384 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a384:	b480      	push	{r7}
 800a386:	b085      	sub	sp, #20
 800a388:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a38a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800a38e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a390:	4b27      	ldr	r3, [pc, #156]	; (800a430 <prvHeapInit+0xac>)
 800a392:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	f003 0307 	and.w	r3, r3, #7
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	d00c      	beq.n	800a3b8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	3307      	adds	r3, #7
 800a3a2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a3a4:	68fb      	ldr	r3, [r7, #12]
 800a3a6:	f023 0307 	bic.w	r3, r3, #7
 800a3aa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a3ac:	68ba      	ldr	r2, [r7, #8]
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	1ad3      	subs	r3, r2, r3
 800a3b2:	4a1f      	ldr	r2, [pc, #124]	; (800a430 <prvHeapInit+0xac>)
 800a3b4:	4413      	add	r3, r2
 800a3b6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a3b8:	68fb      	ldr	r3, [r7, #12]
 800a3ba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a3bc:	4a1d      	ldr	r2, [pc, #116]	; (800a434 <prvHeapInit+0xb0>)
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a3c2:	4b1c      	ldr	r3, [pc, #112]	; (800a434 <prvHeapInit+0xb0>)
 800a3c4:	2200      	movs	r2, #0
 800a3c6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	68ba      	ldr	r2, [r7, #8]
 800a3cc:	4413      	add	r3, r2
 800a3ce:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a3d0:	2208      	movs	r2, #8
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	1a9b      	subs	r3, r3, r2
 800a3d6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	f023 0307 	bic.w	r3, r3, #7
 800a3de:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	4a15      	ldr	r2, [pc, #84]	; (800a438 <prvHeapInit+0xb4>)
 800a3e4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a3e6:	4b14      	ldr	r3, [pc, #80]	; (800a438 <prvHeapInit+0xb4>)
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	2200      	movs	r2, #0
 800a3ec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a3ee:	4b12      	ldr	r3, [pc, #72]	; (800a438 <prvHeapInit+0xb4>)
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	2200      	movs	r2, #0
 800a3f4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a3fa:	683b      	ldr	r3, [r7, #0]
 800a3fc:	68fa      	ldr	r2, [r7, #12]
 800a3fe:	1ad2      	subs	r2, r2, r3
 800a400:	683b      	ldr	r3, [r7, #0]
 800a402:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a404:	4b0c      	ldr	r3, [pc, #48]	; (800a438 <prvHeapInit+0xb4>)
 800a406:	681a      	ldr	r2, [r3, #0]
 800a408:	683b      	ldr	r3, [r7, #0]
 800a40a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a40c:	683b      	ldr	r3, [r7, #0]
 800a40e:	685b      	ldr	r3, [r3, #4]
 800a410:	4a0a      	ldr	r2, [pc, #40]	; (800a43c <prvHeapInit+0xb8>)
 800a412:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a414:	683b      	ldr	r3, [r7, #0]
 800a416:	685b      	ldr	r3, [r3, #4]
 800a418:	4a09      	ldr	r2, [pc, #36]	; (800a440 <prvHeapInit+0xbc>)
 800a41a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a41c:	4b09      	ldr	r3, [pc, #36]	; (800a444 <prvHeapInit+0xc0>)
 800a41e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a422:	601a      	str	r2, [r3, #0]
}
 800a424:	bf00      	nop
 800a426:	3714      	adds	r7, #20
 800a428:	46bd      	mov	sp, r7
 800a42a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a42e:	4770      	bx	lr
 800a430:	20000e14 	.word	0x20000e14
 800a434:	20004a14 	.word	0x20004a14
 800a438:	20004a1c 	.word	0x20004a1c
 800a43c:	20004a24 	.word	0x20004a24
 800a440:	20004a20 	.word	0x20004a20
 800a444:	20004a30 	.word	0x20004a30

0800a448 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a448:	b480      	push	{r7}
 800a44a:	b085      	sub	sp, #20
 800a44c:	af00      	add	r7, sp, #0
 800a44e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a450:	4b28      	ldr	r3, [pc, #160]	; (800a4f4 <prvInsertBlockIntoFreeList+0xac>)
 800a452:	60fb      	str	r3, [r7, #12]
 800a454:	e002      	b.n	800a45c <prvInsertBlockIntoFreeList+0x14>
 800a456:	68fb      	ldr	r3, [r7, #12]
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	60fb      	str	r3, [r7, #12]
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	687a      	ldr	r2, [r7, #4]
 800a462:	429a      	cmp	r2, r3
 800a464:	d8f7      	bhi.n	800a456 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a466:	68fb      	ldr	r3, [r7, #12]
 800a468:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	685b      	ldr	r3, [r3, #4]
 800a46e:	68ba      	ldr	r2, [r7, #8]
 800a470:	4413      	add	r3, r2
 800a472:	687a      	ldr	r2, [r7, #4]
 800a474:	429a      	cmp	r2, r3
 800a476:	d108      	bne.n	800a48a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a478:	68fb      	ldr	r3, [r7, #12]
 800a47a:	685a      	ldr	r2, [r3, #4]
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	685b      	ldr	r3, [r3, #4]
 800a480:	441a      	add	r2, r3
 800a482:	68fb      	ldr	r3, [r7, #12]
 800a484:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a486:	68fb      	ldr	r3, [r7, #12]
 800a488:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	685b      	ldr	r3, [r3, #4]
 800a492:	68ba      	ldr	r2, [r7, #8]
 800a494:	441a      	add	r2, r3
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	429a      	cmp	r2, r3
 800a49c:	d118      	bne.n	800a4d0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a49e:	68fb      	ldr	r3, [r7, #12]
 800a4a0:	681a      	ldr	r2, [r3, #0]
 800a4a2:	4b15      	ldr	r3, [pc, #84]	; (800a4f8 <prvInsertBlockIntoFreeList+0xb0>)
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	429a      	cmp	r2, r3
 800a4a8:	d00d      	beq.n	800a4c6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	685a      	ldr	r2, [r3, #4]
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	685b      	ldr	r3, [r3, #4]
 800a4b4:	441a      	add	r2, r3
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	681a      	ldr	r2, [r3, #0]
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	601a      	str	r2, [r3, #0]
 800a4c4:	e008      	b.n	800a4d8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a4c6:	4b0c      	ldr	r3, [pc, #48]	; (800a4f8 <prvInsertBlockIntoFreeList+0xb0>)
 800a4c8:	681a      	ldr	r2, [r3, #0]
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	601a      	str	r2, [r3, #0]
 800a4ce:	e003      	b.n	800a4d8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a4d0:	68fb      	ldr	r3, [r7, #12]
 800a4d2:	681a      	ldr	r2, [r3, #0]
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a4d8:	68fa      	ldr	r2, [r7, #12]
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	429a      	cmp	r2, r3
 800a4de:	d002      	beq.n	800a4e6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a4e0:	68fb      	ldr	r3, [r7, #12]
 800a4e2:	687a      	ldr	r2, [r7, #4]
 800a4e4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a4e6:	bf00      	nop
 800a4e8:	3714      	adds	r7, #20
 800a4ea:	46bd      	mov	sp, r7
 800a4ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4f0:	4770      	bx	lr
 800a4f2:	bf00      	nop
 800a4f4:	20004a14 	.word	0x20004a14
 800a4f8:	20004a1c 	.word	0x20004a1c

0800a4fc <__errno>:
 800a4fc:	4b01      	ldr	r3, [pc, #4]	; (800a504 <__errno+0x8>)
 800a4fe:	6818      	ldr	r0, [r3, #0]
 800a500:	4770      	bx	lr
 800a502:	bf00      	nop
 800a504:	20000098 	.word	0x20000098

0800a508 <__libc_init_array>:
 800a508:	b570      	push	{r4, r5, r6, lr}
 800a50a:	4d0d      	ldr	r5, [pc, #52]	; (800a540 <__libc_init_array+0x38>)
 800a50c:	4c0d      	ldr	r4, [pc, #52]	; (800a544 <__libc_init_array+0x3c>)
 800a50e:	1b64      	subs	r4, r4, r5
 800a510:	10a4      	asrs	r4, r4, #2
 800a512:	2600      	movs	r6, #0
 800a514:	42a6      	cmp	r6, r4
 800a516:	d109      	bne.n	800a52c <__libc_init_array+0x24>
 800a518:	4d0b      	ldr	r5, [pc, #44]	; (800a548 <__libc_init_array+0x40>)
 800a51a:	4c0c      	ldr	r4, [pc, #48]	; (800a54c <__libc_init_array+0x44>)
 800a51c:	f001 f9be 	bl	800b89c <_init>
 800a520:	1b64      	subs	r4, r4, r5
 800a522:	10a4      	asrs	r4, r4, #2
 800a524:	2600      	movs	r6, #0
 800a526:	42a6      	cmp	r6, r4
 800a528:	d105      	bne.n	800a536 <__libc_init_array+0x2e>
 800a52a:	bd70      	pop	{r4, r5, r6, pc}
 800a52c:	f855 3b04 	ldr.w	r3, [r5], #4
 800a530:	4798      	blx	r3
 800a532:	3601      	adds	r6, #1
 800a534:	e7ee      	b.n	800a514 <__libc_init_array+0xc>
 800a536:	f855 3b04 	ldr.w	r3, [r5], #4
 800a53a:	4798      	blx	r3
 800a53c:	3601      	adds	r6, #1
 800a53e:	e7f2      	b.n	800a526 <__libc_init_array+0x1e>
 800a540:	0800beb0 	.word	0x0800beb0
 800a544:	0800beb0 	.word	0x0800beb0
 800a548:	0800beb0 	.word	0x0800beb0
 800a54c:	0800beb4 	.word	0x0800beb4

0800a550 <memcpy>:
 800a550:	440a      	add	r2, r1
 800a552:	4291      	cmp	r1, r2
 800a554:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800a558:	d100      	bne.n	800a55c <memcpy+0xc>
 800a55a:	4770      	bx	lr
 800a55c:	b510      	push	{r4, lr}
 800a55e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a562:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a566:	4291      	cmp	r1, r2
 800a568:	d1f9      	bne.n	800a55e <memcpy+0xe>
 800a56a:	bd10      	pop	{r4, pc}

0800a56c <memset>:
 800a56c:	4402      	add	r2, r0
 800a56e:	4603      	mov	r3, r0
 800a570:	4293      	cmp	r3, r2
 800a572:	d100      	bne.n	800a576 <memset+0xa>
 800a574:	4770      	bx	lr
 800a576:	f803 1b01 	strb.w	r1, [r3], #1
 800a57a:	e7f9      	b.n	800a570 <memset+0x4>

0800a57c <iprintf>:
 800a57c:	b40f      	push	{r0, r1, r2, r3}
 800a57e:	4b0a      	ldr	r3, [pc, #40]	; (800a5a8 <iprintf+0x2c>)
 800a580:	b513      	push	{r0, r1, r4, lr}
 800a582:	681c      	ldr	r4, [r3, #0]
 800a584:	b124      	cbz	r4, 800a590 <iprintf+0x14>
 800a586:	69a3      	ldr	r3, [r4, #24]
 800a588:	b913      	cbnz	r3, 800a590 <iprintf+0x14>
 800a58a:	4620      	mov	r0, r4
 800a58c:	f000 fa7e 	bl	800aa8c <__sinit>
 800a590:	ab05      	add	r3, sp, #20
 800a592:	9a04      	ldr	r2, [sp, #16]
 800a594:	68a1      	ldr	r1, [r4, #8]
 800a596:	9301      	str	r3, [sp, #4]
 800a598:	4620      	mov	r0, r4
 800a59a:	f000 fdab 	bl	800b0f4 <_vfiprintf_r>
 800a59e:	b002      	add	sp, #8
 800a5a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a5a4:	b004      	add	sp, #16
 800a5a6:	4770      	bx	lr
 800a5a8:	20000098 	.word	0x20000098

0800a5ac <_puts_r>:
 800a5ac:	b570      	push	{r4, r5, r6, lr}
 800a5ae:	460e      	mov	r6, r1
 800a5b0:	4605      	mov	r5, r0
 800a5b2:	b118      	cbz	r0, 800a5bc <_puts_r+0x10>
 800a5b4:	6983      	ldr	r3, [r0, #24]
 800a5b6:	b90b      	cbnz	r3, 800a5bc <_puts_r+0x10>
 800a5b8:	f000 fa68 	bl	800aa8c <__sinit>
 800a5bc:	69ab      	ldr	r3, [r5, #24]
 800a5be:	68ac      	ldr	r4, [r5, #8]
 800a5c0:	b913      	cbnz	r3, 800a5c8 <_puts_r+0x1c>
 800a5c2:	4628      	mov	r0, r5
 800a5c4:	f000 fa62 	bl	800aa8c <__sinit>
 800a5c8:	4b2c      	ldr	r3, [pc, #176]	; (800a67c <_puts_r+0xd0>)
 800a5ca:	429c      	cmp	r4, r3
 800a5cc:	d120      	bne.n	800a610 <_puts_r+0x64>
 800a5ce:	686c      	ldr	r4, [r5, #4]
 800a5d0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a5d2:	07db      	lsls	r3, r3, #31
 800a5d4:	d405      	bmi.n	800a5e2 <_puts_r+0x36>
 800a5d6:	89a3      	ldrh	r3, [r4, #12]
 800a5d8:	0598      	lsls	r0, r3, #22
 800a5da:	d402      	bmi.n	800a5e2 <_puts_r+0x36>
 800a5dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a5de:	f000 faf3 	bl	800abc8 <__retarget_lock_acquire_recursive>
 800a5e2:	89a3      	ldrh	r3, [r4, #12]
 800a5e4:	0719      	lsls	r1, r3, #28
 800a5e6:	d51d      	bpl.n	800a624 <_puts_r+0x78>
 800a5e8:	6923      	ldr	r3, [r4, #16]
 800a5ea:	b1db      	cbz	r3, 800a624 <_puts_r+0x78>
 800a5ec:	3e01      	subs	r6, #1
 800a5ee:	68a3      	ldr	r3, [r4, #8]
 800a5f0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800a5f4:	3b01      	subs	r3, #1
 800a5f6:	60a3      	str	r3, [r4, #8]
 800a5f8:	bb39      	cbnz	r1, 800a64a <_puts_r+0x9e>
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	da38      	bge.n	800a670 <_puts_r+0xc4>
 800a5fe:	4622      	mov	r2, r4
 800a600:	210a      	movs	r1, #10
 800a602:	4628      	mov	r0, r5
 800a604:	f000 f868 	bl	800a6d8 <__swbuf_r>
 800a608:	3001      	adds	r0, #1
 800a60a:	d011      	beq.n	800a630 <_puts_r+0x84>
 800a60c:	250a      	movs	r5, #10
 800a60e:	e011      	b.n	800a634 <_puts_r+0x88>
 800a610:	4b1b      	ldr	r3, [pc, #108]	; (800a680 <_puts_r+0xd4>)
 800a612:	429c      	cmp	r4, r3
 800a614:	d101      	bne.n	800a61a <_puts_r+0x6e>
 800a616:	68ac      	ldr	r4, [r5, #8]
 800a618:	e7da      	b.n	800a5d0 <_puts_r+0x24>
 800a61a:	4b1a      	ldr	r3, [pc, #104]	; (800a684 <_puts_r+0xd8>)
 800a61c:	429c      	cmp	r4, r3
 800a61e:	bf08      	it	eq
 800a620:	68ec      	ldreq	r4, [r5, #12]
 800a622:	e7d5      	b.n	800a5d0 <_puts_r+0x24>
 800a624:	4621      	mov	r1, r4
 800a626:	4628      	mov	r0, r5
 800a628:	f000 f8a8 	bl	800a77c <__swsetup_r>
 800a62c:	2800      	cmp	r0, #0
 800a62e:	d0dd      	beq.n	800a5ec <_puts_r+0x40>
 800a630:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800a634:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a636:	07da      	lsls	r2, r3, #31
 800a638:	d405      	bmi.n	800a646 <_puts_r+0x9a>
 800a63a:	89a3      	ldrh	r3, [r4, #12]
 800a63c:	059b      	lsls	r3, r3, #22
 800a63e:	d402      	bmi.n	800a646 <_puts_r+0x9a>
 800a640:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a642:	f000 fac2 	bl	800abca <__retarget_lock_release_recursive>
 800a646:	4628      	mov	r0, r5
 800a648:	bd70      	pop	{r4, r5, r6, pc}
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	da04      	bge.n	800a658 <_puts_r+0xac>
 800a64e:	69a2      	ldr	r2, [r4, #24]
 800a650:	429a      	cmp	r2, r3
 800a652:	dc06      	bgt.n	800a662 <_puts_r+0xb6>
 800a654:	290a      	cmp	r1, #10
 800a656:	d004      	beq.n	800a662 <_puts_r+0xb6>
 800a658:	6823      	ldr	r3, [r4, #0]
 800a65a:	1c5a      	adds	r2, r3, #1
 800a65c:	6022      	str	r2, [r4, #0]
 800a65e:	7019      	strb	r1, [r3, #0]
 800a660:	e7c5      	b.n	800a5ee <_puts_r+0x42>
 800a662:	4622      	mov	r2, r4
 800a664:	4628      	mov	r0, r5
 800a666:	f000 f837 	bl	800a6d8 <__swbuf_r>
 800a66a:	3001      	adds	r0, #1
 800a66c:	d1bf      	bne.n	800a5ee <_puts_r+0x42>
 800a66e:	e7df      	b.n	800a630 <_puts_r+0x84>
 800a670:	6823      	ldr	r3, [r4, #0]
 800a672:	250a      	movs	r5, #10
 800a674:	1c5a      	adds	r2, r3, #1
 800a676:	6022      	str	r2, [r4, #0]
 800a678:	701d      	strb	r5, [r3, #0]
 800a67a:	e7db      	b.n	800a634 <_puts_r+0x88>
 800a67c:	0800be34 	.word	0x0800be34
 800a680:	0800be54 	.word	0x0800be54
 800a684:	0800be14 	.word	0x0800be14

0800a688 <puts>:
 800a688:	4b02      	ldr	r3, [pc, #8]	; (800a694 <puts+0xc>)
 800a68a:	4601      	mov	r1, r0
 800a68c:	6818      	ldr	r0, [r3, #0]
 800a68e:	f7ff bf8d 	b.w	800a5ac <_puts_r>
 800a692:	bf00      	nop
 800a694:	20000098 	.word	0x20000098

0800a698 <siprintf>:
 800a698:	b40e      	push	{r1, r2, r3}
 800a69a:	b500      	push	{lr}
 800a69c:	b09c      	sub	sp, #112	; 0x70
 800a69e:	ab1d      	add	r3, sp, #116	; 0x74
 800a6a0:	9002      	str	r0, [sp, #8]
 800a6a2:	9006      	str	r0, [sp, #24]
 800a6a4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a6a8:	4809      	ldr	r0, [pc, #36]	; (800a6d0 <siprintf+0x38>)
 800a6aa:	9107      	str	r1, [sp, #28]
 800a6ac:	9104      	str	r1, [sp, #16]
 800a6ae:	4909      	ldr	r1, [pc, #36]	; (800a6d4 <siprintf+0x3c>)
 800a6b0:	f853 2b04 	ldr.w	r2, [r3], #4
 800a6b4:	9105      	str	r1, [sp, #20]
 800a6b6:	6800      	ldr	r0, [r0, #0]
 800a6b8:	9301      	str	r3, [sp, #4]
 800a6ba:	a902      	add	r1, sp, #8
 800a6bc:	f000 fbf0 	bl	800aea0 <_svfiprintf_r>
 800a6c0:	9b02      	ldr	r3, [sp, #8]
 800a6c2:	2200      	movs	r2, #0
 800a6c4:	701a      	strb	r2, [r3, #0]
 800a6c6:	b01c      	add	sp, #112	; 0x70
 800a6c8:	f85d eb04 	ldr.w	lr, [sp], #4
 800a6cc:	b003      	add	sp, #12
 800a6ce:	4770      	bx	lr
 800a6d0:	20000098 	.word	0x20000098
 800a6d4:	ffff0208 	.word	0xffff0208

0800a6d8 <__swbuf_r>:
 800a6d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6da:	460e      	mov	r6, r1
 800a6dc:	4614      	mov	r4, r2
 800a6de:	4605      	mov	r5, r0
 800a6e0:	b118      	cbz	r0, 800a6ea <__swbuf_r+0x12>
 800a6e2:	6983      	ldr	r3, [r0, #24]
 800a6e4:	b90b      	cbnz	r3, 800a6ea <__swbuf_r+0x12>
 800a6e6:	f000 f9d1 	bl	800aa8c <__sinit>
 800a6ea:	4b21      	ldr	r3, [pc, #132]	; (800a770 <__swbuf_r+0x98>)
 800a6ec:	429c      	cmp	r4, r3
 800a6ee:	d12b      	bne.n	800a748 <__swbuf_r+0x70>
 800a6f0:	686c      	ldr	r4, [r5, #4]
 800a6f2:	69a3      	ldr	r3, [r4, #24]
 800a6f4:	60a3      	str	r3, [r4, #8]
 800a6f6:	89a3      	ldrh	r3, [r4, #12]
 800a6f8:	071a      	lsls	r2, r3, #28
 800a6fa:	d52f      	bpl.n	800a75c <__swbuf_r+0x84>
 800a6fc:	6923      	ldr	r3, [r4, #16]
 800a6fe:	b36b      	cbz	r3, 800a75c <__swbuf_r+0x84>
 800a700:	6923      	ldr	r3, [r4, #16]
 800a702:	6820      	ldr	r0, [r4, #0]
 800a704:	1ac0      	subs	r0, r0, r3
 800a706:	6963      	ldr	r3, [r4, #20]
 800a708:	b2f6      	uxtb	r6, r6
 800a70a:	4283      	cmp	r3, r0
 800a70c:	4637      	mov	r7, r6
 800a70e:	dc04      	bgt.n	800a71a <__swbuf_r+0x42>
 800a710:	4621      	mov	r1, r4
 800a712:	4628      	mov	r0, r5
 800a714:	f000 f926 	bl	800a964 <_fflush_r>
 800a718:	bb30      	cbnz	r0, 800a768 <__swbuf_r+0x90>
 800a71a:	68a3      	ldr	r3, [r4, #8]
 800a71c:	3b01      	subs	r3, #1
 800a71e:	60a3      	str	r3, [r4, #8]
 800a720:	6823      	ldr	r3, [r4, #0]
 800a722:	1c5a      	adds	r2, r3, #1
 800a724:	6022      	str	r2, [r4, #0]
 800a726:	701e      	strb	r6, [r3, #0]
 800a728:	6963      	ldr	r3, [r4, #20]
 800a72a:	3001      	adds	r0, #1
 800a72c:	4283      	cmp	r3, r0
 800a72e:	d004      	beq.n	800a73a <__swbuf_r+0x62>
 800a730:	89a3      	ldrh	r3, [r4, #12]
 800a732:	07db      	lsls	r3, r3, #31
 800a734:	d506      	bpl.n	800a744 <__swbuf_r+0x6c>
 800a736:	2e0a      	cmp	r6, #10
 800a738:	d104      	bne.n	800a744 <__swbuf_r+0x6c>
 800a73a:	4621      	mov	r1, r4
 800a73c:	4628      	mov	r0, r5
 800a73e:	f000 f911 	bl	800a964 <_fflush_r>
 800a742:	b988      	cbnz	r0, 800a768 <__swbuf_r+0x90>
 800a744:	4638      	mov	r0, r7
 800a746:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a748:	4b0a      	ldr	r3, [pc, #40]	; (800a774 <__swbuf_r+0x9c>)
 800a74a:	429c      	cmp	r4, r3
 800a74c:	d101      	bne.n	800a752 <__swbuf_r+0x7a>
 800a74e:	68ac      	ldr	r4, [r5, #8]
 800a750:	e7cf      	b.n	800a6f2 <__swbuf_r+0x1a>
 800a752:	4b09      	ldr	r3, [pc, #36]	; (800a778 <__swbuf_r+0xa0>)
 800a754:	429c      	cmp	r4, r3
 800a756:	bf08      	it	eq
 800a758:	68ec      	ldreq	r4, [r5, #12]
 800a75a:	e7ca      	b.n	800a6f2 <__swbuf_r+0x1a>
 800a75c:	4621      	mov	r1, r4
 800a75e:	4628      	mov	r0, r5
 800a760:	f000 f80c 	bl	800a77c <__swsetup_r>
 800a764:	2800      	cmp	r0, #0
 800a766:	d0cb      	beq.n	800a700 <__swbuf_r+0x28>
 800a768:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800a76c:	e7ea      	b.n	800a744 <__swbuf_r+0x6c>
 800a76e:	bf00      	nop
 800a770:	0800be34 	.word	0x0800be34
 800a774:	0800be54 	.word	0x0800be54
 800a778:	0800be14 	.word	0x0800be14

0800a77c <__swsetup_r>:
 800a77c:	4b32      	ldr	r3, [pc, #200]	; (800a848 <__swsetup_r+0xcc>)
 800a77e:	b570      	push	{r4, r5, r6, lr}
 800a780:	681d      	ldr	r5, [r3, #0]
 800a782:	4606      	mov	r6, r0
 800a784:	460c      	mov	r4, r1
 800a786:	b125      	cbz	r5, 800a792 <__swsetup_r+0x16>
 800a788:	69ab      	ldr	r3, [r5, #24]
 800a78a:	b913      	cbnz	r3, 800a792 <__swsetup_r+0x16>
 800a78c:	4628      	mov	r0, r5
 800a78e:	f000 f97d 	bl	800aa8c <__sinit>
 800a792:	4b2e      	ldr	r3, [pc, #184]	; (800a84c <__swsetup_r+0xd0>)
 800a794:	429c      	cmp	r4, r3
 800a796:	d10f      	bne.n	800a7b8 <__swsetup_r+0x3c>
 800a798:	686c      	ldr	r4, [r5, #4]
 800a79a:	89a3      	ldrh	r3, [r4, #12]
 800a79c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a7a0:	0719      	lsls	r1, r3, #28
 800a7a2:	d42c      	bmi.n	800a7fe <__swsetup_r+0x82>
 800a7a4:	06dd      	lsls	r5, r3, #27
 800a7a6:	d411      	bmi.n	800a7cc <__swsetup_r+0x50>
 800a7a8:	2309      	movs	r3, #9
 800a7aa:	6033      	str	r3, [r6, #0]
 800a7ac:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a7b0:	81a3      	strh	r3, [r4, #12]
 800a7b2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a7b6:	e03e      	b.n	800a836 <__swsetup_r+0xba>
 800a7b8:	4b25      	ldr	r3, [pc, #148]	; (800a850 <__swsetup_r+0xd4>)
 800a7ba:	429c      	cmp	r4, r3
 800a7bc:	d101      	bne.n	800a7c2 <__swsetup_r+0x46>
 800a7be:	68ac      	ldr	r4, [r5, #8]
 800a7c0:	e7eb      	b.n	800a79a <__swsetup_r+0x1e>
 800a7c2:	4b24      	ldr	r3, [pc, #144]	; (800a854 <__swsetup_r+0xd8>)
 800a7c4:	429c      	cmp	r4, r3
 800a7c6:	bf08      	it	eq
 800a7c8:	68ec      	ldreq	r4, [r5, #12]
 800a7ca:	e7e6      	b.n	800a79a <__swsetup_r+0x1e>
 800a7cc:	0758      	lsls	r0, r3, #29
 800a7ce:	d512      	bpl.n	800a7f6 <__swsetup_r+0x7a>
 800a7d0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a7d2:	b141      	cbz	r1, 800a7e6 <__swsetup_r+0x6a>
 800a7d4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a7d8:	4299      	cmp	r1, r3
 800a7da:	d002      	beq.n	800a7e2 <__swsetup_r+0x66>
 800a7dc:	4630      	mov	r0, r6
 800a7de:	f000 fa59 	bl	800ac94 <_free_r>
 800a7e2:	2300      	movs	r3, #0
 800a7e4:	6363      	str	r3, [r4, #52]	; 0x34
 800a7e6:	89a3      	ldrh	r3, [r4, #12]
 800a7e8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a7ec:	81a3      	strh	r3, [r4, #12]
 800a7ee:	2300      	movs	r3, #0
 800a7f0:	6063      	str	r3, [r4, #4]
 800a7f2:	6923      	ldr	r3, [r4, #16]
 800a7f4:	6023      	str	r3, [r4, #0]
 800a7f6:	89a3      	ldrh	r3, [r4, #12]
 800a7f8:	f043 0308 	orr.w	r3, r3, #8
 800a7fc:	81a3      	strh	r3, [r4, #12]
 800a7fe:	6923      	ldr	r3, [r4, #16]
 800a800:	b94b      	cbnz	r3, 800a816 <__swsetup_r+0x9a>
 800a802:	89a3      	ldrh	r3, [r4, #12]
 800a804:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a808:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a80c:	d003      	beq.n	800a816 <__swsetup_r+0x9a>
 800a80e:	4621      	mov	r1, r4
 800a810:	4630      	mov	r0, r6
 800a812:	f000 f9ff 	bl	800ac14 <__smakebuf_r>
 800a816:	89a0      	ldrh	r0, [r4, #12]
 800a818:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a81c:	f010 0301 	ands.w	r3, r0, #1
 800a820:	d00a      	beq.n	800a838 <__swsetup_r+0xbc>
 800a822:	2300      	movs	r3, #0
 800a824:	60a3      	str	r3, [r4, #8]
 800a826:	6963      	ldr	r3, [r4, #20]
 800a828:	425b      	negs	r3, r3
 800a82a:	61a3      	str	r3, [r4, #24]
 800a82c:	6923      	ldr	r3, [r4, #16]
 800a82e:	b943      	cbnz	r3, 800a842 <__swsetup_r+0xc6>
 800a830:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a834:	d1ba      	bne.n	800a7ac <__swsetup_r+0x30>
 800a836:	bd70      	pop	{r4, r5, r6, pc}
 800a838:	0781      	lsls	r1, r0, #30
 800a83a:	bf58      	it	pl
 800a83c:	6963      	ldrpl	r3, [r4, #20]
 800a83e:	60a3      	str	r3, [r4, #8]
 800a840:	e7f4      	b.n	800a82c <__swsetup_r+0xb0>
 800a842:	2000      	movs	r0, #0
 800a844:	e7f7      	b.n	800a836 <__swsetup_r+0xba>
 800a846:	bf00      	nop
 800a848:	20000098 	.word	0x20000098
 800a84c:	0800be34 	.word	0x0800be34
 800a850:	0800be54 	.word	0x0800be54
 800a854:	0800be14 	.word	0x0800be14

0800a858 <__sflush_r>:
 800a858:	898a      	ldrh	r2, [r1, #12]
 800a85a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a85e:	4605      	mov	r5, r0
 800a860:	0710      	lsls	r0, r2, #28
 800a862:	460c      	mov	r4, r1
 800a864:	d458      	bmi.n	800a918 <__sflush_r+0xc0>
 800a866:	684b      	ldr	r3, [r1, #4]
 800a868:	2b00      	cmp	r3, #0
 800a86a:	dc05      	bgt.n	800a878 <__sflush_r+0x20>
 800a86c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a86e:	2b00      	cmp	r3, #0
 800a870:	dc02      	bgt.n	800a878 <__sflush_r+0x20>
 800a872:	2000      	movs	r0, #0
 800a874:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a878:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a87a:	2e00      	cmp	r6, #0
 800a87c:	d0f9      	beq.n	800a872 <__sflush_r+0x1a>
 800a87e:	2300      	movs	r3, #0
 800a880:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a884:	682f      	ldr	r7, [r5, #0]
 800a886:	602b      	str	r3, [r5, #0]
 800a888:	d032      	beq.n	800a8f0 <__sflush_r+0x98>
 800a88a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a88c:	89a3      	ldrh	r3, [r4, #12]
 800a88e:	075a      	lsls	r2, r3, #29
 800a890:	d505      	bpl.n	800a89e <__sflush_r+0x46>
 800a892:	6863      	ldr	r3, [r4, #4]
 800a894:	1ac0      	subs	r0, r0, r3
 800a896:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a898:	b10b      	cbz	r3, 800a89e <__sflush_r+0x46>
 800a89a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a89c:	1ac0      	subs	r0, r0, r3
 800a89e:	2300      	movs	r3, #0
 800a8a0:	4602      	mov	r2, r0
 800a8a2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a8a4:	6a21      	ldr	r1, [r4, #32]
 800a8a6:	4628      	mov	r0, r5
 800a8a8:	47b0      	blx	r6
 800a8aa:	1c43      	adds	r3, r0, #1
 800a8ac:	89a3      	ldrh	r3, [r4, #12]
 800a8ae:	d106      	bne.n	800a8be <__sflush_r+0x66>
 800a8b0:	6829      	ldr	r1, [r5, #0]
 800a8b2:	291d      	cmp	r1, #29
 800a8b4:	d82c      	bhi.n	800a910 <__sflush_r+0xb8>
 800a8b6:	4a2a      	ldr	r2, [pc, #168]	; (800a960 <__sflush_r+0x108>)
 800a8b8:	40ca      	lsrs	r2, r1
 800a8ba:	07d6      	lsls	r6, r2, #31
 800a8bc:	d528      	bpl.n	800a910 <__sflush_r+0xb8>
 800a8be:	2200      	movs	r2, #0
 800a8c0:	6062      	str	r2, [r4, #4]
 800a8c2:	04d9      	lsls	r1, r3, #19
 800a8c4:	6922      	ldr	r2, [r4, #16]
 800a8c6:	6022      	str	r2, [r4, #0]
 800a8c8:	d504      	bpl.n	800a8d4 <__sflush_r+0x7c>
 800a8ca:	1c42      	adds	r2, r0, #1
 800a8cc:	d101      	bne.n	800a8d2 <__sflush_r+0x7a>
 800a8ce:	682b      	ldr	r3, [r5, #0]
 800a8d0:	b903      	cbnz	r3, 800a8d4 <__sflush_r+0x7c>
 800a8d2:	6560      	str	r0, [r4, #84]	; 0x54
 800a8d4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a8d6:	602f      	str	r7, [r5, #0]
 800a8d8:	2900      	cmp	r1, #0
 800a8da:	d0ca      	beq.n	800a872 <__sflush_r+0x1a>
 800a8dc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a8e0:	4299      	cmp	r1, r3
 800a8e2:	d002      	beq.n	800a8ea <__sflush_r+0x92>
 800a8e4:	4628      	mov	r0, r5
 800a8e6:	f000 f9d5 	bl	800ac94 <_free_r>
 800a8ea:	2000      	movs	r0, #0
 800a8ec:	6360      	str	r0, [r4, #52]	; 0x34
 800a8ee:	e7c1      	b.n	800a874 <__sflush_r+0x1c>
 800a8f0:	6a21      	ldr	r1, [r4, #32]
 800a8f2:	2301      	movs	r3, #1
 800a8f4:	4628      	mov	r0, r5
 800a8f6:	47b0      	blx	r6
 800a8f8:	1c41      	adds	r1, r0, #1
 800a8fa:	d1c7      	bne.n	800a88c <__sflush_r+0x34>
 800a8fc:	682b      	ldr	r3, [r5, #0]
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	d0c4      	beq.n	800a88c <__sflush_r+0x34>
 800a902:	2b1d      	cmp	r3, #29
 800a904:	d001      	beq.n	800a90a <__sflush_r+0xb2>
 800a906:	2b16      	cmp	r3, #22
 800a908:	d101      	bne.n	800a90e <__sflush_r+0xb6>
 800a90a:	602f      	str	r7, [r5, #0]
 800a90c:	e7b1      	b.n	800a872 <__sflush_r+0x1a>
 800a90e:	89a3      	ldrh	r3, [r4, #12]
 800a910:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a914:	81a3      	strh	r3, [r4, #12]
 800a916:	e7ad      	b.n	800a874 <__sflush_r+0x1c>
 800a918:	690f      	ldr	r7, [r1, #16]
 800a91a:	2f00      	cmp	r7, #0
 800a91c:	d0a9      	beq.n	800a872 <__sflush_r+0x1a>
 800a91e:	0793      	lsls	r3, r2, #30
 800a920:	680e      	ldr	r6, [r1, #0]
 800a922:	bf08      	it	eq
 800a924:	694b      	ldreq	r3, [r1, #20]
 800a926:	600f      	str	r7, [r1, #0]
 800a928:	bf18      	it	ne
 800a92a:	2300      	movne	r3, #0
 800a92c:	eba6 0807 	sub.w	r8, r6, r7
 800a930:	608b      	str	r3, [r1, #8]
 800a932:	f1b8 0f00 	cmp.w	r8, #0
 800a936:	dd9c      	ble.n	800a872 <__sflush_r+0x1a>
 800a938:	6a21      	ldr	r1, [r4, #32]
 800a93a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a93c:	4643      	mov	r3, r8
 800a93e:	463a      	mov	r2, r7
 800a940:	4628      	mov	r0, r5
 800a942:	47b0      	blx	r6
 800a944:	2800      	cmp	r0, #0
 800a946:	dc06      	bgt.n	800a956 <__sflush_r+0xfe>
 800a948:	89a3      	ldrh	r3, [r4, #12]
 800a94a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a94e:	81a3      	strh	r3, [r4, #12]
 800a950:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a954:	e78e      	b.n	800a874 <__sflush_r+0x1c>
 800a956:	4407      	add	r7, r0
 800a958:	eba8 0800 	sub.w	r8, r8, r0
 800a95c:	e7e9      	b.n	800a932 <__sflush_r+0xda>
 800a95e:	bf00      	nop
 800a960:	20400001 	.word	0x20400001

0800a964 <_fflush_r>:
 800a964:	b538      	push	{r3, r4, r5, lr}
 800a966:	690b      	ldr	r3, [r1, #16]
 800a968:	4605      	mov	r5, r0
 800a96a:	460c      	mov	r4, r1
 800a96c:	b913      	cbnz	r3, 800a974 <_fflush_r+0x10>
 800a96e:	2500      	movs	r5, #0
 800a970:	4628      	mov	r0, r5
 800a972:	bd38      	pop	{r3, r4, r5, pc}
 800a974:	b118      	cbz	r0, 800a97e <_fflush_r+0x1a>
 800a976:	6983      	ldr	r3, [r0, #24]
 800a978:	b90b      	cbnz	r3, 800a97e <_fflush_r+0x1a>
 800a97a:	f000 f887 	bl	800aa8c <__sinit>
 800a97e:	4b14      	ldr	r3, [pc, #80]	; (800a9d0 <_fflush_r+0x6c>)
 800a980:	429c      	cmp	r4, r3
 800a982:	d11b      	bne.n	800a9bc <_fflush_r+0x58>
 800a984:	686c      	ldr	r4, [r5, #4]
 800a986:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	d0ef      	beq.n	800a96e <_fflush_r+0xa>
 800a98e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a990:	07d0      	lsls	r0, r2, #31
 800a992:	d404      	bmi.n	800a99e <_fflush_r+0x3a>
 800a994:	0599      	lsls	r1, r3, #22
 800a996:	d402      	bmi.n	800a99e <_fflush_r+0x3a>
 800a998:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a99a:	f000 f915 	bl	800abc8 <__retarget_lock_acquire_recursive>
 800a99e:	4628      	mov	r0, r5
 800a9a0:	4621      	mov	r1, r4
 800a9a2:	f7ff ff59 	bl	800a858 <__sflush_r>
 800a9a6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a9a8:	07da      	lsls	r2, r3, #31
 800a9aa:	4605      	mov	r5, r0
 800a9ac:	d4e0      	bmi.n	800a970 <_fflush_r+0xc>
 800a9ae:	89a3      	ldrh	r3, [r4, #12]
 800a9b0:	059b      	lsls	r3, r3, #22
 800a9b2:	d4dd      	bmi.n	800a970 <_fflush_r+0xc>
 800a9b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a9b6:	f000 f908 	bl	800abca <__retarget_lock_release_recursive>
 800a9ba:	e7d9      	b.n	800a970 <_fflush_r+0xc>
 800a9bc:	4b05      	ldr	r3, [pc, #20]	; (800a9d4 <_fflush_r+0x70>)
 800a9be:	429c      	cmp	r4, r3
 800a9c0:	d101      	bne.n	800a9c6 <_fflush_r+0x62>
 800a9c2:	68ac      	ldr	r4, [r5, #8]
 800a9c4:	e7df      	b.n	800a986 <_fflush_r+0x22>
 800a9c6:	4b04      	ldr	r3, [pc, #16]	; (800a9d8 <_fflush_r+0x74>)
 800a9c8:	429c      	cmp	r4, r3
 800a9ca:	bf08      	it	eq
 800a9cc:	68ec      	ldreq	r4, [r5, #12]
 800a9ce:	e7da      	b.n	800a986 <_fflush_r+0x22>
 800a9d0:	0800be34 	.word	0x0800be34
 800a9d4:	0800be54 	.word	0x0800be54
 800a9d8:	0800be14 	.word	0x0800be14

0800a9dc <std>:
 800a9dc:	2300      	movs	r3, #0
 800a9de:	b510      	push	{r4, lr}
 800a9e0:	4604      	mov	r4, r0
 800a9e2:	e9c0 3300 	strd	r3, r3, [r0]
 800a9e6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a9ea:	6083      	str	r3, [r0, #8]
 800a9ec:	8181      	strh	r1, [r0, #12]
 800a9ee:	6643      	str	r3, [r0, #100]	; 0x64
 800a9f0:	81c2      	strh	r2, [r0, #14]
 800a9f2:	6183      	str	r3, [r0, #24]
 800a9f4:	4619      	mov	r1, r3
 800a9f6:	2208      	movs	r2, #8
 800a9f8:	305c      	adds	r0, #92	; 0x5c
 800a9fa:	f7ff fdb7 	bl	800a56c <memset>
 800a9fe:	4b05      	ldr	r3, [pc, #20]	; (800aa14 <std+0x38>)
 800aa00:	6263      	str	r3, [r4, #36]	; 0x24
 800aa02:	4b05      	ldr	r3, [pc, #20]	; (800aa18 <std+0x3c>)
 800aa04:	62a3      	str	r3, [r4, #40]	; 0x28
 800aa06:	4b05      	ldr	r3, [pc, #20]	; (800aa1c <std+0x40>)
 800aa08:	62e3      	str	r3, [r4, #44]	; 0x2c
 800aa0a:	4b05      	ldr	r3, [pc, #20]	; (800aa20 <std+0x44>)
 800aa0c:	6224      	str	r4, [r4, #32]
 800aa0e:	6323      	str	r3, [r4, #48]	; 0x30
 800aa10:	bd10      	pop	{r4, pc}
 800aa12:	bf00      	nop
 800aa14:	0800b69d 	.word	0x0800b69d
 800aa18:	0800b6bf 	.word	0x0800b6bf
 800aa1c:	0800b6f7 	.word	0x0800b6f7
 800aa20:	0800b71b 	.word	0x0800b71b

0800aa24 <_cleanup_r>:
 800aa24:	4901      	ldr	r1, [pc, #4]	; (800aa2c <_cleanup_r+0x8>)
 800aa26:	f000 b8af 	b.w	800ab88 <_fwalk_reent>
 800aa2a:	bf00      	nop
 800aa2c:	0800a965 	.word	0x0800a965

0800aa30 <__sfmoreglue>:
 800aa30:	b570      	push	{r4, r5, r6, lr}
 800aa32:	1e4a      	subs	r2, r1, #1
 800aa34:	2568      	movs	r5, #104	; 0x68
 800aa36:	4355      	muls	r5, r2
 800aa38:	460e      	mov	r6, r1
 800aa3a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800aa3e:	f000 f979 	bl	800ad34 <_malloc_r>
 800aa42:	4604      	mov	r4, r0
 800aa44:	b140      	cbz	r0, 800aa58 <__sfmoreglue+0x28>
 800aa46:	2100      	movs	r1, #0
 800aa48:	e9c0 1600 	strd	r1, r6, [r0]
 800aa4c:	300c      	adds	r0, #12
 800aa4e:	60a0      	str	r0, [r4, #8]
 800aa50:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800aa54:	f7ff fd8a 	bl	800a56c <memset>
 800aa58:	4620      	mov	r0, r4
 800aa5a:	bd70      	pop	{r4, r5, r6, pc}

0800aa5c <__sfp_lock_acquire>:
 800aa5c:	4801      	ldr	r0, [pc, #4]	; (800aa64 <__sfp_lock_acquire+0x8>)
 800aa5e:	f000 b8b3 	b.w	800abc8 <__retarget_lock_acquire_recursive>
 800aa62:	bf00      	nop
 800aa64:	2000598c 	.word	0x2000598c

0800aa68 <__sfp_lock_release>:
 800aa68:	4801      	ldr	r0, [pc, #4]	; (800aa70 <__sfp_lock_release+0x8>)
 800aa6a:	f000 b8ae 	b.w	800abca <__retarget_lock_release_recursive>
 800aa6e:	bf00      	nop
 800aa70:	2000598c 	.word	0x2000598c

0800aa74 <__sinit_lock_acquire>:
 800aa74:	4801      	ldr	r0, [pc, #4]	; (800aa7c <__sinit_lock_acquire+0x8>)
 800aa76:	f000 b8a7 	b.w	800abc8 <__retarget_lock_acquire_recursive>
 800aa7a:	bf00      	nop
 800aa7c:	20005987 	.word	0x20005987

0800aa80 <__sinit_lock_release>:
 800aa80:	4801      	ldr	r0, [pc, #4]	; (800aa88 <__sinit_lock_release+0x8>)
 800aa82:	f000 b8a2 	b.w	800abca <__retarget_lock_release_recursive>
 800aa86:	bf00      	nop
 800aa88:	20005987 	.word	0x20005987

0800aa8c <__sinit>:
 800aa8c:	b510      	push	{r4, lr}
 800aa8e:	4604      	mov	r4, r0
 800aa90:	f7ff fff0 	bl	800aa74 <__sinit_lock_acquire>
 800aa94:	69a3      	ldr	r3, [r4, #24]
 800aa96:	b11b      	cbz	r3, 800aaa0 <__sinit+0x14>
 800aa98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aa9c:	f7ff bff0 	b.w	800aa80 <__sinit_lock_release>
 800aaa0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800aaa4:	6523      	str	r3, [r4, #80]	; 0x50
 800aaa6:	4b13      	ldr	r3, [pc, #76]	; (800aaf4 <__sinit+0x68>)
 800aaa8:	4a13      	ldr	r2, [pc, #76]	; (800aaf8 <__sinit+0x6c>)
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	62a2      	str	r2, [r4, #40]	; 0x28
 800aaae:	42a3      	cmp	r3, r4
 800aab0:	bf04      	itt	eq
 800aab2:	2301      	moveq	r3, #1
 800aab4:	61a3      	streq	r3, [r4, #24]
 800aab6:	4620      	mov	r0, r4
 800aab8:	f000 f820 	bl	800aafc <__sfp>
 800aabc:	6060      	str	r0, [r4, #4]
 800aabe:	4620      	mov	r0, r4
 800aac0:	f000 f81c 	bl	800aafc <__sfp>
 800aac4:	60a0      	str	r0, [r4, #8]
 800aac6:	4620      	mov	r0, r4
 800aac8:	f000 f818 	bl	800aafc <__sfp>
 800aacc:	2200      	movs	r2, #0
 800aace:	60e0      	str	r0, [r4, #12]
 800aad0:	2104      	movs	r1, #4
 800aad2:	6860      	ldr	r0, [r4, #4]
 800aad4:	f7ff ff82 	bl	800a9dc <std>
 800aad8:	68a0      	ldr	r0, [r4, #8]
 800aada:	2201      	movs	r2, #1
 800aadc:	2109      	movs	r1, #9
 800aade:	f7ff ff7d 	bl	800a9dc <std>
 800aae2:	68e0      	ldr	r0, [r4, #12]
 800aae4:	2202      	movs	r2, #2
 800aae6:	2112      	movs	r1, #18
 800aae8:	f7ff ff78 	bl	800a9dc <std>
 800aaec:	2301      	movs	r3, #1
 800aaee:	61a3      	str	r3, [r4, #24]
 800aaf0:	e7d2      	b.n	800aa98 <__sinit+0xc>
 800aaf2:	bf00      	nop
 800aaf4:	0800be10 	.word	0x0800be10
 800aaf8:	0800aa25 	.word	0x0800aa25

0800aafc <__sfp>:
 800aafc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aafe:	4607      	mov	r7, r0
 800ab00:	f7ff ffac 	bl	800aa5c <__sfp_lock_acquire>
 800ab04:	4b1e      	ldr	r3, [pc, #120]	; (800ab80 <__sfp+0x84>)
 800ab06:	681e      	ldr	r6, [r3, #0]
 800ab08:	69b3      	ldr	r3, [r6, #24]
 800ab0a:	b913      	cbnz	r3, 800ab12 <__sfp+0x16>
 800ab0c:	4630      	mov	r0, r6
 800ab0e:	f7ff ffbd 	bl	800aa8c <__sinit>
 800ab12:	3648      	adds	r6, #72	; 0x48
 800ab14:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ab18:	3b01      	subs	r3, #1
 800ab1a:	d503      	bpl.n	800ab24 <__sfp+0x28>
 800ab1c:	6833      	ldr	r3, [r6, #0]
 800ab1e:	b30b      	cbz	r3, 800ab64 <__sfp+0x68>
 800ab20:	6836      	ldr	r6, [r6, #0]
 800ab22:	e7f7      	b.n	800ab14 <__sfp+0x18>
 800ab24:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ab28:	b9d5      	cbnz	r5, 800ab60 <__sfp+0x64>
 800ab2a:	4b16      	ldr	r3, [pc, #88]	; (800ab84 <__sfp+0x88>)
 800ab2c:	60e3      	str	r3, [r4, #12]
 800ab2e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ab32:	6665      	str	r5, [r4, #100]	; 0x64
 800ab34:	f000 f847 	bl	800abc6 <__retarget_lock_init_recursive>
 800ab38:	f7ff ff96 	bl	800aa68 <__sfp_lock_release>
 800ab3c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800ab40:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800ab44:	6025      	str	r5, [r4, #0]
 800ab46:	61a5      	str	r5, [r4, #24]
 800ab48:	2208      	movs	r2, #8
 800ab4a:	4629      	mov	r1, r5
 800ab4c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ab50:	f7ff fd0c 	bl	800a56c <memset>
 800ab54:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ab58:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800ab5c:	4620      	mov	r0, r4
 800ab5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ab60:	3468      	adds	r4, #104	; 0x68
 800ab62:	e7d9      	b.n	800ab18 <__sfp+0x1c>
 800ab64:	2104      	movs	r1, #4
 800ab66:	4638      	mov	r0, r7
 800ab68:	f7ff ff62 	bl	800aa30 <__sfmoreglue>
 800ab6c:	4604      	mov	r4, r0
 800ab6e:	6030      	str	r0, [r6, #0]
 800ab70:	2800      	cmp	r0, #0
 800ab72:	d1d5      	bne.n	800ab20 <__sfp+0x24>
 800ab74:	f7ff ff78 	bl	800aa68 <__sfp_lock_release>
 800ab78:	230c      	movs	r3, #12
 800ab7a:	603b      	str	r3, [r7, #0]
 800ab7c:	e7ee      	b.n	800ab5c <__sfp+0x60>
 800ab7e:	bf00      	nop
 800ab80:	0800be10 	.word	0x0800be10
 800ab84:	ffff0001 	.word	0xffff0001

0800ab88 <_fwalk_reent>:
 800ab88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ab8c:	4606      	mov	r6, r0
 800ab8e:	4688      	mov	r8, r1
 800ab90:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ab94:	2700      	movs	r7, #0
 800ab96:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ab9a:	f1b9 0901 	subs.w	r9, r9, #1
 800ab9e:	d505      	bpl.n	800abac <_fwalk_reent+0x24>
 800aba0:	6824      	ldr	r4, [r4, #0]
 800aba2:	2c00      	cmp	r4, #0
 800aba4:	d1f7      	bne.n	800ab96 <_fwalk_reent+0xe>
 800aba6:	4638      	mov	r0, r7
 800aba8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800abac:	89ab      	ldrh	r3, [r5, #12]
 800abae:	2b01      	cmp	r3, #1
 800abb0:	d907      	bls.n	800abc2 <_fwalk_reent+0x3a>
 800abb2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800abb6:	3301      	adds	r3, #1
 800abb8:	d003      	beq.n	800abc2 <_fwalk_reent+0x3a>
 800abba:	4629      	mov	r1, r5
 800abbc:	4630      	mov	r0, r6
 800abbe:	47c0      	blx	r8
 800abc0:	4307      	orrs	r7, r0
 800abc2:	3568      	adds	r5, #104	; 0x68
 800abc4:	e7e9      	b.n	800ab9a <_fwalk_reent+0x12>

0800abc6 <__retarget_lock_init_recursive>:
 800abc6:	4770      	bx	lr

0800abc8 <__retarget_lock_acquire_recursive>:
 800abc8:	4770      	bx	lr

0800abca <__retarget_lock_release_recursive>:
 800abca:	4770      	bx	lr

0800abcc <__swhatbuf_r>:
 800abcc:	b570      	push	{r4, r5, r6, lr}
 800abce:	460e      	mov	r6, r1
 800abd0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800abd4:	2900      	cmp	r1, #0
 800abd6:	b096      	sub	sp, #88	; 0x58
 800abd8:	4614      	mov	r4, r2
 800abda:	461d      	mov	r5, r3
 800abdc:	da07      	bge.n	800abee <__swhatbuf_r+0x22>
 800abde:	2300      	movs	r3, #0
 800abe0:	602b      	str	r3, [r5, #0]
 800abe2:	89b3      	ldrh	r3, [r6, #12]
 800abe4:	061a      	lsls	r2, r3, #24
 800abe6:	d410      	bmi.n	800ac0a <__swhatbuf_r+0x3e>
 800abe8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800abec:	e00e      	b.n	800ac0c <__swhatbuf_r+0x40>
 800abee:	466a      	mov	r2, sp
 800abf0:	f000 fdba 	bl	800b768 <_fstat_r>
 800abf4:	2800      	cmp	r0, #0
 800abf6:	dbf2      	blt.n	800abde <__swhatbuf_r+0x12>
 800abf8:	9a01      	ldr	r2, [sp, #4]
 800abfa:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800abfe:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ac02:	425a      	negs	r2, r3
 800ac04:	415a      	adcs	r2, r3
 800ac06:	602a      	str	r2, [r5, #0]
 800ac08:	e7ee      	b.n	800abe8 <__swhatbuf_r+0x1c>
 800ac0a:	2340      	movs	r3, #64	; 0x40
 800ac0c:	2000      	movs	r0, #0
 800ac0e:	6023      	str	r3, [r4, #0]
 800ac10:	b016      	add	sp, #88	; 0x58
 800ac12:	bd70      	pop	{r4, r5, r6, pc}

0800ac14 <__smakebuf_r>:
 800ac14:	898b      	ldrh	r3, [r1, #12]
 800ac16:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ac18:	079d      	lsls	r5, r3, #30
 800ac1a:	4606      	mov	r6, r0
 800ac1c:	460c      	mov	r4, r1
 800ac1e:	d507      	bpl.n	800ac30 <__smakebuf_r+0x1c>
 800ac20:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ac24:	6023      	str	r3, [r4, #0]
 800ac26:	6123      	str	r3, [r4, #16]
 800ac28:	2301      	movs	r3, #1
 800ac2a:	6163      	str	r3, [r4, #20]
 800ac2c:	b002      	add	sp, #8
 800ac2e:	bd70      	pop	{r4, r5, r6, pc}
 800ac30:	ab01      	add	r3, sp, #4
 800ac32:	466a      	mov	r2, sp
 800ac34:	f7ff ffca 	bl	800abcc <__swhatbuf_r>
 800ac38:	9900      	ldr	r1, [sp, #0]
 800ac3a:	4605      	mov	r5, r0
 800ac3c:	4630      	mov	r0, r6
 800ac3e:	f000 f879 	bl	800ad34 <_malloc_r>
 800ac42:	b948      	cbnz	r0, 800ac58 <__smakebuf_r+0x44>
 800ac44:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ac48:	059a      	lsls	r2, r3, #22
 800ac4a:	d4ef      	bmi.n	800ac2c <__smakebuf_r+0x18>
 800ac4c:	f023 0303 	bic.w	r3, r3, #3
 800ac50:	f043 0302 	orr.w	r3, r3, #2
 800ac54:	81a3      	strh	r3, [r4, #12]
 800ac56:	e7e3      	b.n	800ac20 <__smakebuf_r+0xc>
 800ac58:	4b0d      	ldr	r3, [pc, #52]	; (800ac90 <__smakebuf_r+0x7c>)
 800ac5a:	62b3      	str	r3, [r6, #40]	; 0x28
 800ac5c:	89a3      	ldrh	r3, [r4, #12]
 800ac5e:	6020      	str	r0, [r4, #0]
 800ac60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ac64:	81a3      	strh	r3, [r4, #12]
 800ac66:	9b00      	ldr	r3, [sp, #0]
 800ac68:	6163      	str	r3, [r4, #20]
 800ac6a:	9b01      	ldr	r3, [sp, #4]
 800ac6c:	6120      	str	r0, [r4, #16]
 800ac6e:	b15b      	cbz	r3, 800ac88 <__smakebuf_r+0x74>
 800ac70:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ac74:	4630      	mov	r0, r6
 800ac76:	f000 fd89 	bl	800b78c <_isatty_r>
 800ac7a:	b128      	cbz	r0, 800ac88 <__smakebuf_r+0x74>
 800ac7c:	89a3      	ldrh	r3, [r4, #12]
 800ac7e:	f023 0303 	bic.w	r3, r3, #3
 800ac82:	f043 0301 	orr.w	r3, r3, #1
 800ac86:	81a3      	strh	r3, [r4, #12]
 800ac88:	89a0      	ldrh	r0, [r4, #12]
 800ac8a:	4305      	orrs	r5, r0
 800ac8c:	81a5      	strh	r5, [r4, #12]
 800ac8e:	e7cd      	b.n	800ac2c <__smakebuf_r+0x18>
 800ac90:	0800aa25 	.word	0x0800aa25

0800ac94 <_free_r>:
 800ac94:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ac96:	2900      	cmp	r1, #0
 800ac98:	d048      	beq.n	800ad2c <_free_r+0x98>
 800ac9a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ac9e:	9001      	str	r0, [sp, #4]
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	f1a1 0404 	sub.w	r4, r1, #4
 800aca6:	bfb8      	it	lt
 800aca8:	18e4      	addlt	r4, r4, r3
 800acaa:	f000 fdab 	bl	800b804 <__malloc_lock>
 800acae:	4a20      	ldr	r2, [pc, #128]	; (800ad30 <_free_r+0x9c>)
 800acb0:	9801      	ldr	r0, [sp, #4]
 800acb2:	6813      	ldr	r3, [r2, #0]
 800acb4:	4615      	mov	r5, r2
 800acb6:	b933      	cbnz	r3, 800acc6 <_free_r+0x32>
 800acb8:	6063      	str	r3, [r4, #4]
 800acba:	6014      	str	r4, [r2, #0]
 800acbc:	b003      	add	sp, #12
 800acbe:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800acc2:	f000 bda5 	b.w	800b810 <__malloc_unlock>
 800acc6:	42a3      	cmp	r3, r4
 800acc8:	d90b      	bls.n	800ace2 <_free_r+0x4e>
 800acca:	6821      	ldr	r1, [r4, #0]
 800accc:	1862      	adds	r2, r4, r1
 800acce:	4293      	cmp	r3, r2
 800acd0:	bf04      	itt	eq
 800acd2:	681a      	ldreq	r2, [r3, #0]
 800acd4:	685b      	ldreq	r3, [r3, #4]
 800acd6:	6063      	str	r3, [r4, #4]
 800acd8:	bf04      	itt	eq
 800acda:	1852      	addeq	r2, r2, r1
 800acdc:	6022      	streq	r2, [r4, #0]
 800acde:	602c      	str	r4, [r5, #0]
 800ace0:	e7ec      	b.n	800acbc <_free_r+0x28>
 800ace2:	461a      	mov	r2, r3
 800ace4:	685b      	ldr	r3, [r3, #4]
 800ace6:	b10b      	cbz	r3, 800acec <_free_r+0x58>
 800ace8:	42a3      	cmp	r3, r4
 800acea:	d9fa      	bls.n	800ace2 <_free_r+0x4e>
 800acec:	6811      	ldr	r1, [r2, #0]
 800acee:	1855      	adds	r5, r2, r1
 800acf0:	42a5      	cmp	r5, r4
 800acf2:	d10b      	bne.n	800ad0c <_free_r+0x78>
 800acf4:	6824      	ldr	r4, [r4, #0]
 800acf6:	4421      	add	r1, r4
 800acf8:	1854      	adds	r4, r2, r1
 800acfa:	42a3      	cmp	r3, r4
 800acfc:	6011      	str	r1, [r2, #0]
 800acfe:	d1dd      	bne.n	800acbc <_free_r+0x28>
 800ad00:	681c      	ldr	r4, [r3, #0]
 800ad02:	685b      	ldr	r3, [r3, #4]
 800ad04:	6053      	str	r3, [r2, #4]
 800ad06:	4421      	add	r1, r4
 800ad08:	6011      	str	r1, [r2, #0]
 800ad0a:	e7d7      	b.n	800acbc <_free_r+0x28>
 800ad0c:	d902      	bls.n	800ad14 <_free_r+0x80>
 800ad0e:	230c      	movs	r3, #12
 800ad10:	6003      	str	r3, [r0, #0]
 800ad12:	e7d3      	b.n	800acbc <_free_r+0x28>
 800ad14:	6825      	ldr	r5, [r4, #0]
 800ad16:	1961      	adds	r1, r4, r5
 800ad18:	428b      	cmp	r3, r1
 800ad1a:	bf04      	itt	eq
 800ad1c:	6819      	ldreq	r1, [r3, #0]
 800ad1e:	685b      	ldreq	r3, [r3, #4]
 800ad20:	6063      	str	r3, [r4, #4]
 800ad22:	bf04      	itt	eq
 800ad24:	1949      	addeq	r1, r1, r5
 800ad26:	6021      	streq	r1, [r4, #0]
 800ad28:	6054      	str	r4, [r2, #4]
 800ad2a:	e7c7      	b.n	800acbc <_free_r+0x28>
 800ad2c:	b003      	add	sp, #12
 800ad2e:	bd30      	pop	{r4, r5, pc}
 800ad30:	20004a34 	.word	0x20004a34

0800ad34 <_malloc_r>:
 800ad34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad36:	1ccd      	adds	r5, r1, #3
 800ad38:	f025 0503 	bic.w	r5, r5, #3
 800ad3c:	3508      	adds	r5, #8
 800ad3e:	2d0c      	cmp	r5, #12
 800ad40:	bf38      	it	cc
 800ad42:	250c      	movcc	r5, #12
 800ad44:	2d00      	cmp	r5, #0
 800ad46:	4606      	mov	r6, r0
 800ad48:	db01      	blt.n	800ad4e <_malloc_r+0x1a>
 800ad4a:	42a9      	cmp	r1, r5
 800ad4c:	d903      	bls.n	800ad56 <_malloc_r+0x22>
 800ad4e:	230c      	movs	r3, #12
 800ad50:	6033      	str	r3, [r6, #0]
 800ad52:	2000      	movs	r0, #0
 800ad54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ad56:	f000 fd55 	bl	800b804 <__malloc_lock>
 800ad5a:	4921      	ldr	r1, [pc, #132]	; (800ade0 <_malloc_r+0xac>)
 800ad5c:	680a      	ldr	r2, [r1, #0]
 800ad5e:	4614      	mov	r4, r2
 800ad60:	b99c      	cbnz	r4, 800ad8a <_malloc_r+0x56>
 800ad62:	4f20      	ldr	r7, [pc, #128]	; (800ade4 <_malloc_r+0xb0>)
 800ad64:	683b      	ldr	r3, [r7, #0]
 800ad66:	b923      	cbnz	r3, 800ad72 <_malloc_r+0x3e>
 800ad68:	4621      	mov	r1, r4
 800ad6a:	4630      	mov	r0, r6
 800ad6c:	f000 fc86 	bl	800b67c <_sbrk_r>
 800ad70:	6038      	str	r0, [r7, #0]
 800ad72:	4629      	mov	r1, r5
 800ad74:	4630      	mov	r0, r6
 800ad76:	f000 fc81 	bl	800b67c <_sbrk_r>
 800ad7a:	1c43      	adds	r3, r0, #1
 800ad7c:	d123      	bne.n	800adc6 <_malloc_r+0x92>
 800ad7e:	230c      	movs	r3, #12
 800ad80:	6033      	str	r3, [r6, #0]
 800ad82:	4630      	mov	r0, r6
 800ad84:	f000 fd44 	bl	800b810 <__malloc_unlock>
 800ad88:	e7e3      	b.n	800ad52 <_malloc_r+0x1e>
 800ad8a:	6823      	ldr	r3, [r4, #0]
 800ad8c:	1b5b      	subs	r3, r3, r5
 800ad8e:	d417      	bmi.n	800adc0 <_malloc_r+0x8c>
 800ad90:	2b0b      	cmp	r3, #11
 800ad92:	d903      	bls.n	800ad9c <_malloc_r+0x68>
 800ad94:	6023      	str	r3, [r4, #0]
 800ad96:	441c      	add	r4, r3
 800ad98:	6025      	str	r5, [r4, #0]
 800ad9a:	e004      	b.n	800ada6 <_malloc_r+0x72>
 800ad9c:	6863      	ldr	r3, [r4, #4]
 800ad9e:	42a2      	cmp	r2, r4
 800ada0:	bf0c      	ite	eq
 800ada2:	600b      	streq	r3, [r1, #0]
 800ada4:	6053      	strne	r3, [r2, #4]
 800ada6:	4630      	mov	r0, r6
 800ada8:	f000 fd32 	bl	800b810 <__malloc_unlock>
 800adac:	f104 000b 	add.w	r0, r4, #11
 800adb0:	1d23      	adds	r3, r4, #4
 800adb2:	f020 0007 	bic.w	r0, r0, #7
 800adb6:	1ac2      	subs	r2, r0, r3
 800adb8:	d0cc      	beq.n	800ad54 <_malloc_r+0x20>
 800adba:	1a1b      	subs	r3, r3, r0
 800adbc:	50a3      	str	r3, [r4, r2]
 800adbe:	e7c9      	b.n	800ad54 <_malloc_r+0x20>
 800adc0:	4622      	mov	r2, r4
 800adc2:	6864      	ldr	r4, [r4, #4]
 800adc4:	e7cc      	b.n	800ad60 <_malloc_r+0x2c>
 800adc6:	1cc4      	adds	r4, r0, #3
 800adc8:	f024 0403 	bic.w	r4, r4, #3
 800adcc:	42a0      	cmp	r0, r4
 800adce:	d0e3      	beq.n	800ad98 <_malloc_r+0x64>
 800add0:	1a21      	subs	r1, r4, r0
 800add2:	4630      	mov	r0, r6
 800add4:	f000 fc52 	bl	800b67c <_sbrk_r>
 800add8:	3001      	adds	r0, #1
 800adda:	d1dd      	bne.n	800ad98 <_malloc_r+0x64>
 800addc:	e7cf      	b.n	800ad7e <_malloc_r+0x4a>
 800adde:	bf00      	nop
 800ade0:	20004a34 	.word	0x20004a34
 800ade4:	20004a38 	.word	0x20004a38

0800ade8 <__ssputs_r>:
 800ade8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800adec:	688e      	ldr	r6, [r1, #8]
 800adee:	429e      	cmp	r6, r3
 800adf0:	4682      	mov	sl, r0
 800adf2:	460c      	mov	r4, r1
 800adf4:	4690      	mov	r8, r2
 800adf6:	461f      	mov	r7, r3
 800adf8:	d838      	bhi.n	800ae6c <__ssputs_r+0x84>
 800adfa:	898a      	ldrh	r2, [r1, #12]
 800adfc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ae00:	d032      	beq.n	800ae68 <__ssputs_r+0x80>
 800ae02:	6825      	ldr	r5, [r4, #0]
 800ae04:	6909      	ldr	r1, [r1, #16]
 800ae06:	eba5 0901 	sub.w	r9, r5, r1
 800ae0a:	6965      	ldr	r5, [r4, #20]
 800ae0c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ae10:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ae14:	3301      	adds	r3, #1
 800ae16:	444b      	add	r3, r9
 800ae18:	106d      	asrs	r5, r5, #1
 800ae1a:	429d      	cmp	r5, r3
 800ae1c:	bf38      	it	cc
 800ae1e:	461d      	movcc	r5, r3
 800ae20:	0553      	lsls	r3, r2, #21
 800ae22:	d531      	bpl.n	800ae88 <__ssputs_r+0xa0>
 800ae24:	4629      	mov	r1, r5
 800ae26:	f7ff ff85 	bl	800ad34 <_malloc_r>
 800ae2a:	4606      	mov	r6, r0
 800ae2c:	b950      	cbnz	r0, 800ae44 <__ssputs_r+0x5c>
 800ae2e:	230c      	movs	r3, #12
 800ae30:	f8ca 3000 	str.w	r3, [sl]
 800ae34:	89a3      	ldrh	r3, [r4, #12]
 800ae36:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ae3a:	81a3      	strh	r3, [r4, #12]
 800ae3c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ae40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ae44:	6921      	ldr	r1, [r4, #16]
 800ae46:	464a      	mov	r2, r9
 800ae48:	f7ff fb82 	bl	800a550 <memcpy>
 800ae4c:	89a3      	ldrh	r3, [r4, #12]
 800ae4e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ae52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ae56:	81a3      	strh	r3, [r4, #12]
 800ae58:	6126      	str	r6, [r4, #16]
 800ae5a:	6165      	str	r5, [r4, #20]
 800ae5c:	444e      	add	r6, r9
 800ae5e:	eba5 0509 	sub.w	r5, r5, r9
 800ae62:	6026      	str	r6, [r4, #0]
 800ae64:	60a5      	str	r5, [r4, #8]
 800ae66:	463e      	mov	r6, r7
 800ae68:	42be      	cmp	r6, r7
 800ae6a:	d900      	bls.n	800ae6e <__ssputs_r+0x86>
 800ae6c:	463e      	mov	r6, r7
 800ae6e:	4632      	mov	r2, r6
 800ae70:	6820      	ldr	r0, [r4, #0]
 800ae72:	4641      	mov	r1, r8
 800ae74:	f000 fcac 	bl	800b7d0 <memmove>
 800ae78:	68a3      	ldr	r3, [r4, #8]
 800ae7a:	6822      	ldr	r2, [r4, #0]
 800ae7c:	1b9b      	subs	r3, r3, r6
 800ae7e:	4432      	add	r2, r6
 800ae80:	60a3      	str	r3, [r4, #8]
 800ae82:	6022      	str	r2, [r4, #0]
 800ae84:	2000      	movs	r0, #0
 800ae86:	e7db      	b.n	800ae40 <__ssputs_r+0x58>
 800ae88:	462a      	mov	r2, r5
 800ae8a:	f000 fcc7 	bl	800b81c <_realloc_r>
 800ae8e:	4606      	mov	r6, r0
 800ae90:	2800      	cmp	r0, #0
 800ae92:	d1e1      	bne.n	800ae58 <__ssputs_r+0x70>
 800ae94:	6921      	ldr	r1, [r4, #16]
 800ae96:	4650      	mov	r0, sl
 800ae98:	f7ff fefc 	bl	800ac94 <_free_r>
 800ae9c:	e7c7      	b.n	800ae2e <__ssputs_r+0x46>
	...

0800aea0 <_svfiprintf_r>:
 800aea0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aea4:	4698      	mov	r8, r3
 800aea6:	898b      	ldrh	r3, [r1, #12]
 800aea8:	061b      	lsls	r3, r3, #24
 800aeaa:	b09d      	sub	sp, #116	; 0x74
 800aeac:	4607      	mov	r7, r0
 800aeae:	460d      	mov	r5, r1
 800aeb0:	4614      	mov	r4, r2
 800aeb2:	d50e      	bpl.n	800aed2 <_svfiprintf_r+0x32>
 800aeb4:	690b      	ldr	r3, [r1, #16]
 800aeb6:	b963      	cbnz	r3, 800aed2 <_svfiprintf_r+0x32>
 800aeb8:	2140      	movs	r1, #64	; 0x40
 800aeba:	f7ff ff3b 	bl	800ad34 <_malloc_r>
 800aebe:	6028      	str	r0, [r5, #0]
 800aec0:	6128      	str	r0, [r5, #16]
 800aec2:	b920      	cbnz	r0, 800aece <_svfiprintf_r+0x2e>
 800aec4:	230c      	movs	r3, #12
 800aec6:	603b      	str	r3, [r7, #0]
 800aec8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800aecc:	e0d1      	b.n	800b072 <_svfiprintf_r+0x1d2>
 800aece:	2340      	movs	r3, #64	; 0x40
 800aed0:	616b      	str	r3, [r5, #20]
 800aed2:	2300      	movs	r3, #0
 800aed4:	9309      	str	r3, [sp, #36]	; 0x24
 800aed6:	2320      	movs	r3, #32
 800aed8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800aedc:	f8cd 800c 	str.w	r8, [sp, #12]
 800aee0:	2330      	movs	r3, #48	; 0x30
 800aee2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800b08c <_svfiprintf_r+0x1ec>
 800aee6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800aeea:	f04f 0901 	mov.w	r9, #1
 800aeee:	4623      	mov	r3, r4
 800aef0:	469a      	mov	sl, r3
 800aef2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aef6:	b10a      	cbz	r2, 800aefc <_svfiprintf_r+0x5c>
 800aef8:	2a25      	cmp	r2, #37	; 0x25
 800aefa:	d1f9      	bne.n	800aef0 <_svfiprintf_r+0x50>
 800aefc:	ebba 0b04 	subs.w	fp, sl, r4
 800af00:	d00b      	beq.n	800af1a <_svfiprintf_r+0x7a>
 800af02:	465b      	mov	r3, fp
 800af04:	4622      	mov	r2, r4
 800af06:	4629      	mov	r1, r5
 800af08:	4638      	mov	r0, r7
 800af0a:	f7ff ff6d 	bl	800ade8 <__ssputs_r>
 800af0e:	3001      	adds	r0, #1
 800af10:	f000 80aa 	beq.w	800b068 <_svfiprintf_r+0x1c8>
 800af14:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800af16:	445a      	add	r2, fp
 800af18:	9209      	str	r2, [sp, #36]	; 0x24
 800af1a:	f89a 3000 	ldrb.w	r3, [sl]
 800af1e:	2b00      	cmp	r3, #0
 800af20:	f000 80a2 	beq.w	800b068 <_svfiprintf_r+0x1c8>
 800af24:	2300      	movs	r3, #0
 800af26:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800af2a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800af2e:	f10a 0a01 	add.w	sl, sl, #1
 800af32:	9304      	str	r3, [sp, #16]
 800af34:	9307      	str	r3, [sp, #28]
 800af36:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800af3a:	931a      	str	r3, [sp, #104]	; 0x68
 800af3c:	4654      	mov	r4, sl
 800af3e:	2205      	movs	r2, #5
 800af40:	f814 1b01 	ldrb.w	r1, [r4], #1
 800af44:	4851      	ldr	r0, [pc, #324]	; (800b08c <_svfiprintf_r+0x1ec>)
 800af46:	f7f5 f94b 	bl	80001e0 <memchr>
 800af4a:	9a04      	ldr	r2, [sp, #16]
 800af4c:	b9d8      	cbnz	r0, 800af86 <_svfiprintf_r+0xe6>
 800af4e:	06d0      	lsls	r0, r2, #27
 800af50:	bf44      	itt	mi
 800af52:	2320      	movmi	r3, #32
 800af54:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800af58:	0711      	lsls	r1, r2, #28
 800af5a:	bf44      	itt	mi
 800af5c:	232b      	movmi	r3, #43	; 0x2b
 800af5e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800af62:	f89a 3000 	ldrb.w	r3, [sl]
 800af66:	2b2a      	cmp	r3, #42	; 0x2a
 800af68:	d015      	beq.n	800af96 <_svfiprintf_r+0xf6>
 800af6a:	9a07      	ldr	r2, [sp, #28]
 800af6c:	4654      	mov	r4, sl
 800af6e:	2000      	movs	r0, #0
 800af70:	f04f 0c0a 	mov.w	ip, #10
 800af74:	4621      	mov	r1, r4
 800af76:	f811 3b01 	ldrb.w	r3, [r1], #1
 800af7a:	3b30      	subs	r3, #48	; 0x30
 800af7c:	2b09      	cmp	r3, #9
 800af7e:	d94e      	bls.n	800b01e <_svfiprintf_r+0x17e>
 800af80:	b1b0      	cbz	r0, 800afb0 <_svfiprintf_r+0x110>
 800af82:	9207      	str	r2, [sp, #28]
 800af84:	e014      	b.n	800afb0 <_svfiprintf_r+0x110>
 800af86:	eba0 0308 	sub.w	r3, r0, r8
 800af8a:	fa09 f303 	lsl.w	r3, r9, r3
 800af8e:	4313      	orrs	r3, r2
 800af90:	9304      	str	r3, [sp, #16]
 800af92:	46a2      	mov	sl, r4
 800af94:	e7d2      	b.n	800af3c <_svfiprintf_r+0x9c>
 800af96:	9b03      	ldr	r3, [sp, #12]
 800af98:	1d19      	adds	r1, r3, #4
 800af9a:	681b      	ldr	r3, [r3, #0]
 800af9c:	9103      	str	r1, [sp, #12]
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	bfbb      	ittet	lt
 800afa2:	425b      	neglt	r3, r3
 800afa4:	f042 0202 	orrlt.w	r2, r2, #2
 800afa8:	9307      	strge	r3, [sp, #28]
 800afaa:	9307      	strlt	r3, [sp, #28]
 800afac:	bfb8      	it	lt
 800afae:	9204      	strlt	r2, [sp, #16]
 800afb0:	7823      	ldrb	r3, [r4, #0]
 800afb2:	2b2e      	cmp	r3, #46	; 0x2e
 800afb4:	d10c      	bne.n	800afd0 <_svfiprintf_r+0x130>
 800afb6:	7863      	ldrb	r3, [r4, #1]
 800afb8:	2b2a      	cmp	r3, #42	; 0x2a
 800afba:	d135      	bne.n	800b028 <_svfiprintf_r+0x188>
 800afbc:	9b03      	ldr	r3, [sp, #12]
 800afbe:	1d1a      	adds	r2, r3, #4
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	9203      	str	r2, [sp, #12]
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	bfb8      	it	lt
 800afc8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800afcc:	3402      	adds	r4, #2
 800afce:	9305      	str	r3, [sp, #20]
 800afd0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b09c <_svfiprintf_r+0x1fc>
 800afd4:	7821      	ldrb	r1, [r4, #0]
 800afd6:	2203      	movs	r2, #3
 800afd8:	4650      	mov	r0, sl
 800afda:	f7f5 f901 	bl	80001e0 <memchr>
 800afde:	b140      	cbz	r0, 800aff2 <_svfiprintf_r+0x152>
 800afe0:	2340      	movs	r3, #64	; 0x40
 800afe2:	eba0 000a 	sub.w	r0, r0, sl
 800afe6:	fa03 f000 	lsl.w	r0, r3, r0
 800afea:	9b04      	ldr	r3, [sp, #16]
 800afec:	4303      	orrs	r3, r0
 800afee:	3401      	adds	r4, #1
 800aff0:	9304      	str	r3, [sp, #16]
 800aff2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aff6:	4826      	ldr	r0, [pc, #152]	; (800b090 <_svfiprintf_r+0x1f0>)
 800aff8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800affc:	2206      	movs	r2, #6
 800affe:	f7f5 f8ef 	bl	80001e0 <memchr>
 800b002:	2800      	cmp	r0, #0
 800b004:	d038      	beq.n	800b078 <_svfiprintf_r+0x1d8>
 800b006:	4b23      	ldr	r3, [pc, #140]	; (800b094 <_svfiprintf_r+0x1f4>)
 800b008:	bb1b      	cbnz	r3, 800b052 <_svfiprintf_r+0x1b2>
 800b00a:	9b03      	ldr	r3, [sp, #12]
 800b00c:	3307      	adds	r3, #7
 800b00e:	f023 0307 	bic.w	r3, r3, #7
 800b012:	3308      	adds	r3, #8
 800b014:	9303      	str	r3, [sp, #12]
 800b016:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b018:	4433      	add	r3, r6
 800b01a:	9309      	str	r3, [sp, #36]	; 0x24
 800b01c:	e767      	b.n	800aeee <_svfiprintf_r+0x4e>
 800b01e:	fb0c 3202 	mla	r2, ip, r2, r3
 800b022:	460c      	mov	r4, r1
 800b024:	2001      	movs	r0, #1
 800b026:	e7a5      	b.n	800af74 <_svfiprintf_r+0xd4>
 800b028:	2300      	movs	r3, #0
 800b02a:	3401      	adds	r4, #1
 800b02c:	9305      	str	r3, [sp, #20]
 800b02e:	4619      	mov	r1, r3
 800b030:	f04f 0c0a 	mov.w	ip, #10
 800b034:	4620      	mov	r0, r4
 800b036:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b03a:	3a30      	subs	r2, #48	; 0x30
 800b03c:	2a09      	cmp	r2, #9
 800b03e:	d903      	bls.n	800b048 <_svfiprintf_r+0x1a8>
 800b040:	2b00      	cmp	r3, #0
 800b042:	d0c5      	beq.n	800afd0 <_svfiprintf_r+0x130>
 800b044:	9105      	str	r1, [sp, #20]
 800b046:	e7c3      	b.n	800afd0 <_svfiprintf_r+0x130>
 800b048:	fb0c 2101 	mla	r1, ip, r1, r2
 800b04c:	4604      	mov	r4, r0
 800b04e:	2301      	movs	r3, #1
 800b050:	e7f0      	b.n	800b034 <_svfiprintf_r+0x194>
 800b052:	ab03      	add	r3, sp, #12
 800b054:	9300      	str	r3, [sp, #0]
 800b056:	462a      	mov	r2, r5
 800b058:	4b0f      	ldr	r3, [pc, #60]	; (800b098 <_svfiprintf_r+0x1f8>)
 800b05a:	a904      	add	r1, sp, #16
 800b05c:	4638      	mov	r0, r7
 800b05e:	f3af 8000 	nop.w
 800b062:	1c42      	adds	r2, r0, #1
 800b064:	4606      	mov	r6, r0
 800b066:	d1d6      	bne.n	800b016 <_svfiprintf_r+0x176>
 800b068:	89ab      	ldrh	r3, [r5, #12]
 800b06a:	065b      	lsls	r3, r3, #25
 800b06c:	f53f af2c 	bmi.w	800aec8 <_svfiprintf_r+0x28>
 800b070:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b072:	b01d      	add	sp, #116	; 0x74
 800b074:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b078:	ab03      	add	r3, sp, #12
 800b07a:	9300      	str	r3, [sp, #0]
 800b07c:	462a      	mov	r2, r5
 800b07e:	4b06      	ldr	r3, [pc, #24]	; (800b098 <_svfiprintf_r+0x1f8>)
 800b080:	a904      	add	r1, sp, #16
 800b082:	4638      	mov	r0, r7
 800b084:	f000 f9d4 	bl	800b430 <_printf_i>
 800b088:	e7eb      	b.n	800b062 <_svfiprintf_r+0x1c2>
 800b08a:	bf00      	nop
 800b08c:	0800be74 	.word	0x0800be74
 800b090:	0800be7e 	.word	0x0800be7e
 800b094:	00000000 	.word	0x00000000
 800b098:	0800ade9 	.word	0x0800ade9
 800b09c:	0800be7a 	.word	0x0800be7a

0800b0a0 <__sfputc_r>:
 800b0a0:	6893      	ldr	r3, [r2, #8]
 800b0a2:	3b01      	subs	r3, #1
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	b410      	push	{r4}
 800b0a8:	6093      	str	r3, [r2, #8]
 800b0aa:	da08      	bge.n	800b0be <__sfputc_r+0x1e>
 800b0ac:	6994      	ldr	r4, [r2, #24]
 800b0ae:	42a3      	cmp	r3, r4
 800b0b0:	db01      	blt.n	800b0b6 <__sfputc_r+0x16>
 800b0b2:	290a      	cmp	r1, #10
 800b0b4:	d103      	bne.n	800b0be <__sfputc_r+0x1e>
 800b0b6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b0ba:	f7ff bb0d 	b.w	800a6d8 <__swbuf_r>
 800b0be:	6813      	ldr	r3, [r2, #0]
 800b0c0:	1c58      	adds	r0, r3, #1
 800b0c2:	6010      	str	r0, [r2, #0]
 800b0c4:	7019      	strb	r1, [r3, #0]
 800b0c6:	4608      	mov	r0, r1
 800b0c8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b0cc:	4770      	bx	lr

0800b0ce <__sfputs_r>:
 800b0ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b0d0:	4606      	mov	r6, r0
 800b0d2:	460f      	mov	r7, r1
 800b0d4:	4614      	mov	r4, r2
 800b0d6:	18d5      	adds	r5, r2, r3
 800b0d8:	42ac      	cmp	r4, r5
 800b0da:	d101      	bne.n	800b0e0 <__sfputs_r+0x12>
 800b0dc:	2000      	movs	r0, #0
 800b0de:	e007      	b.n	800b0f0 <__sfputs_r+0x22>
 800b0e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b0e4:	463a      	mov	r2, r7
 800b0e6:	4630      	mov	r0, r6
 800b0e8:	f7ff ffda 	bl	800b0a0 <__sfputc_r>
 800b0ec:	1c43      	adds	r3, r0, #1
 800b0ee:	d1f3      	bne.n	800b0d8 <__sfputs_r+0xa>
 800b0f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b0f4 <_vfiprintf_r>:
 800b0f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0f8:	460d      	mov	r5, r1
 800b0fa:	b09d      	sub	sp, #116	; 0x74
 800b0fc:	4614      	mov	r4, r2
 800b0fe:	4698      	mov	r8, r3
 800b100:	4606      	mov	r6, r0
 800b102:	b118      	cbz	r0, 800b10c <_vfiprintf_r+0x18>
 800b104:	6983      	ldr	r3, [r0, #24]
 800b106:	b90b      	cbnz	r3, 800b10c <_vfiprintf_r+0x18>
 800b108:	f7ff fcc0 	bl	800aa8c <__sinit>
 800b10c:	4b89      	ldr	r3, [pc, #548]	; (800b334 <_vfiprintf_r+0x240>)
 800b10e:	429d      	cmp	r5, r3
 800b110:	d11b      	bne.n	800b14a <_vfiprintf_r+0x56>
 800b112:	6875      	ldr	r5, [r6, #4]
 800b114:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b116:	07d9      	lsls	r1, r3, #31
 800b118:	d405      	bmi.n	800b126 <_vfiprintf_r+0x32>
 800b11a:	89ab      	ldrh	r3, [r5, #12]
 800b11c:	059a      	lsls	r2, r3, #22
 800b11e:	d402      	bmi.n	800b126 <_vfiprintf_r+0x32>
 800b120:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b122:	f7ff fd51 	bl	800abc8 <__retarget_lock_acquire_recursive>
 800b126:	89ab      	ldrh	r3, [r5, #12]
 800b128:	071b      	lsls	r3, r3, #28
 800b12a:	d501      	bpl.n	800b130 <_vfiprintf_r+0x3c>
 800b12c:	692b      	ldr	r3, [r5, #16]
 800b12e:	b9eb      	cbnz	r3, 800b16c <_vfiprintf_r+0x78>
 800b130:	4629      	mov	r1, r5
 800b132:	4630      	mov	r0, r6
 800b134:	f7ff fb22 	bl	800a77c <__swsetup_r>
 800b138:	b1c0      	cbz	r0, 800b16c <_vfiprintf_r+0x78>
 800b13a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b13c:	07dc      	lsls	r4, r3, #31
 800b13e:	d50e      	bpl.n	800b15e <_vfiprintf_r+0x6a>
 800b140:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b144:	b01d      	add	sp, #116	; 0x74
 800b146:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b14a:	4b7b      	ldr	r3, [pc, #492]	; (800b338 <_vfiprintf_r+0x244>)
 800b14c:	429d      	cmp	r5, r3
 800b14e:	d101      	bne.n	800b154 <_vfiprintf_r+0x60>
 800b150:	68b5      	ldr	r5, [r6, #8]
 800b152:	e7df      	b.n	800b114 <_vfiprintf_r+0x20>
 800b154:	4b79      	ldr	r3, [pc, #484]	; (800b33c <_vfiprintf_r+0x248>)
 800b156:	429d      	cmp	r5, r3
 800b158:	bf08      	it	eq
 800b15a:	68f5      	ldreq	r5, [r6, #12]
 800b15c:	e7da      	b.n	800b114 <_vfiprintf_r+0x20>
 800b15e:	89ab      	ldrh	r3, [r5, #12]
 800b160:	0598      	lsls	r0, r3, #22
 800b162:	d4ed      	bmi.n	800b140 <_vfiprintf_r+0x4c>
 800b164:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b166:	f7ff fd30 	bl	800abca <__retarget_lock_release_recursive>
 800b16a:	e7e9      	b.n	800b140 <_vfiprintf_r+0x4c>
 800b16c:	2300      	movs	r3, #0
 800b16e:	9309      	str	r3, [sp, #36]	; 0x24
 800b170:	2320      	movs	r3, #32
 800b172:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b176:	f8cd 800c 	str.w	r8, [sp, #12]
 800b17a:	2330      	movs	r3, #48	; 0x30
 800b17c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800b340 <_vfiprintf_r+0x24c>
 800b180:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b184:	f04f 0901 	mov.w	r9, #1
 800b188:	4623      	mov	r3, r4
 800b18a:	469a      	mov	sl, r3
 800b18c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b190:	b10a      	cbz	r2, 800b196 <_vfiprintf_r+0xa2>
 800b192:	2a25      	cmp	r2, #37	; 0x25
 800b194:	d1f9      	bne.n	800b18a <_vfiprintf_r+0x96>
 800b196:	ebba 0b04 	subs.w	fp, sl, r4
 800b19a:	d00b      	beq.n	800b1b4 <_vfiprintf_r+0xc0>
 800b19c:	465b      	mov	r3, fp
 800b19e:	4622      	mov	r2, r4
 800b1a0:	4629      	mov	r1, r5
 800b1a2:	4630      	mov	r0, r6
 800b1a4:	f7ff ff93 	bl	800b0ce <__sfputs_r>
 800b1a8:	3001      	adds	r0, #1
 800b1aa:	f000 80aa 	beq.w	800b302 <_vfiprintf_r+0x20e>
 800b1ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b1b0:	445a      	add	r2, fp
 800b1b2:	9209      	str	r2, [sp, #36]	; 0x24
 800b1b4:	f89a 3000 	ldrb.w	r3, [sl]
 800b1b8:	2b00      	cmp	r3, #0
 800b1ba:	f000 80a2 	beq.w	800b302 <_vfiprintf_r+0x20e>
 800b1be:	2300      	movs	r3, #0
 800b1c0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b1c4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b1c8:	f10a 0a01 	add.w	sl, sl, #1
 800b1cc:	9304      	str	r3, [sp, #16]
 800b1ce:	9307      	str	r3, [sp, #28]
 800b1d0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b1d4:	931a      	str	r3, [sp, #104]	; 0x68
 800b1d6:	4654      	mov	r4, sl
 800b1d8:	2205      	movs	r2, #5
 800b1da:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b1de:	4858      	ldr	r0, [pc, #352]	; (800b340 <_vfiprintf_r+0x24c>)
 800b1e0:	f7f4 fffe 	bl	80001e0 <memchr>
 800b1e4:	9a04      	ldr	r2, [sp, #16]
 800b1e6:	b9d8      	cbnz	r0, 800b220 <_vfiprintf_r+0x12c>
 800b1e8:	06d1      	lsls	r1, r2, #27
 800b1ea:	bf44      	itt	mi
 800b1ec:	2320      	movmi	r3, #32
 800b1ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b1f2:	0713      	lsls	r3, r2, #28
 800b1f4:	bf44      	itt	mi
 800b1f6:	232b      	movmi	r3, #43	; 0x2b
 800b1f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b1fc:	f89a 3000 	ldrb.w	r3, [sl]
 800b200:	2b2a      	cmp	r3, #42	; 0x2a
 800b202:	d015      	beq.n	800b230 <_vfiprintf_r+0x13c>
 800b204:	9a07      	ldr	r2, [sp, #28]
 800b206:	4654      	mov	r4, sl
 800b208:	2000      	movs	r0, #0
 800b20a:	f04f 0c0a 	mov.w	ip, #10
 800b20e:	4621      	mov	r1, r4
 800b210:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b214:	3b30      	subs	r3, #48	; 0x30
 800b216:	2b09      	cmp	r3, #9
 800b218:	d94e      	bls.n	800b2b8 <_vfiprintf_r+0x1c4>
 800b21a:	b1b0      	cbz	r0, 800b24a <_vfiprintf_r+0x156>
 800b21c:	9207      	str	r2, [sp, #28]
 800b21e:	e014      	b.n	800b24a <_vfiprintf_r+0x156>
 800b220:	eba0 0308 	sub.w	r3, r0, r8
 800b224:	fa09 f303 	lsl.w	r3, r9, r3
 800b228:	4313      	orrs	r3, r2
 800b22a:	9304      	str	r3, [sp, #16]
 800b22c:	46a2      	mov	sl, r4
 800b22e:	e7d2      	b.n	800b1d6 <_vfiprintf_r+0xe2>
 800b230:	9b03      	ldr	r3, [sp, #12]
 800b232:	1d19      	adds	r1, r3, #4
 800b234:	681b      	ldr	r3, [r3, #0]
 800b236:	9103      	str	r1, [sp, #12]
 800b238:	2b00      	cmp	r3, #0
 800b23a:	bfbb      	ittet	lt
 800b23c:	425b      	neglt	r3, r3
 800b23e:	f042 0202 	orrlt.w	r2, r2, #2
 800b242:	9307      	strge	r3, [sp, #28]
 800b244:	9307      	strlt	r3, [sp, #28]
 800b246:	bfb8      	it	lt
 800b248:	9204      	strlt	r2, [sp, #16]
 800b24a:	7823      	ldrb	r3, [r4, #0]
 800b24c:	2b2e      	cmp	r3, #46	; 0x2e
 800b24e:	d10c      	bne.n	800b26a <_vfiprintf_r+0x176>
 800b250:	7863      	ldrb	r3, [r4, #1]
 800b252:	2b2a      	cmp	r3, #42	; 0x2a
 800b254:	d135      	bne.n	800b2c2 <_vfiprintf_r+0x1ce>
 800b256:	9b03      	ldr	r3, [sp, #12]
 800b258:	1d1a      	adds	r2, r3, #4
 800b25a:	681b      	ldr	r3, [r3, #0]
 800b25c:	9203      	str	r2, [sp, #12]
 800b25e:	2b00      	cmp	r3, #0
 800b260:	bfb8      	it	lt
 800b262:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800b266:	3402      	adds	r4, #2
 800b268:	9305      	str	r3, [sp, #20]
 800b26a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b350 <_vfiprintf_r+0x25c>
 800b26e:	7821      	ldrb	r1, [r4, #0]
 800b270:	2203      	movs	r2, #3
 800b272:	4650      	mov	r0, sl
 800b274:	f7f4 ffb4 	bl	80001e0 <memchr>
 800b278:	b140      	cbz	r0, 800b28c <_vfiprintf_r+0x198>
 800b27a:	2340      	movs	r3, #64	; 0x40
 800b27c:	eba0 000a 	sub.w	r0, r0, sl
 800b280:	fa03 f000 	lsl.w	r0, r3, r0
 800b284:	9b04      	ldr	r3, [sp, #16]
 800b286:	4303      	orrs	r3, r0
 800b288:	3401      	adds	r4, #1
 800b28a:	9304      	str	r3, [sp, #16]
 800b28c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b290:	482c      	ldr	r0, [pc, #176]	; (800b344 <_vfiprintf_r+0x250>)
 800b292:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b296:	2206      	movs	r2, #6
 800b298:	f7f4 ffa2 	bl	80001e0 <memchr>
 800b29c:	2800      	cmp	r0, #0
 800b29e:	d03f      	beq.n	800b320 <_vfiprintf_r+0x22c>
 800b2a0:	4b29      	ldr	r3, [pc, #164]	; (800b348 <_vfiprintf_r+0x254>)
 800b2a2:	bb1b      	cbnz	r3, 800b2ec <_vfiprintf_r+0x1f8>
 800b2a4:	9b03      	ldr	r3, [sp, #12]
 800b2a6:	3307      	adds	r3, #7
 800b2a8:	f023 0307 	bic.w	r3, r3, #7
 800b2ac:	3308      	adds	r3, #8
 800b2ae:	9303      	str	r3, [sp, #12]
 800b2b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b2b2:	443b      	add	r3, r7
 800b2b4:	9309      	str	r3, [sp, #36]	; 0x24
 800b2b6:	e767      	b.n	800b188 <_vfiprintf_r+0x94>
 800b2b8:	fb0c 3202 	mla	r2, ip, r2, r3
 800b2bc:	460c      	mov	r4, r1
 800b2be:	2001      	movs	r0, #1
 800b2c0:	e7a5      	b.n	800b20e <_vfiprintf_r+0x11a>
 800b2c2:	2300      	movs	r3, #0
 800b2c4:	3401      	adds	r4, #1
 800b2c6:	9305      	str	r3, [sp, #20]
 800b2c8:	4619      	mov	r1, r3
 800b2ca:	f04f 0c0a 	mov.w	ip, #10
 800b2ce:	4620      	mov	r0, r4
 800b2d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b2d4:	3a30      	subs	r2, #48	; 0x30
 800b2d6:	2a09      	cmp	r2, #9
 800b2d8:	d903      	bls.n	800b2e2 <_vfiprintf_r+0x1ee>
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	d0c5      	beq.n	800b26a <_vfiprintf_r+0x176>
 800b2de:	9105      	str	r1, [sp, #20]
 800b2e0:	e7c3      	b.n	800b26a <_vfiprintf_r+0x176>
 800b2e2:	fb0c 2101 	mla	r1, ip, r1, r2
 800b2e6:	4604      	mov	r4, r0
 800b2e8:	2301      	movs	r3, #1
 800b2ea:	e7f0      	b.n	800b2ce <_vfiprintf_r+0x1da>
 800b2ec:	ab03      	add	r3, sp, #12
 800b2ee:	9300      	str	r3, [sp, #0]
 800b2f0:	462a      	mov	r2, r5
 800b2f2:	4b16      	ldr	r3, [pc, #88]	; (800b34c <_vfiprintf_r+0x258>)
 800b2f4:	a904      	add	r1, sp, #16
 800b2f6:	4630      	mov	r0, r6
 800b2f8:	f3af 8000 	nop.w
 800b2fc:	4607      	mov	r7, r0
 800b2fe:	1c78      	adds	r0, r7, #1
 800b300:	d1d6      	bne.n	800b2b0 <_vfiprintf_r+0x1bc>
 800b302:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b304:	07d9      	lsls	r1, r3, #31
 800b306:	d405      	bmi.n	800b314 <_vfiprintf_r+0x220>
 800b308:	89ab      	ldrh	r3, [r5, #12]
 800b30a:	059a      	lsls	r2, r3, #22
 800b30c:	d402      	bmi.n	800b314 <_vfiprintf_r+0x220>
 800b30e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b310:	f7ff fc5b 	bl	800abca <__retarget_lock_release_recursive>
 800b314:	89ab      	ldrh	r3, [r5, #12]
 800b316:	065b      	lsls	r3, r3, #25
 800b318:	f53f af12 	bmi.w	800b140 <_vfiprintf_r+0x4c>
 800b31c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b31e:	e711      	b.n	800b144 <_vfiprintf_r+0x50>
 800b320:	ab03      	add	r3, sp, #12
 800b322:	9300      	str	r3, [sp, #0]
 800b324:	462a      	mov	r2, r5
 800b326:	4b09      	ldr	r3, [pc, #36]	; (800b34c <_vfiprintf_r+0x258>)
 800b328:	a904      	add	r1, sp, #16
 800b32a:	4630      	mov	r0, r6
 800b32c:	f000 f880 	bl	800b430 <_printf_i>
 800b330:	e7e4      	b.n	800b2fc <_vfiprintf_r+0x208>
 800b332:	bf00      	nop
 800b334:	0800be34 	.word	0x0800be34
 800b338:	0800be54 	.word	0x0800be54
 800b33c:	0800be14 	.word	0x0800be14
 800b340:	0800be74 	.word	0x0800be74
 800b344:	0800be7e 	.word	0x0800be7e
 800b348:	00000000 	.word	0x00000000
 800b34c:	0800b0cf 	.word	0x0800b0cf
 800b350:	0800be7a 	.word	0x0800be7a

0800b354 <_printf_common>:
 800b354:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b358:	4616      	mov	r6, r2
 800b35a:	4699      	mov	r9, r3
 800b35c:	688a      	ldr	r2, [r1, #8]
 800b35e:	690b      	ldr	r3, [r1, #16]
 800b360:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b364:	4293      	cmp	r3, r2
 800b366:	bfb8      	it	lt
 800b368:	4613      	movlt	r3, r2
 800b36a:	6033      	str	r3, [r6, #0]
 800b36c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b370:	4607      	mov	r7, r0
 800b372:	460c      	mov	r4, r1
 800b374:	b10a      	cbz	r2, 800b37a <_printf_common+0x26>
 800b376:	3301      	adds	r3, #1
 800b378:	6033      	str	r3, [r6, #0]
 800b37a:	6823      	ldr	r3, [r4, #0]
 800b37c:	0699      	lsls	r1, r3, #26
 800b37e:	bf42      	ittt	mi
 800b380:	6833      	ldrmi	r3, [r6, #0]
 800b382:	3302      	addmi	r3, #2
 800b384:	6033      	strmi	r3, [r6, #0]
 800b386:	6825      	ldr	r5, [r4, #0]
 800b388:	f015 0506 	ands.w	r5, r5, #6
 800b38c:	d106      	bne.n	800b39c <_printf_common+0x48>
 800b38e:	f104 0a19 	add.w	sl, r4, #25
 800b392:	68e3      	ldr	r3, [r4, #12]
 800b394:	6832      	ldr	r2, [r6, #0]
 800b396:	1a9b      	subs	r3, r3, r2
 800b398:	42ab      	cmp	r3, r5
 800b39a:	dc26      	bgt.n	800b3ea <_printf_common+0x96>
 800b39c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b3a0:	1e13      	subs	r3, r2, #0
 800b3a2:	6822      	ldr	r2, [r4, #0]
 800b3a4:	bf18      	it	ne
 800b3a6:	2301      	movne	r3, #1
 800b3a8:	0692      	lsls	r2, r2, #26
 800b3aa:	d42b      	bmi.n	800b404 <_printf_common+0xb0>
 800b3ac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b3b0:	4649      	mov	r1, r9
 800b3b2:	4638      	mov	r0, r7
 800b3b4:	47c0      	blx	r8
 800b3b6:	3001      	adds	r0, #1
 800b3b8:	d01e      	beq.n	800b3f8 <_printf_common+0xa4>
 800b3ba:	6823      	ldr	r3, [r4, #0]
 800b3bc:	68e5      	ldr	r5, [r4, #12]
 800b3be:	6832      	ldr	r2, [r6, #0]
 800b3c0:	f003 0306 	and.w	r3, r3, #6
 800b3c4:	2b04      	cmp	r3, #4
 800b3c6:	bf08      	it	eq
 800b3c8:	1aad      	subeq	r5, r5, r2
 800b3ca:	68a3      	ldr	r3, [r4, #8]
 800b3cc:	6922      	ldr	r2, [r4, #16]
 800b3ce:	bf0c      	ite	eq
 800b3d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b3d4:	2500      	movne	r5, #0
 800b3d6:	4293      	cmp	r3, r2
 800b3d8:	bfc4      	itt	gt
 800b3da:	1a9b      	subgt	r3, r3, r2
 800b3dc:	18ed      	addgt	r5, r5, r3
 800b3de:	2600      	movs	r6, #0
 800b3e0:	341a      	adds	r4, #26
 800b3e2:	42b5      	cmp	r5, r6
 800b3e4:	d11a      	bne.n	800b41c <_printf_common+0xc8>
 800b3e6:	2000      	movs	r0, #0
 800b3e8:	e008      	b.n	800b3fc <_printf_common+0xa8>
 800b3ea:	2301      	movs	r3, #1
 800b3ec:	4652      	mov	r2, sl
 800b3ee:	4649      	mov	r1, r9
 800b3f0:	4638      	mov	r0, r7
 800b3f2:	47c0      	blx	r8
 800b3f4:	3001      	adds	r0, #1
 800b3f6:	d103      	bne.n	800b400 <_printf_common+0xac>
 800b3f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b3fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b400:	3501      	adds	r5, #1
 800b402:	e7c6      	b.n	800b392 <_printf_common+0x3e>
 800b404:	18e1      	adds	r1, r4, r3
 800b406:	1c5a      	adds	r2, r3, #1
 800b408:	2030      	movs	r0, #48	; 0x30
 800b40a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b40e:	4422      	add	r2, r4
 800b410:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b414:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b418:	3302      	adds	r3, #2
 800b41a:	e7c7      	b.n	800b3ac <_printf_common+0x58>
 800b41c:	2301      	movs	r3, #1
 800b41e:	4622      	mov	r2, r4
 800b420:	4649      	mov	r1, r9
 800b422:	4638      	mov	r0, r7
 800b424:	47c0      	blx	r8
 800b426:	3001      	adds	r0, #1
 800b428:	d0e6      	beq.n	800b3f8 <_printf_common+0xa4>
 800b42a:	3601      	adds	r6, #1
 800b42c:	e7d9      	b.n	800b3e2 <_printf_common+0x8e>
	...

0800b430 <_printf_i>:
 800b430:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b434:	460c      	mov	r4, r1
 800b436:	4691      	mov	r9, r2
 800b438:	7e27      	ldrb	r7, [r4, #24]
 800b43a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800b43c:	2f78      	cmp	r7, #120	; 0x78
 800b43e:	4680      	mov	r8, r0
 800b440:	469a      	mov	sl, r3
 800b442:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b446:	d807      	bhi.n	800b458 <_printf_i+0x28>
 800b448:	2f62      	cmp	r7, #98	; 0x62
 800b44a:	d80a      	bhi.n	800b462 <_printf_i+0x32>
 800b44c:	2f00      	cmp	r7, #0
 800b44e:	f000 80d8 	beq.w	800b602 <_printf_i+0x1d2>
 800b452:	2f58      	cmp	r7, #88	; 0x58
 800b454:	f000 80a3 	beq.w	800b59e <_printf_i+0x16e>
 800b458:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800b45c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b460:	e03a      	b.n	800b4d8 <_printf_i+0xa8>
 800b462:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b466:	2b15      	cmp	r3, #21
 800b468:	d8f6      	bhi.n	800b458 <_printf_i+0x28>
 800b46a:	a001      	add	r0, pc, #4	; (adr r0, 800b470 <_printf_i+0x40>)
 800b46c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800b470:	0800b4c9 	.word	0x0800b4c9
 800b474:	0800b4dd 	.word	0x0800b4dd
 800b478:	0800b459 	.word	0x0800b459
 800b47c:	0800b459 	.word	0x0800b459
 800b480:	0800b459 	.word	0x0800b459
 800b484:	0800b459 	.word	0x0800b459
 800b488:	0800b4dd 	.word	0x0800b4dd
 800b48c:	0800b459 	.word	0x0800b459
 800b490:	0800b459 	.word	0x0800b459
 800b494:	0800b459 	.word	0x0800b459
 800b498:	0800b459 	.word	0x0800b459
 800b49c:	0800b5e9 	.word	0x0800b5e9
 800b4a0:	0800b50d 	.word	0x0800b50d
 800b4a4:	0800b5cb 	.word	0x0800b5cb
 800b4a8:	0800b459 	.word	0x0800b459
 800b4ac:	0800b459 	.word	0x0800b459
 800b4b0:	0800b60b 	.word	0x0800b60b
 800b4b4:	0800b459 	.word	0x0800b459
 800b4b8:	0800b50d 	.word	0x0800b50d
 800b4bc:	0800b459 	.word	0x0800b459
 800b4c0:	0800b459 	.word	0x0800b459
 800b4c4:	0800b5d3 	.word	0x0800b5d3
 800b4c8:	680b      	ldr	r3, [r1, #0]
 800b4ca:	1d1a      	adds	r2, r3, #4
 800b4cc:	681b      	ldr	r3, [r3, #0]
 800b4ce:	600a      	str	r2, [r1, #0]
 800b4d0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800b4d4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b4d8:	2301      	movs	r3, #1
 800b4da:	e0a3      	b.n	800b624 <_printf_i+0x1f4>
 800b4dc:	6825      	ldr	r5, [r4, #0]
 800b4de:	6808      	ldr	r0, [r1, #0]
 800b4e0:	062e      	lsls	r6, r5, #24
 800b4e2:	f100 0304 	add.w	r3, r0, #4
 800b4e6:	d50a      	bpl.n	800b4fe <_printf_i+0xce>
 800b4e8:	6805      	ldr	r5, [r0, #0]
 800b4ea:	600b      	str	r3, [r1, #0]
 800b4ec:	2d00      	cmp	r5, #0
 800b4ee:	da03      	bge.n	800b4f8 <_printf_i+0xc8>
 800b4f0:	232d      	movs	r3, #45	; 0x2d
 800b4f2:	426d      	negs	r5, r5
 800b4f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b4f8:	485e      	ldr	r0, [pc, #376]	; (800b674 <_printf_i+0x244>)
 800b4fa:	230a      	movs	r3, #10
 800b4fc:	e019      	b.n	800b532 <_printf_i+0x102>
 800b4fe:	f015 0f40 	tst.w	r5, #64	; 0x40
 800b502:	6805      	ldr	r5, [r0, #0]
 800b504:	600b      	str	r3, [r1, #0]
 800b506:	bf18      	it	ne
 800b508:	b22d      	sxthne	r5, r5
 800b50a:	e7ef      	b.n	800b4ec <_printf_i+0xbc>
 800b50c:	680b      	ldr	r3, [r1, #0]
 800b50e:	6825      	ldr	r5, [r4, #0]
 800b510:	1d18      	adds	r0, r3, #4
 800b512:	6008      	str	r0, [r1, #0]
 800b514:	0628      	lsls	r0, r5, #24
 800b516:	d501      	bpl.n	800b51c <_printf_i+0xec>
 800b518:	681d      	ldr	r5, [r3, #0]
 800b51a:	e002      	b.n	800b522 <_printf_i+0xf2>
 800b51c:	0669      	lsls	r1, r5, #25
 800b51e:	d5fb      	bpl.n	800b518 <_printf_i+0xe8>
 800b520:	881d      	ldrh	r5, [r3, #0]
 800b522:	4854      	ldr	r0, [pc, #336]	; (800b674 <_printf_i+0x244>)
 800b524:	2f6f      	cmp	r7, #111	; 0x6f
 800b526:	bf0c      	ite	eq
 800b528:	2308      	moveq	r3, #8
 800b52a:	230a      	movne	r3, #10
 800b52c:	2100      	movs	r1, #0
 800b52e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b532:	6866      	ldr	r6, [r4, #4]
 800b534:	60a6      	str	r6, [r4, #8]
 800b536:	2e00      	cmp	r6, #0
 800b538:	bfa2      	ittt	ge
 800b53a:	6821      	ldrge	r1, [r4, #0]
 800b53c:	f021 0104 	bicge.w	r1, r1, #4
 800b540:	6021      	strge	r1, [r4, #0]
 800b542:	b90d      	cbnz	r5, 800b548 <_printf_i+0x118>
 800b544:	2e00      	cmp	r6, #0
 800b546:	d04d      	beq.n	800b5e4 <_printf_i+0x1b4>
 800b548:	4616      	mov	r6, r2
 800b54a:	fbb5 f1f3 	udiv	r1, r5, r3
 800b54e:	fb03 5711 	mls	r7, r3, r1, r5
 800b552:	5dc7      	ldrb	r7, [r0, r7]
 800b554:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b558:	462f      	mov	r7, r5
 800b55a:	42bb      	cmp	r3, r7
 800b55c:	460d      	mov	r5, r1
 800b55e:	d9f4      	bls.n	800b54a <_printf_i+0x11a>
 800b560:	2b08      	cmp	r3, #8
 800b562:	d10b      	bne.n	800b57c <_printf_i+0x14c>
 800b564:	6823      	ldr	r3, [r4, #0]
 800b566:	07df      	lsls	r7, r3, #31
 800b568:	d508      	bpl.n	800b57c <_printf_i+0x14c>
 800b56a:	6923      	ldr	r3, [r4, #16]
 800b56c:	6861      	ldr	r1, [r4, #4]
 800b56e:	4299      	cmp	r1, r3
 800b570:	bfde      	ittt	le
 800b572:	2330      	movle	r3, #48	; 0x30
 800b574:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b578:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 800b57c:	1b92      	subs	r2, r2, r6
 800b57e:	6122      	str	r2, [r4, #16]
 800b580:	f8cd a000 	str.w	sl, [sp]
 800b584:	464b      	mov	r3, r9
 800b586:	aa03      	add	r2, sp, #12
 800b588:	4621      	mov	r1, r4
 800b58a:	4640      	mov	r0, r8
 800b58c:	f7ff fee2 	bl	800b354 <_printf_common>
 800b590:	3001      	adds	r0, #1
 800b592:	d14c      	bne.n	800b62e <_printf_i+0x1fe>
 800b594:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b598:	b004      	add	sp, #16
 800b59a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b59e:	4835      	ldr	r0, [pc, #212]	; (800b674 <_printf_i+0x244>)
 800b5a0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800b5a4:	6823      	ldr	r3, [r4, #0]
 800b5a6:	680e      	ldr	r6, [r1, #0]
 800b5a8:	061f      	lsls	r7, r3, #24
 800b5aa:	f856 5b04 	ldr.w	r5, [r6], #4
 800b5ae:	600e      	str	r6, [r1, #0]
 800b5b0:	d514      	bpl.n	800b5dc <_printf_i+0x1ac>
 800b5b2:	07d9      	lsls	r1, r3, #31
 800b5b4:	bf44      	itt	mi
 800b5b6:	f043 0320 	orrmi.w	r3, r3, #32
 800b5ba:	6023      	strmi	r3, [r4, #0]
 800b5bc:	b91d      	cbnz	r5, 800b5c6 <_printf_i+0x196>
 800b5be:	6823      	ldr	r3, [r4, #0]
 800b5c0:	f023 0320 	bic.w	r3, r3, #32
 800b5c4:	6023      	str	r3, [r4, #0]
 800b5c6:	2310      	movs	r3, #16
 800b5c8:	e7b0      	b.n	800b52c <_printf_i+0xfc>
 800b5ca:	6823      	ldr	r3, [r4, #0]
 800b5cc:	f043 0320 	orr.w	r3, r3, #32
 800b5d0:	6023      	str	r3, [r4, #0]
 800b5d2:	2378      	movs	r3, #120	; 0x78
 800b5d4:	4828      	ldr	r0, [pc, #160]	; (800b678 <_printf_i+0x248>)
 800b5d6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b5da:	e7e3      	b.n	800b5a4 <_printf_i+0x174>
 800b5dc:	065e      	lsls	r6, r3, #25
 800b5de:	bf48      	it	mi
 800b5e0:	b2ad      	uxthmi	r5, r5
 800b5e2:	e7e6      	b.n	800b5b2 <_printf_i+0x182>
 800b5e4:	4616      	mov	r6, r2
 800b5e6:	e7bb      	b.n	800b560 <_printf_i+0x130>
 800b5e8:	680b      	ldr	r3, [r1, #0]
 800b5ea:	6826      	ldr	r6, [r4, #0]
 800b5ec:	6960      	ldr	r0, [r4, #20]
 800b5ee:	1d1d      	adds	r5, r3, #4
 800b5f0:	600d      	str	r5, [r1, #0]
 800b5f2:	0635      	lsls	r5, r6, #24
 800b5f4:	681b      	ldr	r3, [r3, #0]
 800b5f6:	d501      	bpl.n	800b5fc <_printf_i+0x1cc>
 800b5f8:	6018      	str	r0, [r3, #0]
 800b5fa:	e002      	b.n	800b602 <_printf_i+0x1d2>
 800b5fc:	0671      	lsls	r1, r6, #25
 800b5fe:	d5fb      	bpl.n	800b5f8 <_printf_i+0x1c8>
 800b600:	8018      	strh	r0, [r3, #0]
 800b602:	2300      	movs	r3, #0
 800b604:	6123      	str	r3, [r4, #16]
 800b606:	4616      	mov	r6, r2
 800b608:	e7ba      	b.n	800b580 <_printf_i+0x150>
 800b60a:	680b      	ldr	r3, [r1, #0]
 800b60c:	1d1a      	adds	r2, r3, #4
 800b60e:	600a      	str	r2, [r1, #0]
 800b610:	681e      	ldr	r6, [r3, #0]
 800b612:	6862      	ldr	r2, [r4, #4]
 800b614:	2100      	movs	r1, #0
 800b616:	4630      	mov	r0, r6
 800b618:	f7f4 fde2 	bl	80001e0 <memchr>
 800b61c:	b108      	cbz	r0, 800b622 <_printf_i+0x1f2>
 800b61e:	1b80      	subs	r0, r0, r6
 800b620:	6060      	str	r0, [r4, #4]
 800b622:	6863      	ldr	r3, [r4, #4]
 800b624:	6123      	str	r3, [r4, #16]
 800b626:	2300      	movs	r3, #0
 800b628:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b62c:	e7a8      	b.n	800b580 <_printf_i+0x150>
 800b62e:	6923      	ldr	r3, [r4, #16]
 800b630:	4632      	mov	r2, r6
 800b632:	4649      	mov	r1, r9
 800b634:	4640      	mov	r0, r8
 800b636:	47d0      	blx	sl
 800b638:	3001      	adds	r0, #1
 800b63a:	d0ab      	beq.n	800b594 <_printf_i+0x164>
 800b63c:	6823      	ldr	r3, [r4, #0]
 800b63e:	079b      	lsls	r3, r3, #30
 800b640:	d413      	bmi.n	800b66a <_printf_i+0x23a>
 800b642:	68e0      	ldr	r0, [r4, #12]
 800b644:	9b03      	ldr	r3, [sp, #12]
 800b646:	4298      	cmp	r0, r3
 800b648:	bfb8      	it	lt
 800b64a:	4618      	movlt	r0, r3
 800b64c:	e7a4      	b.n	800b598 <_printf_i+0x168>
 800b64e:	2301      	movs	r3, #1
 800b650:	4632      	mov	r2, r6
 800b652:	4649      	mov	r1, r9
 800b654:	4640      	mov	r0, r8
 800b656:	47d0      	blx	sl
 800b658:	3001      	adds	r0, #1
 800b65a:	d09b      	beq.n	800b594 <_printf_i+0x164>
 800b65c:	3501      	adds	r5, #1
 800b65e:	68e3      	ldr	r3, [r4, #12]
 800b660:	9903      	ldr	r1, [sp, #12]
 800b662:	1a5b      	subs	r3, r3, r1
 800b664:	42ab      	cmp	r3, r5
 800b666:	dcf2      	bgt.n	800b64e <_printf_i+0x21e>
 800b668:	e7eb      	b.n	800b642 <_printf_i+0x212>
 800b66a:	2500      	movs	r5, #0
 800b66c:	f104 0619 	add.w	r6, r4, #25
 800b670:	e7f5      	b.n	800b65e <_printf_i+0x22e>
 800b672:	bf00      	nop
 800b674:	0800be85 	.word	0x0800be85
 800b678:	0800be96 	.word	0x0800be96

0800b67c <_sbrk_r>:
 800b67c:	b538      	push	{r3, r4, r5, lr}
 800b67e:	4d06      	ldr	r5, [pc, #24]	; (800b698 <_sbrk_r+0x1c>)
 800b680:	2300      	movs	r3, #0
 800b682:	4604      	mov	r4, r0
 800b684:	4608      	mov	r0, r1
 800b686:	602b      	str	r3, [r5, #0]
 800b688:	f7f6 fd50 	bl	800212c <_sbrk>
 800b68c:	1c43      	adds	r3, r0, #1
 800b68e:	d102      	bne.n	800b696 <_sbrk_r+0x1a>
 800b690:	682b      	ldr	r3, [r5, #0]
 800b692:	b103      	cbz	r3, 800b696 <_sbrk_r+0x1a>
 800b694:	6023      	str	r3, [r4, #0]
 800b696:	bd38      	pop	{r3, r4, r5, pc}
 800b698:	20005990 	.word	0x20005990

0800b69c <__sread>:
 800b69c:	b510      	push	{r4, lr}
 800b69e:	460c      	mov	r4, r1
 800b6a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b6a4:	f000 f8e0 	bl	800b868 <_read_r>
 800b6a8:	2800      	cmp	r0, #0
 800b6aa:	bfab      	itete	ge
 800b6ac:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b6ae:	89a3      	ldrhlt	r3, [r4, #12]
 800b6b0:	181b      	addge	r3, r3, r0
 800b6b2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b6b6:	bfac      	ite	ge
 800b6b8:	6563      	strge	r3, [r4, #84]	; 0x54
 800b6ba:	81a3      	strhlt	r3, [r4, #12]
 800b6bc:	bd10      	pop	{r4, pc}

0800b6be <__swrite>:
 800b6be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b6c2:	461f      	mov	r7, r3
 800b6c4:	898b      	ldrh	r3, [r1, #12]
 800b6c6:	05db      	lsls	r3, r3, #23
 800b6c8:	4605      	mov	r5, r0
 800b6ca:	460c      	mov	r4, r1
 800b6cc:	4616      	mov	r6, r2
 800b6ce:	d505      	bpl.n	800b6dc <__swrite+0x1e>
 800b6d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b6d4:	2302      	movs	r3, #2
 800b6d6:	2200      	movs	r2, #0
 800b6d8:	f000 f868 	bl	800b7ac <_lseek_r>
 800b6dc:	89a3      	ldrh	r3, [r4, #12]
 800b6de:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b6e2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b6e6:	81a3      	strh	r3, [r4, #12]
 800b6e8:	4632      	mov	r2, r6
 800b6ea:	463b      	mov	r3, r7
 800b6ec:	4628      	mov	r0, r5
 800b6ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b6f2:	f000 b817 	b.w	800b724 <_write_r>

0800b6f6 <__sseek>:
 800b6f6:	b510      	push	{r4, lr}
 800b6f8:	460c      	mov	r4, r1
 800b6fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b6fe:	f000 f855 	bl	800b7ac <_lseek_r>
 800b702:	1c43      	adds	r3, r0, #1
 800b704:	89a3      	ldrh	r3, [r4, #12]
 800b706:	bf15      	itete	ne
 800b708:	6560      	strne	r0, [r4, #84]	; 0x54
 800b70a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b70e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b712:	81a3      	strheq	r3, [r4, #12]
 800b714:	bf18      	it	ne
 800b716:	81a3      	strhne	r3, [r4, #12]
 800b718:	bd10      	pop	{r4, pc}

0800b71a <__sclose>:
 800b71a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b71e:	f000 b813 	b.w	800b748 <_close_r>
	...

0800b724 <_write_r>:
 800b724:	b538      	push	{r3, r4, r5, lr}
 800b726:	4d07      	ldr	r5, [pc, #28]	; (800b744 <_write_r+0x20>)
 800b728:	4604      	mov	r4, r0
 800b72a:	4608      	mov	r0, r1
 800b72c:	4611      	mov	r1, r2
 800b72e:	2200      	movs	r2, #0
 800b730:	602a      	str	r2, [r5, #0]
 800b732:	461a      	mov	r2, r3
 800b734:	f7f6 fca9 	bl	800208a <_write>
 800b738:	1c43      	adds	r3, r0, #1
 800b73a:	d102      	bne.n	800b742 <_write_r+0x1e>
 800b73c:	682b      	ldr	r3, [r5, #0]
 800b73e:	b103      	cbz	r3, 800b742 <_write_r+0x1e>
 800b740:	6023      	str	r3, [r4, #0]
 800b742:	bd38      	pop	{r3, r4, r5, pc}
 800b744:	20005990 	.word	0x20005990

0800b748 <_close_r>:
 800b748:	b538      	push	{r3, r4, r5, lr}
 800b74a:	4d06      	ldr	r5, [pc, #24]	; (800b764 <_close_r+0x1c>)
 800b74c:	2300      	movs	r3, #0
 800b74e:	4604      	mov	r4, r0
 800b750:	4608      	mov	r0, r1
 800b752:	602b      	str	r3, [r5, #0]
 800b754:	f7f6 fcb5 	bl	80020c2 <_close>
 800b758:	1c43      	adds	r3, r0, #1
 800b75a:	d102      	bne.n	800b762 <_close_r+0x1a>
 800b75c:	682b      	ldr	r3, [r5, #0]
 800b75e:	b103      	cbz	r3, 800b762 <_close_r+0x1a>
 800b760:	6023      	str	r3, [r4, #0]
 800b762:	bd38      	pop	{r3, r4, r5, pc}
 800b764:	20005990 	.word	0x20005990

0800b768 <_fstat_r>:
 800b768:	b538      	push	{r3, r4, r5, lr}
 800b76a:	4d07      	ldr	r5, [pc, #28]	; (800b788 <_fstat_r+0x20>)
 800b76c:	2300      	movs	r3, #0
 800b76e:	4604      	mov	r4, r0
 800b770:	4608      	mov	r0, r1
 800b772:	4611      	mov	r1, r2
 800b774:	602b      	str	r3, [r5, #0]
 800b776:	f7f6 fcb0 	bl	80020da <_fstat>
 800b77a:	1c43      	adds	r3, r0, #1
 800b77c:	d102      	bne.n	800b784 <_fstat_r+0x1c>
 800b77e:	682b      	ldr	r3, [r5, #0]
 800b780:	b103      	cbz	r3, 800b784 <_fstat_r+0x1c>
 800b782:	6023      	str	r3, [r4, #0]
 800b784:	bd38      	pop	{r3, r4, r5, pc}
 800b786:	bf00      	nop
 800b788:	20005990 	.word	0x20005990

0800b78c <_isatty_r>:
 800b78c:	b538      	push	{r3, r4, r5, lr}
 800b78e:	4d06      	ldr	r5, [pc, #24]	; (800b7a8 <_isatty_r+0x1c>)
 800b790:	2300      	movs	r3, #0
 800b792:	4604      	mov	r4, r0
 800b794:	4608      	mov	r0, r1
 800b796:	602b      	str	r3, [r5, #0]
 800b798:	f7f6 fcaf 	bl	80020fa <_isatty>
 800b79c:	1c43      	adds	r3, r0, #1
 800b79e:	d102      	bne.n	800b7a6 <_isatty_r+0x1a>
 800b7a0:	682b      	ldr	r3, [r5, #0]
 800b7a2:	b103      	cbz	r3, 800b7a6 <_isatty_r+0x1a>
 800b7a4:	6023      	str	r3, [r4, #0]
 800b7a6:	bd38      	pop	{r3, r4, r5, pc}
 800b7a8:	20005990 	.word	0x20005990

0800b7ac <_lseek_r>:
 800b7ac:	b538      	push	{r3, r4, r5, lr}
 800b7ae:	4d07      	ldr	r5, [pc, #28]	; (800b7cc <_lseek_r+0x20>)
 800b7b0:	4604      	mov	r4, r0
 800b7b2:	4608      	mov	r0, r1
 800b7b4:	4611      	mov	r1, r2
 800b7b6:	2200      	movs	r2, #0
 800b7b8:	602a      	str	r2, [r5, #0]
 800b7ba:	461a      	mov	r2, r3
 800b7bc:	f7f6 fca8 	bl	8002110 <_lseek>
 800b7c0:	1c43      	adds	r3, r0, #1
 800b7c2:	d102      	bne.n	800b7ca <_lseek_r+0x1e>
 800b7c4:	682b      	ldr	r3, [r5, #0]
 800b7c6:	b103      	cbz	r3, 800b7ca <_lseek_r+0x1e>
 800b7c8:	6023      	str	r3, [r4, #0]
 800b7ca:	bd38      	pop	{r3, r4, r5, pc}
 800b7cc:	20005990 	.word	0x20005990

0800b7d0 <memmove>:
 800b7d0:	4288      	cmp	r0, r1
 800b7d2:	b510      	push	{r4, lr}
 800b7d4:	eb01 0402 	add.w	r4, r1, r2
 800b7d8:	d902      	bls.n	800b7e0 <memmove+0x10>
 800b7da:	4284      	cmp	r4, r0
 800b7dc:	4623      	mov	r3, r4
 800b7de:	d807      	bhi.n	800b7f0 <memmove+0x20>
 800b7e0:	1e43      	subs	r3, r0, #1
 800b7e2:	42a1      	cmp	r1, r4
 800b7e4:	d008      	beq.n	800b7f8 <memmove+0x28>
 800b7e6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b7ea:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b7ee:	e7f8      	b.n	800b7e2 <memmove+0x12>
 800b7f0:	4402      	add	r2, r0
 800b7f2:	4601      	mov	r1, r0
 800b7f4:	428a      	cmp	r2, r1
 800b7f6:	d100      	bne.n	800b7fa <memmove+0x2a>
 800b7f8:	bd10      	pop	{r4, pc}
 800b7fa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b7fe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b802:	e7f7      	b.n	800b7f4 <memmove+0x24>

0800b804 <__malloc_lock>:
 800b804:	4801      	ldr	r0, [pc, #4]	; (800b80c <__malloc_lock+0x8>)
 800b806:	f7ff b9df 	b.w	800abc8 <__retarget_lock_acquire_recursive>
 800b80a:	bf00      	nop
 800b80c:	20005988 	.word	0x20005988

0800b810 <__malloc_unlock>:
 800b810:	4801      	ldr	r0, [pc, #4]	; (800b818 <__malloc_unlock+0x8>)
 800b812:	f7ff b9da 	b.w	800abca <__retarget_lock_release_recursive>
 800b816:	bf00      	nop
 800b818:	20005988 	.word	0x20005988

0800b81c <_realloc_r>:
 800b81c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b81e:	4607      	mov	r7, r0
 800b820:	4614      	mov	r4, r2
 800b822:	460e      	mov	r6, r1
 800b824:	b921      	cbnz	r1, 800b830 <_realloc_r+0x14>
 800b826:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800b82a:	4611      	mov	r1, r2
 800b82c:	f7ff ba82 	b.w	800ad34 <_malloc_r>
 800b830:	b922      	cbnz	r2, 800b83c <_realloc_r+0x20>
 800b832:	f7ff fa2f 	bl	800ac94 <_free_r>
 800b836:	4625      	mov	r5, r4
 800b838:	4628      	mov	r0, r5
 800b83a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b83c:	f000 f826 	bl	800b88c <_malloc_usable_size_r>
 800b840:	42a0      	cmp	r0, r4
 800b842:	d20f      	bcs.n	800b864 <_realloc_r+0x48>
 800b844:	4621      	mov	r1, r4
 800b846:	4638      	mov	r0, r7
 800b848:	f7ff fa74 	bl	800ad34 <_malloc_r>
 800b84c:	4605      	mov	r5, r0
 800b84e:	2800      	cmp	r0, #0
 800b850:	d0f2      	beq.n	800b838 <_realloc_r+0x1c>
 800b852:	4631      	mov	r1, r6
 800b854:	4622      	mov	r2, r4
 800b856:	f7fe fe7b 	bl	800a550 <memcpy>
 800b85a:	4631      	mov	r1, r6
 800b85c:	4638      	mov	r0, r7
 800b85e:	f7ff fa19 	bl	800ac94 <_free_r>
 800b862:	e7e9      	b.n	800b838 <_realloc_r+0x1c>
 800b864:	4635      	mov	r5, r6
 800b866:	e7e7      	b.n	800b838 <_realloc_r+0x1c>

0800b868 <_read_r>:
 800b868:	b538      	push	{r3, r4, r5, lr}
 800b86a:	4d07      	ldr	r5, [pc, #28]	; (800b888 <_read_r+0x20>)
 800b86c:	4604      	mov	r4, r0
 800b86e:	4608      	mov	r0, r1
 800b870:	4611      	mov	r1, r2
 800b872:	2200      	movs	r2, #0
 800b874:	602a      	str	r2, [r5, #0]
 800b876:	461a      	mov	r2, r3
 800b878:	f7f6 fbea 	bl	8002050 <_read>
 800b87c:	1c43      	adds	r3, r0, #1
 800b87e:	d102      	bne.n	800b886 <_read_r+0x1e>
 800b880:	682b      	ldr	r3, [r5, #0]
 800b882:	b103      	cbz	r3, 800b886 <_read_r+0x1e>
 800b884:	6023      	str	r3, [r4, #0]
 800b886:	bd38      	pop	{r3, r4, r5, pc}
 800b888:	20005990 	.word	0x20005990

0800b88c <_malloc_usable_size_r>:
 800b88c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b890:	1f18      	subs	r0, r3, #4
 800b892:	2b00      	cmp	r3, #0
 800b894:	bfbc      	itt	lt
 800b896:	580b      	ldrlt	r3, [r1, r0]
 800b898:	18c0      	addlt	r0, r0, r3
 800b89a:	4770      	bx	lr

0800b89c <_init>:
 800b89c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b89e:	bf00      	nop
 800b8a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b8a2:	bc08      	pop	{r3}
 800b8a4:	469e      	mov	lr, r3
 800b8a6:	4770      	bx	lr

0800b8a8 <_fini>:
 800b8a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b8aa:	bf00      	nop
 800b8ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b8ae:	bc08      	pop	{r3}
 800b8b0:	469e      	mov	lr, r3
 800b8b2:	4770      	bx	lr
