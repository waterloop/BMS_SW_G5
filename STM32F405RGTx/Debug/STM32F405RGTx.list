
STM32F405RGTx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004104  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000270  08004294  08004294  00014294  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004504  08004504  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004504  08004504  00014504  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800450c  0800450c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800450c  0800450c  0001450c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004510  08004510  00014510  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004514  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000148  20000070  08004584  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001b8  08004584  000201b8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011a5e  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002483  00000000  00000000  00031afe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f88  00000000  00000000  00033f88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ea0  00000000  00000000  00034f10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020386  00000000  00000000  00035db0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010735  00000000  00000000  00056136  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c4709  00000000  00000000  0006686b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0012af74  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004574  00000000  00000000  0012afc8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800427c 	.word	0x0800427c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	0800427c 	.word	0x0800427c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <uart1_print>:
#include "timer_utils.h"
#include "stdint.h"
#include "stdio.h"
#include "string.h"

void uart1_print(char* char_arr) {
 8000578:	b580      	push	{r7, lr}
 800057a:	b082      	sub	sp, #8
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (unsigned char*)(char_arr), strlen(char_arr), 500);
 8000580:	6878      	ldr	r0, [r7, #4]
 8000582:	f7ff fe25 	bl	80001d0 <strlen>
 8000586:	4603      	mov	r3, r0
 8000588:	b29a      	uxth	r2, r3
 800058a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800058e:	6879      	ldr	r1, [r7, #4]
 8000590:	4803      	ldr	r0, [pc, #12]	; (80005a0 <uart1_print+0x28>)
 8000592:	f002 ff6e 	bl	8003472 <HAL_UART_Transmit>
}
 8000596:	bf00      	nop
 8000598:	3708      	adds	r7, #8
 800059a:	46bd      	mov	sp, r7
 800059c:	bd80      	pop	{r7, pc}
 800059e:	bf00      	nop
 80005a0:	200000f0 	.word	0x200000f0

080005a4 <bms_entry>:
		GPIOC->ODR ^= (1u << 3);
		delay_us(1);
	}
}

int bms_entry() {	
 80005a4:	b5b0      	push	{r4, r5, r7, lr}
 80005a6:	f5ad 7d62 	sub.w	sp, sp, #904	; 0x388
 80005aa:	af16      	add	r7, sp, #88	; 0x58
	uart1_print("start...\n");
 80005ac:	484a      	ldr	r0, [pc, #296]	; (80006d8 <bms_entry+0x134>)
 80005ae:	f7ff ffe3 	bl	8000578 <uart1_print>

	start_timers();
 80005b2:	f000 fd73 	bl	800109c <start_timers>
	// blinky_loop();
	// delay_us_test();

	Ltc6813 slave_device = Ltc6813_init(hspi2, GPIOB, 12);
 80005b6:	f507 7532 	add.w	r5, r7, #712	; 0x2c8
 80005ba:	4c48      	ldr	r4, [pc, #288]	; (80006dc <bms_entry+0x138>)
 80005bc:	230c      	movs	r3, #12
 80005be:	9314      	str	r3, [sp, #80]	; 0x50
 80005c0:	4b47      	ldr	r3, [pc, #284]	; (80006e0 <bms_entry+0x13c>)
 80005c2:	9313      	str	r3, [sp, #76]	; 0x4c
 80005c4:	4668      	mov	r0, sp
 80005c6:	f104 030c 	add.w	r3, r4, #12
 80005ca:	224c      	movs	r2, #76	; 0x4c
 80005cc:	4619      	mov	r1, r3
 80005ce:	f003 fa1f 	bl	8003a10 <memcpy>
 80005d2:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 80005d6:	4628      	mov	r0, r5
 80005d8:	f000 f921 	bl	800081e <Ltc6813_init>

	Buffer pkt = Buffer_init();
 80005dc:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80005e0:	4618      	mov	r0, r3
 80005e2:	f000 f883 	bl	80006ec <Buffer_init>
	// RDCVA command 
	// Buffer_append(&pkt, 0b000u);
	// Buffer_append(&pkt, 0b00000100u);
	// Buffer_add_pec(&pkt);

	Buffer response_pkt = Buffer_init();
 80005e6:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 80005ea:	4618      	mov	r0, r3
 80005ec:	f000 f87e 	bl	80006ec <Buffer_init>
//	response_pkt.len = 8*6;

	char str[500];
	for (uint8_t i = 0; i < pkt.len; i++) {
 80005f0:	2300      	movs	r3, #0
 80005f2:	f887 332f 	strb.w	r3, [r7, #815]	; 0x32f
 80005f6:	e018      	b.n	800062a <bms_entry+0x86>
		sprintf(str, "pkt byte %d: %d\n", i, Buffer_index(&pkt, i));
 80005f8:	f897 432f 	ldrb.w	r4, [r7, #815]	; 0x32f
 80005fc:	f897 232f 	ldrb.w	r2, [r7, #815]	; 0x32f
 8000600:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8000604:	4611      	mov	r1, r2
 8000606:	4618      	mov	r0, r3
 8000608:	f000 f8a3 	bl	8000752 <Buffer_index>
 800060c:	4603      	mov	r3, r0
 800060e:	1d38      	adds	r0, r7, #4
 8000610:	4622      	mov	r2, r4
 8000612:	4934      	ldr	r1, [pc, #208]	; (80006e4 <bms_entry+0x140>)
 8000614:	f003 fa12 	bl	8003a3c <siprintf>
		uart1_print(str);
 8000618:	1d3b      	adds	r3, r7, #4
 800061a:	4618      	mov	r0, r3
 800061c:	f7ff ffac 	bl	8000578 <uart1_print>
	for (uint8_t i = 0; i < pkt.len; i++) {
 8000620:	f897 332f 	ldrb.w	r3, [r7, #815]	; 0x32f
 8000624:	3301      	adds	r3, #1
 8000626:	f887 332f 	strb.w	r3, [r7, #815]	; 0x32f
 800062a:	f897 3260 	ldrb.w	r3, [r7, #608]	; 0x260
 800062e:	f897 232f 	ldrb.w	r2, [r7, #815]	; 0x32f
 8000632:	429a      	cmp	r2, r3
 8000634:	d3e0      	bcc.n	80005f8 <bms_entry+0x54>
	}
	uart1_print("\n");
 8000636:	482c      	ldr	r0, [pc, #176]	; (80006e8 <bms_entry+0x144>)
 8000638:	f7ff ff9e 	bl	8000578 <uart1_print>

	Ltc6813_wakeup_sleep(&slave_device);
 800063c:	f507 7332 	add.w	r3, r7, #712	; 0x2c8
 8000640:	4618      	mov	r0, r3
 8000642:	f000 f967 	bl	8000914 <Ltc6813_wakeup_sleep>
	HAL_Delay(1000);
 8000646:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800064a:	f000 fde7 	bl	800121c <HAL_Delay>
		// }
		// else {
		// 	Buffer_set_index(&pkt, 2, 0b11111000u);
		// }

		Ltc6813_wakeup_sleep(&slave_device);
 800064e:	f507 7332 	add.w	r3, r7, #712	; 0x2c8
 8000652:	4618      	mov	r0, r3
 8000654:	f000 f95e 	bl	8000914 <Ltc6813_wakeup_sleep>
		Ltc6813_read_cfga(&slave_device, &pkt, &response_pkt);
 8000658:	f507 72fc 	add.w	r2, r7, #504	; 0x1f8
 800065c:	f507 7118 	add.w	r1, r7, #608	; 0x260
 8000660:	f507 7332 	add.w	r3, r7, #712	; 0x2c8
 8000664:	4618      	mov	r0, r3
 8000666:	f000 f96b 	bl	8000940 <Ltc6813_read_cfga>

		for (uint8_t i = 0; i < response_pkt.len; i++) {
 800066a:	2300      	movs	r3, #0
 800066c:	f887 332e 	strb.w	r3, [r7, #814]	; 0x32e
 8000670:	e018      	b.n	80006a4 <bms_entry+0x100>
			sprintf(str, "pkt byte %d: %d\n", i, Buffer_index(&response_pkt, i));
 8000672:	f897 432e 	ldrb.w	r4, [r7, #814]	; 0x32e
 8000676:	f897 232e 	ldrb.w	r2, [r7, #814]	; 0x32e
 800067a:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 800067e:	4611      	mov	r1, r2
 8000680:	4618      	mov	r0, r3
 8000682:	f000 f866 	bl	8000752 <Buffer_index>
 8000686:	4603      	mov	r3, r0
 8000688:	1d38      	adds	r0, r7, #4
 800068a:	4622      	mov	r2, r4
 800068c:	4915      	ldr	r1, [pc, #84]	; (80006e4 <bms_entry+0x140>)
 800068e:	f003 f9d5 	bl	8003a3c <siprintf>
			uart1_print(str);
 8000692:	1d3b      	adds	r3, r7, #4
 8000694:	4618      	mov	r0, r3
 8000696:	f7ff ff6f 	bl	8000578 <uart1_print>
		for (uint8_t i = 0; i < response_pkt.len; i++) {
 800069a:	f897 332e 	ldrb.w	r3, [r7, #814]	; 0x32e
 800069e:	3301      	adds	r3, #1
 80006a0:	f887 332e 	strb.w	r3, [r7, #814]	; 0x32e
 80006a4:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 80006a8:	781b      	ldrb	r3, [r3, #0]
 80006aa:	f897 232e 	ldrb.w	r2, [r7, #814]	; 0x32e
 80006ae:	429a      	cmp	r2, r3
 80006b0:	d3df      	bcc.n	8000672 <bms_entry+0xce>
		}
		uart1_print("\n");
 80006b2:	480d      	ldr	r0, [pc, #52]	; (80006e8 <bms_entry+0x144>)
 80006b4:	f7ff ff60 	bl	8000578 <uart1_print>
			sprintf(str, "byte %d: %d\n", i, Buffer_index(&response_pkt, i));
			uart1_print(str);
		}
		uart1_print("\n"); */

		Buffer_clear(&pkt);
 80006b8:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80006bc:	4618      	mov	r0, r3
 80006be:	f000 f8a1 	bl	8000804 <Buffer_clear>
		Buffer_clear(&response_pkt);
 80006c2:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 80006c6:	4618      	mov	r0, r3
 80006c8:	f000 f89c 	bl	8000804 <Buffer_clear>

		HAL_Delay(500);
 80006cc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80006d0:	f000 fda4 	bl	800121c <HAL_Delay>
		Ltc6813_wakeup_sleep(&slave_device);
 80006d4:	e7bb      	b.n	800064e <bms_entry+0xaa>
 80006d6:	bf00      	nop
 80006d8:	08004294 	.word	0x08004294
 80006dc:	20000098 	.word	0x20000098
 80006e0:	40020400 	.word	0x40020400
 80006e4:	080042a0 	.word	0x080042a0
 80006e8:	080042b4 	.word	0x080042b4

080006ec <Buffer_init>:
	0x585a, 0x8ba7, 0x4e3e, 0x450c, 0x8095
};

/////////////////////////////////////////////////////////////////////////////////////////////////////
// Buffer methods
Buffer Buffer_init() {
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b09c      	sub	sp, #112	; 0x70
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	6078      	str	r0, [r7, #4]
	Buffer buffer = {};
 80006f4:	f107 0308 	add.w	r3, r7, #8
 80006f8:	2265      	movs	r2, #101	; 0x65
 80006fa:	2100      	movs	r1, #0
 80006fc:	4618      	mov	r0, r3
 80006fe:	f003 f995 	bl	8003a2c <memset>
	buffer.len = 0;
 8000702:	2300      	movs	r3, #0
 8000704:	723b      	strb	r3, [r7, #8]
	return buffer;
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	4618      	mov	r0, r3
 800070a:	f107 0308 	add.w	r3, r7, #8
 800070e:	2265      	movs	r2, #101	; 0x65
 8000710:	4619      	mov	r1, r3
 8000712:	f003 f97d 	bl	8003a10 <memcpy>
}
 8000716:	6878      	ldr	r0, [r7, #4]
 8000718:	3770      	adds	r7, #112	; 0x70
 800071a:	46bd      	mov	sp, r7
 800071c:	bd80      	pop	{r7, pc}

0800071e <Buffer_append>:

void Buffer_append(Buffer* self, uint8_t val) {
 800071e:	b480      	push	{r7}
 8000720:	b085      	sub	sp, #20
 8000722:	af00      	add	r7, sp, #0
 8000724:	6078      	str	r0, [r7, #4]
 8000726:	460b      	mov	r3, r1
 8000728:	70fb      	strb	r3, [r7, #3]
	uint8_t indx = self->len;
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	781b      	ldrb	r3, [r3, #0]
 800072e:	73fb      	strb	r3, [r7, #15]
	self->data[indx] = val;
 8000730:	7bfb      	ldrb	r3, [r7, #15]
 8000732:	687a      	ldr	r2, [r7, #4]
 8000734:	4413      	add	r3, r2
 8000736:	78fa      	ldrb	r2, [r7, #3]
 8000738:	705a      	strb	r2, [r3, #1]
	self->len += 1;
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	781b      	ldrb	r3, [r3, #0]
 800073e:	3301      	adds	r3, #1
 8000740:	b2da      	uxtb	r2, r3
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	701a      	strb	r2, [r3, #0]
}
 8000746:	bf00      	nop
 8000748:	3714      	adds	r7, #20
 800074a:	46bd      	mov	sp, r7
 800074c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000750:	4770      	bx	lr

08000752 <Buffer_index>:

uint8_t Buffer_index(Buffer* self, uint8_t indx) {
 8000752:	b580      	push	{r7, lr}
 8000754:	b082      	sub	sp, #8
 8000756:	af00      	add	r7, sp, #0
 8000758:	6078      	str	r0, [r7, #4]
 800075a:	460b      	mov	r3, r1
 800075c:	70fb      	strb	r3, [r7, #3]
	if (indx >= self->len) { Error_Handler(); }
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	781b      	ldrb	r3, [r3, #0]
 8000762:	78fa      	ldrb	r2, [r7, #3]
 8000764:	429a      	cmp	r2, r3
 8000766:	d301      	bcc.n	800076c <Buffer_index+0x1a>
 8000768:	f000 fb00 	bl	8000d6c <Error_Handler>
	return self->data[indx];
 800076c:	78fb      	ldrb	r3, [r7, #3]
 800076e:	687a      	ldr	r2, [r7, #4]
 8000770:	4413      	add	r3, r2
 8000772:	785b      	ldrb	r3, [r3, #1]
}
 8000774:	4618      	mov	r0, r3
 8000776:	3708      	adds	r7, #8
 8000778:	46bd      	mov	sp, r7
 800077a:	bd80      	pop	{r7, pc}

0800077c <Buffer_add_pec>:
void Buffer_set_index(Buffer* self, uint8_t indx, uint8_t val) {
	if (indx >= self->len) { Error_Handler(); }
	self->data[indx] = val;
}

void Buffer_add_pec(Buffer* self) {
 800077c:	b590      	push	{r4, r7, lr}
 800077e:	b085      	sub	sp, #20
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]
	uint16_t remainder = 16;
 8000784:	2310      	movs	r3, #16
 8000786:	81fb      	strh	r3, [r7, #14]
	uint16_t addr = 0;
 8000788:	2300      	movs	r3, #0
 800078a:	817b      	strh	r3, [r7, #10]
	for (uint8_t i = 0; i < self->len; i++) {
 800078c:	2300      	movs	r3, #0
 800078e:	737b      	strb	r3, [r7, #13]
 8000790:	e01b      	b.n	80007ca <Buffer_add_pec+0x4e>
		addr = ( (remainder >> 7)^Buffer_index(self, i) ) & 0xff;
 8000792:	89fb      	ldrh	r3, [r7, #14]
 8000794:	09db      	lsrs	r3, r3, #7
 8000796:	b29c      	uxth	r4, r3
 8000798:	7b7b      	ldrb	r3, [r7, #13]
 800079a:	4619      	mov	r1, r3
 800079c:	6878      	ldr	r0, [r7, #4]
 800079e:	f7ff ffd8 	bl	8000752 <Buffer_index>
 80007a2:	4603      	mov	r3, r0
 80007a4:	b29b      	uxth	r3, r3
 80007a6:	4063      	eors	r3, r4
 80007a8:	b29b      	uxth	r3, r3
 80007aa:	b2db      	uxtb	r3, r3
 80007ac:	817b      	strh	r3, [r7, #10]
		remainder = (remainder << 8)^_CRC15_LUT[addr];
 80007ae:	89fb      	ldrh	r3, [r7, #14]
 80007b0:	021b      	lsls	r3, r3, #8
 80007b2:	b21a      	sxth	r2, r3
 80007b4:	897b      	ldrh	r3, [r7, #10]
 80007b6:	4912      	ldr	r1, [pc, #72]	; (8000800 <Buffer_add_pec+0x84>)
 80007b8:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80007bc:	b21b      	sxth	r3, r3
 80007be:	4053      	eors	r3, r2
 80007c0:	b21b      	sxth	r3, r3
 80007c2:	81fb      	strh	r3, [r7, #14]
	for (uint8_t i = 0; i < self->len; i++) {
 80007c4:	7b7b      	ldrb	r3, [r7, #13]
 80007c6:	3301      	adds	r3, #1
 80007c8:	737b      	strb	r3, [r7, #13]
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	781b      	ldrb	r3, [r3, #0]
 80007ce:	7b7a      	ldrb	r2, [r7, #13]
 80007d0:	429a      	cmp	r2, r3
 80007d2:	d3de      	bcc.n	8000792 <Buffer_add_pec+0x16>
	}
	uint16_t pec = remainder*2;
 80007d4:	89fb      	ldrh	r3, [r7, #14]
 80007d6:	005b      	lsls	r3, r3, #1
 80007d8:	813b      	strh	r3, [r7, #8]
	Buffer_append(self, (pec >> 8) & 0xff);
 80007da:	893b      	ldrh	r3, [r7, #8]
 80007dc:	0a1b      	lsrs	r3, r3, #8
 80007de:	b29b      	uxth	r3, r3
 80007e0:	b2db      	uxtb	r3, r3
 80007e2:	4619      	mov	r1, r3
 80007e4:	6878      	ldr	r0, [r7, #4]
 80007e6:	f7ff ff9a 	bl	800071e <Buffer_append>
	Buffer_append(self, pec & 0xff);
 80007ea:	893b      	ldrh	r3, [r7, #8]
 80007ec:	b2db      	uxtb	r3, r3
 80007ee:	4619      	mov	r1, r3
 80007f0:	6878      	ldr	r0, [r7, #4]
 80007f2:	f7ff ff94 	bl	800071e <Buffer_append>
}
 80007f6:	bf00      	nop
 80007f8:	3714      	adds	r7, #20
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd90      	pop	{r4, r7, pc}
 80007fe:	bf00      	nop
 8000800:	080042b8 	.word	0x080042b8

08000804 <Buffer_clear>:

void Buffer_clear(Buffer* self) {
 8000804:	b480      	push	{r7}
 8000806:	b083      	sub	sp, #12
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
	self -> len = 0;
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	2200      	movs	r2, #0
 8000810:	701a      	strb	r2, [r3, #0]
}
 8000812:	bf00      	nop
 8000814:	370c      	adds	r7, #12
 8000816:	46bd      	mov	sp, r7
 8000818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081c:	4770      	bx	lr

0800081e <Ltc6813_init>:
/////////////////////////////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////////////////////////////
// Ltc6813 methods
Ltc6813 Ltc6813_init(SPI_HandleTypeDef spi, GPIO_TypeDef* cs_gpio_port, uint8_t cs_pin_num) {
 800081e:	b084      	sub	sp, #16
 8000820:	b580      	push	{r7, lr}
 8000822:	b09c      	sub	sp, #112	; 0x70
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]
 8000828:	f107 007c 	add.w	r0, r7, #124	; 0x7c
 800082c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	Ltc6813 slave_device = {};
 8000830:	f107 030c 	add.w	r3, r7, #12
 8000834:	2264      	movs	r2, #100	; 0x64
 8000836:	2100      	movs	r1, #0
 8000838:	4618      	mov	r0, r3
 800083a:	f003 f8f7 	bl	8003a2c <memset>
	slave_device._spi_interface = spi;
 800083e:	f107 030c 	add.w	r3, r7, #12
 8000842:	f107 017c 	add.w	r1, r7, #124	; 0x7c
 8000846:	2258      	movs	r2, #88	; 0x58
 8000848:	4618      	mov	r0, r3
 800084a:	f003 f8e1 	bl	8003a10 <memcpy>

	// config CS pin as GPIO output
	cs_gpio_port->MODER &= ~(0b11u << (cs_pin_num*2));
 800084e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8000852:	681a      	ldr	r2, [r3, #0]
 8000854:	f897 30d8 	ldrb.w	r3, [r7, #216]	; 0xd8
 8000858:	005b      	lsls	r3, r3, #1
 800085a:	2103      	movs	r1, #3
 800085c:	fa01 f303 	lsl.w	r3, r1, r3
 8000860:	43db      	mvns	r3, r3
 8000862:	401a      	ands	r2, r3
 8000864:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8000868:	601a      	str	r2, [r3, #0]
	cs_gpio_port->MODER |= (0b01u << (cs_pin_num*2));
 800086a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800086e:	681a      	ldr	r2, [r3, #0]
 8000870:	f897 30d8 	ldrb.w	r3, [r7, #216]	; 0xd8
 8000874:	005b      	lsls	r3, r3, #1
 8000876:	2101      	movs	r1, #1
 8000878:	fa01 f303 	lsl.w	r3, r1, r3
 800087c:	431a      	orrs	r2, r3
 800087e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8000882:	601a      	str	r2, [r3, #0]

	slave_device._cs_gpio_port = cs_gpio_port;
 8000884:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8000888:	667b      	str	r3, [r7, #100]	; 0x64
	slave_device._cs_pin_num = cs_pin_num;
 800088a:	f897 30d8 	ldrb.w	r3, [r7, #216]	; 0xd8
 800088e:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68

	slave_device.timeout = 10000;
 8000892:	f242 7310 	movw	r3, #10000	; 0x2710
 8000896:	66fb      	str	r3, [r7, #108]	; 0x6c

	Ltc6813_cs_high(&slave_device);
 8000898:	f107 030c 	add.w	r3, r7, #12
 800089c:	4618      	mov	r0, r3
 800089e:	f000 f824 	bl	80008ea <Ltc6813_cs_high>

	return slave_device;
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	4618      	mov	r0, r3
 80008a6:	f107 030c 	add.w	r3, r7, #12
 80008aa:	2264      	movs	r2, #100	; 0x64
 80008ac:	4619      	mov	r1, r3
 80008ae:	f003 f8af 	bl	8003a10 <memcpy>
}
 80008b2:	6878      	ldr	r0, [r7, #4]
 80008b4:	3770      	adds	r7, #112	; 0x70
 80008b6:	46bd      	mov	sp, r7
 80008b8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80008bc:	b004      	add	sp, #16
 80008be:	4770      	bx	lr

080008c0 <Ltc6813_cs_low>:

void Ltc6813_cs_low(Ltc6813* self) { HAL_GPIO_WritePin(self->_cs_gpio_port, (1u << self->_cs_pin_num), 0); }
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b082      	sub	sp, #8
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	6d98      	ldr	r0, [r3, #88]	; 0x58
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80008d2:	461a      	mov	r2, r3
 80008d4:	2301      	movs	r3, #1
 80008d6:	4093      	lsls	r3, r2
 80008d8:	b29b      	uxth	r3, r3
 80008da:	2200      	movs	r2, #0
 80008dc:	4619      	mov	r1, r3
 80008de:	f001 f83f 	bl	8001960 <HAL_GPIO_WritePin>
 80008e2:	bf00      	nop
 80008e4:	3708      	adds	r7, #8
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bd80      	pop	{r7, pc}

080008ea <Ltc6813_cs_high>:
void Ltc6813_cs_high(Ltc6813* self) { HAL_GPIO_WritePin(self->_cs_gpio_port, (1u << self->_cs_pin_num), 1); }
 80008ea:	b580      	push	{r7, lr}
 80008ec:	b082      	sub	sp, #8
 80008ee:	af00      	add	r7, sp, #0
 80008f0:	6078      	str	r0, [r7, #4]
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	6d98      	ldr	r0, [r3, #88]	; 0x58
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80008fc:	461a      	mov	r2, r3
 80008fe:	2301      	movs	r3, #1
 8000900:	4093      	lsls	r3, r2
 8000902:	b29b      	uxth	r3, r3
 8000904:	2201      	movs	r2, #1
 8000906:	4619      	mov	r1, r3
 8000908:	f001 f82a 	bl	8001960 <HAL_GPIO_WritePin>
 800090c:	bf00      	nop
 800090e:	3708      	adds	r7, #8
 8000910:	46bd      	mov	sp, r7
 8000912:	bd80      	pop	{r7, pc}

08000914 <Ltc6813_wakeup_sleep>:

// WAKEUP FUNCTIONS:
// setting CS low will send a long isoSPI pulse (reference: page 18 of LTC6820 datasheet)
void Ltc6813_wakeup_sleep(Ltc6813* self) {
 8000914:	b580      	push	{r7, lr}
 8000916:	b082      	sub	sp, #8
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
	Ltc6813_cs_low(self);
 800091c:	6878      	ldr	r0, [r7, #4]
 800091e:	f7ff ffcf 	bl	80008c0 <Ltc6813_cs_low>
	delay_us(410);		// according to datasheet, t_wake = 400us
 8000922:	f44f 70cd 	mov.w	r0, #410	; 0x19a
 8000926:	f000 fbc3 	bl	80010b0 <delay_us>
	Ltc6813_cs_high(self);
 800092a:	6878      	ldr	r0, [r7, #4]
 800092c:	f7ff ffdd 	bl	80008ea <Ltc6813_cs_high>
	delay_us(30);
 8000930:	201e      	movs	r0, #30
 8000932:	f000 fbbd 	bl	80010b0 <delay_us>
}
 8000936:	bf00      	nop
 8000938:	3708      	adds	r7, #8
 800093a:	46bd      	mov	sp, r7
 800093c:	bd80      	pop	{r7, pc}
	...

08000940 <Ltc6813_read_cfga>:
	Ltc6813_cs_high(self);
}

// READ COMMAND FUNCTIONS:
// commands to send read commands and receive data back (page 60 of LTC6813 datasheet)
void Ltc6813_read_cfga(Ltc6813* self, Buffer* send_pkt, Buffer* receive_pkt) {
 8000940:	b580      	push	{r7, lr}
 8000942:	b084      	sub	sp, #16
 8000944:	af00      	add	r7, sp, #0
 8000946:	60f8      	str	r0, [r7, #12]
 8000948:	60b9      	str	r1, [r7, #8]
 800094a:	607a      	str	r2, [r7, #4]
	Buffer_clear(send_pkt);
 800094c:	68b8      	ldr	r0, [r7, #8]
 800094e:	f7ff ff59 	bl	8000804 <Buffer_clear>

	Buffer_append(send_pkt, 0b000u);
 8000952:	2100      	movs	r1, #0
 8000954:	68b8      	ldr	r0, [r7, #8]
 8000956:	f7ff fee2 	bl	800071e <Buffer_append>
	Buffer_append(send_pkt, 0b00000010u);
 800095a:	2102      	movs	r1, #2
 800095c:	68b8      	ldr	r0, [r7, #8]
 800095e:	f7ff fede 	bl	800071e <Buffer_append>

	Buffer_add_pec(send_pkt);
 8000962:	68b8      	ldr	r0, [r7, #8]
 8000964:	f7ff ff0a 	bl	800077c <Buffer_add_pec>

	receive_pkt -> len = 8*6;
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	2230      	movs	r2, #48	; 0x30
 800096c:	701a      	strb	r2, [r3, #0]

	Ltc6813_cs_low(self);
 800096e:	68f8      	ldr	r0, [r7, #12]
 8000970:	f7ff ffa6 	bl	80008c0 <Ltc6813_cs_low>
	HAL_SPI_Transmit(&hspi2, send_pkt -> data, send_pkt -> len, self -> timeout);
 8000974:	68bb      	ldr	r3, [r7, #8]
 8000976:	1c59      	adds	r1, r3, #1
 8000978:	68bb      	ldr	r3, [r7, #8]
 800097a:	781b      	ldrb	r3, [r3, #0]
 800097c:	b29a      	uxth	r2, r3
 800097e:	68fb      	ldr	r3, [r7, #12]
 8000980:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000982:	480a      	ldr	r0, [pc, #40]	; (80009ac <Ltc6813_read_cfga+0x6c>)
 8000984:	f001 fcd7 	bl	8002336 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi2, receive_pkt -> data, receive_pkt -> len, self -> timeout);
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	1c59      	adds	r1, r3, #1
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	781b      	ldrb	r3, [r3, #0]
 8000990:	b29a      	uxth	r2, r3
 8000992:	68fb      	ldr	r3, [r7, #12]
 8000994:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000996:	4805      	ldr	r0, [pc, #20]	; (80009ac <Ltc6813_read_cfga+0x6c>)
 8000998:	f001 fe09 	bl	80025ae <HAL_SPI_Receive>
	Ltc6813_cs_high(self);
 800099c:	68f8      	ldr	r0, [r7, #12]
 800099e:	f7ff ffa4 	bl	80008ea <Ltc6813_cs_high>
}
 80009a2:	bf00      	nop
 80009a4:	3710      	adds	r7, #16
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	bf00      	nop
 80009ac:	20000098 	.word	0x20000098

080009b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009b4:	f000 fbc0 	bl	8001138 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009b8:	f000 f810 	bl	80009dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009bc:	f000 f958 	bl	8000c70 <MX_GPIO_Init>
  MX_CAN1_Init();
 80009c0:	f000 f876 	bl	8000ab0 <MX_CAN1_Init>
  MX_SPI2_Init();
 80009c4:	f000 f8a8 	bl	8000b18 <MX_SPI2_Init>
  MX_USART1_UART_Init();
 80009c8:	f000 f928 	bl	8000c1c <MX_USART1_UART_Init>
  MX_TIM2_Init();
 80009cc:	f000 f8da 	bl	8000b84 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Infinite loop */
  return bms_entry();
 80009d0:	f7ff fde8 	bl	80005a4 <bms_entry>
 80009d4:	4603      	mov	r3, r0
}
 80009d6:	4618      	mov	r0, r3
 80009d8:	bd80      	pop	{r7, pc}
	...

080009dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b094      	sub	sp, #80	; 0x50
 80009e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009e2:	f107 0320 	add.w	r3, r7, #32
 80009e6:	2230      	movs	r2, #48	; 0x30
 80009e8:	2100      	movs	r1, #0
 80009ea:	4618      	mov	r0, r3
 80009ec:	f003 f81e 	bl	8003a2c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009f0:	f107 030c 	add.w	r3, r7, #12
 80009f4:	2200      	movs	r2, #0
 80009f6:	601a      	str	r2, [r3, #0]
 80009f8:	605a      	str	r2, [r3, #4]
 80009fa:	609a      	str	r2, [r3, #8]
 80009fc:	60da      	str	r2, [r3, #12]
 80009fe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a00:	2300      	movs	r3, #0
 8000a02:	60bb      	str	r3, [r7, #8]
 8000a04:	4b28      	ldr	r3, [pc, #160]	; (8000aa8 <SystemClock_Config+0xcc>)
 8000a06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a08:	4a27      	ldr	r2, [pc, #156]	; (8000aa8 <SystemClock_Config+0xcc>)
 8000a0a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a0e:	6413      	str	r3, [r2, #64]	; 0x40
 8000a10:	4b25      	ldr	r3, [pc, #148]	; (8000aa8 <SystemClock_Config+0xcc>)
 8000a12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a18:	60bb      	str	r3, [r7, #8]
 8000a1a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	607b      	str	r3, [r7, #4]
 8000a20:	4b22      	ldr	r3, [pc, #136]	; (8000aac <SystemClock_Config+0xd0>)
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	4a21      	ldr	r2, [pc, #132]	; (8000aac <SystemClock_Config+0xd0>)
 8000a26:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a2a:	6013      	str	r3, [r2, #0]
 8000a2c:	4b1f      	ldr	r3, [pc, #124]	; (8000aac <SystemClock_Config+0xd0>)
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a34:	607b      	str	r3, [r7, #4]
 8000a36:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a38:	2302      	movs	r3, #2
 8000a3a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a3c:	2301      	movs	r3, #1
 8000a3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a40:	2310      	movs	r3, #16
 8000a42:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a44:	2302      	movs	r3, #2
 8000a46:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000a4c:	2308      	movs	r3, #8
 8000a4e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 160;
 8000a50:	23a0      	movs	r3, #160	; 0xa0
 8000a52:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a54:	2302      	movs	r3, #2
 8000a56:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000a58:	2304      	movs	r3, #4
 8000a5a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a5c:	f107 0320 	add.w	r3, r7, #32
 8000a60:	4618      	mov	r0, r3
 8000a62:	f000 ff97 	bl	8001994 <HAL_RCC_OscConfig>
 8000a66:	4603      	mov	r3, r0
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d001      	beq.n	8000a70 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000a6c:	f000 f97e 	bl	8000d6c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a70:	230f      	movs	r3, #15
 8000a72:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a74:	2302      	movs	r3, #2
 8000a76:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000a7c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000a80:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000a82:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a86:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000a88:	f107 030c 	add.w	r3, r7, #12
 8000a8c:	2105      	movs	r1, #5
 8000a8e:	4618      	mov	r0, r3
 8000a90:	f001 f9f8 	bl	8001e84 <HAL_RCC_ClockConfig>
 8000a94:	4603      	mov	r3, r0
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d001      	beq.n	8000a9e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000a9a:	f000 f967 	bl	8000d6c <Error_Handler>
  }
}
 8000a9e:	bf00      	nop
 8000aa0:	3750      	adds	r7, #80	; 0x50
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	bf00      	nop
 8000aa8:	40023800 	.word	0x40023800
 8000aac:	40007000 	.word	0x40007000

08000ab0 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000ab4:	4b16      	ldr	r3, [pc, #88]	; (8000b10 <MX_CAN1_Init+0x60>)
 8000ab6:	4a17      	ldr	r2, [pc, #92]	; (8000b14 <MX_CAN1_Init+0x64>)
 8000ab8:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 8000aba:	4b15      	ldr	r3, [pc, #84]	; (8000b10 <MX_CAN1_Init+0x60>)
 8000abc:	2210      	movs	r2, #16
 8000abe:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000ac0:	4b13      	ldr	r3, [pc, #76]	; (8000b10 <MX_CAN1_Init+0x60>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000ac6:	4b12      	ldr	r3, [pc, #72]	; (8000b10 <MX_CAN1_Init+0x60>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 8000acc:	4b10      	ldr	r3, [pc, #64]	; (8000b10 <MX_CAN1_Init+0x60>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000ad2:	4b0f      	ldr	r3, [pc, #60]	; (8000b10 <MX_CAN1_Init+0x60>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000ad8:	4b0d      	ldr	r3, [pc, #52]	; (8000b10 <MX_CAN1_Init+0x60>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000ade:	4b0c      	ldr	r3, [pc, #48]	; (8000b10 <MX_CAN1_Init+0x60>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000ae4:	4b0a      	ldr	r3, [pc, #40]	; (8000b10 <MX_CAN1_Init+0x60>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000aea:	4b09      	ldr	r3, [pc, #36]	; (8000b10 <MX_CAN1_Init+0x60>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000af0:	4b07      	ldr	r3, [pc, #28]	; (8000b10 <MX_CAN1_Init+0x60>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000af6:	4b06      	ldr	r3, [pc, #24]	; (8000b10 <MX_CAN1_Init+0x60>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000afc:	4804      	ldr	r0, [pc, #16]	; (8000b10 <MX_CAN1_Init+0x60>)
 8000afe:	f000 fbb1 	bl	8001264 <HAL_CAN_Init>
 8000b02:	4603      	mov	r3, r0
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d001      	beq.n	8000b0c <MX_CAN1_Init+0x5c>
  {
    Error_Handler();
 8000b08:	f000 f930 	bl	8000d6c <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000b0c:	bf00      	nop
 8000b0e:	bd80      	pop	{r7, pc}
 8000b10:	2000017c 	.word	0x2000017c
 8000b14:	40006400 	.word	0x40006400

08000b18 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000b1c:	4b17      	ldr	r3, [pc, #92]	; (8000b7c <MX_SPI2_Init+0x64>)
 8000b1e:	4a18      	ldr	r2, [pc, #96]	; (8000b80 <MX_SPI2_Init+0x68>)
 8000b20:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000b22:	4b16      	ldr	r3, [pc, #88]	; (8000b7c <MX_SPI2_Init+0x64>)
 8000b24:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000b28:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000b2a:	4b14      	ldr	r3, [pc, #80]	; (8000b7c <MX_SPI2_Init+0x64>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000b30:	4b12      	ldr	r3, [pc, #72]	; (8000b7c <MX_SPI2_Init+0x64>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000b36:	4b11      	ldr	r3, [pc, #68]	; (8000b7c <MX_SPI2_Init+0x64>)
 8000b38:	2202      	movs	r2, #2
 8000b3a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000b3c:	4b0f      	ldr	r3, [pc, #60]	; (8000b7c <MX_SPI2_Init+0x64>)
 8000b3e:	2201      	movs	r2, #1
 8000b40:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000b42:	4b0e      	ldr	r3, [pc, #56]	; (8000b7c <MX_SPI2_Init+0x64>)
 8000b44:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000b48:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8000b4a:	4b0c      	ldr	r3, [pc, #48]	; (8000b7c <MX_SPI2_Init+0x64>)
 8000b4c:	2228      	movs	r2, #40	; 0x28
 8000b4e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b50:	4b0a      	ldr	r3, [pc, #40]	; (8000b7c <MX_SPI2_Init+0x64>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b56:	4b09      	ldr	r3, [pc, #36]	; (8000b7c <MX_SPI2_Init+0x64>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b5c:	4b07      	ldr	r3, [pc, #28]	; (8000b7c <MX_SPI2_Init+0x64>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000b62:	4b06      	ldr	r3, [pc, #24]	; (8000b7c <MX_SPI2_Init+0x64>)
 8000b64:	220a      	movs	r2, #10
 8000b66:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000b68:	4804      	ldr	r0, [pc, #16]	; (8000b7c <MX_SPI2_Init+0x64>)
 8000b6a:	f001 fb5b 	bl	8002224 <HAL_SPI_Init>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d001      	beq.n	8000b78 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000b74:	f000 f8fa 	bl	8000d6c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000b78:	bf00      	nop
 8000b7a:	bd80      	pop	{r7, pc}
 8000b7c:	20000098 	.word	0x20000098
 8000b80:	40003800 	.word	0x40003800

08000b84 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b086      	sub	sp, #24
 8000b88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b8a:	f107 0308 	add.w	r3, r7, #8
 8000b8e:	2200      	movs	r2, #0
 8000b90:	601a      	str	r2, [r3, #0]
 8000b92:	605a      	str	r2, [r3, #4]
 8000b94:	609a      	str	r2, [r3, #8]
 8000b96:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b98:	463b      	mov	r3, r7
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	601a      	str	r2, [r3, #0]
 8000b9e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000ba0:	4b1d      	ldr	r3, [pc, #116]	; (8000c18 <MX_TIM2_Init+0x94>)
 8000ba2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ba6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 79;
 8000ba8:	4b1b      	ldr	r3, [pc, #108]	; (8000c18 <MX_TIM2_Init+0x94>)
 8000baa:	224f      	movs	r2, #79	; 0x4f
 8000bac:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bae:	4b1a      	ldr	r3, [pc, #104]	; (8000c18 <MX_TIM2_Init+0x94>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000bb4:	4b18      	ldr	r3, [pc, #96]	; (8000c18 <MX_TIM2_Init+0x94>)
 8000bb6:	f04f 32ff 	mov.w	r2, #4294967295
 8000bba:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bbc:	4b16      	ldr	r3, [pc, #88]	; (8000c18 <MX_TIM2_Init+0x94>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bc2:	4b15      	ldr	r3, [pc, #84]	; (8000c18 <MX_TIM2_Init+0x94>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000bc8:	4813      	ldr	r0, [pc, #76]	; (8000c18 <MX_TIM2_Init+0x94>)
 8000bca:	f002 f8d3 	bl	8002d74 <HAL_TIM_Base_Init>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d001      	beq.n	8000bd8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000bd4:	f000 f8ca 	bl	8000d6c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000bd8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bdc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000bde:	f107 0308 	add.w	r3, r7, #8
 8000be2:	4619      	mov	r1, r3
 8000be4:	480c      	ldr	r0, [pc, #48]	; (8000c18 <MX_TIM2_Init+0x94>)
 8000be6:	f002 f97d 	bl	8002ee4 <HAL_TIM_ConfigClockSource>
 8000bea:	4603      	mov	r3, r0
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d001      	beq.n	8000bf4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000bf0:	f000 f8bc 	bl	8000d6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000bfc:	463b      	mov	r3, r7
 8000bfe:	4619      	mov	r1, r3
 8000c00:	4805      	ldr	r0, [pc, #20]	; (8000c18 <MX_TIM2_Init+0x94>)
 8000c02:	f002 fb6d 	bl	80032e0 <HAL_TIMEx_MasterConfigSynchronization>
 8000c06:	4603      	mov	r3, r0
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d001      	beq.n	8000c10 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000c0c:	f000 f8ae 	bl	8000d6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000c10:	bf00      	nop
 8000c12:	3718      	adds	r7, #24
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bd80      	pop	{r7, pc}
 8000c18:	20000134 	.word	0x20000134

08000c1c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000c20:	4b11      	ldr	r3, [pc, #68]	; (8000c68 <MX_USART1_UART_Init+0x4c>)
 8000c22:	4a12      	ldr	r2, [pc, #72]	; (8000c6c <MX_USART1_UART_Init+0x50>)
 8000c24:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000c26:	4b10      	ldr	r3, [pc, #64]	; (8000c68 <MX_USART1_UART_Init+0x4c>)
 8000c28:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c2c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000c2e:	4b0e      	ldr	r3, [pc, #56]	; (8000c68 <MX_USART1_UART_Init+0x4c>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000c34:	4b0c      	ldr	r3, [pc, #48]	; (8000c68 <MX_USART1_UART_Init+0x4c>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000c3a:	4b0b      	ldr	r3, [pc, #44]	; (8000c68 <MX_USART1_UART_Init+0x4c>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000c40:	4b09      	ldr	r3, [pc, #36]	; (8000c68 <MX_USART1_UART_Init+0x4c>)
 8000c42:	220c      	movs	r2, #12
 8000c44:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c46:	4b08      	ldr	r3, [pc, #32]	; (8000c68 <MX_USART1_UART_Init+0x4c>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c4c:	4b06      	ldr	r3, [pc, #24]	; (8000c68 <MX_USART1_UART_Init+0x4c>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000c52:	4805      	ldr	r0, [pc, #20]	; (8000c68 <MX_USART1_UART_Init+0x4c>)
 8000c54:	f002 fbc0 	bl	80033d8 <HAL_UART_Init>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d001      	beq.n	8000c62 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000c5e:	f000 f885 	bl	8000d6c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000c62:	bf00      	nop
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	200000f0 	.word	0x200000f0
 8000c6c:	40011000 	.word	0x40011000

08000c70 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b088      	sub	sp, #32
 8000c74:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c76:	f107 030c 	add.w	r3, r7, #12
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	601a      	str	r2, [r3, #0]
 8000c7e:	605a      	str	r2, [r3, #4]
 8000c80:	609a      	str	r2, [r3, #8]
 8000c82:	60da      	str	r2, [r3, #12]
 8000c84:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c86:	2300      	movs	r3, #0
 8000c88:	60bb      	str	r3, [r7, #8]
 8000c8a:	4b34      	ldr	r3, [pc, #208]	; (8000d5c <MX_GPIO_Init+0xec>)
 8000c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8e:	4a33      	ldr	r2, [pc, #204]	; (8000d5c <MX_GPIO_Init+0xec>)
 8000c90:	f043 0304 	orr.w	r3, r3, #4
 8000c94:	6313      	str	r3, [r2, #48]	; 0x30
 8000c96:	4b31      	ldr	r3, [pc, #196]	; (8000d5c <MX_GPIO_Init+0xec>)
 8000c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c9a:	f003 0304 	and.w	r3, r3, #4
 8000c9e:	60bb      	str	r3, [r7, #8]
 8000ca0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	607b      	str	r3, [r7, #4]
 8000ca6:	4b2d      	ldr	r3, [pc, #180]	; (8000d5c <MX_GPIO_Init+0xec>)
 8000ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000caa:	4a2c      	ldr	r2, [pc, #176]	; (8000d5c <MX_GPIO_Init+0xec>)
 8000cac:	f043 0301 	orr.w	r3, r3, #1
 8000cb0:	6313      	str	r3, [r2, #48]	; 0x30
 8000cb2:	4b2a      	ldr	r3, [pc, #168]	; (8000d5c <MX_GPIO_Init+0xec>)
 8000cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb6:	f003 0301 	and.w	r3, r3, #1
 8000cba:	607b      	str	r3, [r7, #4]
 8000cbc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	603b      	str	r3, [r7, #0]
 8000cc2:	4b26      	ldr	r3, [pc, #152]	; (8000d5c <MX_GPIO_Init+0xec>)
 8000cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc6:	4a25      	ldr	r2, [pc, #148]	; (8000d5c <MX_GPIO_Init+0xec>)
 8000cc8:	f043 0302 	orr.w	r3, r3, #2
 8000ccc:	6313      	str	r3, [r2, #48]	; 0x30
 8000cce:	4b23      	ldr	r3, [pc, #140]	; (8000d5c <MX_GPIO_Init+0xec>)
 8000cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd2:	f003 0302 	and.w	r3, r3, #2
 8000cd6:	603b      	str	r3, [r7, #0]
 8000cd8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RED_Pin|Contactor_Pin, GPIO_PIN_RESET);
 8000cda:	2200      	movs	r2, #0
 8000cdc:	f240 1101 	movw	r1, #257	; 0x101
 8000ce0:	481f      	ldr	r0, [pc, #124]	; (8000d60 <MX_GPIO_Init+0xf0>)
 8000ce2:	f000 fe3d 	bl	8001960 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_CTRL_Pin|BLUE_Pin|GREEN_Pin, GPIO_PIN_RESET);
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	21a1      	movs	r1, #161	; 0xa1
 8000cea:	481e      	ldr	r0, [pc, #120]	; (8000d64 <MX_GPIO_Init+0xf4>)
 8000cec:	f000 fe38 	bl	8001960 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Reset_Pin|Charge_Pin|Stop_Pin|Start_Pin, GPIO_PIN_RESET);
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	f44f 7170 	mov.w	r1, #960	; 0x3c0
 8000cf6:	481c      	ldr	r0, [pc, #112]	; (8000d68 <MX_GPIO_Init+0xf8>)
 8000cf8:	f000 fe32 	bl	8001960 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : RED_Pin Contactor_Pin */
  GPIO_InitStruct.Pin = RED_Pin|Contactor_Pin;
 8000cfc:	f240 1301 	movw	r3, #257	; 0x101
 8000d00:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d02:	2301      	movs	r3, #1
 8000d04:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d06:	2300      	movs	r3, #0
 8000d08:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d0e:	f107 030c 	add.w	r3, r7, #12
 8000d12:	4619      	mov	r1, r3
 8000d14:	4812      	ldr	r0, [pc, #72]	; (8000d60 <MX_GPIO_Init+0xf0>)
 8000d16:	f000 fc87 	bl	8001628 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_CTRL_Pin BLUE_Pin GREEN_Pin */
  GPIO_InitStruct.Pin = LED_CTRL_Pin|BLUE_Pin|GREEN_Pin;
 8000d1a:	23a1      	movs	r3, #161	; 0xa1
 8000d1c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d1e:	2301      	movs	r3, #1
 8000d20:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d22:	2300      	movs	r3, #0
 8000d24:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d26:	2300      	movs	r3, #0
 8000d28:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d2a:	f107 030c 	add.w	r3, r7, #12
 8000d2e:	4619      	mov	r1, r3
 8000d30:	480c      	ldr	r0, [pc, #48]	; (8000d64 <MX_GPIO_Init+0xf4>)
 8000d32:	f000 fc79 	bl	8001628 <HAL_GPIO_Init>

  /*Configure GPIO pins : Reset_Pin Charge_Pin Stop_Pin Start_Pin */
  GPIO_InitStruct.Pin = Reset_Pin|Charge_Pin|Stop_Pin|Start_Pin;
 8000d36:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8000d3a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d3c:	2301      	movs	r3, #1
 8000d3e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d40:	2300      	movs	r3, #0
 8000d42:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d44:	2300      	movs	r3, #0
 8000d46:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d48:	f107 030c 	add.w	r3, r7, #12
 8000d4c:	4619      	mov	r1, r3
 8000d4e:	4806      	ldr	r0, [pc, #24]	; (8000d68 <MX_GPIO_Init+0xf8>)
 8000d50:	f000 fc6a 	bl	8001628 <HAL_GPIO_Init>

}
 8000d54:	bf00      	nop
 8000d56:	3720      	adds	r7, #32
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	bd80      	pop	{r7, pc}
 8000d5c:	40023800 	.word	0x40023800
 8000d60:	40020000 	.word	0x40020000
 8000d64:	40020400 	.word	0x40020400
 8000d68:	40020800 	.word	0x40020800

08000d6c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d70:	b672      	cpsid	i
}
 8000d72:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d74:	e7fe      	b.n	8000d74 <Error_Handler+0x8>
	...

08000d78 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	b083      	sub	sp, #12
 8000d7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d7e:	2300      	movs	r3, #0
 8000d80:	607b      	str	r3, [r7, #4]
 8000d82:	4b10      	ldr	r3, [pc, #64]	; (8000dc4 <HAL_MspInit+0x4c>)
 8000d84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d86:	4a0f      	ldr	r2, [pc, #60]	; (8000dc4 <HAL_MspInit+0x4c>)
 8000d88:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d8c:	6453      	str	r3, [r2, #68]	; 0x44
 8000d8e:	4b0d      	ldr	r3, [pc, #52]	; (8000dc4 <HAL_MspInit+0x4c>)
 8000d90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d96:	607b      	str	r3, [r7, #4]
 8000d98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	603b      	str	r3, [r7, #0]
 8000d9e:	4b09      	ldr	r3, [pc, #36]	; (8000dc4 <HAL_MspInit+0x4c>)
 8000da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000da2:	4a08      	ldr	r2, [pc, #32]	; (8000dc4 <HAL_MspInit+0x4c>)
 8000da4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000da8:	6413      	str	r3, [r2, #64]	; 0x40
 8000daa:	4b06      	ldr	r3, [pc, #24]	; (8000dc4 <HAL_MspInit+0x4c>)
 8000dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000db2:	603b      	str	r3, [r7, #0]
 8000db4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000db6:	bf00      	nop
 8000db8:	370c      	adds	r7, #12
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc0:	4770      	bx	lr
 8000dc2:	bf00      	nop
 8000dc4:	40023800 	.word	0x40023800

08000dc8 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b08a      	sub	sp, #40	; 0x28
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dd0:	f107 0314 	add.w	r3, r7, #20
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	601a      	str	r2, [r3, #0]
 8000dd8:	605a      	str	r2, [r3, #4]
 8000dda:	609a      	str	r2, [r3, #8]
 8000ddc:	60da      	str	r2, [r3, #12]
 8000dde:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	4a19      	ldr	r2, [pc, #100]	; (8000e4c <HAL_CAN_MspInit+0x84>)
 8000de6:	4293      	cmp	r3, r2
 8000de8:	d12c      	bne.n	8000e44 <HAL_CAN_MspInit+0x7c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000dea:	2300      	movs	r3, #0
 8000dec:	613b      	str	r3, [r7, #16]
 8000dee:	4b18      	ldr	r3, [pc, #96]	; (8000e50 <HAL_CAN_MspInit+0x88>)
 8000df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000df2:	4a17      	ldr	r2, [pc, #92]	; (8000e50 <HAL_CAN_MspInit+0x88>)
 8000df4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000df8:	6413      	str	r3, [r2, #64]	; 0x40
 8000dfa:	4b15      	ldr	r3, [pc, #84]	; (8000e50 <HAL_CAN_MspInit+0x88>)
 8000dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dfe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000e02:	613b      	str	r3, [r7, #16]
 8000e04:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e06:	2300      	movs	r3, #0
 8000e08:	60fb      	str	r3, [r7, #12]
 8000e0a:	4b11      	ldr	r3, [pc, #68]	; (8000e50 <HAL_CAN_MspInit+0x88>)
 8000e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e0e:	4a10      	ldr	r2, [pc, #64]	; (8000e50 <HAL_CAN_MspInit+0x88>)
 8000e10:	f043 0302 	orr.w	r3, r3, #2
 8000e14:	6313      	str	r3, [r2, #48]	; 0x30
 8000e16:	4b0e      	ldr	r3, [pc, #56]	; (8000e50 <HAL_CAN_MspInit+0x88>)
 8000e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e1a:	f003 0302 	and.w	r3, r3, #2
 8000e1e:	60fb      	str	r3, [r7, #12]
 8000e20:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000e22:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000e26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e28:	2302      	movs	r3, #2
 8000e2a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e30:	2303      	movs	r3, #3
 8000e32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000e34:	2309      	movs	r3, #9
 8000e36:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e38:	f107 0314 	add.w	r3, r7, #20
 8000e3c:	4619      	mov	r1, r3
 8000e3e:	4805      	ldr	r0, [pc, #20]	; (8000e54 <HAL_CAN_MspInit+0x8c>)
 8000e40:	f000 fbf2 	bl	8001628 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000e44:	bf00      	nop
 8000e46:	3728      	adds	r7, #40	; 0x28
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	bd80      	pop	{r7, pc}
 8000e4c:	40006400 	.word	0x40006400
 8000e50:	40023800 	.word	0x40023800
 8000e54:	40020400 	.word	0x40020400

08000e58 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b08a      	sub	sp, #40	; 0x28
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e60:	f107 0314 	add.w	r3, r7, #20
 8000e64:	2200      	movs	r2, #0
 8000e66:	601a      	str	r2, [r3, #0]
 8000e68:	605a      	str	r2, [r3, #4]
 8000e6a:	609a      	str	r2, [r3, #8]
 8000e6c:	60da      	str	r2, [r3, #12]
 8000e6e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	4a19      	ldr	r2, [pc, #100]	; (8000edc <HAL_SPI_MspInit+0x84>)
 8000e76:	4293      	cmp	r3, r2
 8000e78:	d12c      	bne.n	8000ed4 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	613b      	str	r3, [r7, #16]
 8000e7e:	4b18      	ldr	r3, [pc, #96]	; (8000ee0 <HAL_SPI_MspInit+0x88>)
 8000e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e82:	4a17      	ldr	r2, [pc, #92]	; (8000ee0 <HAL_SPI_MspInit+0x88>)
 8000e84:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e88:	6413      	str	r3, [r2, #64]	; 0x40
 8000e8a:	4b15      	ldr	r3, [pc, #84]	; (8000ee0 <HAL_SPI_MspInit+0x88>)
 8000e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e92:	613b      	str	r3, [r7, #16]
 8000e94:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e96:	2300      	movs	r3, #0
 8000e98:	60fb      	str	r3, [r7, #12]
 8000e9a:	4b11      	ldr	r3, [pc, #68]	; (8000ee0 <HAL_SPI_MspInit+0x88>)
 8000e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e9e:	4a10      	ldr	r2, [pc, #64]	; (8000ee0 <HAL_SPI_MspInit+0x88>)
 8000ea0:	f043 0302 	orr.w	r3, r3, #2
 8000ea4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ea6:	4b0e      	ldr	r3, [pc, #56]	; (8000ee0 <HAL_SPI_MspInit+0x88>)
 8000ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eaa:	f003 0302 	and.w	r3, r3, #2
 8000eae:	60fb      	str	r3, [r7, #12]
 8000eb0:	68fb      	ldr	r3, [r7, #12]
    PB12     ------> SPI2_NSS
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000eb2:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000eb6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eb8:	2302      	movs	r3, #2
 8000eba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ec0:	2303      	movs	r3, #3
 8000ec2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000ec4:	2305      	movs	r3, #5
 8000ec6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ec8:	f107 0314 	add.w	r3, r7, #20
 8000ecc:	4619      	mov	r1, r3
 8000ece:	4805      	ldr	r0, [pc, #20]	; (8000ee4 <HAL_SPI_MspInit+0x8c>)
 8000ed0:	f000 fbaa 	bl	8001628 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000ed4:	bf00      	nop
 8000ed6:	3728      	adds	r7, #40	; 0x28
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd80      	pop	{r7, pc}
 8000edc:	40003800 	.word	0x40003800
 8000ee0:	40023800 	.word	0x40023800
 8000ee4:	40020400 	.word	0x40020400

08000ee8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	b085      	sub	sp, #20
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000ef8:	d10d      	bne.n	8000f16 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000efa:	2300      	movs	r3, #0
 8000efc:	60fb      	str	r3, [r7, #12]
 8000efe:	4b09      	ldr	r3, [pc, #36]	; (8000f24 <HAL_TIM_Base_MspInit+0x3c>)
 8000f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f02:	4a08      	ldr	r2, [pc, #32]	; (8000f24 <HAL_TIM_Base_MspInit+0x3c>)
 8000f04:	f043 0301 	orr.w	r3, r3, #1
 8000f08:	6413      	str	r3, [r2, #64]	; 0x40
 8000f0a:	4b06      	ldr	r3, [pc, #24]	; (8000f24 <HAL_TIM_Base_MspInit+0x3c>)
 8000f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f0e:	f003 0301 	and.w	r3, r3, #1
 8000f12:	60fb      	str	r3, [r7, #12]
 8000f14:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000f16:	bf00      	nop
 8000f18:	3714      	adds	r7, #20
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f20:	4770      	bx	lr
 8000f22:	bf00      	nop
 8000f24:	40023800 	.word	0x40023800

08000f28 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b08a      	sub	sp, #40	; 0x28
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f30:	f107 0314 	add.w	r3, r7, #20
 8000f34:	2200      	movs	r2, #0
 8000f36:	601a      	str	r2, [r3, #0]
 8000f38:	605a      	str	r2, [r3, #4]
 8000f3a:	609a      	str	r2, [r3, #8]
 8000f3c:	60da      	str	r2, [r3, #12]
 8000f3e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	4a19      	ldr	r2, [pc, #100]	; (8000fac <HAL_UART_MspInit+0x84>)
 8000f46:	4293      	cmp	r3, r2
 8000f48:	d12c      	bne.n	8000fa4 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	613b      	str	r3, [r7, #16]
 8000f4e:	4b18      	ldr	r3, [pc, #96]	; (8000fb0 <HAL_UART_MspInit+0x88>)
 8000f50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f52:	4a17      	ldr	r2, [pc, #92]	; (8000fb0 <HAL_UART_MspInit+0x88>)
 8000f54:	f043 0310 	orr.w	r3, r3, #16
 8000f58:	6453      	str	r3, [r2, #68]	; 0x44
 8000f5a:	4b15      	ldr	r3, [pc, #84]	; (8000fb0 <HAL_UART_MspInit+0x88>)
 8000f5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f5e:	f003 0310 	and.w	r3, r3, #16
 8000f62:	613b      	str	r3, [r7, #16]
 8000f64:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f66:	2300      	movs	r3, #0
 8000f68:	60fb      	str	r3, [r7, #12]
 8000f6a:	4b11      	ldr	r3, [pc, #68]	; (8000fb0 <HAL_UART_MspInit+0x88>)
 8000f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f6e:	4a10      	ldr	r2, [pc, #64]	; (8000fb0 <HAL_UART_MspInit+0x88>)
 8000f70:	f043 0301 	orr.w	r3, r3, #1
 8000f74:	6313      	str	r3, [r2, #48]	; 0x30
 8000f76:	4b0e      	ldr	r3, [pc, #56]	; (8000fb0 <HAL_UART_MspInit+0x88>)
 8000f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f7a:	f003 0301 	and.w	r3, r3, #1
 8000f7e:	60fb      	str	r3, [r7, #12]
 8000f80:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000f82:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000f86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f88:	2302      	movs	r3, #2
 8000f8a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f90:	2303      	movs	r3, #3
 8000f92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000f94:	2307      	movs	r3, #7
 8000f96:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f98:	f107 0314 	add.w	r3, r7, #20
 8000f9c:	4619      	mov	r1, r3
 8000f9e:	4805      	ldr	r0, [pc, #20]	; (8000fb4 <HAL_UART_MspInit+0x8c>)
 8000fa0:	f000 fb42 	bl	8001628 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000fa4:	bf00      	nop
 8000fa6:	3728      	adds	r7, #40	; 0x28
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bd80      	pop	{r7, pc}
 8000fac:	40011000 	.word	0x40011000
 8000fb0:	40023800 	.word	0x40023800
 8000fb4:	40020000 	.word	0x40020000

08000fb8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000fbc:	e7fe      	b.n	8000fbc <NMI_Handler+0x4>

08000fbe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fbe:	b480      	push	{r7}
 8000fc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fc2:	e7fe      	b.n	8000fc2 <HardFault_Handler+0x4>

08000fc4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fc8:	e7fe      	b.n	8000fc8 <MemManage_Handler+0x4>

08000fca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fca:	b480      	push	{r7}
 8000fcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fce:	e7fe      	b.n	8000fce <BusFault_Handler+0x4>

08000fd0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fd4:	e7fe      	b.n	8000fd4 <UsageFault_Handler+0x4>

08000fd6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fd6:	b480      	push	{r7}
 8000fd8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fda:	bf00      	nop
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe2:	4770      	bx	lr

08000fe4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fe8:	bf00      	nop
 8000fea:	46bd      	mov	sp, r7
 8000fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff0:	4770      	bx	lr

08000ff2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ff2:	b480      	push	{r7}
 8000ff4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ff6:	bf00      	nop
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffe:	4770      	bx	lr

08001000 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001004:	f000 f8ea 	bl	80011dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001008:	bf00      	nop
 800100a:	bd80      	pop	{r7, pc}

0800100c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b086      	sub	sp, #24
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001014:	4a14      	ldr	r2, [pc, #80]	; (8001068 <_sbrk+0x5c>)
 8001016:	4b15      	ldr	r3, [pc, #84]	; (800106c <_sbrk+0x60>)
 8001018:	1ad3      	subs	r3, r2, r3
 800101a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800101c:	697b      	ldr	r3, [r7, #20]
 800101e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001020:	4b13      	ldr	r3, [pc, #76]	; (8001070 <_sbrk+0x64>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	2b00      	cmp	r3, #0
 8001026:	d102      	bne.n	800102e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001028:	4b11      	ldr	r3, [pc, #68]	; (8001070 <_sbrk+0x64>)
 800102a:	4a12      	ldr	r2, [pc, #72]	; (8001074 <_sbrk+0x68>)
 800102c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800102e:	4b10      	ldr	r3, [pc, #64]	; (8001070 <_sbrk+0x64>)
 8001030:	681a      	ldr	r2, [r3, #0]
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	4413      	add	r3, r2
 8001036:	693a      	ldr	r2, [r7, #16]
 8001038:	429a      	cmp	r2, r3
 800103a:	d207      	bcs.n	800104c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800103c:	f002 fcbe 	bl	80039bc <__errno>
 8001040:	4603      	mov	r3, r0
 8001042:	220c      	movs	r2, #12
 8001044:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001046:	f04f 33ff 	mov.w	r3, #4294967295
 800104a:	e009      	b.n	8001060 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800104c:	4b08      	ldr	r3, [pc, #32]	; (8001070 <_sbrk+0x64>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001052:	4b07      	ldr	r3, [pc, #28]	; (8001070 <_sbrk+0x64>)
 8001054:	681a      	ldr	r2, [r3, #0]
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	4413      	add	r3, r2
 800105a:	4a05      	ldr	r2, [pc, #20]	; (8001070 <_sbrk+0x64>)
 800105c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800105e:	68fb      	ldr	r3, [r7, #12]
}
 8001060:	4618      	mov	r0, r3
 8001062:	3718      	adds	r7, #24
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}
 8001068:	20020000 	.word	0x20020000
 800106c:	00000400 	.word	0x00000400
 8001070:	2000008c 	.word	0x2000008c
 8001074:	200001b8 	.word	0x200001b8

08001078 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001078:	b480      	push	{r7}
 800107a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800107c:	4b06      	ldr	r3, [pc, #24]	; (8001098 <SystemInit+0x20>)
 800107e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001082:	4a05      	ldr	r2, [pc, #20]	; (8001098 <SystemInit+0x20>)
 8001084:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001088:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800108c:	bf00      	nop
 800108e:	46bd      	mov	sp, r7
 8001090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001094:	4770      	bx	lr
 8001096:	bf00      	nop
 8001098:	e000ed00 	.word	0xe000ed00

0800109c <start_timers>:
#include "peripherals.h"
#include "timer_utils.h"
#include "stdint.h"

void start_timers() {
 800109c:	b580      	push	{r7, lr}
 800109e:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start(&htim2);
 80010a0:	4802      	ldr	r0, [pc, #8]	; (80010ac <start_timers+0x10>)
 80010a2:	f001 feb7 	bl	8002e14 <HAL_TIM_Base_Start>
}
 80010a6:	bf00      	nop
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	bf00      	nop
 80010ac:	20000134 	.word	0x20000134

080010b0 <delay_us>:

void delay_us(uint16_t us) {
 80010b0:	b480      	push	{r7}
 80010b2:	b083      	sub	sp, #12
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	4603      	mov	r3, r0
 80010b8:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim2, 0);
 80010ba:	4b09      	ldr	r3, [pc, #36]	; (80010e0 <delay_us+0x30>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	2200      	movs	r2, #0
 80010c0:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim2) < us) { asm("NOP"); }
 80010c2:	e000      	b.n	80010c6 <delay_us+0x16>
 80010c4:	bf00      	nop
 80010c6:	4b06      	ldr	r3, [pc, #24]	; (80010e0 <delay_us+0x30>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80010cc:	88fb      	ldrh	r3, [r7, #6]
 80010ce:	429a      	cmp	r2, r3
 80010d0:	d3f8      	bcc.n	80010c4 <delay_us+0x14>
}
 80010d2:	bf00      	nop
 80010d4:	bf00      	nop
 80010d6:	370c      	adds	r7, #12
 80010d8:	46bd      	mov	sp, r7
 80010da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010de:	4770      	bx	lr
 80010e0:	20000134 	.word	0x20000134

080010e4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80010e4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800111c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80010e8:	480d      	ldr	r0, [pc, #52]	; (8001120 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80010ea:	490e      	ldr	r1, [pc, #56]	; (8001124 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80010ec:	4a0e      	ldr	r2, [pc, #56]	; (8001128 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80010ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010f0:	e002      	b.n	80010f8 <LoopCopyDataInit>

080010f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010f6:	3304      	adds	r3, #4

080010f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010fc:	d3f9      	bcc.n	80010f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010fe:	4a0b      	ldr	r2, [pc, #44]	; (800112c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001100:	4c0b      	ldr	r4, [pc, #44]	; (8001130 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001102:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001104:	e001      	b.n	800110a <LoopFillZerobss>

08001106 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001106:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001108:	3204      	adds	r2, #4

0800110a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800110a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800110c:	d3fb      	bcc.n	8001106 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800110e:	f7ff ffb3 	bl	8001078 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001112:	f002 fc59 	bl	80039c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001116:	f7ff fc4b 	bl	80009b0 <main>
  bx  lr    
 800111a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800111c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001120:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001124:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001128:	08004514 	.word	0x08004514
  ldr r2, =_sbss
 800112c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001130:	200001b8 	.word	0x200001b8

08001134 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001134:	e7fe      	b.n	8001134 <ADC_IRQHandler>
	...

08001138 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800113c:	4b0e      	ldr	r3, [pc, #56]	; (8001178 <HAL_Init+0x40>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	4a0d      	ldr	r2, [pc, #52]	; (8001178 <HAL_Init+0x40>)
 8001142:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001146:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001148:	4b0b      	ldr	r3, [pc, #44]	; (8001178 <HAL_Init+0x40>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	4a0a      	ldr	r2, [pc, #40]	; (8001178 <HAL_Init+0x40>)
 800114e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001152:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001154:	4b08      	ldr	r3, [pc, #32]	; (8001178 <HAL_Init+0x40>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	4a07      	ldr	r2, [pc, #28]	; (8001178 <HAL_Init+0x40>)
 800115a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800115e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001160:	2003      	movs	r0, #3
 8001162:	f000 fa2d 	bl	80015c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001166:	2000      	movs	r0, #0
 8001168:	f000 f808 	bl	800117c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800116c:	f7ff fe04 	bl	8000d78 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001170:	2300      	movs	r3, #0
}
 8001172:	4618      	mov	r0, r3
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	40023c00 	.word	0x40023c00

0800117c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b082      	sub	sp, #8
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001184:	4b12      	ldr	r3, [pc, #72]	; (80011d0 <HAL_InitTick+0x54>)
 8001186:	681a      	ldr	r2, [r3, #0]
 8001188:	4b12      	ldr	r3, [pc, #72]	; (80011d4 <HAL_InitTick+0x58>)
 800118a:	781b      	ldrb	r3, [r3, #0]
 800118c:	4619      	mov	r1, r3
 800118e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001192:	fbb3 f3f1 	udiv	r3, r3, r1
 8001196:	fbb2 f3f3 	udiv	r3, r2, r3
 800119a:	4618      	mov	r0, r3
 800119c:	f000 fa37 	bl	800160e <HAL_SYSTICK_Config>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d001      	beq.n	80011aa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80011a6:	2301      	movs	r3, #1
 80011a8:	e00e      	b.n	80011c8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	2b0f      	cmp	r3, #15
 80011ae:	d80a      	bhi.n	80011c6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011b0:	2200      	movs	r2, #0
 80011b2:	6879      	ldr	r1, [r7, #4]
 80011b4:	f04f 30ff 	mov.w	r0, #4294967295
 80011b8:	f000 fa0d 	bl	80015d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011bc:	4a06      	ldr	r2, [pc, #24]	; (80011d8 <HAL_InitTick+0x5c>)
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011c2:	2300      	movs	r3, #0
 80011c4:	e000      	b.n	80011c8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80011c6:	2301      	movs	r3, #1
}
 80011c8:	4618      	mov	r0, r3
 80011ca:	3708      	adds	r7, #8
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bd80      	pop	{r7, pc}
 80011d0:	20000000 	.word	0x20000000
 80011d4:	20000008 	.word	0x20000008
 80011d8:	20000004 	.word	0x20000004

080011dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011dc:	b480      	push	{r7}
 80011de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011e0:	4b06      	ldr	r3, [pc, #24]	; (80011fc <HAL_IncTick+0x20>)
 80011e2:	781b      	ldrb	r3, [r3, #0]
 80011e4:	461a      	mov	r2, r3
 80011e6:	4b06      	ldr	r3, [pc, #24]	; (8001200 <HAL_IncTick+0x24>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	4413      	add	r3, r2
 80011ec:	4a04      	ldr	r2, [pc, #16]	; (8001200 <HAL_IncTick+0x24>)
 80011ee:	6013      	str	r3, [r2, #0]
}
 80011f0:	bf00      	nop
 80011f2:	46bd      	mov	sp, r7
 80011f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f8:	4770      	bx	lr
 80011fa:	bf00      	nop
 80011fc:	20000008 	.word	0x20000008
 8001200:	200001a4 	.word	0x200001a4

08001204 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001204:	b480      	push	{r7}
 8001206:	af00      	add	r7, sp, #0
  return uwTick;
 8001208:	4b03      	ldr	r3, [pc, #12]	; (8001218 <HAL_GetTick+0x14>)
 800120a:	681b      	ldr	r3, [r3, #0]
}
 800120c:	4618      	mov	r0, r3
 800120e:	46bd      	mov	sp, r7
 8001210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001214:	4770      	bx	lr
 8001216:	bf00      	nop
 8001218:	200001a4 	.word	0x200001a4

0800121c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b084      	sub	sp, #16
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001224:	f7ff ffee 	bl	8001204 <HAL_GetTick>
 8001228:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001234:	d005      	beq.n	8001242 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001236:	4b0a      	ldr	r3, [pc, #40]	; (8001260 <HAL_Delay+0x44>)
 8001238:	781b      	ldrb	r3, [r3, #0]
 800123a:	461a      	mov	r2, r3
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	4413      	add	r3, r2
 8001240:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001242:	bf00      	nop
 8001244:	f7ff ffde 	bl	8001204 <HAL_GetTick>
 8001248:	4602      	mov	r2, r0
 800124a:	68bb      	ldr	r3, [r7, #8]
 800124c:	1ad3      	subs	r3, r2, r3
 800124e:	68fa      	ldr	r2, [r7, #12]
 8001250:	429a      	cmp	r2, r3
 8001252:	d8f7      	bhi.n	8001244 <HAL_Delay+0x28>
  {
  }
}
 8001254:	bf00      	nop
 8001256:	bf00      	nop
 8001258:	3710      	adds	r7, #16
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	20000008 	.word	0x20000008

08001264 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b084      	sub	sp, #16
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	2b00      	cmp	r3, #0
 8001270:	d101      	bne.n	8001276 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001272:	2301      	movs	r3, #1
 8001274:	e0ed      	b.n	8001452 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	f893 3020 	ldrb.w	r3, [r3, #32]
 800127c:	b2db      	uxtb	r3, r3
 800127e:	2b00      	cmp	r3, #0
 8001280:	d102      	bne.n	8001288 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001282:	6878      	ldr	r0, [r7, #4]
 8001284:	f7ff fda0 	bl	8000dc8 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	681a      	ldr	r2, [r3, #0]
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	f022 0202 	bic.w	r2, r2, #2
 8001296:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001298:	f7ff ffb4 	bl	8001204 <HAL_GetTick>
 800129c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800129e:	e012      	b.n	80012c6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80012a0:	f7ff ffb0 	bl	8001204 <HAL_GetTick>
 80012a4:	4602      	mov	r2, r0
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	1ad3      	subs	r3, r2, r3
 80012aa:	2b0a      	cmp	r3, #10
 80012ac:	d90b      	bls.n	80012c6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012b2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	2205      	movs	r2, #5
 80012be:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80012c2:	2301      	movs	r3, #1
 80012c4:	e0c5      	b.n	8001452 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	685b      	ldr	r3, [r3, #4]
 80012cc:	f003 0302 	and.w	r3, r3, #2
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d1e5      	bne.n	80012a0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	681a      	ldr	r2, [r3, #0]
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f042 0201 	orr.w	r2, r2, #1
 80012e2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80012e4:	f7ff ff8e 	bl	8001204 <HAL_GetTick>
 80012e8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80012ea:	e012      	b.n	8001312 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80012ec:	f7ff ff8a 	bl	8001204 <HAL_GetTick>
 80012f0:	4602      	mov	r2, r0
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	1ad3      	subs	r3, r2, r3
 80012f6:	2b0a      	cmp	r3, #10
 80012f8:	d90b      	bls.n	8001312 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012fe:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	2205      	movs	r2, #5
 800130a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800130e:	2301      	movs	r3, #1
 8001310:	e09f      	b.n	8001452 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	685b      	ldr	r3, [r3, #4]
 8001318:	f003 0301 	and.w	r3, r3, #1
 800131c:	2b00      	cmp	r3, #0
 800131e:	d0e5      	beq.n	80012ec <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	7e1b      	ldrb	r3, [r3, #24]
 8001324:	2b01      	cmp	r3, #1
 8001326:	d108      	bne.n	800133a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	681a      	ldr	r2, [r3, #0]
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001336:	601a      	str	r2, [r3, #0]
 8001338:	e007      	b.n	800134a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	681a      	ldr	r2, [r3, #0]
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001348:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	7e5b      	ldrb	r3, [r3, #25]
 800134e:	2b01      	cmp	r3, #1
 8001350:	d108      	bne.n	8001364 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	681a      	ldr	r2, [r3, #0]
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001360:	601a      	str	r2, [r3, #0]
 8001362:	e007      	b.n	8001374 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	681a      	ldr	r2, [r3, #0]
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001372:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	7e9b      	ldrb	r3, [r3, #26]
 8001378:	2b01      	cmp	r3, #1
 800137a:	d108      	bne.n	800138e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	681a      	ldr	r2, [r3, #0]
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f042 0220 	orr.w	r2, r2, #32
 800138a:	601a      	str	r2, [r3, #0]
 800138c:	e007      	b.n	800139e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	681a      	ldr	r2, [r3, #0]
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	f022 0220 	bic.w	r2, r2, #32
 800139c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	7edb      	ldrb	r3, [r3, #27]
 80013a2:	2b01      	cmp	r3, #1
 80013a4:	d108      	bne.n	80013b8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	681a      	ldr	r2, [r3, #0]
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	f022 0210 	bic.w	r2, r2, #16
 80013b4:	601a      	str	r2, [r3, #0]
 80013b6:	e007      	b.n	80013c8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	681a      	ldr	r2, [r3, #0]
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f042 0210 	orr.w	r2, r2, #16
 80013c6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	7f1b      	ldrb	r3, [r3, #28]
 80013cc:	2b01      	cmp	r3, #1
 80013ce:	d108      	bne.n	80013e2 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	681a      	ldr	r2, [r3, #0]
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f042 0208 	orr.w	r2, r2, #8
 80013de:	601a      	str	r2, [r3, #0]
 80013e0:	e007      	b.n	80013f2 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	681a      	ldr	r2, [r3, #0]
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f022 0208 	bic.w	r2, r2, #8
 80013f0:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	7f5b      	ldrb	r3, [r3, #29]
 80013f6:	2b01      	cmp	r3, #1
 80013f8:	d108      	bne.n	800140c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	681a      	ldr	r2, [r3, #0]
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	f042 0204 	orr.w	r2, r2, #4
 8001408:	601a      	str	r2, [r3, #0]
 800140a:	e007      	b.n	800141c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	681a      	ldr	r2, [r3, #0]
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f022 0204 	bic.w	r2, r2, #4
 800141a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	689a      	ldr	r2, [r3, #8]
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	68db      	ldr	r3, [r3, #12]
 8001424:	431a      	orrs	r2, r3
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	691b      	ldr	r3, [r3, #16]
 800142a:	431a      	orrs	r2, r3
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	695b      	ldr	r3, [r3, #20]
 8001430:	ea42 0103 	orr.w	r1, r2, r3
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	685b      	ldr	r3, [r3, #4]
 8001438:	1e5a      	subs	r2, r3, #1
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	430a      	orrs	r2, r1
 8001440:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	2200      	movs	r2, #0
 8001446:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	2201      	movs	r2, #1
 800144c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001450:	2300      	movs	r3, #0
}
 8001452:	4618      	mov	r0, r3
 8001454:	3710      	adds	r7, #16
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}
	...

0800145c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800145c:	b480      	push	{r7}
 800145e:	b085      	sub	sp, #20
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	f003 0307 	and.w	r3, r3, #7
 800146a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800146c:	4b0c      	ldr	r3, [pc, #48]	; (80014a0 <__NVIC_SetPriorityGrouping+0x44>)
 800146e:	68db      	ldr	r3, [r3, #12]
 8001470:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001472:	68ba      	ldr	r2, [r7, #8]
 8001474:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001478:	4013      	ands	r3, r2
 800147a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001480:	68bb      	ldr	r3, [r7, #8]
 8001482:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001484:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001488:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800148c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800148e:	4a04      	ldr	r2, [pc, #16]	; (80014a0 <__NVIC_SetPriorityGrouping+0x44>)
 8001490:	68bb      	ldr	r3, [r7, #8]
 8001492:	60d3      	str	r3, [r2, #12]
}
 8001494:	bf00      	nop
 8001496:	3714      	adds	r7, #20
 8001498:	46bd      	mov	sp, r7
 800149a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149e:	4770      	bx	lr
 80014a0:	e000ed00 	.word	0xe000ed00

080014a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014a4:	b480      	push	{r7}
 80014a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014a8:	4b04      	ldr	r3, [pc, #16]	; (80014bc <__NVIC_GetPriorityGrouping+0x18>)
 80014aa:	68db      	ldr	r3, [r3, #12]
 80014ac:	0a1b      	lsrs	r3, r3, #8
 80014ae:	f003 0307 	and.w	r3, r3, #7
}
 80014b2:	4618      	mov	r0, r3
 80014b4:	46bd      	mov	sp, r7
 80014b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ba:	4770      	bx	lr
 80014bc:	e000ed00 	.word	0xe000ed00

080014c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014c0:	b480      	push	{r7}
 80014c2:	b083      	sub	sp, #12
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	4603      	mov	r3, r0
 80014c8:	6039      	str	r1, [r7, #0]
 80014ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	db0a      	blt.n	80014ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	b2da      	uxtb	r2, r3
 80014d8:	490c      	ldr	r1, [pc, #48]	; (800150c <__NVIC_SetPriority+0x4c>)
 80014da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014de:	0112      	lsls	r2, r2, #4
 80014e0:	b2d2      	uxtb	r2, r2
 80014e2:	440b      	add	r3, r1
 80014e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014e8:	e00a      	b.n	8001500 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	b2da      	uxtb	r2, r3
 80014ee:	4908      	ldr	r1, [pc, #32]	; (8001510 <__NVIC_SetPriority+0x50>)
 80014f0:	79fb      	ldrb	r3, [r7, #7]
 80014f2:	f003 030f 	and.w	r3, r3, #15
 80014f6:	3b04      	subs	r3, #4
 80014f8:	0112      	lsls	r2, r2, #4
 80014fa:	b2d2      	uxtb	r2, r2
 80014fc:	440b      	add	r3, r1
 80014fe:	761a      	strb	r2, [r3, #24]
}
 8001500:	bf00      	nop
 8001502:	370c      	adds	r7, #12
 8001504:	46bd      	mov	sp, r7
 8001506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150a:	4770      	bx	lr
 800150c:	e000e100 	.word	0xe000e100
 8001510:	e000ed00 	.word	0xe000ed00

08001514 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001514:	b480      	push	{r7}
 8001516:	b089      	sub	sp, #36	; 0x24
 8001518:	af00      	add	r7, sp, #0
 800151a:	60f8      	str	r0, [r7, #12]
 800151c:	60b9      	str	r1, [r7, #8]
 800151e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	f003 0307 	and.w	r3, r3, #7
 8001526:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001528:	69fb      	ldr	r3, [r7, #28]
 800152a:	f1c3 0307 	rsb	r3, r3, #7
 800152e:	2b04      	cmp	r3, #4
 8001530:	bf28      	it	cs
 8001532:	2304      	movcs	r3, #4
 8001534:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001536:	69fb      	ldr	r3, [r7, #28]
 8001538:	3304      	adds	r3, #4
 800153a:	2b06      	cmp	r3, #6
 800153c:	d902      	bls.n	8001544 <NVIC_EncodePriority+0x30>
 800153e:	69fb      	ldr	r3, [r7, #28]
 8001540:	3b03      	subs	r3, #3
 8001542:	e000      	b.n	8001546 <NVIC_EncodePriority+0x32>
 8001544:	2300      	movs	r3, #0
 8001546:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001548:	f04f 32ff 	mov.w	r2, #4294967295
 800154c:	69bb      	ldr	r3, [r7, #24]
 800154e:	fa02 f303 	lsl.w	r3, r2, r3
 8001552:	43da      	mvns	r2, r3
 8001554:	68bb      	ldr	r3, [r7, #8]
 8001556:	401a      	ands	r2, r3
 8001558:	697b      	ldr	r3, [r7, #20]
 800155a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800155c:	f04f 31ff 	mov.w	r1, #4294967295
 8001560:	697b      	ldr	r3, [r7, #20]
 8001562:	fa01 f303 	lsl.w	r3, r1, r3
 8001566:	43d9      	mvns	r1, r3
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800156c:	4313      	orrs	r3, r2
         );
}
 800156e:	4618      	mov	r0, r3
 8001570:	3724      	adds	r7, #36	; 0x24
 8001572:	46bd      	mov	sp, r7
 8001574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001578:	4770      	bx	lr
	...

0800157c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b082      	sub	sp, #8
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	3b01      	subs	r3, #1
 8001588:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800158c:	d301      	bcc.n	8001592 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800158e:	2301      	movs	r3, #1
 8001590:	e00f      	b.n	80015b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001592:	4a0a      	ldr	r2, [pc, #40]	; (80015bc <SysTick_Config+0x40>)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	3b01      	subs	r3, #1
 8001598:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800159a:	210f      	movs	r1, #15
 800159c:	f04f 30ff 	mov.w	r0, #4294967295
 80015a0:	f7ff ff8e 	bl	80014c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015a4:	4b05      	ldr	r3, [pc, #20]	; (80015bc <SysTick_Config+0x40>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015aa:	4b04      	ldr	r3, [pc, #16]	; (80015bc <SysTick_Config+0x40>)
 80015ac:	2207      	movs	r2, #7
 80015ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015b0:	2300      	movs	r3, #0
}
 80015b2:	4618      	mov	r0, r3
 80015b4:	3708      	adds	r7, #8
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}
 80015ba:	bf00      	nop
 80015bc:	e000e010 	.word	0xe000e010

080015c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b082      	sub	sp, #8
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015c8:	6878      	ldr	r0, [r7, #4]
 80015ca:	f7ff ff47 	bl	800145c <__NVIC_SetPriorityGrouping>
}
 80015ce:	bf00      	nop
 80015d0:	3708      	adds	r7, #8
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}

080015d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80015d6:	b580      	push	{r7, lr}
 80015d8:	b086      	sub	sp, #24
 80015da:	af00      	add	r7, sp, #0
 80015dc:	4603      	mov	r3, r0
 80015de:	60b9      	str	r1, [r7, #8]
 80015e0:	607a      	str	r2, [r7, #4]
 80015e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80015e4:	2300      	movs	r3, #0
 80015e6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80015e8:	f7ff ff5c 	bl	80014a4 <__NVIC_GetPriorityGrouping>
 80015ec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015ee:	687a      	ldr	r2, [r7, #4]
 80015f0:	68b9      	ldr	r1, [r7, #8]
 80015f2:	6978      	ldr	r0, [r7, #20]
 80015f4:	f7ff ff8e 	bl	8001514 <NVIC_EncodePriority>
 80015f8:	4602      	mov	r2, r0
 80015fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015fe:	4611      	mov	r1, r2
 8001600:	4618      	mov	r0, r3
 8001602:	f7ff ff5d 	bl	80014c0 <__NVIC_SetPriority>
}
 8001606:	bf00      	nop
 8001608:	3718      	adds	r7, #24
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}

0800160e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800160e:	b580      	push	{r7, lr}
 8001610:	b082      	sub	sp, #8
 8001612:	af00      	add	r7, sp, #0
 8001614:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001616:	6878      	ldr	r0, [r7, #4]
 8001618:	f7ff ffb0 	bl	800157c <SysTick_Config>
 800161c:	4603      	mov	r3, r0
}
 800161e:	4618      	mov	r0, r3
 8001620:	3708      	adds	r7, #8
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}
	...

08001628 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001628:	b480      	push	{r7}
 800162a:	b089      	sub	sp, #36	; 0x24
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
 8001630:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001632:	2300      	movs	r3, #0
 8001634:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001636:	2300      	movs	r3, #0
 8001638:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800163a:	2300      	movs	r3, #0
 800163c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800163e:	2300      	movs	r3, #0
 8001640:	61fb      	str	r3, [r7, #28]
 8001642:	e16b      	b.n	800191c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001644:	2201      	movs	r2, #1
 8001646:	69fb      	ldr	r3, [r7, #28]
 8001648:	fa02 f303 	lsl.w	r3, r2, r3
 800164c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	697a      	ldr	r2, [r7, #20]
 8001654:	4013      	ands	r3, r2
 8001656:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001658:	693a      	ldr	r2, [r7, #16]
 800165a:	697b      	ldr	r3, [r7, #20]
 800165c:	429a      	cmp	r2, r3
 800165e:	f040 815a 	bne.w	8001916 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	685b      	ldr	r3, [r3, #4]
 8001666:	f003 0303 	and.w	r3, r3, #3
 800166a:	2b01      	cmp	r3, #1
 800166c:	d005      	beq.n	800167a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	685b      	ldr	r3, [r3, #4]
 8001672:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001676:	2b02      	cmp	r3, #2
 8001678:	d130      	bne.n	80016dc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	689b      	ldr	r3, [r3, #8]
 800167e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001680:	69fb      	ldr	r3, [r7, #28]
 8001682:	005b      	lsls	r3, r3, #1
 8001684:	2203      	movs	r2, #3
 8001686:	fa02 f303 	lsl.w	r3, r2, r3
 800168a:	43db      	mvns	r3, r3
 800168c:	69ba      	ldr	r2, [r7, #24]
 800168e:	4013      	ands	r3, r2
 8001690:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	68da      	ldr	r2, [r3, #12]
 8001696:	69fb      	ldr	r3, [r7, #28]
 8001698:	005b      	lsls	r3, r3, #1
 800169a:	fa02 f303 	lsl.w	r3, r2, r3
 800169e:	69ba      	ldr	r2, [r7, #24]
 80016a0:	4313      	orrs	r3, r2
 80016a2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	69ba      	ldr	r2, [r7, #24]
 80016a8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	685b      	ldr	r3, [r3, #4]
 80016ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80016b0:	2201      	movs	r2, #1
 80016b2:	69fb      	ldr	r3, [r7, #28]
 80016b4:	fa02 f303 	lsl.w	r3, r2, r3
 80016b8:	43db      	mvns	r3, r3
 80016ba:	69ba      	ldr	r2, [r7, #24]
 80016bc:	4013      	ands	r3, r2
 80016be:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80016c0:	683b      	ldr	r3, [r7, #0]
 80016c2:	685b      	ldr	r3, [r3, #4]
 80016c4:	091b      	lsrs	r3, r3, #4
 80016c6:	f003 0201 	and.w	r2, r3, #1
 80016ca:	69fb      	ldr	r3, [r7, #28]
 80016cc:	fa02 f303 	lsl.w	r3, r2, r3
 80016d0:	69ba      	ldr	r2, [r7, #24]
 80016d2:	4313      	orrs	r3, r2
 80016d4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	69ba      	ldr	r2, [r7, #24]
 80016da:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	685b      	ldr	r3, [r3, #4]
 80016e0:	f003 0303 	and.w	r3, r3, #3
 80016e4:	2b03      	cmp	r3, #3
 80016e6:	d017      	beq.n	8001718 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	68db      	ldr	r3, [r3, #12]
 80016ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80016ee:	69fb      	ldr	r3, [r7, #28]
 80016f0:	005b      	lsls	r3, r3, #1
 80016f2:	2203      	movs	r2, #3
 80016f4:	fa02 f303 	lsl.w	r3, r2, r3
 80016f8:	43db      	mvns	r3, r3
 80016fa:	69ba      	ldr	r2, [r7, #24]
 80016fc:	4013      	ands	r3, r2
 80016fe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	689a      	ldr	r2, [r3, #8]
 8001704:	69fb      	ldr	r3, [r7, #28]
 8001706:	005b      	lsls	r3, r3, #1
 8001708:	fa02 f303 	lsl.w	r3, r2, r3
 800170c:	69ba      	ldr	r2, [r7, #24]
 800170e:	4313      	orrs	r3, r2
 8001710:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	69ba      	ldr	r2, [r7, #24]
 8001716:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	685b      	ldr	r3, [r3, #4]
 800171c:	f003 0303 	and.w	r3, r3, #3
 8001720:	2b02      	cmp	r3, #2
 8001722:	d123      	bne.n	800176c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001724:	69fb      	ldr	r3, [r7, #28]
 8001726:	08da      	lsrs	r2, r3, #3
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	3208      	adds	r2, #8
 800172c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001730:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001732:	69fb      	ldr	r3, [r7, #28]
 8001734:	f003 0307 	and.w	r3, r3, #7
 8001738:	009b      	lsls	r3, r3, #2
 800173a:	220f      	movs	r2, #15
 800173c:	fa02 f303 	lsl.w	r3, r2, r3
 8001740:	43db      	mvns	r3, r3
 8001742:	69ba      	ldr	r2, [r7, #24]
 8001744:	4013      	ands	r3, r2
 8001746:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	691a      	ldr	r2, [r3, #16]
 800174c:	69fb      	ldr	r3, [r7, #28]
 800174e:	f003 0307 	and.w	r3, r3, #7
 8001752:	009b      	lsls	r3, r3, #2
 8001754:	fa02 f303 	lsl.w	r3, r2, r3
 8001758:	69ba      	ldr	r2, [r7, #24]
 800175a:	4313      	orrs	r3, r2
 800175c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800175e:	69fb      	ldr	r3, [r7, #28]
 8001760:	08da      	lsrs	r2, r3, #3
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	3208      	adds	r2, #8
 8001766:	69b9      	ldr	r1, [r7, #24]
 8001768:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001772:	69fb      	ldr	r3, [r7, #28]
 8001774:	005b      	lsls	r3, r3, #1
 8001776:	2203      	movs	r2, #3
 8001778:	fa02 f303 	lsl.w	r3, r2, r3
 800177c:	43db      	mvns	r3, r3
 800177e:	69ba      	ldr	r2, [r7, #24]
 8001780:	4013      	ands	r3, r2
 8001782:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	685b      	ldr	r3, [r3, #4]
 8001788:	f003 0203 	and.w	r2, r3, #3
 800178c:	69fb      	ldr	r3, [r7, #28]
 800178e:	005b      	lsls	r3, r3, #1
 8001790:	fa02 f303 	lsl.w	r3, r2, r3
 8001794:	69ba      	ldr	r2, [r7, #24]
 8001796:	4313      	orrs	r3, r2
 8001798:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	69ba      	ldr	r2, [r7, #24]
 800179e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	685b      	ldr	r3, [r3, #4]
 80017a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	f000 80b4 	beq.w	8001916 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017ae:	2300      	movs	r3, #0
 80017b0:	60fb      	str	r3, [r7, #12]
 80017b2:	4b60      	ldr	r3, [pc, #384]	; (8001934 <HAL_GPIO_Init+0x30c>)
 80017b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017b6:	4a5f      	ldr	r2, [pc, #380]	; (8001934 <HAL_GPIO_Init+0x30c>)
 80017b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017bc:	6453      	str	r3, [r2, #68]	; 0x44
 80017be:	4b5d      	ldr	r3, [pc, #372]	; (8001934 <HAL_GPIO_Init+0x30c>)
 80017c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017c6:	60fb      	str	r3, [r7, #12]
 80017c8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80017ca:	4a5b      	ldr	r2, [pc, #364]	; (8001938 <HAL_GPIO_Init+0x310>)
 80017cc:	69fb      	ldr	r3, [r7, #28]
 80017ce:	089b      	lsrs	r3, r3, #2
 80017d0:	3302      	adds	r3, #2
 80017d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80017d8:	69fb      	ldr	r3, [r7, #28]
 80017da:	f003 0303 	and.w	r3, r3, #3
 80017de:	009b      	lsls	r3, r3, #2
 80017e0:	220f      	movs	r2, #15
 80017e2:	fa02 f303 	lsl.w	r3, r2, r3
 80017e6:	43db      	mvns	r3, r3
 80017e8:	69ba      	ldr	r2, [r7, #24]
 80017ea:	4013      	ands	r3, r2
 80017ec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	4a52      	ldr	r2, [pc, #328]	; (800193c <HAL_GPIO_Init+0x314>)
 80017f2:	4293      	cmp	r3, r2
 80017f4:	d02b      	beq.n	800184e <HAL_GPIO_Init+0x226>
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	4a51      	ldr	r2, [pc, #324]	; (8001940 <HAL_GPIO_Init+0x318>)
 80017fa:	4293      	cmp	r3, r2
 80017fc:	d025      	beq.n	800184a <HAL_GPIO_Init+0x222>
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	4a50      	ldr	r2, [pc, #320]	; (8001944 <HAL_GPIO_Init+0x31c>)
 8001802:	4293      	cmp	r3, r2
 8001804:	d01f      	beq.n	8001846 <HAL_GPIO_Init+0x21e>
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	4a4f      	ldr	r2, [pc, #316]	; (8001948 <HAL_GPIO_Init+0x320>)
 800180a:	4293      	cmp	r3, r2
 800180c:	d019      	beq.n	8001842 <HAL_GPIO_Init+0x21a>
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	4a4e      	ldr	r2, [pc, #312]	; (800194c <HAL_GPIO_Init+0x324>)
 8001812:	4293      	cmp	r3, r2
 8001814:	d013      	beq.n	800183e <HAL_GPIO_Init+0x216>
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	4a4d      	ldr	r2, [pc, #308]	; (8001950 <HAL_GPIO_Init+0x328>)
 800181a:	4293      	cmp	r3, r2
 800181c:	d00d      	beq.n	800183a <HAL_GPIO_Init+0x212>
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	4a4c      	ldr	r2, [pc, #304]	; (8001954 <HAL_GPIO_Init+0x32c>)
 8001822:	4293      	cmp	r3, r2
 8001824:	d007      	beq.n	8001836 <HAL_GPIO_Init+0x20e>
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	4a4b      	ldr	r2, [pc, #300]	; (8001958 <HAL_GPIO_Init+0x330>)
 800182a:	4293      	cmp	r3, r2
 800182c:	d101      	bne.n	8001832 <HAL_GPIO_Init+0x20a>
 800182e:	2307      	movs	r3, #7
 8001830:	e00e      	b.n	8001850 <HAL_GPIO_Init+0x228>
 8001832:	2308      	movs	r3, #8
 8001834:	e00c      	b.n	8001850 <HAL_GPIO_Init+0x228>
 8001836:	2306      	movs	r3, #6
 8001838:	e00a      	b.n	8001850 <HAL_GPIO_Init+0x228>
 800183a:	2305      	movs	r3, #5
 800183c:	e008      	b.n	8001850 <HAL_GPIO_Init+0x228>
 800183e:	2304      	movs	r3, #4
 8001840:	e006      	b.n	8001850 <HAL_GPIO_Init+0x228>
 8001842:	2303      	movs	r3, #3
 8001844:	e004      	b.n	8001850 <HAL_GPIO_Init+0x228>
 8001846:	2302      	movs	r3, #2
 8001848:	e002      	b.n	8001850 <HAL_GPIO_Init+0x228>
 800184a:	2301      	movs	r3, #1
 800184c:	e000      	b.n	8001850 <HAL_GPIO_Init+0x228>
 800184e:	2300      	movs	r3, #0
 8001850:	69fa      	ldr	r2, [r7, #28]
 8001852:	f002 0203 	and.w	r2, r2, #3
 8001856:	0092      	lsls	r2, r2, #2
 8001858:	4093      	lsls	r3, r2
 800185a:	69ba      	ldr	r2, [r7, #24]
 800185c:	4313      	orrs	r3, r2
 800185e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001860:	4935      	ldr	r1, [pc, #212]	; (8001938 <HAL_GPIO_Init+0x310>)
 8001862:	69fb      	ldr	r3, [r7, #28]
 8001864:	089b      	lsrs	r3, r3, #2
 8001866:	3302      	adds	r3, #2
 8001868:	69ba      	ldr	r2, [r7, #24]
 800186a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800186e:	4b3b      	ldr	r3, [pc, #236]	; (800195c <HAL_GPIO_Init+0x334>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001874:	693b      	ldr	r3, [r7, #16]
 8001876:	43db      	mvns	r3, r3
 8001878:	69ba      	ldr	r2, [r7, #24]
 800187a:	4013      	ands	r3, r2
 800187c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001886:	2b00      	cmp	r3, #0
 8001888:	d003      	beq.n	8001892 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800188a:	69ba      	ldr	r2, [r7, #24]
 800188c:	693b      	ldr	r3, [r7, #16]
 800188e:	4313      	orrs	r3, r2
 8001890:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001892:	4a32      	ldr	r2, [pc, #200]	; (800195c <HAL_GPIO_Init+0x334>)
 8001894:	69bb      	ldr	r3, [r7, #24]
 8001896:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001898:	4b30      	ldr	r3, [pc, #192]	; (800195c <HAL_GPIO_Init+0x334>)
 800189a:	685b      	ldr	r3, [r3, #4]
 800189c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800189e:	693b      	ldr	r3, [r7, #16]
 80018a0:	43db      	mvns	r3, r3
 80018a2:	69ba      	ldr	r2, [r7, #24]
 80018a4:	4013      	ands	r3, r2
 80018a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	685b      	ldr	r3, [r3, #4]
 80018ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d003      	beq.n	80018bc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80018b4:	69ba      	ldr	r2, [r7, #24]
 80018b6:	693b      	ldr	r3, [r7, #16]
 80018b8:	4313      	orrs	r3, r2
 80018ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80018bc:	4a27      	ldr	r2, [pc, #156]	; (800195c <HAL_GPIO_Init+0x334>)
 80018be:	69bb      	ldr	r3, [r7, #24]
 80018c0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80018c2:	4b26      	ldr	r3, [pc, #152]	; (800195c <HAL_GPIO_Init+0x334>)
 80018c4:	689b      	ldr	r3, [r3, #8]
 80018c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018c8:	693b      	ldr	r3, [r7, #16]
 80018ca:	43db      	mvns	r3, r3
 80018cc:	69ba      	ldr	r2, [r7, #24]
 80018ce:	4013      	ands	r3, r2
 80018d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	685b      	ldr	r3, [r3, #4]
 80018d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d003      	beq.n	80018e6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80018de:	69ba      	ldr	r2, [r7, #24]
 80018e0:	693b      	ldr	r3, [r7, #16]
 80018e2:	4313      	orrs	r3, r2
 80018e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80018e6:	4a1d      	ldr	r2, [pc, #116]	; (800195c <HAL_GPIO_Init+0x334>)
 80018e8:	69bb      	ldr	r3, [r7, #24]
 80018ea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80018ec:	4b1b      	ldr	r3, [pc, #108]	; (800195c <HAL_GPIO_Init+0x334>)
 80018ee:	68db      	ldr	r3, [r3, #12]
 80018f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018f2:	693b      	ldr	r3, [r7, #16]
 80018f4:	43db      	mvns	r3, r3
 80018f6:	69ba      	ldr	r2, [r7, #24]
 80018f8:	4013      	ands	r3, r2
 80018fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	685b      	ldr	r3, [r3, #4]
 8001900:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001904:	2b00      	cmp	r3, #0
 8001906:	d003      	beq.n	8001910 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001908:	69ba      	ldr	r2, [r7, #24]
 800190a:	693b      	ldr	r3, [r7, #16]
 800190c:	4313      	orrs	r3, r2
 800190e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001910:	4a12      	ldr	r2, [pc, #72]	; (800195c <HAL_GPIO_Init+0x334>)
 8001912:	69bb      	ldr	r3, [r7, #24]
 8001914:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001916:	69fb      	ldr	r3, [r7, #28]
 8001918:	3301      	adds	r3, #1
 800191a:	61fb      	str	r3, [r7, #28]
 800191c:	69fb      	ldr	r3, [r7, #28]
 800191e:	2b0f      	cmp	r3, #15
 8001920:	f67f ae90 	bls.w	8001644 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001924:	bf00      	nop
 8001926:	bf00      	nop
 8001928:	3724      	adds	r7, #36	; 0x24
 800192a:	46bd      	mov	sp, r7
 800192c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001930:	4770      	bx	lr
 8001932:	bf00      	nop
 8001934:	40023800 	.word	0x40023800
 8001938:	40013800 	.word	0x40013800
 800193c:	40020000 	.word	0x40020000
 8001940:	40020400 	.word	0x40020400
 8001944:	40020800 	.word	0x40020800
 8001948:	40020c00 	.word	0x40020c00
 800194c:	40021000 	.word	0x40021000
 8001950:	40021400 	.word	0x40021400
 8001954:	40021800 	.word	0x40021800
 8001958:	40021c00 	.word	0x40021c00
 800195c:	40013c00 	.word	0x40013c00

08001960 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001960:	b480      	push	{r7}
 8001962:	b083      	sub	sp, #12
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
 8001968:	460b      	mov	r3, r1
 800196a:	807b      	strh	r3, [r7, #2]
 800196c:	4613      	mov	r3, r2
 800196e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001970:	787b      	ldrb	r3, [r7, #1]
 8001972:	2b00      	cmp	r3, #0
 8001974:	d003      	beq.n	800197e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001976:	887a      	ldrh	r2, [r7, #2]
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800197c:	e003      	b.n	8001986 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800197e:	887b      	ldrh	r3, [r7, #2]
 8001980:	041a      	lsls	r2, r3, #16
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	619a      	str	r2, [r3, #24]
}
 8001986:	bf00      	nop
 8001988:	370c      	adds	r7, #12
 800198a:	46bd      	mov	sp, r7
 800198c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001990:	4770      	bx	lr
	...

08001994 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b086      	sub	sp, #24
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d101      	bne.n	80019a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80019a2:	2301      	movs	r3, #1
 80019a4:	e264      	b.n	8001e70 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f003 0301 	and.w	r3, r3, #1
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d075      	beq.n	8001a9e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80019b2:	4ba3      	ldr	r3, [pc, #652]	; (8001c40 <HAL_RCC_OscConfig+0x2ac>)
 80019b4:	689b      	ldr	r3, [r3, #8]
 80019b6:	f003 030c 	and.w	r3, r3, #12
 80019ba:	2b04      	cmp	r3, #4
 80019bc:	d00c      	beq.n	80019d8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80019be:	4ba0      	ldr	r3, [pc, #640]	; (8001c40 <HAL_RCC_OscConfig+0x2ac>)
 80019c0:	689b      	ldr	r3, [r3, #8]
 80019c2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80019c6:	2b08      	cmp	r3, #8
 80019c8:	d112      	bne.n	80019f0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80019ca:	4b9d      	ldr	r3, [pc, #628]	; (8001c40 <HAL_RCC_OscConfig+0x2ac>)
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019d2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80019d6:	d10b      	bne.n	80019f0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019d8:	4b99      	ldr	r3, [pc, #612]	; (8001c40 <HAL_RCC_OscConfig+0x2ac>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d05b      	beq.n	8001a9c <HAL_RCC_OscConfig+0x108>
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	685b      	ldr	r3, [r3, #4]
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d157      	bne.n	8001a9c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80019ec:	2301      	movs	r3, #1
 80019ee:	e23f      	b.n	8001e70 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	685b      	ldr	r3, [r3, #4]
 80019f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019f8:	d106      	bne.n	8001a08 <HAL_RCC_OscConfig+0x74>
 80019fa:	4b91      	ldr	r3, [pc, #580]	; (8001c40 <HAL_RCC_OscConfig+0x2ac>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	4a90      	ldr	r2, [pc, #576]	; (8001c40 <HAL_RCC_OscConfig+0x2ac>)
 8001a00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a04:	6013      	str	r3, [r2, #0]
 8001a06:	e01d      	b.n	8001a44 <HAL_RCC_OscConfig+0xb0>
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a10:	d10c      	bne.n	8001a2c <HAL_RCC_OscConfig+0x98>
 8001a12:	4b8b      	ldr	r3, [pc, #556]	; (8001c40 <HAL_RCC_OscConfig+0x2ac>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	4a8a      	ldr	r2, [pc, #552]	; (8001c40 <HAL_RCC_OscConfig+0x2ac>)
 8001a18:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a1c:	6013      	str	r3, [r2, #0]
 8001a1e:	4b88      	ldr	r3, [pc, #544]	; (8001c40 <HAL_RCC_OscConfig+0x2ac>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	4a87      	ldr	r2, [pc, #540]	; (8001c40 <HAL_RCC_OscConfig+0x2ac>)
 8001a24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a28:	6013      	str	r3, [r2, #0]
 8001a2a:	e00b      	b.n	8001a44 <HAL_RCC_OscConfig+0xb0>
 8001a2c:	4b84      	ldr	r3, [pc, #528]	; (8001c40 <HAL_RCC_OscConfig+0x2ac>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	4a83      	ldr	r2, [pc, #524]	; (8001c40 <HAL_RCC_OscConfig+0x2ac>)
 8001a32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a36:	6013      	str	r3, [r2, #0]
 8001a38:	4b81      	ldr	r3, [pc, #516]	; (8001c40 <HAL_RCC_OscConfig+0x2ac>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	4a80      	ldr	r2, [pc, #512]	; (8001c40 <HAL_RCC_OscConfig+0x2ac>)
 8001a3e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a42:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	685b      	ldr	r3, [r3, #4]
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d013      	beq.n	8001a74 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a4c:	f7ff fbda 	bl	8001204 <HAL_GetTick>
 8001a50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a52:	e008      	b.n	8001a66 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a54:	f7ff fbd6 	bl	8001204 <HAL_GetTick>
 8001a58:	4602      	mov	r2, r0
 8001a5a:	693b      	ldr	r3, [r7, #16]
 8001a5c:	1ad3      	subs	r3, r2, r3
 8001a5e:	2b64      	cmp	r3, #100	; 0x64
 8001a60:	d901      	bls.n	8001a66 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001a62:	2303      	movs	r3, #3
 8001a64:	e204      	b.n	8001e70 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a66:	4b76      	ldr	r3, [pc, #472]	; (8001c40 <HAL_RCC_OscConfig+0x2ac>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d0f0      	beq.n	8001a54 <HAL_RCC_OscConfig+0xc0>
 8001a72:	e014      	b.n	8001a9e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a74:	f7ff fbc6 	bl	8001204 <HAL_GetTick>
 8001a78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a7a:	e008      	b.n	8001a8e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a7c:	f7ff fbc2 	bl	8001204 <HAL_GetTick>
 8001a80:	4602      	mov	r2, r0
 8001a82:	693b      	ldr	r3, [r7, #16]
 8001a84:	1ad3      	subs	r3, r2, r3
 8001a86:	2b64      	cmp	r3, #100	; 0x64
 8001a88:	d901      	bls.n	8001a8e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001a8a:	2303      	movs	r3, #3
 8001a8c:	e1f0      	b.n	8001e70 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a8e:	4b6c      	ldr	r3, [pc, #432]	; (8001c40 <HAL_RCC_OscConfig+0x2ac>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d1f0      	bne.n	8001a7c <HAL_RCC_OscConfig+0xe8>
 8001a9a:	e000      	b.n	8001a9e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a9c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f003 0302 	and.w	r3, r3, #2
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d063      	beq.n	8001b72 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001aaa:	4b65      	ldr	r3, [pc, #404]	; (8001c40 <HAL_RCC_OscConfig+0x2ac>)
 8001aac:	689b      	ldr	r3, [r3, #8]
 8001aae:	f003 030c 	and.w	r3, r3, #12
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d00b      	beq.n	8001ace <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001ab6:	4b62      	ldr	r3, [pc, #392]	; (8001c40 <HAL_RCC_OscConfig+0x2ac>)
 8001ab8:	689b      	ldr	r3, [r3, #8]
 8001aba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001abe:	2b08      	cmp	r3, #8
 8001ac0:	d11c      	bne.n	8001afc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001ac2:	4b5f      	ldr	r3, [pc, #380]	; (8001c40 <HAL_RCC_OscConfig+0x2ac>)
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d116      	bne.n	8001afc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ace:	4b5c      	ldr	r3, [pc, #368]	; (8001c40 <HAL_RCC_OscConfig+0x2ac>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f003 0302 	and.w	r3, r3, #2
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d005      	beq.n	8001ae6 <HAL_RCC_OscConfig+0x152>
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	68db      	ldr	r3, [r3, #12]
 8001ade:	2b01      	cmp	r3, #1
 8001ae0:	d001      	beq.n	8001ae6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	e1c4      	b.n	8001e70 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ae6:	4b56      	ldr	r3, [pc, #344]	; (8001c40 <HAL_RCC_OscConfig+0x2ac>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	691b      	ldr	r3, [r3, #16]
 8001af2:	00db      	lsls	r3, r3, #3
 8001af4:	4952      	ldr	r1, [pc, #328]	; (8001c40 <HAL_RCC_OscConfig+0x2ac>)
 8001af6:	4313      	orrs	r3, r2
 8001af8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001afa:	e03a      	b.n	8001b72 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	68db      	ldr	r3, [r3, #12]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d020      	beq.n	8001b46 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b04:	4b4f      	ldr	r3, [pc, #316]	; (8001c44 <HAL_RCC_OscConfig+0x2b0>)
 8001b06:	2201      	movs	r2, #1
 8001b08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b0a:	f7ff fb7b 	bl	8001204 <HAL_GetTick>
 8001b0e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b10:	e008      	b.n	8001b24 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b12:	f7ff fb77 	bl	8001204 <HAL_GetTick>
 8001b16:	4602      	mov	r2, r0
 8001b18:	693b      	ldr	r3, [r7, #16]
 8001b1a:	1ad3      	subs	r3, r2, r3
 8001b1c:	2b02      	cmp	r3, #2
 8001b1e:	d901      	bls.n	8001b24 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001b20:	2303      	movs	r3, #3
 8001b22:	e1a5      	b.n	8001e70 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b24:	4b46      	ldr	r3, [pc, #280]	; (8001c40 <HAL_RCC_OscConfig+0x2ac>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f003 0302 	and.w	r3, r3, #2
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d0f0      	beq.n	8001b12 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b30:	4b43      	ldr	r3, [pc, #268]	; (8001c40 <HAL_RCC_OscConfig+0x2ac>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	691b      	ldr	r3, [r3, #16]
 8001b3c:	00db      	lsls	r3, r3, #3
 8001b3e:	4940      	ldr	r1, [pc, #256]	; (8001c40 <HAL_RCC_OscConfig+0x2ac>)
 8001b40:	4313      	orrs	r3, r2
 8001b42:	600b      	str	r3, [r1, #0]
 8001b44:	e015      	b.n	8001b72 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b46:	4b3f      	ldr	r3, [pc, #252]	; (8001c44 <HAL_RCC_OscConfig+0x2b0>)
 8001b48:	2200      	movs	r2, #0
 8001b4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b4c:	f7ff fb5a 	bl	8001204 <HAL_GetTick>
 8001b50:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b52:	e008      	b.n	8001b66 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b54:	f7ff fb56 	bl	8001204 <HAL_GetTick>
 8001b58:	4602      	mov	r2, r0
 8001b5a:	693b      	ldr	r3, [r7, #16]
 8001b5c:	1ad3      	subs	r3, r2, r3
 8001b5e:	2b02      	cmp	r3, #2
 8001b60:	d901      	bls.n	8001b66 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001b62:	2303      	movs	r3, #3
 8001b64:	e184      	b.n	8001e70 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b66:	4b36      	ldr	r3, [pc, #216]	; (8001c40 <HAL_RCC_OscConfig+0x2ac>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f003 0302 	and.w	r3, r3, #2
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d1f0      	bne.n	8001b54 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f003 0308 	and.w	r3, r3, #8
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d030      	beq.n	8001be0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	695b      	ldr	r3, [r3, #20]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d016      	beq.n	8001bb4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b86:	4b30      	ldr	r3, [pc, #192]	; (8001c48 <HAL_RCC_OscConfig+0x2b4>)
 8001b88:	2201      	movs	r2, #1
 8001b8a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b8c:	f7ff fb3a 	bl	8001204 <HAL_GetTick>
 8001b90:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b92:	e008      	b.n	8001ba6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b94:	f7ff fb36 	bl	8001204 <HAL_GetTick>
 8001b98:	4602      	mov	r2, r0
 8001b9a:	693b      	ldr	r3, [r7, #16]
 8001b9c:	1ad3      	subs	r3, r2, r3
 8001b9e:	2b02      	cmp	r3, #2
 8001ba0:	d901      	bls.n	8001ba6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001ba2:	2303      	movs	r3, #3
 8001ba4:	e164      	b.n	8001e70 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ba6:	4b26      	ldr	r3, [pc, #152]	; (8001c40 <HAL_RCC_OscConfig+0x2ac>)
 8001ba8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001baa:	f003 0302 	and.w	r3, r3, #2
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d0f0      	beq.n	8001b94 <HAL_RCC_OscConfig+0x200>
 8001bb2:	e015      	b.n	8001be0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001bb4:	4b24      	ldr	r3, [pc, #144]	; (8001c48 <HAL_RCC_OscConfig+0x2b4>)
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bba:	f7ff fb23 	bl	8001204 <HAL_GetTick>
 8001bbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bc0:	e008      	b.n	8001bd4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001bc2:	f7ff fb1f 	bl	8001204 <HAL_GetTick>
 8001bc6:	4602      	mov	r2, r0
 8001bc8:	693b      	ldr	r3, [r7, #16]
 8001bca:	1ad3      	subs	r3, r2, r3
 8001bcc:	2b02      	cmp	r3, #2
 8001bce:	d901      	bls.n	8001bd4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001bd0:	2303      	movs	r3, #3
 8001bd2:	e14d      	b.n	8001e70 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bd4:	4b1a      	ldr	r3, [pc, #104]	; (8001c40 <HAL_RCC_OscConfig+0x2ac>)
 8001bd6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001bd8:	f003 0302 	and.w	r3, r3, #2
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d1f0      	bne.n	8001bc2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f003 0304 	and.w	r3, r3, #4
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	f000 80a0 	beq.w	8001d2e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001bf2:	4b13      	ldr	r3, [pc, #76]	; (8001c40 <HAL_RCC_OscConfig+0x2ac>)
 8001bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bf6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d10f      	bne.n	8001c1e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001bfe:	2300      	movs	r3, #0
 8001c00:	60bb      	str	r3, [r7, #8]
 8001c02:	4b0f      	ldr	r3, [pc, #60]	; (8001c40 <HAL_RCC_OscConfig+0x2ac>)
 8001c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c06:	4a0e      	ldr	r2, [pc, #56]	; (8001c40 <HAL_RCC_OscConfig+0x2ac>)
 8001c08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c0c:	6413      	str	r3, [r2, #64]	; 0x40
 8001c0e:	4b0c      	ldr	r3, [pc, #48]	; (8001c40 <HAL_RCC_OscConfig+0x2ac>)
 8001c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c16:	60bb      	str	r3, [r7, #8]
 8001c18:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c1e:	4b0b      	ldr	r3, [pc, #44]	; (8001c4c <HAL_RCC_OscConfig+0x2b8>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d121      	bne.n	8001c6e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c2a:	4b08      	ldr	r3, [pc, #32]	; (8001c4c <HAL_RCC_OscConfig+0x2b8>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	4a07      	ldr	r2, [pc, #28]	; (8001c4c <HAL_RCC_OscConfig+0x2b8>)
 8001c30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c34:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c36:	f7ff fae5 	bl	8001204 <HAL_GetTick>
 8001c3a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c3c:	e011      	b.n	8001c62 <HAL_RCC_OscConfig+0x2ce>
 8001c3e:	bf00      	nop
 8001c40:	40023800 	.word	0x40023800
 8001c44:	42470000 	.word	0x42470000
 8001c48:	42470e80 	.word	0x42470e80
 8001c4c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c50:	f7ff fad8 	bl	8001204 <HAL_GetTick>
 8001c54:	4602      	mov	r2, r0
 8001c56:	693b      	ldr	r3, [r7, #16]
 8001c58:	1ad3      	subs	r3, r2, r3
 8001c5a:	2b02      	cmp	r3, #2
 8001c5c:	d901      	bls.n	8001c62 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001c5e:	2303      	movs	r3, #3
 8001c60:	e106      	b.n	8001e70 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c62:	4b85      	ldr	r3, [pc, #532]	; (8001e78 <HAL_RCC_OscConfig+0x4e4>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d0f0      	beq.n	8001c50 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	689b      	ldr	r3, [r3, #8]
 8001c72:	2b01      	cmp	r3, #1
 8001c74:	d106      	bne.n	8001c84 <HAL_RCC_OscConfig+0x2f0>
 8001c76:	4b81      	ldr	r3, [pc, #516]	; (8001e7c <HAL_RCC_OscConfig+0x4e8>)
 8001c78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c7a:	4a80      	ldr	r2, [pc, #512]	; (8001e7c <HAL_RCC_OscConfig+0x4e8>)
 8001c7c:	f043 0301 	orr.w	r3, r3, #1
 8001c80:	6713      	str	r3, [r2, #112]	; 0x70
 8001c82:	e01c      	b.n	8001cbe <HAL_RCC_OscConfig+0x32a>
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	689b      	ldr	r3, [r3, #8]
 8001c88:	2b05      	cmp	r3, #5
 8001c8a:	d10c      	bne.n	8001ca6 <HAL_RCC_OscConfig+0x312>
 8001c8c:	4b7b      	ldr	r3, [pc, #492]	; (8001e7c <HAL_RCC_OscConfig+0x4e8>)
 8001c8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c90:	4a7a      	ldr	r2, [pc, #488]	; (8001e7c <HAL_RCC_OscConfig+0x4e8>)
 8001c92:	f043 0304 	orr.w	r3, r3, #4
 8001c96:	6713      	str	r3, [r2, #112]	; 0x70
 8001c98:	4b78      	ldr	r3, [pc, #480]	; (8001e7c <HAL_RCC_OscConfig+0x4e8>)
 8001c9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c9c:	4a77      	ldr	r2, [pc, #476]	; (8001e7c <HAL_RCC_OscConfig+0x4e8>)
 8001c9e:	f043 0301 	orr.w	r3, r3, #1
 8001ca2:	6713      	str	r3, [r2, #112]	; 0x70
 8001ca4:	e00b      	b.n	8001cbe <HAL_RCC_OscConfig+0x32a>
 8001ca6:	4b75      	ldr	r3, [pc, #468]	; (8001e7c <HAL_RCC_OscConfig+0x4e8>)
 8001ca8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001caa:	4a74      	ldr	r2, [pc, #464]	; (8001e7c <HAL_RCC_OscConfig+0x4e8>)
 8001cac:	f023 0301 	bic.w	r3, r3, #1
 8001cb0:	6713      	str	r3, [r2, #112]	; 0x70
 8001cb2:	4b72      	ldr	r3, [pc, #456]	; (8001e7c <HAL_RCC_OscConfig+0x4e8>)
 8001cb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cb6:	4a71      	ldr	r2, [pc, #452]	; (8001e7c <HAL_RCC_OscConfig+0x4e8>)
 8001cb8:	f023 0304 	bic.w	r3, r3, #4
 8001cbc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	689b      	ldr	r3, [r3, #8]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d015      	beq.n	8001cf2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cc6:	f7ff fa9d 	bl	8001204 <HAL_GetTick>
 8001cca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ccc:	e00a      	b.n	8001ce4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001cce:	f7ff fa99 	bl	8001204 <HAL_GetTick>
 8001cd2:	4602      	mov	r2, r0
 8001cd4:	693b      	ldr	r3, [r7, #16]
 8001cd6:	1ad3      	subs	r3, r2, r3
 8001cd8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cdc:	4293      	cmp	r3, r2
 8001cde:	d901      	bls.n	8001ce4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001ce0:	2303      	movs	r3, #3
 8001ce2:	e0c5      	b.n	8001e70 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ce4:	4b65      	ldr	r3, [pc, #404]	; (8001e7c <HAL_RCC_OscConfig+0x4e8>)
 8001ce6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ce8:	f003 0302 	and.w	r3, r3, #2
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d0ee      	beq.n	8001cce <HAL_RCC_OscConfig+0x33a>
 8001cf0:	e014      	b.n	8001d1c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cf2:	f7ff fa87 	bl	8001204 <HAL_GetTick>
 8001cf6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cf8:	e00a      	b.n	8001d10 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001cfa:	f7ff fa83 	bl	8001204 <HAL_GetTick>
 8001cfe:	4602      	mov	r2, r0
 8001d00:	693b      	ldr	r3, [r7, #16]
 8001d02:	1ad3      	subs	r3, r2, r3
 8001d04:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d08:	4293      	cmp	r3, r2
 8001d0a:	d901      	bls.n	8001d10 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001d0c:	2303      	movs	r3, #3
 8001d0e:	e0af      	b.n	8001e70 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d10:	4b5a      	ldr	r3, [pc, #360]	; (8001e7c <HAL_RCC_OscConfig+0x4e8>)
 8001d12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d14:	f003 0302 	and.w	r3, r3, #2
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d1ee      	bne.n	8001cfa <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001d1c:	7dfb      	ldrb	r3, [r7, #23]
 8001d1e:	2b01      	cmp	r3, #1
 8001d20:	d105      	bne.n	8001d2e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d22:	4b56      	ldr	r3, [pc, #344]	; (8001e7c <HAL_RCC_OscConfig+0x4e8>)
 8001d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d26:	4a55      	ldr	r2, [pc, #340]	; (8001e7c <HAL_RCC_OscConfig+0x4e8>)
 8001d28:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d2c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	699b      	ldr	r3, [r3, #24]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	f000 809b 	beq.w	8001e6e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001d38:	4b50      	ldr	r3, [pc, #320]	; (8001e7c <HAL_RCC_OscConfig+0x4e8>)
 8001d3a:	689b      	ldr	r3, [r3, #8]
 8001d3c:	f003 030c 	and.w	r3, r3, #12
 8001d40:	2b08      	cmp	r3, #8
 8001d42:	d05c      	beq.n	8001dfe <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	699b      	ldr	r3, [r3, #24]
 8001d48:	2b02      	cmp	r3, #2
 8001d4a:	d141      	bne.n	8001dd0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d4c:	4b4c      	ldr	r3, [pc, #304]	; (8001e80 <HAL_RCC_OscConfig+0x4ec>)
 8001d4e:	2200      	movs	r2, #0
 8001d50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d52:	f7ff fa57 	bl	8001204 <HAL_GetTick>
 8001d56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d58:	e008      	b.n	8001d6c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d5a:	f7ff fa53 	bl	8001204 <HAL_GetTick>
 8001d5e:	4602      	mov	r2, r0
 8001d60:	693b      	ldr	r3, [r7, #16]
 8001d62:	1ad3      	subs	r3, r2, r3
 8001d64:	2b02      	cmp	r3, #2
 8001d66:	d901      	bls.n	8001d6c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001d68:	2303      	movs	r3, #3
 8001d6a:	e081      	b.n	8001e70 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d6c:	4b43      	ldr	r3, [pc, #268]	; (8001e7c <HAL_RCC_OscConfig+0x4e8>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d1f0      	bne.n	8001d5a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	69da      	ldr	r2, [r3, #28]
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6a1b      	ldr	r3, [r3, #32]
 8001d80:	431a      	orrs	r2, r3
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d86:	019b      	lsls	r3, r3, #6
 8001d88:	431a      	orrs	r2, r3
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d8e:	085b      	lsrs	r3, r3, #1
 8001d90:	3b01      	subs	r3, #1
 8001d92:	041b      	lsls	r3, r3, #16
 8001d94:	431a      	orrs	r2, r3
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d9a:	061b      	lsls	r3, r3, #24
 8001d9c:	4937      	ldr	r1, [pc, #220]	; (8001e7c <HAL_RCC_OscConfig+0x4e8>)
 8001d9e:	4313      	orrs	r3, r2
 8001da0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001da2:	4b37      	ldr	r3, [pc, #220]	; (8001e80 <HAL_RCC_OscConfig+0x4ec>)
 8001da4:	2201      	movs	r2, #1
 8001da6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001da8:	f7ff fa2c 	bl	8001204 <HAL_GetTick>
 8001dac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001dae:	e008      	b.n	8001dc2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001db0:	f7ff fa28 	bl	8001204 <HAL_GetTick>
 8001db4:	4602      	mov	r2, r0
 8001db6:	693b      	ldr	r3, [r7, #16]
 8001db8:	1ad3      	subs	r3, r2, r3
 8001dba:	2b02      	cmp	r3, #2
 8001dbc:	d901      	bls.n	8001dc2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001dbe:	2303      	movs	r3, #3
 8001dc0:	e056      	b.n	8001e70 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001dc2:	4b2e      	ldr	r3, [pc, #184]	; (8001e7c <HAL_RCC_OscConfig+0x4e8>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d0f0      	beq.n	8001db0 <HAL_RCC_OscConfig+0x41c>
 8001dce:	e04e      	b.n	8001e6e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dd0:	4b2b      	ldr	r3, [pc, #172]	; (8001e80 <HAL_RCC_OscConfig+0x4ec>)
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dd6:	f7ff fa15 	bl	8001204 <HAL_GetTick>
 8001dda:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ddc:	e008      	b.n	8001df0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001dde:	f7ff fa11 	bl	8001204 <HAL_GetTick>
 8001de2:	4602      	mov	r2, r0
 8001de4:	693b      	ldr	r3, [r7, #16]
 8001de6:	1ad3      	subs	r3, r2, r3
 8001de8:	2b02      	cmp	r3, #2
 8001dea:	d901      	bls.n	8001df0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001dec:	2303      	movs	r3, #3
 8001dee:	e03f      	b.n	8001e70 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001df0:	4b22      	ldr	r3, [pc, #136]	; (8001e7c <HAL_RCC_OscConfig+0x4e8>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d1f0      	bne.n	8001dde <HAL_RCC_OscConfig+0x44a>
 8001dfc:	e037      	b.n	8001e6e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	699b      	ldr	r3, [r3, #24]
 8001e02:	2b01      	cmp	r3, #1
 8001e04:	d101      	bne.n	8001e0a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001e06:	2301      	movs	r3, #1
 8001e08:	e032      	b.n	8001e70 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001e0a:	4b1c      	ldr	r3, [pc, #112]	; (8001e7c <HAL_RCC_OscConfig+0x4e8>)
 8001e0c:	685b      	ldr	r3, [r3, #4]
 8001e0e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	699b      	ldr	r3, [r3, #24]
 8001e14:	2b01      	cmp	r3, #1
 8001e16:	d028      	beq.n	8001e6a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e22:	429a      	cmp	r2, r3
 8001e24:	d121      	bne.n	8001e6a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e30:	429a      	cmp	r2, r3
 8001e32:	d11a      	bne.n	8001e6a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001e34:	68fa      	ldr	r2, [r7, #12]
 8001e36:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001e3a:	4013      	ands	r3, r2
 8001e3c:	687a      	ldr	r2, [r7, #4]
 8001e3e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001e40:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d111      	bne.n	8001e6a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e50:	085b      	lsrs	r3, r3, #1
 8001e52:	3b01      	subs	r3, #1
 8001e54:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001e56:	429a      	cmp	r2, r3
 8001e58:	d107      	bne.n	8001e6a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e64:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001e66:	429a      	cmp	r2, r3
 8001e68:	d001      	beq.n	8001e6e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	e000      	b.n	8001e70 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8001e6e:	2300      	movs	r3, #0
}
 8001e70:	4618      	mov	r0, r3
 8001e72:	3718      	adds	r7, #24
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bd80      	pop	{r7, pc}
 8001e78:	40007000 	.word	0x40007000
 8001e7c:	40023800 	.word	0x40023800
 8001e80:	42470060 	.word	0x42470060

08001e84 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b084      	sub	sp, #16
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
 8001e8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d101      	bne.n	8001e98 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e94:	2301      	movs	r3, #1
 8001e96:	e0cc      	b.n	8002032 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001e98:	4b68      	ldr	r3, [pc, #416]	; (800203c <HAL_RCC_ClockConfig+0x1b8>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f003 0307 	and.w	r3, r3, #7
 8001ea0:	683a      	ldr	r2, [r7, #0]
 8001ea2:	429a      	cmp	r2, r3
 8001ea4:	d90c      	bls.n	8001ec0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ea6:	4b65      	ldr	r3, [pc, #404]	; (800203c <HAL_RCC_ClockConfig+0x1b8>)
 8001ea8:	683a      	ldr	r2, [r7, #0]
 8001eaa:	b2d2      	uxtb	r2, r2
 8001eac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001eae:	4b63      	ldr	r3, [pc, #396]	; (800203c <HAL_RCC_ClockConfig+0x1b8>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f003 0307 	and.w	r3, r3, #7
 8001eb6:	683a      	ldr	r2, [r7, #0]
 8001eb8:	429a      	cmp	r2, r3
 8001eba:	d001      	beq.n	8001ec0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	e0b8      	b.n	8002032 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f003 0302 	and.w	r3, r3, #2
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d020      	beq.n	8001f0e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f003 0304 	and.w	r3, r3, #4
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d005      	beq.n	8001ee4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ed8:	4b59      	ldr	r3, [pc, #356]	; (8002040 <HAL_RCC_ClockConfig+0x1bc>)
 8001eda:	689b      	ldr	r3, [r3, #8]
 8001edc:	4a58      	ldr	r2, [pc, #352]	; (8002040 <HAL_RCC_ClockConfig+0x1bc>)
 8001ede:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001ee2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f003 0308 	and.w	r3, r3, #8
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d005      	beq.n	8001efc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ef0:	4b53      	ldr	r3, [pc, #332]	; (8002040 <HAL_RCC_ClockConfig+0x1bc>)
 8001ef2:	689b      	ldr	r3, [r3, #8]
 8001ef4:	4a52      	ldr	r2, [pc, #328]	; (8002040 <HAL_RCC_ClockConfig+0x1bc>)
 8001ef6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001efa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001efc:	4b50      	ldr	r3, [pc, #320]	; (8002040 <HAL_RCC_ClockConfig+0x1bc>)
 8001efe:	689b      	ldr	r3, [r3, #8]
 8001f00:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	689b      	ldr	r3, [r3, #8]
 8001f08:	494d      	ldr	r1, [pc, #308]	; (8002040 <HAL_RCC_ClockConfig+0x1bc>)
 8001f0a:	4313      	orrs	r3, r2
 8001f0c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f003 0301 	and.w	r3, r3, #1
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d044      	beq.n	8001fa4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	2b01      	cmp	r3, #1
 8001f20:	d107      	bne.n	8001f32 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f22:	4b47      	ldr	r3, [pc, #284]	; (8002040 <HAL_RCC_ClockConfig+0x1bc>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d119      	bne.n	8001f62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f2e:	2301      	movs	r3, #1
 8001f30:	e07f      	b.n	8002032 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	2b02      	cmp	r3, #2
 8001f38:	d003      	beq.n	8001f42 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001f3e:	2b03      	cmp	r3, #3
 8001f40:	d107      	bne.n	8001f52 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f42:	4b3f      	ldr	r3, [pc, #252]	; (8002040 <HAL_RCC_ClockConfig+0x1bc>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d109      	bne.n	8001f62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f4e:	2301      	movs	r3, #1
 8001f50:	e06f      	b.n	8002032 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f52:	4b3b      	ldr	r3, [pc, #236]	; (8002040 <HAL_RCC_ClockConfig+0x1bc>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f003 0302 	and.w	r3, r3, #2
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d101      	bne.n	8001f62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f5e:	2301      	movs	r3, #1
 8001f60:	e067      	b.n	8002032 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f62:	4b37      	ldr	r3, [pc, #220]	; (8002040 <HAL_RCC_ClockConfig+0x1bc>)
 8001f64:	689b      	ldr	r3, [r3, #8]
 8001f66:	f023 0203 	bic.w	r2, r3, #3
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	4934      	ldr	r1, [pc, #208]	; (8002040 <HAL_RCC_ClockConfig+0x1bc>)
 8001f70:	4313      	orrs	r3, r2
 8001f72:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f74:	f7ff f946 	bl	8001204 <HAL_GetTick>
 8001f78:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f7a:	e00a      	b.n	8001f92 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f7c:	f7ff f942 	bl	8001204 <HAL_GetTick>
 8001f80:	4602      	mov	r2, r0
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	1ad3      	subs	r3, r2, r3
 8001f86:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d901      	bls.n	8001f92 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001f8e:	2303      	movs	r3, #3
 8001f90:	e04f      	b.n	8002032 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f92:	4b2b      	ldr	r3, [pc, #172]	; (8002040 <HAL_RCC_ClockConfig+0x1bc>)
 8001f94:	689b      	ldr	r3, [r3, #8]
 8001f96:	f003 020c 	and.w	r2, r3, #12
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	009b      	lsls	r3, r3, #2
 8001fa0:	429a      	cmp	r2, r3
 8001fa2:	d1eb      	bne.n	8001f7c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001fa4:	4b25      	ldr	r3, [pc, #148]	; (800203c <HAL_RCC_ClockConfig+0x1b8>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f003 0307 	and.w	r3, r3, #7
 8001fac:	683a      	ldr	r2, [r7, #0]
 8001fae:	429a      	cmp	r2, r3
 8001fb0:	d20c      	bcs.n	8001fcc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fb2:	4b22      	ldr	r3, [pc, #136]	; (800203c <HAL_RCC_ClockConfig+0x1b8>)
 8001fb4:	683a      	ldr	r2, [r7, #0]
 8001fb6:	b2d2      	uxtb	r2, r2
 8001fb8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fba:	4b20      	ldr	r3, [pc, #128]	; (800203c <HAL_RCC_ClockConfig+0x1b8>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f003 0307 	and.w	r3, r3, #7
 8001fc2:	683a      	ldr	r2, [r7, #0]
 8001fc4:	429a      	cmp	r2, r3
 8001fc6:	d001      	beq.n	8001fcc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001fc8:	2301      	movs	r3, #1
 8001fca:	e032      	b.n	8002032 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f003 0304 	and.w	r3, r3, #4
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d008      	beq.n	8001fea <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001fd8:	4b19      	ldr	r3, [pc, #100]	; (8002040 <HAL_RCC_ClockConfig+0x1bc>)
 8001fda:	689b      	ldr	r3, [r3, #8]
 8001fdc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	68db      	ldr	r3, [r3, #12]
 8001fe4:	4916      	ldr	r1, [pc, #88]	; (8002040 <HAL_RCC_ClockConfig+0x1bc>)
 8001fe6:	4313      	orrs	r3, r2
 8001fe8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f003 0308 	and.w	r3, r3, #8
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d009      	beq.n	800200a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001ff6:	4b12      	ldr	r3, [pc, #72]	; (8002040 <HAL_RCC_ClockConfig+0x1bc>)
 8001ff8:	689b      	ldr	r3, [r3, #8]
 8001ffa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	691b      	ldr	r3, [r3, #16]
 8002002:	00db      	lsls	r3, r3, #3
 8002004:	490e      	ldr	r1, [pc, #56]	; (8002040 <HAL_RCC_ClockConfig+0x1bc>)
 8002006:	4313      	orrs	r3, r2
 8002008:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800200a:	f000 f821 	bl	8002050 <HAL_RCC_GetSysClockFreq>
 800200e:	4602      	mov	r2, r0
 8002010:	4b0b      	ldr	r3, [pc, #44]	; (8002040 <HAL_RCC_ClockConfig+0x1bc>)
 8002012:	689b      	ldr	r3, [r3, #8]
 8002014:	091b      	lsrs	r3, r3, #4
 8002016:	f003 030f 	and.w	r3, r3, #15
 800201a:	490a      	ldr	r1, [pc, #40]	; (8002044 <HAL_RCC_ClockConfig+0x1c0>)
 800201c:	5ccb      	ldrb	r3, [r1, r3]
 800201e:	fa22 f303 	lsr.w	r3, r2, r3
 8002022:	4a09      	ldr	r2, [pc, #36]	; (8002048 <HAL_RCC_ClockConfig+0x1c4>)
 8002024:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002026:	4b09      	ldr	r3, [pc, #36]	; (800204c <HAL_RCC_ClockConfig+0x1c8>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4618      	mov	r0, r3
 800202c:	f7ff f8a6 	bl	800117c <HAL_InitTick>

  return HAL_OK;
 8002030:	2300      	movs	r3, #0
}
 8002032:	4618      	mov	r0, r3
 8002034:	3710      	adds	r7, #16
 8002036:	46bd      	mov	sp, r7
 8002038:	bd80      	pop	{r7, pc}
 800203a:	bf00      	nop
 800203c:	40023c00 	.word	0x40023c00
 8002040:	40023800 	.word	0x40023800
 8002044:	080044b8 	.word	0x080044b8
 8002048:	20000000 	.word	0x20000000
 800204c:	20000004 	.word	0x20000004

08002050 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002050:	b5b0      	push	{r4, r5, r7, lr}
 8002052:	b084      	sub	sp, #16
 8002054:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002056:	2100      	movs	r1, #0
 8002058:	6079      	str	r1, [r7, #4]
 800205a:	2100      	movs	r1, #0
 800205c:	60f9      	str	r1, [r7, #12]
 800205e:	2100      	movs	r1, #0
 8002060:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002062:	2100      	movs	r1, #0
 8002064:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002066:	4952      	ldr	r1, [pc, #328]	; (80021b0 <HAL_RCC_GetSysClockFreq+0x160>)
 8002068:	6889      	ldr	r1, [r1, #8]
 800206a:	f001 010c 	and.w	r1, r1, #12
 800206e:	2908      	cmp	r1, #8
 8002070:	d00d      	beq.n	800208e <HAL_RCC_GetSysClockFreq+0x3e>
 8002072:	2908      	cmp	r1, #8
 8002074:	f200 8094 	bhi.w	80021a0 <HAL_RCC_GetSysClockFreq+0x150>
 8002078:	2900      	cmp	r1, #0
 800207a:	d002      	beq.n	8002082 <HAL_RCC_GetSysClockFreq+0x32>
 800207c:	2904      	cmp	r1, #4
 800207e:	d003      	beq.n	8002088 <HAL_RCC_GetSysClockFreq+0x38>
 8002080:	e08e      	b.n	80021a0 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002082:	4b4c      	ldr	r3, [pc, #304]	; (80021b4 <HAL_RCC_GetSysClockFreq+0x164>)
 8002084:	60bb      	str	r3, [r7, #8]
       break;
 8002086:	e08e      	b.n	80021a6 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002088:	4b4b      	ldr	r3, [pc, #300]	; (80021b8 <HAL_RCC_GetSysClockFreq+0x168>)
 800208a:	60bb      	str	r3, [r7, #8]
      break;
 800208c:	e08b      	b.n	80021a6 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800208e:	4948      	ldr	r1, [pc, #288]	; (80021b0 <HAL_RCC_GetSysClockFreq+0x160>)
 8002090:	6849      	ldr	r1, [r1, #4]
 8002092:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8002096:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002098:	4945      	ldr	r1, [pc, #276]	; (80021b0 <HAL_RCC_GetSysClockFreq+0x160>)
 800209a:	6849      	ldr	r1, [r1, #4]
 800209c:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80020a0:	2900      	cmp	r1, #0
 80020a2:	d024      	beq.n	80020ee <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80020a4:	4942      	ldr	r1, [pc, #264]	; (80021b0 <HAL_RCC_GetSysClockFreq+0x160>)
 80020a6:	6849      	ldr	r1, [r1, #4]
 80020a8:	0989      	lsrs	r1, r1, #6
 80020aa:	4608      	mov	r0, r1
 80020ac:	f04f 0100 	mov.w	r1, #0
 80020b0:	f240 14ff 	movw	r4, #511	; 0x1ff
 80020b4:	f04f 0500 	mov.w	r5, #0
 80020b8:	ea00 0204 	and.w	r2, r0, r4
 80020bc:	ea01 0305 	and.w	r3, r1, r5
 80020c0:	493d      	ldr	r1, [pc, #244]	; (80021b8 <HAL_RCC_GetSysClockFreq+0x168>)
 80020c2:	fb01 f003 	mul.w	r0, r1, r3
 80020c6:	2100      	movs	r1, #0
 80020c8:	fb01 f102 	mul.w	r1, r1, r2
 80020cc:	1844      	adds	r4, r0, r1
 80020ce:	493a      	ldr	r1, [pc, #232]	; (80021b8 <HAL_RCC_GetSysClockFreq+0x168>)
 80020d0:	fba2 0101 	umull	r0, r1, r2, r1
 80020d4:	1863      	adds	r3, r4, r1
 80020d6:	4619      	mov	r1, r3
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	461a      	mov	r2, r3
 80020dc:	f04f 0300 	mov.w	r3, #0
 80020e0:	f7fe f8ce 	bl	8000280 <__aeabi_uldivmod>
 80020e4:	4602      	mov	r2, r0
 80020e6:	460b      	mov	r3, r1
 80020e8:	4613      	mov	r3, r2
 80020ea:	60fb      	str	r3, [r7, #12]
 80020ec:	e04a      	b.n	8002184 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80020ee:	4b30      	ldr	r3, [pc, #192]	; (80021b0 <HAL_RCC_GetSysClockFreq+0x160>)
 80020f0:	685b      	ldr	r3, [r3, #4]
 80020f2:	099b      	lsrs	r3, r3, #6
 80020f4:	461a      	mov	r2, r3
 80020f6:	f04f 0300 	mov.w	r3, #0
 80020fa:	f240 10ff 	movw	r0, #511	; 0x1ff
 80020fe:	f04f 0100 	mov.w	r1, #0
 8002102:	ea02 0400 	and.w	r4, r2, r0
 8002106:	ea03 0501 	and.w	r5, r3, r1
 800210a:	4620      	mov	r0, r4
 800210c:	4629      	mov	r1, r5
 800210e:	f04f 0200 	mov.w	r2, #0
 8002112:	f04f 0300 	mov.w	r3, #0
 8002116:	014b      	lsls	r3, r1, #5
 8002118:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800211c:	0142      	lsls	r2, r0, #5
 800211e:	4610      	mov	r0, r2
 8002120:	4619      	mov	r1, r3
 8002122:	1b00      	subs	r0, r0, r4
 8002124:	eb61 0105 	sbc.w	r1, r1, r5
 8002128:	f04f 0200 	mov.w	r2, #0
 800212c:	f04f 0300 	mov.w	r3, #0
 8002130:	018b      	lsls	r3, r1, #6
 8002132:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002136:	0182      	lsls	r2, r0, #6
 8002138:	1a12      	subs	r2, r2, r0
 800213a:	eb63 0301 	sbc.w	r3, r3, r1
 800213e:	f04f 0000 	mov.w	r0, #0
 8002142:	f04f 0100 	mov.w	r1, #0
 8002146:	00d9      	lsls	r1, r3, #3
 8002148:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800214c:	00d0      	lsls	r0, r2, #3
 800214e:	4602      	mov	r2, r0
 8002150:	460b      	mov	r3, r1
 8002152:	1912      	adds	r2, r2, r4
 8002154:	eb45 0303 	adc.w	r3, r5, r3
 8002158:	f04f 0000 	mov.w	r0, #0
 800215c:	f04f 0100 	mov.w	r1, #0
 8002160:	0299      	lsls	r1, r3, #10
 8002162:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002166:	0290      	lsls	r0, r2, #10
 8002168:	4602      	mov	r2, r0
 800216a:	460b      	mov	r3, r1
 800216c:	4610      	mov	r0, r2
 800216e:	4619      	mov	r1, r3
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	461a      	mov	r2, r3
 8002174:	f04f 0300 	mov.w	r3, #0
 8002178:	f7fe f882 	bl	8000280 <__aeabi_uldivmod>
 800217c:	4602      	mov	r2, r0
 800217e:	460b      	mov	r3, r1
 8002180:	4613      	mov	r3, r2
 8002182:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002184:	4b0a      	ldr	r3, [pc, #40]	; (80021b0 <HAL_RCC_GetSysClockFreq+0x160>)
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	0c1b      	lsrs	r3, r3, #16
 800218a:	f003 0303 	and.w	r3, r3, #3
 800218e:	3301      	adds	r3, #1
 8002190:	005b      	lsls	r3, r3, #1
 8002192:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002194:	68fa      	ldr	r2, [r7, #12]
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	fbb2 f3f3 	udiv	r3, r2, r3
 800219c:	60bb      	str	r3, [r7, #8]
      break;
 800219e:	e002      	b.n	80021a6 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80021a0:	4b04      	ldr	r3, [pc, #16]	; (80021b4 <HAL_RCC_GetSysClockFreq+0x164>)
 80021a2:	60bb      	str	r3, [r7, #8]
      break;
 80021a4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80021a6:	68bb      	ldr	r3, [r7, #8]
}
 80021a8:	4618      	mov	r0, r3
 80021aa:	3710      	adds	r7, #16
 80021ac:	46bd      	mov	sp, r7
 80021ae:	bdb0      	pop	{r4, r5, r7, pc}
 80021b0:	40023800 	.word	0x40023800
 80021b4:	00f42400 	.word	0x00f42400
 80021b8:	017d7840 	.word	0x017d7840

080021bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80021bc:	b480      	push	{r7}
 80021be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80021c0:	4b03      	ldr	r3, [pc, #12]	; (80021d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80021c2:	681b      	ldr	r3, [r3, #0]
}
 80021c4:	4618      	mov	r0, r3
 80021c6:	46bd      	mov	sp, r7
 80021c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021cc:	4770      	bx	lr
 80021ce:	bf00      	nop
 80021d0:	20000000 	.word	0x20000000

080021d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80021d8:	f7ff fff0 	bl	80021bc <HAL_RCC_GetHCLKFreq>
 80021dc:	4602      	mov	r2, r0
 80021de:	4b05      	ldr	r3, [pc, #20]	; (80021f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80021e0:	689b      	ldr	r3, [r3, #8]
 80021e2:	0a9b      	lsrs	r3, r3, #10
 80021e4:	f003 0307 	and.w	r3, r3, #7
 80021e8:	4903      	ldr	r1, [pc, #12]	; (80021f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80021ea:	5ccb      	ldrb	r3, [r1, r3]
 80021ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80021f0:	4618      	mov	r0, r3
 80021f2:	bd80      	pop	{r7, pc}
 80021f4:	40023800 	.word	0x40023800
 80021f8:	080044c8 	.word	0x080044c8

080021fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002200:	f7ff ffdc 	bl	80021bc <HAL_RCC_GetHCLKFreq>
 8002204:	4602      	mov	r2, r0
 8002206:	4b05      	ldr	r3, [pc, #20]	; (800221c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002208:	689b      	ldr	r3, [r3, #8]
 800220a:	0b5b      	lsrs	r3, r3, #13
 800220c:	f003 0307 	and.w	r3, r3, #7
 8002210:	4903      	ldr	r1, [pc, #12]	; (8002220 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002212:	5ccb      	ldrb	r3, [r1, r3]
 8002214:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002218:	4618      	mov	r0, r3
 800221a:	bd80      	pop	{r7, pc}
 800221c:	40023800 	.word	0x40023800
 8002220:	080044c8 	.word	0x080044c8

08002224 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b082      	sub	sp, #8
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2b00      	cmp	r3, #0
 8002230:	d101      	bne.n	8002236 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002232:	2301      	movs	r3, #1
 8002234:	e07b      	b.n	800232e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800223a:	2b00      	cmp	r3, #0
 800223c:	d108      	bne.n	8002250 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	685b      	ldr	r3, [r3, #4]
 8002242:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002246:	d009      	beq.n	800225c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2200      	movs	r2, #0
 800224c:	61da      	str	r2, [r3, #28]
 800224e:	e005      	b.n	800225c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2200      	movs	r2, #0
 8002254:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	2200      	movs	r2, #0
 800225a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2200      	movs	r2, #0
 8002260:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002268:	b2db      	uxtb	r3, r3
 800226a:	2b00      	cmp	r3, #0
 800226c:	d106      	bne.n	800227c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	2200      	movs	r2, #0
 8002272:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002276:	6878      	ldr	r0, [r7, #4]
 8002278:	f7fe fdee 	bl	8000e58 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2202      	movs	r2, #2
 8002280:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	681a      	ldr	r2, [r3, #0]
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002292:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	689b      	ldr	r3, [r3, #8]
 80022a0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80022a4:	431a      	orrs	r2, r3
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	68db      	ldr	r3, [r3, #12]
 80022aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80022ae:	431a      	orrs	r2, r3
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	691b      	ldr	r3, [r3, #16]
 80022b4:	f003 0302 	and.w	r3, r3, #2
 80022b8:	431a      	orrs	r2, r3
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	695b      	ldr	r3, [r3, #20]
 80022be:	f003 0301 	and.w	r3, r3, #1
 80022c2:	431a      	orrs	r2, r3
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	699b      	ldr	r3, [r3, #24]
 80022c8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80022cc:	431a      	orrs	r2, r3
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	69db      	ldr	r3, [r3, #28]
 80022d2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80022d6:	431a      	orrs	r2, r3
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6a1b      	ldr	r3, [r3, #32]
 80022dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022e0:	ea42 0103 	orr.w	r1, r2, r3
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022e8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	430a      	orrs	r2, r1
 80022f2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	699b      	ldr	r3, [r3, #24]
 80022f8:	0c1b      	lsrs	r3, r3, #16
 80022fa:	f003 0104 	and.w	r1, r3, #4
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002302:	f003 0210 	and.w	r2, r3, #16
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	430a      	orrs	r2, r1
 800230c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	69da      	ldr	r2, [r3, #28]
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800231c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	2200      	movs	r2, #0
 8002322:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2201      	movs	r2, #1
 8002328:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800232c:	2300      	movs	r3, #0
}
 800232e:	4618      	mov	r0, r3
 8002330:	3708      	adds	r7, #8
 8002332:	46bd      	mov	sp, r7
 8002334:	bd80      	pop	{r7, pc}

08002336 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002336:	b580      	push	{r7, lr}
 8002338:	b088      	sub	sp, #32
 800233a:	af00      	add	r7, sp, #0
 800233c:	60f8      	str	r0, [r7, #12]
 800233e:	60b9      	str	r1, [r7, #8]
 8002340:	603b      	str	r3, [r7, #0]
 8002342:	4613      	mov	r3, r2
 8002344:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002346:	2300      	movs	r3, #0
 8002348:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002350:	2b01      	cmp	r3, #1
 8002352:	d101      	bne.n	8002358 <HAL_SPI_Transmit+0x22>
 8002354:	2302      	movs	r3, #2
 8002356:	e126      	b.n	80025a6 <HAL_SPI_Transmit+0x270>
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	2201      	movs	r2, #1
 800235c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002360:	f7fe ff50 	bl	8001204 <HAL_GetTick>
 8002364:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002366:	88fb      	ldrh	r3, [r7, #6]
 8002368:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002370:	b2db      	uxtb	r3, r3
 8002372:	2b01      	cmp	r3, #1
 8002374:	d002      	beq.n	800237c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002376:	2302      	movs	r3, #2
 8002378:	77fb      	strb	r3, [r7, #31]
    goto error;
 800237a:	e10b      	b.n	8002594 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800237c:	68bb      	ldr	r3, [r7, #8]
 800237e:	2b00      	cmp	r3, #0
 8002380:	d002      	beq.n	8002388 <HAL_SPI_Transmit+0x52>
 8002382:	88fb      	ldrh	r3, [r7, #6]
 8002384:	2b00      	cmp	r3, #0
 8002386:	d102      	bne.n	800238e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002388:	2301      	movs	r3, #1
 800238a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800238c:	e102      	b.n	8002594 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	2203      	movs	r2, #3
 8002392:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	2200      	movs	r2, #0
 800239a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	68ba      	ldr	r2, [r7, #8]
 80023a0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	88fa      	ldrh	r2, [r7, #6]
 80023a6:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	88fa      	ldrh	r2, [r7, #6]
 80023ac:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	2200      	movs	r2, #0
 80023b2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	2200      	movs	r2, #0
 80023b8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	2200      	movs	r2, #0
 80023be:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	2200      	movs	r2, #0
 80023c4:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	2200      	movs	r2, #0
 80023ca:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	689b      	ldr	r3, [r3, #8]
 80023d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80023d4:	d10f      	bne.n	80023f6 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	681a      	ldr	r2, [r3, #0]
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80023e4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	681a      	ldr	r2, [r3, #0]
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80023f4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002400:	2b40      	cmp	r3, #64	; 0x40
 8002402:	d007      	beq.n	8002414 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	681a      	ldr	r2, [r3, #0]
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002412:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	68db      	ldr	r3, [r3, #12]
 8002418:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800241c:	d14b      	bne.n	80024b6 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	685b      	ldr	r3, [r3, #4]
 8002422:	2b00      	cmp	r3, #0
 8002424:	d002      	beq.n	800242c <HAL_SPI_Transmit+0xf6>
 8002426:	8afb      	ldrh	r3, [r7, #22]
 8002428:	2b01      	cmp	r3, #1
 800242a:	d13e      	bne.n	80024aa <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002430:	881a      	ldrh	r2, [r3, #0]
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800243c:	1c9a      	adds	r2, r3, #2
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002446:	b29b      	uxth	r3, r3
 8002448:	3b01      	subs	r3, #1
 800244a:	b29a      	uxth	r2, r3
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002450:	e02b      	b.n	80024aa <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	689b      	ldr	r3, [r3, #8]
 8002458:	f003 0302 	and.w	r3, r3, #2
 800245c:	2b02      	cmp	r3, #2
 800245e:	d112      	bne.n	8002486 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002464:	881a      	ldrh	r2, [r3, #0]
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002470:	1c9a      	adds	r2, r3, #2
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800247a:	b29b      	uxth	r3, r3
 800247c:	3b01      	subs	r3, #1
 800247e:	b29a      	uxth	r2, r3
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	86da      	strh	r2, [r3, #54]	; 0x36
 8002484:	e011      	b.n	80024aa <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002486:	f7fe febd 	bl	8001204 <HAL_GetTick>
 800248a:	4602      	mov	r2, r0
 800248c:	69bb      	ldr	r3, [r7, #24]
 800248e:	1ad3      	subs	r3, r2, r3
 8002490:	683a      	ldr	r2, [r7, #0]
 8002492:	429a      	cmp	r2, r3
 8002494:	d803      	bhi.n	800249e <HAL_SPI_Transmit+0x168>
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	f1b3 3fff 	cmp.w	r3, #4294967295
 800249c:	d102      	bne.n	80024a4 <HAL_SPI_Transmit+0x16e>
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d102      	bne.n	80024aa <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80024a4:	2303      	movs	r3, #3
 80024a6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80024a8:	e074      	b.n	8002594 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80024ae:	b29b      	uxth	r3, r3
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d1ce      	bne.n	8002452 <HAL_SPI_Transmit+0x11c>
 80024b4:	e04c      	b.n	8002550 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	685b      	ldr	r3, [r3, #4]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d002      	beq.n	80024c4 <HAL_SPI_Transmit+0x18e>
 80024be:	8afb      	ldrh	r3, [r7, #22]
 80024c0:	2b01      	cmp	r3, #1
 80024c2:	d140      	bne.n	8002546 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	330c      	adds	r3, #12
 80024ce:	7812      	ldrb	r2, [r2, #0]
 80024d0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024d6:	1c5a      	adds	r2, r3, #1
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80024e0:	b29b      	uxth	r3, r3
 80024e2:	3b01      	subs	r3, #1
 80024e4:	b29a      	uxth	r2, r3
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80024ea:	e02c      	b.n	8002546 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	689b      	ldr	r3, [r3, #8]
 80024f2:	f003 0302 	and.w	r3, r3, #2
 80024f6:	2b02      	cmp	r3, #2
 80024f8:	d113      	bne.n	8002522 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	330c      	adds	r3, #12
 8002504:	7812      	ldrb	r2, [r2, #0]
 8002506:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800250c:	1c5a      	adds	r2, r3, #1
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002516:	b29b      	uxth	r3, r3
 8002518:	3b01      	subs	r3, #1
 800251a:	b29a      	uxth	r2, r3
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	86da      	strh	r2, [r3, #54]	; 0x36
 8002520:	e011      	b.n	8002546 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002522:	f7fe fe6f 	bl	8001204 <HAL_GetTick>
 8002526:	4602      	mov	r2, r0
 8002528:	69bb      	ldr	r3, [r7, #24]
 800252a:	1ad3      	subs	r3, r2, r3
 800252c:	683a      	ldr	r2, [r7, #0]
 800252e:	429a      	cmp	r2, r3
 8002530:	d803      	bhi.n	800253a <HAL_SPI_Transmit+0x204>
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002538:	d102      	bne.n	8002540 <HAL_SPI_Transmit+0x20a>
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	2b00      	cmp	r3, #0
 800253e:	d102      	bne.n	8002546 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8002540:	2303      	movs	r3, #3
 8002542:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002544:	e026      	b.n	8002594 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800254a:	b29b      	uxth	r3, r3
 800254c:	2b00      	cmp	r3, #0
 800254e:	d1cd      	bne.n	80024ec <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002550:	69ba      	ldr	r2, [r7, #24]
 8002552:	6839      	ldr	r1, [r7, #0]
 8002554:	68f8      	ldr	r0, [r7, #12]
 8002556:	f000 fbcb 	bl	8002cf0 <SPI_EndRxTxTransaction>
 800255a:	4603      	mov	r3, r0
 800255c:	2b00      	cmp	r3, #0
 800255e:	d002      	beq.n	8002566 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	2220      	movs	r2, #32
 8002564:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	689b      	ldr	r3, [r3, #8]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d10a      	bne.n	8002584 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800256e:	2300      	movs	r3, #0
 8002570:	613b      	str	r3, [r7, #16]
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	68db      	ldr	r3, [r3, #12]
 8002578:	613b      	str	r3, [r7, #16]
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	689b      	ldr	r3, [r3, #8]
 8002580:	613b      	str	r3, [r7, #16]
 8002582:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002588:	2b00      	cmp	r3, #0
 800258a:	d002      	beq.n	8002592 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800258c:	2301      	movs	r3, #1
 800258e:	77fb      	strb	r3, [r7, #31]
 8002590:	e000      	b.n	8002594 <HAL_SPI_Transmit+0x25e>
  }

error:
 8002592:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	2201      	movs	r2, #1
 8002598:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	2200      	movs	r2, #0
 80025a0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80025a4:	7ffb      	ldrb	r3, [r7, #31]
}
 80025a6:	4618      	mov	r0, r3
 80025a8:	3720      	adds	r7, #32
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bd80      	pop	{r7, pc}

080025ae <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80025ae:	b580      	push	{r7, lr}
 80025b0:	b088      	sub	sp, #32
 80025b2:	af02      	add	r7, sp, #8
 80025b4:	60f8      	str	r0, [r7, #12]
 80025b6:	60b9      	str	r1, [r7, #8]
 80025b8:	603b      	str	r3, [r7, #0]
 80025ba:	4613      	mov	r3, r2
 80025bc:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80025be:	2300      	movs	r3, #0
 80025c0:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80025ca:	d112      	bne.n	80025f2 <HAL_SPI_Receive+0x44>
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	689b      	ldr	r3, [r3, #8]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d10e      	bne.n	80025f2 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	2204      	movs	r2, #4
 80025d8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80025dc:	88fa      	ldrh	r2, [r7, #6]
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	9300      	str	r3, [sp, #0]
 80025e2:	4613      	mov	r3, r2
 80025e4:	68ba      	ldr	r2, [r7, #8]
 80025e6:	68b9      	ldr	r1, [r7, #8]
 80025e8:	68f8      	ldr	r0, [r7, #12]
 80025ea:	f000 f8f1 	bl	80027d0 <HAL_SPI_TransmitReceive>
 80025ee:	4603      	mov	r3, r0
 80025f0:	e0ea      	b.n	80027c8 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80025f8:	2b01      	cmp	r3, #1
 80025fa:	d101      	bne.n	8002600 <HAL_SPI_Receive+0x52>
 80025fc:	2302      	movs	r3, #2
 80025fe:	e0e3      	b.n	80027c8 <HAL_SPI_Receive+0x21a>
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	2201      	movs	r2, #1
 8002604:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002608:	f7fe fdfc 	bl	8001204 <HAL_GetTick>
 800260c:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002614:	b2db      	uxtb	r3, r3
 8002616:	2b01      	cmp	r3, #1
 8002618:	d002      	beq.n	8002620 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800261a:	2302      	movs	r3, #2
 800261c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800261e:	e0ca      	b.n	80027b6 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8002620:	68bb      	ldr	r3, [r7, #8]
 8002622:	2b00      	cmp	r3, #0
 8002624:	d002      	beq.n	800262c <HAL_SPI_Receive+0x7e>
 8002626:	88fb      	ldrh	r3, [r7, #6]
 8002628:	2b00      	cmp	r3, #0
 800262a:	d102      	bne.n	8002632 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800262c:	2301      	movs	r3, #1
 800262e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002630:	e0c1      	b.n	80027b6 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	2204      	movs	r2, #4
 8002636:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	2200      	movs	r2, #0
 800263e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	68ba      	ldr	r2, [r7, #8]
 8002644:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	88fa      	ldrh	r2, [r7, #6]
 800264a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	88fa      	ldrh	r2, [r7, #6]
 8002650:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	2200      	movs	r2, #0
 8002656:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	2200      	movs	r2, #0
 800265c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	2200      	movs	r2, #0
 8002662:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	2200      	movs	r2, #0
 8002668:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	2200      	movs	r2, #0
 800266e:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	689b      	ldr	r3, [r3, #8]
 8002674:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002678:	d10f      	bne.n	800269a <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	681a      	ldr	r2, [r3, #0]
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002688:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	681a      	ldr	r2, [r3, #0]
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002698:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026a4:	2b40      	cmp	r3, #64	; 0x40
 80026a6:	d007      	beq.n	80026b8 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	681a      	ldr	r2, [r3, #0]
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80026b6:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	68db      	ldr	r3, [r3, #12]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d162      	bne.n	8002786 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80026c0:	e02e      	b.n	8002720 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	689b      	ldr	r3, [r3, #8]
 80026c8:	f003 0301 	and.w	r3, r3, #1
 80026cc:	2b01      	cmp	r3, #1
 80026ce:	d115      	bne.n	80026fc <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f103 020c 	add.w	r2, r3, #12
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026dc:	7812      	ldrb	r2, [r2, #0]
 80026de:	b2d2      	uxtb	r2, r2
 80026e0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026e6:	1c5a      	adds	r2, r3, #1
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80026f0:	b29b      	uxth	r3, r3
 80026f2:	3b01      	subs	r3, #1
 80026f4:	b29a      	uxth	r2, r3
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80026fa:	e011      	b.n	8002720 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80026fc:	f7fe fd82 	bl	8001204 <HAL_GetTick>
 8002700:	4602      	mov	r2, r0
 8002702:	693b      	ldr	r3, [r7, #16]
 8002704:	1ad3      	subs	r3, r2, r3
 8002706:	683a      	ldr	r2, [r7, #0]
 8002708:	429a      	cmp	r2, r3
 800270a:	d803      	bhi.n	8002714 <HAL_SPI_Receive+0x166>
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002712:	d102      	bne.n	800271a <HAL_SPI_Receive+0x16c>
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	2b00      	cmp	r3, #0
 8002718:	d102      	bne.n	8002720 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 800271a:	2303      	movs	r3, #3
 800271c:	75fb      	strb	r3, [r7, #23]
          goto error;
 800271e:	e04a      	b.n	80027b6 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002724:	b29b      	uxth	r3, r3
 8002726:	2b00      	cmp	r3, #0
 8002728:	d1cb      	bne.n	80026c2 <HAL_SPI_Receive+0x114>
 800272a:	e031      	b.n	8002790 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	689b      	ldr	r3, [r3, #8]
 8002732:	f003 0301 	and.w	r3, r3, #1
 8002736:	2b01      	cmp	r3, #1
 8002738:	d113      	bne.n	8002762 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	68da      	ldr	r2, [r3, #12]
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002744:	b292      	uxth	r2, r2
 8002746:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800274c:	1c9a      	adds	r2, r3, #2
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002756:	b29b      	uxth	r3, r3
 8002758:	3b01      	subs	r3, #1
 800275a:	b29a      	uxth	r2, r3
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002760:	e011      	b.n	8002786 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002762:	f7fe fd4f 	bl	8001204 <HAL_GetTick>
 8002766:	4602      	mov	r2, r0
 8002768:	693b      	ldr	r3, [r7, #16]
 800276a:	1ad3      	subs	r3, r2, r3
 800276c:	683a      	ldr	r2, [r7, #0]
 800276e:	429a      	cmp	r2, r3
 8002770:	d803      	bhi.n	800277a <HAL_SPI_Receive+0x1cc>
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002778:	d102      	bne.n	8002780 <HAL_SPI_Receive+0x1d2>
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	2b00      	cmp	r3, #0
 800277e:	d102      	bne.n	8002786 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8002780:	2303      	movs	r3, #3
 8002782:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002784:	e017      	b.n	80027b6 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800278a:	b29b      	uxth	r3, r3
 800278c:	2b00      	cmp	r3, #0
 800278e:	d1cd      	bne.n	800272c <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002790:	693a      	ldr	r2, [r7, #16]
 8002792:	6839      	ldr	r1, [r7, #0]
 8002794:	68f8      	ldr	r0, [r7, #12]
 8002796:	f000 fa45 	bl	8002c24 <SPI_EndRxTransaction>
 800279a:	4603      	mov	r3, r0
 800279c:	2b00      	cmp	r3, #0
 800279e:	d002      	beq.n	80027a6 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	2220      	movs	r2, #32
 80027a4:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d002      	beq.n	80027b4 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 80027ae:	2301      	movs	r3, #1
 80027b0:	75fb      	strb	r3, [r7, #23]
 80027b2:	e000      	b.n	80027b6 <HAL_SPI_Receive+0x208>
  }

error :
 80027b4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	2201      	movs	r2, #1
 80027ba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	2200      	movs	r2, #0
 80027c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80027c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80027c8:	4618      	mov	r0, r3
 80027ca:	3718      	adds	r7, #24
 80027cc:	46bd      	mov	sp, r7
 80027ce:	bd80      	pop	{r7, pc}

080027d0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b08c      	sub	sp, #48	; 0x30
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	60f8      	str	r0, [r7, #12]
 80027d8:	60b9      	str	r1, [r7, #8]
 80027da:	607a      	str	r2, [r7, #4]
 80027dc:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80027de:	2301      	movs	r3, #1
 80027e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80027e2:	2300      	movs	r3, #0
 80027e4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80027ee:	2b01      	cmp	r3, #1
 80027f0:	d101      	bne.n	80027f6 <HAL_SPI_TransmitReceive+0x26>
 80027f2:	2302      	movs	r3, #2
 80027f4:	e18a      	b.n	8002b0c <HAL_SPI_TransmitReceive+0x33c>
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	2201      	movs	r2, #1
 80027fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80027fe:	f7fe fd01 	bl	8001204 <HAL_GetTick>
 8002802:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800280a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002814:	887b      	ldrh	r3, [r7, #2]
 8002816:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002818:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800281c:	2b01      	cmp	r3, #1
 800281e:	d00f      	beq.n	8002840 <HAL_SPI_TransmitReceive+0x70>
 8002820:	69fb      	ldr	r3, [r7, #28]
 8002822:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002826:	d107      	bne.n	8002838 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	689b      	ldr	r3, [r3, #8]
 800282c:	2b00      	cmp	r3, #0
 800282e:	d103      	bne.n	8002838 <HAL_SPI_TransmitReceive+0x68>
 8002830:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002834:	2b04      	cmp	r3, #4
 8002836:	d003      	beq.n	8002840 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8002838:	2302      	movs	r3, #2
 800283a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800283e:	e15b      	b.n	8002af8 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002840:	68bb      	ldr	r3, [r7, #8]
 8002842:	2b00      	cmp	r3, #0
 8002844:	d005      	beq.n	8002852 <HAL_SPI_TransmitReceive+0x82>
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d002      	beq.n	8002852 <HAL_SPI_TransmitReceive+0x82>
 800284c:	887b      	ldrh	r3, [r7, #2]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d103      	bne.n	800285a <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002852:	2301      	movs	r3, #1
 8002854:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002858:	e14e      	b.n	8002af8 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002860:	b2db      	uxtb	r3, r3
 8002862:	2b04      	cmp	r3, #4
 8002864:	d003      	beq.n	800286e <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	2205      	movs	r2, #5
 800286a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	2200      	movs	r2, #0
 8002872:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	687a      	ldr	r2, [r7, #4]
 8002878:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	887a      	ldrh	r2, [r7, #2]
 800287e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	887a      	ldrh	r2, [r7, #2]
 8002884:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	68ba      	ldr	r2, [r7, #8]
 800288a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	887a      	ldrh	r2, [r7, #2]
 8002890:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	887a      	ldrh	r2, [r7, #2]
 8002896:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	2200      	movs	r2, #0
 800289c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	2200      	movs	r2, #0
 80028a2:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028ae:	2b40      	cmp	r3, #64	; 0x40
 80028b0:	d007      	beq.n	80028c2 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	681a      	ldr	r2, [r3, #0]
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80028c0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	68db      	ldr	r3, [r3, #12]
 80028c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80028ca:	d178      	bne.n	80029be <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d002      	beq.n	80028da <HAL_SPI_TransmitReceive+0x10a>
 80028d4:	8b7b      	ldrh	r3, [r7, #26]
 80028d6:	2b01      	cmp	r3, #1
 80028d8:	d166      	bne.n	80029a8 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028de:	881a      	ldrh	r2, [r3, #0]
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ea:	1c9a      	adds	r2, r3, #2
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80028f4:	b29b      	uxth	r3, r3
 80028f6:	3b01      	subs	r3, #1
 80028f8:	b29a      	uxth	r2, r3
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80028fe:	e053      	b.n	80029a8 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	689b      	ldr	r3, [r3, #8]
 8002906:	f003 0302 	and.w	r3, r3, #2
 800290a:	2b02      	cmp	r3, #2
 800290c:	d11b      	bne.n	8002946 <HAL_SPI_TransmitReceive+0x176>
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002912:	b29b      	uxth	r3, r3
 8002914:	2b00      	cmp	r3, #0
 8002916:	d016      	beq.n	8002946 <HAL_SPI_TransmitReceive+0x176>
 8002918:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800291a:	2b01      	cmp	r3, #1
 800291c:	d113      	bne.n	8002946 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002922:	881a      	ldrh	r2, [r3, #0]
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800292e:	1c9a      	adds	r2, r3, #2
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002938:	b29b      	uxth	r3, r3
 800293a:	3b01      	subs	r3, #1
 800293c:	b29a      	uxth	r2, r3
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002942:	2300      	movs	r3, #0
 8002944:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	689b      	ldr	r3, [r3, #8]
 800294c:	f003 0301 	and.w	r3, r3, #1
 8002950:	2b01      	cmp	r3, #1
 8002952:	d119      	bne.n	8002988 <HAL_SPI_TransmitReceive+0x1b8>
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002958:	b29b      	uxth	r3, r3
 800295a:	2b00      	cmp	r3, #0
 800295c:	d014      	beq.n	8002988 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	68da      	ldr	r2, [r3, #12]
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002968:	b292      	uxth	r2, r2
 800296a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002970:	1c9a      	adds	r2, r3, #2
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800297a:	b29b      	uxth	r3, r3
 800297c:	3b01      	subs	r3, #1
 800297e:	b29a      	uxth	r2, r3
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002984:	2301      	movs	r3, #1
 8002986:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002988:	f7fe fc3c 	bl	8001204 <HAL_GetTick>
 800298c:	4602      	mov	r2, r0
 800298e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002990:	1ad3      	subs	r3, r2, r3
 8002992:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002994:	429a      	cmp	r2, r3
 8002996:	d807      	bhi.n	80029a8 <HAL_SPI_TransmitReceive+0x1d8>
 8002998:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800299a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800299e:	d003      	beq.n	80029a8 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80029a0:	2303      	movs	r3, #3
 80029a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80029a6:	e0a7      	b.n	8002af8 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80029ac:	b29b      	uxth	r3, r3
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d1a6      	bne.n	8002900 <HAL_SPI_TransmitReceive+0x130>
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80029b6:	b29b      	uxth	r3, r3
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d1a1      	bne.n	8002900 <HAL_SPI_TransmitReceive+0x130>
 80029bc:	e07c      	b.n	8002ab8 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	685b      	ldr	r3, [r3, #4]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d002      	beq.n	80029cc <HAL_SPI_TransmitReceive+0x1fc>
 80029c6:	8b7b      	ldrh	r3, [r7, #26]
 80029c8:	2b01      	cmp	r3, #1
 80029ca:	d16b      	bne.n	8002aa4 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	330c      	adds	r3, #12
 80029d6:	7812      	ldrb	r2, [r2, #0]
 80029d8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029de:	1c5a      	adds	r2, r3, #1
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80029e8:	b29b      	uxth	r3, r3
 80029ea:	3b01      	subs	r3, #1
 80029ec:	b29a      	uxth	r2, r3
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80029f2:	e057      	b.n	8002aa4 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	689b      	ldr	r3, [r3, #8]
 80029fa:	f003 0302 	and.w	r3, r3, #2
 80029fe:	2b02      	cmp	r3, #2
 8002a00:	d11c      	bne.n	8002a3c <HAL_SPI_TransmitReceive+0x26c>
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a06:	b29b      	uxth	r3, r3
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d017      	beq.n	8002a3c <HAL_SPI_TransmitReceive+0x26c>
 8002a0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a0e:	2b01      	cmp	r3, #1
 8002a10:	d114      	bne.n	8002a3c <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	330c      	adds	r3, #12
 8002a1c:	7812      	ldrb	r2, [r2, #0]
 8002a1e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a24:	1c5a      	adds	r2, r3, #1
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a2e:	b29b      	uxth	r3, r3
 8002a30:	3b01      	subs	r3, #1
 8002a32:	b29a      	uxth	r2, r3
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002a38:	2300      	movs	r3, #0
 8002a3a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	689b      	ldr	r3, [r3, #8]
 8002a42:	f003 0301 	and.w	r3, r3, #1
 8002a46:	2b01      	cmp	r3, #1
 8002a48:	d119      	bne.n	8002a7e <HAL_SPI_TransmitReceive+0x2ae>
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a4e:	b29b      	uxth	r3, r3
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d014      	beq.n	8002a7e <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	68da      	ldr	r2, [r3, #12]
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a5e:	b2d2      	uxtb	r2, r2
 8002a60:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a66:	1c5a      	adds	r2, r3, #1
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a70:	b29b      	uxth	r3, r3
 8002a72:	3b01      	subs	r3, #1
 8002a74:	b29a      	uxth	r2, r3
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002a7e:	f7fe fbc1 	bl	8001204 <HAL_GetTick>
 8002a82:	4602      	mov	r2, r0
 8002a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a86:	1ad3      	subs	r3, r2, r3
 8002a88:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002a8a:	429a      	cmp	r2, r3
 8002a8c:	d803      	bhi.n	8002a96 <HAL_SPI_TransmitReceive+0x2c6>
 8002a8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a94:	d102      	bne.n	8002a9c <HAL_SPI_TransmitReceive+0x2cc>
 8002a96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d103      	bne.n	8002aa4 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8002a9c:	2303      	movs	r3, #3
 8002a9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002aa2:	e029      	b.n	8002af8 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002aa8:	b29b      	uxth	r3, r3
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d1a2      	bne.n	80029f4 <HAL_SPI_TransmitReceive+0x224>
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ab2:	b29b      	uxth	r3, r3
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d19d      	bne.n	80029f4 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002ab8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002aba:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002abc:	68f8      	ldr	r0, [r7, #12]
 8002abe:	f000 f917 	bl	8002cf0 <SPI_EndRxTxTransaction>
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d006      	beq.n	8002ad6 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8002ac8:	2301      	movs	r3, #1
 8002aca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	2220      	movs	r2, #32
 8002ad2:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8002ad4:	e010      	b.n	8002af8 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	689b      	ldr	r3, [r3, #8]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d10b      	bne.n	8002af6 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002ade:	2300      	movs	r3, #0
 8002ae0:	617b      	str	r3, [r7, #20]
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	68db      	ldr	r3, [r3, #12]
 8002ae8:	617b      	str	r3, [r7, #20]
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	689b      	ldr	r3, [r3, #8]
 8002af0:	617b      	str	r3, [r7, #20]
 8002af2:	697b      	ldr	r3, [r7, #20]
 8002af4:	e000      	b.n	8002af8 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8002af6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	2201      	movs	r2, #1
 8002afc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	2200      	movs	r2, #0
 8002b04:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002b08:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	3730      	adds	r7, #48	; 0x30
 8002b10:	46bd      	mov	sp, r7
 8002b12:	bd80      	pop	{r7, pc}

08002b14 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b088      	sub	sp, #32
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	60f8      	str	r0, [r7, #12]
 8002b1c:	60b9      	str	r1, [r7, #8]
 8002b1e:	603b      	str	r3, [r7, #0]
 8002b20:	4613      	mov	r3, r2
 8002b22:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002b24:	f7fe fb6e 	bl	8001204 <HAL_GetTick>
 8002b28:	4602      	mov	r2, r0
 8002b2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b2c:	1a9b      	subs	r3, r3, r2
 8002b2e:	683a      	ldr	r2, [r7, #0]
 8002b30:	4413      	add	r3, r2
 8002b32:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002b34:	f7fe fb66 	bl	8001204 <HAL_GetTick>
 8002b38:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002b3a:	4b39      	ldr	r3, [pc, #228]	; (8002c20 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	015b      	lsls	r3, r3, #5
 8002b40:	0d1b      	lsrs	r3, r3, #20
 8002b42:	69fa      	ldr	r2, [r7, #28]
 8002b44:	fb02 f303 	mul.w	r3, r2, r3
 8002b48:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002b4a:	e054      	b.n	8002bf6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b52:	d050      	beq.n	8002bf6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002b54:	f7fe fb56 	bl	8001204 <HAL_GetTick>
 8002b58:	4602      	mov	r2, r0
 8002b5a:	69bb      	ldr	r3, [r7, #24]
 8002b5c:	1ad3      	subs	r3, r2, r3
 8002b5e:	69fa      	ldr	r2, [r7, #28]
 8002b60:	429a      	cmp	r2, r3
 8002b62:	d902      	bls.n	8002b6a <SPI_WaitFlagStateUntilTimeout+0x56>
 8002b64:	69fb      	ldr	r3, [r7, #28]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d13d      	bne.n	8002be6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	685a      	ldr	r2, [r3, #4]
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002b78:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	685b      	ldr	r3, [r3, #4]
 8002b7e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002b82:	d111      	bne.n	8002ba8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	689b      	ldr	r3, [r3, #8]
 8002b88:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b8c:	d004      	beq.n	8002b98 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	689b      	ldr	r3, [r3, #8]
 8002b92:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b96:	d107      	bne.n	8002ba8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	681a      	ldr	r2, [r3, #0]
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002ba6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002bb0:	d10f      	bne.n	8002bd2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	681a      	ldr	r2, [r3, #0]
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002bc0:	601a      	str	r2, [r3, #0]
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	681a      	ldr	r2, [r3, #0]
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002bd0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	2201      	movs	r2, #1
 8002bd6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	2200      	movs	r2, #0
 8002bde:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002be2:	2303      	movs	r3, #3
 8002be4:	e017      	b.n	8002c16 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8002be6:	697b      	ldr	r3, [r7, #20]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d101      	bne.n	8002bf0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002bec:	2300      	movs	r3, #0
 8002bee:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002bf0:	697b      	ldr	r3, [r7, #20]
 8002bf2:	3b01      	subs	r3, #1
 8002bf4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	689a      	ldr	r2, [r3, #8]
 8002bfc:	68bb      	ldr	r3, [r7, #8]
 8002bfe:	4013      	ands	r3, r2
 8002c00:	68ba      	ldr	r2, [r7, #8]
 8002c02:	429a      	cmp	r2, r3
 8002c04:	bf0c      	ite	eq
 8002c06:	2301      	moveq	r3, #1
 8002c08:	2300      	movne	r3, #0
 8002c0a:	b2db      	uxtb	r3, r3
 8002c0c:	461a      	mov	r2, r3
 8002c0e:	79fb      	ldrb	r3, [r7, #7]
 8002c10:	429a      	cmp	r2, r3
 8002c12:	d19b      	bne.n	8002b4c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002c14:	2300      	movs	r3, #0
}
 8002c16:	4618      	mov	r0, r3
 8002c18:	3720      	adds	r7, #32
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	bd80      	pop	{r7, pc}
 8002c1e:	bf00      	nop
 8002c20:	20000000 	.word	0x20000000

08002c24 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b086      	sub	sp, #24
 8002c28:	af02      	add	r7, sp, #8
 8002c2a:	60f8      	str	r0, [r7, #12]
 8002c2c:	60b9      	str	r1, [r7, #8]
 8002c2e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002c38:	d111      	bne.n	8002c5e <SPI_EndRxTransaction+0x3a>
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	689b      	ldr	r3, [r3, #8]
 8002c3e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c42:	d004      	beq.n	8002c4e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	689b      	ldr	r3, [r3, #8]
 8002c48:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c4c:	d107      	bne.n	8002c5e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	681a      	ldr	r2, [r3, #0]
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c5c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	685b      	ldr	r3, [r3, #4]
 8002c62:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002c66:	d12a      	bne.n	8002cbe <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	689b      	ldr	r3, [r3, #8]
 8002c6c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c70:	d012      	beq.n	8002c98 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	9300      	str	r3, [sp, #0]
 8002c76:	68bb      	ldr	r3, [r7, #8]
 8002c78:	2200      	movs	r2, #0
 8002c7a:	2180      	movs	r1, #128	; 0x80
 8002c7c:	68f8      	ldr	r0, [r7, #12]
 8002c7e:	f7ff ff49 	bl	8002b14 <SPI_WaitFlagStateUntilTimeout>
 8002c82:	4603      	mov	r3, r0
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d02d      	beq.n	8002ce4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c8c:	f043 0220 	orr.w	r2, r3, #32
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8002c94:	2303      	movs	r3, #3
 8002c96:	e026      	b.n	8002ce6 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	9300      	str	r3, [sp, #0]
 8002c9c:	68bb      	ldr	r3, [r7, #8]
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	2101      	movs	r1, #1
 8002ca2:	68f8      	ldr	r0, [r7, #12]
 8002ca4:	f7ff ff36 	bl	8002b14 <SPI_WaitFlagStateUntilTimeout>
 8002ca8:	4603      	mov	r3, r0
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d01a      	beq.n	8002ce4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cb2:	f043 0220 	orr.w	r2, r3, #32
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8002cba:	2303      	movs	r3, #3
 8002cbc:	e013      	b.n	8002ce6 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	9300      	str	r3, [sp, #0]
 8002cc2:	68bb      	ldr	r3, [r7, #8]
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	2101      	movs	r1, #1
 8002cc8:	68f8      	ldr	r0, [r7, #12]
 8002cca:	f7ff ff23 	bl	8002b14 <SPI_WaitFlagStateUntilTimeout>
 8002cce:	4603      	mov	r3, r0
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d007      	beq.n	8002ce4 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cd8:	f043 0220 	orr.w	r2, r3, #32
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002ce0:	2303      	movs	r3, #3
 8002ce2:	e000      	b.n	8002ce6 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8002ce4:	2300      	movs	r3, #0
}
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	3710      	adds	r7, #16
 8002cea:	46bd      	mov	sp, r7
 8002cec:	bd80      	pop	{r7, pc}
	...

08002cf0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b088      	sub	sp, #32
 8002cf4:	af02      	add	r7, sp, #8
 8002cf6:	60f8      	str	r0, [r7, #12]
 8002cf8:	60b9      	str	r1, [r7, #8]
 8002cfa:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002cfc:	4b1b      	ldr	r3, [pc, #108]	; (8002d6c <SPI_EndRxTxTransaction+0x7c>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4a1b      	ldr	r2, [pc, #108]	; (8002d70 <SPI_EndRxTxTransaction+0x80>)
 8002d02:	fba2 2303 	umull	r2, r3, r2, r3
 8002d06:	0d5b      	lsrs	r3, r3, #21
 8002d08:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002d0c:	fb02 f303 	mul.w	r3, r2, r3
 8002d10:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	685b      	ldr	r3, [r3, #4]
 8002d16:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002d1a:	d112      	bne.n	8002d42 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	9300      	str	r3, [sp, #0]
 8002d20:	68bb      	ldr	r3, [r7, #8]
 8002d22:	2200      	movs	r2, #0
 8002d24:	2180      	movs	r1, #128	; 0x80
 8002d26:	68f8      	ldr	r0, [r7, #12]
 8002d28:	f7ff fef4 	bl	8002b14 <SPI_WaitFlagStateUntilTimeout>
 8002d2c:	4603      	mov	r3, r0
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d016      	beq.n	8002d60 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d36:	f043 0220 	orr.w	r2, r3, #32
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002d3e:	2303      	movs	r3, #3
 8002d40:	e00f      	b.n	8002d62 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002d42:	697b      	ldr	r3, [r7, #20]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d00a      	beq.n	8002d5e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8002d48:	697b      	ldr	r3, [r7, #20]
 8002d4a:	3b01      	subs	r3, #1
 8002d4c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	689b      	ldr	r3, [r3, #8]
 8002d54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d58:	2b80      	cmp	r3, #128	; 0x80
 8002d5a:	d0f2      	beq.n	8002d42 <SPI_EndRxTxTransaction+0x52>
 8002d5c:	e000      	b.n	8002d60 <SPI_EndRxTxTransaction+0x70>
        break;
 8002d5e:	bf00      	nop
  }

  return HAL_OK;
 8002d60:	2300      	movs	r3, #0
}
 8002d62:	4618      	mov	r0, r3
 8002d64:	3718      	adds	r7, #24
 8002d66:	46bd      	mov	sp, r7
 8002d68:	bd80      	pop	{r7, pc}
 8002d6a:	bf00      	nop
 8002d6c:	20000000 	.word	0x20000000
 8002d70:	165e9f81 	.word	0x165e9f81

08002d74 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b082      	sub	sp, #8
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d101      	bne.n	8002d86 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002d82:	2301      	movs	r3, #1
 8002d84:	e041      	b.n	8002e0a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d8c:	b2db      	uxtb	r3, r3
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d106      	bne.n	8002da0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	2200      	movs	r2, #0
 8002d96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002d9a:	6878      	ldr	r0, [r7, #4]
 8002d9c:	f7fe f8a4 	bl	8000ee8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2202      	movs	r2, #2
 8002da4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681a      	ldr	r2, [r3, #0]
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	3304      	adds	r3, #4
 8002db0:	4619      	mov	r1, r3
 8002db2:	4610      	mov	r0, r2
 8002db4:	f000 f95a 	bl	800306c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2201      	movs	r2, #1
 8002dbc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2201      	movs	r2, #1
 8002dc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2201      	movs	r2, #1
 8002dcc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2201      	movs	r2, #1
 8002dd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2201      	movs	r2, #1
 8002ddc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2201      	movs	r2, #1
 8002de4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2201      	movs	r2, #1
 8002dec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2201      	movs	r2, #1
 8002df4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2201      	movs	r2, #1
 8002dfc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2201      	movs	r2, #1
 8002e04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002e08:	2300      	movs	r3, #0
}
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	3708      	adds	r7, #8
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bd80      	pop	{r7, pc}
	...

08002e14 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002e14:	b480      	push	{r7}
 8002e16:	b085      	sub	sp, #20
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e22:	b2db      	uxtb	r3, r3
 8002e24:	2b01      	cmp	r3, #1
 8002e26:	d001      	beq.n	8002e2c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002e28:	2301      	movs	r3, #1
 8002e2a:	e046      	b.n	8002eba <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2202      	movs	r2, #2
 8002e30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	4a23      	ldr	r2, [pc, #140]	; (8002ec8 <HAL_TIM_Base_Start+0xb4>)
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d022      	beq.n	8002e84 <HAL_TIM_Base_Start+0x70>
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e46:	d01d      	beq.n	8002e84 <HAL_TIM_Base_Start+0x70>
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	4a1f      	ldr	r2, [pc, #124]	; (8002ecc <HAL_TIM_Base_Start+0xb8>)
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d018      	beq.n	8002e84 <HAL_TIM_Base_Start+0x70>
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4a1e      	ldr	r2, [pc, #120]	; (8002ed0 <HAL_TIM_Base_Start+0xbc>)
 8002e58:	4293      	cmp	r3, r2
 8002e5a:	d013      	beq.n	8002e84 <HAL_TIM_Base_Start+0x70>
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	4a1c      	ldr	r2, [pc, #112]	; (8002ed4 <HAL_TIM_Base_Start+0xc0>)
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d00e      	beq.n	8002e84 <HAL_TIM_Base_Start+0x70>
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	4a1b      	ldr	r2, [pc, #108]	; (8002ed8 <HAL_TIM_Base_Start+0xc4>)
 8002e6c:	4293      	cmp	r3, r2
 8002e6e:	d009      	beq.n	8002e84 <HAL_TIM_Base_Start+0x70>
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	4a19      	ldr	r2, [pc, #100]	; (8002edc <HAL_TIM_Base_Start+0xc8>)
 8002e76:	4293      	cmp	r3, r2
 8002e78:	d004      	beq.n	8002e84 <HAL_TIM_Base_Start+0x70>
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	4a18      	ldr	r2, [pc, #96]	; (8002ee0 <HAL_TIM_Base_Start+0xcc>)
 8002e80:	4293      	cmp	r3, r2
 8002e82:	d111      	bne.n	8002ea8 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	689b      	ldr	r3, [r3, #8]
 8002e8a:	f003 0307 	and.w	r3, r3, #7
 8002e8e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	2b06      	cmp	r3, #6
 8002e94:	d010      	beq.n	8002eb8 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	681a      	ldr	r2, [r3, #0]
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f042 0201 	orr.w	r2, r2, #1
 8002ea4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ea6:	e007      	b.n	8002eb8 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	681a      	ldr	r2, [r3, #0]
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f042 0201 	orr.w	r2, r2, #1
 8002eb6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002eb8:	2300      	movs	r3, #0
}
 8002eba:	4618      	mov	r0, r3
 8002ebc:	3714      	adds	r7, #20
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec4:	4770      	bx	lr
 8002ec6:	bf00      	nop
 8002ec8:	40010000 	.word	0x40010000
 8002ecc:	40000400 	.word	0x40000400
 8002ed0:	40000800 	.word	0x40000800
 8002ed4:	40000c00 	.word	0x40000c00
 8002ed8:	40010400 	.word	0x40010400
 8002edc:	40014000 	.word	0x40014000
 8002ee0:	40001800 	.word	0x40001800

08002ee4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b084      	sub	sp, #16
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
 8002eec:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ef4:	2b01      	cmp	r3, #1
 8002ef6:	d101      	bne.n	8002efc <HAL_TIM_ConfigClockSource+0x18>
 8002ef8:	2302      	movs	r3, #2
 8002efa:	e0b3      	b.n	8003064 <HAL_TIM_ConfigClockSource+0x180>
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2201      	movs	r2, #1
 8002f00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2202      	movs	r2, #2
 8002f08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	689b      	ldr	r3, [r3, #8]
 8002f12:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002f1a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002f22:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	68fa      	ldr	r2, [r7, #12]
 8002f2a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f34:	d03e      	beq.n	8002fb4 <HAL_TIM_ConfigClockSource+0xd0>
 8002f36:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f3a:	f200 8087 	bhi.w	800304c <HAL_TIM_ConfigClockSource+0x168>
 8002f3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f42:	f000 8085 	beq.w	8003050 <HAL_TIM_ConfigClockSource+0x16c>
 8002f46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f4a:	d87f      	bhi.n	800304c <HAL_TIM_ConfigClockSource+0x168>
 8002f4c:	2b70      	cmp	r3, #112	; 0x70
 8002f4e:	d01a      	beq.n	8002f86 <HAL_TIM_ConfigClockSource+0xa2>
 8002f50:	2b70      	cmp	r3, #112	; 0x70
 8002f52:	d87b      	bhi.n	800304c <HAL_TIM_ConfigClockSource+0x168>
 8002f54:	2b60      	cmp	r3, #96	; 0x60
 8002f56:	d050      	beq.n	8002ffa <HAL_TIM_ConfigClockSource+0x116>
 8002f58:	2b60      	cmp	r3, #96	; 0x60
 8002f5a:	d877      	bhi.n	800304c <HAL_TIM_ConfigClockSource+0x168>
 8002f5c:	2b50      	cmp	r3, #80	; 0x50
 8002f5e:	d03c      	beq.n	8002fda <HAL_TIM_ConfigClockSource+0xf6>
 8002f60:	2b50      	cmp	r3, #80	; 0x50
 8002f62:	d873      	bhi.n	800304c <HAL_TIM_ConfigClockSource+0x168>
 8002f64:	2b40      	cmp	r3, #64	; 0x40
 8002f66:	d058      	beq.n	800301a <HAL_TIM_ConfigClockSource+0x136>
 8002f68:	2b40      	cmp	r3, #64	; 0x40
 8002f6a:	d86f      	bhi.n	800304c <HAL_TIM_ConfigClockSource+0x168>
 8002f6c:	2b30      	cmp	r3, #48	; 0x30
 8002f6e:	d064      	beq.n	800303a <HAL_TIM_ConfigClockSource+0x156>
 8002f70:	2b30      	cmp	r3, #48	; 0x30
 8002f72:	d86b      	bhi.n	800304c <HAL_TIM_ConfigClockSource+0x168>
 8002f74:	2b20      	cmp	r3, #32
 8002f76:	d060      	beq.n	800303a <HAL_TIM_ConfigClockSource+0x156>
 8002f78:	2b20      	cmp	r3, #32
 8002f7a:	d867      	bhi.n	800304c <HAL_TIM_ConfigClockSource+0x168>
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d05c      	beq.n	800303a <HAL_TIM_ConfigClockSource+0x156>
 8002f80:	2b10      	cmp	r3, #16
 8002f82:	d05a      	beq.n	800303a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002f84:	e062      	b.n	800304c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6818      	ldr	r0, [r3, #0]
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	6899      	ldr	r1, [r3, #8]
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	685a      	ldr	r2, [r3, #4]
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	68db      	ldr	r3, [r3, #12]
 8002f96:	f000 f983 	bl	80032a0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	689b      	ldr	r3, [r3, #8]
 8002fa0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002fa8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	68fa      	ldr	r2, [r7, #12]
 8002fb0:	609a      	str	r2, [r3, #8]
      break;
 8002fb2:	e04e      	b.n	8003052 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6818      	ldr	r0, [r3, #0]
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	6899      	ldr	r1, [r3, #8]
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	685a      	ldr	r2, [r3, #4]
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	68db      	ldr	r3, [r3, #12]
 8002fc4:	f000 f96c 	bl	80032a0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	689a      	ldr	r2, [r3, #8]
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002fd6:	609a      	str	r2, [r3, #8]
      break;
 8002fd8:	e03b      	b.n	8003052 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6818      	ldr	r0, [r3, #0]
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	6859      	ldr	r1, [r3, #4]
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	68db      	ldr	r3, [r3, #12]
 8002fe6:	461a      	mov	r2, r3
 8002fe8:	f000 f8e0 	bl	80031ac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	2150      	movs	r1, #80	; 0x50
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	f000 f939 	bl	800326a <TIM_ITRx_SetConfig>
      break;
 8002ff8:	e02b      	b.n	8003052 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6818      	ldr	r0, [r3, #0]
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	6859      	ldr	r1, [r3, #4]
 8003002:	683b      	ldr	r3, [r7, #0]
 8003004:	68db      	ldr	r3, [r3, #12]
 8003006:	461a      	mov	r2, r3
 8003008:	f000 f8ff 	bl	800320a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	2160      	movs	r1, #96	; 0x60
 8003012:	4618      	mov	r0, r3
 8003014:	f000 f929 	bl	800326a <TIM_ITRx_SetConfig>
      break;
 8003018:	e01b      	b.n	8003052 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6818      	ldr	r0, [r3, #0]
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	6859      	ldr	r1, [r3, #4]
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	68db      	ldr	r3, [r3, #12]
 8003026:	461a      	mov	r2, r3
 8003028:	f000 f8c0 	bl	80031ac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	2140      	movs	r1, #64	; 0x40
 8003032:	4618      	mov	r0, r3
 8003034:	f000 f919 	bl	800326a <TIM_ITRx_SetConfig>
      break;
 8003038:	e00b      	b.n	8003052 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681a      	ldr	r2, [r3, #0]
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	4619      	mov	r1, r3
 8003044:	4610      	mov	r0, r2
 8003046:	f000 f910 	bl	800326a <TIM_ITRx_SetConfig>
        break;
 800304a:	e002      	b.n	8003052 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800304c:	bf00      	nop
 800304e:	e000      	b.n	8003052 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003050:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	2201      	movs	r2, #1
 8003056:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	2200      	movs	r2, #0
 800305e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003062:	2300      	movs	r3, #0
}
 8003064:	4618      	mov	r0, r3
 8003066:	3710      	adds	r7, #16
 8003068:	46bd      	mov	sp, r7
 800306a:	bd80      	pop	{r7, pc}

0800306c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800306c:	b480      	push	{r7}
 800306e:	b085      	sub	sp, #20
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
 8003074:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	4a40      	ldr	r2, [pc, #256]	; (8003180 <TIM_Base_SetConfig+0x114>)
 8003080:	4293      	cmp	r3, r2
 8003082:	d013      	beq.n	80030ac <TIM_Base_SetConfig+0x40>
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800308a:	d00f      	beq.n	80030ac <TIM_Base_SetConfig+0x40>
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	4a3d      	ldr	r2, [pc, #244]	; (8003184 <TIM_Base_SetConfig+0x118>)
 8003090:	4293      	cmp	r3, r2
 8003092:	d00b      	beq.n	80030ac <TIM_Base_SetConfig+0x40>
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	4a3c      	ldr	r2, [pc, #240]	; (8003188 <TIM_Base_SetConfig+0x11c>)
 8003098:	4293      	cmp	r3, r2
 800309a:	d007      	beq.n	80030ac <TIM_Base_SetConfig+0x40>
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	4a3b      	ldr	r2, [pc, #236]	; (800318c <TIM_Base_SetConfig+0x120>)
 80030a0:	4293      	cmp	r3, r2
 80030a2:	d003      	beq.n	80030ac <TIM_Base_SetConfig+0x40>
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	4a3a      	ldr	r2, [pc, #232]	; (8003190 <TIM_Base_SetConfig+0x124>)
 80030a8:	4293      	cmp	r3, r2
 80030aa:	d108      	bne.n	80030be <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	68fa      	ldr	r2, [r7, #12]
 80030ba:	4313      	orrs	r3, r2
 80030bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	4a2f      	ldr	r2, [pc, #188]	; (8003180 <TIM_Base_SetConfig+0x114>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d02b      	beq.n	800311e <TIM_Base_SetConfig+0xb2>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030cc:	d027      	beq.n	800311e <TIM_Base_SetConfig+0xb2>
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	4a2c      	ldr	r2, [pc, #176]	; (8003184 <TIM_Base_SetConfig+0x118>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d023      	beq.n	800311e <TIM_Base_SetConfig+0xb2>
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	4a2b      	ldr	r2, [pc, #172]	; (8003188 <TIM_Base_SetConfig+0x11c>)
 80030da:	4293      	cmp	r3, r2
 80030dc:	d01f      	beq.n	800311e <TIM_Base_SetConfig+0xb2>
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	4a2a      	ldr	r2, [pc, #168]	; (800318c <TIM_Base_SetConfig+0x120>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d01b      	beq.n	800311e <TIM_Base_SetConfig+0xb2>
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	4a29      	ldr	r2, [pc, #164]	; (8003190 <TIM_Base_SetConfig+0x124>)
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d017      	beq.n	800311e <TIM_Base_SetConfig+0xb2>
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	4a28      	ldr	r2, [pc, #160]	; (8003194 <TIM_Base_SetConfig+0x128>)
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d013      	beq.n	800311e <TIM_Base_SetConfig+0xb2>
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	4a27      	ldr	r2, [pc, #156]	; (8003198 <TIM_Base_SetConfig+0x12c>)
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d00f      	beq.n	800311e <TIM_Base_SetConfig+0xb2>
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	4a26      	ldr	r2, [pc, #152]	; (800319c <TIM_Base_SetConfig+0x130>)
 8003102:	4293      	cmp	r3, r2
 8003104:	d00b      	beq.n	800311e <TIM_Base_SetConfig+0xb2>
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	4a25      	ldr	r2, [pc, #148]	; (80031a0 <TIM_Base_SetConfig+0x134>)
 800310a:	4293      	cmp	r3, r2
 800310c:	d007      	beq.n	800311e <TIM_Base_SetConfig+0xb2>
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	4a24      	ldr	r2, [pc, #144]	; (80031a4 <TIM_Base_SetConfig+0x138>)
 8003112:	4293      	cmp	r3, r2
 8003114:	d003      	beq.n	800311e <TIM_Base_SetConfig+0xb2>
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	4a23      	ldr	r2, [pc, #140]	; (80031a8 <TIM_Base_SetConfig+0x13c>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d108      	bne.n	8003130 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003124:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	68db      	ldr	r3, [r3, #12]
 800312a:	68fa      	ldr	r2, [r7, #12]
 800312c:	4313      	orrs	r3, r2
 800312e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	695b      	ldr	r3, [r3, #20]
 800313a:	4313      	orrs	r3, r2
 800313c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	68fa      	ldr	r2, [r7, #12]
 8003142:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	689a      	ldr	r2, [r3, #8]
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	681a      	ldr	r2, [r3, #0]
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	4a0a      	ldr	r2, [pc, #40]	; (8003180 <TIM_Base_SetConfig+0x114>)
 8003158:	4293      	cmp	r3, r2
 800315a:	d003      	beq.n	8003164 <TIM_Base_SetConfig+0xf8>
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	4a0c      	ldr	r2, [pc, #48]	; (8003190 <TIM_Base_SetConfig+0x124>)
 8003160:	4293      	cmp	r3, r2
 8003162:	d103      	bne.n	800316c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	691a      	ldr	r2, [r3, #16]
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2201      	movs	r2, #1
 8003170:	615a      	str	r2, [r3, #20]
}
 8003172:	bf00      	nop
 8003174:	3714      	adds	r7, #20
 8003176:	46bd      	mov	sp, r7
 8003178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317c:	4770      	bx	lr
 800317e:	bf00      	nop
 8003180:	40010000 	.word	0x40010000
 8003184:	40000400 	.word	0x40000400
 8003188:	40000800 	.word	0x40000800
 800318c:	40000c00 	.word	0x40000c00
 8003190:	40010400 	.word	0x40010400
 8003194:	40014000 	.word	0x40014000
 8003198:	40014400 	.word	0x40014400
 800319c:	40014800 	.word	0x40014800
 80031a0:	40001800 	.word	0x40001800
 80031a4:	40001c00 	.word	0x40001c00
 80031a8:	40002000 	.word	0x40002000

080031ac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80031ac:	b480      	push	{r7}
 80031ae:	b087      	sub	sp, #28
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	60f8      	str	r0, [r7, #12]
 80031b4:	60b9      	str	r1, [r7, #8]
 80031b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	6a1b      	ldr	r3, [r3, #32]
 80031bc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	6a1b      	ldr	r3, [r3, #32]
 80031c2:	f023 0201 	bic.w	r2, r3, #1
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	699b      	ldr	r3, [r3, #24]
 80031ce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80031d0:	693b      	ldr	r3, [r7, #16]
 80031d2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80031d6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	011b      	lsls	r3, r3, #4
 80031dc:	693a      	ldr	r2, [r7, #16]
 80031de:	4313      	orrs	r3, r2
 80031e0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80031e2:	697b      	ldr	r3, [r7, #20]
 80031e4:	f023 030a 	bic.w	r3, r3, #10
 80031e8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80031ea:	697a      	ldr	r2, [r7, #20]
 80031ec:	68bb      	ldr	r3, [r7, #8]
 80031ee:	4313      	orrs	r3, r2
 80031f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	693a      	ldr	r2, [r7, #16]
 80031f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	697a      	ldr	r2, [r7, #20]
 80031fc:	621a      	str	r2, [r3, #32]
}
 80031fe:	bf00      	nop
 8003200:	371c      	adds	r7, #28
 8003202:	46bd      	mov	sp, r7
 8003204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003208:	4770      	bx	lr

0800320a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800320a:	b480      	push	{r7}
 800320c:	b087      	sub	sp, #28
 800320e:	af00      	add	r7, sp, #0
 8003210:	60f8      	str	r0, [r7, #12]
 8003212:	60b9      	str	r1, [r7, #8]
 8003214:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	6a1b      	ldr	r3, [r3, #32]
 800321a:	f023 0210 	bic.w	r2, r3, #16
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	699b      	ldr	r3, [r3, #24]
 8003226:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	6a1b      	ldr	r3, [r3, #32]
 800322c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800322e:	697b      	ldr	r3, [r7, #20]
 8003230:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003234:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	031b      	lsls	r3, r3, #12
 800323a:	697a      	ldr	r2, [r7, #20]
 800323c:	4313      	orrs	r3, r2
 800323e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003240:	693b      	ldr	r3, [r7, #16]
 8003242:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003246:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003248:	68bb      	ldr	r3, [r7, #8]
 800324a:	011b      	lsls	r3, r3, #4
 800324c:	693a      	ldr	r2, [r7, #16]
 800324e:	4313      	orrs	r3, r2
 8003250:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	697a      	ldr	r2, [r7, #20]
 8003256:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	693a      	ldr	r2, [r7, #16]
 800325c:	621a      	str	r2, [r3, #32]
}
 800325e:	bf00      	nop
 8003260:	371c      	adds	r7, #28
 8003262:	46bd      	mov	sp, r7
 8003264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003268:	4770      	bx	lr

0800326a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800326a:	b480      	push	{r7}
 800326c:	b085      	sub	sp, #20
 800326e:	af00      	add	r7, sp, #0
 8003270:	6078      	str	r0, [r7, #4]
 8003272:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	689b      	ldr	r3, [r3, #8]
 8003278:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003280:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003282:	683a      	ldr	r2, [r7, #0]
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	4313      	orrs	r3, r2
 8003288:	f043 0307 	orr.w	r3, r3, #7
 800328c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	68fa      	ldr	r2, [r7, #12]
 8003292:	609a      	str	r2, [r3, #8]
}
 8003294:	bf00      	nop
 8003296:	3714      	adds	r7, #20
 8003298:	46bd      	mov	sp, r7
 800329a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329e:	4770      	bx	lr

080032a0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80032a0:	b480      	push	{r7}
 80032a2:	b087      	sub	sp, #28
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	60f8      	str	r0, [r7, #12]
 80032a8:	60b9      	str	r1, [r7, #8]
 80032aa:	607a      	str	r2, [r7, #4]
 80032ac:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	689b      	ldr	r3, [r3, #8]
 80032b2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80032b4:	697b      	ldr	r3, [r7, #20]
 80032b6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80032ba:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	021a      	lsls	r2, r3, #8
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	431a      	orrs	r2, r3
 80032c4:	68bb      	ldr	r3, [r7, #8]
 80032c6:	4313      	orrs	r3, r2
 80032c8:	697a      	ldr	r2, [r7, #20]
 80032ca:	4313      	orrs	r3, r2
 80032cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	697a      	ldr	r2, [r7, #20]
 80032d2:	609a      	str	r2, [r3, #8]
}
 80032d4:	bf00      	nop
 80032d6:	371c      	adds	r7, #28
 80032d8:	46bd      	mov	sp, r7
 80032da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032de:	4770      	bx	lr

080032e0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80032e0:	b480      	push	{r7}
 80032e2:	b085      	sub	sp, #20
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
 80032e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032f0:	2b01      	cmp	r3, #1
 80032f2:	d101      	bne.n	80032f8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80032f4:	2302      	movs	r3, #2
 80032f6:	e05a      	b.n	80033ae <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2201      	movs	r2, #1
 80032fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2202      	movs	r2, #2
 8003304:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	685b      	ldr	r3, [r3, #4]
 800330e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	689b      	ldr	r3, [r3, #8]
 8003316:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800331e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	68fa      	ldr	r2, [r7, #12]
 8003326:	4313      	orrs	r3, r2
 8003328:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	68fa      	ldr	r2, [r7, #12]
 8003330:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	4a21      	ldr	r2, [pc, #132]	; (80033bc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003338:	4293      	cmp	r3, r2
 800333a:	d022      	beq.n	8003382 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003344:	d01d      	beq.n	8003382 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4a1d      	ldr	r2, [pc, #116]	; (80033c0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800334c:	4293      	cmp	r3, r2
 800334e:	d018      	beq.n	8003382 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4a1b      	ldr	r2, [pc, #108]	; (80033c4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d013      	beq.n	8003382 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	4a1a      	ldr	r2, [pc, #104]	; (80033c8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003360:	4293      	cmp	r3, r2
 8003362:	d00e      	beq.n	8003382 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4a18      	ldr	r2, [pc, #96]	; (80033cc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800336a:	4293      	cmp	r3, r2
 800336c:	d009      	beq.n	8003382 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	4a17      	ldr	r2, [pc, #92]	; (80033d0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003374:	4293      	cmp	r3, r2
 8003376:	d004      	beq.n	8003382 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	4a15      	ldr	r2, [pc, #84]	; (80033d4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800337e:	4293      	cmp	r3, r2
 8003380:	d10c      	bne.n	800339c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003382:	68bb      	ldr	r3, [r7, #8]
 8003384:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003388:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	68ba      	ldr	r2, [r7, #8]
 8003390:	4313      	orrs	r3, r2
 8003392:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	68ba      	ldr	r2, [r7, #8]
 800339a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2201      	movs	r2, #1
 80033a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2200      	movs	r2, #0
 80033a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80033ac:	2300      	movs	r3, #0
}
 80033ae:	4618      	mov	r0, r3
 80033b0:	3714      	adds	r7, #20
 80033b2:	46bd      	mov	sp, r7
 80033b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b8:	4770      	bx	lr
 80033ba:	bf00      	nop
 80033bc:	40010000 	.word	0x40010000
 80033c0:	40000400 	.word	0x40000400
 80033c4:	40000800 	.word	0x40000800
 80033c8:	40000c00 	.word	0x40000c00
 80033cc:	40010400 	.word	0x40010400
 80033d0:	40014000 	.word	0x40014000
 80033d4:	40001800 	.word	0x40001800

080033d8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	b082      	sub	sp, #8
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d101      	bne.n	80033ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80033e6:	2301      	movs	r3, #1
 80033e8:	e03f      	b.n	800346a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033f0:	b2db      	uxtb	r3, r3
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d106      	bne.n	8003404 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2200      	movs	r2, #0
 80033fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80033fe:	6878      	ldr	r0, [r7, #4]
 8003400:	f7fd fd92 	bl	8000f28 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2224      	movs	r2, #36	; 0x24
 8003408:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	68da      	ldr	r2, [r3, #12]
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800341a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800341c:	6878      	ldr	r0, [r7, #4]
 800341e:	f000 f905 	bl	800362c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	691a      	ldr	r2, [r3, #16]
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003430:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	695a      	ldr	r2, [r3, #20]
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003440:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	68da      	ldr	r2, [r3, #12]
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003450:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	2200      	movs	r2, #0
 8003456:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2220      	movs	r2, #32
 800345c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2220      	movs	r2, #32
 8003464:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003468:	2300      	movs	r3, #0
}
 800346a:	4618      	mov	r0, r3
 800346c:	3708      	adds	r7, #8
 800346e:	46bd      	mov	sp, r7
 8003470:	bd80      	pop	{r7, pc}

08003472 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003472:	b580      	push	{r7, lr}
 8003474:	b08a      	sub	sp, #40	; 0x28
 8003476:	af02      	add	r7, sp, #8
 8003478:	60f8      	str	r0, [r7, #12]
 800347a:	60b9      	str	r1, [r7, #8]
 800347c:	603b      	str	r3, [r7, #0]
 800347e:	4613      	mov	r3, r2
 8003480:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003482:	2300      	movs	r3, #0
 8003484:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800348c:	b2db      	uxtb	r3, r3
 800348e:	2b20      	cmp	r3, #32
 8003490:	d17c      	bne.n	800358c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003492:	68bb      	ldr	r3, [r7, #8]
 8003494:	2b00      	cmp	r3, #0
 8003496:	d002      	beq.n	800349e <HAL_UART_Transmit+0x2c>
 8003498:	88fb      	ldrh	r3, [r7, #6]
 800349a:	2b00      	cmp	r3, #0
 800349c:	d101      	bne.n	80034a2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800349e:	2301      	movs	r3, #1
 80034a0:	e075      	b.n	800358e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034a8:	2b01      	cmp	r3, #1
 80034aa:	d101      	bne.n	80034b0 <HAL_UART_Transmit+0x3e>
 80034ac:	2302      	movs	r3, #2
 80034ae:	e06e      	b.n	800358e <HAL_UART_Transmit+0x11c>
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	2201      	movs	r2, #1
 80034b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	2200      	movs	r2, #0
 80034bc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	2221      	movs	r2, #33	; 0x21
 80034c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80034c6:	f7fd fe9d 	bl	8001204 <HAL_GetTick>
 80034ca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	88fa      	ldrh	r2, [r7, #6]
 80034d0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	88fa      	ldrh	r2, [r7, #6]
 80034d6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	689b      	ldr	r3, [r3, #8]
 80034dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034e0:	d108      	bne.n	80034f4 <HAL_UART_Transmit+0x82>
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	691b      	ldr	r3, [r3, #16]
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d104      	bne.n	80034f4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80034ea:	2300      	movs	r3, #0
 80034ec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80034ee:	68bb      	ldr	r3, [r7, #8]
 80034f0:	61bb      	str	r3, [r7, #24]
 80034f2:	e003      	b.n	80034fc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80034f4:	68bb      	ldr	r3, [r7, #8]
 80034f6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80034f8:	2300      	movs	r3, #0
 80034fa:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	2200      	movs	r2, #0
 8003500:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003504:	e02a      	b.n	800355c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	9300      	str	r3, [sp, #0]
 800350a:	697b      	ldr	r3, [r7, #20]
 800350c:	2200      	movs	r2, #0
 800350e:	2180      	movs	r1, #128	; 0x80
 8003510:	68f8      	ldr	r0, [r7, #12]
 8003512:	f000 f840 	bl	8003596 <UART_WaitOnFlagUntilTimeout>
 8003516:	4603      	mov	r3, r0
 8003518:	2b00      	cmp	r3, #0
 800351a:	d001      	beq.n	8003520 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800351c:	2303      	movs	r3, #3
 800351e:	e036      	b.n	800358e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003520:	69fb      	ldr	r3, [r7, #28]
 8003522:	2b00      	cmp	r3, #0
 8003524:	d10b      	bne.n	800353e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003526:	69bb      	ldr	r3, [r7, #24]
 8003528:	881b      	ldrh	r3, [r3, #0]
 800352a:	461a      	mov	r2, r3
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003534:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003536:	69bb      	ldr	r3, [r7, #24]
 8003538:	3302      	adds	r3, #2
 800353a:	61bb      	str	r3, [r7, #24]
 800353c:	e007      	b.n	800354e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800353e:	69fb      	ldr	r3, [r7, #28]
 8003540:	781a      	ldrb	r2, [r3, #0]
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003548:	69fb      	ldr	r3, [r7, #28]
 800354a:	3301      	adds	r3, #1
 800354c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003552:	b29b      	uxth	r3, r3
 8003554:	3b01      	subs	r3, #1
 8003556:	b29a      	uxth	r2, r3
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003560:	b29b      	uxth	r3, r3
 8003562:	2b00      	cmp	r3, #0
 8003564:	d1cf      	bne.n	8003506 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	9300      	str	r3, [sp, #0]
 800356a:	697b      	ldr	r3, [r7, #20]
 800356c:	2200      	movs	r2, #0
 800356e:	2140      	movs	r1, #64	; 0x40
 8003570:	68f8      	ldr	r0, [r7, #12]
 8003572:	f000 f810 	bl	8003596 <UART_WaitOnFlagUntilTimeout>
 8003576:	4603      	mov	r3, r0
 8003578:	2b00      	cmp	r3, #0
 800357a:	d001      	beq.n	8003580 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800357c:	2303      	movs	r3, #3
 800357e:	e006      	b.n	800358e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	2220      	movs	r2, #32
 8003584:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003588:	2300      	movs	r3, #0
 800358a:	e000      	b.n	800358e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800358c:	2302      	movs	r3, #2
  }
}
 800358e:	4618      	mov	r0, r3
 8003590:	3720      	adds	r7, #32
 8003592:	46bd      	mov	sp, r7
 8003594:	bd80      	pop	{r7, pc}

08003596 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003596:	b580      	push	{r7, lr}
 8003598:	b084      	sub	sp, #16
 800359a:	af00      	add	r7, sp, #0
 800359c:	60f8      	str	r0, [r7, #12]
 800359e:	60b9      	str	r1, [r7, #8]
 80035a0:	603b      	str	r3, [r7, #0]
 80035a2:	4613      	mov	r3, r2
 80035a4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80035a6:	e02c      	b.n	8003602 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035a8:	69bb      	ldr	r3, [r7, #24]
 80035aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035ae:	d028      	beq.n	8003602 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80035b0:	69bb      	ldr	r3, [r7, #24]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d007      	beq.n	80035c6 <UART_WaitOnFlagUntilTimeout+0x30>
 80035b6:	f7fd fe25 	bl	8001204 <HAL_GetTick>
 80035ba:	4602      	mov	r2, r0
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	1ad3      	subs	r3, r2, r3
 80035c0:	69ba      	ldr	r2, [r7, #24]
 80035c2:	429a      	cmp	r2, r3
 80035c4:	d21d      	bcs.n	8003602 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	68da      	ldr	r2, [r3, #12]
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80035d4:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	695a      	ldr	r2, [r3, #20]
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f022 0201 	bic.w	r2, r2, #1
 80035e4:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	2220      	movs	r2, #32
 80035ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	2220      	movs	r2, #32
 80035f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	2200      	movs	r2, #0
 80035fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80035fe:	2303      	movs	r3, #3
 8003600:	e00f      	b.n	8003622 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	681a      	ldr	r2, [r3, #0]
 8003608:	68bb      	ldr	r3, [r7, #8]
 800360a:	4013      	ands	r3, r2
 800360c:	68ba      	ldr	r2, [r7, #8]
 800360e:	429a      	cmp	r2, r3
 8003610:	bf0c      	ite	eq
 8003612:	2301      	moveq	r3, #1
 8003614:	2300      	movne	r3, #0
 8003616:	b2db      	uxtb	r3, r3
 8003618:	461a      	mov	r2, r3
 800361a:	79fb      	ldrb	r3, [r7, #7]
 800361c:	429a      	cmp	r2, r3
 800361e:	d0c3      	beq.n	80035a8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003620:	2300      	movs	r3, #0
}
 8003622:	4618      	mov	r0, r3
 8003624:	3710      	adds	r7, #16
 8003626:	46bd      	mov	sp, r7
 8003628:	bd80      	pop	{r7, pc}
	...

0800362c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800362c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003630:	b09f      	sub	sp, #124	; 0x7c
 8003632:	af00      	add	r7, sp, #0
 8003634:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003636:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	691b      	ldr	r3, [r3, #16]
 800363c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003640:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003642:	68d9      	ldr	r1, [r3, #12]
 8003644:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003646:	681a      	ldr	r2, [r3, #0]
 8003648:	ea40 0301 	orr.w	r3, r0, r1
 800364c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800364e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003650:	689a      	ldr	r2, [r3, #8]
 8003652:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003654:	691b      	ldr	r3, [r3, #16]
 8003656:	431a      	orrs	r2, r3
 8003658:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800365a:	695b      	ldr	r3, [r3, #20]
 800365c:	431a      	orrs	r2, r3
 800365e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003660:	69db      	ldr	r3, [r3, #28]
 8003662:	4313      	orrs	r3, r2
 8003664:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8003666:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	68db      	ldr	r3, [r3, #12]
 800366c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003670:	f021 010c 	bic.w	r1, r1, #12
 8003674:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003676:	681a      	ldr	r2, [r3, #0]
 8003678:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800367a:	430b      	orrs	r3, r1
 800367c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800367e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	695b      	ldr	r3, [r3, #20]
 8003684:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003688:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800368a:	6999      	ldr	r1, [r3, #24]
 800368c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800368e:	681a      	ldr	r2, [r3, #0]
 8003690:	ea40 0301 	orr.w	r3, r0, r1
 8003694:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003696:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003698:	681a      	ldr	r2, [r3, #0]
 800369a:	4bc5      	ldr	r3, [pc, #788]	; (80039b0 <UART_SetConfig+0x384>)
 800369c:	429a      	cmp	r2, r3
 800369e:	d004      	beq.n	80036aa <UART_SetConfig+0x7e>
 80036a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036a2:	681a      	ldr	r2, [r3, #0]
 80036a4:	4bc3      	ldr	r3, [pc, #780]	; (80039b4 <UART_SetConfig+0x388>)
 80036a6:	429a      	cmp	r2, r3
 80036a8:	d103      	bne.n	80036b2 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80036aa:	f7fe fda7 	bl	80021fc <HAL_RCC_GetPCLK2Freq>
 80036ae:	6778      	str	r0, [r7, #116]	; 0x74
 80036b0:	e002      	b.n	80036b8 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80036b2:	f7fe fd8f 	bl	80021d4 <HAL_RCC_GetPCLK1Freq>
 80036b6:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80036b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036ba:	69db      	ldr	r3, [r3, #28]
 80036bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80036c0:	f040 80b6 	bne.w	8003830 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80036c4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80036c6:	461c      	mov	r4, r3
 80036c8:	f04f 0500 	mov.w	r5, #0
 80036cc:	4622      	mov	r2, r4
 80036ce:	462b      	mov	r3, r5
 80036d0:	1891      	adds	r1, r2, r2
 80036d2:	6439      	str	r1, [r7, #64]	; 0x40
 80036d4:	415b      	adcs	r3, r3
 80036d6:	647b      	str	r3, [r7, #68]	; 0x44
 80036d8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80036dc:	1912      	adds	r2, r2, r4
 80036de:	eb45 0303 	adc.w	r3, r5, r3
 80036e2:	f04f 0000 	mov.w	r0, #0
 80036e6:	f04f 0100 	mov.w	r1, #0
 80036ea:	00d9      	lsls	r1, r3, #3
 80036ec:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80036f0:	00d0      	lsls	r0, r2, #3
 80036f2:	4602      	mov	r2, r0
 80036f4:	460b      	mov	r3, r1
 80036f6:	1911      	adds	r1, r2, r4
 80036f8:	6639      	str	r1, [r7, #96]	; 0x60
 80036fa:	416b      	adcs	r3, r5
 80036fc:	667b      	str	r3, [r7, #100]	; 0x64
 80036fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003700:	685b      	ldr	r3, [r3, #4]
 8003702:	461a      	mov	r2, r3
 8003704:	f04f 0300 	mov.w	r3, #0
 8003708:	1891      	adds	r1, r2, r2
 800370a:	63b9      	str	r1, [r7, #56]	; 0x38
 800370c:	415b      	adcs	r3, r3
 800370e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003710:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003714:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8003718:	f7fc fdb2 	bl	8000280 <__aeabi_uldivmod>
 800371c:	4602      	mov	r2, r0
 800371e:	460b      	mov	r3, r1
 8003720:	4ba5      	ldr	r3, [pc, #660]	; (80039b8 <UART_SetConfig+0x38c>)
 8003722:	fba3 2302 	umull	r2, r3, r3, r2
 8003726:	095b      	lsrs	r3, r3, #5
 8003728:	011e      	lsls	r6, r3, #4
 800372a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800372c:	461c      	mov	r4, r3
 800372e:	f04f 0500 	mov.w	r5, #0
 8003732:	4622      	mov	r2, r4
 8003734:	462b      	mov	r3, r5
 8003736:	1891      	adds	r1, r2, r2
 8003738:	6339      	str	r1, [r7, #48]	; 0x30
 800373a:	415b      	adcs	r3, r3
 800373c:	637b      	str	r3, [r7, #52]	; 0x34
 800373e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003742:	1912      	adds	r2, r2, r4
 8003744:	eb45 0303 	adc.w	r3, r5, r3
 8003748:	f04f 0000 	mov.w	r0, #0
 800374c:	f04f 0100 	mov.w	r1, #0
 8003750:	00d9      	lsls	r1, r3, #3
 8003752:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003756:	00d0      	lsls	r0, r2, #3
 8003758:	4602      	mov	r2, r0
 800375a:	460b      	mov	r3, r1
 800375c:	1911      	adds	r1, r2, r4
 800375e:	65b9      	str	r1, [r7, #88]	; 0x58
 8003760:	416b      	adcs	r3, r5
 8003762:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003764:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003766:	685b      	ldr	r3, [r3, #4]
 8003768:	461a      	mov	r2, r3
 800376a:	f04f 0300 	mov.w	r3, #0
 800376e:	1891      	adds	r1, r2, r2
 8003770:	62b9      	str	r1, [r7, #40]	; 0x28
 8003772:	415b      	adcs	r3, r3
 8003774:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003776:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800377a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800377e:	f7fc fd7f 	bl	8000280 <__aeabi_uldivmod>
 8003782:	4602      	mov	r2, r0
 8003784:	460b      	mov	r3, r1
 8003786:	4b8c      	ldr	r3, [pc, #560]	; (80039b8 <UART_SetConfig+0x38c>)
 8003788:	fba3 1302 	umull	r1, r3, r3, r2
 800378c:	095b      	lsrs	r3, r3, #5
 800378e:	2164      	movs	r1, #100	; 0x64
 8003790:	fb01 f303 	mul.w	r3, r1, r3
 8003794:	1ad3      	subs	r3, r2, r3
 8003796:	00db      	lsls	r3, r3, #3
 8003798:	3332      	adds	r3, #50	; 0x32
 800379a:	4a87      	ldr	r2, [pc, #540]	; (80039b8 <UART_SetConfig+0x38c>)
 800379c:	fba2 2303 	umull	r2, r3, r2, r3
 80037a0:	095b      	lsrs	r3, r3, #5
 80037a2:	005b      	lsls	r3, r3, #1
 80037a4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80037a8:	441e      	add	r6, r3
 80037aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80037ac:	4618      	mov	r0, r3
 80037ae:	f04f 0100 	mov.w	r1, #0
 80037b2:	4602      	mov	r2, r0
 80037b4:	460b      	mov	r3, r1
 80037b6:	1894      	adds	r4, r2, r2
 80037b8:	623c      	str	r4, [r7, #32]
 80037ba:	415b      	adcs	r3, r3
 80037bc:	627b      	str	r3, [r7, #36]	; 0x24
 80037be:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80037c2:	1812      	adds	r2, r2, r0
 80037c4:	eb41 0303 	adc.w	r3, r1, r3
 80037c8:	f04f 0400 	mov.w	r4, #0
 80037cc:	f04f 0500 	mov.w	r5, #0
 80037d0:	00dd      	lsls	r5, r3, #3
 80037d2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80037d6:	00d4      	lsls	r4, r2, #3
 80037d8:	4622      	mov	r2, r4
 80037da:	462b      	mov	r3, r5
 80037dc:	1814      	adds	r4, r2, r0
 80037de:	653c      	str	r4, [r7, #80]	; 0x50
 80037e0:	414b      	adcs	r3, r1
 80037e2:	657b      	str	r3, [r7, #84]	; 0x54
 80037e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037e6:	685b      	ldr	r3, [r3, #4]
 80037e8:	461a      	mov	r2, r3
 80037ea:	f04f 0300 	mov.w	r3, #0
 80037ee:	1891      	adds	r1, r2, r2
 80037f0:	61b9      	str	r1, [r7, #24]
 80037f2:	415b      	adcs	r3, r3
 80037f4:	61fb      	str	r3, [r7, #28]
 80037f6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80037fa:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80037fe:	f7fc fd3f 	bl	8000280 <__aeabi_uldivmod>
 8003802:	4602      	mov	r2, r0
 8003804:	460b      	mov	r3, r1
 8003806:	4b6c      	ldr	r3, [pc, #432]	; (80039b8 <UART_SetConfig+0x38c>)
 8003808:	fba3 1302 	umull	r1, r3, r3, r2
 800380c:	095b      	lsrs	r3, r3, #5
 800380e:	2164      	movs	r1, #100	; 0x64
 8003810:	fb01 f303 	mul.w	r3, r1, r3
 8003814:	1ad3      	subs	r3, r2, r3
 8003816:	00db      	lsls	r3, r3, #3
 8003818:	3332      	adds	r3, #50	; 0x32
 800381a:	4a67      	ldr	r2, [pc, #412]	; (80039b8 <UART_SetConfig+0x38c>)
 800381c:	fba2 2303 	umull	r2, r3, r2, r3
 8003820:	095b      	lsrs	r3, r3, #5
 8003822:	f003 0207 	and.w	r2, r3, #7
 8003826:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	4432      	add	r2, r6
 800382c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800382e:	e0b9      	b.n	80039a4 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003830:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003832:	461c      	mov	r4, r3
 8003834:	f04f 0500 	mov.w	r5, #0
 8003838:	4622      	mov	r2, r4
 800383a:	462b      	mov	r3, r5
 800383c:	1891      	adds	r1, r2, r2
 800383e:	6139      	str	r1, [r7, #16]
 8003840:	415b      	adcs	r3, r3
 8003842:	617b      	str	r3, [r7, #20]
 8003844:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003848:	1912      	adds	r2, r2, r4
 800384a:	eb45 0303 	adc.w	r3, r5, r3
 800384e:	f04f 0000 	mov.w	r0, #0
 8003852:	f04f 0100 	mov.w	r1, #0
 8003856:	00d9      	lsls	r1, r3, #3
 8003858:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800385c:	00d0      	lsls	r0, r2, #3
 800385e:	4602      	mov	r2, r0
 8003860:	460b      	mov	r3, r1
 8003862:	eb12 0804 	adds.w	r8, r2, r4
 8003866:	eb43 0905 	adc.w	r9, r3, r5
 800386a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800386c:	685b      	ldr	r3, [r3, #4]
 800386e:	4618      	mov	r0, r3
 8003870:	f04f 0100 	mov.w	r1, #0
 8003874:	f04f 0200 	mov.w	r2, #0
 8003878:	f04f 0300 	mov.w	r3, #0
 800387c:	008b      	lsls	r3, r1, #2
 800387e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003882:	0082      	lsls	r2, r0, #2
 8003884:	4640      	mov	r0, r8
 8003886:	4649      	mov	r1, r9
 8003888:	f7fc fcfa 	bl	8000280 <__aeabi_uldivmod>
 800388c:	4602      	mov	r2, r0
 800388e:	460b      	mov	r3, r1
 8003890:	4b49      	ldr	r3, [pc, #292]	; (80039b8 <UART_SetConfig+0x38c>)
 8003892:	fba3 2302 	umull	r2, r3, r3, r2
 8003896:	095b      	lsrs	r3, r3, #5
 8003898:	011e      	lsls	r6, r3, #4
 800389a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800389c:	4618      	mov	r0, r3
 800389e:	f04f 0100 	mov.w	r1, #0
 80038a2:	4602      	mov	r2, r0
 80038a4:	460b      	mov	r3, r1
 80038a6:	1894      	adds	r4, r2, r2
 80038a8:	60bc      	str	r4, [r7, #8]
 80038aa:	415b      	adcs	r3, r3
 80038ac:	60fb      	str	r3, [r7, #12]
 80038ae:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80038b2:	1812      	adds	r2, r2, r0
 80038b4:	eb41 0303 	adc.w	r3, r1, r3
 80038b8:	f04f 0400 	mov.w	r4, #0
 80038bc:	f04f 0500 	mov.w	r5, #0
 80038c0:	00dd      	lsls	r5, r3, #3
 80038c2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80038c6:	00d4      	lsls	r4, r2, #3
 80038c8:	4622      	mov	r2, r4
 80038ca:	462b      	mov	r3, r5
 80038cc:	1814      	adds	r4, r2, r0
 80038ce:	64bc      	str	r4, [r7, #72]	; 0x48
 80038d0:	414b      	adcs	r3, r1
 80038d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80038d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038d6:	685b      	ldr	r3, [r3, #4]
 80038d8:	4618      	mov	r0, r3
 80038da:	f04f 0100 	mov.w	r1, #0
 80038de:	f04f 0200 	mov.w	r2, #0
 80038e2:	f04f 0300 	mov.w	r3, #0
 80038e6:	008b      	lsls	r3, r1, #2
 80038e8:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80038ec:	0082      	lsls	r2, r0, #2
 80038ee:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80038f2:	f7fc fcc5 	bl	8000280 <__aeabi_uldivmod>
 80038f6:	4602      	mov	r2, r0
 80038f8:	460b      	mov	r3, r1
 80038fa:	4b2f      	ldr	r3, [pc, #188]	; (80039b8 <UART_SetConfig+0x38c>)
 80038fc:	fba3 1302 	umull	r1, r3, r3, r2
 8003900:	095b      	lsrs	r3, r3, #5
 8003902:	2164      	movs	r1, #100	; 0x64
 8003904:	fb01 f303 	mul.w	r3, r1, r3
 8003908:	1ad3      	subs	r3, r2, r3
 800390a:	011b      	lsls	r3, r3, #4
 800390c:	3332      	adds	r3, #50	; 0x32
 800390e:	4a2a      	ldr	r2, [pc, #168]	; (80039b8 <UART_SetConfig+0x38c>)
 8003910:	fba2 2303 	umull	r2, r3, r2, r3
 8003914:	095b      	lsrs	r3, r3, #5
 8003916:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800391a:	441e      	add	r6, r3
 800391c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800391e:	4618      	mov	r0, r3
 8003920:	f04f 0100 	mov.w	r1, #0
 8003924:	4602      	mov	r2, r0
 8003926:	460b      	mov	r3, r1
 8003928:	1894      	adds	r4, r2, r2
 800392a:	603c      	str	r4, [r7, #0]
 800392c:	415b      	adcs	r3, r3
 800392e:	607b      	str	r3, [r7, #4]
 8003930:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003934:	1812      	adds	r2, r2, r0
 8003936:	eb41 0303 	adc.w	r3, r1, r3
 800393a:	f04f 0400 	mov.w	r4, #0
 800393e:	f04f 0500 	mov.w	r5, #0
 8003942:	00dd      	lsls	r5, r3, #3
 8003944:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003948:	00d4      	lsls	r4, r2, #3
 800394a:	4622      	mov	r2, r4
 800394c:	462b      	mov	r3, r5
 800394e:	eb12 0a00 	adds.w	sl, r2, r0
 8003952:	eb43 0b01 	adc.w	fp, r3, r1
 8003956:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003958:	685b      	ldr	r3, [r3, #4]
 800395a:	4618      	mov	r0, r3
 800395c:	f04f 0100 	mov.w	r1, #0
 8003960:	f04f 0200 	mov.w	r2, #0
 8003964:	f04f 0300 	mov.w	r3, #0
 8003968:	008b      	lsls	r3, r1, #2
 800396a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800396e:	0082      	lsls	r2, r0, #2
 8003970:	4650      	mov	r0, sl
 8003972:	4659      	mov	r1, fp
 8003974:	f7fc fc84 	bl	8000280 <__aeabi_uldivmod>
 8003978:	4602      	mov	r2, r0
 800397a:	460b      	mov	r3, r1
 800397c:	4b0e      	ldr	r3, [pc, #56]	; (80039b8 <UART_SetConfig+0x38c>)
 800397e:	fba3 1302 	umull	r1, r3, r3, r2
 8003982:	095b      	lsrs	r3, r3, #5
 8003984:	2164      	movs	r1, #100	; 0x64
 8003986:	fb01 f303 	mul.w	r3, r1, r3
 800398a:	1ad3      	subs	r3, r2, r3
 800398c:	011b      	lsls	r3, r3, #4
 800398e:	3332      	adds	r3, #50	; 0x32
 8003990:	4a09      	ldr	r2, [pc, #36]	; (80039b8 <UART_SetConfig+0x38c>)
 8003992:	fba2 2303 	umull	r2, r3, r2, r3
 8003996:	095b      	lsrs	r3, r3, #5
 8003998:	f003 020f 	and.w	r2, r3, #15
 800399c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4432      	add	r2, r6
 80039a2:	609a      	str	r2, [r3, #8]
}
 80039a4:	bf00      	nop
 80039a6:	377c      	adds	r7, #124	; 0x7c
 80039a8:	46bd      	mov	sp, r7
 80039aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80039ae:	bf00      	nop
 80039b0:	40011000 	.word	0x40011000
 80039b4:	40011400 	.word	0x40011400
 80039b8:	51eb851f 	.word	0x51eb851f

080039bc <__errno>:
 80039bc:	4b01      	ldr	r3, [pc, #4]	; (80039c4 <__errno+0x8>)
 80039be:	6818      	ldr	r0, [r3, #0]
 80039c0:	4770      	bx	lr
 80039c2:	bf00      	nop
 80039c4:	2000000c 	.word	0x2000000c

080039c8 <__libc_init_array>:
 80039c8:	b570      	push	{r4, r5, r6, lr}
 80039ca:	4d0d      	ldr	r5, [pc, #52]	; (8003a00 <__libc_init_array+0x38>)
 80039cc:	4c0d      	ldr	r4, [pc, #52]	; (8003a04 <__libc_init_array+0x3c>)
 80039ce:	1b64      	subs	r4, r4, r5
 80039d0:	10a4      	asrs	r4, r4, #2
 80039d2:	2600      	movs	r6, #0
 80039d4:	42a6      	cmp	r6, r4
 80039d6:	d109      	bne.n	80039ec <__libc_init_array+0x24>
 80039d8:	4d0b      	ldr	r5, [pc, #44]	; (8003a08 <__libc_init_array+0x40>)
 80039da:	4c0c      	ldr	r4, [pc, #48]	; (8003a0c <__libc_init_array+0x44>)
 80039dc:	f000 fc4e 	bl	800427c <_init>
 80039e0:	1b64      	subs	r4, r4, r5
 80039e2:	10a4      	asrs	r4, r4, #2
 80039e4:	2600      	movs	r6, #0
 80039e6:	42a6      	cmp	r6, r4
 80039e8:	d105      	bne.n	80039f6 <__libc_init_array+0x2e>
 80039ea:	bd70      	pop	{r4, r5, r6, pc}
 80039ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80039f0:	4798      	blx	r3
 80039f2:	3601      	adds	r6, #1
 80039f4:	e7ee      	b.n	80039d4 <__libc_init_array+0xc>
 80039f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80039fa:	4798      	blx	r3
 80039fc:	3601      	adds	r6, #1
 80039fe:	e7f2      	b.n	80039e6 <__libc_init_array+0x1e>
 8003a00:	0800450c 	.word	0x0800450c
 8003a04:	0800450c 	.word	0x0800450c
 8003a08:	0800450c 	.word	0x0800450c
 8003a0c:	08004510 	.word	0x08004510

08003a10 <memcpy>:
 8003a10:	440a      	add	r2, r1
 8003a12:	4291      	cmp	r1, r2
 8003a14:	f100 33ff 	add.w	r3, r0, #4294967295
 8003a18:	d100      	bne.n	8003a1c <memcpy+0xc>
 8003a1a:	4770      	bx	lr
 8003a1c:	b510      	push	{r4, lr}
 8003a1e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003a22:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003a26:	4291      	cmp	r1, r2
 8003a28:	d1f9      	bne.n	8003a1e <memcpy+0xe>
 8003a2a:	bd10      	pop	{r4, pc}

08003a2c <memset>:
 8003a2c:	4402      	add	r2, r0
 8003a2e:	4603      	mov	r3, r0
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d100      	bne.n	8003a36 <memset+0xa>
 8003a34:	4770      	bx	lr
 8003a36:	f803 1b01 	strb.w	r1, [r3], #1
 8003a3a:	e7f9      	b.n	8003a30 <memset+0x4>

08003a3c <siprintf>:
 8003a3c:	b40e      	push	{r1, r2, r3}
 8003a3e:	b500      	push	{lr}
 8003a40:	b09c      	sub	sp, #112	; 0x70
 8003a42:	ab1d      	add	r3, sp, #116	; 0x74
 8003a44:	9002      	str	r0, [sp, #8]
 8003a46:	9006      	str	r0, [sp, #24]
 8003a48:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003a4c:	4809      	ldr	r0, [pc, #36]	; (8003a74 <siprintf+0x38>)
 8003a4e:	9107      	str	r1, [sp, #28]
 8003a50:	9104      	str	r1, [sp, #16]
 8003a52:	4909      	ldr	r1, [pc, #36]	; (8003a78 <siprintf+0x3c>)
 8003a54:	f853 2b04 	ldr.w	r2, [r3], #4
 8003a58:	9105      	str	r1, [sp, #20]
 8003a5a:	6800      	ldr	r0, [r0, #0]
 8003a5c:	9301      	str	r3, [sp, #4]
 8003a5e:	a902      	add	r1, sp, #8
 8003a60:	f000 f868 	bl	8003b34 <_svfiprintf_r>
 8003a64:	9b02      	ldr	r3, [sp, #8]
 8003a66:	2200      	movs	r2, #0
 8003a68:	701a      	strb	r2, [r3, #0]
 8003a6a:	b01c      	add	sp, #112	; 0x70
 8003a6c:	f85d eb04 	ldr.w	lr, [sp], #4
 8003a70:	b003      	add	sp, #12
 8003a72:	4770      	bx	lr
 8003a74:	2000000c 	.word	0x2000000c
 8003a78:	ffff0208 	.word	0xffff0208

08003a7c <__ssputs_r>:
 8003a7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003a80:	688e      	ldr	r6, [r1, #8]
 8003a82:	429e      	cmp	r6, r3
 8003a84:	4682      	mov	sl, r0
 8003a86:	460c      	mov	r4, r1
 8003a88:	4690      	mov	r8, r2
 8003a8a:	461f      	mov	r7, r3
 8003a8c:	d838      	bhi.n	8003b00 <__ssputs_r+0x84>
 8003a8e:	898a      	ldrh	r2, [r1, #12]
 8003a90:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003a94:	d032      	beq.n	8003afc <__ssputs_r+0x80>
 8003a96:	6825      	ldr	r5, [r4, #0]
 8003a98:	6909      	ldr	r1, [r1, #16]
 8003a9a:	eba5 0901 	sub.w	r9, r5, r1
 8003a9e:	6965      	ldr	r5, [r4, #20]
 8003aa0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003aa4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003aa8:	3301      	adds	r3, #1
 8003aaa:	444b      	add	r3, r9
 8003aac:	106d      	asrs	r5, r5, #1
 8003aae:	429d      	cmp	r5, r3
 8003ab0:	bf38      	it	cc
 8003ab2:	461d      	movcc	r5, r3
 8003ab4:	0553      	lsls	r3, r2, #21
 8003ab6:	d531      	bpl.n	8003b1c <__ssputs_r+0xa0>
 8003ab8:	4629      	mov	r1, r5
 8003aba:	f000 fb39 	bl	8004130 <_malloc_r>
 8003abe:	4606      	mov	r6, r0
 8003ac0:	b950      	cbnz	r0, 8003ad8 <__ssputs_r+0x5c>
 8003ac2:	230c      	movs	r3, #12
 8003ac4:	f8ca 3000 	str.w	r3, [sl]
 8003ac8:	89a3      	ldrh	r3, [r4, #12]
 8003aca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003ace:	81a3      	strh	r3, [r4, #12]
 8003ad0:	f04f 30ff 	mov.w	r0, #4294967295
 8003ad4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ad8:	6921      	ldr	r1, [r4, #16]
 8003ada:	464a      	mov	r2, r9
 8003adc:	f7ff ff98 	bl	8003a10 <memcpy>
 8003ae0:	89a3      	ldrh	r3, [r4, #12]
 8003ae2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003ae6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003aea:	81a3      	strh	r3, [r4, #12]
 8003aec:	6126      	str	r6, [r4, #16]
 8003aee:	6165      	str	r5, [r4, #20]
 8003af0:	444e      	add	r6, r9
 8003af2:	eba5 0509 	sub.w	r5, r5, r9
 8003af6:	6026      	str	r6, [r4, #0]
 8003af8:	60a5      	str	r5, [r4, #8]
 8003afa:	463e      	mov	r6, r7
 8003afc:	42be      	cmp	r6, r7
 8003afe:	d900      	bls.n	8003b02 <__ssputs_r+0x86>
 8003b00:	463e      	mov	r6, r7
 8003b02:	4632      	mov	r2, r6
 8003b04:	6820      	ldr	r0, [r4, #0]
 8003b06:	4641      	mov	r1, r8
 8003b08:	f000 faa8 	bl	800405c <memmove>
 8003b0c:	68a3      	ldr	r3, [r4, #8]
 8003b0e:	6822      	ldr	r2, [r4, #0]
 8003b10:	1b9b      	subs	r3, r3, r6
 8003b12:	4432      	add	r2, r6
 8003b14:	60a3      	str	r3, [r4, #8]
 8003b16:	6022      	str	r2, [r4, #0]
 8003b18:	2000      	movs	r0, #0
 8003b1a:	e7db      	b.n	8003ad4 <__ssputs_r+0x58>
 8003b1c:	462a      	mov	r2, r5
 8003b1e:	f000 fb61 	bl	80041e4 <_realloc_r>
 8003b22:	4606      	mov	r6, r0
 8003b24:	2800      	cmp	r0, #0
 8003b26:	d1e1      	bne.n	8003aec <__ssputs_r+0x70>
 8003b28:	6921      	ldr	r1, [r4, #16]
 8003b2a:	4650      	mov	r0, sl
 8003b2c:	f000 fab0 	bl	8004090 <_free_r>
 8003b30:	e7c7      	b.n	8003ac2 <__ssputs_r+0x46>
	...

08003b34 <_svfiprintf_r>:
 8003b34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b38:	4698      	mov	r8, r3
 8003b3a:	898b      	ldrh	r3, [r1, #12]
 8003b3c:	061b      	lsls	r3, r3, #24
 8003b3e:	b09d      	sub	sp, #116	; 0x74
 8003b40:	4607      	mov	r7, r0
 8003b42:	460d      	mov	r5, r1
 8003b44:	4614      	mov	r4, r2
 8003b46:	d50e      	bpl.n	8003b66 <_svfiprintf_r+0x32>
 8003b48:	690b      	ldr	r3, [r1, #16]
 8003b4a:	b963      	cbnz	r3, 8003b66 <_svfiprintf_r+0x32>
 8003b4c:	2140      	movs	r1, #64	; 0x40
 8003b4e:	f000 faef 	bl	8004130 <_malloc_r>
 8003b52:	6028      	str	r0, [r5, #0]
 8003b54:	6128      	str	r0, [r5, #16]
 8003b56:	b920      	cbnz	r0, 8003b62 <_svfiprintf_r+0x2e>
 8003b58:	230c      	movs	r3, #12
 8003b5a:	603b      	str	r3, [r7, #0]
 8003b5c:	f04f 30ff 	mov.w	r0, #4294967295
 8003b60:	e0d1      	b.n	8003d06 <_svfiprintf_r+0x1d2>
 8003b62:	2340      	movs	r3, #64	; 0x40
 8003b64:	616b      	str	r3, [r5, #20]
 8003b66:	2300      	movs	r3, #0
 8003b68:	9309      	str	r3, [sp, #36]	; 0x24
 8003b6a:	2320      	movs	r3, #32
 8003b6c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003b70:	f8cd 800c 	str.w	r8, [sp, #12]
 8003b74:	2330      	movs	r3, #48	; 0x30
 8003b76:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8003d20 <_svfiprintf_r+0x1ec>
 8003b7a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003b7e:	f04f 0901 	mov.w	r9, #1
 8003b82:	4623      	mov	r3, r4
 8003b84:	469a      	mov	sl, r3
 8003b86:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003b8a:	b10a      	cbz	r2, 8003b90 <_svfiprintf_r+0x5c>
 8003b8c:	2a25      	cmp	r2, #37	; 0x25
 8003b8e:	d1f9      	bne.n	8003b84 <_svfiprintf_r+0x50>
 8003b90:	ebba 0b04 	subs.w	fp, sl, r4
 8003b94:	d00b      	beq.n	8003bae <_svfiprintf_r+0x7a>
 8003b96:	465b      	mov	r3, fp
 8003b98:	4622      	mov	r2, r4
 8003b9a:	4629      	mov	r1, r5
 8003b9c:	4638      	mov	r0, r7
 8003b9e:	f7ff ff6d 	bl	8003a7c <__ssputs_r>
 8003ba2:	3001      	adds	r0, #1
 8003ba4:	f000 80aa 	beq.w	8003cfc <_svfiprintf_r+0x1c8>
 8003ba8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003baa:	445a      	add	r2, fp
 8003bac:	9209      	str	r2, [sp, #36]	; 0x24
 8003bae:	f89a 3000 	ldrb.w	r3, [sl]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	f000 80a2 	beq.w	8003cfc <_svfiprintf_r+0x1c8>
 8003bb8:	2300      	movs	r3, #0
 8003bba:	f04f 32ff 	mov.w	r2, #4294967295
 8003bbe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003bc2:	f10a 0a01 	add.w	sl, sl, #1
 8003bc6:	9304      	str	r3, [sp, #16]
 8003bc8:	9307      	str	r3, [sp, #28]
 8003bca:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003bce:	931a      	str	r3, [sp, #104]	; 0x68
 8003bd0:	4654      	mov	r4, sl
 8003bd2:	2205      	movs	r2, #5
 8003bd4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003bd8:	4851      	ldr	r0, [pc, #324]	; (8003d20 <_svfiprintf_r+0x1ec>)
 8003bda:	f7fc fb01 	bl	80001e0 <memchr>
 8003bde:	9a04      	ldr	r2, [sp, #16]
 8003be0:	b9d8      	cbnz	r0, 8003c1a <_svfiprintf_r+0xe6>
 8003be2:	06d0      	lsls	r0, r2, #27
 8003be4:	bf44      	itt	mi
 8003be6:	2320      	movmi	r3, #32
 8003be8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003bec:	0711      	lsls	r1, r2, #28
 8003bee:	bf44      	itt	mi
 8003bf0:	232b      	movmi	r3, #43	; 0x2b
 8003bf2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003bf6:	f89a 3000 	ldrb.w	r3, [sl]
 8003bfa:	2b2a      	cmp	r3, #42	; 0x2a
 8003bfc:	d015      	beq.n	8003c2a <_svfiprintf_r+0xf6>
 8003bfe:	9a07      	ldr	r2, [sp, #28]
 8003c00:	4654      	mov	r4, sl
 8003c02:	2000      	movs	r0, #0
 8003c04:	f04f 0c0a 	mov.w	ip, #10
 8003c08:	4621      	mov	r1, r4
 8003c0a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003c0e:	3b30      	subs	r3, #48	; 0x30
 8003c10:	2b09      	cmp	r3, #9
 8003c12:	d94e      	bls.n	8003cb2 <_svfiprintf_r+0x17e>
 8003c14:	b1b0      	cbz	r0, 8003c44 <_svfiprintf_r+0x110>
 8003c16:	9207      	str	r2, [sp, #28]
 8003c18:	e014      	b.n	8003c44 <_svfiprintf_r+0x110>
 8003c1a:	eba0 0308 	sub.w	r3, r0, r8
 8003c1e:	fa09 f303 	lsl.w	r3, r9, r3
 8003c22:	4313      	orrs	r3, r2
 8003c24:	9304      	str	r3, [sp, #16]
 8003c26:	46a2      	mov	sl, r4
 8003c28:	e7d2      	b.n	8003bd0 <_svfiprintf_r+0x9c>
 8003c2a:	9b03      	ldr	r3, [sp, #12]
 8003c2c:	1d19      	adds	r1, r3, #4
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	9103      	str	r1, [sp, #12]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	bfbb      	ittet	lt
 8003c36:	425b      	neglt	r3, r3
 8003c38:	f042 0202 	orrlt.w	r2, r2, #2
 8003c3c:	9307      	strge	r3, [sp, #28]
 8003c3e:	9307      	strlt	r3, [sp, #28]
 8003c40:	bfb8      	it	lt
 8003c42:	9204      	strlt	r2, [sp, #16]
 8003c44:	7823      	ldrb	r3, [r4, #0]
 8003c46:	2b2e      	cmp	r3, #46	; 0x2e
 8003c48:	d10c      	bne.n	8003c64 <_svfiprintf_r+0x130>
 8003c4a:	7863      	ldrb	r3, [r4, #1]
 8003c4c:	2b2a      	cmp	r3, #42	; 0x2a
 8003c4e:	d135      	bne.n	8003cbc <_svfiprintf_r+0x188>
 8003c50:	9b03      	ldr	r3, [sp, #12]
 8003c52:	1d1a      	adds	r2, r3, #4
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	9203      	str	r2, [sp, #12]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	bfb8      	it	lt
 8003c5c:	f04f 33ff 	movlt.w	r3, #4294967295
 8003c60:	3402      	adds	r4, #2
 8003c62:	9305      	str	r3, [sp, #20]
 8003c64:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003d30 <_svfiprintf_r+0x1fc>
 8003c68:	7821      	ldrb	r1, [r4, #0]
 8003c6a:	2203      	movs	r2, #3
 8003c6c:	4650      	mov	r0, sl
 8003c6e:	f7fc fab7 	bl	80001e0 <memchr>
 8003c72:	b140      	cbz	r0, 8003c86 <_svfiprintf_r+0x152>
 8003c74:	2340      	movs	r3, #64	; 0x40
 8003c76:	eba0 000a 	sub.w	r0, r0, sl
 8003c7a:	fa03 f000 	lsl.w	r0, r3, r0
 8003c7e:	9b04      	ldr	r3, [sp, #16]
 8003c80:	4303      	orrs	r3, r0
 8003c82:	3401      	adds	r4, #1
 8003c84:	9304      	str	r3, [sp, #16]
 8003c86:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003c8a:	4826      	ldr	r0, [pc, #152]	; (8003d24 <_svfiprintf_r+0x1f0>)
 8003c8c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003c90:	2206      	movs	r2, #6
 8003c92:	f7fc faa5 	bl	80001e0 <memchr>
 8003c96:	2800      	cmp	r0, #0
 8003c98:	d038      	beq.n	8003d0c <_svfiprintf_r+0x1d8>
 8003c9a:	4b23      	ldr	r3, [pc, #140]	; (8003d28 <_svfiprintf_r+0x1f4>)
 8003c9c:	bb1b      	cbnz	r3, 8003ce6 <_svfiprintf_r+0x1b2>
 8003c9e:	9b03      	ldr	r3, [sp, #12]
 8003ca0:	3307      	adds	r3, #7
 8003ca2:	f023 0307 	bic.w	r3, r3, #7
 8003ca6:	3308      	adds	r3, #8
 8003ca8:	9303      	str	r3, [sp, #12]
 8003caa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003cac:	4433      	add	r3, r6
 8003cae:	9309      	str	r3, [sp, #36]	; 0x24
 8003cb0:	e767      	b.n	8003b82 <_svfiprintf_r+0x4e>
 8003cb2:	fb0c 3202 	mla	r2, ip, r2, r3
 8003cb6:	460c      	mov	r4, r1
 8003cb8:	2001      	movs	r0, #1
 8003cba:	e7a5      	b.n	8003c08 <_svfiprintf_r+0xd4>
 8003cbc:	2300      	movs	r3, #0
 8003cbe:	3401      	adds	r4, #1
 8003cc0:	9305      	str	r3, [sp, #20]
 8003cc2:	4619      	mov	r1, r3
 8003cc4:	f04f 0c0a 	mov.w	ip, #10
 8003cc8:	4620      	mov	r0, r4
 8003cca:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003cce:	3a30      	subs	r2, #48	; 0x30
 8003cd0:	2a09      	cmp	r2, #9
 8003cd2:	d903      	bls.n	8003cdc <_svfiprintf_r+0x1a8>
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d0c5      	beq.n	8003c64 <_svfiprintf_r+0x130>
 8003cd8:	9105      	str	r1, [sp, #20]
 8003cda:	e7c3      	b.n	8003c64 <_svfiprintf_r+0x130>
 8003cdc:	fb0c 2101 	mla	r1, ip, r1, r2
 8003ce0:	4604      	mov	r4, r0
 8003ce2:	2301      	movs	r3, #1
 8003ce4:	e7f0      	b.n	8003cc8 <_svfiprintf_r+0x194>
 8003ce6:	ab03      	add	r3, sp, #12
 8003ce8:	9300      	str	r3, [sp, #0]
 8003cea:	462a      	mov	r2, r5
 8003cec:	4b0f      	ldr	r3, [pc, #60]	; (8003d2c <_svfiprintf_r+0x1f8>)
 8003cee:	a904      	add	r1, sp, #16
 8003cf0:	4638      	mov	r0, r7
 8003cf2:	f3af 8000 	nop.w
 8003cf6:	1c42      	adds	r2, r0, #1
 8003cf8:	4606      	mov	r6, r0
 8003cfa:	d1d6      	bne.n	8003caa <_svfiprintf_r+0x176>
 8003cfc:	89ab      	ldrh	r3, [r5, #12]
 8003cfe:	065b      	lsls	r3, r3, #25
 8003d00:	f53f af2c 	bmi.w	8003b5c <_svfiprintf_r+0x28>
 8003d04:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003d06:	b01d      	add	sp, #116	; 0x74
 8003d08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d0c:	ab03      	add	r3, sp, #12
 8003d0e:	9300      	str	r3, [sp, #0]
 8003d10:	462a      	mov	r2, r5
 8003d12:	4b06      	ldr	r3, [pc, #24]	; (8003d2c <_svfiprintf_r+0x1f8>)
 8003d14:	a904      	add	r1, sp, #16
 8003d16:	4638      	mov	r0, r7
 8003d18:	f000 f87a 	bl	8003e10 <_printf_i>
 8003d1c:	e7eb      	b.n	8003cf6 <_svfiprintf_r+0x1c2>
 8003d1e:	bf00      	nop
 8003d20:	080044d0 	.word	0x080044d0
 8003d24:	080044da 	.word	0x080044da
 8003d28:	00000000 	.word	0x00000000
 8003d2c:	08003a7d 	.word	0x08003a7d
 8003d30:	080044d6 	.word	0x080044d6

08003d34 <_printf_common>:
 8003d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003d38:	4616      	mov	r6, r2
 8003d3a:	4699      	mov	r9, r3
 8003d3c:	688a      	ldr	r2, [r1, #8]
 8003d3e:	690b      	ldr	r3, [r1, #16]
 8003d40:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003d44:	4293      	cmp	r3, r2
 8003d46:	bfb8      	it	lt
 8003d48:	4613      	movlt	r3, r2
 8003d4a:	6033      	str	r3, [r6, #0]
 8003d4c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003d50:	4607      	mov	r7, r0
 8003d52:	460c      	mov	r4, r1
 8003d54:	b10a      	cbz	r2, 8003d5a <_printf_common+0x26>
 8003d56:	3301      	adds	r3, #1
 8003d58:	6033      	str	r3, [r6, #0]
 8003d5a:	6823      	ldr	r3, [r4, #0]
 8003d5c:	0699      	lsls	r1, r3, #26
 8003d5e:	bf42      	ittt	mi
 8003d60:	6833      	ldrmi	r3, [r6, #0]
 8003d62:	3302      	addmi	r3, #2
 8003d64:	6033      	strmi	r3, [r6, #0]
 8003d66:	6825      	ldr	r5, [r4, #0]
 8003d68:	f015 0506 	ands.w	r5, r5, #6
 8003d6c:	d106      	bne.n	8003d7c <_printf_common+0x48>
 8003d6e:	f104 0a19 	add.w	sl, r4, #25
 8003d72:	68e3      	ldr	r3, [r4, #12]
 8003d74:	6832      	ldr	r2, [r6, #0]
 8003d76:	1a9b      	subs	r3, r3, r2
 8003d78:	42ab      	cmp	r3, r5
 8003d7a:	dc26      	bgt.n	8003dca <_printf_common+0x96>
 8003d7c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003d80:	1e13      	subs	r3, r2, #0
 8003d82:	6822      	ldr	r2, [r4, #0]
 8003d84:	bf18      	it	ne
 8003d86:	2301      	movne	r3, #1
 8003d88:	0692      	lsls	r2, r2, #26
 8003d8a:	d42b      	bmi.n	8003de4 <_printf_common+0xb0>
 8003d8c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003d90:	4649      	mov	r1, r9
 8003d92:	4638      	mov	r0, r7
 8003d94:	47c0      	blx	r8
 8003d96:	3001      	adds	r0, #1
 8003d98:	d01e      	beq.n	8003dd8 <_printf_common+0xa4>
 8003d9a:	6823      	ldr	r3, [r4, #0]
 8003d9c:	68e5      	ldr	r5, [r4, #12]
 8003d9e:	6832      	ldr	r2, [r6, #0]
 8003da0:	f003 0306 	and.w	r3, r3, #6
 8003da4:	2b04      	cmp	r3, #4
 8003da6:	bf08      	it	eq
 8003da8:	1aad      	subeq	r5, r5, r2
 8003daa:	68a3      	ldr	r3, [r4, #8]
 8003dac:	6922      	ldr	r2, [r4, #16]
 8003dae:	bf0c      	ite	eq
 8003db0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003db4:	2500      	movne	r5, #0
 8003db6:	4293      	cmp	r3, r2
 8003db8:	bfc4      	itt	gt
 8003dba:	1a9b      	subgt	r3, r3, r2
 8003dbc:	18ed      	addgt	r5, r5, r3
 8003dbe:	2600      	movs	r6, #0
 8003dc0:	341a      	adds	r4, #26
 8003dc2:	42b5      	cmp	r5, r6
 8003dc4:	d11a      	bne.n	8003dfc <_printf_common+0xc8>
 8003dc6:	2000      	movs	r0, #0
 8003dc8:	e008      	b.n	8003ddc <_printf_common+0xa8>
 8003dca:	2301      	movs	r3, #1
 8003dcc:	4652      	mov	r2, sl
 8003dce:	4649      	mov	r1, r9
 8003dd0:	4638      	mov	r0, r7
 8003dd2:	47c0      	blx	r8
 8003dd4:	3001      	adds	r0, #1
 8003dd6:	d103      	bne.n	8003de0 <_printf_common+0xac>
 8003dd8:	f04f 30ff 	mov.w	r0, #4294967295
 8003ddc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003de0:	3501      	adds	r5, #1
 8003de2:	e7c6      	b.n	8003d72 <_printf_common+0x3e>
 8003de4:	18e1      	adds	r1, r4, r3
 8003de6:	1c5a      	adds	r2, r3, #1
 8003de8:	2030      	movs	r0, #48	; 0x30
 8003dea:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003dee:	4422      	add	r2, r4
 8003df0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003df4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003df8:	3302      	adds	r3, #2
 8003dfa:	e7c7      	b.n	8003d8c <_printf_common+0x58>
 8003dfc:	2301      	movs	r3, #1
 8003dfe:	4622      	mov	r2, r4
 8003e00:	4649      	mov	r1, r9
 8003e02:	4638      	mov	r0, r7
 8003e04:	47c0      	blx	r8
 8003e06:	3001      	adds	r0, #1
 8003e08:	d0e6      	beq.n	8003dd8 <_printf_common+0xa4>
 8003e0a:	3601      	adds	r6, #1
 8003e0c:	e7d9      	b.n	8003dc2 <_printf_common+0x8e>
	...

08003e10 <_printf_i>:
 8003e10:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003e14:	460c      	mov	r4, r1
 8003e16:	4691      	mov	r9, r2
 8003e18:	7e27      	ldrb	r7, [r4, #24]
 8003e1a:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003e1c:	2f78      	cmp	r7, #120	; 0x78
 8003e1e:	4680      	mov	r8, r0
 8003e20:	469a      	mov	sl, r3
 8003e22:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003e26:	d807      	bhi.n	8003e38 <_printf_i+0x28>
 8003e28:	2f62      	cmp	r7, #98	; 0x62
 8003e2a:	d80a      	bhi.n	8003e42 <_printf_i+0x32>
 8003e2c:	2f00      	cmp	r7, #0
 8003e2e:	f000 80d8 	beq.w	8003fe2 <_printf_i+0x1d2>
 8003e32:	2f58      	cmp	r7, #88	; 0x58
 8003e34:	f000 80a3 	beq.w	8003f7e <_printf_i+0x16e>
 8003e38:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003e3c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003e40:	e03a      	b.n	8003eb8 <_printf_i+0xa8>
 8003e42:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003e46:	2b15      	cmp	r3, #21
 8003e48:	d8f6      	bhi.n	8003e38 <_printf_i+0x28>
 8003e4a:	a001      	add	r0, pc, #4	; (adr r0, 8003e50 <_printf_i+0x40>)
 8003e4c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8003e50:	08003ea9 	.word	0x08003ea9
 8003e54:	08003ebd 	.word	0x08003ebd
 8003e58:	08003e39 	.word	0x08003e39
 8003e5c:	08003e39 	.word	0x08003e39
 8003e60:	08003e39 	.word	0x08003e39
 8003e64:	08003e39 	.word	0x08003e39
 8003e68:	08003ebd 	.word	0x08003ebd
 8003e6c:	08003e39 	.word	0x08003e39
 8003e70:	08003e39 	.word	0x08003e39
 8003e74:	08003e39 	.word	0x08003e39
 8003e78:	08003e39 	.word	0x08003e39
 8003e7c:	08003fc9 	.word	0x08003fc9
 8003e80:	08003eed 	.word	0x08003eed
 8003e84:	08003fab 	.word	0x08003fab
 8003e88:	08003e39 	.word	0x08003e39
 8003e8c:	08003e39 	.word	0x08003e39
 8003e90:	08003feb 	.word	0x08003feb
 8003e94:	08003e39 	.word	0x08003e39
 8003e98:	08003eed 	.word	0x08003eed
 8003e9c:	08003e39 	.word	0x08003e39
 8003ea0:	08003e39 	.word	0x08003e39
 8003ea4:	08003fb3 	.word	0x08003fb3
 8003ea8:	680b      	ldr	r3, [r1, #0]
 8003eaa:	1d1a      	adds	r2, r3, #4
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	600a      	str	r2, [r1, #0]
 8003eb0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003eb4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003eb8:	2301      	movs	r3, #1
 8003eba:	e0a3      	b.n	8004004 <_printf_i+0x1f4>
 8003ebc:	6825      	ldr	r5, [r4, #0]
 8003ebe:	6808      	ldr	r0, [r1, #0]
 8003ec0:	062e      	lsls	r6, r5, #24
 8003ec2:	f100 0304 	add.w	r3, r0, #4
 8003ec6:	d50a      	bpl.n	8003ede <_printf_i+0xce>
 8003ec8:	6805      	ldr	r5, [r0, #0]
 8003eca:	600b      	str	r3, [r1, #0]
 8003ecc:	2d00      	cmp	r5, #0
 8003ece:	da03      	bge.n	8003ed8 <_printf_i+0xc8>
 8003ed0:	232d      	movs	r3, #45	; 0x2d
 8003ed2:	426d      	negs	r5, r5
 8003ed4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003ed8:	485e      	ldr	r0, [pc, #376]	; (8004054 <_printf_i+0x244>)
 8003eda:	230a      	movs	r3, #10
 8003edc:	e019      	b.n	8003f12 <_printf_i+0x102>
 8003ede:	f015 0f40 	tst.w	r5, #64	; 0x40
 8003ee2:	6805      	ldr	r5, [r0, #0]
 8003ee4:	600b      	str	r3, [r1, #0]
 8003ee6:	bf18      	it	ne
 8003ee8:	b22d      	sxthne	r5, r5
 8003eea:	e7ef      	b.n	8003ecc <_printf_i+0xbc>
 8003eec:	680b      	ldr	r3, [r1, #0]
 8003eee:	6825      	ldr	r5, [r4, #0]
 8003ef0:	1d18      	adds	r0, r3, #4
 8003ef2:	6008      	str	r0, [r1, #0]
 8003ef4:	0628      	lsls	r0, r5, #24
 8003ef6:	d501      	bpl.n	8003efc <_printf_i+0xec>
 8003ef8:	681d      	ldr	r5, [r3, #0]
 8003efa:	e002      	b.n	8003f02 <_printf_i+0xf2>
 8003efc:	0669      	lsls	r1, r5, #25
 8003efe:	d5fb      	bpl.n	8003ef8 <_printf_i+0xe8>
 8003f00:	881d      	ldrh	r5, [r3, #0]
 8003f02:	4854      	ldr	r0, [pc, #336]	; (8004054 <_printf_i+0x244>)
 8003f04:	2f6f      	cmp	r7, #111	; 0x6f
 8003f06:	bf0c      	ite	eq
 8003f08:	2308      	moveq	r3, #8
 8003f0a:	230a      	movne	r3, #10
 8003f0c:	2100      	movs	r1, #0
 8003f0e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003f12:	6866      	ldr	r6, [r4, #4]
 8003f14:	60a6      	str	r6, [r4, #8]
 8003f16:	2e00      	cmp	r6, #0
 8003f18:	bfa2      	ittt	ge
 8003f1a:	6821      	ldrge	r1, [r4, #0]
 8003f1c:	f021 0104 	bicge.w	r1, r1, #4
 8003f20:	6021      	strge	r1, [r4, #0]
 8003f22:	b90d      	cbnz	r5, 8003f28 <_printf_i+0x118>
 8003f24:	2e00      	cmp	r6, #0
 8003f26:	d04d      	beq.n	8003fc4 <_printf_i+0x1b4>
 8003f28:	4616      	mov	r6, r2
 8003f2a:	fbb5 f1f3 	udiv	r1, r5, r3
 8003f2e:	fb03 5711 	mls	r7, r3, r1, r5
 8003f32:	5dc7      	ldrb	r7, [r0, r7]
 8003f34:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003f38:	462f      	mov	r7, r5
 8003f3a:	42bb      	cmp	r3, r7
 8003f3c:	460d      	mov	r5, r1
 8003f3e:	d9f4      	bls.n	8003f2a <_printf_i+0x11a>
 8003f40:	2b08      	cmp	r3, #8
 8003f42:	d10b      	bne.n	8003f5c <_printf_i+0x14c>
 8003f44:	6823      	ldr	r3, [r4, #0]
 8003f46:	07df      	lsls	r7, r3, #31
 8003f48:	d508      	bpl.n	8003f5c <_printf_i+0x14c>
 8003f4a:	6923      	ldr	r3, [r4, #16]
 8003f4c:	6861      	ldr	r1, [r4, #4]
 8003f4e:	4299      	cmp	r1, r3
 8003f50:	bfde      	ittt	le
 8003f52:	2330      	movle	r3, #48	; 0x30
 8003f54:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003f58:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003f5c:	1b92      	subs	r2, r2, r6
 8003f5e:	6122      	str	r2, [r4, #16]
 8003f60:	f8cd a000 	str.w	sl, [sp]
 8003f64:	464b      	mov	r3, r9
 8003f66:	aa03      	add	r2, sp, #12
 8003f68:	4621      	mov	r1, r4
 8003f6a:	4640      	mov	r0, r8
 8003f6c:	f7ff fee2 	bl	8003d34 <_printf_common>
 8003f70:	3001      	adds	r0, #1
 8003f72:	d14c      	bne.n	800400e <_printf_i+0x1fe>
 8003f74:	f04f 30ff 	mov.w	r0, #4294967295
 8003f78:	b004      	add	sp, #16
 8003f7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f7e:	4835      	ldr	r0, [pc, #212]	; (8004054 <_printf_i+0x244>)
 8003f80:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003f84:	6823      	ldr	r3, [r4, #0]
 8003f86:	680e      	ldr	r6, [r1, #0]
 8003f88:	061f      	lsls	r7, r3, #24
 8003f8a:	f856 5b04 	ldr.w	r5, [r6], #4
 8003f8e:	600e      	str	r6, [r1, #0]
 8003f90:	d514      	bpl.n	8003fbc <_printf_i+0x1ac>
 8003f92:	07d9      	lsls	r1, r3, #31
 8003f94:	bf44      	itt	mi
 8003f96:	f043 0320 	orrmi.w	r3, r3, #32
 8003f9a:	6023      	strmi	r3, [r4, #0]
 8003f9c:	b91d      	cbnz	r5, 8003fa6 <_printf_i+0x196>
 8003f9e:	6823      	ldr	r3, [r4, #0]
 8003fa0:	f023 0320 	bic.w	r3, r3, #32
 8003fa4:	6023      	str	r3, [r4, #0]
 8003fa6:	2310      	movs	r3, #16
 8003fa8:	e7b0      	b.n	8003f0c <_printf_i+0xfc>
 8003faa:	6823      	ldr	r3, [r4, #0]
 8003fac:	f043 0320 	orr.w	r3, r3, #32
 8003fb0:	6023      	str	r3, [r4, #0]
 8003fb2:	2378      	movs	r3, #120	; 0x78
 8003fb4:	4828      	ldr	r0, [pc, #160]	; (8004058 <_printf_i+0x248>)
 8003fb6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003fba:	e7e3      	b.n	8003f84 <_printf_i+0x174>
 8003fbc:	065e      	lsls	r6, r3, #25
 8003fbe:	bf48      	it	mi
 8003fc0:	b2ad      	uxthmi	r5, r5
 8003fc2:	e7e6      	b.n	8003f92 <_printf_i+0x182>
 8003fc4:	4616      	mov	r6, r2
 8003fc6:	e7bb      	b.n	8003f40 <_printf_i+0x130>
 8003fc8:	680b      	ldr	r3, [r1, #0]
 8003fca:	6826      	ldr	r6, [r4, #0]
 8003fcc:	6960      	ldr	r0, [r4, #20]
 8003fce:	1d1d      	adds	r5, r3, #4
 8003fd0:	600d      	str	r5, [r1, #0]
 8003fd2:	0635      	lsls	r5, r6, #24
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	d501      	bpl.n	8003fdc <_printf_i+0x1cc>
 8003fd8:	6018      	str	r0, [r3, #0]
 8003fda:	e002      	b.n	8003fe2 <_printf_i+0x1d2>
 8003fdc:	0671      	lsls	r1, r6, #25
 8003fde:	d5fb      	bpl.n	8003fd8 <_printf_i+0x1c8>
 8003fe0:	8018      	strh	r0, [r3, #0]
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	6123      	str	r3, [r4, #16]
 8003fe6:	4616      	mov	r6, r2
 8003fe8:	e7ba      	b.n	8003f60 <_printf_i+0x150>
 8003fea:	680b      	ldr	r3, [r1, #0]
 8003fec:	1d1a      	adds	r2, r3, #4
 8003fee:	600a      	str	r2, [r1, #0]
 8003ff0:	681e      	ldr	r6, [r3, #0]
 8003ff2:	6862      	ldr	r2, [r4, #4]
 8003ff4:	2100      	movs	r1, #0
 8003ff6:	4630      	mov	r0, r6
 8003ff8:	f7fc f8f2 	bl	80001e0 <memchr>
 8003ffc:	b108      	cbz	r0, 8004002 <_printf_i+0x1f2>
 8003ffe:	1b80      	subs	r0, r0, r6
 8004000:	6060      	str	r0, [r4, #4]
 8004002:	6863      	ldr	r3, [r4, #4]
 8004004:	6123      	str	r3, [r4, #16]
 8004006:	2300      	movs	r3, #0
 8004008:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800400c:	e7a8      	b.n	8003f60 <_printf_i+0x150>
 800400e:	6923      	ldr	r3, [r4, #16]
 8004010:	4632      	mov	r2, r6
 8004012:	4649      	mov	r1, r9
 8004014:	4640      	mov	r0, r8
 8004016:	47d0      	blx	sl
 8004018:	3001      	adds	r0, #1
 800401a:	d0ab      	beq.n	8003f74 <_printf_i+0x164>
 800401c:	6823      	ldr	r3, [r4, #0]
 800401e:	079b      	lsls	r3, r3, #30
 8004020:	d413      	bmi.n	800404a <_printf_i+0x23a>
 8004022:	68e0      	ldr	r0, [r4, #12]
 8004024:	9b03      	ldr	r3, [sp, #12]
 8004026:	4298      	cmp	r0, r3
 8004028:	bfb8      	it	lt
 800402a:	4618      	movlt	r0, r3
 800402c:	e7a4      	b.n	8003f78 <_printf_i+0x168>
 800402e:	2301      	movs	r3, #1
 8004030:	4632      	mov	r2, r6
 8004032:	4649      	mov	r1, r9
 8004034:	4640      	mov	r0, r8
 8004036:	47d0      	blx	sl
 8004038:	3001      	adds	r0, #1
 800403a:	d09b      	beq.n	8003f74 <_printf_i+0x164>
 800403c:	3501      	adds	r5, #1
 800403e:	68e3      	ldr	r3, [r4, #12]
 8004040:	9903      	ldr	r1, [sp, #12]
 8004042:	1a5b      	subs	r3, r3, r1
 8004044:	42ab      	cmp	r3, r5
 8004046:	dcf2      	bgt.n	800402e <_printf_i+0x21e>
 8004048:	e7eb      	b.n	8004022 <_printf_i+0x212>
 800404a:	2500      	movs	r5, #0
 800404c:	f104 0619 	add.w	r6, r4, #25
 8004050:	e7f5      	b.n	800403e <_printf_i+0x22e>
 8004052:	bf00      	nop
 8004054:	080044e1 	.word	0x080044e1
 8004058:	080044f2 	.word	0x080044f2

0800405c <memmove>:
 800405c:	4288      	cmp	r0, r1
 800405e:	b510      	push	{r4, lr}
 8004060:	eb01 0402 	add.w	r4, r1, r2
 8004064:	d902      	bls.n	800406c <memmove+0x10>
 8004066:	4284      	cmp	r4, r0
 8004068:	4623      	mov	r3, r4
 800406a:	d807      	bhi.n	800407c <memmove+0x20>
 800406c:	1e43      	subs	r3, r0, #1
 800406e:	42a1      	cmp	r1, r4
 8004070:	d008      	beq.n	8004084 <memmove+0x28>
 8004072:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004076:	f803 2f01 	strb.w	r2, [r3, #1]!
 800407a:	e7f8      	b.n	800406e <memmove+0x12>
 800407c:	4402      	add	r2, r0
 800407e:	4601      	mov	r1, r0
 8004080:	428a      	cmp	r2, r1
 8004082:	d100      	bne.n	8004086 <memmove+0x2a>
 8004084:	bd10      	pop	{r4, pc}
 8004086:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800408a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800408e:	e7f7      	b.n	8004080 <memmove+0x24>

08004090 <_free_r>:
 8004090:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004092:	2900      	cmp	r1, #0
 8004094:	d048      	beq.n	8004128 <_free_r+0x98>
 8004096:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800409a:	9001      	str	r0, [sp, #4]
 800409c:	2b00      	cmp	r3, #0
 800409e:	f1a1 0404 	sub.w	r4, r1, #4
 80040a2:	bfb8      	it	lt
 80040a4:	18e4      	addlt	r4, r4, r3
 80040a6:	f000 f8d3 	bl	8004250 <__malloc_lock>
 80040aa:	4a20      	ldr	r2, [pc, #128]	; (800412c <_free_r+0x9c>)
 80040ac:	9801      	ldr	r0, [sp, #4]
 80040ae:	6813      	ldr	r3, [r2, #0]
 80040b0:	4615      	mov	r5, r2
 80040b2:	b933      	cbnz	r3, 80040c2 <_free_r+0x32>
 80040b4:	6063      	str	r3, [r4, #4]
 80040b6:	6014      	str	r4, [r2, #0]
 80040b8:	b003      	add	sp, #12
 80040ba:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80040be:	f000 b8cd 	b.w	800425c <__malloc_unlock>
 80040c2:	42a3      	cmp	r3, r4
 80040c4:	d90b      	bls.n	80040de <_free_r+0x4e>
 80040c6:	6821      	ldr	r1, [r4, #0]
 80040c8:	1862      	adds	r2, r4, r1
 80040ca:	4293      	cmp	r3, r2
 80040cc:	bf04      	itt	eq
 80040ce:	681a      	ldreq	r2, [r3, #0]
 80040d0:	685b      	ldreq	r3, [r3, #4]
 80040d2:	6063      	str	r3, [r4, #4]
 80040d4:	bf04      	itt	eq
 80040d6:	1852      	addeq	r2, r2, r1
 80040d8:	6022      	streq	r2, [r4, #0]
 80040da:	602c      	str	r4, [r5, #0]
 80040dc:	e7ec      	b.n	80040b8 <_free_r+0x28>
 80040de:	461a      	mov	r2, r3
 80040e0:	685b      	ldr	r3, [r3, #4]
 80040e2:	b10b      	cbz	r3, 80040e8 <_free_r+0x58>
 80040e4:	42a3      	cmp	r3, r4
 80040e6:	d9fa      	bls.n	80040de <_free_r+0x4e>
 80040e8:	6811      	ldr	r1, [r2, #0]
 80040ea:	1855      	adds	r5, r2, r1
 80040ec:	42a5      	cmp	r5, r4
 80040ee:	d10b      	bne.n	8004108 <_free_r+0x78>
 80040f0:	6824      	ldr	r4, [r4, #0]
 80040f2:	4421      	add	r1, r4
 80040f4:	1854      	adds	r4, r2, r1
 80040f6:	42a3      	cmp	r3, r4
 80040f8:	6011      	str	r1, [r2, #0]
 80040fa:	d1dd      	bne.n	80040b8 <_free_r+0x28>
 80040fc:	681c      	ldr	r4, [r3, #0]
 80040fe:	685b      	ldr	r3, [r3, #4]
 8004100:	6053      	str	r3, [r2, #4]
 8004102:	4421      	add	r1, r4
 8004104:	6011      	str	r1, [r2, #0]
 8004106:	e7d7      	b.n	80040b8 <_free_r+0x28>
 8004108:	d902      	bls.n	8004110 <_free_r+0x80>
 800410a:	230c      	movs	r3, #12
 800410c:	6003      	str	r3, [r0, #0]
 800410e:	e7d3      	b.n	80040b8 <_free_r+0x28>
 8004110:	6825      	ldr	r5, [r4, #0]
 8004112:	1961      	adds	r1, r4, r5
 8004114:	428b      	cmp	r3, r1
 8004116:	bf04      	itt	eq
 8004118:	6819      	ldreq	r1, [r3, #0]
 800411a:	685b      	ldreq	r3, [r3, #4]
 800411c:	6063      	str	r3, [r4, #4]
 800411e:	bf04      	itt	eq
 8004120:	1949      	addeq	r1, r1, r5
 8004122:	6021      	streq	r1, [r4, #0]
 8004124:	6054      	str	r4, [r2, #4]
 8004126:	e7c7      	b.n	80040b8 <_free_r+0x28>
 8004128:	b003      	add	sp, #12
 800412a:	bd30      	pop	{r4, r5, pc}
 800412c:	20000090 	.word	0x20000090

08004130 <_malloc_r>:
 8004130:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004132:	1ccd      	adds	r5, r1, #3
 8004134:	f025 0503 	bic.w	r5, r5, #3
 8004138:	3508      	adds	r5, #8
 800413a:	2d0c      	cmp	r5, #12
 800413c:	bf38      	it	cc
 800413e:	250c      	movcc	r5, #12
 8004140:	2d00      	cmp	r5, #0
 8004142:	4606      	mov	r6, r0
 8004144:	db01      	blt.n	800414a <_malloc_r+0x1a>
 8004146:	42a9      	cmp	r1, r5
 8004148:	d903      	bls.n	8004152 <_malloc_r+0x22>
 800414a:	230c      	movs	r3, #12
 800414c:	6033      	str	r3, [r6, #0]
 800414e:	2000      	movs	r0, #0
 8004150:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004152:	f000 f87d 	bl	8004250 <__malloc_lock>
 8004156:	4921      	ldr	r1, [pc, #132]	; (80041dc <_malloc_r+0xac>)
 8004158:	680a      	ldr	r2, [r1, #0]
 800415a:	4614      	mov	r4, r2
 800415c:	b99c      	cbnz	r4, 8004186 <_malloc_r+0x56>
 800415e:	4f20      	ldr	r7, [pc, #128]	; (80041e0 <_malloc_r+0xb0>)
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	b923      	cbnz	r3, 800416e <_malloc_r+0x3e>
 8004164:	4621      	mov	r1, r4
 8004166:	4630      	mov	r0, r6
 8004168:	f000 f862 	bl	8004230 <_sbrk_r>
 800416c:	6038      	str	r0, [r7, #0]
 800416e:	4629      	mov	r1, r5
 8004170:	4630      	mov	r0, r6
 8004172:	f000 f85d 	bl	8004230 <_sbrk_r>
 8004176:	1c43      	adds	r3, r0, #1
 8004178:	d123      	bne.n	80041c2 <_malloc_r+0x92>
 800417a:	230c      	movs	r3, #12
 800417c:	6033      	str	r3, [r6, #0]
 800417e:	4630      	mov	r0, r6
 8004180:	f000 f86c 	bl	800425c <__malloc_unlock>
 8004184:	e7e3      	b.n	800414e <_malloc_r+0x1e>
 8004186:	6823      	ldr	r3, [r4, #0]
 8004188:	1b5b      	subs	r3, r3, r5
 800418a:	d417      	bmi.n	80041bc <_malloc_r+0x8c>
 800418c:	2b0b      	cmp	r3, #11
 800418e:	d903      	bls.n	8004198 <_malloc_r+0x68>
 8004190:	6023      	str	r3, [r4, #0]
 8004192:	441c      	add	r4, r3
 8004194:	6025      	str	r5, [r4, #0]
 8004196:	e004      	b.n	80041a2 <_malloc_r+0x72>
 8004198:	6863      	ldr	r3, [r4, #4]
 800419a:	42a2      	cmp	r2, r4
 800419c:	bf0c      	ite	eq
 800419e:	600b      	streq	r3, [r1, #0]
 80041a0:	6053      	strne	r3, [r2, #4]
 80041a2:	4630      	mov	r0, r6
 80041a4:	f000 f85a 	bl	800425c <__malloc_unlock>
 80041a8:	f104 000b 	add.w	r0, r4, #11
 80041ac:	1d23      	adds	r3, r4, #4
 80041ae:	f020 0007 	bic.w	r0, r0, #7
 80041b2:	1ac2      	subs	r2, r0, r3
 80041b4:	d0cc      	beq.n	8004150 <_malloc_r+0x20>
 80041b6:	1a1b      	subs	r3, r3, r0
 80041b8:	50a3      	str	r3, [r4, r2]
 80041ba:	e7c9      	b.n	8004150 <_malloc_r+0x20>
 80041bc:	4622      	mov	r2, r4
 80041be:	6864      	ldr	r4, [r4, #4]
 80041c0:	e7cc      	b.n	800415c <_malloc_r+0x2c>
 80041c2:	1cc4      	adds	r4, r0, #3
 80041c4:	f024 0403 	bic.w	r4, r4, #3
 80041c8:	42a0      	cmp	r0, r4
 80041ca:	d0e3      	beq.n	8004194 <_malloc_r+0x64>
 80041cc:	1a21      	subs	r1, r4, r0
 80041ce:	4630      	mov	r0, r6
 80041d0:	f000 f82e 	bl	8004230 <_sbrk_r>
 80041d4:	3001      	adds	r0, #1
 80041d6:	d1dd      	bne.n	8004194 <_malloc_r+0x64>
 80041d8:	e7cf      	b.n	800417a <_malloc_r+0x4a>
 80041da:	bf00      	nop
 80041dc:	20000090 	.word	0x20000090
 80041e0:	20000094 	.word	0x20000094

080041e4 <_realloc_r>:
 80041e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041e6:	4607      	mov	r7, r0
 80041e8:	4614      	mov	r4, r2
 80041ea:	460e      	mov	r6, r1
 80041ec:	b921      	cbnz	r1, 80041f8 <_realloc_r+0x14>
 80041ee:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80041f2:	4611      	mov	r1, r2
 80041f4:	f7ff bf9c 	b.w	8004130 <_malloc_r>
 80041f8:	b922      	cbnz	r2, 8004204 <_realloc_r+0x20>
 80041fa:	f7ff ff49 	bl	8004090 <_free_r>
 80041fe:	4625      	mov	r5, r4
 8004200:	4628      	mov	r0, r5
 8004202:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004204:	f000 f830 	bl	8004268 <_malloc_usable_size_r>
 8004208:	42a0      	cmp	r0, r4
 800420a:	d20f      	bcs.n	800422c <_realloc_r+0x48>
 800420c:	4621      	mov	r1, r4
 800420e:	4638      	mov	r0, r7
 8004210:	f7ff ff8e 	bl	8004130 <_malloc_r>
 8004214:	4605      	mov	r5, r0
 8004216:	2800      	cmp	r0, #0
 8004218:	d0f2      	beq.n	8004200 <_realloc_r+0x1c>
 800421a:	4631      	mov	r1, r6
 800421c:	4622      	mov	r2, r4
 800421e:	f7ff fbf7 	bl	8003a10 <memcpy>
 8004222:	4631      	mov	r1, r6
 8004224:	4638      	mov	r0, r7
 8004226:	f7ff ff33 	bl	8004090 <_free_r>
 800422a:	e7e9      	b.n	8004200 <_realloc_r+0x1c>
 800422c:	4635      	mov	r5, r6
 800422e:	e7e7      	b.n	8004200 <_realloc_r+0x1c>

08004230 <_sbrk_r>:
 8004230:	b538      	push	{r3, r4, r5, lr}
 8004232:	4d06      	ldr	r5, [pc, #24]	; (800424c <_sbrk_r+0x1c>)
 8004234:	2300      	movs	r3, #0
 8004236:	4604      	mov	r4, r0
 8004238:	4608      	mov	r0, r1
 800423a:	602b      	str	r3, [r5, #0]
 800423c:	f7fc fee6 	bl	800100c <_sbrk>
 8004240:	1c43      	adds	r3, r0, #1
 8004242:	d102      	bne.n	800424a <_sbrk_r+0x1a>
 8004244:	682b      	ldr	r3, [r5, #0]
 8004246:	b103      	cbz	r3, 800424a <_sbrk_r+0x1a>
 8004248:	6023      	str	r3, [r4, #0]
 800424a:	bd38      	pop	{r3, r4, r5, pc}
 800424c:	200001a8 	.word	0x200001a8

08004250 <__malloc_lock>:
 8004250:	4801      	ldr	r0, [pc, #4]	; (8004258 <__malloc_lock+0x8>)
 8004252:	f000 b811 	b.w	8004278 <__retarget_lock_acquire_recursive>
 8004256:	bf00      	nop
 8004258:	200001b0 	.word	0x200001b0

0800425c <__malloc_unlock>:
 800425c:	4801      	ldr	r0, [pc, #4]	; (8004264 <__malloc_unlock+0x8>)
 800425e:	f000 b80c 	b.w	800427a <__retarget_lock_release_recursive>
 8004262:	bf00      	nop
 8004264:	200001b0 	.word	0x200001b0

08004268 <_malloc_usable_size_r>:
 8004268:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800426c:	1f18      	subs	r0, r3, #4
 800426e:	2b00      	cmp	r3, #0
 8004270:	bfbc      	itt	lt
 8004272:	580b      	ldrlt	r3, [r1, r0]
 8004274:	18c0      	addlt	r0, r0, r3
 8004276:	4770      	bx	lr

08004278 <__retarget_lock_acquire_recursive>:
 8004278:	4770      	bx	lr

0800427a <__retarget_lock_release_recursive>:
 800427a:	4770      	bx	lr

0800427c <_init>:
 800427c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800427e:	bf00      	nop
 8004280:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004282:	bc08      	pop	{r3}
 8004284:	469e      	mov	lr, r3
 8004286:	4770      	bx	lr

08004288 <_fini>:
 8004288:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800428a:	bf00      	nop
 800428c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800428e:	bc08      	pop	{r3}
 8004290:	469e      	mov	lr, r3
 8004292:	4770      	bx	lr
