
STM32F405RGTx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009844  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000478  080099d4  080099d4  000199d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009e4c  08009e4c  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08009e4c  08009e4c  00019e4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009e54  08009e54  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009e54  08009e54  00019e54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009e58  08009e58  00019e58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08009e5c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004bbc  20000074  08009ed0  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004c30  08009ed0  00024c30  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00026d3f  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004738  00000000  00000000  00046de3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a08  00000000  00000000  0004b520  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001860  00000000  00000000  0004cf28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025062  00000000  00000000  0004e788  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c9ab  00000000  00000000  000737ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dce5b  00000000  00000000  00090195  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0016cff0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000076e4  00000000  00000000  0016d044  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080099bc 	.word	0x080099bc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	080099bc 	.word	0x080099bc

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96e 	b.w	8000564 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468c      	mov	ip, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	f040 8083 	bne.w	80003b6 <__udivmoddi4+0x116>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d947      	bls.n	8000346 <__udivmoddi4+0xa6>
 80002b6:	fab2 f282 	clz	r2, r2
 80002ba:	b142      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002bc:	f1c2 0020 	rsb	r0, r2, #32
 80002c0:	fa24 f000 	lsr.w	r0, r4, r0
 80002c4:	4091      	lsls	r1, r2
 80002c6:	4097      	lsls	r7, r2
 80002c8:	ea40 0c01 	orr.w	ip, r0, r1
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbbc f6f8 	udiv	r6, ip, r8
 80002d8:	fa1f fe87 	uxth.w	lr, r7
 80002dc:	fb08 c116 	mls	r1, r8, r6, ip
 80002e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e4:	fb06 f10e 	mul.w	r1, r6, lr
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18fb      	adds	r3, r7, r3
 80002ee:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f2:	f080 8119 	bcs.w	8000528 <__udivmoddi4+0x288>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8116 	bls.w	8000528 <__udivmoddi4+0x288>
 80002fc:	3e02      	subs	r6, #2
 80002fe:	443b      	add	r3, r7
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0f8 	udiv	r0, r3, r8
 8000308:	fb08 3310 	mls	r3, r8, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fe0e 	mul.w	lr, r0, lr
 8000314:	45a6      	cmp	lr, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	193c      	adds	r4, r7, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	f080 8105 	bcs.w	800052c <__udivmoddi4+0x28c>
 8000322:	45a6      	cmp	lr, r4
 8000324:	f240 8102 	bls.w	800052c <__udivmoddi4+0x28c>
 8000328:	3802      	subs	r0, #2
 800032a:	443c      	add	r4, r7
 800032c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000330:	eba4 040e 	sub.w	r4, r4, lr
 8000334:	2600      	movs	r6, #0
 8000336:	b11d      	cbz	r5, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c5 4300 	strd	r4, r3, [r5]
 8000340:	4631      	mov	r1, r6
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	b902      	cbnz	r2, 800034a <__udivmoddi4+0xaa>
 8000348:	deff      	udf	#255	; 0xff
 800034a:	fab2 f282 	clz	r2, r2
 800034e:	2a00      	cmp	r2, #0
 8000350:	d150      	bne.n	80003f4 <__udivmoddi4+0x154>
 8000352:	1bcb      	subs	r3, r1, r7
 8000354:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000358:	fa1f f887 	uxth.w	r8, r7
 800035c:	2601      	movs	r6, #1
 800035e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000362:	0c21      	lsrs	r1, r4, #16
 8000364:	fb0e 331c 	mls	r3, lr, ip, r3
 8000368:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800036c:	fb08 f30c 	mul.w	r3, r8, ip
 8000370:	428b      	cmp	r3, r1
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0xe4>
 8000374:	1879      	adds	r1, r7, r1
 8000376:	f10c 30ff 	add.w	r0, ip, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0xe2>
 800037c:	428b      	cmp	r3, r1
 800037e:	f200 80e9 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 8000382:	4684      	mov	ip, r0
 8000384:	1ac9      	subs	r1, r1, r3
 8000386:	b2a3      	uxth	r3, r4
 8000388:	fbb1 f0fe 	udiv	r0, r1, lr
 800038c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000390:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000394:	fb08 f800 	mul.w	r8, r8, r0
 8000398:	45a0      	cmp	r8, r4
 800039a:	d907      	bls.n	80003ac <__udivmoddi4+0x10c>
 800039c:	193c      	adds	r4, r7, r4
 800039e:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a2:	d202      	bcs.n	80003aa <__udivmoddi4+0x10a>
 80003a4:	45a0      	cmp	r8, r4
 80003a6:	f200 80d9 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003aa:	4618      	mov	r0, r3
 80003ac:	eba4 0408 	sub.w	r4, r4, r8
 80003b0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003b4:	e7bf      	b.n	8000336 <__udivmoddi4+0x96>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0x12e>
 80003ba:	2d00      	cmp	r5, #0
 80003bc:	f000 80b1 	beq.w	8000522 <__udivmoddi4+0x282>
 80003c0:	2600      	movs	r6, #0
 80003c2:	e9c5 0100 	strd	r0, r1, [r5]
 80003c6:	4630      	mov	r0, r6
 80003c8:	4631      	mov	r1, r6
 80003ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ce:	fab3 f683 	clz	r6, r3
 80003d2:	2e00      	cmp	r6, #0
 80003d4:	d14a      	bne.n	800046c <__udivmoddi4+0x1cc>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d302      	bcc.n	80003e0 <__udivmoddi4+0x140>
 80003da:	4282      	cmp	r2, r0
 80003dc:	f200 80b8 	bhi.w	8000550 <__udivmoddi4+0x2b0>
 80003e0:	1a84      	subs	r4, r0, r2
 80003e2:	eb61 0103 	sbc.w	r1, r1, r3
 80003e6:	2001      	movs	r0, #1
 80003e8:	468c      	mov	ip, r1
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	d0a8      	beq.n	8000340 <__udivmoddi4+0xa0>
 80003ee:	e9c5 4c00 	strd	r4, ip, [r5]
 80003f2:	e7a5      	b.n	8000340 <__udivmoddi4+0xa0>
 80003f4:	f1c2 0320 	rsb	r3, r2, #32
 80003f8:	fa20 f603 	lsr.w	r6, r0, r3
 80003fc:	4097      	lsls	r7, r2
 80003fe:	fa01 f002 	lsl.w	r0, r1, r2
 8000402:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000406:	40d9      	lsrs	r1, r3
 8000408:	4330      	orrs	r0, r6
 800040a:	0c03      	lsrs	r3, r0, #16
 800040c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000410:	fa1f f887 	uxth.w	r8, r7
 8000414:	fb0e 1116 	mls	r1, lr, r6, r1
 8000418:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800041c:	fb06 f108 	mul.w	r1, r6, r8
 8000420:	4299      	cmp	r1, r3
 8000422:	fa04 f402 	lsl.w	r4, r4, r2
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x19c>
 8000428:	18fb      	adds	r3, r7, r3
 800042a:	f106 3cff 	add.w	ip, r6, #4294967295
 800042e:	f080 808d 	bcs.w	800054c <__udivmoddi4+0x2ac>
 8000432:	4299      	cmp	r1, r3
 8000434:	f240 808a 	bls.w	800054c <__udivmoddi4+0x2ac>
 8000438:	3e02      	subs	r6, #2
 800043a:	443b      	add	r3, r7
 800043c:	1a5b      	subs	r3, r3, r1
 800043e:	b281      	uxth	r1, r0
 8000440:	fbb3 f0fe 	udiv	r0, r3, lr
 8000444:	fb0e 3310 	mls	r3, lr, r0, r3
 8000448:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044c:	fb00 f308 	mul.w	r3, r0, r8
 8000450:	428b      	cmp	r3, r1
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x1c4>
 8000454:	1879      	adds	r1, r7, r1
 8000456:	f100 3cff 	add.w	ip, r0, #4294967295
 800045a:	d273      	bcs.n	8000544 <__udivmoddi4+0x2a4>
 800045c:	428b      	cmp	r3, r1
 800045e:	d971      	bls.n	8000544 <__udivmoddi4+0x2a4>
 8000460:	3802      	subs	r0, #2
 8000462:	4439      	add	r1, r7
 8000464:	1acb      	subs	r3, r1, r3
 8000466:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800046a:	e778      	b.n	800035e <__udivmoddi4+0xbe>
 800046c:	f1c6 0c20 	rsb	ip, r6, #32
 8000470:	fa03 f406 	lsl.w	r4, r3, r6
 8000474:	fa22 f30c 	lsr.w	r3, r2, ip
 8000478:	431c      	orrs	r4, r3
 800047a:	fa20 f70c 	lsr.w	r7, r0, ip
 800047e:	fa01 f306 	lsl.w	r3, r1, r6
 8000482:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000486:	fa21 f10c 	lsr.w	r1, r1, ip
 800048a:	431f      	orrs	r7, r3
 800048c:	0c3b      	lsrs	r3, r7, #16
 800048e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000492:	fa1f f884 	uxth.w	r8, r4
 8000496:	fb0e 1119 	mls	r1, lr, r9, r1
 800049a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800049e:	fb09 fa08 	mul.w	sl, r9, r8
 80004a2:	458a      	cmp	sl, r1
 80004a4:	fa02 f206 	lsl.w	r2, r2, r6
 80004a8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x220>
 80004ae:	1861      	adds	r1, r4, r1
 80004b0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004b4:	d248      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 80004b6:	458a      	cmp	sl, r1
 80004b8:	d946      	bls.n	8000548 <__udivmoddi4+0x2a8>
 80004ba:	f1a9 0902 	sub.w	r9, r9, #2
 80004be:	4421      	add	r1, r4
 80004c0:	eba1 010a 	sub.w	r1, r1, sl
 80004c4:	b2bf      	uxth	r7, r7
 80004c6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ca:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ce:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004d2:	fb00 f808 	mul.w	r8, r0, r8
 80004d6:	45b8      	cmp	r8, r7
 80004d8:	d907      	bls.n	80004ea <__udivmoddi4+0x24a>
 80004da:	19e7      	adds	r7, r4, r7
 80004dc:	f100 31ff 	add.w	r1, r0, #4294967295
 80004e0:	d22e      	bcs.n	8000540 <__udivmoddi4+0x2a0>
 80004e2:	45b8      	cmp	r8, r7
 80004e4:	d92c      	bls.n	8000540 <__udivmoddi4+0x2a0>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4427      	add	r7, r4
 80004ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ee:	eba7 0708 	sub.w	r7, r7, r8
 80004f2:	fba0 8902 	umull	r8, r9, r0, r2
 80004f6:	454f      	cmp	r7, r9
 80004f8:	46c6      	mov	lr, r8
 80004fa:	4649      	mov	r1, r9
 80004fc:	d31a      	bcc.n	8000534 <__udivmoddi4+0x294>
 80004fe:	d017      	beq.n	8000530 <__udivmoddi4+0x290>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x27a>
 8000502:	ebb3 020e 	subs.w	r2, r3, lr
 8000506:	eb67 0701 	sbc.w	r7, r7, r1
 800050a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800050e:	40f2      	lsrs	r2, r6
 8000510:	ea4c 0202 	orr.w	r2, ip, r2
 8000514:	40f7      	lsrs	r7, r6
 8000516:	e9c5 2700 	strd	r2, r7, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	462e      	mov	r6, r5
 8000524:	4628      	mov	r0, r5
 8000526:	e70b      	b.n	8000340 <__udivmoddi4+0xa0>
 8000528:	4606      	mov	r6, r0
 800052a:	e6e9      	b.n	8000300 <__udivmoddi4+0x60>
 800052c:	4618      	mov	r0, r3
 800052e:	e6fd      	b.n	800032c <__udivmoddi4+0x8c>
 8000530:	4543      	cmp	r3, r8
 8000532:	d2e5      	bcs.n	8000500 <__udivmoddi4+0x260>
 8000534:	ebb8 0e02 	subs.w	lr, r8, r2
 8000538:	eb69 0104 	sbc.w	r1, r9, r4
 800053c:	3801      	subs	r0, #1
 800053e:	e7df      	b.n	8000500 <__udivmoddi4+0x260>
 8000540:	4608      	mov	r0, r1
 8000542:	e7d2      	b.n	80004ea <__udivmoddi4+0x24a>
 8000544:	4660      	mov	r0, ip
 8000546:	e78d      	b.n	8000464 <__udivmoddi4+0x1c4>
 8000548:	4681      	mov	r9, r0
 800054a:	e7b9      	b.n	80004c0 <__udivmoddi4+0x220>
 800054c:	4666      	mov	r6, ip
 800054e:	e775      	b.n	800043c <__udivmoddi4+0x19c>
 8000550:	4630      	mov	r0, r6
 8000552:	e74a      	b.n	80003ea <__udivmoddi4+0x14a>
 8000554:	f1ac 0c02 	sub.w	ip, ip, #2
 8000558:	4439      	add	r1, r7
 800055a:	e713      	b.n	8000384 <__udivmoddi4+0xe4>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	e724      	b.n	80003ac <__udivmoddi4+0x10c>
 8000562:	bf00      	nop

08000564 <__aeabi_idiv0>:
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop

08000568 <__io_putchar>:
#if BMS_DEBUG
#include "bms_tests.h"
#endif

// override __io_putchar from the STL to enable UART printing
void __io_putchar(uint8_t ch) {
 8000568:	b580      	push	{r7, lr}
 800056a:	b082      	sub	sp, #8
 800056c:	af00      	add	r7, sp, #0
 800056e:	4603      	mov	r3, r0
 8000570:	71fb      	strb	r3, [r7, #7]
	HAL_UART_Transmit(&huart1, &ch, 1, 500);
 8000572:	1df9      	adds	r1, r7, #7
 8000574:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000578:	2201      	movs	r2, #1
 800057a:	4803      	ldr	r0, [pc, #12]	; (8000588 <__io_putchar+0x20>)
 800057c:	f005 f813 	bl	80055a6 <HAL_UART_Transmit>
}
 8000580:	bf00      	nop
 8000582:	3708      	adds	r7, #8
 8000584:	46bd      	mov	sp, r7
 8000586:	bd80      	pop	{r7, pc}
 8000588:	20004a40 	.word	0x20004a40

0800058c <bms_entry>:

int bms_entry() {	
 800058c:	b580      	push	{r7, lr}
 800058e:	af00      	add	r7, sp, #0
	printf("starting timers...\r\n");
 8000590:	4810      	ldr	r0, [pc, #64]	; (80005d4 <bms_entry+0x48>)
 8000592:	f008 f909 	bl	80087a8 <puts>
	start_timers();
 8000596:	f001 fb3d 	bl	8001c14 <start_timers>

	printf("initializing RTOS kernel...\r\n");
 800059a:	480f      	ldr	r0, [pc, #60]	; (80005d8 <bms_entry+0x4c>)
 800059c:	f008 f904 	bl	80087a8 <puts>
	osKernelInitialize();
 80005a0:	f005 faea 	bl	8005b78 <osKernelInitialize>

	printf("starting RTOS threads...\r\n");
 80005a4:	480d      	ldr	r0, [pc, #52]	; (80005dc <bms_entry+0x50>)
 80005a6:	f008 f8ff 	bl	80087a8 <puts>
	osThreadNew(ext_led_blink_thread_fn, NULL, &ext_led_blink_thread_attrs);
 80005aa:	4a0d      	ldr	r2, [pc, #52]	; (80005e0 <bms_entry+0x54>)
 80005ac:	2100      	movs	r1, #0
 80005ae:	480d      	ldr	r0, [pc, #52]	; (80005e4 <bms_entry+0x58>)
 80005b0:	f005 fb2c 	bl	8005c0c <osThreadNew>
	// osThreadNew(rtos_heartbeat_logger_thread_fn, NULL, &rtos_heartbeat_logger_thread_attrs);
	osThreadNew(measurements_thread_fn, NULL, &measurements_thread_attrs);
 80005b4:	4a0c      	ldr	r2, [pc, #48]	; (80005e8 <bms_entry+0x5c>)
 80005b6:	2100      	movs	r1, #0
 80005b8:	480c      	ldr	r0, [pc, #48]	; (80005ec <bms_entry+0x60>)
 80005ba:	f005 fb27 	bl	8005c0c <osThreadNew>

	printf("starting RTOS scheduler...\r\n");
 80005be:	480c      	ldr	r0, [pc, #48]	; (80005f0 <bms_entry+0x64>)
 80005c0:	f008 f8f2 	bl	80087a8 <puts>
	osKernelStart();
 80005c4:	f005 fafc 	bl	8005bc0 <osKernelStart>

	// should never reach this point, since we have handed execution over to the RTOS
	Error_Handler();
 80005c8:	f000 ffc0 	bl	800154c <Error_Handler>

	return 0;
 80005cc:	2300      	movs	r3, #0
}
 80005ce:	4618      	mov	r0, r3
 80005d0:	bd80      	pop	{r7, pc}
 80005d2:	bf00      	nop
 80005d4:	080099d4 	.word	0x080099d4
 80005d8:	080099e8 	.word	0x080099e8
 80005dc:	08009a08 	.word	0x08009a08
 80005e0:	08009d6c 	.word	0x08009d6c
 80005e4:	08001c5d 	.word	0x08001c5d
 80005e8:	08009d90 	.word	0x08009d90
 80005ec:	08001c7d 	.word	0x08001c7d
 80005f0:	08009a24 	.word	0x08009a24

080005f4 <Buffer_init>:
	0x585a, 0x8ba7, 0x4e3e, 0x450c, 0x8095
};

/////////////////////////////////////////////////////////////////////////////////////////////////////
// Buffer methods
Buffer Buffer_init() {
 80005f4:	b480      	push	{r7}
 80005f6:	b087      	sub	sp, #28
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	6078      	str	r0, [r7, #4]
	Buffer buffer = {};
 80005fc:	f107 030c 	add.w	r3, r7, #12
 8000600:	2200      	movs	r2, #0
 8000602:	601a      	str	r2, [r3, #0]
 8000604:	605a      	str	r2, [r3, #4]
 8000606:	f8c3 2007 	str.w	r2, [r3, #7]
	buffer.len = 0;
 800060a:	2300      	movs	r3, #0
 800060c:	733b      	strb	r3, [r7, #12]
	return buffer;
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	461a      	mov	r2, r3
 8000612:	f107 030c 	add.w	r3, r7, #12
 8000616:	cb03      	ldmia	r3!, {r0, r1}
 8000618:	6010      	str	r0, [r2, #0]
 800061a:	6051      	str	r1, [r2, #4]
 800061c:	8819      	ldrh	r1, [r3, #0]
 800061e:	789b      	ldrb	r3, [r3, #2]
 8000620:	8111      	strh	r1, [r2, #8]
 8000622:	7293      	strb	r3, [r2, #10]
}
 8000624:	6878      	ldr	r0, [r7, #4]
 8000626:	371c      	adds	r7, #28
 8000628:	46bd      	mov	sp, r7
 800062a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062e:	4770      	bx	lr

08000630 <Buffer_append>:

void Buffer_append(Buffer* self, uint8_t val) {
 8000630:	b480      	push	{r7}
 8000632:	b085      	sub	sp, #20
 8000634:	af00      	add	r7, sp, #0
 8000636:	6078      	str	r0, [r7, #4]
 8000638:	460b      	mov	r3, r1
 800063a:	70fb      	strb	r3, [r7, #3]
	uint8_t indx = self->len;
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	781b      	ldrb	r3, [r3, #0]
 8000640:	73fb      	strb	r3, [r7, #15]
	self->data[indx] = val;
 8000642:	7bfb      	ldrb	r3, [r7, #15]
 8000644:	687a      	ldr	r2, [r7, #4]
 8000646:	4413      	add	r3, r2
 8000648:	78fa      	ldrb	r2, [r7, #3]
 800064a:	705a      	strb	r2, [r3, #1]
	self->len += 1;
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	781b      	ldrb	r3, [r3, #0]
 8000650:	3301      	adds	r3, #1
 8000652:	b2da      	uxtb	r2, r3
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	701a      	strb	r2, [r3, #0]
}
 8000658:	bf00      	nop
 800065a:	3714      	adds	r7, #20
 800065c:	46bd      	mov	sp, r7
 800065e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000662:	4770      	bx	lr

08000664 <Buffer_index>:

uint8_t Buffer_index(Buffer* self, uint8_t indx) {
 8000664:	b580      	push	{r7, lr}
 8000666:	b082      	sub	sp, #8
 8000668:	af00      	add	r7, sp, #0
 800066a:	6078      	str	r0, [r7, #4]
 800066c:	460b      	mov	r3, r1
 800066e:	70fb      	strb	r3, [r7, #3]
	if (indx >= self->len) { Error_Handler(); }
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	781b      	ldrb	r3, [r3, #0]
 8000674:	78fa      	ldrb	r2, [r7, #3]
 8000676:	429a      	cmp	r2, r3
 8000678:	d301      	bcc.n	800067e <Buffer_index+0x1a>
 800067a:	f000 ff67 	bl	800154c <Error_Handler>
	return self->data[indx];
 800067e:	78fb      	ldrb	r3, [r7, #3]
 8000680:	687a      	ldr	r2, [r7, #4]
 8000682:	4413      	add	r3, r2
 8000684:	785b      	ldrb	r3, [r3, #1]
}
 8000686:	4618      	mov	r0, r3
 8000688:	3708      	adds	r7, #8
 800068a:	46bd      	mov	sp, r7
 800068c:	bd80      	pop	{r7, pc}

0800068e <Buffer_set_index>:
void Buffer_set_index(Buffer* self, uint8_t indx, uint8_t val) {
 800068e:	b580      	push	{r7, lr}
 8000690:	b082      	sub	sp, #8
 8000692:	af00      	add	r7, sp, #0
 8000694:	6078      	str	r0, [r7, #4]
 8000696:	460b      	mov	r3, r1
 8000698:	70fb      	strb	r3, [r7, #3]
 800069a:	4613      	mov	r3, r2
 800069c:	70bb      	strb	r3, [r7, #2]
	if (indx >= self->len) { Error_Handler(); }
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	781b      	ldrb	r3, [r3, #0]
 80006a2:	78fa      	ldrb	r2, [r7, #3]
 80006a4:	429a      	cmp	r2, r3
 80006a6:	d301      	bcc.n	80006ac <Buffer_set_index+0x1e>
 80006a8:	f000 ff50 	bl	800154c <Error_Handler>
	self->data[indx] = val;
 80006ac:	78fb      	ldrb	r3, [r7, #3]
 80006ae:	687a      	ldr	r2, [r7, #4]
 80006b0:	4413      	add	r3, r2
 80006b2:	78ba      	ldrb	r2, [r7, #2]
 80006b4:	705a      	strb	r2, [r3, #1]
}
 80006b6:	bf00      	nop
 80006b8:	3708      	adds	r7, #8
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bd80      	pop	{r7, pc}
	...

080006c0 <Buffer_add_pec>:

void Buffer_add_pec(Buffer* self) {
 80006c0:	b590      	push	{r4, r7, lr}
 80006c2:	b085      	sub	sp, #20
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	6078      	str	r0, [r7, #4]
	uint16_t remainder = 16;
 80006c8:	2310      	movs	r3, #16
 80006ca:	81fb      	strh	r3, [r7, #14]
	uint16_t addr = 0;
 80006cc:	2300      	movs	r3, #0
 80006ce:	817b      	strh	r3, [r7, #10]
	for (uint8_t i = 0; i < self->len; i++) {
 80006d0:	2300      	movs	r3, #0
 80006d2:	737b      	strb	r3, [r7, #13]
 80006d4:	e01b      	b.n	800070e <Buffer_add_pec+0x4e>
		addr = ( (remainder >> 7)^Buffer_index(self, i) ) & 0xff;
 80006d6:	89fb      	ldrh	r3, [r7, #14]
 80006d8:	09db      	lsrs	r3, r3, #7
 80006da:	b29c      	uxth	r4, r3
 80006dc:	7b7b      	ldrb	r3, [r7, #13]
 80006de:	4619      	mov	r1, r3
 80006e0:	6878      	ldr	r0, [r7, #4]
 80006e2:	f7ff ffbf 	bl	8000664 <Buffer_index>
 80006e6:	4603      	mov	r3, r0
 80006e8:	b29b      	uxth	r3, r3
 80006ea:	4063      	eors	r3, r4
 80006ec:	b29b      	uxth	r3, r3
 80006ee:	b2db      	uxtb	r3, r3
 80006f0:	817b      	strh	r3, [r7, #10]
		remainder = (remainder << 8)^_CRC15_LUT[addr];
 80006f2:	89fb      	ldrh	r3, [r7, #14]
 80006f4:	021b      	lsls	r3, r3, #8
 80006f6:	b21a      	sxth	r2, r3
 80006f8:	897b      	ldrh	r3, [r7, #10]
 80006fa:	4912      	ldr	r1, [pc, #72]	; (8000744 <Buffer_add_pec+0x84>)
 80006fc:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000700:	b21b      	sxth	r3, r3
 8000702:	4053      	eors	r3, r2
 8000704:	b21b      	sxth	r3, r3
 8000706:	81fb      	strh	r3, [r7, #14]
	for (uint8_t i = 0; i < self->len; i++) {
 8000708:	7b7b      	ldrb	r3, [r7, #13]
 800070a:	3301      	adds	r3, #1
 800070c:	737b      	strb	r3, [r7, #13]
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	781b      	ldrb	r3, [r3, #0]
 8000712:	7b7a      	ldrb	r2, [r7, #13]
 8000714:	429a      	cmp	r2, r3
 8000716:	d3de      	bcc.n	80006d6 <Buffer_add_pec+0x16>
	}
	uint16_t pec = remainder*2;
 8000718:	89fb      	ldrh	r3, [r7, #14]
 800071a:	005b      	lsls	r3, r3, #1
 800071c:	813b      	strh	r3, [r7, #8]
	Buffer_append(self, (pec >> 8) & 0xff);
 800071e:	893b      	ldrh	r3, [r7, #8]
 8000720:	0a1b      	lsrs	r3, r3, #8
 8000722:	b29b      	uxth	r3, r3
 8000724:	b2db      	uxtb	r3, r3
 8000726:	4619      	mov	r1, r3
 8000728:	6878      	ldr	r0, [r7, #4]
 800072a:	f7ff ff81 	bl	8000630 <Buffer_append>
	Buffer_append(self, pec & 0xff);
 800072e:	893b      	ldrh	r3, [r7, #8]
 8000730:	b2db      	uxtb	r3, r3
 8000732:	4619      	mov	r1, r3
 8000734:	6878      	ldr	r0, [r7, #4]
 8000736:	f7ff ff7b 	bl	8000630 <Buffer_append>
}
 800073a:	bf00      	nop
 800073c:	3714      	adds	r7, #20
 800073e:	46bd      	mov	sp, r7
 8000740:	bd90      	pop	{r4, r7, pc}
 8000742:	bf00      	nop
 8000744:	08009b54 	.word	0x08009b54

08000748 <Buffer_check_pec>:

uint8_t Buffer_check_pec(Buffer* self) {
 8000748:	b590      	push	{r4, r7, lr}
 800074a:	b087      	sub	sp, #28
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]
	uint16_t remainder = 16;
 8000750:	2310      	movs	r3, #16
 8000752:	82fb      	strh	r3, [r7, #22]
	uint16_t addr = 0;
 8000754:	2300      	movs	r3, #0
 8000756:	827b      	strh	r3, [r7, #18]
	for (uint8_t i = 0; i < self->len - 2; i++) {
 8000758:	2300      	movs	r3, #0
 800075a:	757b      	strb	r3, [r7, #21]
 800075c:	e01b      	b.n	8000796 <Buffer_check_pec+0x4e>
		addr = ( (remainder >> 7)^Buffer_index(self, i) ) & 0xff;
 800075e:	8afb      	ldrh	r3, [r7, #22]
 8000760:	09db      	lsrs	r3, r3, #7
 8000762:	b29c      	uxth	r4, r3
 8000764:	7d7b      	ldrb	r3, [r7, #21]
 8000766:	4619      	mov	r1, r3
 8000768:	6878      	ldr	r0, [r7, #4]
 800076a:	f7ff ff7b 	bl	8000664 <Buffer_index>
 800076e:	4603      	mov	r3, r0
 8000770:	b29b      	uxth	r3, r3
 8000772:	4063      	eors	r3, r4
 8000774:	b29b      	uxth	r3, r3
 8000776:	b2db      	uxtb	r3, r3
 8000778:	827b      	strh	r3, [r7, #18]
		remainder = (remainder << 8)^_CRC15_LUT[addr];
 800077a:	8afb      	ldrh	r3, [r7, #22]
 800077c:	021b      	lsls	r3, r3, #8
 800077e:	b21a      	sxth	r2, r3
 8000780:	8a7b      	ldrh	r3, [r7, #18]
 8000782:	491b      	ldr	r1, [pc, #108]	; (80007f0 <Buffer_check_pec+0xa8>)
 8000784:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000788:	b21b      	sxth	r3, r3
 800078a:	4053      	eors	r3, r2
 800078c:	b21b      	sxth	r3, r3
 800078e:	82fb      	strh	r3, [r7, #22]
	for (uint8_t i = 0; i < self->len - 2; i++) {
 8000790:	7d7b      	ldrb	r3, [r7, #21]
 8000792:	3301      	adds	r3, #1
 8000794:	757b      	strb	r3, [r7, #21]
 8000796:	7d7a      	ldrb	r2, [r7, #21]
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	781b      	ldrb	r3, [r3, #0]
 800079c:	3b02      	subs	r3, #2
 800079e:	429a      	cmp	r2, r3
 80007a0:	dbdd      	blt.n	800075e <Buffer_check_pec+0x16>
	}
	uint16_t calc_pec = remainder*2;
 80007a2:	8afb      	ldrh	r3, [r7, #22]
 80007a4:	005b      	lsls	r3, r3, #1
 80007a6:	823b      	strh	r3, [r7, #16]
	uint16_t act_pec = ((uint16_t)Buffer_index(self, self->len - 2) << 8) | Buffer_index(self, self->len - 1);
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	781b      	ldrb	r3, [r3, #0]
 80007ac:	3b02      	subs	r3, #2
 80007ae:	b2db      	uxtb	r3, r3
 80007b0:	4619      	mov	r1, r3
 80007b2:	6878      	ldr	r0, [r7, #4]
 80007b4:	f7ff ff56 	bl	8000664 <Buffer_index>
 80007b8:	4603      	mov	r3, r0
 80007ba:	021b      	lsls	r3, r3, #8
 80007bc:	b21c      	sxth	r4, r3
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	781b      	ldrb	r3, [r3, #0]
 80007c2:	3b01      	subs	r3, #1
 80007c4:	b2db      	uxtb	r3, r3
 80007c6:	4619      	mov	r1, r3
 80007c8:	6878      	ldr	r0, [r7, #4]
 80007ca:	f7ff ff4b 	bl	8000664 <Buffer_index>
 80007ce:	4603      	mov	r3, r0
 80007d0:	b21b      	sxth	r3, r3
 80007d2:	4323      	orrs	r3, r4
 80007d4:	b21b      	sxth	r3, r3
 80007d6:	81fb      	strh	r3, [r7, #14]
	return calc_pec == act_pec;
 80007d8:	8a3a      	ldrh	r2, [r7, #16]
 80007da:	89fb      	ldrh	r3, [r7, #14]
 80007dc:	429a      	cmp	r2, r3
 80007de:	bf0c      	ite	eq
 80007e0:	2301      	moveq	r3, #1
 80007e2:	2300      	movne	r3, #0
 80007e4:	b2db      	uxtb	r3, r3
}
 80007e6:	4618      	mov	r0, r3
 80007e8:	371c      	adds	r7, #28
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd90      	pop	{r4, r7, pc}
 80007ee:	bf00      	nop
 80007f0:	08009b54 	.word	0x08009b54

080007f4 <Buffer_print>:

void Buffer_print(Buffer* self) {
 80007f4:	b590      	push	{r4, r7, lr}
 80007f6:	f5ad 7d01 	sub.w	sp, sp, #516	; 0x204
 80007fa:	af00      	add	r7, sp, #0
 80007fc:	1d3b      	adds	r3, r7, #4
 80007fe:	6018      	str	r0, [r3, #0]
	char str[500];
	for (uint8_t i = 0; i < self->len; i++) {
 8000800:	2300      	movs	r3, #0
 8000802:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
 8000806:	e019      	b.n	800083c <Buffer_print+0x48>
		sprintf(str, "pkt byte %d: %d\r\n", i, Buffer_index(self, i));
 8000808:	f897 41ff 	ldrb.w	r4, [r7, #511]	; 0x1ff
 800080c:	f897 21ff 	ldrb.w	r2, [r7, #511]	; 0x1ff
 8000810:	1d3b      	adds	r3, r7, #4
 8000812:	4611      	mov	r1, r2
 8000814:	6818      	ldr	r0, [r3, #0]
 8000816:	f7ff ff25 	bl	8000664 <Buffer_index>
 800081a:	4603      	mov	r3, r0
 800081c:	f107 0008 	add.w	r0, r7, #8
 8000820:	4622      	mov	r2, r4
 8000822:	490e      	ldr	r1, [pc, #56]	; (800085c <Buffer_print+0x68>)
 8000824:	f007 ffc8 	bl	80087b8 <siprintf>
		printf(str);
 8000828:	f107 0308 	add.w	r3, r7, #8
 800082c:	4618      	mov	r0, r3
 800082e:	f007 ff35 	bl	800869c <iprintf>
	for (uint8_t i = 0; i < self->len; i++) {
 8000832:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8000836:	3301      	adds	r3, #1
 8000838:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
 800083c:	1d3b      	adds	r3, r7, #4
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	781b      	ldrb	r3, [r3, #0]
 8000842:	f897 21ff 	ldrb.w	r2, [r7, #511]	; 0x1ff
 8000846:	429a      	cmp	r2, r3
 8000848:	d3de      	bcc.n	8000808 <Buffer_print+0x14>
	}
	printf("\r\n");
 800084a:	4805      	ldr	r0, [pc, #20]	; (8000860 <Buffer_print+0x6c>)
 800084c:	f007 ffac 	bl	80087a8 <puts>
}
 8000850:	bf00      	nop
 8000852:	f507 7701 	add.w	r7, r7, #516	; 0x204
 8000856:	46bd      	mov	sp, r7
 8000858:	bd90      	pop	{r4, r7, pc}
 800085a:	bf00      	nop
 800085c:	08009a40 	.word	0x08009a40
 8000860:	08009a54 	.word	0x08009a54

08000864 <Buffer_clear>:

void Buffer_clear(Buffer* self) {
 8000864:	b580      	push	{r7, lr}
 8000866:	b082      	sub	sp, #8
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
	while (self->len > 0) {
 800086c:	e00e      	b.n	800088c <Buffer_clear+0x28>
		Buffer_set_index(self, self->len - 1, 0);
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	781b      	ldrb	r3, [r3, #0]
 8000872:	3b01      	subs	r3, #1
 8000874:	b2db      	uxtb	r3, r3
 8000876:	2200      	movs	r2, #0
 8000878:	4619      	mov	r1, r3
 800087a:	6878      	ldr	r0, [r7, #4]
 800087c:	f7ff ff07 	bl	800068e <Buffer_set_index>
		self->len = self->len - 1;
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	781b      	ldrb	r3, [r3, #0]
 8000884:	3b01      	subs	r3, #1
 8000886:	b2da      	uxtb	r2, r3
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	701a      	strb	r2, [r3, #0]
	while (self->len > 0) {
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	781b      	ldrb	r3, [r3, #0]
 8000890:	2b00      	cmp	r3, #0
 8000892:	d1ec      	bne.n	800086e <Buffer_clear+0xa>
	}
}
 8000894:	bf00      	nop
 8000896:	bf00      	nop
 8000898:	3708      	adds	r7, #8
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}

0800089e <Ltc6813_init>:
/////////////////////////////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////////////////////////////
// Ltc6813 methods
Ltc6813 Ltc6813_init(SPI_HandleTypeDef spi, GPIO_TypeDef* cs_gpio_port, uint8_t cs_pin_num) {
 800089e:	b084      	sub	sp, #16
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b0b8      	sub	sp, #224	; 0xe0
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6178      	str	r0, [r7, #20]
 80008a8:	f107 00ec 	add.w	r0, r7, #236	; 0xec
 80008ac:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	Ltc6813 slave_device = {};
 80008b0:	f107 031c 	add.w	r3, r7, #28
 80008b4:	22c4      	movs	r2, #196	; 0xc4
 80008b6:	2100      	movs	r1, #0
 80008b8:	4618      	mov	r0, r3
 80008ba:	f007 fee7 	bl	800868c <memset>
	slave_device._spi_interface = spi;
 80008be:	f107 031c 	add.w	r3, r7, #28
 80008c2:	f107 01ec 	add.w	r1, r7, #236	; 0xec
 80008c6:	2258      	movs	r2, #88	; 0x58
 80008c8:	4618      	mov	r0, r3
 80008ca:	f007 fed1 	bl	8008670 <memcpy>

	// config CS pin as GPIO output
	cs_gpio_port->MODER &= ~(0b11u << (cs_pin_num*2));
 80008ce:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80008d2:	681a      	ldr	r2, [r3, #0]
 80008d4:	f897 3148 	ldrb.w	r3, [r7, #328]	; 0x148
 80008d8:	005b      	lsls	r3, r3, #1
 80008da:	2103      	movs	r1, #3
 80008dc:	fa01 f303 	lsl.w	r3, r1, r3
 80008e0:	43db      	mvns	r3, r3
 80008e2:	401a      	ands	r2, r3
 80008e4:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80008e8:	601a      	str	r2, [r3, #0]
	cs_gpio_port->MODER |= (0b01u << (cs_pin_num*2));
 80008ea:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80008ee:	681a      	ldr	r2, [r3, #0]
 80008f0:	f897 3148 	ldrb.w	r3, [r7, #328]	; 0x148
 80008f4:	005b      	lsls	r3, r3, #1
 80008f6:	2101      	movs	r1, #1
 80008f8:	fa01 f303 	lsl.w	r3, r1, r3
 80008fc:	431a      	orrs	r2, r3
 80008fe:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8000902:	601a      	str	r2, [r3, #0]

	slave_device._cs_gpio_port = cs_gpio_port;
 8000904:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8000908:	677b      	str	r3, [r7, #116]	; 0x74
	slave_device._cs_pin_num = cs_pin_num;
 800090a:	f897 3148 	ldrb.w	r3, [r7, #328]	; 0x148
 800090e:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

	slave_device.cmd_bfr = Buffer_init();
 8000912:	463b      	mov	r3, r7
 8000914:	4618      	mov	r0, r3
 8000916:	f7ff fe6d 	bl	80005f4 <Buffer_init>
 800091a:	f107 0379 	add.w	r3, r7, #121	; 0x79
 800091e:	463a      	mov	r2, r7
 8000920:	6810      	ldr	r0, [r2, #0]
 8000922:	6851      	ldr	r1, [r2, #4]
 8000924:	6018      	str	r0, [r3, #0]
 8000926:	6059      	str	r1, [r3, #4]
 8000928:	8911      	ldrh	r1, [r2, #8]
 800092a:	7a92      	ldrb	r2, [r2, #10]
 800092c:	8119      	strh	r1, [r3, #8]
 800092e:	729a      	strb	r2, [r3, #10]

	slave_device.cfga_bfr = Buffer_init();
 8000930:	463b      	mov	r3, r7
 8000932:	4618      	mov	r0, r3
 8000934:	f7ff fe5e 	bl	80005f4 <Buffer_init>
 8000938:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800093c:	463a      	mov	r2, r7
 800093e:	6810      	ldr	r0, [r2, #0]
 8000940:	6851      	ldr	r1, [r2, #4]
 8000942:	c303      	stmia	r3!, {r0, r1}
 8000944:	8911      	ldrh	r1, [r2, #8]
 8000946:	7a92      	ldrb	r2, [r2, #10]
 8000948:	8019      	strh	r1, [r3, #0]
 800094a:	709a      	strb	r2, [r3, #2]
	slave_device.cfgb_bfr = Buffer_init();
 800094c:	463b      	mov	r3, r7
 800094e:	4618      	mov	r0, r3
 8000950:	f7ff fe50 	bl	80005f4 <Buffer_init>
 8000954:	f107 038f 	add.w	r3, r7, #143	; 0x8f
 8000958:	463a      	mov	r2, r7
 800095a:	6810      	ldr	r0, [r2, #0]
 800095c:	6851      	ldr	r1, [r2, #4]
 800095e:	6018      	str	r0, [r3, #0]
 8000960:	6059      	str	r1, [r3, #4]
 8000962:	8911      	ldrh	r1, [r2, #8]
 8000964:	7a92      	ldrb	r2, [r2, #10]
 8000966:	8119      	strh	r1, [r3, #8]
 8000968:	729a      	strb	r2, [r3, #10]

	slave_device.cva_bfr = Buffer_init();
 800096a:	463b      	mov	r3, r7
 800096c:	4618      	mov	r0, r3
 800096e:	f7ff fe41 	bl	80005f4 <Buffer_init>
 8000972:	f107 039a 	add.w	r3, r7, #154	; 0x9a
 8000976:	463a      	mov	r2, r7
 8000978:	6810      	ldr	r0, [r2, #0]
 800097a:	6851      	ldr	r1, [r2, #4]
 800097c:	6018      	str	r0, [r3, #0]
 800097e:	6059      	str	r1, [r3, #4]
 8000980:	8911      	ldrh	r1, [r2, #8]
 8000982:	7a92      	ldrb	r2, [r2, #10]
 8000984:	8119      	strh	r1, [r3, #8]
 8000986:	729a      	strb	r2, [r3, #10]
	slave_device.cvb_bfr = Buffer_init();
 8000988:	463b      	mov	r3, r7
 800098a:	4618      	mov	r0, r3
 800098c:	f7ff fe32 	bl	80005f4 <Buffer_init>
 8000990:	f107 03a5 	add.w	r3, r7, #165	; 0xa5
 8000994:	463a      	mov	r2, r7
 8000996:	6810      	ldr	r0, [r2, #0]
 8000998:	6851      	ldr	r1, [r2, #4]
 800099a:	6018      	str	r0, [r3, #0]
 800099c:	6059      	str	r1, [r3, #4]
 800099e:	8911      	ldrh	r1, [r2, #8]
 80009a0:	7a92      	ldrb	r2, [r2, #10]
 80009a2:	8119      	strh	r1, [r3, #8]
 80009a4:	729a      	strb	r2, [r3, #10]
	slave_device.cvc_bfr = Buffer_init();
 80009a6:	463b      	mov	r3, r7
 80009a8:	4618      	mov	r0, r3
 80009aa:	f7ff fe23 	bl	80005f4 <Buffer_init>
 80009ae:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80009b2:	463a      	mov	r2, r7
 80009b4:	6810      	ldr	r0, [r2, #0]
 80009b6:	6851      	ldr	r1, [r2, #4]
 80009b8:	c303      	stmia	r3!, {r0, r1}
 80009ba:	8911      	ldrh	r1, [r2, #8]
 80009bc:	7a92      	ldrb	r2, [r2, #10]
 80009be:	8019      	strh	r1, [r3, #0]
 80009c0:	709a      	strb	r2, [r3, #2]
	slave_device.cvd_bfr = Buffer_init();
 80009c2:	463b      	mov	r3, r7
 80009c4:	4618      	mov	r0, r3
 80009c6:	f7ff fe15 	bl	80005f4 <Buffer_init>
 80009ca:	f107 03bb 	add.w	r3, r7, #187	; 0xbb
 80009ce:	463a      	mov	r2, r7
 80009d0:	6810      	ldr	r0, [r2, #0]
 80009d2:	6851      	ldr	r1, [r2, #4]
 80009d4:	6018      	str	r0, [r3, #0]
 80009d6:	6059      	str	r1, [r3, #4]
 80009d8:	8911      	ldrh	r1, [r2, #8]
 80009da:	7a92      	ldrb	r2, [r2, #10]
 80009dc:	8119      	strh	r1, [r3, #8]
 80009de:	729a      	strb	r2, [r3, #10]
	slave_device.cve_bfr = Buffer_init();
 80009e0:	463b      	mov	r3, r7
 80009e2:	4618      	mov	r0, r3
 80009e4:	f7ff fe06 	bl	80005f4 <Buffer_init>
 80009e8:	f107 03c6 	add.w	r3, r7, #198	; 0xc6
 80009ec:	463a      	mov	r2, r7
 80009ee:	6810      	ldr	r0, [r2, #0]
 80009f0:	6851      	ldr	r1, [r2, #4]
 80009f2:	6018      	str	r0, [r3, #0]
 80009f4:	6059      	str	r1, [r3, #4]
 80009f6:	8911      	ldrh	r1, [r2, #8]
 80009f8:	7a92      	ldrb	r2, [r2, #10]
 80009fa:	8119      	strh	r1, [r3, #8]
 80009fc:	729a      	strb	r2, [r3, #10]
	slave_device.cvf_bfr = Buffer_init();
 80009fe:	463b      	mov	r3, r7
 8000a00:	4618      	mov	r0, r3
 8000a02:	f7ff fdf7 	bl	80005f4 <Buffer_init>
 8000a06:	f107 03d1 	add.w	r3, r7, #209	; 0xd1
 8000a0a:	463a      	mov	r2, r7
 8000a0c:	6810      	ldr	r0, [r2, #0]
 8000a0e:	6851      	ldr	r1, [r2, #4]
 8000a10:	6018      	str	r0, [r3, #0]
 8000a12:	6059      	str	r1, [r3, #4]
 8000a14:	8911      	ldrh	r1, [r2, #8]
 8000a16:	7a92      	ldrb	r2, [r2, #10]
 8000a18:	8119      	strh	r1, [r3, #8]
 8000a1a:	729a      	strb	r2, [r3, #10]

	slave_device.timeout = 10000;
 8000a1c:	f242 7310 	movw	r3, #10000	; 0x2710
 8000a20:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

	Ltc6813_cs_high(&slave_device);
 8000a24:	f107 031c 	add.w	r3, r7, #28
 8000a28:	4618      	mov	r0, r3
 8000a2a:	f000 f824 	bl	8000a76 <Ltc6813_cs_high>

	return slave_device;
 8000a2e:	697b      	ldr	r3, [r7, #20]
 8000a30:	4618      	mov	r0, r3
 8000a32:	f107 031c 	add.w	r3, r7, #28
 8000a36:	22c4      	movs	r2, #196	; 0xc4
 8000a38:	4619      	mov	r1, r3
 8000a3a:	f007 fe19 	bl	8008670 <memcpy>
}
 8000a3e:	6978      	ldr	r0, [r7, #20]
 8000a40:	37e0      	adds	r7, #224	; 0xe0
 8000a42:	46bd      	mov	sp, r7
 8000a44:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000a48:	b004      	add	sp, #16
 8000a4a:	4770      	bx	lr

08000a4c <Ltc6813_cs_low>:

void Ltc6813_cs_low(Ltc6813* self) { HAL_GPIO_WritePin(self->_cs_gpio_port, (1u << self->_cs_pin_num), 0); }
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b082      	sub	sp, #8
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8000a5e:	461a      	mov	r2, r3
 8000a60:	2301      	movs	r3, #1
 8000a62:	4093      	lsls	r3, r2
 8000a64:	b29b      	uxth	r3, r3
 8000a66:	2200      	movs	r2, #0
 8000a68:	4619      	mov	r1, r3
 8000a6a:	f002 f807 	bl	8002a7c <HAL_GPIO_WritePin>
 8000a6e:	bf00      	nop
 8000a70:	3708      	adds	r7, #8
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bd80      	pop	{r7, pc}

08000a76 <Ltc6813_cs_high>:
void Ltc6813_cs_high(Ltc6813* self) { HAL_GPIO_WritePin(self->_cs_gpio_port, (1u << self->_cs_pin_num), 1); }
 8000a76:	b580      	push	{r7, lr}
 8000a78:	b082      	sub	sp, #8
 8000a7a:	af00      	add	r7, sp, #0
 8000a7c:	6078      	str	r0, [r7, #4]
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8000a88:	461a      	mov	r2, r3
 8000a8a:	2301      	movs	r3, #1
 8000a8c:	4093      	lsls	r3, r2
 8000a8e:	b29b      	uxth	r3, r3
 8000a90:	2201      	movs	r2, #1
 8000a92:	4619      	mov	r1, r3
 8000a94:	f001 fff2 	bl	8002a7c <HAL_GPIO_WritePin>
 8000a98:	bf00      	nop
 8000a9a:	3708      	adds	r7, #8
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	bd80      	pop	{r7, pc}

08000aa0 <Ltc6813_wakeup_sleep>:

// WAKEUP FUNCTIONS:
// setting CS low will send a long isoSPI pulse (reference: page 18 of LTC6820 datasheet)
void Ltc6813_wakeup_sleep(Ltc6813* self) {
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b082      	sub	sp, #8
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
	Ltc6813_cs_low(self);
 8000aa8:	6878      	ldr	r0, [r7, #4]
 8000aaa:	f7ff ffcf 	bl	8000a4c <Ltc6813_cs_low>
	delay_us(410);		// according to datasheet, t_wake = 400us
 8000aae:	f44f 70cd 	mov.w	r0, #410	; 0x19a
 8000ab2:	f001 f8b9 	bl	8001c28 <delay_us>
	Ltc6813_cs_high(self);
 8000ab6:	6878      	ldr	r0, [r7, #4]
 8000ab8:	f7ff ffdd 	bl	8000a76 <Ltc6813_cs_high>
	delay_us(30);
 8000abc:	201e      	movs	r0, #30
 8000abe:	f001 f8b3 	bl	8001c28 <delay_us>
}
 8000ac2:	bf00      	nop
 8000ac4:	3708      	adds	r7, #8
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd80      	pop	{r7, pc}
	...

08000acc <Ltc6813_print_voltages>:
	Ltc6813_cs_low(self);
	delay_us(20);		// according to datasheet, t_wake = 10us
	Ltc6813_cs_high(self);
}

void Ltc6813_print_voltages(Ltc6813* self) {
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b082      	sub	sp, #8
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]

	printf("PRINTING CVA\r\n");
 8000ad4:	4819      	ldr	r0, [pc, #100]	; (8000b3c <Ltc6813_print_voltages+0x70>)
 8000ad6:	f007 fe67 	bl	80087a8 <puts>
	Buffer_print(&(self->cva_bfr));
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	337e      	adds	r3, #126	; 0x7e
 8000ade:	4618      	mov	r0, r3
 8000ae0:	f7ff fe88 	bl	80007f4 <Buffer_print>

	printf("PRINTING CVB\r\n");
 8000ae4:	4816      	ldr	r0, [pc, #88]	; (8000b40 <Ltc6813_print_voltages+0x74>)
 8000ae6:	f007 fe5f 	bl	80087a8 <puts>
	Buffer_print(&(self->cvb_bfr));
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	3389      	adds	r3, #137	; 0x89
 8000aee:	4618      	mov	r0, r3
 8000af0:	f7ff fe80 	bl	80007f4 <Buffer_print>

	printf("PRINTING CVC\r\n");
 8000af4:	4813      	ldr	r0, [pc, #76]	; (8000b44 <Ltc6813_print_voltages+0x78>)
 8000af6:	f007 fe57 	bl	80087a8 <puts>
	Buffer_print(&(self->cvc_bfr));
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	3394      	adds	r3, #148	; 0x94
 8000afe:	4618      	mov	r0, r3
 8000b00:	f7ff fe78 	bl	80007f4 <Buffer_print>

	printf("PRINTING CVD\r\n");
 8000b04:	4810      	ldr	r0, [pc, #64]	; (8000b48 <Ltc6813_print_voltages+0x7c>)
 8000b06:	f007 fe4f 	bl	80087a8 <puts>
	Buffer_print(&(self->cvd_bfr));
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	339f      	adds	r3, #159	; 0x9f
 8000b0e:	4618      	mov	r0, r3
 8000b10:	f7ff fe70 	bl	80007f4 <Buffer_print>

	printf("PRINTING CVE\r\n");
 8000b14:	480d      	ldr	r0, [pc, #52]	; (8000b4c <Ltc6813_print_voltages+0x80>)
 8000b16:	f007 fe47 	bl	80087a8 <puts>
	Buffer_print(&(self->cve_bfr));
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	33aa      	adds	r3, #170	; 0xaa
 8000b1e:	4618      	mov	r0, r3
 8000b20:	f7ff fe68 	bl	80007f4 <Buffer_print>

	printf("PRINTING CVF\r\n");
 8000b24:	480a      	ldr	r0, [pc, #40]	; (8000b50 <Ltc6813_print_voltages+0x84>)
 8000b26:	f007 fe3f 	bl	80087a8 <puts>
	Buffer_print(&(self->cvf_bfr));
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	33b5      	adds	r3, #181	; 0xb5
 8000b2e:	4618      	mov	r0, r3
 8000b30:	f7ff fe60 	bl	80007f4 <Buffer_print>

}
 8000b34:	bf00      	nop
 8000b36:	3708      	adds	r7, #8
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bd80      	pop	{r7, pc}
 8000b3c:	08009a58 	.word	0x08009a58
 8000b40:	08009a68 	.word	0x08009a68
 8000b44:	08009a78 	.word	0x08009a78
 8000b48:	08009a88 	.word	0x08009a88
 8000b4c:	08009a98 	.word	0x08009a98
 8000b50:	08009aa8 	.word	0x08009aa8

08000b54 <Ltc6813_send_cmd>:

// READ COMMAND FUNCTIONS:
// commands to send read commands and receive data back (page 60 of LTC6813 datasheet)
void Ltc6813_send_cmd(Ltc6813* self, uint16_t cmd) {
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b082      	sub	sp, #8
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
 8000b5c:	460b      	mov	r3, r1
 8000b5e:	807b      	strh	r3, [r7, #2]
	Buffer_clear(&self->cmd_bfr);
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	335d      	adds	r3, #93	; 0x5d
 8000b64:	4618      	mov	r0, r3
 8000b66:	f7ff fe7d 	bl	8000864 <Buffer_clear>

	Buffer_append(&self->cmd_bfr, (cmd >> 8) & 0xff);
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	f103 025d 	add.w	r2, r3, #93	; 0x5d
 8000b70:	887b      	ldrh	r3, [r7, #2]
 8000b72:	0a1b      	lsrs	r3, r3, #8
 8000b74:	b29b      	uxth	r3, r3
 8000b76:	b2db      	uxtb	r3, r3
 8000b78:	4619      	mov	r1, r3
 8000b7a:	4610      	mov	r0, r2
 8000b7c:	f7ff fd58 	bl	8000630 <Buffer_append>
	Buffer_append(&self->cmd_bfr, cmd & 0xff);
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	335d      	adds	r3, #93	; 0x5d
 8000b84:	887a      	ldrh	r2, [r7, #2]
 8000b86:	b2d2      	uxtb	r2, r2
 8000b88:	4611      	mov	r1, r2
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	f7ff fd50 	bl	8000630 <Buffer_append>

	Buffer_add_pec(&self->cmd_bfr);
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	335d      	adds	r3, #93	; 0x5d
 8000b94:	4618      	mov	r0, r3
 8000b96:	f7ff fd93 	bl	80006c0 <Buffer_add_pec>

	HAL_SPI_Transmit(&self->_spi_interface, self->cmd_bfr.data, self->cmd_bfr.len, self->timeout);
 8000b9a:	6878      	ldr	r0, [r7, #4]
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	f103 015e 	add.w	r1, r3, #94	; 0x5e
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8000ba8:	b29a      	uxth	r2, r3
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8000bb0:	f002 fcc5 	bl	800353e <HAL_SPI_Transmit>
}
 8000bb4:	bf00      	nop
 8000bb6:	3708      	adds	r7, #8
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bd80      	pop	{r7, pc}

08000bbc <Ltc6813_read_reg>:

uint8_t Ltc6813_read_reg(Ltc6813* self, uint8_t reg_cmd) {
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b084      	sub	sp, #16
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
 8000bc4:	460b      	mov	r3, r1
 8000bc6:	70fb      	strb	r3, [r7, #3]

	Buffer* reg_buf;

	switch (reg_cmd) {
 8000bc8:	78fb      	ldrb	r3, [r7, #3]
 8000bca:	3b02      	subs	r3, #2
 8000bcc:	2b24      	cmp	r3, #36	; 0x24
 8000bce:	d86d      	bhi.n	8000cac <Ltc6813_read_reg+0xf0>
 8000bd0:	a201      	add	r2, pc, #4	; (adr r2, 8000bd8 <Ltc6813_read_reg+0x1c>)
 8000bd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bd6:	bf00      	nop
 8000bd8:	08000c6d 	.word	0x08000c6d
 8000bdc:	08000cad 	.word	0x08000cad
 8000be0:	08000c7d 	.word	0x08000c7d
 8000be4:	08000cad 	.word	0x08000cad
 8000be8:	08000c85 	.word	0x08000c85
 8000bec:	08000cad 	.word	0x08000cad
 8000bf0:	08000c8d 	.word	0x08000c8d
 8000bf4:	08000c9d 	.word	0x08000c9d
 8000bf8:	08000c95 	.word	0x08000c95
 8000bfc:	08000ca5 	.word	0x08000ca5
 8000c00:	08000cad 	.word	0x08000cad
 8000c04:	08000cad 	.word	0x08000cad
 8000c08:	08000cad 	.word	0x08000cad
 8000c0c:	08000cad 	.word	0x08000cad
 8000c10:	08000cad 	.word	0x08000cad
 8000c14:	08000cad 	.word	0x08000cad
 8000c18:	08000cad 	.word	0x08000cad
 8000c1c:	08000cad 	.word	0x08000cad
 8000c20:	08000cad 	.word	0x08000cad
 8000c24:	08000cad 	.word	0x08000cad
 8000c28:	08000cad 	.word	0x08000cad
 8000c2c:	08000cad 	.word	0x08000cad
 8000c30:	08000cad 	.word	0x08000cad
 8000c34:	08000cad 	.word	0x08000cad
 8000c38:	08000cad 	.word	0x08000cad
 8000c3c:	08000cad 	.word	0x08000cad
 8000c40:	08000cad 	.word	0x08000cad
 8000c44:	08000cad 	.word	0x08000cad
 8000c48:	08000cad 	.word	0x08000cad
 8000c4c:	08000cad 	.word	0x08000cad
 8000c50:	08000cad 	.word	0x08000cad
 8000c54:	08000cad 	.word	0x08000cad
 8000c58:	08000cad 	.word	0x08000cad
 8000c5c:	08000cad 	.word	0x08000cad
 8000c60:	08000cad 	.word	0x08000cad
 8000c64:	08000cad 	.word	0x08000cad
 8000c68:	08000c75 	.word	0x08000c75
		case RDCFGA:
			reg_buf = &(self->cfga_bfr);
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	3368      	adds	r3, #104	; 0x68
 8000c70:	60fb      	str	r3, [r7, #12]
			break;
 8000c72:	e01c      	b.n	8000cae <Ltc6813_read_reg+0xf2>
		case RDCFGB:
			reg_buf = &(self->cfgb_bfr);
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	3373      	adds	r3, #115	; 0x73
 8000c78:	60fb      	str	r3, [r7, #12]
			break;
 8000c7a:	e018      	b.n	8000cae <Ltc6813_read_reg+0xf2>
		case RDCVA:
			reg_buf = &(self->cva_bfr);
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	337e      	adds	r3, #126	; 0x7e
 8000c80:	60fb      	str	r3, [r7, #12]
			break;
 8000c82:	e014      	b.n	8000cae <Ltc6813_read_reg+0xf2>
		case RDCVB:
			reg_buf = &(self->cvb_bfr);
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	3389      	adds	r3, #137	; 0x89
 8000c88:	60fb      	str	r3, [r7, #12]
			break;
 8000c8a:	e010      	b.n	8000cae <Ltc6813_read_reg+0xf2>
		case RDCVC:
			reg_buf = &(self->cvc_bfr);
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	3394      	adds	r3, #148	; 0x94
 8000c90:	60fb      	str	r3, [r7, #12]
			break;
 8000c92:	e00c      	b.n	8000cae <Ltc6813_read_reg+0xf2>
		case RDCVD:
			reg_buf = &(self->cvd_bfr);
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	339f      	adds	r3, #159	; 0x9f
 8000c98:	60fb      	str	r3, [r7, #12]
			break;
 8000c9a:	e008      	b.n	8000cae <Ltc6813_read_reg+0xf2>
		case RDCVE:
			reg_buf = &(self->cve_bfr);
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	33aa      	adds	r3, #170	; 0xaa
 8000ca0:	60fb      	str	r3, [r7, #12]
			break;
 8000ca2:	e004      	b.n	8000cae <Ltc6813_read_reg+0xf2>
		case RDCVF:
			reg_buf = &(self->cvf_bfr);
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	33b5      	adds	r3, #181	; 0xb5
 8000ca8:	60fb      	str	r3, [r7, #12]
			break;
 8000caa:	e000      	b.n	8000cae <Ltc6813_read_reg+0xf2>
		default:
			break;
 8000cac:	bf00      	nop
	}

	Buffer_clear(reg_buf);
 8000cae:	68f8      	ldr	r0, [r7, #12]
 8000cb0:	f7ff fdd8 	bl	8000864 <Buffer_clear>

	reg_buf->len = 8;
 8000cb4:	68fb      	ldr	r3, [r7, #12]
 8000cb6:	2208      	movs	r2, #8
 8000cb8:	701a      	strb	r2, [r3, #0]

	Ltc6813_cs_low(self);
 8000cba:	6878      	ldr	r0, [r7, #4]
 8000cbc:	f7ff fec6 	bl	8000a4c <Ltc6813_cs_low>

	Ltc6813_send_cmd(self, reg_cmd);
 8000cc0:	78fb      	ldrb	r3, [r7, #3]
 8000cc2:	b29b      	uxth	r3, r3
 8000cc4:	4619      	mov	r1, r3
 8000cc6:	6878      	ldr	r0, [r7, #4]
 8000cc8:	f7ff ff44 	bl	8000b54 <Ltc6813_send_cmd>
	HAL_SPI_Receive(&self->_spi_interface, reg_buf->data, reg_buf->len, self->timeout);
 8000ccc:	6878      	ldr	r0, [r7, #4]
 8000cce:	68fb      	ldr	r3, [r7, #12]
 8000cd0:	1c59      	adds	r1, r3, #1
 8000cd2:	68fb      	ldr	r3, [r7, #12]
 8000cd4:	781b      	ldrb	r3, [r3, #0]
 8000cd6:	b29a      	uxth	r2, r3
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8000cde:	f002 fd6a 	bl	80037b6 <HAL_SPI_Receive>

	Ltc6813_cs_high(self);
 8000ce2:	6878      	ldr	r0, [r7, #4]
 8000ce4:	f7ff fec7 	bl	8000a76 <Ltc6813_cs_high>

	uint8_t pec_success = Buffer_check_pec(reg_buf);
 8000ce8:	68f8      	ldr	r0, [r7, #12]
 8000cea:	f7ff fd2d 	bl	8000748 <Buffer_check_pec>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	72fb      	strb	r3, [r7, #11]
	reg_buf->len = 6;
 8000cf2:	68fb      	ldr	r3, [r7, #12]
 8000cf4:	2206      	movs	r2, #6
 8000cf6:	701a      	strb	r2, [r3, #0]

	return pec_success;
 8000cf8:	7afb      	ldrb	r3, [r7, #11]

}
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	3710      	adds	r7, #16
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	bf00      	nop

08000d04 <Ltc6813_read_cfga>:

uint8_t Ltc6813_read_cfga(Ltc6813* self) {
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b082      	sub	sp, #8
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
	return Ltc6813_read_reg(self, RDCFGA);
 8000d0c:	2102      	movs	r1, #2
 8000d0e:	6878      	ldr	r0, [r7, #4]
 8000d10:	f7ff ff54 	bl	8000bbc <Ltc6813_read_reg>
 8000d14:	4603      	mov	r3, r0
}
 8000d16:	4618      	mov	r0, r3
 8000d18:	3708      	adds	r7, #8
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}

08000d1e <Ltc6813_write_cfga>:

uint8_t Ltc6813_read_cfgb(Ltc6813* self) {
	return Ltc6813_read_reg(self, RDCFGB);
}

void Ltc6813_write_cfga(Ltc6813* self) {
 8000d1e:	b580      	push	{r7, lr}
 8000d20:	b082      	sub	sp, #8
 8000d22:	af00      	add	r7, sp, #0
 8000d24:	6078      	str	r0, [r7, #4]

	Buffer_add_pec(&(self->cfga_bfr));
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	3368      	adds	r3, #104	; 0x68
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	f7ff fcc8 	bl	80006c0 <Buffer_add_pec>

	Ltc6813_cs_low(self);
 8000d30:	6878      	ldr	r0, [r7, #4]
 8000d32:	f7ff fe8b 	bl	8000a4c <Ltc6813_cs_low>

	Ltc6813_send_cmd(self, WRCFGA);
 8000d36:	2101      	movs	r1, #1
 8000d38:	6878      	ldr	r0, [r7, #4]
 8000d3a:	f7ff ff0b 	bl	8000b54 <Ltc6813_send_cmd>
	HAL_SPI_Transmit(&self->_spi_interface, self->cfga_bfr.data, self->cfga_bfr.len, self->timeout);
 8000d3e:	6878      	ldr	r0, [r7, #4]
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	f103 0169 	add.w	r1, r3, #105	; 0x69
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8000d4c:	b29a      	uxth	r2, r3
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8000d54:	f002 fbf3 	bl	800353e <HAL_SPI_Transmit>

	Ltc6813_cs_high(self);
 8000d58:	6878      	ldr	r0, [r7, #4]
 8000d5a:	f7ff fe8c 	bl	8000a76 <Ltc6813_cs_high>

	self->cfga_bfr.len = 6;
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	2206      	movs	r2, #6
 8000d62:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
}
 8000d66:	bf00      	nop
 8000d68:	3708      	adds	r7, #8
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}

08000d6e <Ltc6813_read_adc>:

uint8_t Ltc6813_read_adc(Ltc6813* self, uint16_t mode) {
 8000d6e:	b580      	push	{r7, lr}
 8000d70:	b084      	sub	sp, #16
 8000d72:	af00      	add	r7, sp, #0
 8000d74:	6078      	str	r0, [r7, #4]
 8000d76:	460b      	mov	r3, r1
 8000d78:	807b      	strh	r3, [r7, #2]

	// Enter REFUP by waiting t(refup). Should be 4.4 ms, but can only delay integer ticks (1ms/tick)
	osDelay(5);
 8000d7a:	2005      	movs	r0, #5
 8000d7c:	f004 ffd8 	bl	8005d30 <osDelay>

	Ltc6813_cs_low(self);
 8000d80:	6878      	ldr	r0, [r7, #4]
 8000d82:	f7ff fe63 	bl	8000a4c <Ltc6813_cs_low>

	Ltc6813_send_cmd(self, mode);
 8000d86:	887b      	ldrh	r3, [r7, #2]
 8000d88:	4619      	mov	r1, r3
 8000d8a:	6878      	ldr	r0, [r7, #4]
 8000d8c:	f7ff fee2 	bl	8000b54 <Ltc6813_send_cmd>

	uint32_t delay = FILTERED_ADC_DELAY;
 8000d90:	23ca      	movs	r3, #202	; 0xca
 8000d92:	60fb      	str	r3, [r7, #12]

	if (mode == FAST_ADC) {
 8000d94:	887b      	ldrh	r3, [r7, #2]
 8000d96:	f5b3 7f38 	cmp.w	r3, #736	; 0x2e0
 8000d9a:	d102      	bne.n	8000da2 <Ltc6813_read_adc+0x34>
		delay = FAST_ADC_DELAY;
 8000d9c:	2302      	movs	r3, #2
 8000d9e:	60fb      	str	r3, [r7, #12]
 8000da0:	e00c      	b.n	8000dbc <Ltc6813_read_adc+0x4e>
	} else if (mode == NORMAL_ADC) {
 8000da2:	887b      	ldrh	r3, [r7, #2]
 8000da4:	f5b3 7f58 	cmp.w	r3, #864	; 0x360
 8000da8:	d102      	bne.n	8000db0 <Ltc6813_read_adc+0x42>
		delay = NORMAL_ADC_DELAY;
 8000daa:	2303      	movs	r3, #3
 8000dac:	60fb      	str	r3, [r7, #12]
 8000dae:	e005      	b.n	8000dbc <Ltc6813_read_adc+0x4e>
	} else if (mode == FILTERED_ADC) {
 8000db0:	887b      	ldrh	r3, [r7, #2]
 8000db2:	f5b3 7f78 	cmp.w	r3, #992	; 0x3e0
 8000db6:	d101      	bne.n	8000dbc <Ltc6813_read_adc+0x4e>
		delay = FILTERED_ADC_DELAY;
 8000db8:	23ca      	movs	r3, #202	; 0xca
 8000dba:	60fb      	str	r3, [r7, #12]
	}

	osDelay(delay);
 8000dbc:	68f8      	ldr	r0, [r7, #12]
 8000dbe:	f004 ffb7 	bl	8005d30 <osDelay>

	uint8_t success = 1;
 8000dc2:	2301      	movs	r3, #1
 8000dc4:	72fb      	strb	r3, [r7, #11]

	success &= Ltc6813_read_reg(self, RDCVA);
 8000dc6:	2104      	movs	r1, #4
 8000dc8:	6878      	ldr	r0, [r7, #4]
 8000dca:	f7ff fef7 	bl	8000bbc <Ltc6813_read_reg>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	461a      	mov	r2, r3
 8000dd2:	7afb      	ldrb	r3, [r7, #11]
 8000dd4:	4013      	ands	r3, r2
 8000dd6:	72fb      	strb	r3, [r7, #11]
	success &= Ltc6813_read_reg(self, RDCVB);
 8000dd8:	2106      	movs	r1, #6
 8000dda:	6878      	ldr	r0, [r7, #4]
 8000ddc:	f7ff feee 	bl	8000bbc <Ltc6813_read_reg>
 8000de0:	4603      	mov	r3, r0
 8000de2:	461a      	mov	r2, r3
 8000de4:	7afb      	ldrb	r3, [r7, #11]
 8000de6:	4013      	ands	r3, r2
 8000de8:	72fb      	strb	r3, [r7, #11]
	success &= Ltc6813_read_reg(self, RDCVC);
 8000dea:	2108      	movs	r1, #8
 8000dec:	6878      	ldr	r0, [r7, #4]
 8000dee:	f7ff fee5 	bl	8000bbc <Ltc6813_read_reg>
 8000df2:	4603      	mov	r3, r0
 8000df4:	461a      	mov	r2, r3
 8000df6:	7afb      	ldrb	r3, [r7, #11]
 8000df8:	4013      	ands	r3, r2
 8000dfa:	72fb      	strb	r3, [r7, #11]
	success &= Ltc6813_read_reg(self, RDCVD);
 8000dfc:	210a      	movs	r1, #10
 8000dfe:	6878      	ldr	r0, [r7, #4]
 8000e00:	f7ff fedc 	bl	8000bbc <Ltc6813_read_reg>
 8000e04:	4603      	mov	r3, r0
 8000e06:	461a      	mov	r2, r3
 8000e08:	7afb      	ldrb	r3, [r7, #11]
 8000e0a:	4013      	ands	r3, r2
 8000e0c:	72fb      	strb	r3, [r7, #11]
	success &= Ltc6813_read_reg(self, RDCVE);
 8000e0e:	2109      	movs	r1, #9
 8000e10:	6878      	ldr	r0, [r7, #4]
 8000e12:	f7ff fed3 	bl	8000bbc <Ltc6813_read_reg>
 8000e16:	4603      	mov	r3, r0
 8000e18:	461a      	mov	r2, r3
 8000e1a:	7afb      	ldrb	r3, [r7, #11]
 8000e1c:	4013      	ands	r3, r2
 8000e1e:	72fb      	strb	r3, [r7, #11]
	success &= Ltc6813_read_reg(self, RDCVF);
 8000e20:	210b      	movs	r1, #11
 8000e22:	6878      	ldr	r0, [r7, #4]
 8000e24:	f7ff feca 	bl	8000bbc <Ltc6813_read_reg>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	461a      	mov	r2, r3
 8000e2c:	7afb      	ldrb	r3, [r7, #11]
 8000e2e:	4013      	ands	r3, r2
 8000e30:	72fb      	strb	r3, [r7, #11]

	return success;
 8000e32:	7afb      	ldrb	r3, [r7, #11]

}
 8000e34:	4618      	mov	r0, r3
 8000e36:	3710      	adds	r7, #16
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bd80      	pop	{r7, pc}

08000e3c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e40:	f000 fffe 	bl	8001e40 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e44:	f000 f816 	bl	8000e74 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e48:	f000 fae4 	bl	8001414 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000e4c:	f000 f9fc 	bl	8001248 <MX_TIM2_Init>
  MX_ADC1_Init();
 8000e50:	f000 f87a 	bl	8000f48 <MX_ADC1_Init>
  MX_SPI1_Init();
 8000e54:	f000 f900 	bl	8001058 <MX_SPI1_Init>
  MX_TIM1_Init();
 8000e58:	f000 f934 	bl	80010c4 <MX_TIM1_Init>
  MX_TIM3_Init();
 8000e5c:	f000 fa40 	bl	80012e0 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8000e60:	f000 faae 	bl	80013c0 <MX_USART1_UART_Init>
  MX_CAN1_Init();
 8000e64:	f000 f8c2 	bl	8000fec <MX_CAN1_Init>
  /* USER CODE BEGIN 2 */
  return bms_entry();
 8000e68:	f7ff fb90 	bl	800058c <bms_entry>
 8000e6c:	4603      	mov	r3, r0
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}
 8000e6e:	4618      	mov	r0, r3
 8000e70:	bd80      	pop	{r7, pc}
	...

08000e74 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b094      	sub	sp, #80	; 0x50
 8000e78:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e7a:	f107 0320 	add.w	r3, r7, #32
 8000e7e:	2230      	movs	r2, #48	; 0x30
 8000e80:	2100      	movs	r1, #0
 8000e82:	4618      	mov	r0, r3
 8000e84:	f007 fc02 	bl	800868c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e88:	f107 030c 	add.w	r3, r7, #12
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	601a      	str	r2, [r3, #0]
 8000e90:	605a      	str	r2, [r3, #4]
 8000e92:	609a      	str	r2, [r3, #8]
 8000e94:	60da      	str	r2, [r3, #12]
 8000e96:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e98:	2300      	movs	r3, #0
 8000e9a:	60bb      	str	r3, [r7, #8]
 8000e9c:	4b28      	ldr	r3, [pc, #160]	; (8000f40 <SystemClock_Config+0xcc>)
 8000e9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ea0:	4a27      	ldr	r2, [pc, #156]	; (8000f40 <SystemClock_Config+0xcc>)
 8000ea2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ea6:	6413      	str	r3, [r2, #64]	; 0x40
 8000ea8:	4b25      	ldr	r3, [pc, #148]	; (8000f40 <SystemClock_Config+0xcc>)
 8000eaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000eb0:	60bb      	str	r3, [r7, #8]
 8000eb2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	607b      	str	r3, [r7, #4]
 8000eb8:	4b22      	ldr	r3, [pc, #136]	; (8000f44 <SystemClock_Config+0xd0>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	4a21      	ldr	r2, [pc, #132]	; (8000f44 <SystemClock_Config+0xd0>)
 8000ebe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ec2:	6013      	str	r3, [r2, #0]
 8000ec4:	4b1f      	ldr	r3, [pc, #124]	; (8000f44 <SystemClock_Config+0xd0>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ecc:	607b      	str	r3, [r7, #4]
 8000ece:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ed0:	2301      	movs	r3, #1
 8000ed2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ed4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ed8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000eda:	2302      	movs	r3, #2
 8000edc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ede:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000ee2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000ee4:	2308      	movs	r3, #8
 8000ee6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 160;
 8000ee8:	23a0      	movs	r3, #160	; 0xa0
 8000eea:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000eec:	2302      	movs	r3, #2
 8000eee:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000ef0:	2304      	movs	r3, #4
 8000ef2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ef4:	f107 0320 	add.w	r3, r7, #32
 8000ef8:	4618      	mov	r0, r3
 8000efa:	f001 fdf3 	bl	8002ae4 <HAL_RCC_OscConfig>
 8000efe:	4603      	mov	r3, r0
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d001      	beq.n	8000f08 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000f04:	f000 fb22 	bl	800154c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f08:	230f      	movs	r3, #15
 8000f0a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f0c:	2302      	movs	r3, #2
 8000f0e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f10:	2300      	movs	r3, #0
 8000f12:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000f14:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000f18:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000f1a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f1e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000f20:	f107 030c 	add.w	r3, r7, #12
 8000f24:	2105      	movs	r1, #5
 8000f26:	4618      	mov	r0, r3
 8000f28:	f002 f854 	bl	8002fd4 <HAL_RCC_ClockConfig>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d001      	beq.n	8000f36 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000f32:	f000 fb0b 	bl	800154c <Error_Handler>
  }
}
 8000f36:	bf00      	nop
 8000f38:	3750      	adds	r7, #80	; 0x50
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	40023800 	.word	0x40023800
 8000f44:	40007000 	.word	0x40007000

08000f48 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b084      	sub	sp, #16
 8000f4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000f4e:	463b      	mov	r3, r7
 8000f50:	2200      	movs	r2, #0
 8000f52:	601a      	str	r2, [r3, #0]
 8000f54:	605a      	str	r2, [r3, #4]
 8000f56:	609a      	str	r2, [r3, #8]
 8000f58:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000f5a:	4b21      	ldr	r3, [pc, #132]	; (8000fe0 <MX_ADC1_Init+0x98>)
 8000f5c:	4a21      	ldr	r2, [pc, #132]	; (8000fe4 <MX_ADC1_Init+0x9c>)
 8000f5e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000f60:	4b1f      	ldr	r3, [pc, #124]	; (8000fe0 <MX_ADC1_Init+0x98>)
 8000f62:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000f66:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000f68:	4b1d      	ldr	r3, [pc, #116]	; (8000fe0 <MX_ADC1_Init+0x98>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000f6e:	4b1c      	ldr	r3, [pc, #112]	; (8000fe0 <MX_ADC1_Init+0x98>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000f74:	4b1a      	ldr	r3, [pc, #104]	; (8000fe0 <MX_ADC1_Init+0x98>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f7a:	4b19      	ldr	r3, [pc, #100]	; (8000fe0 <MX_ADC1_Init+0x98>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f82:	4b17      	ldr	r3, [pc, #92]	; (8000fe0 <MX_ADC1_Init+0x98>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f88:	4b15      	ldr	r3, [pc, #84]	; (8000fe0 <MX_ADC1_Init+0x98>)
 8000f8a:	4a17      	ldr	r2, [pc, #92]	; (8000fe8 <MX_ADC1_Init+0xa0>)
 8000f8c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f8e:	4b14      	ldr	r3, [pc, #80]	; (8000fe0 <MX_ADC1_Init+0x98>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000f94:	4b12      	ldr	r3, [pc, #72]	; (8000fe0 <MX_ADC1_Init+0x98>)
 8000f96:	2201      	movs	r2, #1
 8000f98:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000f9a:	4b11      	ldr	r3, [pc, #68]	; (8000fe0 <MX_ADC1_Init+0x98>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000fa2:	4b0f      	ldr	r3, [pc, #60]	; (8000fe0 <MX_ADC1_Init+0x98>)
 8000fa4:	2201      	movs	r2, #1
 8000fa6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000fa8:	480d      	ldr	r0, [pc, #52]	; (8000fe0 <MX_ADC1_Init+0x98>)
 8000faa:	f000 ff8b 	bl	8001ec4 <HAL_ADC_Init>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d001      	beq.n	8000fb8 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000fb4:	f000 faca 	bl	800154c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000fb8:	2301      	movs	r3, #1
 8000fba:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000fbc:	2301      	movs	r3, #1
 8000fbe:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fc4:	463b      	mov	r3, r7
 8000fc6:	4619      	mov	r1, r3
 8000fc8:	4805      	ldr	r0, [pc, #20]	; (8000fe0 <MX_ADC1_Init+0x98>)
 8000fca:	f000 ffbf 	bl	8001f4c <HAL_ADC_ConfigChannel>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d001      	beq.n	8000fd8 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000fd4:	f000 faba 	bl	800154c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000fd8:	bf00      	nop
 8000fda:	3710      	adds	r7, #16
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bd80      	pop	{r7, pc}
 8000fe0:	200049f8 	.word	0x200049f8
 8000fe4:	40012000 	.word	0x40012000
 8000fe8:	0f000001 	.word	0x0f000001

08000fec <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000ff0:	4b17      	ldr	r3, [pc, #92]	; (8001050 <MX_CAN1_Init+0x64>)
 8000ff2:	4a18      	ldr	r2, [pc, #96]	; (8001054 <MX_CAN1_Init+0x68>)
 8000ff4:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 5;
 8000ff6:	4b16      	ldr	r3, [pc, #88]	; (8001050 <MX_CAN1_Init+0x64>)
 8000ff8:	2205      	movs	r2, #5
 8000ffa:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000ffc:	4b14      	ldr	r3, [pc, #80]	; (8001050 <MX_CAN1_Init+0x64>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001002:	4b13      	ldr	r3, [pc, #76]	; (8001050 <MX_CAN1_Init+0x64>)
 8001004:	2200      	movs	r2, #0
 8001006:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_13TQ;
 8001008:	4b11      	ldr	r3, [pc, #68]	; (8001050 <MX_CAN1_Init+0x64>)
 800100a:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 800100e:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8001010:	4b0f      	ldr	r3, [pc, #60]	; (8001050 <MX_CAN1_Init+0x64>)
 8001012:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001016:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001018:	4b0d      	ldr	r3, [pc, #52]	; (8001050 <MX_CAN1_Init+0x64>)
 800101a:	2200      	movs	r2, #0
 800101c:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800101e:	4b0c      	ldr	r3, [pc, #48]	; (8001050 <MX_CAN1_Init+0x64>)
 8001020:	2200      	movs	r2, #0
 8001022:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001024:	4b0a      	ldr	r3, [pc, #40]	; (8001050 <MX_CAN1_Init+0x64>)
 8001026:	2200      	movs	r2, #0
 8001028:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800102a:	4b09      	ldr	r3, [pc, #36]	; (8001050 <MX_CAN1_Init+0x64>)
 800102c:	2200      	movs	r2, #0
 800102e:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001030:	4b07      	ldr	r3, [pc, #28]	; (8001050 <MX_CAN1_Init+0x64>)
 8001032:	2200      	movs	r2, #0
 8001034:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001036:	4b06      	ldr	r3, [pc, #24]	; (8001050 <MX_CAN1_Init+0x64>)
 8001038:	2200      	movs	r2, #0
 800103a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800103c:	4804      	ldr	r0, [pc, #16]	; (8001050 <MX_CAN1_Init+0x64>)
 800103e:	f001 f9a3 	bl	8002388 <HAL_CAN_Init>
 8001042:	4603      	mov	r3, r0
 8001044:	2b00      	cmp	r3, #0
 8001046:	d001      	beq.n	800104c <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8001048:	f000 fa80 	bl	800154c <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 800104c:	bf00      	nop
 800104e:	bd80      	pop	{r7, pc}
 8001050:	20004b6c 	.word	0x20004b6c
 8001054:	40006400 	.word	0x40006400

08001058 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800105c:	4b17      	ldr	r3, [pc, #92]	; (80010bc <MX_SPI1_Init+0x64>)
 800105e:	4a18      	ldr	r2, [pc, #96]	; (80010c0 <MX_SPI1_Init+0x68>)
 8001060:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001062:	4b16      	ldr	r3, [pc, #88]	; (80010bc <MX_SPI1_Init+0x64>)
 8001064:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001068:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800106a:	4b14      	ldr	r3, [pc, #80]	; (80010bc <MX_SPI1_Init+0x64>)
 800106c:	2200      	movs	r2, #0
 800106e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001070:	4b12      	ldr	r3, [pc, #72]	; (80010bc <MX_SPI1_Init+0x64>)
 8001072:	2200      	movs	r2, #0
 8001074:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001076:	4b11      	ldr	r3, [pc, #68]	; (80010bc <MX_SPI1_Init+0x64>)
 8001078:	2202      	movs	r2, #2
 800107a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 800107c:	4b0f      	ldr	r3, [pc, #60]	; (80010bc <MX_SPI1_Init+0x64>)
 800107e:	2201      	movs	r2, #1
 8001080:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001082:	4b0e      	ldr	r3, [pc, #56]	; (80010bc <MX_SPI1_Init+0x64>)
 8001084:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001088:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 800108a:	4b0c      	ldr	r3, [pc, #48]	; (80010bc <MX_SPI1_Init+0x64>)
 800108c:	2230      	movs	r2, #48	; 0x30
 800108e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001090:	4b0a      	ldr	r3, [pc, #40]	; (80010bc <MX_SPI1_Init+0x64>)
 8001092:	2200      	movs	r2, #0
 8001094:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001096:	4b09      	ldr	r3, [pc, #36]	; (80010bc <MX_SPI1_Init+0x64>)
 8001098:	2200      	movs	r2, #0
 800109a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800109c:	4b07      	ldr	r3, [pc, #28]	; (80010bc <MX_SPI1_Init+0x64>)
 800109e:	2200      	movs	r2, #0
 80010a0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80010a2:	4b06      	ldr	r3, [pc, #24]	; (80010bc <MX_SPI1_Init+0x64>)
 80010a4:	220a      	movs	r2, #10
 80010a6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80010a8:	4804      	ldr	r0, [pc, #16]	; (80010bc <MX_SPI1_Init+0x64>)
 80010aa:	f002 f9bf 	bl	800342c <HAL_SPI_Init>
 80010ae:	4603      	mov	r3, r0
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d001      	beq.n	80010b8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80010b4:	f000 fa4a 	bl	800154c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80010b8:	bf00      	nop
 80010ba:	bd80      	pop	{r7, pc}
 80010bc:	20004acc 	.word	0x20004acc
 80010c0:	40013000 	.word	0x40013000

080010c4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b096      	sub	sp, #88	; 0x58
 80010c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010ca:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80010ce:	2200      	movs	r2, #0
 80010d0:	601a      	str	r2, [r3, #0]
 80010d2:	605a      	str	r2, [r3, #4]
 80010d4:	609a      	str	r2, [r3, #8]
 80010d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010d8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80010dc:	2200      	movs	r2, #0
 80010de:	601a      	str	r2, [r3, #0]
 80010e0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80010e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010e6:	2200      	movs	r2, #0
 80010e8:	601a      	str	r2, [r3, #0]
 80010ea:	605a      	str	r2, [r3, #4]
 80010ec:	609a      	str	r2, [r3, #8]
 80010ee:	60da      	str	r2, [r3, #12]
 80010f0:	611a      	str	r2, [r3, #16]
 80010f2:	615a      	str	r2, [r3, #20]
 80010f4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80010f6:	1d3b      	adds	r3, r7, #4
 80010f8:	2220      	movs	r2, #32
 80010fa:	2100      	movs	r1, #0
 80010fc:	4618      	mov	r0, r3
 80010fe:	f007 fac5 	bl	800868c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001102:	4b4f      	ldr	r3, [pc, #316]	; (8001240 <MX_TIM1_Init+0x17c>)
 8001104:	4a4f      	ldr	r2, [pc, #316]	; (8001244 <MX_TIM1_Init+0x180>)
 8001106:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 159;
 8001108:	4b4d      	ldr	r3, [pc, #308]	; (8001240 <MX_TIM1_Init+0x17c>)
 800110a:	229f      	movs	r2, #159	; 0x9f
 800110c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800110e:	4b4c      	ldr	r3, [pc, #304]	; (8001240 <MX_TIM1_Init+0x17c>)
 8001110:	2200      	movs	r2, #0
 8001112:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001114:	4b4a      	ldr	r3, [pc, #296]	; (8001240 <MX_TIM1_Init+0x17c>)
 8001116:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800111a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800111c:	4b48      	ldr	r3, [pc, #288]	; (8001240 <MX_TIM1_Init+0x17c>)
 800111e:	2200      	movs	r2, #0
 8001120:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001122:	4b47      	ldr	r3, [pc, #284]	; (8001240 <MX_TIM1_Init+0x17c>)
 8001124:	2200      	movs	r2, #0
 8001126:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001128:	4b45      	ldr	r3, [pc, #276]	; (8001240 <MX_TIM1_Init+0x17c>)
 800112a:	2200      	movs	r2, #0
 800112c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800112e:	4844      	ldr	r0, [pc, #272]	; (8001240 <MX_TIM1_Init+0x17c>)
 8001130:	f002 ff24 	bl	8003f7c <HAL_TIM_Base_Init>
 8001134:	4603      	mov	r3, r0
 8001136:	2b00      	cmp	r3, #0
 8001138:	d001      	beq.n	800113e <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800113a:	f000 fa07 	bl	800154c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800113e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001142:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001144:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001148:	4619      	mov	r1, r3
 800114a:	483d      	ldr	r0, [pc, #244]	; (8001240 <MX_TIM1_Init+0x17c>)
 800114c:	f003 fbfc 	bl	8004948 <HAL_TIM_ConfigClockSource>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d001      	beq.n	800115a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001156:	f000 f9f9 	bl	800154c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800115a:	4839      	ldr	r0, [pc, #228]	; (8001240 <MX_TIM1_Init+0x17c>)
 800115c:	f003 f88f 	bl	800427e <HAL_TIM_PWM_Init>
 8001160:	4603      	mov	r3, r0
 8001162:	2b00      	cmp	r3, #0
 8001164:	d001      	beq.n	800116a <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001166:	f000 f9f1 	bl	800154c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 800116a:	4835      	ldr	r0, [pc, #212]	; (8001240 <MX_TIM1_Init+0x17c>)
 800116c:	f003 f82e 	bl	80041cc <HAL_TIM_OC_Init>
 8001170:	4603      	mov	r3, r0
 8001172:	2b00      	cmp	r3, #0
 8001174:	d001      	beq.n	800117a <MX_TIM1_Init+0xb6>
  {
    Error_Handler();
 8001176:	f000 f9e9 	bl	800154c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800117a:	2300      	movs	r3, #0
 800117c:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800117e:	2300      	movs	r3, #0
 8001180:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001182:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001186:	4619      	mov	r1, r3
 8001188:	482d      	ldr	r0, [pc, #180]	; (8001240 <MX_TIM1_Init+0x17c>)
 800118a:	f004 f8dd 	bl	8005348 <HAL_TIMEx_MasterConfigSynchronization>
 800118e:	4603      	mov	r3, r0
 8001190:	2b00      	cmp	r3, #0
 8001192:	d001      	beq.n	8001198 <MX_TIM1_Init+0xd4>
  {
    Error_Handler();
 8001194:	f000 f9da 	bl	800154c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001198:	2360      	movs	r3, #96	; 0x60
 800119a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800119c:	2300      	movs	r3, #0
 800119e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011a0:	2300      	movs	r3, #0
 80011a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80011a4:	2300      	movs	r3, #0
 80011a6:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011a8:	2300      	movs	r3, #0
 80011aa:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80011ac:	2300      	movs	r3, #0
 80011ae:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80011b0:	2300      	movs	r3, #0
 80011b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80011b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011b8:	2200      	movs	r2, #0
 80011ba:	4619      	mov	r1, r3
 80011bc:	4820      	ldr	r0, [pc, #128]	; (8001240 <MX_TIM1_Init+0x17c>)
 80011be:	f003 fb05 	bl	80047cc <HAL_TIM_PWM_ConfigChannel>
 80011c2:	4603      	mov	r3, r0
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d001      	beq.n	80011cc <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 80011c8:	f000 f9c0 	bl	800154c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80011cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011d0:	2204      	movs	r2, #4
 80011d2:	4619      	mov	r1, r3
 80011d4:	481a      	ldr	r0, [pc, #104]	; (8001240 <MX_TIM1_Init+0x17c>)
 80011d6:	f003 faf9 	bl	80047cc <HAL_TIM_PWM_ConfigChannel>
 80011da:	4603      	mov	r3, r0
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d001      	beq.n	80011e4 <MX_TIM1_Init+0x120>
  {
    Error_Handler();
 80011e0:	f000 f9b4 	bl	800154c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80011e4:	2300      	movs	r3, #0
 80011e6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80011e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011ec:	2208      	movs	r2, #8
 80011ee:	4619      	mov	r1, r3
 80011f0:	4813      	ldr	r0, [pc, #76]	; (8001240 <MX_TIM1_Init+0x17c>)
 80011f2:	f003 f9ff 	bl	80045f4 <HAL_TIM_OC_ConfigChannel>
 80011f6:	4603      	mov	r3, r0
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d001      	beq.n	8001200 <MX_TIM1_Init+0x13c>
  {
    Error_Handler();
 80011fc:	f000 f9a6 	bl	800154c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001200:	2300      	movs	r3, #0
 8001202:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001204:	2300      	movs	r3, #0
 8001206:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001208:	2300      	movs	r3, #0
 800120a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800120c:	2300      	movs	r3, #0
 800120e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001210:	2300      	movs	r3, #0
 8001212:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001214:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001218:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800121a:	2300      	movs	r3, #0
 800121c:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800121e:	1d3b      	adds	r3, r7, #4
 8001220:	4619      	mov	r1, r3
 8001222:	4807      	ldr	r0, [pc, #28]	; (8001240 <MX_TIM1_Init+0x17c>)
 8001224:	f004 f90c 	bl	8005440 <HAL_TIMEx_ConfigBreakDeadTime>
 8001228:	4603      	mov	r3, r0
 800122a:	2b00      	cmp	r3, #0
 800122c:	d001      	beq.n	8001232 <MX_TIM1_Init+0x16e>
  {
    Error_Handler();
 800122e:	f000 f98d 	bl	800154c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001232:	4803      	ldr	r0, [pc, #12]	; (8001240 <MX_TIM1_Init+0x17c>)
 8001234:	f000 fb2e 	bl	8001894 <HAL_TIM_MspPostInit>

}
 8001238:	bf00      	nop
 800123a:	3758      	adds	r7, #88	; 0x58
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}
 8001240:	20004a84 	.word	0x20004a84
 8001244:	40010000 	.word	0x40010000

08001248 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b086      	sub	sp, #24
 800124c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800124e:	f107 0308 	add.w	r3, r7, #8
 8001252:	2200      	movs	r2, #0
 8001254:	601a      	str	r2, [r3, #0]
 8001256:	605a      	str	r2, [r3, #4]
 8001258:	609a      	str	r2, [r3, #8]
 800125a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800125c:	463b      	mov	r3, r7
 800125e:	2200      	movs	r2, #0
 8001260:	601a      	str	r2, [r3, #0]
 8001262:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001264:	4b1d      	ldr	r3, [pc, #116]	; (80012dc <MX_TIM2_Init+0x94>)
 8001266:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800126a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 79;
 800126c:	4b1b      	ldr	r3, [pc, #108]	; (80012dc <MX_TIM2_Init+0x94>)
 800126e:	224f      	movs	r2, #79	; 0x4f
 8001270:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001272:	4b1a      	ldr	r3, [pc, #104]	; (80012dc <MX_TIM2_Init+0x94>)
 8001274:	2200      	movs	r2, #0
 8001276:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001278:	4b18      	ldr	r3, [pc, #96]	; (80012dc <MX_TIM2_Init+0x94>)
 800127a:	f04f 32ff 	mov.w	r2, #4294967295
 800127e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001280:	4b16      	ldr	r3, [pc, #88]	; (80012dc <MX_TIM2_Init+0x94>)
 8001282:	2200      	movs	r2, #0
 8001284:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001286:	4b15      	ldr	r3, [pc, #84]	; (80012dc <MX_TIM2_Init+0x94>)
 8001288:	2200      	movs	r2, #0
 800128a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800128c:	4813      	ldr	r0, [pc, #76]	; (80012dc <MX_TIM2_Init+0x94>)
 800128e:	f002 fe75 	bl	8003f7c <HAL_TIM_Base_Init>
 8001292:	4603      	mov	r3, r0
 8001294:	2b00      	cmp	r3, #0
 8001296:	d001      	beq.n	800129c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001298:	f000 f958 	bl	800154c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800129c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012a0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80012a2:	f107 0308 	add.w	r3, r7, #8
 80012a6:	4619      	mov	r1, r3
 80012a8:	480c      	ldr	r0, [pc, #48]	; (80012dc <MX_TIM2_Init+0x94>)
 80012aa:	f003 fb4d 	bl	8004948 <HAL_TIM_ConfigClockSource>
 80012ae:	4603      	mov	r3, r0
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d001      	beq.n	80012b8 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80012b4:	f000 f94a 	bl	800154c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012b8:	2300      	movs	r3, #0
 80012ba:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012bc:	2300      	movs	r3, #0
 80012be:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80012c0:	463b      	mov	r3, r7
 80012c2:	4619      	mov	r1, r3
 80012c4:	4805      	ldr	r0, [pc, #20]	; (80012dc <MX_TIM2_Init+0x94>)
 80012c6:	f004 f83f 	bl	8005348 <HAL_TIMEx_MasterConfigSynchronization>
 80012ca:	4603      	mov	r3, r0
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d001      	beq.n	80012d4 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80012d0:	f000 f93c 	bl	800154c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80012d4:	bf00      	nop
 80012d6:	3718      	adds	r7, #24
 80012d8:	46bd      	mov	sp, r7
 80012da:	bd80      	pop	{r7, pc}
 80012dc:	20004b24 	.word	0x20004b24

080012e0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b08a      	sub	sp, #40	; 0x28
 80012e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012e6:	f107 0318 	add.w	r3, r7, #24
 80012ea:	2200      	movs	r2, #0
 80012ec:	601a      	str	r2, [r3, #0]
 80012ee:	605a      	str	r2, [r3, #4]
 80012f0:	609a      	str	r2, [r3, #8]
 80012f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012f4:	f107 0310 	add.w	r3, r7, #16
 80012f8:	2200      	movs	r2, #0
 80012fa:	601a      	str	r2, [r3, #0]
 80012fc:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80012fe:	463b      	mov	r3, r7
 8001300:	2200      	movs	r2, #0
 8001302:	601a      	str	r2, [r3, #0]
 8001304:	605a      	str	r2, [r3, #4]
 8001306:	609a      	str	r2, [r3, #8]
 8001308:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800130a:	4b2b      	ldr	r3, [pc, #172]	; (80013b8 <MX_TIM3_Init+0xd8>)
 800130c:	4a2b      	ldr	r2, [pc, #172]	; (80013bc <MX_TIM3_Init+0xdc>)
 800130e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001310:	4b29      	ldr	r3, [pc, #164]	; (80013b8 <MX_TIM3_Init+0xd8>)
 8001312:	2200      	movs	r2, #0
 8001314:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001316:	4b28      	ldr	r3, [pc, #160]	; (80013b8 <MX_TIM3_Init+0xd8>)
 8001318:	2200      	movs	r2, #0
 800131a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800131c:	4b26      	ldr	r3, [pc, #152]	; (80013b8 <MX_TIM3_Init+0xd8>)
 800131e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001322:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001324:	4b24      	ldr	r3, [pc, #144]	; (80013b8 <MX_TIM3_Init+0xd8>)
 8001326:	2200      	movs	r2, #0
 8001328:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800132a:	4b23      	ldr	r3, [pc, #140]	; (80013b8 <MX_TIM3_Init+0xd8>)
 800132c:	2200      	movs	r2, #0
 800132e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001330:	4821      	ldr	r0, [pc, #132]	; (80013b8 <MX_TIM3_Init+0xd8>)
 8001332:	f002 fe23 	bl	8003f7c <HAL_TIM_Base_Init>
 8001336:	4603      	mov	r3, r0
 8001338:	2b00      	cmp	r3, #0
 800133a:	d001      	beq.n	8001340 <MX_TIM3_Init+0x60>
  {
    Error_Handler();
 800133c:	f000 f906 	bl	800154c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001340:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001344:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001346:	f107 0318 	add.w	r3, r7, #24
 800134a:	4619      	mov	r1, r3
 800134c:	481a      	ldr	r0, [pc, #104]	; (80013b8 <MX_TIM3_Init+0xd8>)
 800134e:	f003 fafb 	bl	8004948 <HAL_TIM_ConfigClockSource>
 8001352:	4603      	mov	r3, r0
 8001354:	2b00      	cmp	r3, #0
 8001356:	d001      	beq.n	800135c <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001358:	f000 f8f8 	bl	800154c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 800135c:	4816      	ldr	r0, [pc, #88]	; (80013b8 <MX_TIM3_Init+0xd8>)
 800135e:	f002 ffe7 	bl	8004330 <HAL_TIM_IC_Init>
 8001362:	4603      	mov	r3, r0
 8001364:	2b00      	cmp	r3, #0
 8001366:	d001      	beq.n	800136c <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001368:	f000 f8f0 	bl	800154c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800136c:	2300      	movs	r3, #0
 800136e:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001370:	2300      	movs	r3, #0
 8001372:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001374:	f107 0310 	add.w	r3, r7, #16
 8001378:	4619      	mov	r1, r3
 800137a:	480f      	ldr	r0, [pc, #60]	; (80013b8 <MX_TIM3_Init+0xd8>)
 800137c:	f003 ffe4 	bl	8005348 <HAL_TIMEx_MasterConfigSynchronization>
 8001380:	4603      	mov	r3, r0
 8001382:	2b00      	cmp	r3, #0
 8001384:	d001      	beq.n	800138a <MX_TIM3_Init+0xaa>
  {
    Error_Handler();
 8001386:	f000 f8e1 	bl	800154c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800138a:	2300      	movs	r3, #0
 800138c:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800138e:	2301      	movs	r3, #1
 8001390:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001392:	2300      	movs	r3, #0
 8001394:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001396:	2300      	movs	r3, #0
 8001398:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800139a:	463b      	mov	r3, r7
 800139c:	2200      	movs	r2, #0
 800139e:	4619      	mov	r1, r3
 80013a0:	4805      	ldr	r0, [pc, #20]	; (80013b8 <MX_TIM3_Init+0xd8>)
 80013a2:	f003 f97f 	bl	80046a4 <HAL_TIM_IC_ConfigChannel>
 80013a6:	4603      	mov	r3, r0
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d001      	beq.n	80013b0 <MX_TIM3_Init+0xd0>
  {
    Error_Handler();
 80013ac:	f000 f8ce 	bl	800154c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80013b0:	bf00      	nop
 80013b2:	3728      	adds	r7, #40	; 0x28
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd80      	pop	{r7, pc}
 80013b8:	200049b0 	.word	0x200049b0
 80013bc:	40000400 	.word	0x40000400

080013c0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80013c4:	4b11      	ldr	r3, [pc, #68]	; (800140c <MX_USART1_UART_Init+0x4c>)
 80013c6:	4a12      	ldr	r2, [pc, #72]	; (8001410 <MX_USART1_UART_Init+0x50>)
 80013c8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80013ca:	4b10      	ldr	r3, [pc, #64]	; (800140c <MX_USART1_UART_Init+0x4c>)
 80013cc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80013d0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80013d2:	4b0e      	ldr	r3, [pc, #56]	; (800140c <MX_USART1_UART_Init+0x4c>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80013d8:	4b0c      	ldr	r3, [pc, #48]	; (800140c <MX_USART1_UART_Init+0x4c>)
 80013da:	2200      	movs	r2, #0
 80013dc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80013de:	4b0b      	ldr	r3, [pc, #44]	; (800140c <MX_USART1_UART_Init+0x4c>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80013e4:	4b09      	ldr	r3, [pc, #36]	; (800140c <MX_USART1_UART_Init+0x4c>)
 80013e6:	220c      	movs	r2, #12
 80013e8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013ea:	4b08      	ldr	r3, [pc, #32]	; (800140c <MX_USART1_UART_Init+0x4c>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80013f0:	4b06      	ldr	r3, [pc, #24]	; (800140c <MX_USART1_UART_Init+0x4c>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80013f6:	4805      	ldr	r0, [pc, #20]	; (800140c <MX_USART1_UART_Init+0x4c>)
 80013f8:	f004 f888 	bl	800550c <HAL_UART_Init>
 80013fc:	4603      	mov	r3, r0
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d001      	beq.n	8001406 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001402:	f000 f8a3 	bl	800154c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001406:	bf00      	nop
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	20004a40 	.word	0x20004a40
 8001410:	40011000 	.word	0x40011000

08001414 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b08a      	sub	sp, #40	; 0x28
 8001418:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800141a:	f107 0314 	add.w	r3, r7, #20
 800141e:	2200      	movs	r2, #0
 8001420:	601a      	str	r2, [r3, #0]
 8001422:	605a      	str	r2, [r3, #4]
 8001424:	609a      	str	r2, [r3, #8]
 8001426:	60da      	str	r2, [r3, #12]
 8001428:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800142a:	2300      	movs	r3, #0
 800142c:	613b      	str	r3, [r7, #16]
 800142e:	4b3a      	ldr	r3, [pc, #232]	; (8001518 <MX_GPIO_Init+0x104>)
 8001430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001432:	4a39      	ldr	r2, [pc, #228]	; (8001518 <MX_GPIO_Init+0x104>)
 8001434:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001438:	6313      	str	r3, [r2, #48]	; 0x30
 800143a:	4b37      	ldr	r3, [pc, #220]	; (8001518 <MX_GPIO_Init+0x104>)
 800143c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800143e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001442:	613b      	str	r3, [r7, #16]
 8001444:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001446:	2300      	movs	r3, #0
 8001448:	60fb      	str	r3, [r7, #12]
 800144a:	4b33      	ldr	r3, [pc, #204]	; (8001518 <MX_GPIO_Init+0x104>)
 800144c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800144e:	4a32      	ldr	r2, [pc, #200]	; (8001518 <MX_GPIO_Init+0x104>)
 8001450:	f043 0304 	orr.w	r3, r3, #4
 8001454:	6313      	str	r3, [r2, #48]	; 0x30
 8001456:	4b30      	ldr	r3, [pc, #192]	; (8001518 <MX_GPIO_Init+0x104>)
 8001458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800145a:	f003 0304 	and.w	r3, r3, #4
 800145e:	60fb      	str	r3, [r7, #12]
 8001460:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001462:	2300      	movs	r3, #0
 8001464:	60bb      	str	r3, [r7, #8]
 8001466:	4b2c      	ldr	r3, [pc, #176]	; (8001518 <MX_GPIO_Init+0x104>)
 8001468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800146a:	4a2b      	ldr	r2, [pc, #172]	; (8001518 <MX_GPIO_Init+0x104>)
 800146c:	f043 0301 	orr.w	r3, r3, #1
 8001470:	6313      	str	r3, [r2, #48]	; 0x30
 8001472:	4b29      	ldr	r3, [pc, #164]	; (8001518 <MX_GPIO_Init+0x104>)
 8001474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001476:	f003 0301 	and.w	r3, r3, #1
 800147a:	60bb      	str	r3, [r7, #8]
 800147c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800147e:	2300      	movs	r3, #0
 8001480:	607b      	str	r3, [r7, #4]
 8001482:	4b25      	ldr	r3, [pc, #148]	; (8001518 <MX_GPIO_Init+0x104>)
 8001484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001486:	4a24      	ldr	r2, [pc, #144]	; (8001518 <MX_GPIO_Init+0x104>)
 8001488:	f043 0302 	orr.w	r3, r3, #2
 800148c:	6313      	str	r3, [r2, #48]	; 0x30
 800148e:	4b22      	ldr	r3, [pc, #136]	; (8001518 <MX_GPIO_Init+0x104>)
 8001490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001492:	f003 0302 	and.w	r3, r3, #2
 8001496:	607b      	str	r3, [r7, #4]
 8001498:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 800149a:	2200      	movs	r2, #0
 800149c:	2110      	movs	r1, #16
 800149e:	481f      	ldr	r0, [pc, #124]	; (800151c <MX_GPIO_Init+0x108>)
 80014a0:	f001 faec 	bl	8002a7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS2_GPIO_Port, CS2_Pin, GPIO_PIN_RESET);
 80014a4:	2200      	movs	r2, #0
 80014a6:	2110      	movs	r1, #16
 80014a8:	481d      	ldr	r0, [pc, #116]	; (8001520 <MX_GPIO_Init+0x10c>)
 80014aa:	f001 fae7 	bl	8002a7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CONTACTOR_Pin|PRECHARGE_Pin|EXT_LED_Pin, GPIO_PIN_RESET);
 80014ae:	2200      	movs	r2, #0
 80014b0:	f240 4106 	movw	r1, #1030	; 0x406
 80014b4:	481b      	ldr	r0, [pc, #108]	; (8001524 <MX_GPIO_Init+0x110>)
 80014b6:	f001 fae1 	bl	8002a7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CS_Pin */
  GPIO_InitStruct.Pin = CS_Pin;
 80014ba:	2310      	movs	r3, #16
 80014bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014be:	2301      	movs	r3, #1
 80014c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c2:	2300      	movs	r3, #0
 80014c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014c6:	2300      	movs	r3, #0
 80014c8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CS_GPIO_Port, &GPIO_InitStruct);
 80014ca:	f107 0314 	add.w	r3, r7, #20
 80014ce:	4619      	mov	r1, r3
 80014d0:	4812      	ldr	r0, [pc, #72]	; (800151c <MX_GPIO_Init+0x108>)
 80014d2:	f001 f937 	bl	8002744 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS2_Pin */
  GPIO_InitStruct.Pin = CS2_Pin;
 80014d6:	2310      	movs	r3, #16
 80014d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014da:	2301      	movs	r3, #1
 80014dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014de:	2300      	movs	r3, #0
 80014e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014e2:	2300      	movs	r3, #0
 80014e4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CS2_GPIO_Port, &GPIO_InitStruct);
 80014e6:	f107 0314 	add.w	r3, r7, #20
 80014ea:	4619      	mov	r1, r3
 80014ec:	480c      	ldr	r0, [pc, #48]	; (8001520 <MX_GPIO_Init+0x10c>)
 80014ee:	f001 f929 	bl	8002744 <HAL_GPIO_Init>

  /*Configure GPIO pins : CONTACTOR_Pin PRECHARGE_Pin EXT_LED_Pin */
  GPIO_InitStruct.Pin = CONTACTOR_Pin|PRECHARGE_Pin|EXT_LED_Pin;
 80014f2:	f240 4306 	movw	r3, #1030	; 0x406
 80014f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014f8:	2301      	movs	r3, #1
 80014fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014fc:	2300      	movs	r3, #0
 80014fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001500:	2300      	movs	r3, #0
 8001502:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001504:	f107 0314 	add.w	r3, r7, #20
 8001508:	4619      	mov	r1, r3
 800150a:	4806      	ldr	r0, [pc, #24]	; (8001524 <MX_GPIO_Init+0x110>)
 800150c:	f001 f91a 	bl	8002744 <HAL_GPIO_Init>

}
 8001510:	bf00      	nop
 8001512:	3728      	adds	r7, #40	; 0x28
 8001514:	46bd      	mov	sp, r7
 8001516:	bd80      	pop	{r7, pc}
 8001518:	40023800 	.word	0x40023800
 800151c:	40020000 	.word	0x40020000
 8001520:	40020800 	.word	0x40020800
 8001524:	40020400 	.word	0x40020400

08001528 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b082      	sub	sp, #8
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM9) {
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	4a04      	ldr	r2, [pc, #16]	; (8001548 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001536:	4293      	cmp	r3, r2
 8001538:	d101      	bne.n	800153e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800153a:	f000 fca3 	bl	8001e84 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800153e:	bf00      	nop
 8001540:	3708      	adds	r7, #8
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}
 8001546:	bf00      	nop
 8001548:	40014000 	.word	0x40014000

0800154c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800154c:	b480      	push	{r7}
 800154e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001550:	b672      	cpsid	i
}
 8001552:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001554:	e7fe      	b.n	8001554 <Error_Handler+0x8>
	...

08001558 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b082      	sub	sp, #8
 800155c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800155e:	2300      	movs	r3, #0
 8001560:	607b      	str	r3, [r7, #4]
 8001562:	4b12      	ldr	r3, [pc, #72]	; (80015ac <HAL_MspInit+0x54>)
 8001564:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001566:	4a11      	ldr	r2, [pc, #68]	; (80015ac <HAL_MspInit+0x54>)
 8001568:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800156c:	6453      	str	r3, [r2, #68]	; 0x44
 800156e:	4b0f      	ldr	r3, [pc, #60]	; (80015ac <HAL_MspInit+0x54>)
 8001570:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001572:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001576:	607b      	str	r3, [r7, #4]
 8001578:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800157a:	2300      	movs	r3, #0
 800157c:	603b      	str	r3, [r7, #0]
 800157e:	4b0b      	ldr	r3, [pc, #44]	; (80015ac <HAL_MspInit+0x54>)
 8001580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001582:	4a0a      	ldr	r2, [pc, #40]	; (80015ac <HAL_MspInit+0x54>)
 8001584:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001588:	6413      	str	r3, [r2, #64]	; 0x40
 800158a:	4b08      	ldr	r3, [pc, #32]	; (80015ac <HAL_MspInit+0x54>)
 800158c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800158e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001592:	603b      	str	r3, [r7, #0]
 8001594:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001596:	2200      	movs	r2, #0
 8001598:	210f      	movs	r1, #15
 800159a:	f06f 0001 	mvn.w	r0, #1
 800159e:	f001 f8a7 	bl	80026f0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015a2:	bf00      	nop
 80015a4:	3708      	adds	r7, #8
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	40023800 	.word	0x40023800

080015b0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b08a      	sub	sp, #40	; 0x28
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015b8:	f107 0314 	add.w	r3, r7, #20
 80015bc:	2200      	movs	r2, #0
 80015be:	601a      	str	r2, [r3, #0]
 80015c0:	605a      	str	r2, [r3, #4]
 80015c2:	609a      	str	r2, [r3, #8]
 80015c4:	60da      	str	r2, [r3, #12]
 80015c6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4a24      	ldr	r2, [pc, #144]	; (8001660 <HAL_ADC_MspInit+0xb0>)
 80015ce:	4293      	cmp	r3, r2
 80015d0:	d141      	bne.n	8001656 <HAL_ADC_MspInit+0xa6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80015d2:	2300      	movs	r3, #0
 80015d4:	613b      	str	r3, [r7, #16]
 80015d6:	4b23      	ldr	r3, [pc, #140]	; (8001664 <HAL_ADC_MspInit+0xb4>)
 80015d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015da:	4a22      	ldr	r2, [pc, #136]	; (8001664 <HAL_ADC_MspInit+0xb4>)
 80015dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015e0:	6453      	str	r3, [r2, #68]	; 0x44
 80015e2:	4b20      	ldr	r3, [pc, #128]	; (8001664 <HAL_ADC_MspInit+0xb4>)
 80015e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015ea:	613b      	str	r3, [r7, #16]
 80015ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80015ee:	2300      	movs	r3, #0
 80015f0:	60fb      	str	r3, [r7, #12]
 80015f2:	4b1c      	ldr	r3, [pc, #112]	; (8001664 <HAL_ADC_MspInit+0xb4>)
 80015f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015f6:	4a1b      	ldr	r2, [pc, #108]	; (8001664 <HAL_ADC_MspInit+0xb4>)
 80015f8:	f043 0304 	orr.w	r3, r3, #4
 80015fc:	6313      	str	r3, [r2, #48]	; 0x30
 80015fe:	4b19      	ldr	r3, [pc, #100]	; (8001664 <HAL_ADC_MspInit+0xb4>)
 8001600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001602:	f003 0304 	and.w	r3, r3, #4
 8001606:	60fb      	str	r3, [r7, #12]
 8001608:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800160a:	2300      	movs	r3, #0
 800160c:	60bb      	str	r3, [r7, #8]
 800160e:	4b15      	ldr	r3, [pc, #84]	; (8001664 <HAL_ADC_MspInit+0xb4>)
 8001610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001612:	4a14      	ldr	r2, [pc, #80]	; (8001664 <HAL_ADC_MspInit+0xb4>)
 8001614:	f043 0301 	orr.w	r3, r3, #1
 8001618:	6313      	str	r3, [r2, #48]	; 0x30
 800161a:	4b12      	ldr	r3, [pc, #72]	; (8001664 <HAL_ADC_MspInit+0xb4>)
 800161c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800161e:	f003 0301 	and.w	r3, r3, #1
 8001622:	60bb      	str	r3, [r7, #8]
 8001624:	68bb      	ldr	r3, [r7, #8]
    PC1     ------> ADC1_IN11
    PC2     ------> ADC1_IN12
    PC3     ------> ADC1_IN13
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = ADC1_IN10_CURRENT_SENSE_Pin|ADC1_IN11_VBATT_Pin|ADC1_IN12_MC_CAP_Pin|ADC1_IN13_CONTACTOR_Pin;
 8001626:	230f      	movs	r3, #15
 8001628:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800162a:	2303      	movs	r3, #3
 800162c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800162e:	2300      	movs	r3, #0
 8001630:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001632:	f107 0314 	add.w	r3, r7, #20
 8001636:	4619      	mov	r1, r3
 8001638:	480b      	ldr	r0, [pc, #44]	; (8001668 <HAL_ADC_MspInit+0xb8>)
 800163a:	f001 f883 	bl	8002744 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC1_IN1_BUCK_TEMP_Pin;
 800163e:	2302      	movs	r3, #2
 8001640:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001642:	2303      	movs	r3, #3
 8001644:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001646:	2300      	movs	r3, #0
 8001648:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ADC1_IN1_BUCK_TEMP_GPIO_Port, &GPIO_InitStruct);
 800164a:	f107 0314 	add.w	r3, r7, #20
 800164e:	4619      	mov	r1, r3
 8001650:	4806      	ldr	r0, [pc, #24]	; (800166c <HAL_ADC_MspInit+0xbc>)
 8001652:	f001 f877 	bl	8002744 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001656:	bf00      	nop
 8001658:	3728      	adds	r7, #40	; 0x28
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}
 800165e:	bf00      	nop
 8001660:	40012000 	.word	0x40012000
 8001664:	40023800 	.word	0x40023800
 8001668:	40020800 	.word	0x40020800
 800166c:	40020000 	.word	0x40020000

08001670 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b08a      	sub	sp, #40	; 0x28
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001678:	f107 0314 	add.w	r3, r7, #20
 800167c:	2200      	movs	r2, #0
 800167e:	601a      	str	r2, [r3, #0]
 8001680:	605a      	str	r2, [r3, #4]
 8001682:	609a      	str	r2, [r3, #8]
 8001684:	60da      	str	r2, [r3, #12]
 8001686:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	4a19      	ldr	r2, [pc, #100]	; (80016f4 <HAL_CAN_MspInit+0x84>)
 800168e:	4293      	cmp	r3, r2
 8001690:	d12c      	bne.n	80016ec <HAL_CAN_MspInit+0x7c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001692:	2300      	movs	r3, #0
 8001694:	613b      	str	r3, [r7, #16]
 8001696:	4b18      	ldr	r3, [pc, #96]	; (80016f8 <HAL_CAN_MspInit+0x88>)
 8001698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800169a:	4a17      	ldr	r2, [pc, #92]	; (80016f8 <HAL_CAN_MspInit+0x88>)
 800169c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80016a0:	6413      	str	r3, [r2, #64]	; 0x40
 80016a2:	4b15      	ldr	r3, [pc, #84]	; (80016f8 <HAL_CAN_MspInit+0x88>)
 80016a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016aa:	613b      	str	r3, [r7, #16]
 80016ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016ae:	2300      	movs	r3, #0
 80016b0:	60fb      	str	r3, [r7, #12]
 80016b2:	4b11      	ldr	r3, [pc, #68]	; (80016f8 <HAL_CAN_MspInit+0x88>)
 80016b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b6:	4a10      	ldr	r2, [pc, #64]	; (80016f8 <HAL_CAN_MspInit+0x88>)
 80016b8:	f043 0301 	orr.w	r3, r3, #1
 80016bc:	6313      	str	r3, [r2, #48]	; 0x30
 80016be:	4b0e      	ldr	r3, [pc, #56]	; (80016f8 <HAL_CAN_MspInit+0x88>)
 80016c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c2:	f003 0301 	and.w	r3, r3, #1
 80016c6:	60fb      	str	r3, [r7, #12]
 80016c8:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80016ca:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80016ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016d0:	2302      	movs	r3, #2
 80016d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d4:	2300      	movs	r3, #0
 80016d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016d8:	2303      	movs	r3, #3
 80016da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80016dc:	2309      	movs	r3, #9
 80016de:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016e0:	f107 0314 	add.w	r3, r7, #20
 80016e4:	4619      	mov	r1, r3
 80016e6:	4805      	ldr	r0, [pc, #20]	; (80016fc <HAL_CAN_MspInit+0x8c>)
 80016e8:	f001 f82c 	bl	8002744 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80016ec:	bf00      	nop
 80016ee:	3728      	adds	r7, #40	; 0x28
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bd80      	pop	{r7, pc}
 80016f4:	40006400 	.word	0x40006400
 80016f8:	40023800 	.word	0x40023800
 80016fc:	40020000 	.word	0x40020000

08001700 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b08a      	sub	sp, #40	; 0x28
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001708:	f107 0314 	add.w	r3, r7, #20
 800170c:	2200      	movs	r2, #0
 800170e:	601a      	str	r2, [r3, #0]
 8001710:	605a      	str	r2, [r3, #4]
 8001712:	609a      	str	r2, [r3, #8]
 8001714:	60da      	str	r2, [r3, #12]
 8001716:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	4a19      	ldr	r2, [pc, #100]	; (8001784 <HAL_SPI_MspInit+0x84>)
 800171e:	4293      	cmp	r3, r2
 8001720:	d12b      	bne.n	800177a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001722:	2300      	movs	r3, #0
 8001724:	613b      	str	r3, [r7, #16]
 8001726:	4b18      	ldr	r3, [pc, #96]	; (8001788 <HAL_SPI_MspInit+0x88>)
 8001728:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800172a:	4a17      	ldr	r2, [pc, #92]	; (8001788 <HAL_SPI_MspInit+0x88>)
 800172c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001730:	6453      	str	r3, [r2, #68]	; 0x44
 8001732:	4b15      	ldr	r3, [pc, #84]	; (8001788 <HAL_SPI_MspInit+0x88>)
 8001734:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001736:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800173a:	613b      	str	r3, [r7, #16]
 800173c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800173e:	2300      	movs	r3, #0
 8001740:	60fb      	str	r3, [r7, #12]
 8001742:	4b11      	ldr	r3, [pc, #68]	; (8001788 <HAL_SPI_MspInit+0x88>)
 8001744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001746:	4a10      	ldr	r2, [pc, #64]	; (8001788 <HAL_SPI_MspInit+0x88>)
 8001748:	f043 0301 	orr.w	r3, r3, #1
 800174c:	6313      	str	r3, [r2, #48]	; 0x30
 800174e:	4b0e      	ldr	r3, [pc, #56]	; (8001788 <HAL_SPI_MspInit+0x88>)
 8001750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001752:	f003 0301 	and.w	r3, r3, #1
 8001756:	60fb      	str	r3, [r7, #12]
 8001758:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800175a:	23e0      	movs	r3, #224	; 0xe0
 800175c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800175e:	2302      	movs	r3, #2
 8001760:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001762:	2300      	movs	r3, #0
 8001764:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001766:	2303      	movs	r3, #3
 8001768:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800176a:	2305      	movs	r3, #5
 800176c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800176e:	f107 0314 	add.w	r3, r7, #20
 8001772:	4619      	mov	r1, r3
 8001774:	4805      	ldr	r0, [pc, #20]	; (800178c <HAL_SPI_MspInit+0x8c>)
 8001776:	f000 ffe5 	bl	8002744 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800177a:	bf00      	nop
 800177c:	3728      	adds	r7, #40	; 0x28
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}
 8001782:	bf00      	nop
 8001784:	40013000 	.word	0x40013000
 8001788:	40023800 	.word	0x40023800
 800178c:	40020000 	.word	0x40020000

08001790 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b08c      	sub	sp, #48	; 0x30
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001798:	f107 031c 	add.w	r3, r7, #28
 800179c:	2200      	movs	r2, #0
 800179e:	601a      	str	r2, [r3, #0]
 80017a0:	605a      	str	r2, [r3, #4]
 80017a2:	609a      	str	r2, [r3, #8]
 80017a4:	60da      	str	r2, [r3, #12]
 80017a6:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4a35      	ldr	r2, [pc, #212]	; (8001884 <HAL_TIM_Base_MspInit+0xf4>)
 80017ae:	4293      	cmp	r3, r2
 80017b0:	d116      	bne.n	80017e0 <HAL_TIM_Base_MspInit+0x50>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80017b2:	2300      	movs	r3, #0
 80017b4:	61bb      	str	r3, [r7, #24]
 80017b6:	4b34      	ldr	r3, [pc, #208]	; (8001888 <HAL_TIM_Base_MspInit+0xf8>)
 80017b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017ba:	4a33      	ldr	r2, [pc, #204]	; (8001888 <HAL_TIM_Base_MspInit+0xf8>)
 80017bc:	f043 0301 	orr.w	r3, r3, #1
 80017c0:	6453      	str	r3, [r2, #68]	; 0x44
 80017c2:	4b31      	ldr	r3, [pc, #196]	; (8001888 <HAL_TIM_Base_MspInit+0xf8>)
 80017c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017c6:	f003 0301 	and.w	r3, r3, #1
 80017ca:	61bb      	str	r3, [r7, #24]
 80017cc:	69bb      	ldr	r3, [r7, #24]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 80017ce:	2200      	movs	r2, #0
 80017d0:	2100      	movs	r1, #0
 80017d2:	2018      	movs	r0, #24
 80017d4:	f000 ff8c 	bl	80026f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 80017d8:	2018      	movs	r0, #24
 80017da:	f000 ffa5 	bl	8002728 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80017de:	e04c      	b.n	800187a <HAL_TIM_Base_MspInit+0xea>
  else if(htim_base->Instance==TIM2)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80017e8:	d10e      	bne.n	8001808 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80017ea:	2300      	movs	r3, #0
 80017ec:	617b      	str	r3, [r7, #20]
 80017ee:	4b26      	ldr	r3, [pc, #152]	; (8001888 <HAL_TIM_Base_MspInit+0xf8>)
 80017f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017f2:	4a25      	ldr	r2, [pc, #148]	; (8001888 <HAL_TIM_Base_MspInit+0xf8>)
 80017f4:	f043 0301 	orr.w	r3, r3, #1
 80017f8:	6413      	str	r3, [r2, #64]	; 0x40
 80017fa:	4b23      	ldr	r3, [pc, #140]	; (8001888 <HAL_TIM_Base_MspInit+0xf8>)
 80017fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017fe:	f003 0301 	and.w	r3, r3, #1
 8001802:	617b      	str	r3, [r7, #20]
 8001804:	697b      	ldr	r3, [r7, #20]
}
 8001806:	e038      	b.n	800187a <HAL_TIM_Base_MspInit+0xea>
  else if(htim_base->Instance==TIM3)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	4a1f      	ldr	r2, [pc, #124]	; (800188c <HAL_TIM_Base_MspInit+0xfc>)
 800180e:	4293      	cmp	r3, r2
 8001810:	d133      	bne.n	800187a <HAL_TIM_Base_MspInit+0xea>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001812:	2300      	movs	r3, #0
 8001814:	613b      	str	r3, [r7, #16]
 8001816:	4b1c      	ldr	r3, [pc, #112]	; (8001888 <HAL_TIM_Base_MspInit+0xf8>)
 8001818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800181a:	4a1b      	ldr	r2, [pc, #108]	; (8001888 <HAL_TIM_Base_MspInit+0xf8>)
 800181c:	f043 0302 	orr.w	r3, r3, #2
 8001820:	6413      	str	r3, [r2, #64]	; 0x40
 8001822:	4b19      	ldr	r3, [pc, #100]	; (8001888 <HAL_TIM_Base_MspInit+0xf8>)
 8001824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001826:	f003 0302 	and.w	r3, r3, #2
 800182a:	613b      	str	r3, [r7, #16]
 800182c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800182e:	2300      	movs	r3, #0
 8001830:	60fb      	str	r3, [r7, #12]
 8001832:	4b15      	ldr	r3, [pc, #84]	; (8001888 <HAL_TIM_Base_MspInit+0xf8>)
 8001834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001836:	4a14      	ldr	r2, [pc, #80]	; (8001888 <HAL_TIM_Base_MspInit+0xf8>)
 8001838:	f043 0304 	orr.w	r3, r3, #4
 800183c:	6313      	str	r3, [r2, #48]	; 0x30
 800183e:	4b12      	ldr	r3, [pc, #72]	; (8001888 <HAL_TIM_Base_MspInit+0xf8>)
 8001840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001842:	f003 0304 	and.w	r3, r3, #4
 8001846:	60fb      	str	r3, [r7, #12]
 8001848:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TIM3_CH1_IMD_IN_Pin;
 800184a:	2340      	movs	r3, #64	; 0x40
 800184c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800184e:	2302      	movs	r3, #2
 8001850:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001852:	2300      	movs	r3, #0
 8001854:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001856:	2300      	movs	r3, #0
 8001858:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800185a:	2302      	movs	r3, #2
 800185c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(TIM3_CH1_IMD_IN_GPIO_Port, &GPIO_InitStruct);
 800185e:	f107 031c 	add.w	r3, r7, #28
 8001862:	4619      	mov	r1, r3
 8001864:	480a      	ldr	r0, [pc, #40]	; (8001890 <HAL_TIM_Base_MspInit+0x100>)
 8001866:	f000 ff6d 	bl	8002744 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 800186a:	2200      	movs	r2, #0
 800186c:	2105      	movs	r1, #5
 800186e:	201d      	movs	r0, #29
 8001870:	f000 ff3e 	bl	80026f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001874:	201d      	movs	r0, #29
 8001876:	f000 ff57 	bl	8002728 <HAL_NVIC_EnableIRQ>
}
 800187a:	bf00      	nop
 800187c:	3730      	adds	r7, #48	; 0x30
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}
 8001882:	bf00      	nop
 8001884:	40010000 	.word	0x40010000
 8001888:	40023800 	.word	0x40023800
 800188c:	40000400 	.word	0x40000400
 8001890:	40020800 	.word	0x40020800

08001894 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b088      	sub	sp, #32
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800189c:	f107 030c 	add.w	r3, r7, #12
 80018a0:	2200      	movs	r2, #0
 80018a2:	601a      	str	r2, [r3, #0]
 80018a4:	605a      	str	r2, [r3, #4]
 80018a6:	609a      	str	r2, [r3, #8]
 80018a8:	60da      	str	r2, [r3, #12]
 80018aa:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	4a12      	ldr	r2, [pc, #72]	; (80018fc <HAL_TIM_MspPostInit+0x68>)
 80018b2:	4293      	cmp	r3, r2
 80018b4:	d11e      	bne.n	80018f4 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018b6:	2300      	movs	r3, #0
 80018b8:	60bb      	str	r3, [r7, #8]
 80018ba:	4b11      	ldr	r3, [pc, #68]	; (8001900 <HAL_TIM_MspPostInit+0x6c>)
 80018bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018be:	4a10      	ldr	r2, [pc, #64]	; (8001900 <HAL_TIM_MspPostInit+0x6c>)
 80018c0:	f043 0301 	orr.w	r3, r3, #1
 80018c4:	6313      	str	r3, [r2, #48]	; 0x30
 80018c6:	4b0e      	ldr	r3, [pc, #56]	; (8001900 <HAL_TIM_MspPostInit+0x6c>)
 80018c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ca:	f003 0301 	and.w	r3, r3, #1
 80018ce:	60bb      	str	r3, [r7, #8]
 80018d0:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = TIM1_CH1_BLUE_Pin|TIM1_CH2_GREEN_Pin|TIM1_CH3_RED_Pin;
 80018d2:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80018d6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018d8:	2302      	movs	r3, #2
 80018da:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018dc:	2300      	movs	r3, #0
 80018de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018e0:	2300      	movs	r3, #0
 80018e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80018e4:	2301      	movs	r3, #1
 80018e6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018e8:	f107 030c 	add.w	r3, r7, #12
 80018ec:	4619      	mov	r1, r3
 80018ee:	4805      	ldr	r0, [pc, #20]	; (8001904 <HAL_TIM_MspPostInit+0x70>)
 80018f0:	f000 ff28 	bl	8002744 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80018f4:	bf00      	nop
 80018f6:	3720      	adds	r7, #32
 80018f8:	46bd      	mov	sp, r7
 80018fa:	bd80      	pop	{r7, pc}
 80018fc:	40010000 	.word	0x40010000
 8001900:	40023800 	.word	0x40023800
 8001904:	40020000 	.word	0x40020000

08001908 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b08a      	sub	sp, #40	; 0x28
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001910:	f107 0314 	add.w	r3, r7, #20
 8001914:	2200      	movs	r2, #0
 8001916:	601a      	str	r2, [r3, #0]
 8001918:	605a      	str	r2, [r3, #4]
 800191a:	609a      	str	r2, [r3, #8]
 800191c:	60da      	str	r2, [r3, #12]
 800191e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	4a19      	ldr	r2, [pc, #100]	; (800198c <HAL_UART_MspInit+0x84>)
 8001926:	4293      	cmp	r3, r2
 8001928:	d12b      	bne.n	8001982 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800192a:	2300      	movs	r3, #0
 800192c:	613b      	str	r3, [r7, #16]
 800192e:	4b18      	ldr	r3, [pc, #96]	; (8001990 <HAL_UART_MspInit+0x88>)
 8001930:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001932:	4a17      	ldr	r2, [pc, #92]	; (8001990 <HAL_UART_MspInit+0x88>)
 8001934:	f043 0310 	orr.w	r3, r3, #16
 8001938:	6453      	str	r3, [r2, #68]	; 0x44
 800193a:	4b15      	ldr	r3, [pc, #84]	; (8001990 <HAL_UART_MspInit+0x88>)
 800193c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800193e:	f003 0310 	and.w	r3, r3, #16
 8001942:	613b      	str	r3, [r7, #16]
 8001944:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001946:	2300      	movs	r3, #0
 8001948:	60fb      	str	r3, [r7, #12]
 800194a:	4b11      	ldr	r3, [pc, #68]	; (8001990 <HAL_UART_MspInit+0x88>)
 800194c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800194e:	4a10      	ldr	r2, [pc, #64]	; (8001990 <HAL_UART_MspInit+0x88>)
 8001950:	f043 0302 	orr.w	r3, r3, #2
 8001954:	6313      	str	r3, [r2, #48]	; 0x30
 8001956:	4b0e      	ldr	r3, [pc, #56]	; (8001990 <HAL_UART_MspInit+0x88>)
 8001958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800195a:	f003 0302 	and.w	r3, r3, #2
 800195e:	60fb      	str	r3, [r7, #12]
 8001960:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001962:	23c0      	movs	r3, #192	; 0xc0
 8001964:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001966:	2302      	movs	r3, #2
 8001968:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800196a:	2300      	movs	r3, #0
 800196c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800196e:	2303      	movs	r3, #3
 8001970:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001972:	2307      	movs	r3, #7
 8001974:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001976:	f107 0314 	add.w	r3, r7, #20
 800197a:	4619      	mov	r1, r3
 800197c:	4805      	ldr	r0, [pc, #20]	; (8001994 <HAL_UART_MspInit+0x8c>)
 800197e:	f000 fee1 	bl	8002744 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001982:	bf00      	nop
 8001984:	3728      	adds	r7, #40	; 0x28
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}
 800198a:	bf00      	nop
 800198c:	40011000 	.word	0x40011000
 8001990:	40023800 	.word	0x40023800
 8001994:	40020400 	.word	0x40020400

08001998 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b08c      	sub	sp, #48	; 0x30
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80019a0:	2300      	movs	r3, #0
 80019a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80019a4:	2300      	movs	r3, #0
 80019a6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM9 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, TickPriority ,0);
 80019a8:	2200      	movs	r2, #0
 80019aa:	6879      	ldr	r1, [r7, #4]
 80019ac:	2018      	movs	r0, #24
 80019ae:	f000 fe9f 	bl	80026f0 <HAL_NVIC_SetPriority>

  /* Enable the TIM9 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 80019b2:	2018      	movs	r0, #24
 80019b4:	f000 feb8 	bl	8002728 <HAL_NVIC_EnableIRQ>
  /* Enable TIM9 clock */
  __HAL_RCC_TIM9_CLK_ENABLE();
 80019b8:	2300      	movs	r3, #0
 80019ba:	60fb      	str	r3, [r7, #12]
 80019bc:	4b1f      	ldr	r3, [pc, #124]	; (8001a3c <HAL_InitTick+0xa4>)
 80019be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019c0:	4a1e      	ldr	r2, [pc, #120]	; (8001a3c <HAL_InitTick+0xa4>)
 80019c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019c6:	6453      	str	r3, [r2, #68]	; 0x44
 80019c8:	4b1c      	ldr	r3, [pc, #112]	; (8001a3c <HAL_InitTick+0xa4>)
 80019ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019d0:	60fb      	str	r3, [r7, #12]
 80019d2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80019d4:	f107 0210 	add.w	r2, r7, #16
 80019d8:	f107 0314 	add.w	r3, r7, #20
 80019dc:	4611      	mov	r1, r2
 80019de:	4618      	mov	r0, r3
 80019e0:	f001 fcf2 	bl	80033c8 <HAL_RCC_GetClockConfig>

  /* Compute TIM9 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 80019e4:	f001 fcdc 	bl	80033a0 <HAL_RCC_GetPCLK2Freq>
 80019e8:	4603      	mov	r3, r0
 80019ea:	005b      	lsls	r3, r3, #1
 80019ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM9 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80019ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019f0:	4a13      	ldr	r2, [pc, #76]	; (8001a40 <HAL_InitTick+0xa8>)
 80019f2:	fba2 2303 	umull	r2, r3, r2, r3
 80019f6:	0c9b      	lsrs	r3, r3, #18
 80019f8:	3b01      	subs	r3, #1
 80019fa:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM9 */
  htim9.Instance = TIM9;
 80019fc:	4b11      	ldr	r3, [pc, #68]	; (8001a44 <HAL_InitTick+0xac>)
 80019fe:	4a12      	ldr	r2, [pc, #72]	; (8001a48 <HAL_InitTick+0xb0>)
 8001a00:	601a      	str	r2, [r3, #0]
  + Period = [(TIM9CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim9.Init.Period = (1000000U / 1000U) - 1U;
 8001a02:	4b10      	ldr	r3, [pc, #64]	; (8001a44 <HAL_InitTick+0xac>)
 8001a04:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001a08:	60da      	str	r2, [r3, #12]
  htim9.Init.Prescaler = uwPrescalerValue;
 8001a0a:	4a0e      	ldr	r2, [pc, #56]	; (8001a44 <HAL_InitTick+0xac>)
 8001a0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a0e:	6053      	str	r3, [r2, #4]
  htim9.Init.ClockDivision = 0;
 8001a10:	4b0c      	ldr	r3, [pc, #48]	; (8001a44 <HAL_InitTick+0xac>)
 8001a12:	2200      	movs	r2, #0
 8001a14:	611a      	str	r2, [r3, #16]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a16:	4b0b      	ldr	r3, [pc, #44]	; (8001a44 <HAL_InitTick+0xac>)
 8001a18:	2200      	movs	r2, #0
 8001a1a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim9) == HAL_OK)
 8001a1c:	4809      	ldr	r0, [pc, #36]	; (8001a44 <HAL_InitTick+0xac>)
 8001a1e:	f002 faad 	bl	8003f7c <HAL_TIM_Base_Init>
 8001a22:	4603      	mov	r3, r0
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d104      	bne.n	8001a32 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim9);
 8001a28:	4806      	ldr	r0, [pc, #24]	; (8001a44 <HAL_InitTick+0xac>)
 8001a2a:	f002 fb5f 	bl	80040ec <HAL_TIM_Base_Start_IT>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	e000      	b.n	8001a34 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8001a32:	2301      	movs	r3, #1
}
 8001a34:	4618      	mov	r0, r3
 8001a36:	3730      	adds	r7, #48	; 0x30
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bd80      	pop	{r7, pc}
 8001a3c:	40023800 	.word	0x40023800
 8001a40:	431bde83 	.word	0x431bde83
 8001a44:	20004b94 	.word	0x20004b94
 8001a48:	40014000 	.word	0x40014000

08001a4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a50:	e7fe      	b.n	8001a50 <NMI_Handler+0x4>

08001a52 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a52:	b480      	push	{r7}
 8001a54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a56:	e7fe      	b.n	8001a56 <HardFault_Handler+0x4>

08001a58 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a5c:	e7fe      	b.n	8001a5c <MemManage_Handler+0x4>

08001a5e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a5e:	b480      	push	{r7}
 8001a60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a62:	e7fe      	b.n	8001a62 <BusFault_Handler+0x4>

08001a64 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a64:	b480      	push	{r7}
 8001a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a68:	e7fe      	b.n	8001a68 <UsageFault_Handler+0x4>

08001a6a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a6a:	b480      	push	{r7}
 8001a6c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a6e:	bf00      	nop
 8001a70:	46bd      	mov	sp, r7
 8001a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a76:	4770      	bx	lr

08001a78 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001a7c:	4803      	ldr	r0, [pc, #12]	; (8001a8c <TIM1_BRK_TIM9_IRQHandler+0x14>)
 8001a7e:	f002 fcb0 	bl	80043e2 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim9);
 8001a82:	4803      	ldr	r0, [pc, #12]	; (8001a90 <TIM1_BRK_TIM9_IRQHandler+0x18>)
 8001a84:	f002 fcad 	bl	80043e2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8001a88:	bf00      	nop
 8001a8a:	bd80      	pop	{r7, pc}
 8001a8c:	20004a84 	.word	0x20004a84
 8001a90:	20004b94 	.word	0x20004b94

08001a94 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001a98:	4802      	ldr	r0, [pc, #8]	; (8001aa4 <TIM3_IRQHandler+0x10>)
 8001a9a:	f002 fca2 	bl	80043e2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001a9e:	bf00      	nop
 8001aa0:	bd80      	pop	{r7, pc}
 8001aa2:	bf00      	nop
 8001aa4:	200049b0 	.word	0x200049b0

08001aa8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b086      	sub	sp, #24
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	60f8      	str	r0, [r7, #12]
 8001ab0:	60b9      	str	r1, [r7, #8]
 8001ab2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	617b      	str	r3, [r7, #20]
 8001ab8:	e00a      	b.n	8001ad0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001aba:	f3af 8000 	nop.w
 8001abe:	4601      	mov	r1, r0
 8001ac0:	68bb      	ldr	r3, [r7, #8]
 8001ac2:	1c5a      	adds	r2, r3, #1
 8001ac4:	60ba      	str	r2, [r7, #8]
 8001ac6:	b2ca      	uxtb	r2, r1
 8001ac8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001aca:	697b      	ldr	r3, [r7, #20]
 8001acc:	3301      	adds	r3, #1
 8001ace:	617b      	str	r3, [r7, #20]
 8001ad0:	697a      	ldr	r2, [r7, #20]
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	429a      	cmp	r2, r3
 8001ad6:	dbf0      	blt.n	8001aba <_read+0x12>
	}

return len;
 8001ad8:	687b      	ldr	r3, [r7, #4]
}
 8001ada:	4618      	mov	r0, r3
 8001adc:	3718      	adds	r7, #24
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}

08001ae2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001ae2:	b580      	push	{r7, lr}
 8001ae4:	b086      	sub	sp, #24
 8001ae6:	af00      	add	r7, sp, #0
 8001ae8:	60f8      	str	r0, [r7, #12]
 8001aea:	60b9      	str	r1, [r7, #8]
 8001aec:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001aee:	2300      	movs	r3, #0
 8001af0:	617b      	str	r3, [r7, #20]
 8001af2:	e009      	b.n	8001b08 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001af4:	68bb      	ldr	r3, [r7, #8]
 8001af6:	1c5a      	adds	r2, r3, #1
 8001af8:	60ba      	str	r2, [r7, #8]
 8001afa:	781b      	ldrb	r3, [r3, #0]
 8001afc:	4618      	mov	r0, r3
 8001afe:	f7fe fd33 	bl	8000568 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b02:	697b      	ldr	r3, [r7, #20]
 8001b04:	3301      	adds	r3, #1
 8001b06:	617b      	str	r3, [r7, #20]
 8001b08:	697a      	ldr	r2, [r7, #20]
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	429a      	cmp	r2, r3
 8001b0e:	dbf1      	blt.n	8001af4 <_write+0x12>
	}
	return len;
 8001b10:	687b      	ldr	r3, [r7, #4]
}
 8001b12:	4618      	mov	r0, r3
 8001b14:	3718      	adds	r7, #24
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}

08001b1a <_close>:

int _close(int file)
{
 8001b1a:	b480      	push	{r7}
 8001b1c:	b083      	sub	sp, #12
 8001b1e:	af00      	add	r7, sp, #0
 8001b20:	6078      	str	r0, [r7, #4]
	return -1;
 8001b22:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b26:	4618      	mov	r0, r3
 8001b28:	370c      	adds	r7, #12
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b30:	4770      	bx	lr

08001b32 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b32:	b480      	push	{r7}
 8001b34:	b083      	sub	sp, #12
 8001b36:	af00      	add	r7, sp, #0
 8001b38:	6078      	str	r0, [r7, #4]
 8001b3a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001b42:	605a      	str	r2, [r3, #4]
	return 0;
 8001b44:	2300      	movs	r3, #0
}
 8001b46:	4618      	mov	r0, r3
 8001b48:	370c      	adds	r7, #12
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b50:	4770      	bx	lr

08001b52 <_isatty>:

int _isatty(int file)
{
 8001b52:	b480      	push	{r7}
 8001b54:	b083      	sub	sp, #12
 8001b56:	af00      	add	r7, sp, #0
 8001b58:	6078      	str	r0, [r7, #4]
	return 1;
 8001b5a:	2301      	movs	r3, #1
}
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	370c      	adds	r7, #12
 8001b60:	46bd      	mov	sp, r7
 8001b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b66:	4770      	bx	lr

08001b68 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	b085      	sub	sp, #20
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	60f8      	str	r0, [r7, #12]
 8001b70:	60b9      	str	r1, [r7, #8]
 8001b72:	607a      	str	r2, [r7, #4]
	return 0;
 8001b74:	2300      	movs	r3, #0
}
 8001b76:	4618      	mov	r0, r3
 8001b78:	3714      	adds	r7, #20
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b80:	4770      	bx	lr
	...

08001b84 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b086      	sub	sp, #24
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b8c:	4a14      	ldr	r2, [pc, #80]	; (8001be0 <_sbrk+0x5c>)
 8001b8e:	4b15      	ldr	r3, [pc, #84]	; (8001be4 <_sbrk+0x60>)
 8001b90:	1ad3      	subs	r3, r2, r3
 8001b92:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b94:	697b      	ldr	r3, [r7, #20]
 8001b96:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b98:	4b13      	ldr	r3, [pc, #76]	; (8001be8 <_sbrk+0x64>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d102      	bne.n	8001ba6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ba0:	4b11      	ldr	r3, [pc, #68]	; (8001be8 <_sbrk+0x64>)
 8001ba2:	4a12      	ldr	r2, [pc, #72]	; (8001bec <_sbrk+0x68>)
 8001ba4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ba6:	4b10      	ldr	r3, [pc, #64]	; (8001be8 <_sbrk+0x64>)
 8001ba8:	681a      	ldr	r2, [r3, #0]
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	4413      	add	r3, r2
 8001bae:	693a      	ldr	r2, [r7, #16]
 8001bb0:	429a      	cmp	r2, r3
 8001bb2:	d207      	bcs.n	8001bc4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001bb4:	f006 fd32 	bl	800861c <__errno>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	220c      	movs	r2, #12
 8001bbc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001bbe:	f04f 33ff 	mov.w	r3, #4294967295
 8001bc2:	e009      	b.n	8001bd8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001bc4:	4b08      	ldr	r3, [pc, #32]	; (8001be8 <_sbrk+0x64>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001bca:	4b07      	ldr	r3, [pc, #28]	; (8001be8 <_sbrk+0x64>)
 8001bcc:	681a      	ldr	r2, [r3, #0]
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	4413      	add	r3, r2
 8001bd2:	4a05      	ldr	r2, [pc, #20]	; (8001be8 <_sbrk+0x64>)
 8001bd4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001bd6:	68fb      	ldr	r3, [r7, #12]
}
 8001bd8:	4618      	mov	r0, r3
 8001bda:	3718      	adds	r7, #24
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	bd80      	pop	{r7, pc}
 8001be0:	20020000 	.word	0x20020000
 8001be4:	00000400 	.word	0x00000400
 8001be8:	20000090 	.word	0x20000090
 8001bec:	20004c30 	.word	0x20004c30

08001bf0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001bf4:	4b06      	ldr	r3, [pc, #24]	; (8001c10 <SystemInit+0x20>)
 8001bf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001bfa:	4a05      	ldr	r2, [pc, #20]	; (8001c10 <SystemInit+0x20>)
 8001bfc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c00:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c04:	bf00      	nop
 8001c06:	46bd      	mov	sp, r7
 8001c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0c:	4770      	bx	lr
 8001c0e:	bf00      	nop
 8001c10:	e000ed00 	.word	0xe000ed00

08001c14 <start_timers>:
#include <stdint.h>
#include "peripherals.h"
#include "timer_utils.h"

void start_timers() {
 8001c14:	b580      	push	{r7, lr}
 8001c16:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start(&htim2);
 8001c18:	4802      	ldr	r0, [pc, #8]	; (8001c24 <start_timers+0x10>)
 8001c1a:	f002 f9ff 	bl	800401c <HAL_TIM_Base_Start>
}
 8001c1e:	bf00      	nop
 8001c20:	bd80      	pop	{r7, pc}
 8001c22:	bf00      	nop
 8001c24:	20004b24 	.word	0x20004b24

08001c28 <delay_us>:

void delay_us(uint16_t us) {
 8001c28:	b480      	push	{r7}
 8001c2a:	b083      	sub	sp, #12
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	4603      	mov	r3, r0
 8001c30:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim2, 0);
 8001c32:	4b09      	ldr	r3, [pc, #36]	; (8001c58 <delay_us+0x30>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	2200      	movs	r2, #0
 8001c38:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim2) < us) { asm("NOP"); }
 8001c3a:	e000      	b.n	8001c3e <delay_us+0x16>
 8001c3c:	bf00      	nop
 8001c3e:	4b06      	ldr	r3, [pc, #24]	; (8001c58 <delay_us+0x30>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001c44:	88fb      	ldrh	r3, [r7, #6]
 8001c46:	429a      	cmp	r2, r3
 8001c48:	d3f8      	bcc.n	8001c3c <delay_us+0x14>
}
 8001c4a:	bf00      	nop
 8001c4c:	bf00      	nop
 8001c4e:	370c      	adds	r7, #12
 8001c50:	46bd      	mov	sp, r7
 8001c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c56:	4770      	bx	lr
 8001c58:	20004b24 	.word	0x20004b24

08001c5c <ext_led_blink_thread_fn>:
const osThreadAttr_t ext_led_blink_thread_attrs = {
	.name = "ext_led_blink_thread",
	.priority = (osPriority_t)osPriorityIdle
};

void ext_led_blink_thread_fn(void* arg) {
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b082      	sub	sp, #8
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
	while (1) {
		HAL_GPIO_TogglePin(GPIOB, CONTACTOR_Pin);
 8001c64:	2102      	movs	r1, #2
 8001c66:	4804      	ldr	r0, [pc, #16]	; (8001c78 <ext_led_blink_thread_fn+0x1c>)
 8001c68:	f000 ff21 	bl	8002aae <HAL_GPIO_TogglePin>
		osDelay(1000);
 8001c6c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001c70:	f004 f85e 	bl	8005d30 <osDelay>
		HAL_GPIO_TogglePin(GPIOB, CONTACTOR_Pin);
 8001c74:	e7f6      	b.n	8001c64 <ext_led_blink_thread_fn+0x8>
 8001c76:	bf00      	nop
 8001c78:	40020400 	.word	0x40020400

08001c7c <measurements_thread_fn>:
	.name = "measurements_thread",
	.priority = (osPriority_t)osPriorityAboveNormal,
	.stack_size = 2048
};

void measurements_thread_fn(void* arg) {
 8001c7c:	b5b0      	push	{r4, r5, r7, lr}
 8001c7e:	b0ca      	sub	sp, #296	; 0x128
 8001c80:	af16      	add	r7, sp, #88	; 0x58
 8001c82:	6078      	str	r0, [r7, #4]
	Ltc6813 slave_device = Ltc6813_init(hspi1, GPIOA, 4);
 8001c84:	f107 0508 	add.w	r5, r7, #8
 8001c88:	4c50      	ldr	r4, [pc, #320]	; (8001dcc <measurements_thread_fn+0x150>)
 8001c8a:	2304      	movs	r3, #4
 8001c8c:	9314      	str	r3, [sp, #80]	; 0x50
 8001c8e:	4b50      	ldr	r3, [pc, #320]	; (8001dd0 <measurements_thread_fn+0x154>)
 8001c90:	9313      	str	r3, [sp, #76]	; 0x4c
 8001c92:	4668      	mov	r0, sp
 8001c94:	f104 030c 	add.w	r3, r4, #12
 8001c98:	224c      	movs	r2, #76	; 0x4c
 8001c9a:	4619      	mov	r1, r3
 8001c9c:	f006 fce8 	bl	8008670 <memcpy>
 8001ca0:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8001ca4:	4628      	mov	r0, r5
 8001ca6:	f7fe fdfa 	bl	800089e <Ltc6813_init>

	Ltc6813_wakeup_sleep(&slave_device);
 8001caa:	f107 0308 	add.w	r3, r7, #8
 8001cae:	4618      	mov	r0, r3
 8001cb0:	f7fe fef6 	bl	8000aa0 <Ltc6813_wakeup_sleep>
	uint8_t success;
	osDelay(1000);
 8001cb4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001cb8:	f004 f83a 	bl	8005d30 <osDelay>

	while (1) {
		Ltc6813_wakeup_sleep(&slave_device);
 8001cbc:	f107 0308 	add.w	r3, r7, #8
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	f7fe feed 	bl	8000aa0 <Ltc6813_wakeup_sleep>

		printf("CFG A\r\n");
 8001cc6:	4843      	ldr	r0, [pc, #268]	; (8001dd4 <measurements_thread_fn+0x158>)
 8001cc8:	f006 fd6e 	bl	80087a8 <puts>

		success = Ltc6813_read_cfga(&slave_device);
 8001ccc:	f107 0308 	add.w	r3, r7, #8
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	f7ff f817 	bl	8000d04 <Ltc6813_read_cfga>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf

		if (success) {
 8001cdc:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d003      	beq.n	8001cec <measurements_thread_fn+0x70>
			printf("PEC SUCCESS\r\n");
 8001ce4:	483c      	ldr	r0, [pc, #240]	; (8001dd8 <measurements_thread_fn+0x15c>)
 8001ce6:	f006 fd5f 	bl	80087a8 <puts>
 8001cea:	e002      	b.n	8001cf2 <measurements_thread_fn+0x76>
		} else {
			printf("PEC FAIL\r\n");
 8001cec:	483b      	ldr	r0, [pc, #236]	; (8001ddc <measurements_thread_fn+0x160>)
 8001cee:	f006 fd5b 	bl	80087a8 <puts>
		}

		Buffer_print(&(slave_device.cfga_bfr));
 8001cf2:	f107 0308 	add.w	r3, r7, #8
 8001cf6:	3368      	adds	r3, #104	; 0x68
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	f7fe fd7b 	bl	80007f4 <Buffer_print>

		Ltc6813_wakeup_sleep(&slave_device);
 8001cfe:	f107 0308 	add.w	r3, r7, #8
 8001d02:	4618      	mov	r0, r3
 8001d04:	f7fe fecc 	bl	8000aa0 <Ltc6813_wakeup_sleep>

		printf("WRITE REFON 1\r\n");
 8001d08:	4835      	ldr	r0, [pc, #212]	; (8001de0 <measurements_thread_fn+0x164>)
 8001d0a:	f006 fd4d 	bl	80087a8 <puts>

		uint8_t CFGAR0 = Buffer_index(&(slave_device.cfga_bfr), 0);
 8001d0e:	f107 0308 	add.w	r3, r7, #8
 8001d12:	3368      	adds	r3, #104	; 0x68
 8001d14:	2100      	movs	r1, #0
 8001d16:	4618      	mov	r0, r3
 8001d18:	f7fe fca4 	bl	8000664 <Buffer_index>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	f887 30ce 	strb.w	r3, [r7, #206]	; 0xce
		CFGAR0 |= 0b00000100u;
 8001d22:	f897 30ce 	ldrb.w	r3, [r7, #206]	; 0xce
 8001d26:	f043 0304 	orr.w	r3, r3, #4
 8001d2a:	f887 30ce 	strb.w	r3, [r7, #206]	; 0xce

		Buffer_set_index(&(slave_device.cfga_bfr), 0, CFGAR0);
 8001d2e:	f897 20ce 	ldrb.w	r2, [r7, #206]	; 0xce
 8001d32:	f107 0308 	add.w	r3, r7, #8
 8001d36:	3368      	adds	r3, #104	; 0x68
 8001d38:	2100      	movs	r1, #0
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	f7fe fca7 	bl	800068e <Buffer_set_index>

		Ltc6813_write_cfga(&slave_device);
 8001d40:	f107 0308 	add.w	r3, r7, #8
 8001d44:	4618      	mov	r0, r3
 8001d46:	f7fe ffea 	bl	8000d1e <Ltc6813_write_cfga>

		printf("CFG A\r\n");
 8001d4a:	4822      	ldr	r0, [pc, #136]	; (8001dd4 <measurements_thread_fn+0x158>)
 8001d4c:	f006 fd2c 	bl	80087a8 <puts>

		success = Ltc6813_read_cfga(&slave_device);
 8001d50:	f107 0308 	add.w	r3, r7, #8
 8001d54:	4618      	mov	r0, r3
 8001d56:	f7fe ffd5 	bl	8000d04 <Ltc6813_read_cfga>
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf

		if (success) {
 8001d60:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d003      	beq.n	8001d70 <measurements_thread_fn+0xf4>
			printf("PEC SUCCESS\r\n");
 8001d68:	481b      	ldr	r0, [pc, #108]	; (8001dd8 <measurements_thread_fn+0x15c>)
 8001d6a:	f006 fd1d 	bl	80087a8 <puts>
 8001d6e:	e002      	b.n	8001d76 <measurements_thread_fn+0xfa>
		} else {
			printf("PEC FAIL\r\n");
 8001d70:	481a      	ldr	r0, [pc, #104]	; (8001ddc <measurements_thread_fn+0x160>)
 8001d72:	f006 fd19 	bl	80087a8 <puts>
		}

		Buffer_print(&(slave_device.cfga_bfr));
 8001d76:	f107 0308 	add.w	r3, r7, #8
 8001d7a:	3368      	adds	r3, #104	; 0x68
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	f7fe fd39 	bl	80007f4 <Buffer_print>

		printf("START ADC CONV\r\n");
 8001d82:	4818      	ldr	r0, [pc, #96]	; (8001de4 <measurements_thread_fn+0x168>)
 8001d84:	f006 fd10 	bl	80087a8 <puts>

		success = Ltc6813_read_adc(&slave_device, NORMAL_ADC);
 8001d88:	f107 0308 	add.w	r3, r7, #8
 8001d8c:	f44f 7158 	mov.w	r1, #864	; 0x360
 8001d90:	4618      	mov	r0, r3
 8001d92:	f7fe ffec 	bl	8000d6e <Ltc6813_read_adc>
 8001d96:	4603      	mov	r3, r0
 8001d98:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf

		printf("FINISH ADC CONV\r\n");
 8001d9c:	4812      	ldr	r0, [pc, #72]	; (8001de8 <measurements_thread_fn+0x16c>)
 8001d9e:	f006 fd03 	bl	80087a8 <puts>

		if (success) {
 8001da2:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d003      	beq.n	8001db2 <measurements_thread_fn+0x136>
			printf("PEC SUCCESS\r\n");
 8001daa:	480b      	ldr	r0, [pc, #44]	; (8001dd8 <measurements_thread_fn+0x15c>)
 8001dac:	f006 fcfc 	bl	80087a8 <puts>
 8001db0:	e002      	b.n	8001db8 <measurements_thread_fn+0x13c>
		} else {
			printf("PEC FAIL\r\n");
 8001db2:	480a      	ldr	r0, [pc, #40]	; (8001ddc <measurements_thread_fn+0x160>)
 8001db4:	f006 fcf8 	bl	80087a8 <puts>
		}

		Ltc6813_print_voltages(&slave_device);
 8001db8:	f107 0308 	add.w	r3, r7, #8
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	f7fe fe85 	bl	8000acc <Ltc6813_print_voltages>


		osDelay(1000);
 8001dc2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001dc6:	f003 ffb3 	bl	8005d30 <osDelay>
	while (1) {
 8001dca:	e777      	b.n	8001cbc <measurements_thread_fn+0x40>
 8001dcc:	20004acc 	.word	0x20004acc
 8001dd0:	40020000 	.word	0x40020000
 8001dd4:	08009ae4 	.word	0x08009ae4
 8001dd8:	08009aec 	.word	0x08009aec
 8001ddc:	08009afc 	.word	0x08009afc
 8001de0:	08009b08 	.word	0x08009b08
 8001de4:	08009b18 	.word	0x08009b18
 8001de8:	08009b28 	.word	0x08009b28

08001dec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001dec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001e24 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001df0:	480d      	ldr	r0, [pc, #52]	; (8001e28 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001df2:	490e      	ldr	r1, [pc, #56]	; (8001e2c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001df4:	4a0e      	ldr	r2, [pc, #56]	; (8001e30 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001df6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001df8:	e002      	b.n	8001e00 <LoopCopyDataInit>

08001dfa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001dfa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001dfc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001dfe:	3304      	adds	r3, #4

08001e00 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e00:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e02:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e04:	d3f9      	bcc.n	8001dfa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e06:	4a0b      	ldr	r2, [pc, #44]	; (8001e34 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001e08:	4c0b      	ldr	r4, [pc, #44]	; (8001e38 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001e0a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e0c:	e001      	b.n	8001e12 <LoopFillZerobss>

08001e0e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e0e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e10:	3204      	adds	r2, #4

08001e12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e12:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e14:	d3fb      	bcc.n	8001e0e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001e16:	f7ff feeb 	bl	8001bf0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001e1a:	f006 fc05 	bl	8008628 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e1e:	f7ff f80d 	bl	8000e3c <main>
  bx  lr    
 8001e22:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001e24:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001e28:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e2c:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001e30:	08009e5c 	.word	0x08009e5c
  ldr r2, =_sbss
 8001e34:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001e38:	20004c30 	.word	0x20004c30

08001e3c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e3c:	e7fe      	b.n	8001e3c <ADC_IRQHandler>
	...

08001e40 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001e44:	4b0e      	ldr	r3, [pc, #56]	; (8001e80 <HAL_Init+0x40>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4a0d      	ldr	r2, [pc, #52]	; (8001e80 <HAL_Init+0x40>)
 8001e4a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e4e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001e50:	4b0b      	ldr	r3, [pc, #44]	; (8001e80 <HAL_Init+0x40>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4a0a      	ldr	r2, [pc, #40]	; (8001e80 <HAL_Init+0x40>)
 8001e56:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001e5a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e5c:	4b08      	ldr	r3, [pc, #32]	; (8001e80 <HAL_Init+0x40>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	4a07      	ldr	r2, [pc, #28]	; (8001e80 <HAL_Init+0x40>)
 8001e62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e66:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e68:	2003      	movs	r0, #3
 8001e6a:	f000 fc36 	bl	80026da <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e6e:	2000      	movs	r0, #0
 8001e70:	f7ff fd92 	bl	8001998 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e74:	f7ff fb70 	bl	8001558 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e78:	2300      	movs	r3, #0
}
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	bd80      	pop	{r7, pc}
 8001e7e:	bf00      	nop
 8001e80:	40023c00 	.word	0x40023c00

08001e84 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e84:	b480      	push	{r7}
 8001e86:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e88:	4b06      	ldr	r3, [pc, #24]	; (8001ea4 <HAL_IncTick+0x20>)
 8001e8a:	781b      	ldrb	r3, [r3, #0]
 8001e8c:	461a      	mov	r2, r3
 8001e8e:	4b06      	ldr	r3, [pc, #24]	; (8001ea8 <HAL_IncTick+0x24>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	4413      	add	r3, r2
 8001e94:	4a04      	ldr	r2, [pc, #16]	; (8001ea8 <HAL_IncTick+0x24>)
 8001e96:	6013      	str	r3, [r2, #0]
}
 8001e98:	bf00      	nop
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea0:	4770      	bx	lr
 8001ea2:	bf00      	nop
 8001ea4:	20000008 	.word	0x20000008
 8001ea8:	20004bdc 	.word	0x20004bdc

08001eac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001eac:	b480      	push	{r7}
 8001eae:	af00      	add	r7, sp, #0
  return uwTick;
 8001eb0:	4b03      	ldr	r3, [pc, #12]	; (8001ec0 <HAL_GetTick+0x14>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
}
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebc:	4770      	bx	lr
 8001ebe:	bf00      	nop
 8001ec0:	20004bdc 	.word	0x20004bdc

08001ec4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b084      	sub	sp, #16
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d101      	bne.n	8001eda <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	e033      	b.n	8001f42 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d109      	bne.n	8001ef6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001ee2:	6878      	ldr	r0, [r7, #4]
 8001ee4:	f7ff fb64 	bl	80015b0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2200      	movs	r2, #0
 8001eec:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001efa:	f003 0310 	and.w	r3, r3, #16
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d118      	bne.n	8001f34 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f06:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001f0a:	f023 0302 	bic.w	r3, r3, #2
 8001f0e:	f043 0202 	orr.w	r2, r3, #2
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001f16:	6878      	ldr	r0, [r7, #4]
 8001f18:	f000 f93a 	bl	8002190 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	2200      	movs	r2, #0
 8001f20:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f26:	f023 0303 	bic.w	r3, r3, #3
 8001f2a:	f043 0201 	orr.w	r2, r3, #1
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	641a      	str	r2, [r3, #64]	; 0x40
 8001f32:	e001      	b.n	8001f38 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001f34:	2301      	movs	r3, #1
 8001f36:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001f40:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f42:	4618      	mov	r0, r3
 8001f44:	3710      	adds	r7, #16
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd80      	pop	{r7, pc}
	...

08001f4c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	b085      	sub	sp, #20
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
 8001f54:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001f56:	2300      	movs	r3, #0
 8001f58:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f60:	2b01      	cmp	r3, #1
 8001f62:	d101      	bne.n	8001f68 <HAL_ADC_ConfigChannel+0x1c>
 8001f64:	2302      	movs	r3, #2
 8001f66:	e105      	b.n	8002174 <HAL_ADC_ConfigChannel+0x228>
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2201      	movs	r2, #1
 8001f6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	2b09      	cmp	r3, #9
 8001f76:	d925      	bls.n	8001fc4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	68d9      	ldr	r1, [r3, #12]
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	b29b      	uxth	r3, r3
 8001f84:	461a      	mov	r2, r3
 8001f86:	4613      	mov	r3, r2
 8001f88:	005b      	lsls	r3, r3, #1
 8001f8a:	4413      	add	r3, r2
 8001f8c:	3b1e      	subs	r3, #30
 8001f8e:	2207      	movs	r2, #7
 8001f90:	fa02 f303 	lsl.w	r3, r2, r3
 8001f94:	43da      	mvns	r2, r3
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	400a      	ands	r2, r1
 8001f9c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	68d9      	ldr	r1, [r3, #12]
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	689a      	ldr	r2, [r3, #8]
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	b29b      	uxth	r3, r3
 8001fae:	4618      	mov	r0, r3
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	005b      	lsls	r3, r3, #1
 8001fb4:	4403      	add	r3, r0
 8001fb6:	3b1e      	subs	r3, #30
 8001fb8:	409a      	lsls	r2, r3
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	430a      	orrs	r2, r1
 8001fc0:	60da      	str	r2, [r3, #12]
 8001fc2:	e022      	b.n	800200a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	6919      	ldr	r1, [r3, #16]
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	b29b      	uxth	r3, r3
 8001fd0:	461a      	mov	r2, r3
 8001fd2:	4613      	mov	r3, r2
 8001fd4:	005b      	lsls	r3, r3, #1
 8001fd6:	4413      	add	r3, r2
 8001fd8:	2207      	movs	r2, #7
 8001fda:	fa02 f303 	lsl.w	r3, r2, r3
 8001fde:	43da      	mvns	r2, r3
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	400a      	ands	r2, r1
 8001fe6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	6919      	ldr	r1, [r3, #16]
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	689a      	ldr	r2, [r3, #8]
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	b29b      	uxth	r3, r3
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	005b      	lsls	r3, r3, #1
 8001ffe:	4403      	add	r3, r0
 8002000:	409a      	lsls	r2, r3
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	430a      	orrs	r2, r1
 8002008:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	685b      	ldr	r3, [r3, #4]
 800200e:	2b06      	cmp	r3, #6
 8002010:	d824      	bhi.n	800205c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	685a      	ldr	r2, [r3, #4]
 800201c:	4613      	mov	r3, r2
 800201e:	009b      	lsls	r3, r3, #2
 8002020:	4413      	add	r3, r2
 8002022:	3b05      	subs	r3, #5
 8002024:	221f      	movs	r2, #31
 8002026:	fa02 f303 	lsl.w	r3, r2, r3
 800202a:	43da      	mvns	r2, r3
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	400a      	ands	r2, r1
 8002032:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	b29b      	uxth	r3, r3
 8002040:	4618      	mov	r0, r3
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	685a      	ldr	r2, [r3, #4]
 8002046:	4613      	mov	r3, r2
 8002048:	009b      	lsls	r3, r3, #2
 800204a:	4413      	add	r3, r2
 800204c:	3b05      	subs	r3, #5
 800204e:	fa00 f203 	lsl.w	r2, r0, r3
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	430a      	orrs	r2, r1
 8002058:	635a      	str	r2, [r3, #52]	; 0x34
 800205a:	e04c      	b.n	80020f6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	2b0c      	cmp	r3, #12
 8002062:	d824      	bhi.n	80020ae <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	685a      	ldr	r2, [r3, #4]
 800206e:	4613      	mov	r3, r2
 8002070:	009b      	lsls	r3, r3, #2
 8002072:	4413      	add	r3, r2
 8002074:	3b23      	subs	r3, #35	; 0x23
 8002076:	221f      	movs	r2, #31
 8002078:	fa02 f303 	lsl.w	r3, r2, r3
 800207c:	43da      	mvns	r2, r3
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	400a      	ands	r2, r1
 8002084:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	b29b      	uxth	r3, r3
 8002092:	4618      	mov	r0, r3
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	685a      	ldr	r2, [r3, #4]
 8002098:	4613      	mov	r3, r2
 800209a:	009b      	lsls	r3, r3, #2
 800209c:	4413      	add	r3, r2
 800209e:	3b23      	subs	r3, #35	; 0x23
 80020a0:	fa00 f203 	lsl.w	r2, r0, r3
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	430a      	orrs	r2, r1
 80020aa:	631a      	str	r2, [r3, #48]	; 0x30
 80020ac:	e023      	b.n	80020f6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	685a      	ldr	r2, [r3, #4]
 80020b8:	4613      	mov	r3, r2
 80020ba:	009b      	lsls	r3, r3, #2
 80020bc:	4413      	add	r3, r2
 80020be:	3b41      	subs	r3, #65	; 0x41
 80020c0:	221f      	movs	r2, #31
 80020c2:	fa02 f303 	lsl.w	r3, r2, r3
 80020c6:	43da      	mvns	r2, r3
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	400a      	ands	r2, r1
 80020ce:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	b29b      	uxth	r3, r3
 80020dc:	4618      	mov	r0, r3
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	685a      	ldr	r2, [r3, #4]
 80020e2:	4613      	mov	r3, r2
 80020e4:	009b      	lsls	r3, r3, #2
 80020e6:	4413      	add	r3, r2
 80020e8:	3b41      	subs	r3, #65	; 0x41
 80020ea:	fa00 f203 	lsl.w	r2, r0, r3
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	430a      	orrs	r2, r1
 80020f4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80020f6:	4b22      	ldr	r3, [pc, #136]	; (8002180 <HAL_ADC_ConfigChannel+0x234>)
 80020f8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	4a21      	ldr	r2, [pc, #132]	; (8002184 <HAL_ADC_ConfigChannel+0x238>)
 8002100:	4293      	cmp	r3, r2
 8002102:	d109      	bne.n	8002118 <HAL_ADC_ConfigChannel+0x1cc>
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	2b12      	cmp	r3, #18
 800210a:	d105      	bne.n	8002118 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4a19      	ldr	r2, [pc, #100]	; (8002184 <HAL_ADC_ConfigChannel+0x238>)
 800211e:	4293      	cmp	r3, r2
 8002120:	d123      	bne.n	800216a <HAL_ADC_ConfigChannel+0x21e>
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	2b10      	cmp	r3, #16
 8002128:	d003      	beq.n	8002132 <HAL_ADC_ConfigChannel+0x1e6>
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	2b11      	cmp	r3, #17
 8002130:	d11b      	bne.n	800216a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	685b      	ldr	r3, [r3, #4]
 8002136:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	2b10      	cmp	r3, #16
 8002144:	d111      	bne.n	800216a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002146:	4b10      	ldr	r3, [pc, #64]	; (8002188 <HAL_ADC_ConfigChannel+0x23c>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	4a10      	ldr	r2, [pc, #64]	; (800218c <HAL_ADC_ConfigChannel+0x240>)
 800214c:	fba2 2303 	umull	r2, r3, r2, r3
 8002150:	0c9a      	lsrs	r2, r3, #18
 8002152:	4613      	mov	r3, r2
 8002154:	009b      	lsls	r3, r3, #2
 8002156:	4413      	add	r3, r2
 8002158:	005b      	lsls	r3, r3, #1
 800215a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800215c:	e002      	b.n	8002164 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800215e:	68bb      	ldr	r3, [r7, #8]
 8002160:	3b01      	subs	r3, #1
 8002162:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002164:	68bb      	ldr	r3, [r7, #8]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d1f9      	bne.n	800215e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	2200      	movs	r2, #0
 800216e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002172:	2300      	movs	r3, #0
}
 8002174:	4618      	mov	r0, r3
 8002176:	3714      	adds	r7, #20
 8002178:	46bd      	mov	sp, r7
 800217a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217e:	4770      	bx	lr
 8002180:	40012300 	.word	0x40012300
 8002184:	40012000 	.word	0x40012000
 8002188:	20000000 	.word	0x20000000
 800218c:	431bde83 	.word	0x431bde83

08002190 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002190:	b480      	push	{r7}
 8002192:	b085      	sub	sp, #20
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002198:	4b79      	ldr	r3, [pc, #484]	; (8002380 <ADC_Init+0x1f0>)
 800219a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	685a      	ldr	r2, [r3, #4]
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	431a      	orrs	r2, r3
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	685a      	ldr	r2, [r3, #4]
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80021c4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	6859      	ldr	r1, [r3, #4]
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	691b      	ldr	r3, [r3, #16]
 80021d0:	021a      	lsls	r2, r3, #8
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	430a      	orrs	r2, r1
 80021d8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	685a      	ldr	r2, [r3, #4]
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80021e8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	6859      	ldr	r1, [r3, #4]
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	689a      	ldr	r2, [r3, #8]
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	430a      	orrs	r2, r1
 80021fa:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	689a      	ldr	r2, [r3, #8]
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800220a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	6899      	ldr	r1, [r3, #8]
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	68da      	ldr	r2, [r3, #12]
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	430a      	orrs	r2, r1
 800221c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002222:	4a58      	ldr	r2, [pc, #352]	; (8002384 <ADC_Init+0x1f4>)
 8002224:	4293      	cmp	r3, r2
 8002226:	d022      	beq.n	800226e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	689a      	ldr	r2, [r3, #8]
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002236:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	6899      	ldr	r1, [r3, #8]
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	430a      	orrs	r2, r1
 8002248:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	689a      	ldr	r2, [r3, #8]
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002258:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	6899      	ldr	r1, [r3, #8]
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	430a      	orrs	r2, r1
 800226a:	609a      	str	r2, [r3, #8]
 800226c:	e00f      	b.n	800228e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	689a      	ldr	r2, [r3, #8]
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800227c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	689a      	ldr	r2, [r3, #8]
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800228c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	689a      	ldr	r2, [r3, #8]
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f022 0202 	bic.w	r2, r2, #2
 800229c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	6899      	ldr	r1, [r3, #8]
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	7e1b      	ldrb	r3, [r3, #24]
 80022a8:	005a      	lsls	r2, r3, #1
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	430a      	orrs	r2, r1
 80022b0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d01b      	beq.n	80022f4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	685a      	ldr	r2, [r3, #4]
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80022ca:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	685a      	ldr	r2, [r3, #4]
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80022da:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	6859      	ldr	r1, [r3, #4]
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022e6:	3b01      	subs	r3, #1
 80022e8:	035a      	lsls	r2, r3, #13
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	430a      	orrs	r2, r1
 80022f0:	605a      	str	r2, [r3, #4]
 80022f2:	e007      	b.n	8002304 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	685a      	ldr	r2, [r3, #4]
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002302:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002312:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	69db      	ldr	r3, [r3, #28]
 800231e:	3b01      	subs	r3, #1
 8002320:	051a      	lsls	r2, r3, #20
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	430a      	orrs	r2, r1
 8002328:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	689a      	ldr	r2, [r3, #8]
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002338:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	6899      	ldr	r1, [r3, #8]
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002346:	025a      	lsls	r2, r3, #9
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	430a      	orrs	r2, r1
 800234e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	689a      	ldr	r2, [r3, #8]
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800235e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	6899      	ldr	r1, [r3, #8]
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	695b      	ldr	r3, [r3, #20]
 800236a:	029a      	lsls	r2, r3, #10
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	430a      	orrs	r2, r1
 8002372:	609a      	str	r2, [r3, #8]
}
 8002374:	bf00      	nop
 8002376:	3714      	adds	r7, #20
 8002378:	46bd      	mov	sp, r7
 800237a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237e:	4770      	bx	lr
 8002380:	40012300 	.word	0x40012300
 8002384:	0f000001 	.word	0x0f000001

08002388 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b084      	sub	sp, #16
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2b00      	cmp	r3, #0
 8002394:	d101      	bne.n	800239a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002396:	2301      	movs	r3, #1
 8002398:	e0ed      	b.n	8002576 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	f893 3020 	ldrb.w	r3, [r3, #32]
 80023a0:	b2db      	uxtb	r3, r3
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d102      	bne.n	80023ac <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80023a6:	6878      	ldr	r0, [r7, #4]
 80023a8:	f7ff f962 	bl	8001670 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	681a      	ldr	r2, [r3, #0]
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f022 0202 	bic.w	r2, r2, #2
 80023ba:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80023bc:	f7ff fd76 	bl	8001eac <HAL_GetTick>
 80023c0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80023c2:	e012      	b.n	80023ea <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80023c4:	f7ff fd72 	bl	8001eac <HAL_GetTick>
 80023c8:	4602      	mov	r2, r0
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	1ad3      	subs	r3, r2, r3
 80023ce:	2b0a      	cmp	r3, #10
 80023d0:	d90b      	bls.n	80023ea <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023d6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	2205      	movs	r2, #5
 80023e2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80023e6:	2301      	movs	r3, #1
 80023e8:	e0c5      	b.n	8002576 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	f003 0302 	and.w	r3, r3, #2
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d1e5      	bne.n	80023c4 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	681a      	ldr	r2, [r3, #0]
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f042 0201 	orr.w	r2, r2, #1
 8002406:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002408:	f7ff fd50 	bl	8001eac <HAL_GetTick>
 800240c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800240e:	e012      	b.n	8002436 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002410:	f7ff fd4c 	bl	8001eac <HAL_GetTick>
 8002414:	4602      	mov	r2, r0
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	1ad3      	subs	r3, r2, r3
 800241a:	2b0a      	cmp	r3, #10
 800241c:	d90b      	bls.n	8002436 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002422:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	2205      	movs	r2, #5
 800242e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002432:	2301      	movs	r3, #1
 8002434:	e09f      	b.n	8002576 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	f003 0301 	and.w	r3, r3, #1
 8002440:	2b00      	cmp	r3, #0
 8002442:	d0e5      	beq.n	8002410 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	7e1b      	ldrb	r3, [r3, #24]
 8002448:	2b01      	cmp	r3, #1
 800244a:	d108      	bne.n	800245e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	681a      	ldr	r2, [r3, #0]
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800245a:	601a      	str	r2, [r3, #0]
 800245c:	e007      	b.n	800246e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	681a      	ldr	r2, [r3, #0]
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800246c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	7e5b      	ldrb	r3, [r3, #25]
 8002472:	2b01      	cmp	r3, #1
 8002474:	d108      	bne.n	8002488 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	681a      	ldr	r2, [r3, #0]
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002484:	601a      	str	r2, [r3, #0]
 8002486:	e007      	b.n	8002498 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	681a      	ldr	r2, [r3, #0]
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002496:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	7e9b      	ldrb	r3, [r3, #26]
 800249c:	2b01      	cmp	r3, #1
 800249e:	d108      	bne.n	80024b2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	681a      	ldr	r2, [r3, #0]
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f042 0220 	orr.w	r2, r2, #32
 80024ae:	601a      	str	r2, [r3, #0]
 80024b0:	e007      	b.n	80024c2 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	681a      	ldr	r2, [r3, #0]
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f022 0220 	bic.w	r2, r2, #32
 80024c0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	7edb      	ldrb	r3, [r3, #27]
 80024c6:	2b01      	cmp	r3, #1
 80024c8:	d108      	bne.n	80024dc <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	681a      	ldr	r2, [r3, #0]
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f022 0210 	bic.w	r2, r2, #16
 80024d8:	601a      	str	r2, [r3, #0]
 80024da:	e007      	b.n	80024ec <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	681a      	ldr	r2, [r3, #0]
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f042 0210 	orr.w	r2, r2, #16
 80024ea:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	7f1b      	ldrb	r3, [r3, #28]
 80024f0:	2b01      	cmp	r3, #1
 80024f2:	d108      	bne.n	8002506 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	681a      	ldr	r2, [r3, #0]
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f042 0208 	orr.w	r2, r2, #8
 8002502:	601a      	str	r2, [r3, #0]
 8002504:	e007      	b.n	8002516 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	681a      	ldr	r2, [r3, #0]
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f022 0208 	bic.w	r2, r2, #8
 8002514:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	7f5b      	ldrb	r3, [r3, #29]
 800251a:	2b01      	cmp	r3, #1
 800251c:	d108      	bne.n	8002530 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	681a      	ldr	r2, [r3, #0]
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f042 0204 	orr.w	r2, r2, #4
 800252c:	601a      	str	r2, [r3, #0]
 800252e:	e007      	b.n	8002540 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	681a      	ldr	r2, [r3, #0]
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f022 0204 	bic.w	r2, r2, #4
 800253e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	689a      	ldr	r2, [r3, #8]
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	68db      	ldr	r3, [r3, #12]
 8002548:	431a      	orrs	r2, r3
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	691b      	ldr	r3, [r3, #16]
 800254e:	431a      	orrs	r2, r3
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	695b      	ldr	r3, [r3, #20]
 8002554:	ea42 0103 	orr.w	r1, r2, r3
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	1e5a      	subs	r2, r3, #1
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	430a      	orrs	r2, r1
 8002564:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	2200      	movs	r2, #0
 800256a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2201      	movs	r2, #1
 8002570:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002574:	2300      	movs	r3, #0
}
 8002576:	4618      	mov	r0, r3
 8002578:	3710      	adds	r7, #16
 800257a:	46bd      	mov	sp, r7
 800257c:	bd80      	pop	{r7, pc}
	...

08002580 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002580:	b480      	push	{r7}
 8002582:	b085      	sub	sp, #20
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	f003 0307 	and.w	r3, r3, #7
 800258e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002590:	4b0c      	ldr	r3, [pc, #48]	; (80025c4 <__NVIC_SetPriorityGrouping+0x44>)
 8002592:	68db      	ldr	r3, [r3, #12]
 8002594:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002596:	68ba      	ldr	r2, [r7, #8]
 8002598:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800259c:	4013      	ands	r3, r2
 800259e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80025a4:	68bb      	ldr	r3, [r7, #8]
 80025a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80025a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80025ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80025b2:	4a04      	ldr	r2, [pc, #16]	; (80025c4 <__NVIC_SetPriorityGrouping+0x44>)
 80025b4:	68bb      	ldr	r3, [r7, #8]
 80025b6:	60d3      	str	r3, [r2, #12]
}
 80025b8:	bf00      	nop
 80025ba:	3714      	adds	r7, #20
 80025bc:	46bd      	mov	sp, r7
 80025be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c2:	4770      	bx	lr
 80025c4:	e000ed00 	.word	0xe000ed00

080025c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80025c8:	b480      	push	{r7}
 80025ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80025cc:	4b04      	ldr	r3, [pc, #16]	; (80025e0 <__NVIC_GetPriorityGrouping+0x18>)
 80025ce:	68db      	ldr	r3, [r3, #12]
 80025d0:	0a1b      	lsrs	r3, r3, #8
 80025d2:	f003 0307 	and.w	r3, r3, #7
}
 80025d6:	4618      	mov	r0, r3
 80025d8:	46bd      	mov	sp, r7
 80025da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025de:	4770      	bx	lr
 80025e0:	e000ed00 	.word	0xe000ed00

080025e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025e4:	b480      	push	{r7}
 80025e6:	b083      	sub	sp, #12
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	4603      	mov	r3, r0
 80025ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	db0b      	blt.n	800260e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025f6:	79fb      	ldrb	r3, [r7, #7]
 80025f8:	f003 021f 	and.w	r2, r3, #31
 80025fc:	4907      	ldr	r1, [pc, #28]	; (800261c <__NVIC_EnableIRQ+0x38>)
 80025fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002602:	095b      	lsrs	r3, r3, #5
 8002604:	2001      	movs	r0, #1
 8002606:	fa00 f202 	lsl.w	r2, r0, r2
 800260a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800260e:	bf00      	nop
 8002610:	370c      	adds	r7, #12
 8002612:	46bd      	mov	sp, r7
 8002614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002618:	4770      	bx	lr
 800261a:	bf00      	nop
 800261c:	e000e100 	.word	0xe000e100

08002620 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002620:	b480      	push	{r7}
 8002622:	b083      	sub	sp, #12
 8002624:	af00      	add	r7, sp, #0
 8002626:	4603      	mov	r3, r0
 8002628:	6039      	str	r1, [r7, #0]
 800262a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800262c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002630:	2b00      	cmp	r3, #0
 8002632:	db0a      	blt.n	800264a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	b2da      	uxtb	r2, r3
 8002638:	490c      	ldr	r1, [pc, #48]	; (800266c <__NVIC_SetPriority+0x4c>)
 800263a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800263e:	0112      	lsls	r2, r2, #4
 8002640:	b2d2      	uxtb	r2, r2
 8002642:	440b      	add	r3, r1
 8002644:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002648:	e00a      	b.n	8002660 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	b2da      	uxtb	r2, r3
 800264e:	4908      	ldr	r1, [pc, #32]	; (8002670 <__NVIC_SetPriority+0x50>)
 8002650:	79fb      	ldrb	r3, [r7, #7]
 8002652:	f003 030f 	and.w	r3, r3, #15
 8002656:	3b04      	subs	r3, #4
 8002658:	0112      	lsls	r2, r2, #4
 800265a:	b2d2      	uxtb	r2, r2
 800265c:	440b      	add	r3, r1
 800265e:	761a      	strb	r2, [r3, #24]
}
 8002660:	bf00      	nop
 8002662:	370c      	adds	r7, #12
 8002664:	46bd      	mov	sp, r7
 8002666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266a:	4770      	bx	lr
 800266c:	e000e100 	.word	0xe000e100
 8002670:	e000ed00 	.word	0xe000ed00

08002674 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002674:	b480      	push	{r7}
 8002676:	b089      	sub	sp, #36	; 0x24
 8002678:	af00      	add	r7, sp, #0
 800267a:	60f8      	str	r0, [r7, #12]
 800267c:	60b9      	str	r1, [r7, #8]
 800267e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	f003 0307 	and.w	r3, r3, #7
 8002686:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002688:	69fb      	ldr	r3, [r7, #28]
 800268a:	f1c3 0307 	rsb	r3, r3, #7
 800268e:	2b04      	cmp	r3, #4
 8002690:	bf28      	it	cs
 8002692:	2304      	movcs	r3, #4
 8002694:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002696:	69fb      	ldr	r3, [r7, #28]
 8002698:	3304      	adds	r3, #4
 800269a:	2b06      	cmp	r3, #6
 800269c:	d902      	bls.n	80026a4 <NVIC_EncodePriority+0x30>
 800269e:	69fb      	ldr	r3, [r7, #28]
 80026a0:	3b03      	subs	r3, #3
 80026a2:	e000      	b.n	80026a6 <NVIC_EncodePriority+0x32>
 80026a4:	2300      	movs	r3, #0
 80026a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026a8:	f04f 32ff 	mov.w	r2, #4294967295
 80026ac:	69bb      	ldr	r3, [r7, #24]
 80026ae:	fa02 f303 	lsl.w	r3, r2, r3
 80026b2:	43da      	mvns	r2, r3
 80026b4:	68bb      	ldr	r3, [r7, #8]
 80026b6:	401a      	ands	r2, r3
 80026b8:	697b      	ldr	r3, [r7, #20]
 80026ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80026bc:	f04f 31ff 	mov.w	r1, #4294967295
 80026c0:	697b      	ldr	r3, [r7, #20]
 80026c2:	fa01 f303 	lsl.w	r3, r1, r3
 80026c6:	43d9      	mvns	r1, r3
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026cc:	4313      	orrs	r3, r2
         );
}
 80026ce:	4618      	mov	r0, r3
 80026d0:	3724      	adds	r7, #36	; 0x24
 80026d2:	46bd      	mov	sp, r7
 80026d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d8:	4770      	bx	lr

080026da <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026da:	b580      	push	{r7, lr}
 80026dc:	b082      	sub	sp, #8
 80026de:	af00      	add	r7, sp, #0
 80026e0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80026e2:	6878      	ldr	r0, [r7, #4]
 80026e4:	f7ff ff4c 	bl	8002580 <__NVIC_SetPriorityGrouping>
}
 80026e8:	bf00      	nop
 80026ea:	3708      	adds	r7, #8
 80026ec:	46bd      	mov	sp, r7
 80026ee:	bd80      	pop	{r7, pc}

080026f0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b086      	sub	sp, #24
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	4603      	mov	r3, r0
 80026f8:	60b9      	str	r1, [r7, #8]
 80026fa:	607a      	str	r2, [r7, #4]
 80026fc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80026fe:	2300      	movs	r3, #0
 8002700:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002702:	f7ff ff61 	bl	80025c8 <__NVIC_GetPriorityGrouping>
 8002706:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002708:	687a      	ldr	r2, [r7, #4]
 800270a:	68b9      	ldr	r1, [r7, #8]
 800270c:	6978      	ldr	r0, [r7, #20]
 800270e:	f7ff ffb1 	bl	8002674 <NVIC_EncodePriority>
 8002712:	4602      	mov	r2, r0
 8002714:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002718:	4611      	mov	r1, r2
 800271a:	4618      	mov	r0, r3
 800271c:	f7ff ff80 	bl	8002620 <__NVIC_SetPriority>
}
 8002720:	bf00      	nop
 8002722:	3718      	adds	r7, #24
 8002724:	46bd      	mov	sp, r7
 8002726:	bd80      	pop	{r7, pc}

08002728 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b082      	sub	sp, #8
 800272c:	af00      	add	r7, sp, #0
 800272e:	4603      	mov	r3, r0
 8002730:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002732:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002736:	4618      	mov	r0, r3
 8002738:	f7ff ff54 	bl	80025e4 <__NVIC_EnableIRQ>
}
 800273c:	bf00      	nop
 800273e:	3708      	adds	r7, #8
 8002740:	46bd      	mov	sp, r7
 8002742:	bd80      	pop	{r7, pc}

08002744 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002744:	b480      	push	{r7}
 8002746:	b089      	sub	sp, #36	; 0x24
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
 800274c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800274e:	2300      	movs	r3, #0
 8002750:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002752:	2300      	movs	r3, #0
 8002754:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002756:	2300      	movs	r3, #0
 8002758:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800275a:	2300      	movs	r3, #0
 800275c:	61fb      	str	r3, [r7, #28]
 800275e:	e16b      	b.n	8002a38 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002760:	2201      	movs	r2, #1
 8002762:	69fb      	ldr	r3, [r7, #28]
 8002764:	fa02 f303 	lsl.w	r3, r2, r3
 8002768:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	697a      	ldr	r2, [r7, #20]
 8002770:	4013      	ands	r3, r2
 8002772:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002774:	693a      	ldr	r2, [r7, #16]
 8002776:	697b      	ldr	r3, [r7, #20]
 8002778:	429a      	cmp	r2, r3
 800277a:	f040 815a 	bne.w	8002a32 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	685b      	ldr	r3, [r3, #4]
 8002782:	f003 0303 	and.w	r3, r3, #3
 8002786:	2b01      	cmp	r3, #1
 8002788:	d005      	beq.n	8002796 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	685b      	ldr	r3, [r3, #4]
 800278e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002792:	2b02      	cmp	r3, #2
 8002794:	d130      	bne.n	80027f8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	689b      	ldr	r3, [r3, #8]
 800279a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800279c:	69fb      	ldr	r3, [r7, #28]
 800279e:	005b      	lsls	r3, r3, #1
 80027a0:	2203      	movs	r2, #3
 80027a2:	fa02 f303 	lsl.w	r3, r2, r3
 80027a6:	43db      	mvns	r3, r3
 80027a8:	69ba      	ldr	r2, [r7, #24]
 80027aa:	4013      	ands	r3, r2
 80027ac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	68da      	ldr	r2, [r3, #12]
 80027b2:	69fb      	ldr	r3, [r7, #28]
 80027b4:	005b      	lsls	r3, r3, #1
 80027b6:	fa02 f303 	lsl.w	r3, r2, r3
 80027ba:	69ba      	ldr	r2, [r7, #24]
 80027bc:	4313      	orrs	r3, r2
 80027be:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	69ba      	ldr	r2, [r7, #24]
 80027c4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	685b      	ldr	r3, [r3, #4]
 80027ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80027cc:	2201      	movs	r2, #1
 80027ce:	69fb      	ldr	r3, [r7, #28]
 80027d0:	fa02 f303 	lsl.w	r3, r2, r3
 80027d4:	43db      	mvns	r3, r3
 80027d6:	69ba      	ldr	r2, [r7, #24]
 80027d8:	4013      	ands	r3, r2
 80027da:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	091b      	lsrs	r3, r3, #4
 80027e2:	f003 0201 	and.w	r2, r3, #1
 80027e6:	69fb      	ldr	r3, [r7, #28]
 80027e8:	fa02 f303 	lsl.w	r3, r2, r3
 80027ec:	69ba      	ldr	r2, [r7, #24]
 80027ee:	4313      	orrs	r3, r2
 80027f0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	69ba      	ldr	r2, [r7, #24]
 80027f6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	f003 0303 	and.w	r3, r3, #3
 8002800:	2b03      	cmp	r3, #3
 8002802:	d017      	beq.n	8002834 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	68db      	ldr	r3, [r3, #12]
 8002808:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800280a:	69fb      	ldr	r3, [r7, #28]
 800280c:	005b      	lsls	r3, r3, #1
 800280e:	2203      	movs	r2, #3
 8002810:	fa02 f303 	lsl.w	r3, r2, r3
 8002814:	43db      	mvns	r3, r3
 8002816:	69ba      	ldr	r2, [r7, #24]
 8002818:	4013      	ands	r3, r2
 800281a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	689a      	ldr	r2, [r3, #8]
 8002820:	69fb      	ldr	r3, [r7, #28]
 8002822:	005b      	lsls	r3, r3, #1
 8002824:	fa02 f303 	lsl.w	r3, r2, r3
 8002828:	69ba      	ldr	r2, [r7, #24]
 800282a:	4313      	orrs	r3, r2
 800282c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	69ba      	ldr	r2, [r7, #24]
 8002832:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	f003 0303 	and.w	r3, r3, #3
 800283c:	2b02      	cmp	r3, #2
 800283e:	d123      	bne.n	8002888 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002840:	69fb      	ldr	r3, [r7, #28]
 8002842:	08da      	lsrs	r2, r3, #3
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	3208      	adds	r2, #8
 8002848:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800284c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800284e:	69fb      	ldr	r3, [r7, #28]
 8002850:	f003 0307 	and.w	r3, r3, #7
 8002854:	009b      	lsls	r3, r3, #2
 8002856:	220f      	movs	r2, #15
 8002858:	fa02 f303 	lsl.w	r3, r2, r3
 800285c:	43db      	mvns	r3, r3
 800285e:	69ba      	ldr	r2, [r7, #24]
 8002860:	4013      	ands	r3, r2
 8002862:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	691a      	ldr	r2, [r3, #16]
 8002868:	69fb      	ldr	r3, [r7, #28]
 800286a:	f003 0307 	and.w	r3, r3, #7
 800286e:	009b      	lsls	r3, r3, #2
 8002870:	fa02 f303 	lsl.w	r3, r2, r3
 8002874:	69ba      	ldr	r2, [r7, #24]
 8002876:	4313      	orrs	r3, r2
 8002878:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800287a:	69fb      	ldr	r3, [r7, #28]
 800287c:	08da      	lsrs	r2, r3, #3
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	3208      	adds	r2, #8
 8002882:	69b9      	ldr	r1, [r7, #24]
 8002884:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800288e:	69fb      	ldr	r3, [r7, #28]
 8002890:	005b      	lsls	r3, r3, #1
 8002892:	2203      	movs	r2, #3
 8002894:	fa02 f303 	lsl.w	r3, r2, r3
 8002898:	43db      	mvns	r3, r3
 800289a:	69ba      	ldr	r2, [r7, #24]
 800289c:	4013      	ands	r3, r2
 800289e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	f003 0203 	and.w	r2, r3, #3
 80028a8:	69fb      	ldr	r3, [r7, #28]
 80028aa:	005b      	lsls	r3, r3, #1
 80028ac:	fa02 f303 	lsl.w	r3, r2, r3
 80028b0:	69ba      	ldr	r2, [r7, #24]
 80028b2:	4313      	orrs	r3, r2
 80028b4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	69ba      	ldr	r2, [r7, #24]
 80028ba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	685b      	ldr	r3, [r3, #4]
 80028c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	f000 80b4 	beq.w	8002a32 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028ca:	2300      	movs	r3, #0
 80028cc:	60fb      	str	r3, [r7, #12]
 80028ce:	4b60      	ldr	r3, [pc, #384]	; (8002a50 <HAL_GPIO_Init+0x30c>)
 80028d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028d2:	4a5f      	ldr	r2, [pc, #380]	; (8002a50 <HAL_GPIO_Init+0x30c>)
 80028d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80028d8:	6453      	str	r3, [r2, #68]	; 0x44
 80028da:	4b5d      	ldr	r3, [pc, #372]	; (8002a50 <HAL_GPIO_Init+0x30c>)
 80028dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028e2:	60fb      	str	r3, [r7, #12]
 80028e4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80028e6:	4a5b      	ldr	r2, [pc, #364]	; (8002a54 <HAL_GPIO_Init+0x310>)
 80028e8:	69fb      	ldr	r3, [r7, #28]
 80028ea:	089b      	lsrs	r3, r3, #2
 80028ec:	3302      	adds	r3, #2
 80028ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80028f4:	69fb      	ldr	r3, [r7, #28]
 80028f6:	f003 0303 	and.w	r3, r3, #3
 80028fa:	009b      	lsls	r3, r3, #2
 80028fc:	220f      	movs	r2, #15
 80028fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002902:	43db      	mvns	r3, r3
 8002904:	69ba      	ldr	r2, [r7, #24]
 8002906:	4013      	ands	r3, r2
 8002908:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	4a52      	ldr	r2, [pc, #328]	; (8002a58 <HAL_GPIO_Init+0x314>)
 800290e:	4293      	cmp	r3, r2
 8002910:	d02b      	beq.n	800296a <HAL_GPIO_Init+0x226>
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	4a51      	ldr	r2, [pc, #324]	; (8002a5c <HAL_GPIO_Init+0x318>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d025      	beq.n	8002966 <HAL_GPIO_Init+0x222>
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	4a50      	ldr	r2, [pc, #320]	; (8002a60 <HAL_GPIO_Init+0x31c>)
 800291e:	4293      	cmp	r3, r2
 8002920:	d01f      	beq.n	8002962 <HAL_GPIO_Init+0x21e>
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	4a4f      	ldr	r2, [pc, #316]	; (8002a64 <HAL_GPIO_Init+0x320>)
 8002926:	4293      	cmp	r3, r2
 8002928:	d019      	beq.n	800295e <HAL_GPIO_Init+0x21a>
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	4a4e      	ldr	r2, [pc, #312]	; (8002a68 <HAL_GPIO_Init+0x324>)
 800292e:	4293      	cmp	r3, r2
 8002930:	d013      	beq.n	800295a <HAL_GPIO_Init+0x216>
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	4a4d      	ldr	r2, [pc, #308]	; (8002a6c <HAL_GPIO_Init+0x328>)
 8002936:	4293      	cmp	r3, r2
 8002938:	d00d      	beq.n	8002956 <HAL_GPIO_Init+0x212>
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	4a4c      	ldr	r2, [pc, #304]	; (8002a70 <HAL_GPIO_Init+0x32c>)
 800293e:	4293      	cmp	r3, r2
 8002940:	d007      	beq.n	8002952 <HAL_GPIO_Init+0x20e>
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	4a4b      	ldr	r2, [pc, #300]	; (8002a74 <HAL_GPIO_Init+0x330>)
 8002946:	4293      	cmp	r3, r2
 8002948:	d101      	bne.n	800294e <HAL_GPIO_Init+0x20a>
 800294a:	2307      	movs	r3, #7
 800294c:	e00e      	b.n	800296c <HAL_GPIO_Init+0x228>
 800294e:	2308      	movs	r3, #8
 8002950:	e00c      	b.n	800296c <HAL_GPIO_Init+0x228>
 8002952:	2306      	movs	r3, #6
 8002954:	e00a      	b.n	800296c <HAL_GPIO_Init+0x228>
 8002956:	2305      	movs	r3, #5
 8002958:	e008      	b.n	800296c <HAL_GPIO_Init+0x228>
 800295a:	2304      	movs	r3, #4
 800295c:	e006      	b.n	800296c <HAL_GPIO_Init+0x228>
 800295e:	2303      	movs	r3, #3
 8002960:	e004      	b.n	800296c <HAL_GPIO_Init+0x228>
 8002962:	2302      	movs	r3, #2
 8002964:	e002      	b.n	800296c <HAL_GPIO_Init+0x228>
 8002966:	2301      	movs	r3, #1
 8002968:	e000      	b.n	800296c <HAL_GPIO_Init+0x228>
 800296a:	2300      	movs	r3, #0
 800296c:	69fa      	ldr	r2, [r7, #28]
 800296e:	f002 0203 	and.w	r2, r2, #3
 8002972:	0092      	lsls	r2, r2, #2
 8002974:	4093      	lsls	r3, r2
 8002976:	69ba      	ldr	r2, [r7, #24]
 8002978:	4313      	orrs	r3, r2
 800297a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800297c:	4935      	ldr	r1, [pc, #212]	; (8002a54 <HAL_GPIO_Init+0x310>)
 800297e:	69fb      	ldr	r3, [r7, #28]
 8002980:	089b      	lsrs	r3, r3, #2
 8002982:	3302      	adds	r3, #2
 8002984:	69ba      	ldr	r2, [r7, #24]
 8002986:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800298a:	4b3b      	ldr	r3, [pc, #236]	; (8002a78 <HAL_GPIO_Init+0x334>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002990:	693b      	ldr	r3, [r7, #16]
 8002992:	43db      	mvns	r3, r3
 8002994:	69ba      	ldr	r2, [r7, #24]
 8002996:	4013      	ands	r3, r2
 8002998:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	685b      	ldr	r3, [r3, #4]
 800299e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d003      	beq.n	80029ae <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80029a6:	69ba      	ldr	r2, [r7, #24]
 80029a8:	693b      	ldr	r3, [r7, #16]
 80029aa:	4313      	orrs	r3, r2
 80029ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80029ae:	4a32      	ldr	r2, [pc, #200]	; (8002a78 <HAL_GPIO_Init+0x334>)
 80029b0:	69bb      	ldr	r3, [r7, #24]
 80029b2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80029b4:	4b30      	ldr	r3, [pc, #192]	; (8002a78 <HAL_GPIO_Init+0x334>)
 80029b6:	685b      	ldr	r3, [r3, #4]
 80029b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029ba:	693b      	ldr	r3, [r7, #16]
 80029bc:	43db      	mvns	r3, r3
 80029be:	69ba      	ldr	r2, [r7, #24]
 80029c0:	4013      	ands	r3, r2
 80029c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d003      	beq.n	80029d8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80029d0:	69ba      	ldr	r2, [r7, #24]
 80029d2:	693b      	ldr	r3, [r7, #16]
 80029d4:	4313      	orrs	r3, r2
 80029d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80029d8:	4a27      	ldr	r2, [pc, #156]	; (8002a78 <HAL_GPIO_Init+0x334>)
 80029da:	69bb      	ldr	r3, [r7, #24]
 80029dc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80029de:	4b26      	ldr	r3, [pc, #152]	; (8002a78 <HAL_GPIO_Init+0x334>)
 80029e0:	689b      	ldr	r3, [r3, #8]
 80029e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029e4:	693b      	ldr	r3, [r7, #16]
 80029e6:	43db      	mvns	r3, r3
 80029e8:	69ba      	ldr	r2, [r7, #24]
 80029ea:	4013      	ands	r3, r2
 80029ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	685b      	ldr	r3, [r3, #4]
 80029f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d003      	beq.n	8002a02 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80029fa:	69ba      	ldr	r2, [r7, #24]
 80029fc:	693b      	ldr	r3, [r7, #16]
 80029fe:	4313      	orrs	r3, r2
 8002a00:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002a02:	4a1d      	ldr	r2, [pc, #116]	; (8002a78 <HAL_GPIO_Init+0x334>)
 8002a04:	69bb      	ldr	r3, [r7, #24]
 8002a06:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002a08:	4b1b      	ldr	r3, [pc, #108]	; (8002a78 <HAL_GPIO_Init+0x334>)
 8002a0a:	68db      	ldr	r3, [r3, #12]
 8002a0c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a0e:	693b      	ldr	r3, [r7, #16]
 8002a10:	43db      	mvns	r3, r3
 8002a12:	69ba      	ldr	r2, [r7, #24]
 8002a14:	4013      	ands	r3, r2
 8002a16:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d003      	beq.n	8002a2c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002a24:	69ba      	ldr	r2, [r7, #24]
 8002a26:	693b      	ldr	r3, [r7, #16]
 8002a28:	4313      	orrs	r3, r2
 8002a2a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002a2c:	4a12      	ldr	r2, [pc, #72]	; (8002a78 <HAL_GPIO_Init+0x334>)
 8002a2e:	69bb      	ldr	r3, [r7, #24]
 8002a30:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a32:	69fb      	ldr	r3, [r7, #28]
 8002a34:	3301      	adds	r3, #1
 8002a36:	61fb      	str	r3, [r7, #28]
 8002a38:	69fb      	ldr	r3, [r7, #28]
 8002a3a:	2b0f      	cmp	r3, #15
 8002a3c:	f67f ae90 	bls.w	8002760 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002a40:	bf00      	nop
 8002a42:	bf00      	nop
 8002a44:	3724      	adds	r7, #36	; 0x24
 8002a46:	46bd      	mov	sp, r7
 8002a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4c:	4770      	bx	lr
 8002a4e:	bf00      	nop
 8002a50:	40023800 	.word	0x40023800
 8002a54:	40013800 	.word	0x40013800
 8002a58:	40020000 	.word	0x40020000
 8002a5c:	40020400 	.word	0x40020400
 8002a60:	40020800 	.word	0x40020800
 8002a64:	40020c00 	.word	0x40020c00
 8002a68:	40021000 	.word	0x40021000
 8002a6c:	40021400 	.word	0x40021400
 8002a70:	40021800 	.word	0x40021800
 8002a74:	40021c00 	.word	0x40021c00
 8002a78:	40013c00 	.word	0x40013c00

08002a7c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	b083      	sub	sp, #12
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
 8002a84:	460b      	mov	r3, r1
 8002a86:	807b      	strh	r3, [r7, #2]
 8002a88:	4613      	mov	r3, r2
 8002a8a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002a8c:	787b      	ldrb	r3, [r7, #1]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d003      	beq.n	8002a9a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002a92:	887a      	ldrh	r2, [r7, #2]
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002a98:	e003      	b.n	8002aa2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002a9a:	887b      	ldrh	r3, [r7, #2]
 8002a9c:	041a      	lsls	r2, r3, #16
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	619a      	str	r2, [r3, #24]
}
 8002aa2:	bf00      	nop
 8002aa4:	370c      	adds	r7, #12
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aac:	4770      	bx	lr

08002aae <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002aae:	b480      	push	{r7}
 8002ab0:	b085      	sub	sp, #20
 8002ab2:	af00      	add	r7, sp, #0
 8002ab4:	6078      	str	r0, [r7, #4]
 8002ab6:	460b      	mov	r3, r1
 8002ab8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	695b      	ldr	r3, [r3, #20]
 8002abe:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002ac0:	887a      	ldrh	r2, [r7, #2]
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	4013      	ands	r3, r2
 8002ac6:	041a      	lsls	r2, r3, #16
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	43d9      	mvns	r1, r3
 8002acc:	887b      	ldrh	r3, [r7, #2]
 8002ace:	400b      	ands	r3, r1
 8002ad0:	431a      	orrs	r2, r3
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	619a      	str	r2, [r3, #24]
}
 8002ad6:	bf00      	nop
 8002ad8:	3714      	adds	r7, #20
 8002ada:	46bd      	mov	sp, r7
 8002adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae0:	4770      	bx	lr
	...

08002ae4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b086      	sub	sp, #24
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d101      	bne.n	8002af6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002af2:	2301      	movs	r3, #1
 8002af4:	e264      	b.n	8002fc0 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f003 0301 	and.w	r3, r3, #1
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d075      	beq.n	8002bee <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002b02:	4ba3      	ldr	r3, [pc, #652]	; (8002d90 <HAL_RCC_OscConfig+0x2ac>)
 8002b04:	689b      	ldr	r3, [r3, #8]
 8002b06:	f003 030c 	and.w	r3, r3, #12
 8002b0a:	2b04      	cmp	r3, #4
 8002b0c:	d00c      	beq.n	8002b28 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b0e:	4ba0      	ldr	r3, [pc, #640]	; (8002d90 <HAL_RCC_OscConfig+0x2ac>)
 8002b10:	689b      	ldr	r3, [r3, #8]
 8002b12:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002b16:	2b08      	cmp	r3, #8
 8002b18:	d112      	bne.n	8002b40 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b1a:	4b9d      	ldr	r3, [pc, #628]	; (8002d90 <HAL_RCC_OscConfig+0x2ac>)
 8002b1c:	685b      	ldr	r3, [r3, #4]
 8002b1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b22:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b26:	d10b      	bne.n	8002b40 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b28:	4b99      	ldr	r3, [pc, #612]	; (8002d90 <HAL_RCC_OscConfig+0x2ac>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d05b      	beq.n	8002bec <HAL_RCC_OscConfig+0x108>
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d157      	bne.n	8002bec <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	e23f      	b.n	8002fc0 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	685b      	ldr	r3, [r3, #4]
 8002b44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b48:	d106      	bne.n	8002b58 <HAL_RCC_OscConfig+0x74>
 8002b4a:	4b91      	ldr	r3, [pc, #580]	; (8002d90 <HAL_RCC_OscConfig+0x2ac>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	4a90      	ldr	r2, [pc, #576]	; (8002d90 <HAL_RCC_OscConfig+0x2ac>)
 8002b50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b54:	6013      	str	r3, [r2, #0]
 8002b56:	e01d      	b.n	8002b94 <HAL_RCC_OscConfig+0xb0>
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	685b      	ldr	r3, [r3, #4]
 8002b5c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002b60:	d10c      	bne.n	8002b7c <HAL_RCC_OscConfig+0x98>
 8002b62:	4b8b      	ldr	r3, [pc, #556]	; (8002d90 <HAL_RCC_OscConfig+0x2ac>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4a8a      	ldr	r2, [pc, #552]	; (8002d90 <HAL_RCC_OscConfig+0x2ac>)
 8002b68:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b6c:	6013      	str	r3, [r2, #0]
 8002b6e:	4b88      	ldr	r3, [pc, #544]	; (8002d90 <HAL_RCC_OscConfig+0x2ac>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	4a87      	ldr	r2, [pc, #540]	; (8002d90 <HAL_RCC_OscConfig+0x2ac>)
 8002b74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b78:	6013      	str	r3, [r2, #0]
 8002b7a:	e00b      	b.n	8002b94 <HAL_RCC_OscConfig+0xb0>
 8002b7c:	4b84      	ldr	r3, [pc, #528]	; (8002d90 <HAL_RCC_OscConfig+0x2ac>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4a83      	ldr	r2, [pc, #524]	; (8002d90 <HAL_RCC_OscConfig+0x2ac>)
 8002b82:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b86:	6013      	str	r3, [r2, #0]
 8002b88:	4b81      	ldr	r3, [pc, #516]	; (8002d90 <HAL_RCC_OscConfig+0x2ac>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4a80      	ldr	r2, [pc, #512]	; (8002d90 <HAL_RCC_OscConfig+0x2ac>)
 8002b8e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b92:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d013      	beq.n	8002bc4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b9c:	f7ff f986 	bl	8001eac <HAL_GetTick>
 8002ba0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ba2:	e008      	b.n	8002bb6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ba4:	f7ff f982 	bl	8001eac <HAL_GetTick>
 8002ba8:	4602      	mov	r2, r0
 8002baa:	693b      	ldr	r3, [r7, #16]
 8002bac:	1ad3      	subs	r3, r2, r3
 8002bae:	2b64      	cmp	r3, #100	; 0x64
 8002bb0:	d901      	bls.n	8002bb6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002bb2:	2303      	movs	r3, #3
 8002bb4:	e204      	b.n	8002fc0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bb6:	4b76      	ldr	r3, [pc, #472]	; (8002d90 <HAL_RCC_OscConfig+0x2ac>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d0f0      	beq.n	8002ba4 <HAL_RCC_OscConfig+0xc0>
 8002bc2:	e014      	b.n	8002bee <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bc4:	f7ff f972 	bl	8001eac <HAL_GetTick>
 8002bc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002bca:	e008      	b.n	8002bde <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002bcc:	f7ff f96e 	bl	8001eac <HAL_GetTick>
 8002bd0:	4602      	mov	r2, r0
 8002bd2:	693b      	ldr	r3, [r7, #16]
 8002bd4:	1ad3      	subs	r3, r2, r3
 8002bd6:	2b64      	cmp	r3, #100	; 0x64
 8002bd8:	d901      	bls.n	8002bde <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002bda:	2303      	movs	r3, #3
 8002bdc:	e1f0      	b.n	8002fc0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002bde:	4b6c      	ldr	r3, [pc, #432]	; (8002d90 <HAL_RCC_OscConfig+0x2ac>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d1f0      	bne.n	8002bcc <HAL_RCC_OscConfig+0xe8>
 8002bea:	e000      	b.n	8002bee <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f003 0302 	and.w	r3, r3, #2
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d063      	beq.n	8002cc2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002bfa:	4b65      	ldr	r3, [pc, #404]	; (8002d90 <HAL_RCC_OscConfig+0x2ac>)
 8002bfc:	689b      	ldr	r3, [r3, #8]
 8002bfe:	f003 030c 	and.w	r3, r3, #12
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d00b      	beq.n	8002c1e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c06:	4b62      	ldr	r3, [pc, #392]	; (8002d90 <HAL_RCC_OscConfig+0x2ac>)
 8002c08:	689b      	ldr	r3, [r3, #8]
 8002c0a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002c0e:	2b08      	cmp	r3, #8
 8002c10:	d11c      	bne.n	8002c4c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c12:	4b5f      	ldr	r3, [pc, #380]	; (8002d90 <HAL_RCC_OscConfig+0x2ac>)
 8002c14:	685b      	ldr	r3, [r3, #4]
 8002c16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d116      	bne.n	8002c4c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c1e:	4b5c      	ldr	r3, [pc, #368]	; (8002d90 <HAL_RCC_OscConfig+0x2ac>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f003 0302 	and.w	r3, r3, #2
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d005      	beq.n	8002c36 <HAL_RCC_OscConfig+0x152>
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	68db      	ldr	r3, [r3, #12]
 8002c2e:	2b01      	cmp	r3, #1
 8002c30:	d001      	beq.n	8002c36 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002c32:	2301      	movs	r3, #1
 8002c34:	e1c4      	b.n	8002fc0 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c36:	4b56      	ldr	r3, [pc, #344]	; (8002d90 <HAL_RCC_OscConfig+0x2ac>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	691b      	ldr	r3, [r3, #16]
 8002c42:	00db      	lsls	r3, r3, #3
 8002c44:	4952      	ldr	r1, [pc, #328]	; (8002d90 <HAL_RCC_OscConfig+0x2ac>)
 8002c46:	4313      	orrs	r3, r2
 8002c48:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c4a:	e03a      	b.n	8002cc2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	68db      	ldr	r3, [r3, #12]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d020      	beq.n	8002c96 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c54:	4b4f      	ldr	r3, [pc, #316]	; (8002d94 <HAL_RCC_OscConfig+0x2b0>)
 8002c56:	2201      	movs	r2, #1
 8002c58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c5a:	f7ff f927 	bl	8001eac <HAL_GetTick>
 8002c5e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c60:	e008      	b.n	8002c74 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c62:	f7ff f923 	bl	8001eac <HAL_GetTick>
 8002c66:	4602      	mov	r2, r0
 8002c68:	693b      	ldr	r3, [r7, #16]
 8002c6a:	1ad3      	subs	r3, r2, r3
 8002c6c:	2b02      	cmp	r3, #2
 8002c6e:	d901      	bls.n	8002c74 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002c70:	2303      	movs	r3, #3
 8002c72:	e1a5      	b.n	8002fc0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c74:	4b46      	ldr	r3, [pc, #280]	; (8002d90 <HAL_RCC_OscConfig+0x2ac>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f003 0302 	and.w	r3, r3, #2
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d0f0      	beq.n	8002c62 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c80:	4b43      	ldr	r3, [pc, #268]	; (8002d90 <HAL_RCC_OscConfig+0x2ac>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	691b      	ldr	r3, [r3, #16]
 8002c8c:	00db      	lsls	r3, r3, #3
 8002c8e:	4940      	ldr	r1, [pc, #256]	; (8002d90 <HAL_RCC_OscConfig+0x2ac>)
 8002c90:	4313      	orrs	r3, r2
 8002c92:	600b      	str	r3, [r1, #0]
 8002c94:	e015      	b.n	8002cc2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c96:	4b3f      	ldr	r3, [pc, #252]	; (8002d94 <HAL_RCC_OscConfig+0x2b0>)
 8002c98:	2200      	movs	r2, #0
 8002c9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c9c:	f7ff f906 	bl	8001eac <HAL_GetTick>
 8002ca0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ca2:	e008      	b.n	8002cb6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ca4:	f7ff f902 	bl	8001eac <HAL_GetTick>
 8002ca8:	4602      	mov	r2, r0
 8002caa:	693b      	ldr	r3, [r7, #16]
 8002cac:	1ad3      	subs	r3, r2, r3
 8002cae:	2b02      	cmp	r3, #2
 8002cb0:	d901      	bls.n	8002cb6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002cb2:	2303      	movs	r3, #3
 8002cb4:	e184      	b.n	8002fc0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002cb6:	4b36      	ldr	r3, [pc, #216]	; (8002d90 <HAL_RCC_OscConfig+0x2ac>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f003 0302 	and.w	r3, r3, #2
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d1f0      	bne.n	8002ca4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f003 0308 	and.w	r3, r3, #8
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d030      	beq.n	8002d30 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	695b      	ldr	r3, [r3, #20]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d016      	beq.n	8002d04 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002cd6:	4b30      	ldr	r3, [pc, #192]	; (8002d98 <HAL_RCC_OscConfig+0x2b4>)
 8002cd8:	2201      	movs	r2, #1
 8002cda:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cdc:	f7ff f8e6 	bl	8001eac <HAL_GetTick>
 8002ce0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ce2:	e008      	b.n	8002cf6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ce4:	f7ff f8e2 	bl	8001eac <HAL_GetTick>
 8002ce8:	4602      	mov	r2, r0
 8002cea:	693b      	ldr	r3, [r7, #16]
 8002cec:	1ad3      	subs	r3, r2, r3
 8002cee:	2b02      	cmp	r3, #2
 8002cf0:	d901      	bls.n	8002cf6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002cf2:	2303      	movs	r3, #3
 8002cf4:	e164      	b.n	8002fc0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002cf6:	4b26      	ldr	r3, [pc, #152]	; (8002d90 <HAL_RCC_OscConfig+0x2ac>)
 8002cf8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002cfa:	f003 0302 	and.w	r3, r3, #2
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d0f0      	beq.n	8002ce4 <HAL_RCC_OscConfig+0x200>
 8002d02:	e015      	b.n	8002d30 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d04:	4b24      	ldr	r3, [pc, #144]	; (8002d98 <HAL_RCC_OscConfig+0x2b4>)
 8002d06:	2200      	movs	r2, #0
 8002d08:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d0a:	f7ff f8cf 	bl	8001eac <HAL_GetTick>
 8002d0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d10:	e008      	b.n	8002d24 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d12:	f7ff f8cb 	bl	8001eac <HAL_GetTick>
 8002d16:	4602      	mov	r2, r0
 8002d18:	693b      	ldr	r3, [r7, #16]
 8002d1a:	1ad3      	subs	r3, r2, r3
 8002d1c:	2b02      	cmp	r3, #2
 8002d1e:	d901      	bls.n	8002d24 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002d20:	2303      	movs	r3, #3
 8002d22:	e14d      	b.n	8002fc0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d24:	4b1a      	ldr	r3, [pc, #104]	; (8002d90 <HAL_RCC_OscConfig+0x2ac>)
 8002d26:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d28:	f003 0302 	and.w	r3, r3, #2
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d1f0      	bne.n	8002d12 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f003 0304 	and.w	r3, r3, #4
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	f000 80a0 	beq.w	8002e7e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d3e:	2300      	movs	r3, #0
 8002d40:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d42:	4b13      	ldr	r3, [pc, #76]	; (8002d90 <HAL_RCC_OscConfig+0x2ac>)
 8002d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d10f      	bne.n	8002d6e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d4e:	2300      	movs	r3, #0
 8002d50:	60bb      	str	r3, [r7, #8]
 8002d52:	4b0f      	ldr	r3, [pc, #60]	; (8002d90 <HAL_RCC_OscConfig+0x2ac>)
 8002d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d56:	4a0e      	ldr	r2, [pc, #56]	; (8002d90 <HAL_RCC_OscConfig+0x2ac>)
 8002d58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d5c:	6413      	str	r3, [r2, #64]	; 0x40
 8002d5e:	4b0c      	ldr	r3, [pc, #48]	; (8002d90 <HAL_RCC_OscConfig+0x2ac>)
 8002d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d66:	60bb      	str	r3, [r7, #8]
 8002d68:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d6e:	4b0b      	ldr	r3, [pc, #44]	; (8002d9c <HAL_RCC_OscConfig+0x2b8>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d121      	bne.n	8002dbe <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d7a:	4b08      	ldr	r3, [pc, #32]	; (8002d9c <HAL_RCC_OscConfig+0x2b8>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4a07      	ldr	r2, [pc, #28]	; (8002d9c <HAL_RCC_OscConfig+0x2b8>)
 8002d80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d84:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d86:	f7ff f891 	bl	8001eac <HAL_GetTick>
 8002d8a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d8c:	e011      	b.n	8002db2 <HAL_RCC_OscConfig+0x2ce>
 8002d8e:	bf00      	nop
 8002d90:	40023800 	.word	0x40023800
 8002d94:	42470000 	.word	0x42470000
 8002d98:	42470e80 	.word	0x42470e80
 8002d9c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002da0:	f7ff f884 	bl	8001eac <HAL_GetTick>
 8002da4:	4602      	mov	r2, r0
 8002da6:	693b      	ldr	r3, [r7, #16]
 8002da8:	1ad3      	subs	r3, r2, r3
 8002daa:	2b02      	cmp	r3, #2
 8002dac:	d901      	bls.n	8002db2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002dae:	2303      	movs	r3, #3
 8002db0:	e106      	b.n	8002fc0 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002db2:	4b85      	ldr	r3, [pc, #532]	; (8002fc8 <HAL_RCC_OscConfig+0x4e4>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d0f0      	beq.n	8002da0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	689b      	ldr	r3, [r3, #8]
 8002dc2:	2b01      	cmp	r3, #1
 8002dc4:	d106      	bne.n	8002dd4 <HAL_RCC_OscConfig+0x2f0>
 8002dc6:	4b81      	ldr	r3, [pc, #516]	; (8002fcc <HAL_RCC_OscConfig+0x4e8>)
 8002dc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dca:	4a80      	ldr	r2, [pc, #512]	; (8002fcc <HAL_RCC_OscConfig+0x4e8>)
 8002dcc:	f043 0301 	orr.w	r3, r3, #1
 8002dd0:	6713      	str	r3, [r2, #112]	; 0x70
 8002dd2:	e01c      	b.n	8002e0e <HAL_RCC_OscConfig+0x32a>
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	689b      	ldr	r3, [r3, #8]
 8002dd8:	2b05      	cmp	r3, #5
 8002dda:	d10c      	bne.n	8002df6 <HAL_RCC_OscConfig+0x312>
 8002ddc:	4b7b      	ldr	r3, [pc, #492]	; (8002fcc <HAL_RCC_OscConfig+0x4e8>)
 8002dde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002de0:	4a7a      	ldr	r2, [pc, #488]	; (8002fcc <HAL_RCC_OscConfig+0x4e8>)
 8002de2:	f043 0304 	orr.w	r3, r3, #4
 8002de6:	6713      	str	r3, [r2, #112]	; 0x70
 8002de8:	4b78      	ldr	r3, [pc, #480]	; (8002fcc <HAL_RCC_OscConfig+0x4e8>)
 8002dea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dec:	4a77      	ldr	r2, [pc, #476]	; (8002fcc <HAL_RCC_OscConfig+0x4e8>)
 8002dee:	f043 0301 	orr.w	r3, r3, #1
 8002df2:	6713      	str	r3, [r2, #112]	; 0x70
 8002df4:	e00b      	b.n	8002e0e <HAL_RCC_OscConfig+0x32a>
 8002df6:	4b75      	ldr	r3, [pc, #468]	; (8002fcc <HAL_RCC_OscConfig+0x4e8>)
 8002df8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dfa:	4a74      	ldr	r2, [pc, #464]	; (8002fcc <HAL_RCC_OscConfig+0x4e8>)
 8002dfc:	f023 0301 	bic.w	r3, r3, #1
 8002e00:	6713      	str	r3, [r2, #112]	; 0x70
 8002e02:	4b72      	ldr	r3, [pc, #456]	; (8002fcc <HAL_RCC_OscConfig+0x4e8>)
 8002e04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e06:	4a71      	ldr	r2, [pc, #452]	; (8002fcc <HAL_RCC_OscConfig+0x4e8>)
 8002e08:	f023 0304 	bic.w	r3, r3, #4
 8002e0c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	689b      	ldr	r3, [r3, #8]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d015      	beq.n	8002e42 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e16:	f7ff f849 	bl	8001eac <HAL_GetTick>
 8002e1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e1c:	e00a      	b.n	8002e34 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e1e:	f7ff f845 	bl	8001eac <HAL_GetTick>
 8002e22:	4602      	mov	r2, r0
 8002e24:	693b      	ldr	r3, [r7, #16]
 8002e26:	1ad3      	subs	r3, r2, r3
 8002e28:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d901      	bls.n	8002e34 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002e30:	2303      	movs	r3, #3
 8002e32:	e0c5      	b.n	8002fc0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e34:	4b65      	ldr	r3, [pc, #404]	; (8002fcc <HAL_RCC_OscConfig+0x4e8>)
 8002e36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e38:	f003 0302 	and.w	r3, r3, #2
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d0ee      	beq.n	8002e1e <HAL_RCC_OscConfig+0x33a>
 8002e40:	e014      	b.n	8002e6c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e42:	f7ff f833 	bl	8001eac <HAL_GetTick>
 8002e46:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e48:	e00a      	b.n	8002e60 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e4a:	f7ff f82f 	bl	8001eac <HAL_GetTick>
 8002e4e:	4602      	mov	r2, r0
 8002e50:	693b      	ldr	r3, [r7, #16]
 8002e52:	1ad3      	subs	r3, r2, r3
 8002e54:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e58:	4293      	cmp	r3, r2
 8002e5a:	d901      	bls.n	8002e60 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002e5c:	2303      	movs	r3, #3
 8002e5e:	e0af      	b.n	8002fc0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e60:	4b5a      	ldr	r3, [pc, #360]	; (8002fcc <HAL_RCC_OscConfig+0x4e8>)
 8002e62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e64:	f003 0302 	and.w	r3, r3, #2
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d1ee      	bne.n	8002e4a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002e6c:	7dfb      	ldrb	r3, [r7, #23]
 8002e6e:	2b01      	cmp	r3, #1
 8002e70:	d105      	bne.n	8002e7e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e72:	4b56      	ldr	r3, [pc, #344]	; (8002fcc <HAL_RCC_OscConfig+0x4e8>)
 8002e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e76:	4a55      	ldr	r2, [pc, #340]	; (8002fcc <HAL_RCC_OscConfig+0x4e8>)
 8002e78:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e7c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	699b      	ldr	r3, [r3, #24]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	f000 809b 	beq.w	8002fbe <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002e88:	4b50      	ldr	r3, [pc, #320]	; (8002fcc <HAL_RCC_OscConfig+0x4e8>)
 8002e8a:	689b      	ldr	r3, [r3, #8]
 8002e8c:	f003 030c 	and.w	r3, r3, #12
 8002e90:	2b08      	cmp	r3, #8
 8002e92:	d05c      	beq.n	8002f4e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	699b      	ldr	r3, [r3, #24]
 8002e98:	2b02      	cmp	r3, #2
 8002e9a:	d141      	bne.n	8002f20 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e9c:	4b4c      	ldr	r3, [pc, #304]	; (8002fd0 <HAL_RCC_OscConfig+0x4ec>)
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ea2:	f7ff f803 	bl	8001eac <HAL_GetTick>
 8002ea6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ea8:	e008      	b.n	8002ebc <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002eaa:	f7fe ffff 	bl	8001eac <HAL_GetTick>
 8002eae:	4602      	mov	r2, r0
 8002eb0:	693b      	ldr	r3, [r7, #16]
 8002eb2:	1ad3      	subs	r3, r2, r3
 8002eb4:	2b02      	cmp	r3, #2
 8002eb6:	d901      	bls.n	8002ebc <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002eb8:	2303      	movs	r3, #3
 8002eba:	e081      	b.n	8002fc0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ebc:	4b43      	ldr	r3, [pc, #268]	; (8002fcc <HAL_RCC_OscConfig+0x4e8>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d1f0      	bne.n	8002eaa <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	69da      	ldr	r2, [r3, #28]
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6a1b      	ldr	r3, [r3, #32]
 8002ed0:	431a      	orrs	r2, r3
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ed6:	019b      	lsls	r3, r3, #6
 8002ed8:	431a      	orrs	r2, r3
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ede:	085b      	lsrs	r3, r3, #1
 8002ee0:	3b01      	subs	r3, #1
 8002ee2:	041b      	lsls	r3, r3, #16
 8002ee4:	431a      	orrs	r2, r3
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eea:	061b      	lsls	r3, r3, #24
 8002eec:	4937      	ldr	r1, [pc, #220]	; (8002fcc <HAL_RCC_OscConfig+0x4e8>)
 8002eee:	4313      	orrs	r3, r2
 8002ef0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ef2:	4b37      	ldr	r3, [pc, #220]	; (8002fd0 <HAL_RCC_OscConfig+0x4ec>)
 8002ef4:	2201      	movs	r2, #1
 8002ef6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ef8:	f7fe ffd8 	bl	8001eac <HAL_GetTick>
 8002efc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002efe:	e008      	b.n	8002f12 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f00:	f7fe ffd4 	bl	8001eac <HAL_GetTick>
 8002f04:	4602      	mov	r2, r0
 8002f06:	693b      	ldr	r3, [r7, #16]
 8002f08:	1ad3      	subs	r3, r2, r3
 8002f0a:	2b02      	cmp	r3, #2
 8002f0c:	d901      	bls.n	8002f12 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002f0e:	2303      	movs	r3, #3
 8002f10:	e056      	b.n	8002fc0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f12:	4b2e      	ldr	r3, [pc, #184]	; (8002fcc <HAL_RCC_OscConfig+0x4e8>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d0f0      	beq.n	8002f00 <HAL_RCC_OscConfig+0x41c>
 8002f1e:	e04e      	b.n	8002fbe <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f20:	4b2b      	ldr	r3, [pc, #172]	; (8002fd0 <HAL_RCC_OscConfig+0x4ec>)
 8002f22:	2200      	movs	r2, #0
 8002f24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f26:	f7fe ffc1 	bl	8001eac <HAL_GetTick>
 8002f2a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f2c:	e008      	b.n	8002f40 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f2e:	f7fe ffbd 	bl	8001eac <HAL_GetTick>
 8002f32:	4602      	mov	r2, r0
 8002f34:	693b      	ldr	r3, [r7, #16]
 8002f36:	1ad3      	subs	r3, r2, r3
 8002f38:	2b02      	cmp	r3, #2
 8002f3a:	d901      	bls.n	8002f40 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002f3c:	2303      	movs	r3, #3
 8002f3e:	e03f      	b.n	8002fc0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f40:	4b22      	ldr	r3, [pc, #136]	; (8002fcc <HAL_RCC_OscConfig+0x4e8>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d1f0      	bne.n	8002f2e <HAL_RCC_OscConfig+0x44a>
 8002f4c:	e037      	b.n	8002fbe <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	699b      	ldr	r3, [r3, #24]
 8002f52:	2b01      	cmp	r3, #1
 8002f54:	d101      	bne.n	8002f5a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002f56:	2301      	movs	r3, #1
 8002f58:	e032      	b.n	8002fc0 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002f5a:	4b1c      	ldr	r3, [pc, #112]	; (8002fcc <HAL_RCC_OscConfig+0x4e8>)
 8002f5c:	685b      	ldr	r3, [r3, #4]
 8002f5e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	699b      	ldr	r3, [r3, #24]
 8002f64:	2b01      	cmp	r3, #1
 8002f66:	d028      	beq.n	8002fba <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f72:	429a      	cmp	r2, r3
 8002f74:	d121      	bne.n	8002fba <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f80:	429a      	cmp	r2, r3
 8002f82:	d11a      	bne.n	8002fba <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002f84:	68fa      	ldr	r2, [r7, #12]
 8002f86:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002f8a:	4013      	ands	r3, r2
 8002f8c:	687a      	ldr	r2, [r7, #4]
 8002f8e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002f90:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d111      	bne.n	8002fba <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fa0:	085b      	lsrs	r3, r3, #1
 8002fa2:	3b01      	subs	r3, #1
 8002fa4:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002fa6:	429a      	cmp	r2, r3
 8002fa8:	d107      	bne.n	8002fba <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fb4:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002fb6:	429a      	cmp	r2, r3
 8002fb8:	d001      	beq.n	8002fbe <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8002fba:	2301      	movs	r3, #1
 8002fbc:	e000      	b.n	8002fc0 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8002fbe:	2300      	movs	r3, #0
}
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	3718      	adds	r7, #24
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	bd80      	pop	{r7, pc}
 8002fc8:	40007000 	.word	0x40007000
 8002fcc:	40023800 	.word	0x40023800
 8002fd0:	42470060 	.word	0x42470060

08002fd4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b084      	sub	sp, #16
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
 8002fdc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d101      	bne.n	8002fe8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002fe4:	2301      	movs	r3, #1
 8002fe6:	e0cc      	b.n	8003182 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002fe8:	4b68      	ldr	r3, [pc, #416]	; (800318c <HAL_RCC_ClockConfig+0x1b8>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f003 0307 	and.w	r3, r3, #7
 8002ff0:	683a      	ldr	r2, [r7, #0]
 8002ff2:	429a      	cmp	r2, r3
 8002ff4:	d90c      	bls.n	8003010 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ff6:	4b65      	ldr	r3, [pc, #404]	; (800318c <HAL_RCC_ClockConfig+0x1b8>)
 8002ff8:	683a      	ldr	r2, [r7, #0]
 8002ffa:	b2d2      	uxtb	r2, r2
 8002ffc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ffe:	4b63      	ldr	r3, [pc, #396]	; (800318c <HAL_RCC_ClockConfig+0x1b8>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f003 0307 	and.w	r3, r3, #7
 8003006:	683a      	ldr	r2, [r7, #0]
 8003008:	429a      	cmp	r2, r3
 800300a:	d001      	beq.n	8003010 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800300c:	2301      	movs	r3, #1
 800300e:	e0b8      	b.n	8003182 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f003 0302 	and.w	r3, r3, #2
 8003018:	2b00      	cmp	r3, #0
 800301a:	d020      	beq.n	800305e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f003 0304 	and.w	r3, r3, #4
 8003024:	2b00      	cmp	r3, #0
 8003026:	d005      	beq.n	8003034 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003028:	4b59      	ldr	r3, [pc, #356]	; (8003190 <HAL_RCC_ClockConfig+0x1bc>)
 800302a:	689b      	ldr	r3, [r3, #8]
 800302c:	4a58      	ldr	r2, [pc, #352]	; (8003190 <HAL_RCC_ClockConfig+0x1bc>)
 800302e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003032:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f003 0308 	and.w	r3, r3, #8
 800303c:	2b00      	cmp	r3, #0
 800303e:	d005      	beq.n	800304c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003040:	4b53      	ldr	r3, [pc, #332]	; (8003190 <HAL_RCC_ClockConfig+0x1bc>)
 8003042:	689b      	ldr	r3, [r3, #8]
 8003044:	4a52      	ldr	r2, [pc, #328]	; (8003190 <HAL_RCC_ClockConfig+0x1bc>)
 8003046:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800304a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800304c:	4b50      	ldr	r3, [pc, #320]	; (8003190 <HAL_RCC_ClockConfig+0x1bc>)
 800304e:	689b      	ldr	r3, [r3, #8]
 8003050:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	689b      	ldr	r3, [r3, #8]
 8003058:	494d      	ldr	r1, [pc, #308]	; (8003190 <HAL_RCC_ClockConfig+0x1bc>)
 800305a:	4313      	orrs	r3, r2
 800305c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f003 0301 	and.w	r3, r3, #1
 8003066:	2b00      	cmp	r3, #0
 8003068:	d044      	beq.n	80030f4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	685b      	ldr	r3, [r3, #4]
 800306e:	2b01      	cmp	r3, #1
 8003070:	d107      	bne.n	8003082 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003072:	4b47      	ldr	r3, [pc, #284]	; (8003190 <HAL_RCC_ClockConfig+0x1bc>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800307a:	2b00      	cmp	r3, #0
 800307c:	d119      	bne.n	80030b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800307e:	2301      	movs	r3, #1
 8003080:	e07f      	b.n	8003182 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	685b      	ldr	r3, [r3, #4]
 8003086:	2b02      	cmp	r3, #2
 8003088:	d003      	beq.n	8003092 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800308e:	2b03      	cmp	r3, #3
 8003090:	d107      	bne.n	80030a2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003092:	4b3f      	ldr	r3, [pc, #252]	; (8003190 <HAL_RCC_ClockConfig+0x1bc>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800309a:	2b00      	cmp	r3, #0
 800309c:	d109      	bne.n	80030b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800309e:	2301      	movs	r3, #1
 80030a0:	e06f      	b.n	8003182 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030a2:	4b3b      	ldr	r3, [pc, #236]	; (8003190 <HAL_RCC_ClockConfig+0x1bc>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f003 0302 	and.w	r3, r3, #2
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d101      	bne.n	80030b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030ae:	2301      	movs	r3, #1
 80030b0:	e067      	b.n	8003182 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80030b2:	4b37      	ldr	r3, [pc, #220]	; (8003190 <HAL_RCC_ClockConfig+0x1bc>)
 80030b4:	689b      	ldr	r3, [r3, #8]
 80030b6:	f023 0203 	bic.w	r2, r3, #3
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	685b      	ldr	r3, [r3, #4]
 80030be:	4934      	ldr	r1, [pc, #208]	; (8003190 <HAL_RCC_ClockConfig+0x1bc>)
 80030c0:	4313      	orrs	r3, r2
 80030c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80030c4:	f7fe fef2 	bl	8001eac <HAL_GetTick>
 80030c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030ca:	e00a      	b.n	80030e2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030cc:	f7fe feee 	bl	8001eac <HAL_GetTick>
 80030d0:	4602      	mov	r2, r0
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	1ad3      	subs	r3, r2, r3
 80030d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80030da:	4293      	cmp	r3, r2
 80030dc:	d901      	bls.n	80030e2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80030de:	2303      	movs	r3, #3
 80030e0:	e04f      	b.n	8003182 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030e2:	4b2b      	ldr	r3, [pc, #172]	; (8003190 <HAL_RCC_ClockConfig+0x1bc>)
 80030e4:	689b      	ldr	r3, [r3, #8]
 80030e6:	f003 020c 	and.w	r2, r3, #12
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	685b      	ldr	r3, [r3, #4]
 80030ee:	009b      	lsls	r3, r3, #2
 80030f0:	429a      	cmp	r2, r3
 80030f2:	d1eb      	bne.n	80030cc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80030f4:	4b25      	ldr	r3, [pc, #148]	; (800318c <HAL_RCC_ClockConfig+0x1b8>)
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f003 0307 	and.w	r3, r3, #7
 80030fc:	683a      	ldr	r2, [r7, #0]
 80030fe:	429a      	cmp	r2, r3
 8003100:	d20c      	bcs.n	800311c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003102:	4b22      	ldr	r3, [pc, #136]	; (800318c <HAL_RCC_ClockConfig+0x1b8>)
 8003104:	683a      	ldr	r2, [r7, #0]
 8003106:	b2d2      	uxtb	r2, r2
 8003108:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800310a:	4b20      	ldr	r3, [pc, #128]	; (800318c <HAL_RCC_ClockConfig+0x1b8>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f003 0307 	and.w	r3, r3, #7
 8003112:	683a      	ldr	r2, [r7, #0]
 8003114:	429a      	cmp	r2, r3
 8003116:	d001      	beq.n	800311c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003118:	2301      	movs	r3, #1
 800311a:	e032      	b.n	8003182 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f003 0304 	and.w	r3, r3, #4
 8003124:	2b00      	cmp	r3, #0
 8003126:	d008      	beq.n	800313a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003128:	4b19      	ldr	r3, [pc, #100]	; (8003190 <HAL_RCC_ClockConfig+0x1bc>)
 800312a:	689b      	ldr	r3, [r3, #8]
 800312c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	68db      	ldr	r3, [r3, #12]
 8003134:	4916      	ldr	r1, [pc, #88]	; (8003190 <HAL_RCC_ClockConfig+0x1bc>)
 8003136:	4313      	orrs	r3, r2
 8003138:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f003 0308 	and.w	r3, r3, #8
 8003142:	2b00      	cmp	r3, #0
 8003144:	d009      	beq.n	800315a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003146:	4b12      	ldr	r3, [pc, #72]	; (8003190 <HAL_RCC_ClockConfig+0x1bc>)
 8003148:	689b      	ldr	r3, [r3, #8]
 800314a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	691b      	ldr	r3, [r3, #16]
 8003152:	00db      	lsls	r3, r3, #3
 8003154:	490e      	ldr	r1, [pc, #56]	; (8003190 <HAL_RCC_ClockConfig+0x1bc>)
 8003156:	4313      	orrs	r3, r2
 8003158:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800315a:	f000 f821 	bl	80031a0 <HAL_RCC_GetSysClockFreq>
 800315e:	4602      	mov	r2, r0
 8003160:	4b0b      	ldr	r3, [pc, #44]	; (8003190 <HAL_RCC_ClockConfig+0x1bc>)
 8003162:	689b      	ldr	r3, [r3, #8]
 8003164:	091b      	lsrs	r3, r3, #4
 8003166:	f003 030f 	and.w	r3, r3, #15
 800316a:	490a      	ldr	r1, [pc, #40]	; (8003194 <HAL_RCC_ClockConfig+0x1c0>)
 800316c:	5ccb      	ldrb	r3, [r1, r3]
 800316e:	fa22 f303 	lsr.w	r3, r2, r3
 8003172:	4a09      	ldr	r2, [pc, #36]	; (8003198 <HAL_RCC_ClockConfig+0x1c4>)
 8003174:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003176:	4b09      	ldr	r3, [pc, #36]	; (800319c <HAL_RCC_ClockConfig+0x1c8>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	4618      	mov	r0, r3
 800317c:	f7fe fc0c 	bl	8001998 <HAL_InitTick>

  return HAL_OK;
 8003180:	2300      	movs	r3, #0
}
 8003182:	4618      	mov	r0, r3
 8003184:	3710      	adds	r7, #16
 8003186:	46bd      	mov	sp, r7
 8003188:	bd80      	pop	{r7, pc}
 800318a:	bf00      	nop
 800318c:	40023c00 	.word	0x40023c00
 8003190:	40023800 	.word	0x40023800
 8003194:	08009d54 	.word	0x08009d54
 8003198:	20000000 	.word	0x20000000
 800319c:	20000004 	.word	0x20000004

080031a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80031a0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80031a4:	b084      	sub	sp, #16
 80031a6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80031a8:	2300      	movs	r3, #0
 80031aa:	607b      	str	r3, [r7, #4]
 80031ac:	2300      	movs	r3, #0
 80031ae:	60fb      	str	r3, [r7, #12]
 80031b0:	2300      	movs	r3, #0
 80031b2:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80031b4:	2300      	movs	r3, #0
 80031b6:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80031b8:	4b67      	ldr	r3, [pc, #412]	; (8003358 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80031ba:	689b      	ldr	r3, [r3, #8]
 80031bc:	f003 030c 	and.w	r3, r3, #12
 80031c0:	2b08      	cmp	r3, #8
 80031c2:	d00d      	beq.n	80031e0 <HAL_RCC_GetSysClockFreq+0x40>
 80031c4:	2b08      	cmp	r3, #8
 80031c6:	f200 80bd 	bhi.w	8003344 <HAL_RCC_GetSysClockFreq+0x1a4>
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d002      	beq.n	80031d4 <HAL_RCC_GetSysClockFreq+0x34>
 80031ce:	2b04      	cmp	r3, #4
 80031d0:	d003      	beq.n	80031da <HAL_RCC_GetSysClockFreq+0x3a>
 80031d2:	e0b7      	b.n	8003344 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80031d4:	4b61      	ldr	r3, [pc, #388]	; (800335c <HAL_RCC_GetSysClockFreq+0x1bc>)
 80031d6:	60bb      	str	r3, [r7, #8]
       break;
 80031d8:	e0b7      	b.n	800334a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80031da:	4b60      	ldr	r3, [pc, #384]	; (800335c <HAL_RCC_GetSysClockFreq+0x1bc>)
 80031dc:	60bb      	str	r3, [r7, #8]
      break;
 80031de:	e0b4      	b.n	800334a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80031e0:	4b5d      	ldr	r3, [pc, #372]	; (8003358 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80031e2:	685b      	ldr	r3, [r3, #4]
 80031e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80031e8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80031ea:	4b5b      	ldr	r3, [pc, #364]	; (8003358 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80031ec:	685b      	ldr	r3, [r3, #4]
 80031ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d04d      	beq.n	8003292 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80031f6:	4b58      	ldr	r3, [pc, #352]	; (8003358 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80031f8:	685b      	ldr	r3, [r3, #4]
 80031fa:	099b      	lsrs	r3, r3, #6
 80031fc:	461a      	mov	r2, r3
 80031fe:	f04f 0300 	mov.w	r3, #0
 8003202:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003206:	f04f 0100 	mov.w	r1, #0
 800320a:	ea02 0800 	and.w	r8, r2, r0
 800320e:	ea03 0901 	and.w	r9, r3, r1
 8003212:	4640      	mov	r0, r8
 8003214:	4649      	mov	r1, r9
 8003216:	f04f 0200 	mov.w	r2, #0
 800321a:	f04f 0300 	mov.w	r3, #0
 800321e:	014b      	lsls	r3, r1, #5
 8003220:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003224:	0142      	lsls	r2, r0, #5
 8003226:	4610      	mov	r0, r2
 8003228:	4619      	mov	r1, r3
 800322a:	ebb0 0008 	subs.w	r0, r0, r8
 800322e:	eb61 0109 	sbc.w	r1, r1, r9
 8003232:	f04f 0200 	mov.w	r2, #0
 8003236:	f04f 0300 	mov.w	r3, #0
 800323a:	018b      	lsls	r3, r1, #6
 800323c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003240:	0182      	lsls	r2, r0, #6
 8003242:	1a12      	subs	r2, r2, r0
 8003244:	eb63 0301 	sbc.w	r3, r3, r1
 8003248:	f04f 0000 	mov.w	r0, #0
 800324c:	f04f 0100 	mov.w	r1, #0
 8003250:	00d9      	lsls	r1, r3, #3
 8003252:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003256:	00d0      	lsls	r0, r2, #3
 8003258:	4602      	mov	r2, r0
 800325a:	460b      	mov	r3, r1
 800325c:	eb12 0208 	adds.w	r2, r2, r8
 8003260:	eb43 0309 	adc.w	r3, r3, r9
 8003264:	f04f 0000 	mov.w	r0, #0
 8003268:	f04f 0100 	mov.w	r1, #0
 800326c:	0299      	lsls	r1, r3, #10
 800326e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003272:	0290      	lsls	r0, r2, #10
 8003274:	4602      	mov	r2, r0
 8003276:	460b      	mov	r3, r1
 8003278:	4610      	mov	r0, r2
 800327a:	4619      	mov	r1, r3
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	461a      	mov	r2, r3
 8003280:	f04f 0300 	mov.w	r3, #0
 8003284:	f7fc fff4 	bl	8000270 <__aeabi_uldivmod>
 8003288:	4602      	mov	r2, r0
 800328a:	460b      	mov	r3, r1
 800328c:	4613      	mov	r3, r2
 800328e:	60fb      	str	r3, [r7, #12]
 8003290:	e04a      	b.n	8003328 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003292:	4b31      	ldr	r3, [pc, #196]	; (8003358 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003294:	685b      	ldr	r3, [r3, #4]
 8003296:	099b      	lsrs	r3, r3, #6
 8003298:	461a      	mov	r2, r3
 800329a:	f04f 0300 	mov.w	r3, #0
 800329e:	f240 10ff 	movw	r0, #511	; 0x1ff
 80032a2:	f04f 0100 	mov.w	r1, #0
 80032a6:	ea02 0400 	and.w	r4, r2, r0
 80032aa:	ea03 0501 	and.w	r5, r3, r1
 80032ae:	4620      	mov	r0, r4
 80032b0:	4629      	mov	r1, r5
 80032b2:	f04f 0200 	mov.w	r2, #0
 80032b6:	f04f 0300 	mov.w	r3, #0
 80032ba:	014b      	lsls	r3, r1, #5
 80032bc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80032c0:	0142      	lsls	r2, r0, #5
 80032c2:	4610      	mov	r0, r2
 80032c4:	4619      	mov	r1, r3
 80032c6:	1b00      	subs	r0, r0, r4
 80032c8:	eb61 0105 	sbc.w	r1, r1, r5
 80032cc:	f04f 0200 	mov.w	r2, #0
 80032d0:	f04f 0300 	mov.w	r3, #0
 80032d4:	018b      	lsls	r3, r1, #6
 80032d6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80032da:	0182      	lsls	r2, r0, #6
 80032dc:	1a12      	subs	r2, r2, r0
 80032de:	eb63 0301 	sbc.w	r3, r3, r1
 80032e2:	f04f 0000 	mov.w	r0, #0
 80032e6:	f04f 0100 	mov.w	r1, #0
 80032ea:	00d9      	lsls	r1, r3, #3
 80032ec:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80032f0:	00d0      	lsls	r0, r2, #3
 80032f2:	4602      	mov	r2, r0
 80032f4:	460b      	mov	r3, r1
 80032f6:	1912      	adds	r2, r2, r4
 80032f8:	eb45 0303 	adc.w	r3, r5, r3
 80032fc:	f04f 0000 	mov.w	r0, #0
 8003300:	f04f 0100 	mov.w	r1, #0
 8003304:	0299      	lsls	r1, r3, #10
 8003306:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800330a:	0290      	lsls	r0, r2, #10
 800330c:	4602      	mov	r2, r0
 800330e:	460b      	mov	r3, r1
 8003310:	4610      	mov	r0, r2
 8003312:	4619      	mov	r1, r3
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	461a      	mov	r2, r3
 8003318:	f04f 0300 	mov.w	r3, #0
 800331c:	f7fc ffa8 	bl	8000270 <__aeabi_uldivmod>
 8003320:	4602      	mov	r2, r0
 8003322:	460b      	mov	r3, r1
 8003324:	4613      	mov	r3, r2
 8003326:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003328:	4b0b      	ldr	r3, [pc, #44]	; (8003358 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800332a:	685b      	ldr	r3, [r3, #4]
 800332c:	0c1b      	lsrs	r3, r3, #16
 800332e:	f003 0303 	and.w	r3, r3, #3
 8003332:	3301      	adds	r3, #1
 8003334:	005b      	lsls	r3, r3, #1
 8003336:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003338:	68fa      	ldr	r2, [r7, #12]
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003340:	60bb      	str	r3, [r7, #8]
      break;
 8003342:	e002      	b.n	800334a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003344:	4b05      	ldr	r3, [pc, #20]	; (800335c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003346:	60bb      	str	r3, [r7, #8]
      break;
 8003348:	bf00      	nop
    }
  }
  return sysclockfreq;
 800334a:	68bb      	ldr	r3, [r7, #8]
}
 800334c:	4618      	mov	r0, r3
 800334e:	3710      	adds	r7, #16
 8003350:	46bd      	mov	sp, r7
 8003352:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003356:	bf00      	nop
 8003358:	40023800 	.word	0x40023800
 800335c:	00f42400 	.word	0x00f42400

08003360 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003360:	b480      	push	{r7}
 8003362:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003364:	4b03      	ldr	r3, [pc, #12]	; (8003374 <HAL_RCC_GetHCLKFreq+0x14>)
 8003366:	681b      	ldr	r3, [r3, #0]
}
 8003368:	4618      	mov	r0, r3
 800336a:	46bd      	mov	sp, r7
 800336c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003370:	4770      	bx	lr
 8003372:	bf00      	nop
 8003374:	20000000 	.word	0x20000000

08003378 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800337c:	f7ff fff0 	bl	8003360 <HAL_RCC_GetHCLKFreq>
 8003380:	4602      	mov	r2, r0
 8003382:	4b05      	ldr	r3, [pc, #20]	; (8003398 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003384:	689b      	ldr	r3, [r3, #8]
 8003386:	0a9b      	lsrs	r3, r3, #10
 8003388:	f003 0307 	and.w	r3, r3, #7
 800338c:	4903      	ldr	r1, [pc, #12]	; (800339c <HAL_RCC_GetPCLK1Freq+0x24>)
 800338e:	5ccb      	ldrb	r3, [r1, r3]
 8003390:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003394:	4618      	mov	r0, r3
 8003396:	bd80      	pop	{r7, pc}
 8003398:	40023800 	.word	0x40023800
 800339c:	08009d64 	.word	0x08009d64

080033a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80033a4:	f7ff ffdc 	bl	8003360 <HAL_RCC_GetHCLKFreq>
 80033a8:	4602      	mov	r2, r0
 80033aa:	4b05      	ldr	r3, [pc, #20]	; (80033c0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80033ac:	689b      	ldr	r3, [r3, #8]
 80033ae:	0b5b      	lsrs	r3, r3, #13
 80033b0:	f003 0307 	and.w	r3, r3, #7
 80033b4:	4903      	ldr	r1, [pc, #12]	; (80033c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80033b6:	5ccb      	ldrb	r3, [r1, r3]
 80033b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80033bc:	4618      	mov	r0, r3
 80033be:	bd80      	pop	{r7, pc}
 80033c0:	40023800 	.word	0x40023800
 80033c4:	08009d64 	.word	0x08009d64

080033c8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80033c8:	b480      	push	{r7}
 80033ca:	b083      	sub	sp, #12
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
 80033d0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	220f      	movs	r2, #15
 80033d6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80033d8:	4b12      	ldr	r3, [pc, #72]	; (8003424 <HAL_RCC_GetClockConfig+0x5c>)
 80033da:	689b      	ldr	r3, [r3, #8]
 80033dc:	f003 0203 	and.w	r2, r3, #3
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80033e4:	4b0f      	ldr	r3, [pc, #60]	; (8003424 <HAL_RCC_GetClockConfig+0x5c>)
 80033e6:	689b      	ldr	r3, [r3, #8]
 80033e8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80033f0:	4b0c      	ldr	r3, [pc, #48]	; (8003424 <HAL_RCC_GetClockConfig+0x5c>)
 80033f2:	689b      	ldr	r3, [r3, #8]
 80033f4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80033fc:	4b09      	ldr	r3, [pc, #36]	; (8003424 <HAL_RCC_GetClockConfig+0x5c>)
 80033fe:	689b      	ldr	r3, [r3, #8]
 8003400:	08db      	lsrs	r3, r3, #3
 8003402:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800340a:	4b07      	ldr	r3, [pc, #28]	; (8003428 <HAL_RCC_GetClockConfig+0x60>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f003 0207 	and.w	r2, r3, #7
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	601a      	str	r2, [r3, #0]
}
 8003416:	bf00      	nop
 8003418:	370c      	adds	r7, #12
 800341a:	46bd      	mov	sp, r7
 800341c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003420:	4770      	bx	lr
 8003422:	bf00      	nop
 8003424:	40023800 	.word	0x40023800
 8003428:	40023c00 	.word	0x40023c00

0800342c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b082      	sub	sp, #8
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d101      	bne.n	800343e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800343a:	2301      	movs	r3, #1
 800343c:	e07b      	b.n	8003536 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003442:	2b00      	cmp	r3, #0
 8003444:	d108      	bne.n	8003458 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	685b      	ldr	r3, [r3, #4]
 800344a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800344e:	d009      	beq.n	8003464 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2200      	movs	r2, #0
 8003454:	61da      	str	r2, [r3, #28]
 8003456:	e005      	b.n	8003464 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2200      	movs	r2, #0
 800345c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2200      	movs	r2, #0
 8003462:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2200      	movs	r2, #0
 8003468:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003470:	b2db      	uxtb	r3, r3
 8003472:	2b00      	cmp	r3, #0
 8003474:	d106      	bne.n	8003484 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2200      	movs	r2, #0
 800347a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800347e:	6878      	ldr	r0, [r7, #4]
 8003480:	f7fe f93e 	bl	8001700 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2202      	movs	r2, #2
 8003488:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	681a      	ldr	r2, [r3, #0]
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800349a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	685b      	ldr	r3, [r3, #4]
 80034a0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	689b      	ldr	r3, [r3, #8]
 80034a8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80034ac:	431a      	orrs	r2, r3
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	68db      	ldr	r3, [r3, #12]
 80034b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80034b6:	431a      	orrs	r2, r3
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	691b      	ldr	r3, [r3, #16]
 80034bc:	f003 0302 	and.w	r3, r3, #2
 80034c0:	431a      	orrs	r2, r3
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	695b      	ldr	r3, [r3, #20]
 80034c6:	f003 0301 	and.w	r3, r3, #1
 80034ca:	431a      	orrs	r2, r3
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	699b      	ldr	r3, [r3, #24]
 80034d0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80034d4:	431a      	orrs	r2, r3
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	69db      	ldr	r3, [r3, #28]
 80034da:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80034de:	431a      	orrs	r2, r3
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6a1b      	ldr	r3, [r3, #32]
 80034e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034e8:	ea42 0103 	orr.w	r1, r2, r3
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034f0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	430a      	orrs	r2, r1
 80034fa:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	699b      	ldr	r3, [r3, #24]
 8003500:	0c1b      	lsrs	r3, r3, #16
 8003502:	f003 0104 	and.w	r1, r3, #4
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800350a:	f003 0210 	and.w	r2, r3, #16
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	430a      	orrs	r2, r1
 8003514:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	69da      	ldr	r2, [r3, #28]
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003524:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	2200      	movs	r2, #0
 800352a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2201      	movs	r2, #1
 8003530:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003534:	2300      	movs	r3, #0
}
 8003536:	4618      	mov	r0, r3
 8003538:	3708      	adds	r7, #8
 800353a:	46bd      	mov	sp, r7
 800353c:	bd80      	pop	{r7, pc}

0800353e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800353e:	b580      	push	{r7, lr}
 8003540:	b088      	sub	sp, #32
 8003542:	af00      	add	r7, sp, #0
 8003544:	60f8      	str	r0, [r7, #12]
 8003546:	60b9      	str	r1, [r7, #8]
 8003548:	603b      	str	r3, [r7, #0]
 800354a:	4613      	mov	r3, r2
 800354c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800354e:	2300      	movs	r3, #0
 8003550:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003558:	2b01      	cmp	r3, #1
 800355a:	d101      	bne.n	8003560 <HAL_SPI_Transmit+0x22>
 800355c:	2302      	movs	r3, #2
 800355e:	e126      	b.n	80037ae <HAL_SPI_Transmit+0x270>
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	2201      	movs	r2, #1
 8003564:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003568:	f7fe fca0 	bl	8001eac <HAL_GetTick>
 800356c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800356e:	88fb      	ldrh	r3, [r7, #6]
 8003570:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003578:	b2db      	uxtb	r3, r3
 800357a:	2b01      	cmp	r3, #1
 800357c:	d002      	beq.n	8003584 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800357e:	2302      	movs	r3, #2
 8003580:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003582:	e10b      	b.n	800379c <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003584:	68bb      	ldr	r3, [r7, #8]
 8003586:	2b00      	cmp	r3, #0
 8003588:	d002      	beq.n	8003590 <HAL_SPI_Transmit+0x52>
 800358a:	88fb      	ldrh	r3, [r7, #6]
 800358c:	2b00      	cmp	r3, #0
 800358e:	d102      	bne.n	8003596 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003590:	2301      	movs	r3, #1
 8003592:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003594:	e102      	b.n	800379c <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	2203      	movs	r2, #3
 800359a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	2200      	movs	r2, #0
 80035a2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	68ba      	ldr	r2, [r7, #8]
 80035a8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	88fa      	ldrh	r2, [r7, #6]
 80035ae:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	88fa      	ldrh	r2, [r7, #6]
 80035b4:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	2200      	movs	r2, #0
 80035ba:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	2200      	movs	r2, #0
 80035c0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	2200      	movs	r2, #0
 80035c6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	2200      	movs	r2, #0
 80035cc:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	2200      	movs	r2, #0
 80035d2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	689b      	ldr	r3, [r3, #8]
 80035d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80035dc:	d10f      	bne.n	80035fe <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	681a      	ldr	r2, [r3, #0]
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80035ec:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	681a      	ldr	r2, [r3, #0]
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80035fc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003608:	2b40      	cmp	r3, #64	; 0x40
 800360a:	d007      	beq.n	800361c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	681a      	ldr	r2, [r3, #0]
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800361a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	68db      	ldr	r3, [r3, #12]
 8003620:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003624:	d14b      	bne.n	80036be <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	685b      	ldr	r3, [r3, #4]
 800362a:	2b00      	cmp	r3, #0
 800362c:	d002      	beq.n	8003634 <HAL_SPI_Transmit+0xf6>
 800362e:	8afb      	ldrh	r3, [r7, #22]
 8003630:	2b01      	cmp	r3, #1
 8003632:	d13e      	bne.n	80036b2 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003638:	881a      	ldrh	r2, [r3, #0]
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003644:	1c9a      	adds	r2, r3, #2
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800364e:	b29b      	uxth	r3, r3
 8003650:	3b01      	subs	r3, #1
 8003652:	b29a      	uxth	r2, r3
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003658:	e02b      	b.n	80036b2 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	689b      	ldr	r3, [r3, #8]
 8003660:	f003 0302 	and.w	r3, r3, #2
 8003664:	2b02      	cmp	r3, #2
 8003666:	d112      	bne.n	800368e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800366c:	881a      	ldrh	r2, [r3, #0]
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003678:	1c9a      	adds	r2, r3, #2
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003682:	b29b      	uxth	r3, r3
 8003684:	3b01      	subs	r3, #1
 8003686:	b29a      	uxth	r2, r3
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	86da      	strh	r2, [r3, #54]	; 0x36
 800368c:	e011      	b.n	80036b2 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800368e:	f7fe fc0d 	bl	8001eac <HAL_GetTick>
 8003692:	4602      	mov	r2, r0
 8003694:	69bb      	ldr	r3, [r7, #24]
 8003696:	1ad3      	subs	r3, r2, r3
 8003698:	683a      	ldr	r2, [r7, #0]
 800369a:	429a      	cmp	r2, r3
 800369c:	d803      	bhi.n	80036a6 <HAL_SPI_Transmit+0x168>
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036a4:	d102      	bne.n	80036ac <HAL_SPI_Transmit+0x16e>
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d102      	bne.n	80036b2 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80036ac:	2303      	movs	r3, #3
 80036ae:	77fb      	strb	r3, [r7, #31]
          goto error;
 80036b0:	e074      	b.n	800379c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80036b6:	b29b      	uxth	r3, r3
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d1ce      	bne.n	800365a <HAL_SPI_Transmit+0x11c>
 80036bc:	e04c      	b.n	8003758 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	685b      	ldr	r3, [r3, #4]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d002      	beq.n	80036cc <HAL_SPI_Transmit+0x18e>
 80036c6:	8afb      	ldrh	r3, [r7, #22]
 80036c8:	2b01      	cmp	r3, #1
 80036ca:	d140      	bne.n	800374e <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	330c      	adds	r3, #12
 80036d6:	7812      	ldrb	r2, [r2, #0]
 80036d8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036de:	1c5a      	adds	r2, r3, #1
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80036e8:	b29b      	uxth	r3, r3
 80036ea:	3b01      	subs	r3, #1
 80036ec:	b29a      	uxth	r2, r3
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80036f2:	e02c      	b.n	800374e <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	689b      	ldr	r3, [r3, #8]
 80036fa:	f003 0302 	and.w	r3, r3, #2
 80036fe:	2b02      	cmp	r3, #2
 8003700:	d113      	bne.n	800372a <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	330c      	adds	r3, #12
 800370c:	7812      	ldrb	r2, [r2, #0]
 800370e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003714:	1c5a      	adds	r2, r3, #1
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800371e:	b29b      	uxth	r3, r3
 8003720:	3b01      	subs	r3, #1
 8003722:	b29a      	uxth	r2, r3
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	86da      	strh	r2, [r3, #54]	; 0x36
 8003728:	e011      	b.n	800374e <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800372a:	f7fe fbbf 	bl	8001eac <HAL_GetTick>
 800372e:	4602      	mov	r2, r0
 8003730:	69bb      	ldr	r3, [r7, #24]
 8003732:	1ad3      	subs	r3, r2, r3
 8003734:	683a      	ldr	r2, [r7, #0]
 8003736:	429a      	cmp	r2, r3
 8003738:	d803      	bhi.n	8003742 <HAL_SPI_Transmit+0x204>
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003740:	d102      	bne.n	8003748 <HAL_SPI_Transmit+0x20a>
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	2b00      	cmp	r3, #0
 8003746:	d102      	bne.n	800374e <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8003748:	2303      	movs	r3, #3
 800374a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800374c:	e026      	b.n	800379c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003752:	b29b      	uxth	r3, r3
 8003754:	2b00      	cmp	r3, #0
 8003756:	d1cd      	bne.n	80036f4 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003758:	69ba      	ldr	r2, [r7, #24]
 800375a:	6839      	ldr	r1, [r7, #0]
 800375c:	68f8      	ldr	r0, [r7, #12]
 800375e:	f000 fbcb 	bl	8003ef8 <SPI_EndRxTxTransaction>
 8003762:	4603      	mov	r3, r0
 8003764:	2b00      	cmp	r3, #0
 8003766:	d002      	beq.n	800376e <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	2220      	movs	r2, #32
 800376c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	689b      	ldr	r3, [r3, #8]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d10a      	bne.n	800378c <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003776:	2300      	movs	r3, #0
 8003778:	613b      	str	r3, [r7, #16]
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	68db      	ldr	r3, [r3, #12]
 8003780:	613b      	str	r3, [r7, #16]
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	689b      	ldr	r3, [r3, #8]
 8003788:	613b      	str	r3, [r7, #16]
 800378a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003790:	2b00      	cmp	r3, #0
 8003792:	d002      	beq.n	800379a <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8003794:	2301      	movs	r3, #1
 8003796:	77fb      	strb	r3, [r7, #31]
 8003798:	e000      	b.n	800379c <HAL_SPI_Transmit+0x25e>
  }

error:
 800379a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	2201      	movs	r2, #1
 80037a0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	2200      	movs	r2, #0
 80037a8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80037ac:	7ffb      	ldrb	r3, [r7, #31]
}
 80037ae:	4618      	mov	r0, r3
 80037b0:	3720      	adds	r7, #32
 80037b2:	46bd      	mov	sp, r7
 80037b4:	bd80      	pop	{r7, pc}

080037b6 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80037b6:	b580      	push	{r7, lr}
 80037b8:	b088      	sub	sp, #32
 80037ba:	af02      	add	r7, sp, #8
 80037bc:	60f8      	str	r0, [r7, #12]
 80037be:	60b9      	str	r1, [r7, #8]
 80037c0:	603b      	str	r3, [r7, #0]
 80037c2:	4613      	mov	r3, r2
 80037c4:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80037c6:	2300      	movs	r3, #0
 80037c8:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	685b      	ldr	r3, [r3, #4]
 80037ce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80037d2:	d112      	bne.n	80037fa <HAL_SPI_Receive+0x44>
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	689b      	ldr	r3, [r3, #8]
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d10e      	bne.n	80037fa <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	2204      	movs	r2, #4
 80037e0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80037e4:	88fa      	ldrh	r2, [r7, #6]
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	9300      	str	r3, [sp, #0]
 80037ea:	4613      	mov	r3, r2
 80037ec:	68ba      	ldr	r2, [r7, #8]
 80037ee:	68b9      	ldr	r1, [r7, #8]
 80037f0:	68f8      	ldr	r0, [r7, #12]
 80037f2:	f000 f8f1 	bl	80039d8 <HAL_SPI_TransmitReceive>
 80037f6:	4603      	mov	r3, r0
 80037f8:	e0ea      	b.n	80039d0 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003800:	2b01      	cmp	r3, #1
 8003802:	d101      	bne.n	8003808 <HAL_SPI_Receive+0x52>
 8003804:	2302      	movs	r3, #2
 8003806:	e0e3      	b.n	80039d0 <HAL_SPI_Receive+0x21a>
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	2201      	movs	r2, #1
 800380c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003810:	f7fe fb4c 	bl	8001eac <HAL_GetTick>
 8003814:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800381c:	b2db      	uxtb	r3, r3
 800381e:	2b01      	cmp	r3, #1
 8003820:	d002      	beq.n	8003828 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8003822:	2302      	movs	r3, #2
 8003824:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003826:	e0ca      	b.n	80039be <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8003828:	68bb      	ldr	r3, [r7, #8]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d002      	beq.n	8003834 <HAL_SPI_Receive+0x7e>
 800382e:	88fb      	ldrh	r3, [r7, #6]
 8003830:	2b00      	cmp	r3, #0
 8003832:	d102      	bne.n	800383a <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003834:	2301      	movs	r3, #1
 8003836:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003838:	e0c1      	b.n	80039be <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	2204      	movs	r2, #4
 800383e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	2200      	movs	r2, #0
 8003846:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	68ba      	ldr	r2, [r7, #8]
 800384c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	88fa      	ldrh	r2, [r7, #6]
 8003852:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	88fa      	ldrh	r2, [r7, #6]
 8003858:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	2200      	movs	r2, #0
 800385e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	2200      	movs	r2, #0
 8003864:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	2200      	movs	r2, #0
 800386a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	2200      	movs	r2, #0
 8003870:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	2200      	movs	r2, #0
 8003876:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	689b      	ldr	r3, [r3, #8]
 800387c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003880:	d10f      	bne.n	80038a2 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	681a      	ldr	r2, [r3, #0]
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003890:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	681a      	ldr	r2, [r3, #0]
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80038a0:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038ac:	2b40      	cmp	r3, #64	; 0x40
 80038ae:	d007      	beq.n	80038c0 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	681a      	ldr	r2, [r3, #0]
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80038be:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	68db      	ldr	r3, [r3, #12]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d162      	bne.n	800398e <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80038c8:	e02e      	b.n	8003928 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	689b      	ldr	r3, [r3, #8]
 80038d0:	f003 0301 	and.w	r3, r3, #1
 80038d4:	2b01      	cmp	r3, #1
 80038d6:	d115      	bne.n	8003904 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f103 020c 	add.w	r2, r3, #12
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038e4:	7812      	ldrb	r2, [r2, #0]
 80038e6:	b2d2      	uxtb	r2, r2
 80038e8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038ee:	1c5a      	adds	r2, r3, #1
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80038f8:	b29b      	uxth	r3, r3
 80038fa:	3b01      	subs	r3, #1
 80038fc:	b29a      	uxth	r2, r3
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003902:	e011      	b.n	8003928 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003904:	f7fe fad2 	bl	8001eac <HAL_GetTick>
 8003908:	4602      	mov	r2, r0
 800390a:	693b      	ldr	r3, [r7, #16]
 800390c:	1ad3      	subs	r3, r2, r3
 800390e:	683a      	ldr	r2, [r7, #0]
 8003910:	429a      	cmp	r2, r3
 8003912:	d803      	bhi.n	800391c <HAL_SPI_Receive+0x166>
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	f1b3 3fff 	cmp.w	r3, #4294967295
 800391a:	d102      	bne.n	8003922 <HAL_SPI_Receive+0x16c>
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d102      	bne.n	8003928 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8003922:	2303      	movs	r3, #3
 8003924:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003926:	e04a      	b.n	80039be <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800392c:	b29b      	uxth	r3, r3
 800392e:	2b00      	cmp	r3, #0
 8003930:	d1cb      	bne.n	80038ca <HAL_SPI_Receive+0x114>
 8003932:	e031      	b.n	8003998 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	689b      	ldr	r3, [r3, #8]
 800393a:	f003 0301 	and.w	r3, r3, #1
 800393e:	2b01      	cmp	r3, #1
 8003940:	d113      	bne.n	800396a <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	68da      	ldr	r2, [r3, #12]
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800394c:	b292      	uxth	r2, r2
 800394e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003954:	1c9a      	adds	r2, r3, #2
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800395e:	b29b      	uxth	r3, r3
 8003960:	3b01      	subs	r3, #1
 8003962:	b29a      	uxth	r2, r3
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003968:	e011      	b.n	800398e <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800396a:	f7fe fa9f 	bl	8001eac <HAL_GetTick>
 800396e:	4602      	mov	r2, r0
 8003970:	693b      	ldr	r3, [r7, #16]
 8003972:	1ad3      	subs	r3, r2, r3
 8003974:	683a      	ldr	r2, [r7, #0]
 8003976:	429a      	cmp	r2, r3
 8003978:	d803      	bhi.n	8003982 <HAL_SPI_Receive+0x1cc>
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003980:	d102      	bne.n	8003988 <HAL_SPI_Receive+0x1d2>
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	2b00      	cmp	r3, #0
 8003986:	d102      	bne.n	800398e <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8003988:	2303      	movs	r3, #3
 800398a:	75fb      	strb	r3, [r7, #23]
          goto error;
 800398c:	e017      	b.n	80039be <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003992:	b29b      	uxth	r3, r3
 8003994:	2b00      	cmp	r3, #0
 8003996:	d1cd      	bne.n	8003934 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003998:	693a      	ldr	r2, [r7, #16]
 800399a:	6839      	ldr	r1, [r7, #0]
 800399c:	68f8      	ldr	r0, [r7, #12]
 800399e:	f000 fa45 	bl	8003e2c <SPI_EndRxTransaction>
 80039a2:	4603      	mov	r3, r0
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d002      	beq.n	80039ae <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	2220      	movs	r2, #32
 80039ac:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d002      	beq.n	80039bc <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 80039b6:	2301      	movs	r3, #1
 80039b8:	75fb      	strb	r3, [r7, #23]
 80039ba:	e000      	b.n	80039be <HAL_SPI_Receive+0x208>
  }

error :
 80039bc:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	2201      	movs	r2, #1
 80039c2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	2200      	movs	r2, #0
 80039ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80039ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80039d0:	4618      	mov	r0, r3
 80039d2:	3718      	adds	r7, #24
 80039d4:	46bd      	mov	sp, r7
 80039d6:	bd80      	pop	{r7, pc}

080039d8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	b08c      	sub	sp, #48	; 0x30
 80039dc:	af00      	add	r7, sp, #0
 80039de:	60f8      	str	r0, [r7, #12]
 80039e0:	60b9      	str	r1, [r7, #8]
 80039e2:	607a      	str	r2, [r7, #4]
 80039e4:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80039e6:	2301      	movs	r3, #1
 80039e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80039ea:	2300      	movs	r3, #0
 80039ec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80039f6:	2b01      	cmp	r3, #1
 80039f8:	d101      	bne.n	80039fe <HAL_SPI_TransmitReceive+0x26>
 80039fa:	2302      	movs	r3, #2
 80039fc:	e18a      	b.n	8003d14 <HAL_SPI_TransmitReceive+0x33c>
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	2201      	movs	r2, #1
 8003a02:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003a06:	f7fe fa51 	bl	8001eac <HAL_GetTick>
 8003a0a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003a12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	685b      	ldr	r3, [r3, #4]
 8003a1a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003a1c:	887b      	ldrh	r3, [r7, #2]
 8003a1e:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003a20:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003a24:	2b01      	cmp	r3, #1
 8003a26:	d00f      	beq.n	8003a48 <HAL_SPI_TransmitReceive+0x70>
 8003a28:	69fb      	ldr	r3, [r7, #28]
 8003a2a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003a2e:	d107      	bne.n	8003a40 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	689b      	ldr	r3, [r3, #8]
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d103      	bne.n	8003a40 <HAL_SPI_TransmitReceive+0x68>
 8003a38:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003a3c:	2b04      	cmp	r3, #4
 8003a3e:	d003      	beq.n	8003a48 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003a40:	2302      	movs	r3, #2
 8003a42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003a46:	e15b      	b.n	8003d00 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003a48:	68bb      	ldr	r3, [r7, #8]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d005      	beq.n	8003a5a <HAL_SPI_TransmitReceive+0x82>
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d002      	beq.n	8003a5a <HAL_SPI_TransmitReceive+0x82>
 8003a54:	887b      	ldrh	r3, [r7, #2]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d103      	bne.n	8003a62 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003a5a:	2301      	movs	r3, #1
 8003a5c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003a60:	e14e      	b.n	8003d00 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003a68:	b2db      	uxtb	r3, r3
 8003a6a:	2b04      	cmp	r3, #4
 8003a6c:	d003      	beq.n	8003a76 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	2205      	movs	r2, #5
 8003a72:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	2200      	movs	r2, #0
 8003a7a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	687a      	ldr	r2, [r7, #4]
 8003a80:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	887a      	ldrh	r2, [r7, #2]
 8003a86:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	887a      	ldrh	r2, [r7, #2]
 8003a8c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	68ba      	ldr	r2, [r7, #8]
 8003a92:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	887a      	ldrh	r2, [r7, #2]
 8003a98:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	887a      	ldrh	r2, [r7, #2]
 8003a9e:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ab6:	2b40      	cmp	r3, #64	; 0x40
 8003ab8:	d007      	beq.n	8003aca <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	681a      	ldr	r2, [r3, #0]
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003ac8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	68db      	ldr	r3, [r3, #12]
 8003ace:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ad2:	d178      	bne.n	8003bc6 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	685b      	ldr	r3, [r3, #4]
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d002      	beq.n	8003ae2 <HAL_SPI_TransmitReceive+0x10a>
 8003adc:	8b7b      	ldrh	r3, [r7, #26]
 8003ade:	2b01      	cmp	r3, #1
 8003ae0:	d166      	bne.n	8003bb0 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ae6:	881a      	ldrh	r2, [r3, #0]
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003af2:	1c9a      	adds	r2, r3, #2
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003afc:	b29b      	uxth	r3, r3
 8003afe:	3b01      	subs	r3, #1
 8003b00:	b29a      	uxth	r2, r3
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003b06:	e053      	b.n	8003bb0 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	689b      	ldr	r3, [r3, #8]
 8003b0e:	f003 0302 	and.w	r3, r3, #2
 8003b12:	2b02      	cmp	r3, #2
 8003b14:	d11b      	bne.n	8003b4e <HAL_SPI_TransmitReceive+0x176>
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b1a:	b29b      	uxth	r3, r3
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d016      	beq.n	8003b4e <HAL_SPI_TransmitReceive+0x176>
 8003b20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b22:	2b01      	cmp	r3, #1
 8003b24:	d113      	bne.n	8003b4e <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b2a:	881a      	ldrh	r2, [r3, #0]
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b36:	1c9a      	adds	r2, r3, #2
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b40:	b29b      	uxth	r3, r3
 8003b42:	3b01      	subs	r3, #1
 8003b44:	b29a      	uxth	r2, r3
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	689b      	ldr	r3, [r3, #8]
 8003b54:	f003 0301 	and.w	r3, r3, #1
 8003b58:	2b01      	cmp	r3, #1
 8003b5a:	d119      	bne.n	8003b90 <HAL_SPI_TransmitReceive+0x1b8>
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b60:	b29b      	uxth	r3, r3
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d014      	beq.n	8003b90 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	68da      	ldr	r2, [r3, #12]
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b70:	b292      	uxth	r2, r2
 8003b72:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b78:	1c9a      	adds	r2, r3, #2
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b82:	b29b      	uxth	r3, r3
 8003b84:	3b01      	subs	r3, #1
 8003b86:	b29a      	uxth	r2, r3
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003b8c:	2301      	movs	r3, #1
 8003b8e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003b90:	f7fe f98c 	bl	8001eac <HAL_GetTick>
 8003b94:	4602      	mov	r2, r0
 8003b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b98:	1ad3      	subs	r3, r2, r3
 8003b9a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003b9c:	429a      	cmp	r2, r3
 8003b9e:	d807      	bhi.n	8003bb0 <HAL_SPI_TransmitReceive+0x1d8>
 8003ba0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ba2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ba6:	d003      	beq.n	8003bb0 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8003ba8:	2303      	movs	r3, #3
 8003baa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003bae:	e0a7      	b.n	8003d00 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003bb4:	b29b      	uxth	r3, r3
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d1a6      	bne.n	8003b08 <HAL_SPI_TransmitReceive+0x130>
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003bbe:	b29b      	uxth	r3, r3
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d1a1      	bne.n	8003b08 <HAL_SPI_TransmitReceive+0x130>
 8003bc4:	e07c      	b.n	8003cc0 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	685b      	ldr	r3, [r3, #4]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d002      	beq.n	8003bd4 <HAL_SPI_TransmitReceive+0x1fc>
 8003bce:	8b7b      	ldrh	r3, [r7, #26]
 8003bd0:	2b01      	cmp	r3, #1
 8003bd2:	d16b      	bne.n	8003cac <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	330c      	adds	r3, #12
 8003bde:	7812      	ldrb	r2, [r2, #0]
 8003be0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003be6:	1c5a      	adds	r2, r3, #1
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003bf0:	b29b      	uxth	r3, r3
 8003bf2:	3b01      	subs	r3, #1
 8003bf4:	b29a      	uxth	r2, r3
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003bfa:	e057      	b.n	8003cac <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	689b      	ldr	r3, [r3, #8]
 8003c02:	f003 0302 	and.w	r3, r3, #2
 8003c06:	2b02      	cmp	r3, #2
 8003c08:	d11c      	bne.n	8003c44 <HAL_SPI_TransmitReceive+0x26c>
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c0e:	b29b      	uxth	r3, r3
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d017      	beq.n	8003c44 <HAL_SPI_TransmitReceive+0x26c>
 8003c14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c16:	2b01      	cmp	r3, #1
 8003c18:	d114      	bne.n	8003c44 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	330c      	adds	r3, #12
 8003c24:	7812      	ldrb	r2, [r2, #0]
 8003c26:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c2c:	1c5a      	adds	r2, r3, #1
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c36:	b29b      	uxth	r3, r3
 8003c38:	3b01      	subs	r3, #1
 8003c3a:	b29a      	uxth	r2, r3
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003c40:	2300      	movs	r3, #0
 8003c42:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	689b      	ldr	r3, [r3, #8]
 8003c4a:	f003 0301 	and.w	r3, r3, #1
 8003c4e:	2b01      	cmp	r3, #1
 8003c50:	d119      	bne.n	8003c86 <HAL_SPI_TransmitReceive+0x2ae>
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c56:	b29b      	uxth	r3, r3
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d014      	beq.n	8003c86 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	68da      	ldr	r2, [r3, #12]
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c66:	b2d2      	uxtb	r2, r2
 8003c68:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c6e:	1c5a      	adds	r2, r3, #1
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c78:	b29b      	uxth	r3, r3
 8003c7a:	3b01      	subs	r3, #1
 8003c7c:	b29a      	uxth	r2, r3
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003c82:	2301      	movs	r3, #1
 8003c84:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003c86:	f7fe f911 	bl	8001eac <HAL_GetTick>
 8003c8a:	4602      	mov	r2, r0
 8003c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c8e:	1ad3      	subs	r3, r2, r3
 8003c90:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003c92:	429a      	cmp	r2, r3
 8003c94:	d803      	bhi.n	8003c9e <HAL_SPI_TransmitReceive+0x2c6>
 8003c96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c9c:	d102      	bne.n	8003ca4 <HAL_SPI_TransmitReceive+0x2cc>
 8003c9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d103      	bne.n	8003cac <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8003ca4:	2303      	movs	r3, #3
 8003ca6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003caa:	e029      	b.n	8003d00 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003cb0:	b29b      	uxth	r3, r3
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d1a2      	bne.n	8003bfc <HAL_SPI_TransmitReceive+0x224>
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003cba:	b29b      	uxth	r3, r3
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d19d      	bne.n	8003bfc <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003cc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cc2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003cc4:	68f8      	ldr	r0, [r7, #12]
 8003cc6:	f000 f917 	bl	8003ef8 <SPI_EndRxTxTransaction>
 8003cca:	4603      	mov	r3, r0
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d006      	beq.n	8003cde <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8003cd0:	2301      	movs	r3, #1
 8003cd2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	2220      	movs	r2, #32
 8003cda:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003cdc:	e010      	b.n	8003d00 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	689b      	ldr	r3, [r3, #8]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d10b      	bne.n	8003cfe <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	617b      	str	r3, [r7, #20]
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	68db      	ldr	r3, [r3, #12]
 8003cf0:	617b      	str	r3, [r7, #20]
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	689b      	ldr	r3, [r3, #8]
 8003cf8:	617b      	str	r3, [r7, #20]
 8003cfa:	697b      	ldr	r3, [r7, #20]
 8003cfc:	e000      	b.n	8003d00 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8003cfe:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	2201      	movs	r2, #1
 8003d04:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003d10:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003d14:	4618      	mov	r0, r3
 8003d16:	3730      	adds	r7, #48	; 0x30
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	bd80      	pop	{r7, pc}

08003d1c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b088      	sub	sp, #32
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	60f8      	str	r0, [r7, #12]
 8003d24:	60b9      	str	r1, [r7, #8]
 8003d26:	603b      	str	r3, [r7, #0]
 8003d28:	4613      	mov	r3, r2
 8003d2a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003d2c:	f7fe f8be 	bl	8001eac <HAL_GetTick>
 8003d30:	4602      	mov	r2, r0
 8003d32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d34:	1a9b      	subs	r3, r3, r2
 8003d36:	683a      	ldr	r2, [r7, #0]
 8003d38:	4413      	add	r3, r2
 8003d3a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003d3c:	f7fe f8b6 	bl	8001eac <HAL_GetTick>
 8003d40:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003d42:	4b39      	ldr	r3, [pc, #228]	; (8003e28 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	015b      	lsls	r3, r3, #5
 8003d48:	0d1b      	lsrs	r3, r3, #20
 8003d4a:	69fa      	ldr	r2, [r7, #28]
 8003d4c:	fb02 f303 	mul.w	r3, r2, r3
 8003d50:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003d52:	e054      	b.n	8003dfe <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d5a:	d050      	beq.n	8003dfe <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003d5c:	f7fe f8a6 	bl	8001eac <HAL_GetTick>
 8003d60:	4602      	mov	r2, r0
 8003d62:	69bb      	ldr	r3, [r7, #24]
 8003d64:	1ad3      	subs	r3, r2, r3
 8003d66:	69fa      	ldr	r2, [r7, #28]
 8003d68:	429a      	cmp	r2, r3
 8003d6a:	d902      	bls.n	8003d72 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003d6c:	69fb      	ldr	r3, [r7, #28]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d13d      	bne.n	8003dee <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	685a      	ldr	r2, [r3, #4]
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003d80:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	685b      	ldr	r3, [r3, #4]
 8003d86:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003d8a:	d111      	bne.n	8003db0 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	689b      	ldr	r3, [r3, #8]
 8003d90:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d94:	d004      	beq.n	8003da0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	689b      	ldr	r3, [r3, #8]
 8003d9a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d9e:	d107      	bne.n	8003db0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	681a      	ldr	r2, [r3, #0]
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003dae:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003db4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003db8:	d10f      	bne.n	8003dda <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	681a      	ldr	r2, [r3, #0]
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003dc8:	601a      	str	r2, [r3, #0]
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	681a      	ldr	r2, [r3, #0]
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003dd8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	2201      	movs	r2, #1
 8003dde:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	2200      	movs	r2, #0
 8003de6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003dea:	2303      	movs	r3, #3
 8003dec:	e017      	b.n	8003e1e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003dee:	697b      	ldr	r3, [r7, #20]
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d101      	bne.n	8003df8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003df4:	2300      	movs	r3, #0
 8003df6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003df8:	697b      	ldr	r3, [r7, #20]
 8003dfa:	3b01      	subs	r3, #1
 8003dfc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	689a      	ldr	r2, [r3, #8]
 8003e04:	68bb      	ldr	r3, [r7, #8]
 8003e06:	4013      	ands	r3, r2
 8003e08:	68ba      	ldr	r2, [r7, #8]
 8003e0a:	429a      	cmp	r2, r3
 8003e0c:	bf0c      	ite	eq
 8003e0e:	2301      	moveq	r3, #1
 8003e10:	2300      	movne	r3, #0
 8003e12:	b2db      	uxtb	r3, r3
 8003e14:	461a      	mov	r2, r3
 8003e16:	79fb      	ldrb	r3, [r7, #7]
 8003e18:	429a      	cmp	r2, r3
 8003e1a:	d19b      	bne.n	8003d54 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003e1c:	2300      	movs	r3, #0
}
 8003e1e:	4618      	mov	r0, r3
 8003e20:	3720      	adds	r7, #32
 8003e22:	46bd      	mov	sp, r7
 8003e24:	bd80      	pop	{r7, pc}
 8003e26:	bf00      	nop
 8003e28:	20000000 	.word	0x20000000

08003e2c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	b086      	sub	sp, #24
 8003e30:	af02      	add	r7, sp, #8
 8003e32:	60f8      	str	r0, [r7, #12]
 8003e34:	60b9      	str	r1, [r7, #8]
 8003e36:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	685b      	ldr	r3, [r3, #4]
 8003e3c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003e40:	d111      	bne.n	8003e66 <SPI_EndRxTransaction+0x3a>
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	689b      	ldr	r3, [r3, #8]
 8003e46:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e4a:	d004      	beq.n	8003e56 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	689b      	ldr	r3, [r3, #8]
 8003e50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e54:	d107      	bne.n	8003e66 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	681a      	ldr	r2, [r3, #0]
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e64:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	685b      	ldr	r3, [r3, #4]
 8003e6a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003e6e:	d12a      	bne.n	8003ec6 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	689b      	ldr	r3, [r3, #8]
 8003e74:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e78:	d012      	beq.n	8003ea0 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	9300      	str	r3, [sp, #0]
 8003e7e:	68bb      	ldr	r3, [r7, #8]
 8003e80:	2200      	movs	r2, #0
 8003e82:	2180      	movs	r1, #128	; 0x80
 8003e84:	68f8      	ldr	r0, [r7, #12]
 8003e86:	f7ff ff49 	bl	8003d1c <SPI_WaitFlagStateUntilTimeout>
 8003e8a:	4603      	mov	r3, r0
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d02d      	beq.n	8003eec <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e94:	f043 0220 	orr.w	r2, r3, #32
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8003e9c:	2303      	movs	r3, #3
 8003e9e:	e026      	b.n	8003eee <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	9300      	str	r3, [sp, #0]
 8003ea4:	68bb      	ldr	r3, [r7, #8]
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	2101      	movs	r1, #1
 8003eaa:	68f8      	ldr	r0, [r7, #12]
 8003eac:	f7ff ff36 	bl	8003d1c <SPI_WaitFlagStateUntilTimeout>
 8003eb0:	4603      	mov	r3, r0
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d01a      	beq.n	8003eec <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003eba:	f043 0220 	orr.w	r2, r3, #32
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8003ec2:	2303      	movs	r3, #3
 8003ec4:	e013      	b.n	8003eee <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	9300      	str	r3, [sp, #0]
 8003eca:	68bb      	ldr	r3, [r7, #8]
 8003ecc:	2200      	movs	r2, #0
 8003ece:	2101      	movs	r1, #1
 8003ed0:	68f8      	ldr	r0, [r7, #12]
 8003ed2:	f7ff ff23 	bl	8003d1c <SPI_WaitFlagStateUntilTimeout>
 8003ed6:	4603      	mov	r3, r0
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d007      	beq.n	8003eec <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ee0:	f043 0220 	orr.w	r2, r3, #32
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003ee8:	2303      	movs	r3, #3
 8003eea:	e000      	b.n	8003eee <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8003eec:	2300      	movs	r3, #0
}
 8003eee:	4618      	mov	r0, r3
 8003ef0:	3710      	adds	r7, #16
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	bd80      	pop	{r7, pc}
	...

08003ef8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b088      	sub	sp, #32
 8003efc:	af02      	add	r7, sp, #8
 8003efe:	60f8      	str	r0, [r7, #12]
 8003f00:	60b9      	str	r1, [r7, #8]
 8003f02:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003f04:	4b1b      	ldr	r3, [pc, #108]	; (8003f74 <SPI_EndRxTxTransaction+0x7c>)
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	4a1b      	ldr	r2, [pc, #108]	; (8003f78 <SPI_EndRxTxTransaction+0x80>)
 8003f0a:	fba2 2303 	umull	r2, r3, r2, r3
 8003f0e:	0d5b      	lsrs	r3, r3, #21
 8003f10:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003f14:	fb02 f303 	mul.w	r3, r2, r3
 8003f18:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	685b      	ldr	r3, [r3, #4]
 8003f1e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003f22:	d112      	bne.n	8003f4a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	9300      	str	r3, [sp, #0]
 8003f28:	68bb      	ldr	r3, [r7, #8]
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	2180      	movs	r1, #128	; 0x80
 8003f2e:	68f8      	ldr	r0, [r7, #12]
 8003f30:	f7ff fef4 	bl	8003d1c <SPI_WaitFlagStateUntilTimeout>
 8003f34:	4603      	mov	r3, r0
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d016      	beq.n	8003f68 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f3e:	f043 0220 	orr.w	r2, r3, #32
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003f46:	2303      	movs	r3, #3
 8003f48:	e00f      	b.n	8003f6a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003f4a:	697b      	ldr	r3, [r7, #20]
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d00a      	beq.n	8003f66 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003f50:	697b      	ldr	r3, [r7, #20]
 8003f52:	3b01      	subs	r3, #1
 8003f54:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	689b      	ldr	r3, [r3, #8]
 8003f5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f60:	2b80      	cmp	r3, #128	; 0x80
 8003f62:	d0f2      	beq.n	8003f4a <SPI_EndRxTxTransaction+0x52>
 8003f64:	e000      	b.n	8003f68 <SPI_EndRxTxTransaction+0x70>
        break;
 8003f66:	bf00      	nop
  }

  return HAL_OK;
 8003f68:	2300      	movs	r3, #0
}
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	3718      	adds	r7, #24
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	bd80      	pop	{r7, pc}
 8003f72:	bf00      	nop
 8003f74:	20000000 	.word	0x20000000
 8003f78:	165e9f81 	.word	0x165e9f81

08003f7c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b082      	sub	sp, #8
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d101      	bne.n	8003f8e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	e041      	b.n	8004012 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f94:	b2db      	uxtb	r3, r3
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d106      	bne.n	8003fa8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003fa2:	6878      	ldr	r0, [r7, #4]
 8003fa4:	f7fd fbf4 	bl	8001790 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2202      	movs	r2, #2
 8003fac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681a      	ldr	r2, [r3, #0]
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	3304      	adds	r3, #4
 8003fb8:	4619      	mov	r1, r3
 8003fba:	4610      	mov	r0, r2
 8003fbc:	f000 fdb0 	bl	8004b20 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2201      	movs	r2, #1
 8003fc4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2201      	movs	r2, #1
 8003fcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2201      	movs	r2, #1
 8003fd4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2201      	movs	r2, #1
 8003fdc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2201      	movs	r2, #1
 8003fe4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2201      	movs	r2, #1
 8003fec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2201      	movs	r2, #1
 8003ff4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2201      	movs	r2, #1
 8003ffc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2201      	movs	r2, #1
 8004004:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2201      	movs	r2, #1
 800400c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004010:	2300      	movs	r3, #0
}
 8004012:	4618      	mov	r0, r3
 8004014:	3708      	adds	r7, #8
 8004016:	46bd      	mov	sp, r7
 8004018:	bd80      	pop	{r7, pc}
	...

0800401c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800401c:	b480      	push	{r7}
 800401e:	b085      	sub	sp, #20
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800402a:	b2db      	uxtb	r3, r3
 800402c:	2b01      	cmp	r3, #1
 800402e:	d001      	beq.n	8004034 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004030:	2301      	movs	r3, #1
 8004032:	e046      	b.n	80040c2 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2202      	movs	r2, #2
 8004038:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	4a23      	ldr	r2, [pc, #140]	; (80040d0 <HAL_TIM_Base_Start+0xb4>)
 8004042:	4293      	cmp	r3, r2
 8004044:	d022      	beq.n	800408c <HAL_TIM_Base_Start+0x70>
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800404e:	d01d      	beq.n	800408c <HAL_TIM_Base_Start+0x70>
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	4a1f      	ldr	r2, [pc, #124]	; (80040d4 <HAL_TIM_Base_Start+0xb8>)
 8004056:	4293      	cmp	r3, r2
 8004058:	d018      	beq.n	800408c <HAL_TIM_Base_Start+0x70>
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	4a1e      	ldr	r2, [pc, #120]	; (80040d8 <HAL_TIM_Base_Start+0xbc>)
 8004060:	4293      	cmp	r3, r2
 8004062:	d013      	beq.n	800408c <HAL_TIM_Base_Start+0x70>
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	4a1c      	ldr	r2, [pc, #112]	; (80040dc <HAL_TIM_Base_Start+0xc0>)
 800406a:	4293      	cmp	r3, r2
 800406c:	d00e      	beq.n	800408c <HAL_TIM_Base_Start+0x70>
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	4a1b      	ldr	r2, [pc, #108]	; (80040e0 <HAL_TIM_Base_Start+0xc4>)
 8004074:	4293      	cmp	r3, r2
 8004076:	d009      	beq.n	800408c <HAL_TIM_Base_Start+0x70>
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	4a19      	ldr	r2, [pc, #100]	; (80040e4 <HAL_TIM_Base_Start+0xc8>)
 800407e:	4293      	cmp	r3, r2
 8004080:	d004      	beq.n	800408c <HAL_TIM_Base_Start+0x70>
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	4a18      	ldr	r2, [pc, #96]	; (80040e8 <HAL_TIM_Base_Start+0xcc>)
 8004088:	4293      	cmp	r3, r2
 800408a:	d111      	bne.n	80040b0 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	689b      	ldr	r3, [r3, #8]
 8004092:	f003 0307 	and.w	r3, r3, #7
 8004096:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	2b06      	cmp	r3, #6
 800409c:	d010      	beq.n	80040c0 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	681a      	ldr	r2, [r3, #0]
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f042 0201 	orr.w	r2, r2, #1
 80040ac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040ae:	e007      	b.n	80040c0 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	681a      	ldr	r2, [r3, #0]
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f042 0201 	orr.w	r2, r2, #1
 80040be:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80040c0:	2300      	movs	r3, #0
}
 80040c2:	4618      	mov	r0, r3
 80040c4:	3714      	adds	r7, #20
 80040c6:	46bd      	mov	sp, r7
 80040c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040cc:	4770      	bx	lr
 80040ce:	bf00      	nop
 80040d0:	40010000 	.word	0x40010000
 80040d4:	40000400 	.word	0x40000400
 80040d8:	40000800 	.word	0x40000800
 80040dc:	40000c00 	.word	0x40000c00
 80040e0:	40010400 	.word	0x40010400
 80040e4:	40014000 	.word	0x40014000
 80040e8:	40001800 	.word	0x40001800

080040ec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80040ec:	b480      	push	{r7}
 80040ee:	b085      	sub	sp, #20
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040fa:	b2db      	uxtb	r3, r3
 80040fc:	2b01      	cmp	r3, #1
 80040fe:	d001      	beq.n	8004104 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004100:	2301      	movs	r3, #1
 8004102:	e04e      	b.n	80041a2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2202      	movs	r2, #2
 8004108:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	68da      	ldr	r2, [r3, #12]
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f042 0201 	orr.w	r2, r2, #1
 800411a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	4a23      	ldr	r2, [pc, #140]	; (80041b0 <HAL_TIM_Base_Start_IT+0xc4>)
 8004122:	4293      	cmp	r3, r2
 8004124:	d022      	beq.n	800416c <HAL_TIM_Base_Start_IT+0x80>
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800412e:	d01d      	beq.n	800416c <HAL_TIM_Base_Start_IT+0x80>
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	4a1f      	ldr	r2, [pc, #124]	; (80041b4 <HAL_TIM_Base_Start_IT+0xc8>)
 8004136:	4293      	cmp	r3, r2
 8004138:	d018      	beq.n	800416c <HAL_TIM_Base_Start_IT+0x80>
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	4a1e      	ldr	r2, [pc, #120]	; (80041b8 <HAL_TIM_Base_Start_IT+0xcc>)
 8004140:	4293      	cmp	r3, r2
 8004142:	d013      	beq.n	800416c <HAL_TIM_Base_Start_IT+0x80>
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	4a1c      	ldr	r2, [pc, #112]	; (80041bc <HAL_TIM_Base_Start_IT+0xd0>)
 800414a:	4293      	cmp	r3, r2
 800414c:	d00e      	beq.n	800416c <HAL_TIM_Base_Start_IT+0x80>
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	4a1b      	ldr	r2, [pc, #108]	; (80041c0 <HAL_TIM_Base_Start_IT+0xd4>)
 8004154:	4293      	cmp	r3, r2
 8004156:	d009      	beq.n	800416c <HAL_TIM_Base_Start_IT+0x80>
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	4a19      	ldr	r2, [pc, #100]	; (80041c4 <HAL_TIM_Base_Start_IT+0xd8>)
 800415e:	4293      	cmp	r3, r2
 8004160:	d004      	beq.n	800416c <HAL_TIM_Base_Start_IT+0x80>
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	4a18      	ldr	r2, [pc, #96]	; (80041c8 <HAL_TIM_Base_Start_IT+0xdc>)
 8004168:	4293      	cmp	r3, r2
 800416a:	d111      	bne.n	8004190 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	689b      	ldr	r3, [r3, #8]
 8004172:	f003 0307 	and.w	r3, r3, #7
 8004176:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	2b06      	cmp	r3, #6
 800417c:	d010      	beq.n	80041a0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	681a      	ldr	r2, [r3, #0]
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f042 0201 	orr.w	r2, r2, #1
 800418c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800418e:	e007      	b.n	80041a0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	681a      	ldr	r2, [r3, #0]
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f042 0201 	orr.w	r2, r2, #1
 800419e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80041a0:	2300      	movs	r3, #0
}
 80041a2:	4618      	mov	r0, r3
 80041a4:	3714      	adds	r7, #20
 80041a6:	46bd      	mov	sp, r7
 80041a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ac:	4770      	bx	lr
 80041ae:	bf00      	nop
 80041b0:	40010000 	.word	0x40010000
 80041b4:	40000400 	.word	0x40000400
 80041b8:	40000800 	.word	0x40000800
 80041bc:	40000c00 	.word	0x40000c00
 80041c0:	40010400 	.word	0x40010400
 80041c4:	40014000 	.word	0x40014000
 80041c8:	40001800 	.word	0x40001800

080041cc <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80041cc:	b580      	push	{r7, lr}
 80041ce:	b082      	sub	sp, #8
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d101      	bne.n	80041de <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80041da:	2301      	movs	r3, #1
 80041dc:	e041      	b.n	8004262 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041e4:	b2db      	uxtb	r3, r3
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d106      	bne.n	80041f8 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	2200      	movs	r2, #0
 80041ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80041f2:	6878      	ldr	r0, [r7, #4]
 80041f4:	f000 f839 	bl	800426a <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2202      	movs	r2, #2
 80041fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681a      	ldr	r2, [r3, #0]
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	3304      	adds	r3, #4
 8004208:	4619      	mov	r1, r3
 800420a:	4610      	mov	r0, r2
 800420c:	f000 fc88 	bl	8004b20 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2201      	movs	r2, #1
 8004214:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2201      	movs	r2, #1
 800421c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2201      	movs	r2, #1
 8004224:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2201      	movs	r2, #1
 800422c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2201      	movs	r2, #1
 8004234:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2201      	movs	r2, #1
 800423c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2201      	movs	r2, #1
 8004244:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2201      	movs	r2, #1
 800424c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2201      	movs	r2, #1
 8004254:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2201      	movs	r2, #1
 800425c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004260:	2300      	movs	r3, #0
}
 8004262:	4618      	mov	r0, r3
 8004264:	3708      	adds	r7, #8
 8004266:	46bd      	mov	sp, r7
 8004268:	bd80      	pop	{r7, pc}

0800426a <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800426a:	b480      	push	{r7}
 800426c:	b083      	sub	sp, #12
 800426e:	af00      	add	r7, sp, #0
 8004270:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8004272:	bf00      	nop
 8004274:	370c      	adds	r7, #12
 8004276:	46bd      	mov	sp, r7
 8004278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427c:	4770      	bx	lr

0800427e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800427e:	b580      	push	{r7, lr}
 8004280:	b082      	sub	sp, #8
 8004282:	af00      	add	r7, sp, #0
 8004284:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	2b00      	cmp	r3, #0
 800428a:	d101      	bne.n	8004290 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800428c:	2301      	movs	r3, #1
 800428e:	e041      	b.n	8004314 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004296:	b2db      	uxtb	r3, r3
 8004298:	2b00      	cmp	r3, #0
 800429a:	d106      	bne.n	80042aa <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2200      	movs	r2, #0
 80042a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80042a4:	6878      	ldr	r0, [r7, #4]
 80042a6:	f000 f839 	bl	800431c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	2202      	movs	r2, #2
 80042ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681a      	ldr	r2, [r3, #0]
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	3304      	adds	r3, #4
 80042ba:	4619      	mov	r1, r3
 80042bc:	4610      	mov	r0, r2
 80042be:	f000 fc2f 	bl	8004b20 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2201      	movs	r2, #1
 80042c6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	2201      	movs	r2, #1
 80042ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	2201      	movs	r2, #1
 80042d6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	2201      	movs	r2, #1
 80042de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	2201      	movs	r2, #1
 80042e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	2201      	movs	r2, #1
 80042ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	2201      	movs	r2, #1
 80042f6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	2201      	movs	r2, #1
 80042fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2201      	movs	r2, #1
 8004306:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	2201      	movs	r2, #1
 800430e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004312:	2300      	movs	r3, #0
}
 8004314:	4618      	mov	r0, r3
 8004316:	3708      	adds	r7, #8
 8004318:	46bd      	mov	sp, r7
 800431a:	bd80      	pop	{r7, pc}

0800431c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800431c:	b480      	push	{r7}
 800431e:	b083      	sub	sp, #12
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004324:	bf00      	nop
 8004326:	370c      	adds	r7, #12
 8004328:	46bd      	mov	sp, r7
 800432a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432e:	4770      	bx	lr

08004330 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8004330:	b580      	push	{r7, lr}
 8004332:	b082      	sub	sp, #8
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2b00      	cmp	r3, #0
 800433c:	d101      	bne.n	8004342 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800433e:	2301      	movs	r3, #1
 8004340:	e041      	b.n	80043c6 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004348:	b2db      	uxtb	r3, r3
 800434a:	2b00      	cmp	r3, #0
 800434c:	d106      	bne.n	800435c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	2200      	movs	r2, #0
 8004352:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8004356:	6878      	ldr	r0, [r7, #4]
 8004358:	f000 f839 	bl	80043ce <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2202      	movs	r2, #2
 8004360:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681a      	ldr	r2, [r3, #0]
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	3304      	adds	r3, #4
 800436c:	4619      	mov	r1, r3
 800436e:	4610      	mov	r0, r2
 8004370:	f000 fbd6 	bl	8004b20 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2201      	movs	r2, #1
 8004378:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2201      	movs	r2, #1
 8004380:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2201      	movs	r2, #1
 8004388:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2201      	movs	r2, #1
 8004390:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2201      	movs	r2, #1
 8004398:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2201      	movs	r2, #1
 80043a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2201      	movs	r2, #1
 80043a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2201      	movs	r2, #1
 80043b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2201      	movs	r2, #1
 80043b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2201      	movs	r2, #1
 80043c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80043c4:	2300      	movs	r3, #0
}
 80043c6:	4618      	mov	r0, r3
 80043c8:	3708      	adds	r7, #8
 80043ca:	46bd      	mov	sp, r7
 80043cc:	bd80      	pop	{r7, pc}

080043ce <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80043ce:	b480      	push	{r7}
 80043d0:	b083      	sub	sp, #12
 80043d2:	af00      	add	r7, sp, #0
 80043d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80043d6:	bf00      	nop
 80043d8:	370c      	adds	r7, #12
 80043da:	46bd      	mov	sp, r7
 80043dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e0:	4770      	bx	lr

080043e2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80043e2:	b580      	push	{r7, lr}
 80043e4:	b082      	sub	sp, #8
 80043e6:	af00      	add	r7, sp, #0
 80043e8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	691b      	ldr	r3, [r3, #16]
 80043f0:	f003 0302 	and.w	r3, r3, #2
 80043f4:	2b02      	cmp	r3, #2
 80043f6:	d122      	bne.n	800443e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	68db      	ldr	r3, [r3, #12]
 80043fe:	f003 0302 	and.w	r3, r3, #2
 8004402:	2b02      	cmp	r3, #2
 8004404:	d11b      	bne.n	800443e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f06f 0202 	mvn.w	r2, #2
 800440e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2201      	movs	r2, #1
 8004414:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	699b      	ldr	r3, [r3, #24]
 800441c:	f003 0303 	and.w	r3, r3, #3
 8004420:	2b00      	cmp	r3, #0
 8004422:	d003      	beq.n	800442c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004424:	6878      	ldr	r0, [r7, #4]
 8004426:	f000 fb5d 	bl	8004ae4 <HAL_TIM_IC_CaptureCallback>
 800442a:	e005      	b.n	8004438 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800442c:	6878      	ldr	r0, [r7, #4]
 800442e:	f000 fb4f 	bl	8004ad0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004432:	6878      	ldr	r0, [r7, #4]
 8004434:	f000 fb60 	bl	8004af8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2200      	movs	r2, #0
 800443c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	691b      	ldr	r3, [r3, #16]
 8004444:	f003 0304 	and.w	r3, r3, #4
 8004448:	2b04      	cmp	r3, #4
 800444a:	d122      	bne.n	8004492 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	68db      	ldr	r3, [r3, #12]
 8004452:	f003 0304 	and.w	r3, r3, #4
 8004456:	2b04      	cmp	r3, #4
 8004458:	d11b      	bne.n	8004492 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f06f 0204 	mvn.w	r2, #4
 8004462:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2202      	movs	r2, #2
 8004468:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	699b      	ldr	r3, [r3, #24]
 8004470:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004474:	2b00      	cmp	r3, #0
 8004476:	d003      	beq.n	8004480 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004478:	6878      	ldr	r0, [r7, #4]
 800447a:	f000 fb33 	bl	8004ae4 <HAL_TIM_IC_CaptureCallback>
 800447e:	e005      	b.n	800448c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004480:	6878      	ldr	r0, [r7, #4]
 8004482:	f000 fb25 	bl	8004ad0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004486:	6878      	ldr	r0, [r7, #4]
 8004488:	f000 fb36 	bl	8004af8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2200      	movs	r2, #0
 8004490:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	691b      	ldr	r3, [r3, #16]
 8004498:	f003 0308 	and.w	r3, r3, #8
 800449c:	2b08      	cmp	r3, #8
 800449e:	d122      	bne.n	80044e6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	68db      	ldr	r3, [r3, #12]
 80044a6:	f003 0308 	and.w	r3, r3, #8
 80044aa:	2b08      	cmp	r3, #8
 80044ac:	d11b      	bne.n	80044e6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f06f 0208 	mvn.w	r2, #8
 80044b6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2204      	movs	r2, #4
 80044bc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	69db      	ldr	r3, [r3, #28]
 80044c4:	f003 0303 	and.w	r3, r3, #3
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d003      	beq.n	80044d4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80044cc:	6878      	ldr	r0, [r7, #4]
 80044ce:	f000 fb09 	bl	8004ae4 <HAL_TIM_IC_CaptureCallback>
 80044d2:	e005      	b.n	80044e0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80044d4:	6878      	ldr	r0, [r7, #4]
 80044d6:	f000 fafb 	bl	8004ad0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044da:	6878      	ldr	r0, [r7, #4]
 80044dc:	f000 fb0c 	bl	8004af8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2200      	movs	r2, #0
 80044e4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	691b      	ldr	r3, [r3, #16]
 80044ec:	f003 0310 	and.w	r3, r3, #16
 80044f0:	2b10      	cmp	r3, #16
 80044f2:	d122      	bne.n	800453a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	68db      	ldr	r3, [r3, #12]
 80044fa:	f003 0310 	and.w	r3, r3, #16
 80044fe:	2b10      	cmp	r3, #16
 8004500:	d11b      	bne.n	800453a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f06f 0210 	mvn.w	r2, #16
 800450a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2208      	movs	r2, #8
 8004510:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	69db      	ldr	r3, [r3, #28]
 8004518:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800451c:	2b00      	cmp	r3, #0
 800451e:	d003      	beq.n	8004528 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004520:	6878      	ldr	r0, [r7, #4]
 8004522:	f000 fadf 	bl	8004ae4 <HAL_TIM_IC_CaptureCallback>
 8004526:	e005      	b.n	8004534 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004528:	6878      	ldr	r0, [r7, #4]
 800452a:	f000 fad1 	bl	8004ad0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800452e:	6878      	ldr	r0, [r7, #4]
 8004530:	f000 fae2 	bl	8004af8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2200      	movs	r2, #0
 8004538:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	691b      	ldr	r3, [r3, #16]
 8004540:	f003 0301 	and.w	r3, r3, #1
 8004544:	2b01      	cmp	r3, #1
 8004546:	d10e      	bne.n	8004566 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	68db      	ldr	r3, [r3, #12]
 800454e:	f003 0301 	and.w	r3, r3, #1
 8004552:	2b01      	cmp	r3, #1
 8004554:	d107      	bne.n	8004566 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f06f 0201 	mvn.w	r2, #1
 800455e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004560:	6878      	ldr	r0, [r7, #4]
 8004562:	f7fc ffe1 	bl	8001528 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	691b      	ldr	r3, [r3, #16]
 800456c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004570:	2b80      	cmp	r3, #128	; 0x80
 8004572:	d10e      	bne.n	8004592 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	68db      	ldr	r3, [r3, #12]
 800457a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800457e:	2b80      	cmp	r3, #128	; 0x80
 8004580:	d107      	bne.n	8004592 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800458a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800458c:	6878      	ldr	r0, [r7, #4]
 800458e:	f000 ffb3 	bl	80054f8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	691b      	ldr	r3, [r3, #16]
 8004598:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800459c:	2b40      	cmp	r3, #64	; 0x40
 800459e:	d10e      	bne.n	80045be <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	68db      	ldr	r3, [r3, #12]
 80045a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045aa:	2b40      	cmp	r3, #64	; 0x40
 80045ac:	d107      	bne.n	80045be <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80045b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80045b8:	6878      	ldr	r0, [r7, #4]
 80045ba:	f000 faa7 	bl	8004b0c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	691b      	ldr	r3, [r3, #16]
 80045c4:	f003 0320 	and.w	r3, r3, #32
 80045c8:	2b20      	cmp	r3, #32
 80045ca:	d10e      	bne.n	80045ea <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	68db      	ldr	r3, [r3, #12]
 80045d2:	f003 0320 	and.w	r3, r3, #32
 80045d6:	2b20      	cmp	r3, #32
 80045d8:	d107      	bne.n	80045ea <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f06f 0220 	mvn.w	r2, #32
 80045e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80045e4:	6878      	ldr	r0, [r7, #4]
 80045e6:	f000 ff7d 	bl	80054e4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80045ea:	bf00      	nop
 80045ec:	3708      	adds	r7, #8
 80045ee:	46bd      	mov	sp, r7
 80045f0:	bd80      	pop	{r7, pc}
	...

080045f4 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b084      	sub	sp, #16
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	60f8      	str	r0, [r7, #12]
 80045fc:	60b9      	str	r1, [r7, #8]
 80045fe:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004606:	2b01      	cmp	r3, #1
 8004608:	d101      	bne.n	800460e <HAL_TIM_OC_ConfigChannel+0x1a>
 800460a:	2302      	movs	r3, #2
 800460c:	e046      	b.n	800469c <HAL_TIM_OC_ConfigChannel+0xa8>
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	2201      	movs	r2, #1
 8004612:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	2b0c      	cmp	r3, #12
 800461a:	d839      	bhi.n	8004690 <HAL_TIM_OC_ConfigChannel+0x9c>
 800461c:	a201      	add	r2, pc, #4	; (adr r2, 8004624 <HAL_TIM_OC_ConfigChannel+0x30>)
 800461e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004622:	bf00      	nop
 8004624:	08004659 	.word	0x08004659
 8004628:	08004691 	.word	0x08004691
 800462c:	08004691 	.word	0x08004691
 8004630:	08004691 	.word	0x08004691
 8004634:	08004667 	.word	0x08004667
 8004638:	08004691 	.word	0x08004691
 800463c:	08004691 	.word	0x08004691
 8004640:	08004691 	.word	0x08004691
 8004644:	08004675 	.word	0x08004675
 8004648:	08004691 	.word	0x08004691
 800464c:	08004691 	.word	0x08004691
 8004650:	08004691 	.word	0x08004691
 8004654:	08004683 	.word	0x08004683
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	68b9      	ldr	r1, [r7, #8]
 800465e:	4618      	mov	r0, r3
 8004660:	f000 fafe 	bl	8004c60 <TIM_OC1_SetConfig>
      break;
 8004664:	e015      	b.n	8004692 <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	68b9      	ldr	r1, [r7, #8]
 800466c:	4618      	mov	r0, r3
 800466e:	f000 fb67 	bl	8004d40 <TIM_OC2_SetConfig>
      break;
 8004672:	e00e      	b.n	8004692 <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	68b9      	ldr	r1, [r7, #8]
 800467a:	4618      	mov	r0, r3
 800467c:	f000 fbd6 	bl	8004e2c <TIM_OC3_SetConfig>
      break;
 8004680:	e007      	b.n	8004692 <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	68b9      	ldr	r1, [r7, #8]
 8004688:	4618      	mov	r0, r3
 800468a:	f000 fc43 	bl	8004f14 <TIM_OC4_SetConfig>
      break;
 800468e:	e000      	b.n	8004692 <HAL_TIM_OC_ConfigChannel+0x9e>
    }

    default:
      break;
 8004690:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	2200      	movs	r2, #0
 8004696:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800469a:	2300      	movs	r3, #0
}
 800469c:	4618      	mov	r0, r3
 800469e:	3710      	adds	r7, #16
 80046a0:	46bd      	mov	sp, r7
 80046a2:	bd80      	pop	{r7, pc}

080046a4 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b084      	sub	sp, #16
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	60f8      	str	r0, [r7, #12]
 80046ac:	60b9      	str	r1, [r7, #8]
 80046ae:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80046b6:	2b01      	cmp	r3, #1
 80046b8:	d101      	bne.n	80046be <HAL_TIM_IC_ConfigChannel+0x1a>
 80046ba:	2302      	movs	r3, #2
 80046bc:	e082      	b.n	80047c4 <HAL_TIM_IC_ConfigChannel+0x120>
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	2201      	movs	r2, #1
 80046c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d11b      	bne.n	8004704 <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	6818      	ldr	r0, [r3, #0]
 80046d0:	68bb      	ldr	r3, [r7, #8]
 80046d2:	6819      	ldr	r1, [r3, #0]
 80046d4:	68bb      	ldr	r3, [r7, #8]
 80046d6:	685a      	ldr	r2, [r3, #4]
 80046d8:	68bb      	ldr	r3, [r7, #8]
 80046da:	68db      	ldr	r3, [r3, #12]
 80046dc:	f000 fc70 	bl	8004fc0 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	699a      	ldr	r2, [r3, #24]
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f022 020c 	bic.w	r2, r2, #12
 80046ee:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	6999      	ldr	r1, [r3, #24]
 80046f6:	68bb      	ldr	r3, [r7, #8]
 80046f8:	689a      	ldr	r2, [r3, #8]
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	430a      	orrs	r2, r1
 8004700:	619a      	str	r2, [r3, #24]
 8004702:	e05a      	b.n	80047ba <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2b04      	cmp	r3, #4
 8004708:	d11c      	bne.n	8004744 <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	6818      	ldr	r0, [r3, #0]
 800470e:	68bb      	ldr	r3, [r7, #8]
 8004710:	6819      	ldr	r1, [r3, #0]
 8004712:	68bb      	ldr	r3, [r7, #8]
 8004714:	685a      	ldr	r2, [r3, #4]
 8004716:	68bb      	ldr	r3, [r7, #8]
 8004718:	68db      	ldr	r3, [r3, #12]
 800471a:	f000 fcf4 	bl	8005106 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	699a      	ldr	r2, [r3, #24]
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800472c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	6999      	ldr	r1, [r3, #24]
 8004734:	68bb      	ldr	r3, [r7, #8]
 8004736:	689b      	ldr	r3, [r3, #8]
 8004738:	021a      	lsls	r2, r3, #8
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	430a      	orrs	r2, r1
 8004740:	619a      	str	r2, [r3, #24]
 8004742:	e03a      	b.n	80047ba <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2b08      	cmp	r3, #8
 8004748:	d11b      	bne.n	8004782 <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	6818      	ldr	r0, [r3, #0]
 800474e:	68bb      	ldr	r3, [r7, #8]
 8004750:	6819      	ldr	r1, [r3, #0]
 8004752:	68bb      	ldr	r3, [r7, #8]
 8004754:	685a      	ldr	r2, [r3, #4]
 8004756:	68bb      	ldr	r3, [r7, #8]
 8004758:	68db      	ldr	r3, [r3, #12]
 800475a:	f000 fd41 	bl	80051e0 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	69da      	ldr	r2, [r3, #28]
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f022 020c 	bic.w	r2, r2, #12
 800476c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	69d9      	ldr	r1, [r3, #28]
 8004774:	68bb      	ldr	r3, [r7, #8]
 8004776:	689a      	ldr	r2, [r3, #8]
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	430a      	orrs	r2, r1
 800477e:	61da      	str	r2, [r3, #28]
 8004780:	e01b      	b.n	80047ba <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	6818      	ldr	r0, [r3, #0]
 8004786:	68bb      	ldr	r3, [r7, #8]
 8004788:	6819      	ldr	r1, [r3, #0]
 800478a:	68bb      	ldr	r3, [r7, #8]
 800478c:	685a      	ldr	r2, [r3, #4]
 800478e:	68bb      	ldr	r3, [r7, #8]
 8004790:	68db      	ldr	r3, [r3, #12]
 8004792:	f000 fd61 	bl	8005258 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	69da      	ldr	r2, [r3, #28]
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80047a4:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	69d9      	ldr	r1, [r3, #28]
 80047ac:	68bb      	ldr	r3, [r7, #8]
 80047ae:	689b      	ldr	r3, [r3, #8]
 80047b0:	021a      	lsls	r2, r3, #8
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	430a      	orrs	r2, r1
 80047b8:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	2200      	movs	r2, #0
 80047be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80047c2:	2300      	movs	r3, #0
}
 80047c4:	4618      	mov	r0, r3
 80047c6:	3710      	adds	r7, #16
 80047c8:	46bd      	mov	sp, r7
 80047ca:	bd80      	pop	{r7, pc}

080047cc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80047cc:	b580      	push	{r7, lr}
 80047ce:	b084      	sub	sp, #16
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	60f8      	str	r0, [r7, #12]
 80047d4:	60b9      	str	r1, [r7, #8]
 80047d6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047de:	2b01      	cmp	r3, #1
 80047e0:	d101      	bne.n	80047e6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80047e2:	2302      	movs	r3, #2
 80047e4:	e0ac      	b.n	8004940 <HAL_TIM_PWM_ConfigChannel+0x174>
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	2201      	movs	r2, #1
 80047ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	2b0c      	cmp	r3, #12
 80047f2:	f200 809f 	bhi.w	8004934 <HAL_TIM_PWM_ConfigChannel+0x168>
 80047f6:	a201      	add	r2, pc, #4	; (adr r2, 80047fc <HAL_TIM_PWM_ConfigChannel+0x30>)
 80047f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047fc:	08004831 	.word	0x08004831
 8004800:	08004935 	.word	0x08004935
 8004804:	08004935 	.word	0x08004935
 8004808:	08004935 	.word	0x08004935
 800480c:	08004871 	.word	0x08004871
 8004810:	08004935 	.word	0x08004935
 8004814:	08004935 	.word	0x08004935
 8004818:	08004935 	.word	0x08004935
 800481c:	080048b3 	.word	0x080048b3
 8004820:	08004935 	.word	0x08004935
 8004824:	08004935 	.word	0x08004935
 8004828:	08004935 	.word	0x08004935
 800482c:	080048f3 	.word	0x080048f3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	68b9      	ldr	r1, [r7, #8]
 8004836:	4618      	mov	r0, r3
 8004838:	f000 fa12 	bl	8004c60 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	699a      	ldr	r2, [r3, #24]
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f042 0208 	orr.w	r2, r2, #8
 800484a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	699a      	ldr	r2, [r3, #24]
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f022 0204 	bic.w	r2, r2, #4
 800485a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	6999      	ldr	r1, [r3, #24]
 8004862:	68bb      	ldr	r3, [r7, #8]
 8004864:	691a      	ldr	r2, [r3, #16]
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	430a      	orrs	r2, r1
 800486c:	619a      	str	r2, [r3, #24]
      break;
 800486e:	e062      	b.n	8004936 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	68b9      	ldr	r1, [r7, #8]
 8004876:	4618      	mov	r0, r3
 8004878:	f000 fa62 	bl	8004d40 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	699a      	ldr	r2, [r3, #24]
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800488a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	699a      	ldr	r2, [r3, #24]
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800489a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	6999      	ldr	r1, [r3, #24]
 80048a2:	68bb      	ldr	r3, [r7, #8]
 80048a4:	691b      	ldr	r3, [r3, #16]
 80048a6:	021a      	lsls	r2, r3, #8
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	430a      	orrs	r2, r1
 80048ae:	619a      	str	r2, [r3, #24]
      break;
 80048b0:	e041      	b.n	8004936 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	68b9      	ldr	r1, [r7, #8]
 80048b8:	4618      	mov	r0, r3
 80048ba:	f000 fab7 	bl	8004e2c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	69da      	ldr	r2, [r3, #28]
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f042 0208 	orr.w	r2, r2, #8
 80048cc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	69da      	ldr	r2, [r3, #28]
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f022 0204 	bic.w	r2, r2, #4
 80048dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	69d9      	ldr	r1, [r3, #28]
 80048e4:	68bb      	ldr	r3, [r7, #8]
 80048e6:	691a      	ldr	r2, [r3, #16]
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	430a      	orrs	r2, r1
 80048ee:	61da      	str	r2, [r3, #28]
      break;
 80048f0:	e021      	b.n	8004936 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	68b9      	ldr	r1, [r7, #8]
 80048f8:	4618      	mov	r0, r3
 80048fa:	f000 fb0b 	bl	8004f14 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	69da      	ldr	r2, [r3, #28]
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800490c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	69da      	ldr	r2, [r3, #28]
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800491c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	69d9      	ldr	r1, [r3, #28]
 8004924:	68bb      	ldr	r3, [r7, #8]
 8004926:	691b      	ldr	r3, [r3, #16]
 8004928:	021a      	lsls	r2, r3, #8
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	430a      	orrs	r2, r1
 8004930:	61da      	str	r2, [r3, #28]
      break;
 8004932:	e000      	b.n	8004936 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8004934:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	2200      	movs	r2, #0
 800493a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800493e:	2300      	movs	r3, #0
}
 8004940:	4618      	mov	r0, r3
 8004942:	3710      	adds	r7, #16
 8004944:	46bd      	mov	sp, r7
 8004946:	bd80      	pop	{r7, pc}

08004948 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004948:	b580      	push	{r7, lr}
 800494a:	b084      	sub	sp, #16
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
 8004950:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004958:	2b01      	cmp	r3, #1
 800495a:	d101      	bne.n	8004960 <HAL_TIM_ConfigClockSource+0x18>
 800495c:	2302      	movs	r3, #2
 800495e:	e0b3      	b.n	8004ac8 <HAL_TIM_ConfigClockSource+0x180>
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2201      	movs	r2, #1
 8004964:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2202      	movs	r2, #2
 800496c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	689b      	ldr	r3, [r3, #8]
 8004976:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800497e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004986:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	68fa      	ldr	r2, [r7, #12]
 800498e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004990:	683b      	ldr	r3, [r7, #0]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004998:	d03e      	beq.n	8004a18 <HAL_TIM_ConfigClockSource+0xd0>
 800499a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800499e:	f200 8087 	bhi.w	8004ab0 <HAL_TIM_ConfigClockSource+0x168>
 80049a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049a6:	f000 8085 	beq.w	8004ab4 <HAL_TIM_ConfigClockSource+0x16c>
 80049aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049ae:	d87f      	bhi.n	8004ab0 <HAL_TIM_ConfigClockSource+0x168>
 80049b0:	2b70      	cmp	r3, #112	; 0x70
 80049b2:	d01a      	beq.n	80049ea <HAL_TIM_ConfigClockSource+0xa2>
 80049b4:	2b70      	cmp	r3, #112	; 0x70
 80049b6:	d87b      	bhi.n	8004ab0 <HAL_TIM_ConfigClockSource+0x168>
 80049b8:	2b60      	cmp	r3, #96	; 0x60
 80049ba:	d050      	beq.n	8004a5e <HAL_TIM_ConfigClockSource+0x116>
 80049bc:	2b60      	cmp	r3, #96	; 0x60
 80049be:	d877      	bhi.n	8004ab0 <HAL_TIM_ConfigClockSource+0x168>
 80049c0:	2b50      	cmp	r3, #80	; 0x50
 80049c2:	d03c      	beq.n	8004a3e <HAL_TIM_ConfigClockSource+0xf6>
 80049c4:	2b50      	cmp	r3, #80	; 0x50
 80049c6:	d873      	bhi.n	8004ab0 <HAL_TIM_ConfigClockSource+0x168>
 80049c8:	2b40      	cmp	r3, #64	; 0x40
 80049ca:	d058      	beq.n	8004a7e <HAL_TIM_ConfigClockSource+0x136>
 80049cc:	2b40      	cmp	r3, #64	; 0x40
 80049ce:	d86f      	bhi.n	8004ab0 <HAL_TIM_ConfigClockSource+0x168>
 80049d0:	2b30      	cmp	r3, #48	; 0x30
 80049d2:	d064      	beq.n	8004a9e <HAL_TIM_ConfigClockSource+0x156>
 80049d4:	2b30      	cmp	r3, #48	; 0x30
 80049d6:	d86b      	bhi.n	8004ab0 <HAL_TIM_ConfigClockSource+0x168>
 80049d8:	2b20      	cmp	r3, #32
 80049da:	d060      	beq.n	8004a9e <HAL_TIM_ConfigClockSource+0x156>
 80049dc:	2b20      	cmp	r3, #32
 80049de:	d867      	bhi.n	8004ab0 <HAL_TIM_ConfigClockSource+0x168>
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d05c      	beq.n	8004a9e <HAL_TIM_ConfigClockSource+0x156>
 80049e4:	2b10      	cmp	r3, #16
 80049e6:	d05a      	beq.n	8004a9e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80049e8:	e062      	b.n	8004ab0 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6818      	ldr	r0, [r3, #0]
 80049ee:	683b      	ldr	r3, [r7, #0]
 80049f0:	6899      	ldr	r1, [r3, #8]
 80049f2:	683b      	ldr	r3, [r7, #0]
 80049f4:	685a      	ldr	r2, [r3, #4]
 80049f6:	683b      	ldr	r3, [r7, #0]
 80049f8:	68db      	ldr	r3, [r3, #12]
 80049fa:	f000 fc85 	bl	8005308 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	689b      	ldr	r3, [r3, #8]
 8004a04:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004a0c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	68fa      	ldr	r2, [r7, #12]
 8004a14:	609a      	str	r2, [r3, #8]
      break;
 8004a16:	e04e      	b.n	8004ab6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	6818      	ldr	r0, [r3, #0]
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	6899      	ldr	r1, [r3, #8]
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	685a      	ldr	r2, [r3, #4]
 8004a24:	683b      	ldr	r3, [r7, #0]
 8004a26:	68db      	ldr	r3, [r3, #12]
 8004a28:	f000 fc6e 	bl	8005308 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	689a      	ldr	r2, [r3, #8]
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004a3a:	609a      	str	r2, [r3, #8]
      break;
 8004a3c:	e03b      	b.n	8004ab6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6818      	ldr	r0, [r3, #0]
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	6859      	ldr	r1, [r3, #4]
 8004a46:	683b      	ldr	r3, [r7, #0]
 8004a48:	68db      	ldr	r3, [r3, #12]
 8004a4a:	461a      	mov	r2, r3
 8004a4c:	f000 fb2c 	bl	80050a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	2150      	movs	r1, #80	; 0x50
 8004a56:	4618      	mov	r0, r3
 8004a58:	f000 fc3b 	bl	80052d2 <TIM_ITRx_SetConfig>
      break;
 8004a5c:	e02b      	b.n	8004ab6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6818      	ldr	r0, [r3, #0]
 8004a62:	683b      	ldr	r3, [r7, #0]
 8004a64:	6859      	ldr	r1, [r3, #4]
 8004a66:	683b      	ldr	r3, [r7, #0]
 8004a68:	68db      	ldr	r3, [r3, #12]
 8004a6a:	461a      	mov	r2, r3
 8004a6c:	f000 fb88 	bl	8005180 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	2160      	movs	r1, #96	; 0x60
 8004a76:	4618      	mov	r0, r3
 8004a78:	f000 fc2b 	bl	80052d2 <TIM_ITRx_SetConfig>
      break;
 8004a7c:	e01b      	b.n	8004ab6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6818      	ldr	r0, [r3, #0]
 8004a82:	683b      	ldr	r3, [r7, #0]
 8004a84:	6859      	ldr	r1, [r3, #4]
 8004a86:	683b      	ldr	r3, [r7, #0]
 8004a88:	68db      	ldr	r3, [r3, #12]
 8004a8a:	461a      	mov	r2, r3
 8004a8c:	f000 fb0c 	bl	80050a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	2140      	movs	r1, #64	; 0x40
 8004a96:	4618      	mov	r0, r3
 8004a98:	f000 fc1b 	bl	80052d2 <TIM_ITRx_SetConfig>
      break;
 8004a9c:	e00b      	b.n	8004ab6 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681a      	ldr	r2, [r3, #0]
 8004aa2:	683b      	ldr	r3, [r7, #0]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	4619      	mov	r1, r3
 8004aa8:	4610      	mov	r0, r2
 8004aaa:	f000 fc12 	bl	80052d2 <TIM_ITRx_SetConfig>
        break;
 8004aae:	e002      	b.n	8004ab6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004ab0:	bf00      	nop
 8004ab2:	e000      	b.n	8004ab6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004ab4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	2201      	movs	r2, #1
 8004aba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004ac6:	2300      	movs	r3, #0
}
 8004ac8:	4618      	mov	r0, r3
 8004aca:	3710      	adds	r7, #16
 8004acc:	46bd      	mov	sp, r7
 8004ace:	bd80      	pop	{r7, pc}

08004ad0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004ad0:	b480      	push	{r7}
 8004ad2:	b083      	sub	sp, #12
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004ad8:	bf00      	nop
 8004ada:	370c      	adds	r7, #12
 8004adc:	46bd      	mov	sp, r7
 8004ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae2:	4770      	bx	lr

08004ae4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004ae4:	b480      	push	{r7}
 8004ae6:	b083      	sub	sp, #12
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004aec:	bf00      	nop
 8004aee:	370c      	adds	r7, #12
 8004af0:	46bd      	mov	sp, r7
 8004af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af6:	4770      	bx	lr

08004af8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004af8:	b480      	push	{r7}
 8004afa:	b083      	sub	sp, #12
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004b00:	bf00      	nop
 8004b02:	370c      	adds	r7, #12
 8004b04:	46bd      	mov	sp, r7
 8004b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0a:	4770      	bx	lr

08004b0c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004b0c:	b480      	push	{r7}
 8004b0e:	b083      	sub	sp, #12
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004b14:	bf00      	nop
 8004b16:	370c      	adds	r7, #12
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1e:	4770      	bx	lr

08004b20 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004b20:	b480      	push	{r7}
 8004b22:	b085      	sub	sp, #20
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
 8004b28:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	4a40      	ldr	r2, [pc, #256]	; (8004c34 <TIM_Base_SetConfig+0x114>)
 8004b34:	4293      	cmp	r3, r2
 8004b36:	d013      	beq.n	8004b60 <TIM_Base_SetConfig+0x40>
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b3e:	d00f      	beq.n	8004b60 <TIM_Base_SetConfig+0x40>
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	4a3d      	ldr	r2, [pc, #244]	; (8004c38 <TIM_Base_SetConfig+0x118>)
 8004b44:	4293      	cmp	r3, r2
 8004b46:	d00b      	beq.n	8004b60 <TIM_Base_SetConfig+0x40>
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	4a3c      	ldr	r2, [pc, #240]	; (8004c3c <TIM_Base_SetConfig+0x11c>)
 8004b4c:	4293      	cmp	r3, r2
 8004b4e:	d007      	beq.n	8004b60 <TIM_Base_SetConfig+0x40>
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	4a3b      	ldr	r2, [pc, #236]	; (8004c40 <TIM_Base_SetConfig+0x120>)
 8004b54:	4293      	cmp	r3, r2
 8004b56:	d003      	beq.n	8004b60 <TIM_Base_SetConfig+0x40>
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	4a3a      	ldr	r2, [pc, #232]	; (8004c44 <TIM_Base_SetConfig+0x124>)
 8004b5c:	4293      	cmp	r3, r2
 8004b5e:	d108      	bne.n	8004b72 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b66:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004b68:	683b      	ldr	r3, [r7, #0]
 8004b6a:	685b      	ldr	r3, [r3, #4]
 8004b6c:	68fa      	ldr	r2, [r7, #12]
 8004b6e:	4313      	orrs	r3, r2
 8004b70:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	4a2f      	ldr	r2, [pc, #188]	; (8004c34 <TIM_Base_SetConfig+0x114>)
 8004b76:	4293      	cmp	r3, r2
 8004b78:	d02b      	beq.n	8004bd2 <TIM_Base_SetConfig+0xb2>
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b80:	d027      	beq.n	8004bd2 <TIM_Base_SetConfig+0xb2>
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	4a2c      	ldr	r2, [pc, #176]	; (8004c38 <TIM_Base_SetConfig+0x118>)
 8004b86:	4293      	cmp	r3, r2
 8004b88:	d023      	beq.n	8004bd2 <TIM_Base_SetConfig+0xb2>
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	4a2b      	ldr	r2, [pc, #172]	; (8004c3c <TIM_Base_SetConfig+0x11c>)
 8004b8e:	4293      	cmp	r3, r2
 8004b90:	d01f      	beq.n	8004bd2 <TIM_Base_SetConfig+0xb2>
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	4a2a      	ldr	r2, [pc, #168]	; (8004c40 <TIM_Base_SetConfig+0x120>)
 8004b96:	4293      	cmp	r3, r2
 8004b98:	d01b      	beq.n	8004bd2 <TIM_Base_SetConfig+0xb2>
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	4a29      	ldr	r2, [pc, #164]	; (8004c44 <TIM_Base_SetConfig+0x124>)
 8004b9e:	4293      	cmp	r3, r2
 8004ba0:	d017      	beq.n	8004bd2 <TIM_Base_SetConfig+0xb2>
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	4a28      	ldr	r2, [pc, #160]	; (8004c48 <TIM_Base_SetConfig+0x128>)
 8004ba6:	4293      	cmp	r3, r2
 8004ba8:	d013      	beq.n	8004bd2 <TIM_Base_SetConfig+0xb2>
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	4a27      	ldr	r2, [pc, #156]	; (8004c4c <TIM_Base_SetConfig+0x12c>)
 8004bae:	4293      	cmp	r3, r2
 8004bb0:	d00f      	beq.n	8004bd2 <TIM_Base_SetConfig+0xb2>
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	4a26      	ldr	r2, [pc, #152]	; (8004c50 <TIM_Base_SetConfig+0x130>)
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	d00b      	beq.n	8004bd2 <TIM_Base_SetConfig+0xb2>
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	4a25      	ldr	r2, [pc, #148]	; (8004c54 <TIM_Base_SetConfig+0x134>)
 8004bbe:	4293      	cmp	r3, r2
 8004bc0:	d007      	beq.n	8004bd2 <TIM_Base_SetConfig+0xb2>
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	4a24      	ldr	r2, [pc, #144]	; (8004c58 <TIM_Base_SetConfig+0x138>)
 8004bc6:	4293      	cmp	r3, r2
 8004bc8:	d003      	beq.n	8004bd2 <TIM_Base_SetConfig+0xb2>
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	4a23      	ldr	r2, [pc, #140]	; (8004c5c <TIM_Base_SetConfig+0x13c>)
 8004bce:	4293      	cmp	r3, r2
 8004bd0:	d108      	bne.n	8004be4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004bd8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004bda:	683b      	ldr	r3, [r7, #0]
 8004bdc:	68db      	ldr	r3, [r3, #12]
 8004bde:	68fa      	ldr	r2, [r7, #12]
 8004be0:	4313      	orrs	r3, r2
 8004be2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	695b      	ldr	r3, [r3, #20]
 8004bee:	4313      	orrs	r3, r2
 8004bf0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	68fa      	ldr	r2, [r7, #12]
 8004bf6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004bf8:	683b      	ldr	r3, [r7, #0]
 8004bfa:	689a      	ldr	r2, [r3, #8]
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004c00:	683b      	ldr	r3, [r7, #0]
 8004c02:	681a      	ldr	r2, [r3, #0]
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	4a0a      	ldr	r2, [pc, #40]	; (8004c34 <TIM_Base_SetConfig+0x114>)
 8004c0c:	4293      	cmp	r3, r2
 8004c0e:	d003      	beq.n	8004c18 <TIM_Base_SetConfig+0xf8>
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	4a0c      	ldr	r2, [pc, #48]	; (8004c44 <TIM_Base_SetConfig+0x124>)
 8004c14:	4293      	cmp	r3, r2
 8004c16:	d103      	bne.n	8004c20 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004c18:	683b      	ldr	r3, [r7, #0]
 8004c1a:	691a      	ldr	r2, [r3, #16]
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2201      	movs	r2, #1
 8004c24:	615a      	str	r2, [r3, #20]
}
 8004c26:	bf00      	nop
 8004c28:	3714      	adds	r7, #20
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c30:	4770      	bx	lr
 8004c32:	bf00      	nop
 8004c34:	40010000 	.word	0x40010000
 8004c38:	40000400 	.word	0x40000400
 8004c3c:	40000800 	.word	0x40000800
 8004c40:	40000c00 	.word	0x40000c00
 8004c44:	40010400 	.word	0x40010400
 8004c48:	40014000 	.word	0x40014000
 8004c4c:	40014400 	.word	0x40014400
 8004c50:	40014800 	.word	0x40014800
 8004c54:	40001800 	.word	0x40001800
 8004c58:	40001c00 	.word	0x40001c00
 8004c5c:	40002000 	.word	0x40002000

08004c60 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004c60:	b480      	push	{r7}
 8004c62:	b087      	sub	sp, #28
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]
 8004c68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	6a1b      	ldr	r3, [r3, #32]
 8004c6e:	f023 0201 	bic.w	r2, r3, #1
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6a1b      	ldr	r3, [r3, #32]
 8004c7a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	685b      	ldr	r3, [r3, #4]
 8004c80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	699b      	ldr	r3, [r3, #24]
 8004c86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	f023 0303 	bic.w	r3, r3, #3
 8004c96:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004c98:	683b      	ldr	r3, [r7, #0]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	68fa      	ldr	r2, [r7, #12]
 8004c9e:	4313      	orrs	r3, r2
 8004ca0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004ca2:	697b      	ldr	r3, [r7, #20]
 8004ca4:	f023 0302 	bic.w	r3, r3, #2
 8004ca8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004caa:	683b      	ldr	r3, [r7, #0]
 8004cac:	689b      	ldr	r3, [r3, #8]
 8004cae:	697a      	ldr	r2, [r7, #20]
 8004cb0:	4313      	orrs	r3, r2
 8004cb2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	4a20      	ldr	r2, [pc, #128]	; (8004d38 <TIM_OC1_SetConfig+0xd8>)
 8004cb8:	4293      	cmp	r3, r2
 8004cba:	d003      	beq.n	8004cc4 <TIM_OC1_SetConfig+0x64>
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	4a1f      	ldr	r2, [pc, #124]	; (8004d3c <TIM_OC1_SetConfig+0xdc>)
 8004cc0:	4293      	cmp	r3, r2
 8004cc2:	d10c      	bne.n	8004cde <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004cc4:	697b      	ldr	r3, [r7, #20]
 8004cc6:	f023 0308 	bic.w	r3, r3, #8
 8004cca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	68db      	ldr	r3, [r3, #12]
 8004cd0:	697a      	ldr	r2, [r7, #20]
 8004cd2:	4313      	orrs	r3, r2
 8004cd4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004cd6:	697b      	ldr	r3, [r7, #20]
 8004cd8:	f023 0304 	bic.w	r3, r3, #4
 8004cdc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	4a15      	ldr	r2, [pc, #84]	; (8004d38 <TIM_OC1_SetConfig+0xd8>)
 8004ce2:	4293      	cmp	r3, r2
 8004ce4:	d003      	beq.n	8004cee <TIM_OC1_SetConfig+0x8e>
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	4a14      	ldr	r2, [pc, #80]	; (8004d3c <TIM_OC1_SetConfig+0xdc>)
 8004cea:	4293      	cmp	r3, r2
 8004cec:	d111      	bne.n	8004d12 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004cee:	693b      	ldr	r3, [r7, #16]
 8004cf0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004cf4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004cf6:	693b      	ldr	r3, [r7, #16]
 8004cf8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004cfc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004cfe:	683b      	ldr	r3, [r7, #0]
 8004d00:	695b      	ldr	r3, [r3, #20]
 8004d02:	693a      	ldr	r2, [r7, #16]
 8004d04:	4313      	orrs	r3, r2
 8004d06:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	699b      	ldr	r3, [r3, #24]
 8004d0c:	693a      	ldr	r2, [r7, #16]
 8004d0e:	4313      	orrs	r3, r2
 8004d10:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	693a      	ldr	r2, [r7, #16]
 8004d16:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	68fa      	ldr	r2, [r7, #12]
 8004d1c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004d1e:	683b      	ldr	r3, [r7, #0]
 8004d20:	685a      	ldr	r2, [r3, #4]
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	697a      	ldr	r2, [r7, #20]
 8004d2a:	621a      	str	r2, [r3, #32]
}
 8004d2c:	bf00      	nop
 8004d2e:	371c      	adds	r7, #28
 8004d30:	46bd      	mov	sp, r7
 8004d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d36:	4770      	bx	lr
 8004d38:	40010000 	.word	0x40010000
 8004d3c:	40010400 	.word	0x40010400

08004d40 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004d40:	b480      	push	{r7}
 8004d42:	b087      	sub	sp, #28
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	6078      	str	r0, [r7, #4]
 8004d48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6a1b      	ldr	r3, [r3, #32]
 8004d4e:	f023 0210 	bic.w	r2, r3, #16
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	6a1b      	ldr	r3, [r3, #32]
 8004d5a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	685b      	ldr	r3, [r3, #4]
 8004d60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	699b      	ldr	r3, [r3, #24]
 8004d66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d76:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004d78:	683b      	ldr	r3, [r7, #0]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	021b      	lsls	r3, r3, #8
 8004d7e:	68fa      	ldr	r2, [r7, #12]
 8004d80:	4313      	orrs	r3, r2
 8004d82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004d84:	697b      	ldr	r3, [r7, #20]
 8004d86:	f023 0320 	bic.w	r3, r3, #32
 8004d8a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	689b      	ldr	r3, [r3, #8]
 8004d90:	011b      	lsls	r3, r3, #4
 8004d92:	697a      	ldr	r2, [r7, #20]
 8004d94:	4313      	orrs	r3, r2
 8004d96:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	4a22      	ldr	r2, [pc, #136]	; (8004e24 <TIM_OC2_SetConfig+0xe4>)
 8004d9c:	4293      	cmp	r3, r2
 8004d9e:	d003      	beq.n	8004da8 <TIM_OC2_SetConfig+0x68>
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	4a21      	ldr	r2, [pc, #132]	; (8004e28 <TIM_OC2_SetConfig+0xe8>)
 8004da4:	4293      	cmp	r3, r2
 8004da6:	d10d      	bne.n	8004dc4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004da8:	697b      	ldr	r3, [r7, #20]
 8004daa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004dae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004db0:	683b      	ldr	r3, [r7, #0]
 8004db2:	68db      	ldr	r3, [r3, #12]
 8004db4:	011b      	lsls	r3, r3, #4
 8004db6:	697a      	ldr	r2, [r7, #20]
 8004db8:	4313      	orrs	r3, r2
 8004dba:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004dbc:	697b      	ldr	r3, [r7, #20]
 8004dbe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004dc2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	4a17      	ldr	r2, [pc, #92]	; (8004e24 <TIM_OC2_SetConfig+0xe4>)
 8004dc8:	4293      	cmp	r3, r2
 8004dca:	d003      	beq.n	8004dd4 <TIM_OC2_SetConfig+0x94>
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	4a16      	ldr	r2, [pc, #88]	; (8004e28 <TIM_OC2_SetConfig+0xe8>)
 8004dd0:	4293      	cmp	r3, r2
 8004dd2:	d113      	bne.n	8004dfc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004dd4:	693b      	ldr	r3, [r7, #16]
 8004dd6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004dda:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004ddc:	693b      	ldr	r3, [r7, #16]
 8004dde:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004de2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	695b      	ldr	r3, [r3, #20]
 8004de8:	009b      	lsls	r3, r3, #2
 8004dea:	693a      	ldr	r2, [r7, #16]
 8004dec:	4313      	orrs	r3, r2
 8004dee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	699b      	ldr	r3, [r3, #24]
 8004df4:	009b      	lsls	r3, r3, #2
 8004df6:	693a      	ldr	r2, [r7, #16]
 8004df8:	4313      	orrs	r3, r2
 8004dfa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	693a      	ldr	r2, [r7, #16]
 8004e00:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	68fa      	ldr	r2, [r7, #12]
 8004e06:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004e08:	683b      	ldr	r3, [r7, #0]
 8004e0a:	685a      	ldr	r2, [r3, #4]
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	697a      	ldr	r2, [r7, #20]
 8004e14:	621a      	str	r2, [r3, #32]
}
 8004e16:	bf00      	nop
 8004e18:	371c      	adds	r7, #28
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e20:	4770      	bx	lr
 8004e22:	bf00      	nop
 8004e24:	40010000 	.word	0x40010000
 8004e28:	40010400 	.word	0x40010400

08004e2c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004e2c:	b480      	push	{r7}
 8004e2e:	b087      	sub	sp, #28
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	6078      	str	r0, [r7, #4]
 8004e34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	6a1b      	ldr	r3, [r3, #32]
 8004e3a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6a1b      	ldr	r3, [r3, #32]
 8004e46:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	685b      	ldr	r3, [r3, #4]
 8004e4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	69db      	ldr	r3, [r3, #28]
 8004e52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	f023 0303 	bic.w	r3, r3, #3
 8004e62:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004e64:	683b      	ldr	r3, [r7, #0]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	68fa      	ldr	r2, [r7, #12]
 8004e6a:	4313      	orrs	r3, r2
 8004e6c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004e6e:	697b      	ldr	r3, [r7, #20]
 8004e70:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004e74:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004e76:	683b      	ldr	r3, [r7, #0]
 8004e78:	689b      	ldr	r3, [r3, #8]
 8004e7a:	021b      	lsls	r3, r3, #8
 8004e7c:	697a      	ldr	r2, [r7, #20]
 8004e7e:	4313      	orrs	r3, r2
 8004e80:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	4a21      	ldr	r2, [pc, #132]	; (8004f0c <TIM_OC3_SetConfig+0xe0>)
 8004e86:	4293      	cmp	r3, r2
 8004e88:	d003      	beq.n	8004e92 <TIM_OC3_SetConfig+0x66>
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	4a20      	ldr	r2, [pc, #128]	; (8004f10 <TIM_OC3_SetConfig+0xe4>)
 8004e8e:	4293      	cmp	r3, r2
 8004e90:	d10d      	bne.n	8004eae <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004e92:	697b      	ldr	r3, [r7, #20]
 8004e94:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004e98:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004e9a:	683b      	ldr	r3, [r7, #0]
 8004e9c:	68db      	ldr	r3, [r3, #12]
 8004e9e:	021b      	lsls	r3, r3, #8
 8004ea0:	697a      	ldr	r2, [r7, #20]
 8004ea2:	4313      	orrs	r3, r2
 8004ea4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004ea6:	697b      	ldr	r3, [r7, #20]
 8004ea8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004eac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	4a16      	ldr	r2, [pc, #88]	; (8004f0c <TIM_OC3_SetConfig+0xe0>)
 8004eb2:	4293      	cmp	r3, r2
 8004eb4:	d003      	beq.n	8004ebe <TIM_OC3_SetConfig+0x92>
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	4a15      	ldr	r2, [pc, #84]	; (8004f10 <TIM_OC3_SetConfig+0xe4>)
 8004eba:	4293      	cmp	r3, r2
 8004ebc:	d113      	bne.n	8004ee6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004ebe:	693b      	ldr	r3, [r7, #16]
 8004ec0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004ec4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004ec6:	693b      	ldr	r3, [r7, #16]
 8004ec8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004ecc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004ece:	683b      	ldr	r3, [r7, #0]
 8004ed0:	695b      	ldr	r3, [r3, #20]
 8004ed2:	011b      	lsls	r3, r3, #4
 8004ed4:	693a      	ldr	r2, [r7, #16]
 8004ed6:	4313      	orrs	r3, r2
 8004ed8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004eda:	683b      	ldr	r3, [r7, #0]
 8004edc:	699b      	ldr	r3, [r3, #24]
 8004ede:	011b      	lsls	r3, r3, #4
 8004ee0:	693a      	ldr	r2, [r7, #16]
 8004ee2:	4313      	orrs	r3, r2
 8004ee4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	693a      	ldr	r2, [r7, #16]
 8004eea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	68fa      	ldr	r2, [r7, #12]
 8004ef0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004ef2:	683b      	ldr	r3, [r7, #0]
 8004ef4:	685a      	ldr	r2, [r3, #4]
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	697a      	ldr	r2, [r7, #20]
 8004efe:	621a      	str	r2, [r3, #32]
}
 8004f00:	bf00      	nop
 8004f02:	371c      	adds	r7, #28
 8004f04:	46bd      	mov	sp, r7
 8004f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0a:	4770      	bx	lr
 8004f0c:	40010000 	.word	0x40010000
 8004f10:	40010400 	.word	0x40010400

08004f14 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004f14:	b480      	push	{r7}
 8004f16:	b087      	sub	sp, #28
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
 8004f1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6a1b      	ldr	r3, [r3, #32]
 8004f22:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6a1b      	ldr	r3, [r3, #32]
 8004f2e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	685b      	ldr	r3, [r3, #4]
 8004f34:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	69db      	ldr	r3, [r3, #28]
 8004f3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f4a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004f4c:	683b      	ldr	r3, [r7, #0]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	021b      	lsls	r3, r3, #8
 8004f52:	68fa      	ldr	r2, [r7, #12]
 8004f54:	4313      	orrs	r3, r2
 8004f56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004f58:	693b      	ldr	r3, [r7, #16]
 8004f5a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004f5e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004f60:	683b      	ldr	r3, [r7, #0]
 8004f62:	689b      	ldr	r3, [r3, #8]
 8004f64:	031b      	lsls	r3, r3, #12
 8004f66:	693a      	ldr	r2, [r7, #16]
 8004f68:	4313      	orrs	r3, r2
 8004f6a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	4a12      	ldr	r2, [pc, #72]	; (8004fb8 <TIM_OC4_SetConfig+0xa4>)
 8004f70:	4293      	cmp	r3, r2
 8004f72:	d003      	beq.n	8004f7c <TIM_OC4_SetConfig+0x68>
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	4a11      	ldr	r2, [pc, #68]	; (8004fbc <TIM_OC4_SetConfig+0xa8>)
 8004f78:	4293      	cmp	r3, r2
 8004f7a:	d109      	bne.n	8004f90 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004f7c:	697b      	ldr	r3, [r7, #20]
 8004f7e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004f82:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004f84:	683b      	ldr	r3, [r7, #0]
 8004f86:	695b      	ldr	r3, [r3, #20]
 8004f88:	019b      	lsls	r3, r3, #6
 8004f8a:	697a      	ldr	r2, [r7, #20]
 8004f8c:	4313      	orrs	r3, r2
 8004f8e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	697a      	ldr	r2, [r7, #20]
 8004f94:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	68fa      	ldr	r2, [r7, #12]
 8004f9a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	685a      	ldr	r2, [r3, #4]
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	693a      	ldr	r2, [r7, #16]
 8004fa8:	621a      	str	r2, [r3, #32]
}
 8004faa:	bf00      	nop
 8004fac:	371c      	adds	r7, #28
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb4:	4770      	bx	lr
 8004fb6:	bf00      	nop
 8004fb8:	40010000 	.word	0x40010000
 8004fbc:	40010400 	.word	0x40010400

08004fc0 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004fc0:	b480      	push	{r7}
 8004fc2:	b087      	sub	sp, #28
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	60f8      	str	r0, [r7, #12]
 8004fc8:	60b9      	str	r1, [r7, #8]
 8004fca:	607a      	str	r2, [r7, #4]
 8004fcc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	6a1b      	ldr	r3, [r3, #32]
 8004fd2:	f023 0201 	bic.w	r2, r3, #1
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	699b      	ldr	r3, [r3, #24]
 8004fde:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	6a1b      	ldr	r3, [r3, #32]
 8004fe4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	4a28      	ldr	r2, [pc, #160]	; (800508c <TIM_TI1_SetConfig+0xcc>)
 8004fea:	4293      	cmp	r3, r2
 8004fec:	d01b      	beq.n	8005026 <TIM_TI1_SetConfig+0x66>
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ff4:	d017      	beq.n	8005026 <TIM_TI1_SetConfig+0x66>
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	4a25      	ldr	r2, [pc, #148]	; (8005090 <TIM_TI1_SetConfig+0xd0>)
 8004ffa:	4293      	cmp	r3, r2
 8004ffc:	d013      	beq.n	8005026 <TIM_TI1_SetConfig+0x66>
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	4a24      	ldr	r2, [pc, #144]	; (8005094 <TIM_TI1_SetConfig+0xd4>)
 8005002:	4293      	cmp	r3, r2
 8005004:	d00f      	beq.n	8005026 <TIM_TI1_SetConfig+0x66>
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	4a23      	ldr	r2, [pc, #140]	; (8005098 <TIM_TI1_SetConfig+0xd8>)
 800500a:	4293      	cmp	r3, r2
 800500c:	d00b      	beq.n	8005026 <TIM_TI1_SetConfig+0x66>
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	4a22      	ldr	r2, [pc, #136]	; (800509c <TIM_TI1_SetConfig+0xdc>)
 8005012:	4293      	cmp	r3, r2
 8005014:	d007      	beq.n	8005026 <TIM_TI1_SetConfig+0x66>
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	4a21      	ldr	r2, [pc, #132]	; (80050a0 <TIM_TI1_SetConfig+0xe0>)
 800501a:	4293      	cmp	r3, r2
 800501c:	d003      	beq.n	8005026 <TIM_TI1_SetConfig+0x66>
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	4a20      	ldr	r2, [pc, #128]	; (80050a4 <TIM_TI1_SetConfig+0xe4>)
 8005022:	4293      	cmp	r3, r2
 8005024:	d101      	bne.n	800502a <TIM_TI1_SetConfig+0x6a>
 8005026:	2301      	movs	r3, #1
 8005028:	e000      	b.n	800502c <TIM_TI1_SetConfig+0x6c>
 800502a:	2300      	movs	r3, #0
 800502c:	2b00      	cmp	r3, #0
 800502e:	d008      	beq.n	8005042 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005030:	697b      	ldr	r3, [r7, #20]
 8005032:	f023 0303 	bic.w	r3, r3, #3
 8005036:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005038:	697a      	ldr	r2, [r7, #20]
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	4313      	orrs	r3, r2
 800503e:	617b      	str	r3, [r7, #20]
 8005040:	e003      	b.n	800504a <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8005042:	697b      	ldr	r3, [r7, #20]
 8005044:	f043 0301 	orr.w	r3, r3, #1
 8005048:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800504a:	697b      	ldr	r3, [r7, #20]
 800504c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005050:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8005052:	683b      	ldr	r3, [r7, #0]
 8005054:	011b      	lsls	r3, r3, #4
 8005056:	b2db      	uxtb	r3, r3
 8005058:	697a      	ldr	r2, [r7, #20]
 800505a:	4313      	orrs	r3, r2
 800505c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800505e:	693b      	ldr	r3, [r7, #16]
 8005060:	f023 030a 	bic.w	r3, r3, #10
 8005064:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8005066:	68bb      	ldr	r3, [r7, #8]
 8005068:	f003 030a 	and.w	r3, r3, #10
 800506c:	693a      	ldr	r2, [r7, #16]
 800506e:	4313      	orrs	r3, r2
 8005070:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	697a      	ldr	r2, [r7, #20]
 8005076:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	693a      	ldr	r2, [r7, #16]
 800507c:	621a      	str	r2, [r3, #32]
}
 800507e:	bf00      	nop
 8005080:	371c      	adds	r7, #28
 8005082:	46bd      	mov	sp, r7
 8005084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005088:	4770      	bx	lr
 800508a:	bf00      	nop
 800508c:	40010000 	.word	0x40010000
 8005090:	40000400 	.word	0x40000400
 8005094:	40000800 	.word	0x40000800
 8005098:	40000c00 	.word	0x40000c00
 800509c:	40010400 	.word	0x40010400
 80050a0:	40014000 	.word	0x40014000
 80050a4:	40001800 	.word	0x40001800

080050a8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80050a8:	b480      	push	{r7}
 80050aa:	b087      	sub	sp, #28
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	60f8      	str	r0, [r7, #12]
 80050b0:	60b9      	str	r1, [r7, #8]
 80050b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	6a1b      	ldr	r3, [r3, #32]
 80050b8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	6a1b      	ldr	r3, [r3, #32]
 80050be:	f023 0201 	bic.w	r2, r3, #1
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	699b      	ldr	r3, [r3, #24]
 80050ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80050cc:	693b      	ldr	r3, [r7, #16]
 80050ce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80050d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	011b      	lsls	r3, r3, #4
 80050d8:	693a      	ldr	r2, [r7, #16]
 80050da:	4313      	orrs	r3, r2
 80050dc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80050de:	697b      	ldr	r3, [r7, #20]
 80050e0:	f023 030a 	bic.w	r3, r3, #10
 80050e4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80050e6:	697a      	ldr	r2, [r7, #20]
 80050e8:	68bb      	ldr	r3, [r7, #8]
 80050ea:	4313      	orrs	r3, r2
 80050ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	693a      	ldr	r2, [r7, #16]
 80050f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	697a      	ldr	r2, [r7, #20]
 80050f8:	621a      	str	r2, [r3, #32]
}
 80050fa:	bf00      	nop
 80050fc:	371c      	adds	r7, #28
 80050fe:	46bd      	mov	sp, r7
 8005100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005104:	4770      	bx	lr

08005106 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005106:	b480      	push	{r7}
 8005108:	b087      	sub	sp, #28
 800510a:	af00      	add	r7, sp, #0
 800510c:	60f8      	str	r0, [r7, #12]
 800510e:	60b9      	str	r1, [r7, #8]
 8005110:	607a      	str	r2, [r7, #4]
 8005112:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	6a1b      	ldr	r3, [r3, #32]
 8005118:	f023 0210 	bic.w	r2, r3, #16
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	699b      	ldr	r3, [r3, #24]
 8005124:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	6a1b      	ldr	r3, [r3, #32]
 800512a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800512c:	697b      	ldr	r3, [r7, #20]
 800512e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005132:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	021b      	lsls	r3, r3, #8
 8005138:	697a      	ldr	r2, [r7, #20]
 800513a:	4313      	orrs	r3, r2
 800513c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800513e:	697b      	ldr	r3, [r7, #20]
 8005140:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005144:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8005146:	683b      	ldr	r3, [r7, #0]
 8005148:	031b      	lsls	r3, r3, #12
 800514a:	b29b      	uxth	r3, r3
 800514c:	697a      	ldr	r2, [r7, #20]
 800514e:	4313      	orrs	r3, r2
 8005150:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005152:	693b      	ldr	r3, [r7, #16]
 8005154:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005158:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800515a:	68bb      	ldr	r3, [r7, #8]
 800515c:	011b      	lsls	r3, r3, #4
 800515e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8005162:	693a      	ldr	r2, [r7, #16]
 8005164:	4313      	orrs	r3, r2
 8005166:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	697a      	ldr	r2, [r7, #20]
 800516c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	693a      	ldr	r2, [r7, #16]
 8005172:	621a      	str	r2, [r3, #32]
}
 8005174:	bf00      	nop
 8005176:	371c      	adds	r7, #28
 8005178:	46bd      	mov	sp, r7
 800517a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517e:	4770      	bx	lr

08005180 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005180:	b480      	push	{r7}
 8005182:	b087      	sub	sp, #28
 8005184:	af00      	add	r7, sp, #0
 8005186:	60f8      	str	r0, [r7, #12]
 8005188:	60b9      	str	r1, [r7, #8]
 800518a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	6a1b      	ldr	r3, [r3, #32]
 8005190:	f023 0210 	bic.w	r2, r3, #16
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	699b      	ldr	r3, [r3, #24]
 800519c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	6a1b      	ldr	r3, [r3, #32]
 80051a2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80051a4:	697b      	ldr	r3, [r7, #20]
 80051a6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80051aa:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	031b      	lsls	r3, r3, #12
 80051b0:	697a      	ldr	r2, [r7, #20]
 80051b2:	4313      	orrs	r3, r2
 80051b4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80051b6:	693b      	ldr	r3, [r7, #16]
 80051b8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80051bc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80051be:	68bb      	ldr	r3, [r7, #8]
 80051c0:	011b      	lsls	r3, r3, #4
 80051c2:	693a      	ldr	r2, [r7, #16]
 80051c4:	4313      	orrs	r3, r2
 80051c6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	697a      	ldr	r2, [r7, #20]
 80051cc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	693a      	ldr	r2, [r7, #16]
 80051d2:	621a      	str	r2, [r3, #32]
}
 80051d4:	bf00      	nop
 80051d6:	371c      	adds	r7, #28
 80051d8:	46bd      	mov	sp, r7
 80051da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051de:	4770      	bx	lr

080051e0 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80051e0:	b480      	push	{r7}
 80051e2:	b087      	sub	sp, #28
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	60f8      	str	r0, [r7, #12]
 80051e8:	60b9      	str	r1, [r7, #8]
 80051ea:	607a      	str	r2, [r7, #4]
 80051ec:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	6a1b      	ldr	r3, [r3, #32]
 80051f2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	69db      	ldr	r3, [r3, #28]
 80051fe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	6a1b      	ldr	r3, [r3, #32]
 8005204:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8005206:	697b      	ldr	r3, [r7, #20]
 8005208:	f023 0303 	bic.w	r3, r3, #3
 800520c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800520e:	697a      	ldr	r2, [r7, #20]
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	4313      	orrs	r3, r2
 8005214:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8005216:	697b      	ldr	r3, [r7, #20]
 8005218:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800521c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800521e:	683b      	ldr	r3, [r7, #0]
 8005220:	011b      	lsls	r3, r3, #4
 8005222:	b2db      	uxtb	r3, r3
 8005224:	697a      	ldr	r2, [r7, #20]
 8005226:	4313      	orrs	r3, r2
 8005228:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800522a:	693b      	ldr	r3, [r7, #16]
 800522c:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8005230:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8005232:	68bb      	ldr	r3, [r7, #8]
 8005234:	021b      	lsls	r3, r3, #8
 8005236:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800523a:	693a      	ldr	r2, [r7, #16]
 800523c:	4313      	orrs	r3, r2
 800523e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	697a      	ldr	r2, [r7, #20]
 8005244:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	693a      	ldr	r2, [r7, #16]
 800524a:	621a      	str	r2, [r3, #32]
}
 800524c:	bf00      	nop
 800524e:	371c      	adds	r7, #28
 8005250:	46bd      	mov	sp, r7
 8005252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005256:	4770      	bx	lr

08005258 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005258:	b480      	push	{r7}
 800525a:	b087      	sub	sp, #28
 800525c:	af00      	add	r7, sp, #0
 800525e:	60f8      	str	r0, [r7, #12]
 8005260:	60b9      	str	r1, [r7, #8]
 8005262:	607a      	str	r2, [r7, #4]
 8005264:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	6a1b      	ldr	r3, [r3, #32]
 800526a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	69db      	ldr	r3, [r3, #28]
 8005276:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	6a1b      	ldr	r3, [r3, #32]
 800527c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800527e:	697b      	ldr	r3, [r7, #20]
 8005280:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005284:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	021b      	lsls	r3, r3, #8
 800528a:	697a      	ldr	r2, [r7, #20]
 800528c:	4313      	orrs	r3, r2
 800528e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8005290:	697b      	ldr	r3, [r7, #20]
 8005292:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005296:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	031b      	lsls	r3, r3, #12
 800529c:	b29b      	uxth	r3, r3
 800529e:	697a      	ldr	r2, [r7, #20]
 80052a0:	4313      	orrs	r3, r2
 80052a2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80052a4:	693b      	ldr	r3, [r7, #16]
 80052a6:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80052aa:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80052ac:	68bb      	ldr	r3, [r7, #8]
 80052ae:	031b      	lsls	r3, r3, #12
 80052b0:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80052b4:	693a      	ldr	r2, [r7, #16]
 80052b6:	4313      	orrs	r3, r2
 80052b8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	697a      	ldr	r2, [r7, #20]
 80052be:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	693a      	ldr	r2, [r7, #16]
 80052c4:	621a      	str	r2, [r3, #32]
}
 80052c6:	bf00      	nop
 80052c8:	371c      	adds	r7, #28
 80052ca:	46bd      	mov	sp, r7
 80052cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d0:	4770      	bx	lr

080052d2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80052d2:	b480      	push	{r7}
 80052d4:	b085      	sub	sp, #20
 80052d6:	af00      	add	r7, sp, #0
 80052d8:	6078      	str	r0, [r7, #4]
 80052da:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	689b      	ldr	r3, [r3, #8]
 80052e0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052e8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80052ea:	683a      	ldr	r2, [r7, #0]
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	4313      	orrs	r3, r2
 80052f0:	f043 0307 	orr.w	r3, r3, #7
 80052f4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	68fa      	ldr	r2, [r7, #12]
 80052fa:	609a      	str	r2, [r3, #8]
}
 80052fc:	bf00      	nop
 80052fe:	3714      	adds	r7, #20
 8005300:	46bd      	mov	sp, r7
 8005302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005306:	4770      	bx	lr

08005308 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005308:	b480      	push	{r7}
 800530a:	b087      	sub	sp, #28
 800530c:	af00      	add	r7, sp, #0
 800530e:	60f8      	str	r0, [r7, #12]
 8005310:	60b9      	str	r1, [r7, #8]
 8005312:	607a      	str	r2, [r7, #4]
 8005314:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	689b      	ldr	r3, [r3, #8]
 800531a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800531c:	697b      	ldr	r3, [r7, #20]
 800531e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005322:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005324:	683b      	ldr	r3, [r7, #0]
 8005326:	021a      	lsls	r2, r3, #8
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	431a      	orrs	r2, r3
 800532c:	68bb      	ldr	r3, [r7, #8]
 800532e:	4313      	orrs	r3, r2
 8005330:	697a      	ldr	r2, [r7, #20]
 8005332:	4313      	orrs	r3, r2
 8005334:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	697a      	ldr	r2, [r7, #20]
 800533a:	609a      	str	r2, [r3, #8]
}
 800533c:	bf00      	nop
 800533e:	371c      	adds	r7, #28
 8005340:	46bd      	mov	sp, r7
 8005342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005346:	4770      	bx	lr

08005348 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005348:	b480      	push	{r7}
 800534a:	b085      	sub	sp, #20
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
 8005350:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005358:	2b01      	cmp	r3, #1
 800535a:	d101      	bne.n	8005360 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800535c:	2302      	movs	r3, #2
 800535e:	e05a      	b.n	8005416 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2201      	movs	r2, #1
 8005364:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2202      	movs	r2, #2
 800536c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	685b      	ldr	r3, [r3, #4]
 8005376:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	689b      	ldr	r3, [r3, #8]
 800537e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005386:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005388:	683b      	ldr	r3, [r7, #0]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	68fa      	ldr	r2, [r7, #12]
 800538e:	4313      	orrs	r3, r2
 8005390:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	68fa      	ldr	r2, [r7, #12]
 8005398:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	4a21      	ldr	r2, [pc, #132]	; (8005424 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80053a0:	4293      	cmp	r3, r2
 80053a2:	d022      	beq.n	80053ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053ac:	d01d      	beq.n	80053ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	4a1d      	ldr	r2, [pc, #116]	; (8005428 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80053b4:	4293      	cmp	r3, r2
 80053b6:	d018      	beq.n	80053ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	4a1b      	ldr	r2, [pc, #108]	; (800542c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80053be:	4293      	cmp	r3, r2
 80053c0:	d013      	beq.n	80053ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	4a1a      	ldr	r2, [pc, #104]	; (8005430 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80053c8:	4293      	cmp	r3, r2
 80053ca:	d00e      	beq.n	80053ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	4a18      	ldr	r2, [pc, #96]	; (8005434 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80053d2:	4293      	cmp	r3, r2
 80053d4:	d009      	beq.n	80053ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	4a17      	ldr	r2, [pc, #92]	; (8005438 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80053dc:	4293      	cmp	r3, r2
 80053de:	d004      	beq.n	80053ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	4a15      	ldr	r2, [pc, #84]	; (800543c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80053e6:	4293      	cmp	r3, r2
 80053e8:	d10c      	bne.n	8005404 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80053ea:	68bb      	ldr	r3, [r7, #8]
 80053ec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80053f0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80053f2:	683b      	ldr	r3, [r7, #0]
 80053f4:	685b      	ldr	r3, [r3, #4]
 80053f6:	68ba      	ldr	r2, [r7, #8]
 80053f8:	4313      	orrs	r3, r2
 80053fa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	68ba      	ldr	r2, [r7, #8]
 8005402:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2201      	movs	r2, #1
 8005408:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2200      	movs	r2, #0
 8005410:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005414:	2300      	movs	r3, #0
}
 8005416:	4618      	mov	r0, r3
 8005418:	3714      	adds	r7, #20
 800541a:	46bd      	mov	sp, r7
 800541c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005420:	4770      	bx	lr
 8005422:	bf00      	nop
 8005424:	40010000 	.word	0x40010000
 8005428:	40000400 	.word	0x40000400
 800542c:	40000800 	.word	0x40000800
 8005430:	40000c00 	.word	0x40000c00
 8005434:	40010400 	.word	0x40010400
 8005438:	40014000 	.word	0x40014000
 800543c:	40001800 	.word	0x40001800

08005440 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005440:	b480      	push	{r7}
 8005442:	b085      	sub	sp, #20
 8005444:	af00      	add	r7, sp, #0
 8005446:	6078      	str	r0, [r7, #4]
 8005448:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800544a:	2300      	movs	r3, #0
 800544c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005454:	2b01      	cmp	r3, #1
 8005456:	d101      	bne.n	800545c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005458:	2302      	movs	r3, #2
 800545a:	e03d      	b.n	80054d8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2201      	movs	r2, #1
 8005460:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800546a:	683b      	ldr	r3, [r7, #0]
 800546c:	68db      	ldr	r3, [r3, #12]
 800546e:	4313      	orrs	r3, r2
 8005470:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005478:	683b      	ldr	r3, [r7, #0]
 800547a:	689b      	ldr	r3, [r3, #8]
 800547c:	4313      	orrs	r3, r2
 800547e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005486:	683b      	ldr	r3, [r7, #0]
 8005488:	685b      	ldr	r3, [r3, #4]
 800548a:	4313      	orrs	r3, r2
 800548c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005494:	683b      	ldr	r3, [r7, #0]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	4313      	orrs	r3, r2
 800549a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80054a2:	683b      	ldr	r3, [r7, #0]
 80054a4:	691b      	ldr	r3, [r3, #16]
 80054a6:	4313      	orrs	r3, r2
 80054a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80054b0:	683b      	ldr	r3, [r7, #0]
 80054b2:	695b      	ldr	r3, [r3, #20]
 80054b4:	4313      	orrs	r3, r2
 80054b6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80054be:	683b      	ldr	r3, [r7, #0]
 80054c0:	69db      	ldr	r3, [r3, #28]
 80054c2:	4313      	orrs	r3, r2
 80054c4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	68fa      	ldr	r2, [r7, #12]
 80054cc:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	2200      	movs	r2, #0
 80054d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80054d6:	2300      	movs	r3, #0
}
 80054d8:	4618      	mov	r0, r3
 80054da:	3714      	adds	r7, #20
 80054dc:	46bd      	mov	sp, r7
 80054de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e2:	4770      	bx	lr

080054e4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80054e4:	b480      	push	{r7}
 80054e6:	b083      	sub	sp, #12
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80054ec:	bf00      	nop
 80054ee:	370c      	adds	r7, #12
 80054f0:	46bd      	mov	sp, r7
 80054f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f6:	4770      	bx	lr

080054f8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80054f8:	b480      	push	{r7}
 80054fa:	b083      	sub	sp, #12
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005500:	bf00      	nop
 8005502:	370c      	adds	r7, #12
 8005504:	46bd      	mov	sp, r7
 8005506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550a:	4770      	bx	lr

0800550c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800550c:	b580      	push	{r7, lr}
 800550e:	b082      	sub	sp, #8
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2b00      	cmp	r3, #0
 8005518:	d101      	bne.n	800551e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800551a:	2301      	movs	r3, #1
 800551c:	e03f      	b.n	800559e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005524:	b2db      	uxtb	r3, r3
 8005526:	2b00      	cmp	r3, #0
 8005528:	d106      	bne.n	8005538 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	2200      	movs	r2, #0
 800552e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005532:	6878      	ldr	r0, [r7, #4]
 8005534:	f7fc f9e8 	bl	8001908 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2224      	movs	r2, #36	; 0x24
 800553c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	68da      	ldr	r2, [r3, #12]
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800554e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005550:	6878      	ldr	r0, [r7, #4]
 8005552:	f000 f905 	bl	8005760 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	691a      	ldr	r2, [r3, #16]
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005564:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	695a      	ldr	r2, [r3, #20]
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005574:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	68da      	ldr	r2, [r3, #12]
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005584:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	2200      	movs	r2, #0
 800558a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	2220      	movs	r2, #32
 8005590:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2220      	movs	r2, #32
 8005598:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800559c:	2300      	movs	r3, #0
}
 800559e:	4618      	mov	r0, r3
 80055a0:	3708      	adds	r7, #8
 80055a2:	46bd      	mov	sp, r7
 80055a4:	bd80      	pop	{r7, pc}

080055a6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80055a6:	b580      	push	{r7, lr}
 80055a8:	b08a      	sub	sp, #40	; 0x28
 80055aa:	af02      	add	r7, sp, #8
 80055ac:	60f8      	str	r0, [r7, #12]
 80055ae:	60b9      	str	r1, [r7, #8]
 80055b0:	603b      	str	r3, [r7, #0]
 80055b2:	4613      	mov	r3, r2
 80055b4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80055b6:	2300      	movs	r3, #0
 80055b8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055c0:	b2db      	uxtb	r3, r3
 80055c2:	2b20      	cmp	r3, #32
 80055c4:	d17c      	bne.n	80056c0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80055c6:	68bb      	ldr	r3, [r7, #8]
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d002      	beq.n	80055d2 <HAL_UART_Transmit+0x2c>
 80055cc:	88fb      	ldrh	r3, [r7, #6]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d101      	bne.n	80055d6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80055d2:	2301      	movs	r3, #1
 80055d4:	e075      	b.n	80056c2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80055dc:	2b01      	cmp	r3, #1
 80055de:	d101      	bne.n	80055e4 <HAL_UART_Transmit+0x3e>
 80055e0:	2302      	movs	r3, #2
 80055e2:	e06e      	b.n	80056c2 <HAL_UART_Transmit+0x11c>
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	2201      	movs	r2, #1
 80055e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	2200      	movs	r2, #0
 80055f0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	2221      	movs	r2, #33	; 0x21
 80055f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80055fa:	f7fc fc57 	bl	8001eac <HAL_GetTick>
 80055fe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	88fa      	ldrh	r2, [r7, #6]
 8005604:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	88fa      	ldrh	r2, [r7, #6]
 800560a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	689b      	ldr	r3, [r3, #8]
 8005610:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005614:	d108      	bne.n	8005628 <HAL_UART_Transmit+0x82>
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	691b      	ldr	r3, [r3, #16]
 800561a:	2b00      	cmp	r3, #0
 800561c:	d104      	bne.n	8005628 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800561e:	2300      	movs	r3, #0
 8005620:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005622:	68bb      	ldr	r3, [r7, #8]
 8005624:	61bb      	str	r3, [r7, #24]
 8005626:	e003      	b.n	8005630 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005628:	68bb      	ldr	r3, [r7, #8]
 800562a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800562c:	2300      	movs	r3, #0
 800562e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	2200      	movs	r2, #0
 8005634:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005638:	e02a      	b.n	8005690 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800563a:	683b      	ldr	r3, [r7, #0]
 800563c:	9300      	str	r3, [sp, #0]
 800563e:	697b      	ldr	r3, [r7, #20]
 8005640:	2200      	movs	r2, #0
 8005642:	2180      	movs	r1, #128	; 0x80
 8005644:	68f8      	ldr	r0, [r7, #12]
 8005646:	f000 f840 	bl	80056ca <UART_WaitOnFlagUntilTimeout>
 800564a:	4603      	mov	r3, r0
 800564c:	2b00      	cmp	r3, #0
 800564e:	d001      	beq.n	8005654 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005650:	2303      	movs	r3, #3
 8005652:	e036      	b.n	80056c2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005654:	69fb      	ldr	r3, [r7, #28]
 8005656:	2b00      	cmp	r3, #0
 8005658:	d10b      	bne.n	8005672 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800565a:	69bb      	ldr	r3, [r7, #24]
 800565c:	881b      	ldrh	r3, [r3, #0]
 800565e:	461a      	mov	r2, r3
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005668:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800566a:	69bb      	ldr	r3, [r7, #24]
 800566c:	3302      	adds	r3, #2
 800566e:	61bb      	str	r3, [r7, #24]
 8005670:	e007      	b.n	8005682 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005672:	69fb      	ldr	r3, [r7, #28]
 8005674:	781a      	ldrb	r2, [r3, #0]
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800567c:	69fb      	ldr	r3, [r7, #28]
 800567e:	3301      	adds	r3, #1
 8005680:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005686:	b29b      	uxth	r3, r3
 8005688:	3b01      	subs	r3, #1
 800568a:	b29a      	uxth	r2, r3
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005694:	b29b      	uxth	r3, r3
 8005696:	2b00      	cmp	r3, #0
 8005698:	d1cf      	bne.n	800563a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800569a:	683b      	ldr	r3, [r7, #0]
 800569c:	9300      	str	r3, [sp, #0]
 800569e:	697b      	ldr	r3, [r7, #20]
 80056a0:	2200      	movs	r2, #0
 80056a2:	2140      	movs	r1, #64	; 0x40
 80056a4:	68f8      	ldr	r0, [r7, #12]
 80056a6:	f000 f810 	bl	80056ca <UART_WaitOnFlagUntilTimeout>
 80056aa:	4603      	mov	r3, r0
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d001      	beq.n	80056b4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80056b0:	2303      	movs	r3, #3
 80056b2:	e006      	b.n	80056c2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	2220      	movs	r2, #32
 80056b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80056bc:	2300      	movs	r3, #0
 80056be:	e000      	b.n	80056c2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80056c0:	2302      	movs	r3, #2
  }
}
 80056c2:	4618      	mov	r0, r3
 80056c4:	3720      	adds	r7, #32
 80056c6:	46bd      	mov	sp, r7
 80056c8:	bd80      	pop	{r7, pc}

080056ca <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80056ca:	b580      	push	{r7, lr}
 80056cc:	b084      	sub	sp, #16
 80056ce:	af00      	add	r7, sp, #0
 80056d0:	60f8      	str	r0, [r7, #12]
 80056d2:	60b9      	str	r1, [r7, #8]
 80056d4:	603b      	str	r3, [r7, #0]
 80056d6:	4613      	mov	r3, r2
 80056d8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80056da:	e02c      	b.n	8005736 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80056dc:	69bb      	ldr	r3, [r7, #24]
 80056de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056e2:	d028      	beq.n	8005736 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80056e4:	69bb      	ldr	r3, [r7, #24]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d007      	beq.n	80056fa <UART_WaitOnFlagUntilTimeout+0x30>
 80056ea:	f7fc fbdf 	bl	8001eac <HAL_GetTick>
 80056ee:	4602      	mov	r2, r0
 80056f0:	683b      	ldr	r3, [r7, #0]
 80056f2:	1ad3      	subs	r3, r2, r3
 80056f4:	69ba      	ldr	r2, [r7, #24]
 80056f6:	429a      	cmp	r2, r3
 80056f8:	d21d      	bcs.n	8005736 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	68da      	ldr	r2, [r3, #12]
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005708:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	695a      	ldr	r2, [r3, #20]
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	f022 0201 	bic.w	r2, r2, #1
 8005718:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	2220      	movs	r2, #32
 800571e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	2220      	movs	r2, #32
 8005726:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	2200      	movs	r2, #0
 800572e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005732:	2303      	movs	r3, #3
 8005734:	e00f      	b.n	8005756 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	681a      	ldr	r2, [r3, #0]
 800573c:	68bb      	ldr	r3, [r7, #8]
 800573e:	4013      	ands	r3, r2
 8005740:	68ba      	ldr	r2, [r7, #8]
 8005742:	429a      	cmp	r2, r3
 8005744:	bf0c      	ite	eq
 8005746:	2301      	moveq	r3, #1
 8005748:	2300      	movne	r3, #0
 800574a:	b2db      	uxtb	r3, r3
 800574c:	461a      	mov	r2, r3
 800574e:	79fb      	ldrb	r3, [r7, #7]
 8005750:	429a      	cmp	r2, r3
 8005752:	d0c3      	beq.n	80056dc <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005754:	2300      	movs	r3, #0
}
 8005756:	4618      	mov	r0, r3
 8005758:	3710      	adds	r7, #16
 800575a:	46bd      	mov	sp, r7
 800575c:	bd80      	pop	{r7, pc}
	...

08005760 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005760:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005764:	b09f      	sub	sp, #124	; 0x7c
 8005766:	af00      	add	r7, sp, #0
 8005768:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800576a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	691b      	ldr	r3, [r3, #16]
 8005770:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005774:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005776:	68d9      	ldr	r1, [r3, #12]
 8005778:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800577a:	681a      	ldr	r2, [r3, #0]
 800577c:	ea40 0301 	orr.w	r3, r0, r1
 8005780:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005782:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005784:	689a      	ldr	r2, [r3, #8]
 8005786:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005788:	691b      	ldr	r3, [r3, #16]
 800578a:	431a      	orrs	r2, r3
 800578c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800578e:	695b      	ldr	r3, [r3, #20]
 8005790:	431a      	orrs	r2, r3
 8005792:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005794:	69db      	ldr	r3, [r3, #28]
 8005796:	4313      	orrs	r3, r2
 8005798:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800579a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	68db      	ldr	r3, [r3, #12]
 80057a0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80057a4:	f021 010c 	bic.w	r1, r1, #12
 80057a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80057aa:	681a      	ldr	r2, [r3, #0]
 80057ac:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80057ae:	430b      	orrs	r3, r1
 80057b0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80057b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	695b      	ldr	r3, [r3, #20]
 80057b8:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80057bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80057be:	6999      	ldr	r1, [r3, #24]
 80057c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80057c2:	681a      	ldr	r2, [r3, #0]
 80057c4:	ea40 0301 	orr.w	r3, r0, r1
 80057c8:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80057ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80057cc:	681a      	ldr	r2, [r3, #0]
 80057ce:	4bc5      	ldr	r3, [pc, #788]	; (8005ae4 <UART_SetConfig+0x384>)
 80057d0:	429a      	cmp	r2, r3
 80057d2:	d004      	beq.n	80057de <UART_SetConfig+0x7e>
 80057d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80057d6:	681a      	ldr	r2, [r3, #0]
 80057d8:	4bc3      	ldr	r3, [pc, #780]	; (8005ae8 <UART_SetConfig+0x388>)
 80057da:	429a      	cmp	r2, r3
 80057dc:	d103      	bne.n	80057e6 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80057de:	f7fd fddf 	bl	80033a0 <HAL_RCC_GetPCLK2Freq>
 80057e2:	6778      	str	r0, [r7, #116]	; 0x74
 80057e4:	e002      	b.n	80057ec <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80057e6:	f7fd fdc7 	bl	8003378 <HAL_RCC_GetPCLK1Freq>
 80057ea:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80057ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80057ee:	69db      	ldr	r3, [r3, #28]
 80057f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80057f4:	f040 80b6 	bne.w	8005964 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80057f8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80057fa:	461c      	mov	r4, r3
 80057fc:	f04f 0500 	mov.w	r5, #0
 8005800:	4622      	mov	r2, r4
 8005802:	462b      	mov	r3, r5
 8005804:	1891      	adds	r1, r2, r2
 8005806:	6439      	str	r1, [r7, #64]	; 0x40
 8005808:	415b      	adcs	r3, r3
 800580a:	647b      	str	r3, [r7, #68]	; 0x44
 800580c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005810:	1912      	adds	r2, r2, r4
 8005812:	eb45 0303 	adc.w	r3, r5, r3
 8005816:	f04f 0000 	mov.w	r0, #0
 800581a:	f04f 0100 	mov.w	r1, #0
 800581e:	00d9      	lsls	r1, r3, #3
 8005820:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005824:	00d0      	lsls	r0, r2, #3
 8005826:	4602      	mov	r2, r0
 8005828:	460b      	mov	r3, r1
 800582a:	1911      	adds	r1, r2, r4
 800582c:	6639      	str	r1, [r7, #96]	; 0x60
 800582e:	416b      	adcs	r3, r5
 8005830:	667b      	str	r3, [r7, #100]	; 0x64
 8005832:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005834:	685b      	ldr	r3, [r3, #4]
 8005836:	461a      	mov	r2, r3
 8005838:	f04f 0300 	mov.w	r3, #0
 800583c:	1891      	adds	r1, r2, r2
 800583e:	63b9      	str	r1, [r7, #56]	; 0x38
 8005840:	415b      	adcs	r3, r3
 8005842:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005844:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005848:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800584c:	f7fa fd10 	bl	8000270 <__aeabi_uldivmod>
 8005850:	4602      	mov	r2, r0
 8005852:	460b      	mov	r3, r1
 8005854:	4ba5      	ldr	r3, [pc, #660]	; (8005aec <UART_SetConfig+0x38c>)
 8005856:	fba3 2302 	umull	r2, r3, r3, r2
 800585a:	095b      	lsrs	r3, r3, #5
 800585c:	011e      	lsls	r6, r3, #4
 800585e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005860:	461c      	mov	r4, r3
 8005862:	f04f 0500 	mov.w	r5, #0
 8005866:	4622      	mov	r2, r4
 8005868:	462b      	mov	r3, r5
 800586a:	1891      	adds	r1, r2, r2
 800586c:	6339      	str	r1, [r7, #48]	; 0x30
 800586e:	415b      	adcs	r3, r3
 8005870:	637b      	str	r3, [r7, #52]	; 0x34
 8005872:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8005876:	1912      	adds	r2, r2, r4
 8005878:	eb45 0303 	adc.w	r3, r5, r3
 800587c:	f04f 0000 	mov.w	r0, #0
 8005880:	f04f 0100 	mov.w	r1, #0
 8005884:	00d9      	lsls	r1, r3, #3
 8005886:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800588a:	00d0      	lsls	r0, r2, #3
 800588c:	4602      	mov	r2, r0
 800588e:	460b      	mov	r3, r1
 8005890:	1911      	adds	r1, r2, r4
 8005892:	65b9      	str	r1, [r7, #88]	; 0x58
 8005894:	416b      	adcs	r3, r5
 8005896:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005898:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800589a:	685b      	ldr	r3, [r3, #4]
 800589c:	461a      	mov	r2, r3
 800589e:	f04f 0300 	mov.w	r3, #0
 80058a2:	1891      	adds	r1, r2, r2
 80058a4:	62b9      	str	r1, [r7, #40]	; 0x28
 80058a6:	415b      	adcs	r3, r3
 80058a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80058aa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80058ae:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80058b2:	f7fa fcdd 	bl	8000270 <__aeabi_uldivmod>
 80058b6:	4602      	mov	r2, r0
 80058b8:	460b      	mov	r3, r1
 80058ba:	4b8c      	ldr	r3, [pc, #560]	; (8005aec <UART_SetConfig+0x38c>)
 80058bc:	fba3 1302 	umull	r1, r3, r3, r2
 80058c0:	095b      	lsrs	r3, r3, #5
 80058c2:	2164      	movs	r1, #100	; 0x64
 80058c4:	fb01 f303 	mul.w	r3, r1, r3
 80058c8:	1ad3      	subs	r3, r2, r3
 80058ca:	00db      	lsls	r3, r3, #3
 80058cc:	3332      	adds	r3, #50	; 0x32
 80058ce:	4a87      	ldr	r2, [pc, #540]	; (8005aec <UART_SetConfig+0x38c>)
 80058d0:	fba2 2303 	umull	r2, r3, r2, r3
 80058d4:	095b      	lsrs	r3, r3, #5
 80058d6:	005b      	lsls	r3, r3, #1
 80058d8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80058dc:	441e      	add	r6, r3
 80058de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80058e0:	4618      	mov	r0, r3
 80058e2:	f04f 0100 	mov.w	r1, #0
 80058e6:	4602      	mov	r2, r0
 80058e8:	460b      	mov	r3, r1
 80058ea:	1894      	adds	r4, r2, r2
 80058ec:	623c      	str	r4, [r7, #32]
 80058ee:	415b      	adcs	r3, r3
 80058f0:	627b      	str	r3, [r7, #36]	; 0x24
 80058f2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80058f6:	1812      	adds	r2, r2, r0
 80058f8:	eb41 0303 	adc.w	r3, r1, r3
 80058fc:	f04f 0400 	mov.w	r4, #0
 8005900:	f04f 0500 	mov.w	r5, #0
 8005904:	00dd      	lsls	r5, r3, #3
 8005906:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800590a:	00d4      	lsls	r4, r2, #3
 800590c:	4622      	mov	r2, r4
 800590e:	462b      	mov	r3, r5
 8005910:	1814      	adds	r4, r2, r0
 8005912:	653c      	str	r4, [r7, #80]	; 0x50
 8005914:	414b      	adcs	r3, r1
 8005916:	657b      	str	r3, [r7, #84]	; 0x54
 8005918:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800591a:	685b      	ldr	r3, [r3, #4]
 800591c:	461a      	mov	r2, r3
 800591e:	f04f 0300 	mov.w	r3, #0
 8005922:	1891      	adds	r1, r2, r2
 8005924:	61b9      	str	r1, [r7, #24]
 8005926:	415b      	adcs	r3, r3
 8005928:	61fb      	str	r3, [r7, #28]
 800592a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800592e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8005932:	f7fa fc9d 	bl	8000270 <__aeabi_uldivmod>
 8005936:	4602      	mov	r2, r0
 8005938:	460b      	mov	r3, r1
 800593a:	4b6c      	ldr	r3, [pc, #432]	; (8005aec <UART_SetConfig+0x38c>)
 800593c:	fba3 1302 	umull	r1, r3, r3, r2
 8005940:	095b      	lsrs	r3, r3, #5
 8005942:	2164      	movs	r1, #100	; 0x64
 8005944:	fb01 f303 	mul.w	r3, r1, r3
 8005948:	1ad3      	subs	r3, r2, r3
 800594a:	00db      	lsls	r3, r3, #3
 800594c:	3332      	adds	r3, #50	; 0x32
 800594e:	4a67      	ldr	r2, [pc, #412]	; (8005aec <UART_SetConfig+0x38c>)
 8005950:	fba2 2303 	umull	r2, r3, r2, r3
 8005954:	095b      	lsrs	r3, r3, #5
 8005956:	f003 0207 	and.w	r2, r3, #7
 800595a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	4432      	add	r2, r6
 8005960:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005962:	e0b9      	b.n	8005ad8 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005964:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005966:	461c      	mov	r4, r3
 8005968:	f04f 0500 	mov.w	r5, #0
 800596c:	4622      	mov	r2, r4
 800596e:	462b      	mov	r3, r5
 8005970:	1891      	adds	r1, r2, r2
 8005972:	6139      	str	r1, [r7, #16]
 8005974:	415b      	adcs	r3, r3
 8005976:	617b      	str	r3, [r7, #20]
 8005978:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800597c:	1912      	adds	r2, r2, r4
 800597e:	eb45 0303 	adc.w	r3, r5, r3
 8005982:	f04f 0000 	mov.w	r0, #0
 8005986:	f04f 0100 	mov.w	r1, #0
 800598a:	00d9      	lsls	r1, r3, #3
 800598c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005990:	00d0      	lsls	r0, r2, #3
 8005992:	4602      	mov	r2, r0
 8005994:	460b      	mov	r3, r1
 8005996:	eb12 0804 	adds.w	r8, r2, r4
 800599a:	eb43 0905 	adc.w	r9, r3, r5
 800599e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80059a0:	685b      	ldr	r3, [r3, #4]
 80059a2:	4618      	mov	r0, r3
 80059a4:	f04f 0100 	mov.w	r1, #0
 80059a8:	f04f 0200 	mov.w	r2, #0
 80059ac:	f04f 0300 	mov.w	r3, #0
 80059b0:	008b      	lsls	r3, r1, #2
 80059b2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80059b6:	0082      	lsls	r2, r0, #2
 80059b8:	4640      	mov	r0, r8
 80059ba:	4649      	mov	r1, r9
 80059bc:	f7fa fc58 	bl	8000270 <__aeabi_uldivmod>
 80059c0:	4602      	mov	r2, r0
 80059c2:	460b      	mov	r3, r1
 80059c4:	4b49      	ldr	r3, [pc, #292]	; (8005aec <UART_SetConfig+0x38c>)
 80059c6:	fba3 2302 	umull	r2, r3, r3, r2
 80059ca:	095b      	lsrs	r3, r3, #5
 80059cc:	011e      	lsls	r6, r3, #4
 80059ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80059d0:	4618      	mov	r0, r3
 80059d2:	f04f 0100 	mov.w	r1, #0
 80059d6:	4602      	mov	r2, r0
 80059d8:	460b      	mov	r3, r1
 80059da:	1894      	adds	r4, r2, r2
 80059dc:	60bc      	str	r4, [r7, #8]
 80059de:	415b      	adcs	r3, r3
 80059e0:	60fb      	str	r3, [r7, #12]
 80059e2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80059e6:	1812      	adds	r2, r2, r0
 80059e8:	eb41 0303 	adc.w	r3, r1, r3
 80059ec:	f04f 0400 	mov.w	r4, #0
 80059f0:	f04f 0500 	mov.w	r5, #0
 80059f4:	00dd      	lsls	r5, r3, #3
 80059f6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80059fa:	00d4      	lsls	r4, r2, #3
 80059fc:	4622      	mov	r2, r4
 80059fe:	462b      	mov	r3, r5
 8005a00:	1814      	adds	r4, r2, r0
 8005a02:	64bc      	str	r4, [r7, #72]	; 0x48
 8005a04:	414b      	adcs	r3, r1
 8005a06:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005a08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a0a:	685b      	ldr	r3, [r3, #4]
 8005a0c:	4618      	mov	r0, r3
 8005a0e:	f04f 0100 	mov.w	r1, #0
 8005a12:	f04f 0200 	mov.w	r2, #0
 8005a16:	f04f 0300 	mov.w	r3, #0
 8005a1a:	008b      	lsls	r3, r1, #2
 8005a1c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005a20:	0082      	lsls	r2, r0, #2
 8005a22:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8005a26:	f7fa fc23 	bl	8000270 <__aeabi_uldivmod>
 8005a2a:	4602      	mov	r2, r0
 8005a2c:	460b      	mov	r3, r1
 8005a2e:	4b2f      	ldr	r3, [pc, #188]	; (8005aec <UART_SetConfig+0x38c>)
 8005a30:	fba3 1302 	umull	r1, r3, r3, r2
 8005a34:	095b      	lsrs	r3, r3, #5
 8005a36:	2164      	movs	r1, #100	; 0x64
 8005a38:	fb01 f303 	mul.w	r3, r1, r3
 8005a3c:	1ad3      	subs	r3, r2, r3
 8005a3e:	011b      	lsls	r3, r3, #4
 8005a40:	3332      	adds	r3, #50	; 0x32
 8005a42:	4a2a      	ldr	r2, [pc, #168]	; (8005aec <UART_SetConfig+0x38c>)
 8005a44:	fba2 2303 	umull	r2, r3, r2, r3
 8005a48:	095b      	lsrs	r3, r3, #5
 8005a4a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005a4e:	441e      	add	r6, r3
 8005a50:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005a52:	4618      	mov	r0, r3
 8005a54:	f04f 0100 	mov.w	r1, #0
 8005a58:	4602      	mov	r2, r0
 8005a5a:	460b      	mov	r3, r1
 8005a5c:	1894      	adds	r4, r2, r2
 8005a5e:	603c      	str	r4, [r7, #0]
 8005a60:	415b      	adcs	r3, r3
 8005a62:	607b      	str	r3, [r7, #4]
 8005a64:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005a68:	1812      	adds	r2, r2, r0
 8005a6a:	eb41 0303 	adc.w	r3, r1, r3
 8005a6e:	f04f 0400 	mov.w	r4, #0
 8005a72:	f04f 0500 	mov.w	r5, #0
 8005a76:	00dd      	lsls	r5, r3, #3
 8005a78:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005a7c:	00d4      	lsls	r4, r2, #3
 8005a7e:	4622      	mov	r2, r4
 8005a80:	462b      	mov	r3, r5
 8005a82:	eb12 0a00 	adds.w	sl, r2, r0
 8005a86:	eb43 0b01 	adc.w	fp, r3, r1
 8005a8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a8c:	685b      	ldr	r3, [r3, #4]
 8005a8e:	4618      	mov	r0, r3
 8005a90:	f04f 0100 	mov.w	r1, #0
 8005a94:	f04f 0200 	mov.w	r2, #0
 8005a98:	f04f 0300 	mov.w	r3, #0
 8005a9c:	008b      	lsls	r3, r1, #2
 8005a9e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005aa2:	0082      	lsls	r2, r0, #2
 8005aa4:	4650      	mov	r0, sl
 8005aa6:	4659      	mov	r1, fp
 8005aa8:	f7fa fbe2 	bl	8000270 <__aeabi_uldivmod>
 8005aac:	4602      	mov	r2, r0
 8005aae:	460b      	mov	r3, r1
 8005ab0:	4b0e      	ldr	r3, [pc, #56]	; (8005aec <UART_SetConfig+0x38c>)
 8005ab2:	fba3 1302 	umull	r1, r3, r3, r2
 8005ab6:	095b      	lsrs	r3, r3, #5
 8005ab8:	2164      	movs	r1, #100	; 0x64
 8005aba:	fb01 f303 	mul.w	r3, r1, r3
 8005abe:	1ad3      	subs	r3, r2, r3
 8005ac0:	011b      	lsls	r3, r3, #4
 8005ac2:	3332      	adds	r3, #50	; 0x32
 8005ac4:	4a09      	ldr	r2, [pc, #36]	; (8005aec <UART_SetConfig+0x38c>)
 8005ac6:	fba2 2303 	umull	r2, r3, r2, r3
 8005aca:	095b      	lsrs	r3, r3, #5
 8005acc:	f003 020f 	and.w	r2, r3, #15
 8005ad0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	4432      	add	r2, r6
 8005ad6:	609a      	str	r2, [r3, #8]
}
 8005ad8:	bf00      	nop
 8005ada:	377c      	adds	r7, #124	; 0x7c
 8005adc:	46bd      	mov	sp, r7
 8005ade:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ae2:	bf00      	nop
 8005ae4:	40011000 	.word	0x40011000
 8005ae8:	40011400 	.word	0x40011400
 8005aec:	51eb851f 	.word	0x51eb851f

08005af0 <__NVIC_SetPriority>:
{
 8005af0:	b480      	push	{r7}
 8005af2:	b083      	sub	sp, #12
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	4603      	mov	r3, r0
 8005af8:	6039      	str	r1, [r7, #0]
 8005afa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005afc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	db0a      	blt.n	8005b1a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005b04:	683b      	ldr	r3, [r7, #0]
 8005b06:	b2da      	uxtb	r2, r3
 8005b08:	490c      	ldr	r1, [pc, #48]	; (8005b3c <__NVIC_SetPriority+0x4c>)
 8005b0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b0e:	0112      	lsls	r2, r2, #4
 8005b10:	b2d2      	uxtb	r2, r2
 8005b12:	440b      	add	r3, r1
 8005b14:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8005b18:	e00a      	b.n	8005b30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005b1a:	683b      	ldr	r3, [r7, #0]
 8005b1c:	b2da      	uxtb	r2, r3
 8005b1e:	4908      	ldr	r1, [pc, #32]	; (8005b40 <__NVIC_SetPriority+0x50>)
 8005b20:	79fb      	ldrb	r3, [r7, #7]
 8005b22:	f003 030f 	and.w	r3, r3, #15
 8005b26:	3b04      	subs	r3, #4
 8005b28:	0112      	lsls	r2, r2, #4
 8005b2a:	b2d2      	uxtb	r2, r2
 8005b2c:	440b      	add	r3, r1
 8005b2e:	761a      	strb	r2, [r3, #24]
}
 8005b30:	bf00      	nop
 8005b32:	370c      	adds	r7, #12
 8005b34:	46bd      	mov	sp, r7
 8005b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3a:	4770      	bx	lr
 8005b3c:	e000e100 	.word	0xe000e100
 8005b40:	e000ed00 	.word	0xe000ed00

08005b44 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8005b44:	b580      	push	{r7, lr}
 8005b46:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8005b48:	4b05      	ldr	r3, [pc, #20]	; (8005b60 <SysTick_Handler+0x1c>)
 8005b4a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8005b4c:	f001 fcfe 	bl	800754c <xTaskGetSchedulerState>
 8005b50:	4603      	mov	r3, r0
 8005b52:	2b01      	cmp	r3, #1
 8005b54:	d001      	beq.n	8005b5a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8005b56:	f002 fae7 	bl	8008128 <xPortSysTickHandler>
  }
}
 8005b5a:	bf00      	nop
 8005b5c:	bd80      	pop	{r7, pc}
 8005b5e:	bf00      	nop
 8005b60:	e000e010 	.word	0xe000e010

08005b64 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005b64:	b580      	push	{r7, lr}
 8005b66:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8005b68:	2100      	movs	r1, #0
 8005b6a:	f06f 0004 	mvn.w	r0, #4
 8005b6e:	f7ff ffbf 	bl	8005af0 <__NVIC_SetPriority>
#endif
}
 8005b72:	bf00      	nop
 8005b74:	bd80      	pop	{r7, pc}
	...

08005b78 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005b78:	b480      	push	{r7}
 8005b7a:	b083      	sub	sp, #12
 8005b7c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005b7e:	f3ef 8305 	mrs	r3, IPSR
 8005b82:	603b      	str	r3, [r7, #0]
  return(result);
 8005b84:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d003      	beq.n	8005b92 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8005b8a:	f06f 0305 	mvn.w	r3, #5
 8005b8e:	607b      	str	r3, [r7, #4]
 8005b90:	e00c      	b.n	8005bac <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005b92:	4b0a      	ldr	r3, [pc, #40]	; (8005bbc <osKernelInitialize+0x44>)
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d105      	bne.n	8005ba6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8005b9a:	4b08      	ldr	r3, [pc, #32]	; (8005bbc <osKernelInitialize+0x44>)
 8005b9c:	2201      	movs	r2, #1
 8005b9e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005ba0:	2300      	movs	r3, #0
 8005ba2:	607b      	str	r3, [r7, #4]
 8005ba4:	e002      	b.n	8005bac <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8005ba6:	f04f 33ff 	mov.w	r3, #4294967295
 8005baa:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005bac:	687b      	ldr	r3, [r7, #4]
}
 8005bae:	4618      	mov	r0, r3
 8005bb0:	370c      	adds	r7, #12
 8005bb2:	46bd      	mov	sp, r7
 8005bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb8:	4770      	bx	lr
 8005bba:	bf00      	nop
 8005bbc:	20000094 	.word	0x20000094

08005bc0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005bc0:	b580      	push	{r7, lr}
 8005bc2:	b082      	sub	sp, #8
 8005bc4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005bc6:	f3ef 8305 	mrs	r3, IPSR
 8005bca:	603b      	str	r3, [r7, #0]
  return(result);
 8005bcc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d003      	beq.n	8005bda <osKernelStart+0x1a>
    stat = osErrorISR;
 8005bd2:	f06f 0305 	mvn.w	r3, #5
 8005bd6:	607b      	str	r3, [r7, #4]
 8005bd8:	e010      	b.n	8005bfc <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8005bda:	4b0b      	ldr	r3, [pc, #44]	; (8005c08 <osKernelStart+0x48>)
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	2b01      	cmp	r3, #1
 8005be0:	d109      	bne.n	8005bf6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8005be2:	f7ff ffbf 	bl	8005b64 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8005be6:	4b08      	ldr	r3, [pc, #32]	; (8005c08 <osKernelStart+0x48>)
 8005be8:	2202      	movs	r2, #2
 8005bea:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005bec:	f001 f866 	bl	8006cbc <vTaskStartScheduler>
      stat = osOK;
 8005bf0:	2300      	movs	r3, #0
 8005bf2:	607b      	str	r3, [r7, #4]
 8005bf4:	e002      	b.n	8005bfc <osKernelStart+0x3c>
    } else {
      stat = osError;
 8005bf6:	f04f 33ff 	mov.w	r3, #4294967295
 8005bfa:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005bfc:	687b      	ldr	r3, [r7, #4]
}
 8005bfe:	4618      	mov	r0, r3
 8005c00:	3708      	adds	r7, #8
 8005c02:	46bd      	mov	sp, r7
 8005c04:	bd80      	pop	{r7, pc}
 8005c06:	bf00      	nop
 8005c08:	20000094 	.word	0x20000094

08005c0c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005c0c:	b580      	push	{r7, lr}
 8005c0e:	b08e      	sub	sp, #56	; 0x38
 8005c10:	af04      	add	r7, sp, #16
 8005c12:	60f8      	str	r0, [r7, #12]
 8005c14:	60b9      	str	r1, [r7, #8]
 8005c16:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005c18:	2300      	movs	r3, #0
 8005c1a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005c1c:	f3ef 8305 	mrs	r3, IPSR
 8005c20:	617b      	str	r3, [r7, #20]
  return(result);
 8005c22:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d17e      	bne.n	8005d26 <osThreadNew+0x11a>
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d07b      	beq.n	8005d26 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8005c2e:	2380      	movs	r3, #128	; 0x80
 8005c30:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8005c32:	2318      	movs	r3, #24
 8005c34:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8005c36:	2300      	movs	r3, #0
 8005c38:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8005c3a:	f04f 33ff 	mov.w	r3, #4294967295
 8005c3e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d045      	beq.n	8005cd2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d002      	beq.n	8005c54 <osThreadNew+0x48>
        name = attr->name;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	699b      	ldr	r3, [r3, #24]
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d002      	beq.n	8005c62 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	699b      	ldr	r3, [r3, #24]
 8005c60:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005c62:	69fb      	ldr	r3, [r7, #28]
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d008      	beq.n	8005c7a <osThreadNew+0x6e>
 8005c68:	69fb      	ldr	r3, [r7, #28]
 8005c6a:	2b38      	cmp	r3, #56	; 0x38
 8005c6c:	d805      	bhi.n	8005c7a <osThreadNew+0x6e>
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	685b      	ldr	r3, [r3, #4]
 8005c72:	f003 0301 	and.w	r3, r3, #1
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d001      	beq.n	8005c7e <osThreadNew+0x72>
        return (NULL);
 8005c7a:	2300      	movs	r3, #0
 8005c7c:	e054      	b.n	8005d28 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	695b      	ldr	r3, [r3, #20]
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d003      	beq.n	8005c8e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	695b      	ldr	r3, [r3, #20]
 8005c8a:	089b      	lsrs	r3, r3, #2
 8005c8c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	689b      	ldr	r3, [r3, #8]
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d00e      	beq.n	8005cb4 <osThreadNew+0xa8>
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	68db      	ldr	r3, [r3, #12]
 8005c9a:	2b5b      	cmp	r3, #91	; 0x5b
 8005c9c:	d90a      	bls.n	8005cb4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d006      	beq.n	8005cb4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	695b      	ldr	r3, [r3, #20]
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d002      	beq.n	8005cb4 <osThreadNew+0xa8>
        mem = 1;
 8005cae:	2301      	movs	r3, #1
 8005cb0:	61bb      	str	r3, [r7, #24]
 8005cb2:	e010      	b.n	8005cd6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	689b      	ldr	r3, [r3, #8]
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d10c      	bne.n	8005cd6 <osThreadNew+0xca>
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	68db      	ldr	r3, [r3, #12]
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d108      	bne.n	8005cd6 <osThreadNew+0xca>
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	691b      	ldr	r3, [r3, #16]
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d104      	bne.n	8005cd6 <osThreadNew+0xca>
          mem = 0;
 8005ccc:	2300      	movs	r3, #0
 8005cce:	61bb      	str	r3, [r7, #24]
 8005cd0:	e001      	b.n	8005cd6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8005cd2:	2300      	movs	r3, #0
 8005cd4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005cd6:	69bb      	ldr	r3, [r7, #24]
 8005cd8:	2b01      	cmp	r3, #1
 8005cda:	d110      	bne.n	8005cfe <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8005ce0:	687a      	ldr	r2, [r7, #4]
 8005ce2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005ce4:	9202      	str	r2, [sp, #8]
 8005ce6:	9301      	str	r3, [sp, #4]
 8005ce8:	69fb      	ldr	r3, [r7, #28]
 8005cea:	9300      	str	r3, [sp, #0]
 8005cec:	68bb      	ldr	r3, [r7, #8]
 8005cee:	6a3a      	ldr	r2, [r7, #32]
 8005cf0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005cf2:	68f8      	ldr	r0, [r7, #12]
 8005cf4:	f000 fe0c 	bl	8006910 <xTaskCreateStatic>
 8005cf8:	4603      	mov	r3, r0
 8005cfa:	613b      	str	r3, [r7, #16]
 8005cfc:	e013      	b.n	8005d26 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8005cfe:	69bb      	ldr	r3, [r7, #24]
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d110      	bne.n	8005d26 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005d04:	6a3b      	ldr	r3, [r7, #32]
 8005d06:	b29a      	uxth	r2, r3
 8005d08:	f107 0310 	add.w	r3, r7, #16
 8005d0c:	9301      	str	r3, [sp, #4]
 8005d0e:	69fb      	ldr	r3, [r7, #28]
 8005d10:	9300      	str	r3, [sp, #0]
 8005d12:	68bb      	ldr	r3, [r7, #8]
 8005d14:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005d16:	68f8      	ldr	r0, [r7, #12]
 8005d18:	f000 fe57 	bl	80069ca <xTaskCreate>
 8005d1c:	4603      	mov	r3, r0
 8005d1e:	2b01      	cmp	r3, #1
 8005d20:	d001      	beq.n	8005d26 <osThreadNew+0x11a>
            hTask = NULL;
 8005d22:	2300      	movs	r3, #0
 8005d24:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005d26:	693b      	ldr	r3, [r7, #16]
}
 8005d28:	4618      	mov	r0, r3
 8005d2a:	3728      	adds	r7, #40	; 0x28
 8005d2c:	46bd      	mov	sp, r7
 8005d2e:	bd80      	pop	{r7, pc}

08005d30 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8005d30:	b580      	push	{r7, lr}
 8005d32:	b084      	sub	sp, #16
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005d38:	f3ef 8305 	mrs	r3, IPSR
 8005d3c:	60bb      	str	r3, [r7, #8]
  return(result);
 8005d3e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d003      	beq.n	8005d4c <osDelay+0x1c>
    stat = osErrorISR;
 8005d44:	f06f 0305 	mvn.w	r3, #5
 8005d48:	60fb      	str	r3, [r7, #12]
 8005d4a:	e007      	b.n	8005d5c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8005d4c:	2300      	movs	r3, #0
 8005d4e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d002      	beq.n	8005d5c <osDelay+0x2c>
      vTaskDelay(ticks);
 8005d56:	6878      	ldr	r0, [r7, #4]
 8005d58:	f000 ff7c 	bl	8006c54 <vTaskDelay>
    }
  }

  return (stat);
 8005d5c:	68fb      	ldr	r3, [r7, #12]
}
 8005d5e:	4618      	mov	r0, r3
 8005d60:	3710      	adds	r7, #16
 8005d62:	46bd      	mov	sp, r7
 8005d64:	bd80      	pop	{r7, pc}
	...

08005d68 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005d68:	b480      	push	{r7}
 8005d6a:	b085      	sub	sp, #20
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	60f8      	str	r0, [r7, #12]
 8005d70:	60b9      	str	r1, [r7, #8]
 8005d72:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	4a07      	ldr	r2, [pc, #28]	; (8005d94 <vApplicationGetIdleTaskMemory+0x2c>)
 8005d78:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005d7a:	68bb      	ldr	r3, [r7, #8]
 8005d7c:	4a06      	ldr	r2, [pc, #24]	; (8005d98 <vApplicationGetIdleTaskMemory+0x30>)
 8005d7e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	2280      	movs	r2, #128	; 0x80
 8005d84:	601a      	str	r2, [r3, #0]
}
 8005d86:	bf00      	nop
 8005d88:	3714      	adds	r7, #20
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d90:	4770      	bx	lr
 8005d92:	bf00      	nop
 8005d94:	20000098 	.word	0x20000098
 8005d98:	200000f4 	.word	0x200000f4

08005d9c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005d9c:	b480      	push	{r7}
 8005d9e:	b085      	sub	sp, #20
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	60f8      	str	r0, [r7, #12]
 8005da4:	60b9      	str	r1, [r7, #8]
 8005da6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	4a07      	ldr	r2, [pc, #28]	; (8005dc8 <vApplicationGetTimerTaskMemory+0x2c>)
 8005dac:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005dae:	68bb      	ldr	r3, [r7, #8]
 8005db0:	4a06      	ldr	r2, [pc, #24]	; (8005dcc <vApplicationGetTimerTaskMemory+0x30>)
 8005db2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005dba:	601a      	str	r2, [r3, #0]
}
 8005dbc:	bf00      	nop
 8005dbe:	3714      	adds	r7, #20
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc6:	4770      	bx	lr
 8005dc8:	200002f4 	.word	0x200002f4
 8005dcc:	20000350 	.word	0x20000350

08005dd0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005dd0:	b480      	push	{r7}
 8005dd2:	b083      	sub	sp, #12
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	f103 0208 	add.w	r2, r3, #8
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	f04f 32ff 	mov.w	r2, #4294967295
 8005de8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	f103 0208 	add.w	r2, r3, #8
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	f103 0208 	add.w	r2, r3, #8
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	2200      	movs	r2, #0
 8005e02:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005e04:	bf00      	nop
 8005e06:	370c      	adds	r7, #12
 8005e08:	46bd      	mov	sp, r7
 8005e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0e:	4770      	bx	lr

08005e10 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005e10:	b480      	push	{r7}
 8005e12:	b083      	sub	sp, #12
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	2200      	movs	r2, #0
 8005e1c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005e1e:	bf00      	nop
 8005e20:	370c      	adds	r7, #12
 8005e22:	46bd      	mov	sp, r7
 8005e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e28:	4770      	bx	lr

08005e2a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005e2a:	b480      	push	{r7}
 8005e2c:	b085      	sub	sp, #20
 8005e2e:	af00      	add	r7, sp, #0
 8005e30:	6078      	str	r0, [r7, #4]
 8005e32:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	685b      	ldr	r3, [r3, #4]
 8005e38:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005e3a:	683b      	ldr	r3, [r7, #0]
 8005e3c:	68fa      	ldr	r2, [r7, #12]
 8005e3e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	689a      	ldr	r2, [r3, #8]
 8005e44:	683b      	ldr	r3, [r7, #0]
 8005e46:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	689b      	ldr	r3, [r3, #8]
 8005e4c:	683a      	ldr	r2, [r7, #0]
 8005e4e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	683a      	ldr	r2, [r7, #0]
 8005e54:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005e56:	683b      	ldr	r3, [r7, #0]
 8005e58:	687a      	ldr	r2, [r7, #4]
 8005e5a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	1c5a      	adds	r2, r3, #1
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	601a      	str	r2, [r3, #0]
}
 8005e66:	bf00      	nop
 8005e68:	3714      	adds	r7, #20
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e70:	4770      	bx	lr

08005e72 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005e72:	b480      	push	{r7}
 8005e74:	b085      	sub	sp, #20
 8005e76:	af00      	add	r7, sp, #0
 8005e78:	6078      	str	r0, [r7, #4]
 8005e7a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005e7c:	683b      	ldr	r3, [r7, #0]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005e82:	68bb      	ldr	r3, [r7, #8]
 8005e84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e88:	d103      	bne.n	8005e92 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	691b      	ldr	r3, [r3, #16]
 8005e8e:	60fb      	str	r3, [r7, #12]
 8005e90:	e00c      	b.n	8005eac <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	3308      	adds	r3, #8
 8005e96:	60fb      	str	r3, [r7, #12]
 8005e98:	e002      	b.n	8005ea0 <vListInsert+0x2e>
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	685b      	ldr	r3, [r3, #4]
 8005e9e:	60fb      	str	r3, [r7, #12]
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	685b      	ldr	r3, [r3, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	68ba      	ldr	r2, [r7, #8]
 8005ea8:	429a      	cmp	r2, r3
 8005eaa:	d2f6      	bcs.n	8005e9a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	685a      	ldr	r2, [r3, #4]
 8005eb0:	683b      	ldr	r3, [r7, #0]
 8005eb2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005eb4:	683b      	ldr	r3, [r7, #0]
 8005eb6:	685b      	ldr	r3, [r3, #4]
 8005eb8:	683a      	ldr	r2, [r7, #0]
 8005eba:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005ebc:	683b      	ldr	r3, [r7, #0]
 8005ebe:	68fa      	ldr	r2, [r7, #12]
 8005ec0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	683a      	ldr	r2, [r7, #0]
 8005ec6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005ec8:	683b      	ldr	r3, [r7, #0]
 8005eca:	687a      	ldr	r2, [r7, #4]
 8005ecc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	1c5a      	adds	r2, r3, #1
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	601a      	str	r2, [r3, #0]
}
 8005ed8:	bf00      	nop
 8005eda:	3714      	adds	r7, #20
 8005edc:	46bd      	mov	sp, r7
 8005ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee2:	4770      	bx	lr

08005ee4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005ee4:	b480      	push	{r7}
 8005ee6:	b085      	sub	sp, #20
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	691b      	ldr	r3, [r3, #16]
 8005ef0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	685b      	ldr	r3, [r3, #4]
 8005ef6:	687a      	ldr	r2, [r7, #4]
 8005ef8:	6892      	ldr	r2, [r2, #8]
 8005efa:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	689b      	ldr	r3, [r3, #8]
 8005f00:	687a      	ldr	r2, [r7, #4]
 8005f02:	6852      	ldr	r2, [r2, #4]
 8005f04:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	685b      	ldr	r3, [r3, #4]
 8005f0a:	687a      	ldr	r2, [r7, #4]
 8005f0c:	429a      	cmp	r2, r3
 8005f0e:	d103      	bne.n	8005f18 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	689a      	ldr	r2, [r3, #8]
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	2200      	movs	r2, #0
 8005f1c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	1e5a      	subs	r2, r3, #1
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	681b      	ldr	r3, [r3, #0]
}
 8005f2c:	4618      	mov	r0, r3
 8005f2e:	3714      	adds	r7, #20
 8005f30:	46bd      	mov	sp, r7
 8005f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f36:	4770      	bx	lr

08005f38 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005f38:	b580      	push	{r7, lr}
 8005f3a:	b084      	sub	sp, #16
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	6078      	str	r0, [r7, #4]
 8005f40:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d10a      	bne.n	8005f62 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005f4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f50:	f383 8811 	msr	BASEPRI, r3
 8005f54:	f3bf 8f6f 	isb	sy
 8005f58:	f3bf 8f4f 	dsb	sy
 8005f5c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005f5e:	bf00      	nop
 8005f60:	e7fe      	b.n	8005f60 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005f62:	f002 f84f 	bl	8008004 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	681a      	ldr	r2, [r3, #0]
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f6e:	68f9      	ldr	r1, [r7, #12]
 8005f70:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005f72:	fb01 f303 	mul.w	r3, r1, r3
 8005f76:	441a      	add	r2, r3
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	2200      	movs	r2, #0
 8005f80:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	681a      	ldr	r2, [r3, #0]
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	681a      	ldr	r2, [r3, #0]
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f92:	3b01      	subs	r3, #1
 8005f94:	68f9      	ldr	r1, [r7, #12]
 8005f96:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005f98:	fb01 f303 	mul.w	r3, r1, r3
 8005f9c:	441a      	add	r2, r3
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	22ff      	movs	r2, #255	; 0xff
 8005fa6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	22ff      	movs	r2, #255	; 0xff
 8005fae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005fb2:	683b      	ldr	r3, [r7, #0]
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d114      	bne.n	8005fe2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	691b      	ldr	r3, [r3, #16]
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d01a      	beq.n	8005ff6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	3310      	adds	r3, #16
 8005fc4:	4618      	mov	r0, r3
 8005fc6:	f001 f903 	bl	80071d0 <xTaskRemoveFromEventList>
 8005fca:	4603      	mov	r3, r0
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d012      	beq.n	8005ff6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005fd0:	4b0c      	ldr	r3, [pc, #48]	; (8006004 <xQueueGenericReset+0xcc>)
 8005fd2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005fd6:	601a      	str	r2, [r3, #0]
 8005fd8:	f3bf 8f4f 	dsb	sy
 8005fdc:	f3bf 8f6f 	isb	sy
 8005fe0:	e009      	b.n	8005ff6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	3310      	adds	r3, #16
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	f7ff fef2 	bl	8005dd0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	3324      	adds	r3, #36	; 0x24
 8005ff0:	4618      	mov	r0, r3
 8005ff2:	f7ff feed 	bl	8005dd0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005ff6:	f002 f835 	bl	8008064 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005ffa:	2301      	movs	r3, #1
}
 8005ffc:	4618      	mov	r0, r3
 8005ffe:	3710      	adds	r7, #16
 8006000:	46bd      	mov	sp, r7
 8006002:	bd80      	pop	{r7, pc}
 8006004:	e000ed04 	.word	0xe000ed04

08006008 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006008:	b580      	push	{r7, lr}
 800600a:	b08e      	sub	sp, #56	; 0x38
 800600c:	af02      	add	r7, sp, #8
 800600e:	60f8      	str	r0, [r7, #12]
 8006010:	60b9      	str	r1, [r7, #8]
 8006012:	607a      	str	r2, [r7, #4]
 8006014:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	2b00      	cmp	r3, #0
 800601a:	d10a      	bne.n	8006032 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800601c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006020:	f383 8811 	msr	BASEPRI, r3
 8006024:	f3bf 8f6f 	isb	sy
 8006028:	f3bf 8f4f 	dsb	sy
 800602c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800602e:	bf00      	nop
 8006030:	e7fe      	b.n	8006030 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006032:	683b      	ldr	r3, [r7, #0]
 8006034:	2b00      	cmp	r3, #0
 8006036:	d10a      	bne.n	800604e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8006038:	f04f 0350 	mov.w	r3, #80	; 0x50
 800603c:	f383 8811 	msr	BASEPRI, r3
 8006040:	f3bf 8f6f 	isb	sy
 8006044:	f3bf 8f4f 	dsb	sy
 8006048:	627b      	str	r3, [r7, #36]	; 0x24
}
 800604a:	bf00      	nop
 800604c:	e7fe      	b.n	800604c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	2b00      	cmp	r3, #0
 8006052:	d002      	beq.n	800605a <xQueueGenericCreateStatic+0x52>
 8006054:	68bb      	ldr	r3, [r7, #8]
 8006056:	2b00      	cmp	r3, #0
 8006058:	d001      	beq.n	800605e <xQueueGenericCreateStatic+0x56>
 800605a:	2301      	movs	r3, #1
 800605c:	e000      	b.n	8006060 <xQueueGenericCreateStatic+0x58>
 800605e:	2300      	movs	r3, #0
 8006060:	2b00      	cmp	r3, #0
 8006062:	d10a      	bne.n	800607a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8006064:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006068:	f383 8811 	msr	BASEPRI, r3
 800606c:	f3bf 8f6f 	isb	sy
 8006070:	f3bf 8f4f 	dsb	sy
 8006074:	623b      	str	r3, [r7, #32]
}
 8006076:	bf00      	nop
 8006078:	e7fe      	b.n	8006078 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	2b00      	cmp	r3, #0
 800607e:	d102      	bne.n	8006086 <xQueueGenericCreateStatic+0x7e>
 8006080:	68bb      	ldr	r3, [r7, #8]
 8006082:	2b00      	cmp	r3, #0
 8006084:	d101      	bne.n	800608a <xQueueGenericCreateStatic+0x82>
 8006086:	2301      	movs	r3, #1
 8006088:	e000      	b.n	800608c <xQueueGenericCreateStatic+0x84>
 800608a:	2300      	movs	r3, #0
 800608c:	2b00      	cmp	r3, #0
 800608e:	d10a      	bne.n	80060a6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8006090:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006094:	f383 8811 	msr	BASEPRI, r3
 8006098:	f3bf 8f6f 	isb	sy
 800609c:	f3bf 8f4f 	dsb	sy
 80060a0:	61fb      	str	r3, [r7, #28]
}
 80060a2:	bf00      	nop
 80060a4:	e7fe      	b.n	80060a4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80060a6:	2350      	movs	r3, #80	; 0x50
 80060a8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80060aa:	697b      	ldr	r3, [r7, #20]
 80060ac:	2b50      	cmp	r3, #80	; 0x50
 80060ae:	d00a      	beq.n	80060c6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80060b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060b4:	f383 8811 	msr	BASEPRI, r3
 80060b8:	f3bf 8f6f 	isb	sy
 80060bc:	f3bf 8f4f 	dsb	sy
 80060c0:	61bb      	str	r3, [r7, #24]
}
 80060c2:	bf00      	nop
 80060c4:	e7fe      	b.n	80060c4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80060c6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80060c8:	683b      	ldr	r3, [r7, #0]
 80060ca:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80060cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d00d      	beq.n	80060ee <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80060d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060d4:	2201      	movs	r2, #1
 80060d6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80060da:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80060de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060e0:	9300      	str	r3, [sp, #0]
 80060e2:	4613      	mov	r3, r2
 80060e4:	687a      	ldr	r2, [r7, #4]
 80060e6:	68b9      	ldr	r1, [r7, #8]
 80060e8:	68f8      	ldr	r0, [r7, #12]
 80060ea:	f000 f805 	bl	80060f8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80060ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80060f0:	4618      	mov	r0, r3
 80060f2:	3730      	adds	r7, #48	; 0x30
 80060f4:	46bd      	mov	sp, r7
 80060f6:	bd80      	pop	{r7, pc}

080060f8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80060f8:	b580      	push	{r7, lr}
 80060fa:	b084      	sub	sp, #16
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	60f8      	str	r0, [r7, #12]
 8006100:	60b9      	str	r1, [r7, #8]
 8006102:	607a      	str	r2, [r7, #4]
 8006104:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006106:	68bb      	ldr	r3, [r7, #8]
 8006108:	2b00      	cmp	r3, #0
 800610a:	d103      	bne.n	8006114 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800610c:	69bb      	ldr	r3, [r7, #24]
 800610e:	69ba      	ldr	r2, [r7, #24]
 8006110:	601a      	str	r2, [r3, #0]
 8006112:	e002      	b.n	800611a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006114:	69bb      	ldr	r3, [r7, #24]
 8006116:	687a      	ldr	r2, [r7, #4]
 8006118:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800611a:	69bb      	ldr	r3, [r7, #24]
 800611c:	68fa      	ldr	r2, [r7, #12]
 800611e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006120:	69bb      	ldr	r3, [r7, #24]
 8006122:	68ba      	ldr	r2, [r7, #8]
 8006124:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006126:	2101      	movs	r1, #1
 8006128:	69b8      	ldr	r0, [r7, #24]
 800612a:	f7ff ff05 	bl	8005f38 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800612e:	69bb      	ldr	r3, [r7, #24]
 8006130:	78fa      	ldrb	r2, [r7, #3]
 8006132:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006136:	bf00      	nop
 8006138:	3710      	adds	r7, #16
 800613a:	46bd      	mov	sp, r7
 800613c:	bd80      	pop	{r7, pc}
	...

08006140 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006140:	b580      	push	{r7, lr}
 8006142:	b08e      	sub	sp, #56	; 0x38
 8006144:	af00      	add	r7, sp, #0
 8006146:	60f8      	str	r0, [r7, #12]
 8006148:	60b9      	str	r1, [r7, #8]
 800614a:	607a      	str	r2, [r7, #4]
 800614c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800614e:	2300      	movs	r3, #0
 8006150:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006156:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006158:	2b00      	cmp	r3, #0
 800615a:	d10a      	bne.n	8006172 <xQueueGenericSend+0x32>
	__asm volatile
 800615c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006160:	f383 8811 	msr	BASEPRI, r3
 8006164:	f3bf 8f6f 	isb	sy
 8006168:	f3bf 8f4f 	dsb	sy
 800616c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800616e:	bf00      	nop
 8006170:	e7fe      	b.n	8006170 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006172:	68bb      	ldr	r3, [r7, #8]
 8006174:	2b00      	cmp	r3, #0
 8006176:	d103      	bne.n	8006180 <xQueueGenericSend+0x40>
 8006178:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800617a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800617c:	2b00      	cmp	r3, #0
 800617e:	d101      	bne.n	8006184 <xQueueGenericSend+0x44>
 8006180:	2301      	movs	r3, #1
 8006182:	e000      	b.n	8006186 <xQueueGenericSend+0x46>
 8006184:	2300      	movs	r3, #0
 8006186:	2b00      	cmp	r3, #0
 8006188:	d10a      	bne.n	80061a0 <xQueueGenericSend+0x60>
	__asm volatile
 800618a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800618e:	f383 8811 	msr	BASEPRI, r3
 8006192:	f3bf 8f6f 	isb	sy
 8006196:	f3bf 8f4f 	dsb	sy
 800619a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800619c:	bf00      	nop
 800619e:	e7fe      	b.n	800619e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80061a0:	683b      	ldr	r3, [r7, #0]
 80061a2:	2b02      	cmp	r3, #2
 80061a4:	d103      	bne.n	80061ae <xQueueGenericSend+0x6e>
 80061a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061aa:	2b01      	cmp	r3, #1
 80061ac:	d101      	bne.n	80061b2 <xQueueGenericSend+0x72>
 80061ae:	2301      	movs	r3, #1
 80061b0:	e000      	b.n	80061b4 <xQueueGenericSend+0x74>
 80061b2:	2300      	movs	r3, #0
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d10a      	bne.n	80061ce <xQueueGenericSend+0x8e>
	__asm volatile
 80061b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061bc:	f383 8811 	msr	BASEPRI, r3
 80061c0:	f3bf 8f6f 	isb	sy
 80061c4:	f3bf 8f4f 	dsb	sy
 80061c8:	623b      	str	r3, [r7, #32]
}
 80061ca:	bf00      	nop
 80061cc:	e7fe      	b.n	80061cc <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80061ce:	f001 f9bd 	bl	800754c <xTaskGetSchedulerState>
 80061d2:	4603      	mov	r3, r0
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d102      	bne.n	80061de <xQueueGenericSend+0x9e>
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d101      	bne.n	80061e2 <xQueueGenericSend+0xa2>
 80061de:	2301      	movs	r3, #1
 80061e0:	e000      	b.n	80061e4 <xQueueGenericSend+0xa4>
 80061e2:	2300      	movs	r3, #0
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d10a      	bne.n	80061fe <xQueueGenericSend+0xbe>
	__asm volatile
 80061e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061ec:	f383 8811 	msr	BASEPRI, r3
 80061f0:	f3bf 8f6f 	isb	sy
 80061f4:	f3bf 8f4f 	dsb	sy
 80061f8:	61fb      	str	r3, [r7, #28]
}
 80061fa:	bf00      	nop
 80061fc:	e7fe      	b.n	80061fc <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80061fe:	f001 ff01 	bl	8008004 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006202:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006204:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006206:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006208:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800620a:	429a      	cmp	r2, r3
 800620c:	d302      	bcc.n	8006214 <xQueueGenericSend+0xd4>
 800620e:	683b      	ldr	r3, [r7, #0]
 8006210:	2b02      	cmp	r3, #2
 8006212:	d129      	bne.n	8006268 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006214:	683a      	ldr	r2, [r7, #0]
 8006216:	68b9      	ldr	r1, [r7, #8]
 8006218:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800621a:	f000 fa0b 	bl	8006634 <prvCopyDataToQueue>
 800621e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006220:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006224:	2b00      	cmp	r3, #0
 8006226:	d010      	beq.n	800624a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006228:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800622a:	3324      	adds	r3, #36	; 0x24
 800622c:	4618      	mov	r0, r3
 800622e:	f000 ffcf 	bl	80071d0 <xTaskRemoveFromEventList>
 8006232:	4603      	mov	r3, r0
 8006234:	2b00      	cmp	r3, #0
 8006236:	d013      	beq.n	8006260 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006238:	4b3f      	ldr	r3, [pc, #252]	; (8006338 <xQueueGenericSend+0x1f8>)
 800623a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800623e:	601a      	str	r2, [r3, #0]
 8006240:	f3bf 8f4f 	dsb	sy
 8006244:	f3bf 8f6f 	isb	sy
 8006248:	e00a      	b.n	8006260 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800624a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800624c:	2b00      	cmp	r3, #0
 800624e:	d007      	beq.n	8006260 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006250:	4b39      	ldr	r3, [pc, #228]	; (8006338 <xQueueGenericSend+0x1f8>)
 8006252:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006256:	601a      	str	r2, [r3, #0]
 8006258:	f3bf 8f4f 	dsb	sy
 800625c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006260:	f001 ff00 	bl	8008064 <vPortExitCritical>
				return pdPASS;
 8006264:	2301      	movs	r3, #1
 8006266:	e063      	b.n	8006330 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2b00      	cmp	r3, #0
 800626c:	d103      	bne.n	8006276 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800626e:	f001 fef9 	bl	8008064 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006272:	2300      	movs	r3, #0
 8006274:	e05c      	b.n	8006330 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006276:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006278:	2b00      	cmp	r3, #0
 800627a:	d106      	bne.n	800628a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800627c:	f107 0314 	add.w	r3, r7, #20
 8006280:	4618      	mov	r0, r3
 8006282:	f001 f809 	bl	8007298 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006286:	2301      	movs	r3, #1
 8006288:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800628a:	f001 feeb 	bl	8008064 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800628e:	f000 fd7b 	bl	8006d88 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006292:	f001 feb7 	bl	8008004 <vPortEnterCritical>
 8006296:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006298:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800629c:	b25b      	sxtb	r3, r3
 800629e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062a2:	d103      	bne.n	80062ac <xQueueGenericSend+0x16c>
 80062a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062a6:	2200      	movs	r2, #0
 80062a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80062ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062ae:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80062b2:	b25b      	sxtb	r3, r3
 80062b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062b8:	d103      	bne.n	80062c2 <xQueueGenericSend+0x182>
 80062ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062bc:	2200      	movs	r2, #0
 80062be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80062c2:	f001 fecf 	bl	8008064 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80062c6:	1d3a      	adds	r2, r7, #4
 80062c8:	f107 0314 	add.w	r3, r7, #20
 80062cc:	4611      	mov	r1, r2
 80062ce:	4618      	mov	r0, r3
 80062d0:	f000 fff8 	bl	80072c4 <xTaskCheckForTimeOut>
 80062d4:	4603      	mov	r3, r0
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d124      	bne.n	8006324 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80062da:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80062dc:	f000 faa2 	bl	8006824 <prvIsQueueFull>
 80062e0:	4603      	mov	r3, r0
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d018      	beq.n	8006318 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80062e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062e8:	3310      	adds	r3, #16
 80062ea:	687a      	ldr	r2, [r7, #4]
 80062ec:	4611      	mov	r1, r2
 80062ee:	4618      	mov	r0, r3
 80062f0:	f000 ff1e 	bl	8007130 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80062f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80062f6:	f000 fa2d 	bl	8006754 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80062fa:	f000 fd53 	bl	8006da4 <xTaskResumeAll>
 80062fe:	4603      	mov	r3, r0
 8006300:	2b00      	cmp	r3, #0
 8006302:	f47f af7c 	bne.w	80061fe <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8006306:	4b0c      	ldr	r3, [pc, #48]	; (8006338 <xQueueGenericSend+0x1f8>)
 8006308:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800630c:	601a      	str	r2, [r3, #0]
 800630e:	f3bf 8f4f 	dsb	sy
 8006312:	f3bf 8f6f 	isb	sy
 8006316:	e772      	b.n	80061fe <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006318:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800631a:	f000 fa1b 	bl	8006754 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800631e:	f000 fd41 	bl	8006da4 <xTaskResumeAll>
 8006322:	e76c      	b.n	80061fe <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006324:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006326:	f000 fa15 	bl	8006754 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800632a:	f000 fd3b 	bl	8006da4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800632e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006330:	4618      	mov	r0, r3
 8006332:	3738      	adds	r7, #56	; 0x38
 8006334:	46bd      	mov	sp, r7
 8006336:	bd80      	pop	{r7, pc}
 8006338:	e000ed04 	.word	0xe000ed04

0800633c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800633c:	b580      	push	{r7, lr}
 800633e:	b090      	sub	sp, #64	; 0x40
 8006340:	af00      	add	r7, sp, #0
 8006342:	60f8      	str	r0, [r7, #12]
 8006344:	60b9      	str	r1, [r7, #8]
 8006346:	607a      	str	r2, [r7, #4]
 8006348:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800634e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006350:	2b00      	cmp	r3, #0
 8006352:	d10a      	bne.n	800636a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8006354:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006358:	f383 8811 	msr	BASEPRI, r3
 800635c:	f3bf 8f6f 	isb	sy
 8006360:	f3bf 8f4f 	dsb	sy
 8006364:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006366:	bf00      	nop
 8006368:	e7fe      	b.n	8006368 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800636a:	68bb      	ldr	r3, [r7, #8]
 800636c:	2b00      	cmp	r3, #0
 800636e:	d103      	bne.n	8006378 <xQueueGenericSendFromISR+0x3c>
 8006370:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006372:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006374:	2b00      	cmp	r3, #0
 8006376:	d101      	bne.n	800637c <xQueueGenericSendFromISR+0x40>
 8006378:	2301      	movs	r3, #1
 800637a:	e000      	b.n	800637e <xQueueGenericSendFromISR+0x42>
 800637c:	2300      	movs	r3, #0
 800637e:	2b00      	cmp	r3, #0
 8006380:	d10a      	bne.n	8006398 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8006382:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006386:	f383 8811 	msr	BASEPRI, r3
 800638a:	f3bf 8f6f 	isb	sy
 800638e:	f3bf 8f4f 	dsb	sy
 8006392:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006394:	bf00      	nop
 8006396:	e7fe      	b.n	8006396 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006398:	683b      	ldr	r3, [r7, #0]
 800639a:	2b02      	cmp	r3, #2
 800639c:	d103      	bne.n	80063a6 <xQueueGenericSendFromISR+0x6a>
 800639e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063a2:	2b01      	cmp	r3, #1
 80063a4:	d101      	bne.n	80063aa <xQueueGenericSendFromISR+0x6e>
 80063a6:	2301      	movs	r3, #1
 80063a8:	e000      	b.n	80063ac <xQueueGenericSendFromISR+0x70>
 80063aa:	2300      	movs	r3, #0
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d10a      	bne.n	80063c6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80063b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063b4:	f383 8811 	msr	BASEPRI, r3
 80063b8:	f3bf 8f6f 	isb	sy
 80063bc:	f3bf 8f4f 	dsb	sy
 80063c0:	623b      	str	r3, [r7, #32]
}
 80063c2:	bf00      	nop
 80063c4:	e7fe      	b.n	80063c4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80063c6:	f001 feff 	bl	80081c8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80063ca:	f3ef 8211 	mrs	r2, BASEPRI
 80063ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063d2:	f383 8811 	msr	BASEPRI, r3
 80063d6:	f3bf 8f6f 	isb	sy
 80063da:	f3bf 8f4f 	dsb	sy
 80063de:	61fa      	str	r2, [r7, #28]
 80063e0:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80063e2:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80063e4:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80063e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80063ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063ee:	429a      	cmp	r2, r3
 80063f0:	d302      	bcc.n	80063f8 <xQueueGenericSendFromISR+0xbc>
 80063f2:	683b      	ldr	r3, [r7, #0]
 80063f4:	2b02      	cmp	r3, #2
 80063f6:	d12f      	bne.n	8006458 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80063f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063fa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80063fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006402:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006404:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006406:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006408:	683a      	ldr	r2, [r7, #0]
 800640a:	68b9      	ldr	r1, [r7, #8]
 800640c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800640e:	f000 f911 	bl	8006634 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006412:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8006416:	f1b3 3fff 	cmp.w	r3, #4294967295
 800641a:	d112      	bne.n	8006442 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800641c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800641e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006420:	2b00      	cmp	r3, #0
 8006422:	d016      	beq.n	8006452 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006424:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006426:	3324      	adds	r3, #36	; 0x24
 8006428:	4618      	mov	r0, r3
 800642a:	f000 fed1 	bl	80071d0 <xTaskRemoveFromEventList>
 800642e:	4603      	mov	r3, r0
 8006430:	2b00      	cmp	r3, #0
 8006432:	d00e      	beq.n	8006452 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	2b00      	cmp	r3, #0
 8006438:	d00b      	beq.n	8006452 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	2201      	movs	r2, #1
 800643e:	601a      	str	r2, [r3, #0]
 8006440:	e007      	b.n	8006452 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006442:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006446:	3301      	adds	r3, #1
 8006448:	b2db      	uxtb	r3, r3
 800644a:	b25a      	sxtb	r2, r3
 800644c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800644e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006452:	2301      	movs	r3, #1
 8006454:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8006456:	e001      	b.n	800645c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006458:	2300      	movs	r3, #0
 800645a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800645c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800645e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006460:	697b      	ldr	r3, [r7, #20]
 8006462:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006466:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006468:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800646a:	4618      	mov	r0, r3
 800646c:	3740      	adds	r7, #64	; 0x40
 800646e:	46bd      	mov	sp, r7
 8006470:	bd80      	pop	{r7, pc}
	...

08006474 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006474:	b580      	push	{r7, lr}
 8006476:	b08c      	sub	sp, #48	; 0x30
 8006478:	af00      	add	r7, sp, #0
 800647a:	60f8      	str	r0, [r7, #12]
 800647c:	60b9      	str	r1, [r7, #8]
 800647e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006480:	2300      	movs	r3, #0
 8006482:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006488:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800648a:	2b00      	cmp	r3, #0
 800648c:	d10a      	bne.n	80064a4 <xQueueReceive+0x30>
	__asm volatile
 800648e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006492:	f383 8811 	msr	BASEPRI, r3
 8006496:	f3bf 8f6f 	isb	sy
 800649a:	f3bf 8f4f 	dsb	sy
 800649e:	623b      	str	r3, [r7, #32]
}
 80064a0:	bf00      	nop
 80064a2:	e7fe      	b.n	80064a2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80064a4:	68bb      	ldr	r3, [r7, #8]
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d103      	bne.n	80064b2 <xQueueReceive+0x3e>
 80064aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d101      	bne.n	80064b6 <xQueueReceive+0x42>
 80064b2:	2301      	movs	r3, #1
 80064b4:	e000      	b.n	80064b8 <xQueueReceive+0x44>
 80064b6:	2300      	movs	r3, #0
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d10a      	bne.n	80064d2 <xQueueReceive+0x5e>
	__asm volatile
 80064bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064c0:	f383 8811 	msr	BASEPRI, r3
 80064c4:	f3bf 8f6f 	isb	sy
 80064c8:	f3bf 8f4f 	dsb	sy
 80064cc:	61fb      	str	r3, [r7, #28]
}
 80064ce:	bf00      	nop
 80064d0:	e7fe      	b.n	80064d0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80064d2:	f001 f83b 	bl	800754c <xTaskGetSchedulerState>
 80064d6:	4603      	mov	r3, r0
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d102      	bne.n	80064e2 <xQueueReceive+0x6e>
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d101      	bne.n	80064e6 <xQueueReceive+0x72>
 80064e2:	2301      	movs	r3, #1
 80064e4:	e000      	b.n	80064e8 <xQueueReceive+0x74>
 80064e6:	2300      	movs	r3, #0
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d10a      	bne.n	8006502 <xQueueReceive+0x8e>
	__asm volatile
 80064ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064f0:	f383 8811 	msr	BASEPRI, r3
 80064f4:	f3bf 8f6f 	isb	sy
 80064f8:	f3bf 8f4f 	dsb	sy
 80064fc:	61bb      	str	r3, [r7, #24]
}
 80064fe:	bf00      	nop
 8006500:	e7fe      	b.n	8006500 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006502:	f001 fd7f 	bl	8008004 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006506:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006508:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800650a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800650c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800650e:	2b00      	cmp	r3, #0
 8006510:	d01f      	beq.n	8006552 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006512:	68b9      	ldr	r1, [r7, #8]
 8006514:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006516:	f000 f8f7 	bl	8006708 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800651a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800651c:	1e5a      	subs	r2, r3, #1
 800651e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006520:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006522:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006524:	691b      	ldr	r3, [r3, #16]
 8006526:	2b00      	cmp	r3, #0
 8006528:	d00f      	beq.n	800654a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800652a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800652c:	3310      	adds	r3, #16
 800652e:	4618      	mov	r0, r3
 8006530:	f000 fe4e 	bl	80071d0 <xTaskRemoveFromEventList>
 8006534:	4603      	mov	r3, r0
 8006536:	2b00      	cmp	r3, #0
 8006538:	d007      	beq.n	800654a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800653a:	4b3d      	ldr	r3, [pc, #244]	; (8006630 <xQueueReceive+0x1bc>)
 800653c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006540:	601a      	str	r2, [r3, #0]
 8006542:	f3bf 8f4f 	dsb	sy
 8006546:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800654a:	f001 fd8b 	bl	8008064 <vPortExitCritical>
				return pdPASS;
 800654e:	2301      	movs	r3, #1
 8006550:	e069      	b.n	8006626 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	2b00      	cmp	r3, #0
 8006556:	d103      	bne.n	8006560 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006558:	f001 fd84 	bl	8008064 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800655c:	2300      	movs	r3, #0
 800655e:	e062      	b.n	8006626 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006560:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006562:	2b00      	cmp	r3, #0
 8006564:	d106      	bne.n	8006574 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006566:	f107 0310 	add.w	r3, r7, #16
 800656a:	4618      	mov	r0, r3
 800656c:	f000 fe94 	bl	8007298 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006570:	2301      	movs	r3, #1
 8006572:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006574:	f001 fd76 	bl	8008064 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006578:	f000 fc06 	bl	8006d88 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800657c:	f001 fd42 	bl	8008004 <vPortEnterCritical>
 8006580:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006582:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006586:	b25b      	sxtb	r3, r3
 8006588:	f1b3 3fff 	cmp.w	r3, #4294967295
 800658c:	d103      	bne.n	8006596 <xQueueReceive+0x122>
 800658e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006590:	2200      	movs	r2, #0
 8006592:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006596:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006598:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800659c:	b25b      	sxtb	r3, r3
 800659e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065a2:	d103      	bne.n	80065ac <xQueueReceive+0x138>
 80065a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065a6:	2200      	movs	r2, #0
 80065a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80065ac:	f001 fd5a 	bl	8008064 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80065b0:	1d3a      	adds	r2, r7, #4
 80065b2:	f107 0310 	add.w	r3, r7, #16
 80065b6:	4611      	mov	r1, r2
 80065b8:	4618      	mov	r0, r3
 80065ba:	f000 fe83 	bl	80072c4 <xTaskCheckForTimeOut>
 80065be:	4603      	mov	r3, r0
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d123      	bne.n	800660c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80065c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80065c6:	f000 f917 	bl	80067f8 <prvIsQueueEmpty>
 80065ca:	4603      	mov	r3, r0
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d017      	beq.n	8006600 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80065d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065d2:	3324      	adds	r3, #36	; 0x24
 80065d4:	687a      	ldr	r2, [r7, #4]
 80065d6:	4611      	mov	r1, r2
 80065d8:	4618      	mov	r0, r3
 80065da:	f000 fda9 	bl	8007130 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80065de:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80065e0:	f000 f8b8 	bl	8006754 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80065e4:	f000 fbde 	bl	8006da4 <xTaskResumeAll>
 80065e8:	4603      	mov	r3, r0
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d189      	bne.n	8006502 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80065ee:	4b10      	ldr	r3, [pc, #64]	; (8006630 <xQueueReceive+0x1bc>)
 80065f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80065f4:	601a      	str	r2, [r3, #0]
 80065f6:	f3bf 8f4f 	dsb	sy
 80065fa:	f3bf 8f6f 	isb	sy
 80065fe:	e780      	b.n	8006502 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006600:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006602:	f000 f8a7 	bl	8006754 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006606:	f000 fbcd 	bl	8006da4 <xTaskResumeAll>
 800660a:	e77a      	b.n	8006502 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800660c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800660e:	f000 f8a1 	bl	8006754 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006612:	f000 fbc7 	bl	8006da4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006616:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006618:	f000 f8ee 	bl	80067f8 <prvIsQueueEmpty>
 800661c:	4603      	mov	r3, r0
 800661e:	2b00      	cmp	r3, #0
 8006620:	f43f af6f 	beq.w	8006502 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006624:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006626:	4618      	mov	r0, r3
 8006628:	3730      	adds	r7, #48	; 0x30
 800662a:	46bd      	mov	sp, r7
 800662c:	bd80      	pop	{r7, pc}
 800662e:	bf00      	nop
 8006630:	e000ed04 	.word	0xe000ed04

08006634 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006634:	b580      	push	{r7, lr}
 8006636:	b086      	sub	sp, #24
 8006638:	af00      	add	r7, sp, #0
 800663a:	60f8      	str	r0, [r7, #12]
 800663c:	60b9      	str	r1, [r7, #8]
 800663e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006640:	2300      	movs	r3, #0
 8006642:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006648:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800664e:	2b00      	cmp	r3, #0
 8006650:	d10d      	bne.n	800666e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	2b00      	cmp	r3, #0
 8006658:	d14d      	bne.n	80066f6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	689b      	ldr	r3, [r3, #8]
 800665e:	4618      	mov	r0, r3
 8006660:	f000 ff92 	bl	8007588 <xTaskPriorityDisinherit>
 8006664:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	2200      	movs	r2, #0
 800666a:	609a      	str	r2, [r3, #8]
 800666c:	e043      	b.n	80066f6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	2b00      	cmp	r3, #0
 8006672:	d119      	bne.n	80066a8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	6858      	ldr	r0, [r3, #4]
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800667c:	461a      	mov	r2, r3
 800667e:	68b9      	ldr	r1, [r7, #8]
 8006680:	f001 fff6 	bl	8008670 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	685a      	ldr	r2, [r3, #4]
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800668c:	441a      	add	r2, r3
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	685a      	ldr	r2, [r3, #4]
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	689b      	ldr	r3, [r3, #8]
 800669a:	429a      	cmp	r2, r3
 800669c:	d32b      	bcc.n	80066f6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	681a      	ldr	r2, [r3, #0]
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	605a      	str	r2, [r3, #4]
 80066a6:	e026      	b.n	80066f6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	68d8      	ldr	r0, [r3, #12]
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066b0:	461a      	mov	r2, r3
 80066b2:	68b9      	ldr	r1, [r7, #8]
 80066b4:	f001 ffdc 	bl	8008670 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	68da      	ldr	r2, [r3, #12]
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066c0:	425b      	negs	r3, r3
 80066c2:	441a      	add	r2, r3
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	68da      	ldr	r2, [r3, #12]
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	429a      	cmp	r2, r3
 80066d2:	d207      	bcs.n	80066e4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	689a      	ldr	r2, [r3, #8]
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066dc:	425b      	negs	r3, r3
 80066de:	441a      	add	r2, r3
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	2b02      	cmp	r3, #2
 80066e8:	d105      	bne.n	80066f6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80066ea:	693b      	ldr	r3, [r7, #16]
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d002      	beq.n	80066f6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80066f0:	693b      	ldr	r3, [r7, #16]
 80066f2:	3b01      	subs	r3, #1
 80066f4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80066f6:	693b      	ldr	r3, [r7, #16]
 80066f8:	1c5a      	adds	r2, r3, #1
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80066fe:	697b      	ldr	r3, [r7, #20]
}
 8006700:	4618      	mov	r0, r3
 8006702:	3718      	adds	r7, #24
 8006704:	46bd      	mov	sp, r7
 8006706:	bd80      	pop	{r7, pc}

08006708 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006708:	b580      	push	{r7, lr}
 800670a:	b082      	sub	sp, #8
 800670c:	af00      	add	r7, sp, #0
 800670e:	6078      	str	r0, [r7, #4]
 8006710:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006716:	2b00      	cmp	r3, #0
 8006718:	d018      	beq.n	800674c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	68da      	ldr	r2, [r3, #12]
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006722:	441a      	add	r2, r3
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	68da      	ldr	r2, [r3, #12]
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	689b      	ldr	r3, [r3, #8]
 8006730:	429a      	cmp	r2, r3
 8006732:	d303      	bcc.n	800673c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681a      	ldr	r2, [r3, #0]
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	68d9      	ldr	r1, [r3, #12]
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006744:	461a      	mov	r2, r3
 8006746:	6838      	ldr	r0, [r7, #0]
 8006748:	f001 ff92 	bl	8008670 <memcpy>
	}
}
 800674c:	bf00      	nop
 800674e:	3708      	adds	r7, #8
 8006750:	46bd      	mov	sp, r7
 8006752:	bd80      	pop	{r7, pc}

08006754 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006754:	b580      	push	{r7, lr}
 8006756:	b084      	sub	sp, #16
 8006758:	af00      	add	r7, sp, #0
 800675a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800675c:	f001 fc52 	bl	8008004 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006766:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006768:	e011      	b.n	800678e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800676e:	2b00      	cmp	r3, #0
 8006770:	d012      	beq.n	8006798 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	3324      	adds	r3, #36	; 0x24
 8006776:	4618      	mov	r0, r3
 8006778:	f000 fd2a 	bl	80071d0 <xTaskRemoveFromEventList>
 800677c:	4603      	mov	r3, r0
 800677e:	2b00      	cmp	r3, #0
 8006780:	d001      	beq.n	8006786 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006782:	f000 fe01 	bl	8007388 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006786:	7bfb      	ldrb	r3, [r7, #15]
 8006788:	3b01      	subs	r3, #1
 800678a:	b2db      	uxtb	r3, r3
 800678c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800678e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006792:	2b00      	cmp	r3, #0
 8006794:	dce9      	bgt.n	800676a <prvUnlockQueue+0x16>
 8006796:	e000      	b.n	800679a <prvUnlockQueue+0x46>
					break;
 8006798:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	22ff      	movs	r2, #255	; 0xff
 800679e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80067a2:	f001 fc5f 	bl	8008064 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80067a6:	f001 fc2d 	bl	8008004 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80067b0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80067b2:	e011      	b.n	80067d8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	691b      	ldr	r3, [r3, #16]
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d012      	beq.n	80067e2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	3310      	adds	r3, #16
 80067c0:	4618      	mov	r0, r3
 80067c2:	f000 fd05 	bl	80071d0 <xTaskRemoveFromEventList>
 80067c6:	4603      	mov	r3, r0
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d001      	beq.n	80067d0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80067cc:	f000 fddc 	bl	8007388 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80067d0:	7bbb      	ldrb	r3, [r7, #14]
 80067d2:	3b01      	subs	r3, #1
 80067d4:	b2db      	uxtb	r3, r3
 80067d6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80067d8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80067dc:	2b00      	cmp	r3, #0
 80067de:	dce9      	bgt.n	80067b4 <prvUnlockQueue+0x60>
 80067e0:	e000      	b.n	80067e4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80067e2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	22ff      	movs	r2, #255	; 0xff
 80067e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80067ec:	f001 fc3a 	bl	8008064 <vPortExitCritical>
}
 80067f0:	bf00      	nop
 80067f2:	3710      	adds	r7, #16
 80067f4:	46bd      	mov	sp, r7
 80067f6:	bd80      	pop	{r7, pc}

080067f8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80067f8:	b580      	push	{r7, lr}
 80067fa:	b084      	sub	sp, #16
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006800:	f001 fc00 	bl	8008004 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006808:	2b00      	cmp	r3, #0
 800680a:	d102      	bne.n	8006812 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800680c:	2301      	movs	r3, #1
 800680e:	60fb      	str	r3, [r7, #12]
 8006810:	e001      	b.n	8006816 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006812:	2300      	movs	r3, #0
 8006814:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006816:	f001 fc25 	bl	8008064 <vPortExitCritical>

	return xReturn;
 800681a:	68fb      	ldr	r3, [r7, #12]
}
 800681c:	4618      	mov	r0, r3
 800681e:	3710      	adds	r7, #16
 8006820:	46bd      	mov	sp, r7
 8006822:	bd80      	pop	{r7, pc}

08006824 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006824:	b580      	push	{r7, lr}
 8006826:	b084      	sub	sp, #16
 8006828:	af00      	add	r7, sp, #0
 800682a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800682c:	f001 fbea 	bl	8008004 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006838:	429a      	cmp	r2, r3
 800683a:	d102      	bne.n	8006842 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800683c:	2301      	movs	r3, #1
 800683e:	60fb      	str	r3, [r7, #12]
 8006840:	e001      	b.n	8006846 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006842:	2300      	movs	r3, #0
 8006844:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006846:	f001 fc0d 	bl	8008064 <vPortExitCritical>

	return xReturn;
 800684a:	68fb      	ldr	r3, [r7, #12]
}
 800684c:	4618      	mov	r0, r3
 800684e:	3710      	adds	r7, #16
 8006850:	46bd      	mov	sp, r7
 8006852:	bd80      	pop	{r7, pc}

08006854 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006854:	b480      	push	{r7}
 8006856:	b085      	sub	sp, #20
 8006858:	af00      	add	r7, sp, #0
 800685a:	6078      	str	r0, [r7, #4]
 800685c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800685e:	2300      	movs	r3, #0
 8006860:	60fb      	str	r3, [r7, #12]
 8006862:	e014      	b.n	800688e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006864:	4a0f      	ldr	r2, [pc, #60]	; (80068a4 <vQueueAddToRegistry+0x50>)
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800686c:	2b00      	cmp	r3, #0
 800686e:	d10b      	bne.n	8006888 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006870:	490c      	ldr	r1, [pc, #48]	; (80068a4 <vQueueAddToRegistry+0x50>)
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	683a      	ldr	r2, [r7, #0]
 8006876:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800687a:	4a0a      	ldr	r2, [pc, #40]	; (80068a4 <vQueueAddToRegistry+0x50>)
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	00db      	lsls	r3, r3, #3
 8006880:	4413      	add	r3, r2
 8006882:	687a      	ldr	r2, [r7, #4]
 8006884:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006886:	e006      	b.n	8006896 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	3301      	adds	r3, #1
 800688c:	60fb      	str	r3, [r7, #12]
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	2b07      	cmp	r3, #7
 8006892:	d9e7      	bls.n	8006864 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006894:	bf00      	nop
 8006896:	bf00      	nop
 8006898:	3714      	adds	r7, #20
 800689a:	46bd      	mov	sp, r7
 800689c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a0:	4770      	bx	lr
 80068a2:	bf00      	nop
 80068a4:	20004be0 	.word	0x20004be0

080068a8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80068a8:	b580      	push	{r7, lr}
 80068aa:	b086      	sub	sp, #24
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	60f8      	str	r0, [r7, #12]
 80068b0:	60b9      	str	r1, [r7, #8]
 80068b2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80068b8:	f001 fba4 	bl	8008004 <vPortEnterCritical>
 80068bc:	697b      	ldr	r3, [r7, #20]
 80068be:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80068c2:	b25b      	sxtb	r3, r3
 80068c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068c8:	d103      	bne.n	80068d2 <vQueueWaitForMessageRestricted+0x2a>
 80068ca:	697b      	ldr	r3, [r7, #20]
 80068cc:	2200      	movs	r2, #0
 80068ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80068d2:	697b      	ldr	r3, [r7, #20]
 80068d4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80068d8:	b25b      	sxtb	r3, r3
 80068da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068de:	d103      	bne.n	80068e8 <vQueueWaitForMessageRestricted+0x40>
 80068e0:	697b      	ldr	r3, [r7, #20]
 80068e2:	2200      	movs	r2, #0
 80068e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80068e8:	f001 fbbc 	bl	8008064 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80068ec:	697b      	ldr	r3, [r7, #20]
 80068ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d106      	bne.n	8006902 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80068f4:	697b      	ldr	r3, [r7, #20]
 80068f6:	3324      	adds	r3, #36	; 0x24
 80068f8:	687a      	ldr	r2, [r7, #4]
 80068fa:	68b9      	ldr	r1, [r7, #8]
 80068fc:	4618      	mov	r0, r3
 80068fe:	f000 fc3b 	bl	8007178 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006902:	6978      	ldr	r0, [r7, #20]
 8006904:	f7ff ff26 	bl	8006754 <prvUnlockQueue>
	}
 8006908:	bf00      	nop
 800690a:	3718      	adds	r7, #24
 800690c:	46bd      	mov	sp, r7
 800690e:	bd80      	pop	{r7, pc}

08006910 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006910:	b580      	push	{r7, lr}
 8006912:	b08e      	sub	sp, #56	; 0x38
 8006914:	af04      	add	r7, sp, #16
 8006916:	60f8      	str	r0, [r7, #12]
 8006918:	60b9      	str	r1, [r7, #8]
 800691a:	607a      	str	r2, [r7, #4]
 800691c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800691e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006920:	2b00      	cmp	r3, #0
 8006922:	d10a      	bne.n	800693a <xTaskCreateStatic+0x2a>
	__asm volatile
 8006924:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006928:	f383 8811 	msr	BASEPRI, r3
 800692c:	f3bf 8f6f 	isb	sy
 8006930:	f3bf 8f4f 	dsb	sy
 8006934:	623b      	str	r3, [r7, #32]
}
 8006936:	bf00      	nop
 8006938:	e7fe      	b.n	8006938 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800693a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800693c:	2b00      	cmp	r3, #0
 800693e:	d10a      	bne.n	8006956 <xTaskCreateStatic+0x46>
	__asm volatile
 8006940:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006944:	f383 8811 	msr	BASEPRI, r3
 8006948:	f3bf 8f6f 	isb	sy
 800694c:	f3bf 8f4f 	dsb	sy
 8006950:	61fb      	str	r3, [r7, #28]
}
 8006952:	bf00      	nop
 8006954:	e7fe      	b.n	8006954 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006956:	235c      	movs	r3, #92	; 0x5c
 8006958:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800695a:	693b      	ldr	r3, [r7, #16]
 800695c:	2b5c      	cmp	r3, #92	; 0x5c
 800695e:	d00a      	beq.n	8006976 <xTaskCreateStatic+0x66>
	__asm volatile
 8006960:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006964:	f383 8811 	msr	BASEPRI, r3
 8006968:	f3bf 8f6f 	isb	sy
 800696c:	f3bf 8f4f 	dsb	sy
 8006970:	61bb      	str	r3, [r7, #24]
}
 8006972:	bf00      	nop
 8006974:	e7fe      	b.n	8006974 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006976:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006978:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800697a:	2b00      	cmp	r3, #0
 800697c:	d01e      	beq.n	80069bc <xTaskCreateStatic+0xac>
 800697e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006980:	2b00      	cmp	r3, #0
 8006982:	d01b      	beq.n	80069bc <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006984:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006986:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800698a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800698c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800698e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006990:	2202      	movs	r2, #2
 8006992:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006996:	2300      	movs	r3, #0
 8006998:	9303      	str	r3, [sp, #12]
 800699a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800699c:	9302      	str	r3, [sp, #8]
 800699e:	f107 0314 	add.w	r3, r7, #20
 80069a2:	9301      	str	r3, [sp, #4]
 80069a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069a6:	9300      	str	r3, [sp, #0]
 80069a8:	683b      	ldr	r3, [r7, #0]
 80069aa:	687a      	ldr	r2, [r7, #4]
 80069ac:	68b9      	ldr	r1, [r7, #8]
 80069ae:	68f8      	ldr	r0, [r7, #12]
 80069b0:	f000 f850 	bl	8006a54 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80069b4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80069b6:	f000 f8dd 	bl	8006b74 <prvAddNewTaskToReadyList>
 80069ba:	e001      	b.n	80069c0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80069bc:	2300      	movs	r3, #0
 80069be:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80069c0:	697b      	ldr	r3, [r7, #20]
	}
 80069c2:	4618      	mov	r0, r3
 80069c4:	3728      	adds	r7, #40	; 0x28
 80069c6:	46bd      	mov	sp, r7
 80069c8:	bd80      	pop	{r7, pc}

080069ca <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80069ca:	b580      	push	{r7, lr}
 80069cc:	b08c      	sub	sp, #48	; 0x30
 80069ce:	af04      	add	r7, sp, #16
 80069d0:	60f8      	str	r0, [r7, #12]
 80069d2:	60b9      	str	r1, [r7, #8]
 80069d4:	603b      	str	r3, [r7, #0]
 80069d6:	4613      	mov	r3, r2
 80069d8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80069da:	88fb      	ldrh	r3, [r7, #6]
 80069dc:	009b      	lsls	r3, r3, #2
 80069de:	4618      	mov	r0, r3
 80069e0:	f001 fc32 	bl	8008248 <pvPortMalloc>
 80069e4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80069e6:	697b      	ldr	r3, [r7, #20]
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d00e      	beq.n	8006a0a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80069ec:	205c      	movs	r0, #92	; 0x5c
 80069ee:	f001 fc2b 	bl	8008248 <pvPortMalloc>
 80069f2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80069f4:	69fb      	ldr	r3, [r7, #28]
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d003      	beq.n	8006a02 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80069fa:	69fb      	ldr	r3, [r7, #28]
 80069fc:	697a      	ldr	r2, [r7, #20]
 80069fe:	631a      	str	r2, [r3, #48]	; 0x30
 8006a00:	e005      	b.n	8006a0e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006a02:	6978      	ldr	r0, [r7, #20]
 8006a04:	f001 fcec 	bl	80083e0 <vPortFree>
 8006a08:	e001      	b.n	8006a0e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006a0a:	2300      	movs	r3, #0
 8006a0c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006a0e:	69fb      	ldr	r3, [r7, #28]
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d017      	beq.n	8006a44 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006a14:	69fb      	ldr	r3, [r7, #28]
 8006a16:	2200      	movs	r2, #0
 8006a18:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006a1c:	88fa      	ldrh	r2, [r7, #6]
 8006a1e:	2300      	movs	r3, #0
 8006a20:	9303      	str	r3, [sp, #12]
 8006a22:	69fb      	ldr	r3, [r7, #28]
 8006a24:	9302      	str	r3, [sp, #8]
 8006a26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a28:	9301      	str	r3, [sp, #4]
 8006a2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a2c:	9300      	str	r3, [sp, #0]
 8006a2e:	683b      	ldr	r3, [r7, #0]
 8006a30:	68b9      	ldr	r1, [r7, #8]
 8006a32:	68f8      	ldr	r0, [r7, #12]
 8006a34:	f000 f80e 	bl	8006a54 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006a38:	69f8      	ldr	r0, [r7, #28]
 8006a3a:	f000 f89b 	bl	8006b74 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006a3e:	2301      	movs	r3, #1
 8006a40:	61bb      	str	r3, [r7, #24]
 8006a42:	e002      	b.n	8006a4a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006a44:	f04f 33ff 	mov.w	r3, #4294967295
 8006a48:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006a4a:	69bb      	ldr	r3, [r7, #24]
	}
 8006a4c:	4618      	mov	r0, r3
 8006a4e:	3720      	adds	r7, #32
 8006a50:	46bd      	mov	sp, r7
 8006a52:	bd80      	pop	{r7, pc}

08006a54 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006a54:	b580      	push	{r7, lr}
 8006a56:	b088      	sub	sp, #32
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	60f8      	str	r0, [r7, #12]
 8006a5c:	60b9      	str	r1, [r7, #8]
 8006a5e:	607a      	str	r2, [r7, #4]
 8006a60:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006a62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a64:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	009b      	lsls	r3, r3, #2
 8006a6a:	461a      	mov	r2, r3
 8006a6c:	21a5      	movs	r1, #165	; 0xa5
 8006a6e:	f001 fe0d 	bl	800868c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006a72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a74:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006a7c:	3b01      	subs	r3, #1
 8006a7e:	009b      	lsls	r3, r3, #2
 8006a80:	4413      	add	r3, r2
 8006a82:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006a84:	69bb      	ldr	r3, [r7, #24]
 8006a86:	f023 0307 	bic.w	r3, r3, #7
 8006a8a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006a8c:	69bb      	ldr	r3, [r7, #24]
 8006a8e:	f003 0307 	and.w	r3, r3, #7
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d00a      	beq.n	8006aac <prvInitialiseNewTask+0x58>
	__asm volatile
 8006a96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a9a:	f383 8811 	msr	BASEPRI, r3
 8006a9e:	f3bf 8f6f 	isb	sy
 8006aa2:	f3bf 8f4f 	dsb	sy
 8006aa6:	617b      	str	r3, [r7, #20]
}
 8006aa8:	bf00      	nop
 8006aaa:	e7fe      	b.n	8006aaa <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006aac:	68bb      	ldr	r3, [r7, #8]
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d01f      	beq.n	8006af2 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006ab2:	2300      	movs	r3, #0
 8006ab4:	61fb      	str	r3, [r7, #28]
 8006ab6:	e012      	b.n	8006ade <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006ab8:	68ba      	ldr	r2, [r7, #8]
 8006aba:	69fb      	ldr	r3, [r7, #28]
 8006abc:	4413      	add	r3, r2
 8006abe:	7819      	ldrb	r1, [r3, #0]
 8006ac0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006ac2:	69fb      	ldr	r3, [r7, #28]
 8006ac4:	4413      	add	r3, r2
 8006ac6:	3334      	adds	r3, #52	; 0x34
 8006ac8:	460a      	mov	r2, r1
 8006aca:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006acc:	68ba      	ldr	r2, [r7, #8]
 8006ace:	69fb      	ldr	r3, [r7, #28]
 8006ad0:	4413      	add	r3, r2
 8006ad2:	781b      	ldrb	r3, [r3, #0]
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d006      	beq.n	8006ae6 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006ad8:	69fb      	ldr	r3, [r7, #28]
 8006ada:	3301      	adds	r3, #1
 8006adc:	61fb      	str	r3, [r7, #28]
 8006ade:	69fb      	ldr	r3, [r7, #28]
 8006ae0:	2b0f      	cmp	r3, #15
 8006ae2:	d9e9      	bls.n	8006ab8 <prvInitialiseNewTask+0x64>
 8006ae4:	e000      	b.n	8006ae8 <prvInitialiseNewTask+0x94>
			{
				break;
 8006ae6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006ae8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006aea:	2200      	movs	r2, #0
 8006aec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006af0:	e003      	b.n	8006afa <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006af2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006af4:	2200      	movs	r2, #0
 8006af6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006afa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006afc:	2b37      	cmp	r3, #55	; 0x37
 8006afe:	d901      	bls.n	8006b04 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006b00:	2337      	movs	r3, #55	; 0x37
 8006b02:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006b04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b06:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006b08:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006b0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b0c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006b0e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006b10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b12:	2200      	movs	r2, #0
 8006b14:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006b16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b18:	3304      	adds	r3, #4
 8006b1a:	4618      	mov	r0, r3
 8006b1c:	f7ff f978 	bl	8005e10 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006b20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b22:	3318      	adds	r3, #24
 8006b24:	4618      	mov	r0, r3
 8006b26:	f7ff f973 	bl	8005e10 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006b2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b2e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006b30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b32:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006b36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b38:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006b3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b3e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006b40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b42:	2200      	movs	r2, #0
 8006b44:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006b46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b48:	2200      	movs	r2, #0
 8006b4a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006b4e:	683a      	ldr	r2, [r7, #0]
 8006b50:	68f9      	ldr	r1, [r7, #12]
 8006b52:	69b8      	ldr	r0, [r7, #24]
 8006b54:	f001 f928 	bl	8007da8 <pxPortInitialiseStack>
 8006b58:	4602      	mov	r2, r0
 8006b5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b5c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006b5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d002      	beq.n	8006b6a <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006b64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b66:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b68:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006b6a:	bf00      	nop
 8006b6c:	3720      	adds	r7, #32
 8006b6e:	46bd      	mov	sp, r7
 8006b70:	bd80      	pop	{r7, pc}
	...

08006b74 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006b74:	b580      	push	{r7, lr}
 8006b76:	b082      	sub	sp, #8
 8006b78:	af00      	add	r7, sp, #0
 8006b7a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006b7c:	f001 fa42 	bl	8008004 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006b80:	4b2d      	ldr	r3, [pc, #180]	; (8006c38 <prvAddNewTaskToReadyList+0xc4>)
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	3301      	adds	r3, #1
 8006b86:	4a2c      	ldr	r2, [pc, #176]	; (8006c38 <prvAddNewTaskToReadyList+0xc4>)
 8006b88:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006b8a:	4b2c      	ldr	r3, [pc, #176]	; (8006c3c <prvAddNewTaskToReadyList+0xc8>)
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d109      	bne.n	8006ba6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006b92:	4a2a      	ldr	r2, [pc, #168]	; (8006c3c <prvAddNewTaskToReadyList+0xc8>)
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006b98:	4b27      	ldr	r3, [pc, #156]	; (8006c38 <prvAddNewTaskToReadyList+0xc4>)
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	2b01      	cmp	r3, #1
 8006b9e:	d110      	bne.n	8006bc2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006ba0:	f000 fc16 	bl	80073d0 <prvInitialiseTaskLists>
 8006ba4:	e00d      	b.n	8006bc2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006ba6:	4b26      	ldr	r3, [pc, #152]	; (8006c40 <prvAddNewTaskToReadyList+0xcc>)
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d109      	bne.n	8006bc2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006bae:	4b23      	ldr	r3, [pc, #140]	; (8006c3c <prvAddNewTaskToReadyList+0xc8>)
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bb8:	429a      	cmp	r2, r3
 8006bba:	d802      	bhi.n	8006bc2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006bbc:	4a1f      	ldr	r2, [pc, #124]	; (8006c3c <prvAddNewTaskToReadyList+0xc8>)
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006bc2:	4b20      	ldr	r3, [pc, #128]	; (8006c44 <prvAddNewTaskToReadyList+0xd0>)
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	3301      	adds	r3, #1
 8006bc8:	4a1e      	ldr	r2, [pc, #120]	; (8006c44 <prvAddNewTaskToReadyList+0xd0>)
 8006bca:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006bcc:	4b1d      	ldr	r3, [pc, #116]	; (8006c44 <prvAddNewTaskToReadyList+0xd0>)
 8006bce:	681a      	ldr	r2, [r3, #0]
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bd8:	4b1b      	ldr	r3, [pc, #108]	; (8006c48 <prvAddNewTaskToReadyList+0xd4>)
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	429a      	cmp	r2, r3
 8006bde:	d903      	bls.n	8006be8 <prvAddNewTaskToReadyList+0x74>
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006be4:	4a18      	ldr	r2, [pc, #96]	; (8006c48 <prvAddNewTaskToReadyList+0xd4>)
 8006be6:	6013      	str	r3, [r2, #0]
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bec:	4613      	mov	r3, r2
 8006bee:	009b      	lsls	r3, r3, #2
 8006bf0:	4413      	add	r3, r2
 8006bf2:	009b      	lsls	r3, r3, #2
 8006bf4:	4a15      	ldr	r2, [pc, #84]	; (8006c4c <prvAddNewTaskToReadyList+0xd8>)
 8006bf6:	441a      	add	r2, r3
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	3304      	adds	r3, #4
 8006bfc:	4619      	mov	r1, r3
 8006bfe:	4610      	mov	r0, r2
 8006c00:	f7ff f913 	bl	8005e2a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006c04:	f001 fa2e 	bl	8008064 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006c08:	4b0d      	ldr	r3, [pc, #52]	; (8006c40 <prvAddNewTaskToReadyList+0xcc>)
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d00e      	beq.n	8006c2e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006c10:	4b0a      	ldr	r3, [pc, #40]	; (8006c3c <prvAddNewTaskToReadyList+0xc8>)
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c1a:	429a      	cmp	r2, r3
 8006c1c:	d207      	bcs.n	8006c2e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006c1e:	4b0c      	ldr	r3, [pc, #48]	; (8006c50 <prvAddNewTaskToReadyList+0xdc>)
 8006c20:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c24:	601a      	str	r2, [r3, #0]
 8006c26:	f3bf 8f4f 	dsb	sy
 8006c2a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006c2e:	bf00      	nop
 8006c30:	3708      	adds	r7, #8
 8006c32:	46bd      	mov	sp, r7
 8006c34:	bd80      	pop	{r7, pc}
 8006c36:	bf00      	nop
 8006c38:	20000c24 	.word	0x20000c24
 8006c3c:	20000750 	.word	0x20000750
 8006c40:	20000c30 	.word	0x20000c30
 8006c44:	20000c40 	.word	0x20000c40
 8006c48:	20000c2c 	.word	0x20000c2c
 8006c4c:	20000754 	.word	0x20000754
 8006c50:	e000ed04 	.word	0xe000ed04

08006c54 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006c54:	b580      	push	{r7, lr}
 8006c56:	b084      	sub	sp, #16
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006c5c:	2300      	movs	r3, #0
 8006c5e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d017      	beq.n	8006c96 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006c66:	4b13      	ldr	r3, [pc, #76]	; (8006cb4 <vTaskDelay+0x60>)
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d00a      	beq.n	8006c84 <vTaskDelay+0x30>
	__asm volatile
 8006c6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c72:	f383 8811 	msr	BASEPRI, r3
 8006c76:	f3bf 8f6f 	isb	sy
 8006c7a:	f3bf 8f4f 	dsb	sy
 8006c7e:	60bb      	str	r3, [r7, #8]
}
 8006c80:	bf00      	nop
 8006c82:	e7fe      	b.n	8006c82 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006c84:	f000 f880 	bl	8006d88 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006c88:	2100      	movs	r1, #0
 8006c8a:	6878      	ldr	r0, [r7, #4]
 8006c8c:	f000 fcea 	bl	8007664 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006c90:	f000 f888 	bl	8006da4 <xTaskResumeAll>
 8006c94:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d107      	bne.n	8006cac <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8006c9c:	4b06      	ldr	r3, [pc, #24]	; (8006cb8 <vTaskDelay+0x64>)
 8006c9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ca2:	601a      	str	r2, [r3, #0]
 8006ca4:	f3bf 8f4f 	dsb	sy
 8006ca8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006cac:	bf00      	nop
 8006cae:	3710      	adds	r7, #16
 8006cb0:	46bd      	mov	sp, r7
 8006cb2:	bd80      	pop	{r7, pc}
 8006cb4:	20000c4c 	.word	0x20000c4c
 8006cb8:	e000ed04 	.word	0xe000ed04

08006cbc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006cbc:	b580      	push	{r7, lr}
 8006cbe:	b08a      	sub	sp, #40	; 0x28
 8006cc0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006cc2:	2300      	movs	r3, #0
 8006cc4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006cc6:	2300      	movs	r3, #0
 8006cc8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006cca:	463a      	mov	r2, r7
 8006ccc:	1d39      	adds	r1, r7, #4
 8006cce:	f107 0308 	add.w	r3, r7, #8
 8006cd2:	4618      	mov	r0, r3
 8006cd4:	f7ff f848 	bl	8005d68 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006cd8:	6839      	ldr	r1, [r7, #0]
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	68ba      	ldr	r2, [r7, #8]
 8006cde:	9202      	str	r2, [sp, #8]
 8006ce0:	9301      	str	r3, [sp, #4]
 8006ce2:	2300      	movs	r3, #0
 8006ce4:	9300      	str	r3, [sp, #0]
 8006ce6:	2300      	movs	r3, #0
 8006ce8:	460a      	mov	r2, r1
 8006cea:	4921      	ldr	r1, [pc, #132]	; (8006d70 <vTaskStartScheduler+0xb4>)
 8006cec:	4821      	ldr	r0, [pc, #132]	; (8006d74 <vTaskStartScheduler+0xb8>)
 8006cee:	f7ff fe0f 	bl	8006910 <xTaskCreateStatic>
 8006cf2:	4603      	mov	r3, r0
 8006cf4:	4a20      	ldr	r2, [pc, #128]	; (8006d78 <vTaskStartScheduler+0xbc>)
 8006cf6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006cf8:	4b1f      	ldr	r3, [pc, #124]	; (8006d78 <vTaskStartScheduler+0xbc>)
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d002      	beq.n	8006d06 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006d00:	2301      	movs	r3, #1
 8006d02:	617b      	str	r3, [r7, #20]
 8006d04:	e001      	b.n	8006d0a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006d06:	2300      	movs	r3, #0
 8006d08:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006d0a:	697b      	ldr	r3, [r7, #20]
 8006d0c:	2b01      	cmp	r3, #1
 8006d0e:	d102      	bne.n	8006d16 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006d10:	f000 fcfc 	bl	800770c <xTimerCreateTimerTask>
 8006d14:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006d16:	697b      	ldr	r3, [r7, #20]
 8006d18:	2b01      	cmp	r3, #1
 8006d1a:	d116      	bne.n	8006d4a <vTaskStartScheduler+0x8e>
	__asm volatile
 8006d1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d20:	f383 8811 	msr	BASEPRI, r3
 8006d24:	f3bf 8f6f 	isb	sy
 8006d28:	f3bf 8f4f 	dsb	sy
 8006d2c:	613b      	str	r3, [r7, #16]
}
 8006d2e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006d30:	4b12      	ldr	r3, [pc, #72]	; (8006d7c <vTaskStartScheduler+0xc0>)
 8006d32:	f04f 32ff 	mov.w	r2, #4294967295
 8006d36:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006d38:	4b11      	ldr	r3, [pc, #68]	; (8006d80 <vTaskStartScheduler+0xc4>)
 8006d3a:	2201      	movs	r2, #1
 8006d3c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006d3e:	4b11      	ldr	r3, [pc, #68]	; (8006d84 <vTaskStartScheduler+0xc8>)
 8006d40:	2200      	movs	r2, #0
 8006d42:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006d44:	f001 f8bc 	bl	8007ec0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006d48:	e00e      	b.n	8006d68 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006d4a:	697b      	ldr	r3, [r7, #20]
 8006d4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d50:	d10a      	bne.n	8006d68 <vTaskStartScheduler+0xac>
	__asm volatile
 8006d52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d56:	f383 8811 	msr	BASEPRI, r3
 8006d5a:	f3bf 8f6f 	isb	sy
 8006d5e:	f3bf 8f4f 	dsb	sy
 8006d62:	60fb      	str	r3, [r7, #12]
}
 8006d64:	bf00      	nop
 8006d66:	e7fe      	b.n	8006d66 <vTaskStartScheduler+0xaa>
}
 8006d68:	bf00      	nop
 8006d6a:	3718      	adds	r7, #24
 8006d6c:	46bd      	mov	sp, r7
 8006d6e:	bd80      	pop	{r7, pc}
 8006d70:	08009b3c 	.word	0x08009b3c
 8006d74:	080073a1 	.word	0x080073a1
 8006d78:	20000c48 	.word	0x20000c48
 8006d7c:	20000c44 	.word	0x20000c44
 8006d80:	20000c30 	.word	0x20000c30
 8006d84:	20000c28 	.word	0x20000c28

08006d88 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006d88:	b480      	push	{r7}
 8006d8a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006d8c:	4b04      	ldr	r3, [pc, #16]	; (8006da0 <vTaskSuspendAll+0x18>)
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	3301      	adds	r3, #1
 8006d92:	4a03      	ldr	r2, [pc, #12]	; (8006da0 <vTaskSuspendAll+0x18>)
 8006d94:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006d96:	bf00      	nop
 8006d98:	46bd      	mov	sp, r7
 8006d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d9e:	4770      	bx	lr
 8006da0:	20000c4c 	.word	0x20000c4c

08006da4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006da4:	b580      	push	{r7, lr}
 8006da6:	b084      	sub	sp, #16
 8006da8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006daa:	2300      	movs	r3, #0
 8006dac:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006dae:	2300      	movs	r3, #0
 8006db0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006db2:	4b42      	ldr	r3, [pc, #264]	; (8006ebc <xTaskResumeAll+0x118>)
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d10a      	bne.n	8006dd0 <xTaskResumeAll+0x2c>
	__asm volatile
 8006dba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dbe:	f383 8811 	msr	BASEPRI, r3
 8006dc2:	f3bf 8f6f 	isb	sy
 8006dc6:	f3bf 8f4f 	dsb	sy
 8006dca:	603b      	str	r3, [r7, #0]
}
 8006dcc:	bf00      	nop
 8006dce:	e7fe      	b.n	8006dce <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006dd0:	f001 f918 	bl	8008004 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006dd4:	4b39      	ldr	r3, [pc, #228]	; (8006ebc <xTaskResumeAll+0x118>)
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	3b01      	subs	r3, #1
 8006dda:	4a38      	ldr	r2, [pc, #224]	; (8006ebc <xTaskResumeAll+0x118>)
 8006ddc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006dde:	4b37      	ldr	r3, [pc, #220]	; (8006ebc <xTaskResumeAll+0x118>)
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d162      	bne.n	8006eac <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006de6:	4b36      	ldr	r3, [pc, #216]	; (8006ec0 <xTaskResumeAll+0x11c>)
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d05e      	beq.n	8006eac <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006dee:	e02f      	b.n	8006e50 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006df0:	4b34      	ldr	r3, [pc, #208]	; (8006ec4 <xTaskResumeAll+0x120>)
 8006df2:	68db      	ldr	r3, [r3, #12]
 8006df4:	68db      	ldr	r3, [r3, #12]
 8006df6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	3318      	adds	r3, #24
 8006dfc:	4618      	mov	r0, r3
 8006dfe:	f7ff f871 	bl	8005ee4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	3304      	adds	r3, #4
 8006e06:	4618      	mov	r0, r3
 8006e08:	f7ff f86c 	bl	8005ee4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e10:	4b2d      	ldr	r3, [pc, #180]	; (8006ec8 <xTaskResumeAll+0x124>)
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	429a      	cmp	r2, r3
 8006e16:	d903      	bls.n	8006e20 <xTaskResumeAll+0x7c>
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e1c:	4a2a      	ldr	r2, [pc, #168]	; (8006ec8 <xTaskResumeAll+0x124>)
 8006e1e:	6013      	str	r3, [r2, #0]
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e24:	4613      	mov	r3, r2
 8006e26:	009b      	lsls	r3, r3, #2
 8006e28:	4413      	add	r3, r2
 8006e2a:	009b      	lsls	r3, r3, #2
 8006e2c:	4a27      	ldr	r2, [pc, #156]	; (8006ecc <xTaskResumeAll+0x128>)
 8006e2e:	441a      	add	r2, r3
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	3304      	adds	r3, #4
 8006e34:	4619      	mov	r1, r3
 8006e36:	4610      	mov	r0, r2
 8006e38:	f7fe fff7 	bl	8005e2a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e40:	4b23      	ldr	r3, [pc, #140]	; (8006ed0 <xTaskResumeAll+0x12c>)
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e46:	429a      	cmp	r2, r3
 8006e48:	d302      	bcc.n	8006e50 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8006e4a:	4b22      	ldr	r3, [pc, #136]	; (8006ed4 <xTaskResumeAll+0x130>)
 8006e4c:	2201      	movs	r2, #1
 8006e4e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006e50:	4b1c      	ldr	r3, [pc, #112]	; (8006ec4 <xTaskResumeAll+0x120>)
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d1cb      	bne.n	8006df0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d001      	beq.n	8006e62 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006e5e:	f000 fb55 	bl	800750c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006e62:	4b1d      	ldr	r3, [pc, #116]	; (8006ed8 <xTaskResumeAll+0x134>)
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d010      	beq.n	8006e90 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006e6e:	f000 f847 	bl	8006f00 <xTaskIncrementTick>
 8006e72:	4603      	mov	r3, r0
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d002      	beq.n	8006e7e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8006e78:	4b16      	ldr	r3, [pc, #88]	; (8006ed4 <xTaskResumeAll+0x130>)
 8006e7a:	2201      	movs	r2, #1
 8006e7c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	3b01      	subs	r3, #1
 8006e82:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d1f1      	bne.n	8006e6e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8006e8a:	4b13      	ldr	r3, [pc, #76]	; (8006ed8 <xTaskResumeAll+0x134>)
 8006e8c:	2200      	movs	r2, #0
 8006e8e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006e90:	4b10      	ldr	r3, [pc, #64]	; (8006ed4 <xTaskResumeAll+0x130>)
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d009      	beq.n	8006eac <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006e98:	2301      	movs	r3, #1
 8006e9a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006e9c:	4b0f      	ldr	r3, [pc, #60]	; (8006edc <xTaskResumeAll+0x138>)
 8006e9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ea2:	601a      	str	r2, [r3, #0]
 8006ea4:	f3bf 8f4f 	dsb	sy
 8006ea8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006eac:	f001 f8da 	bl	8008064 <vPortExitCritical>

	return xAlreadyYielded;
 8006eb0:	68bb      	ldr	r3, [r7, #8]
}
 8006eb2:	4618      	mov	r0, r3
 8006eb4:	3710      	adds	r7, #16
 8006eb6:	46bd      	mov	sp, r7
 8006eb8:	bd80      	pop	{r7, pc}
 8006eba:	bf00      	nop
 8006ebc:	20000c4c 	.word	0x20000c4c
 8006ec0:	20000c24 	.word	0x20000c24
 8006ec4:	20000be4 	.word	0x20000be4
 8006ec8:	20000c2c 	.word	0x20000c2c
 8006ecc:	20000754 	.word	0x20000754
 8006ed0:	20000750 	.word	0x20000750
 8006ed4:	20000c38 	.word	0x20000c38
 8006ed8:	20000c34 	.word	0x20000c34
 8006edc:	e000ed04 	.word	0xe000ed04

08006ee0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006ee0:	b480      	push	{r7}
 8006ee2:	b083      	sub	sp, #12
 8006ee4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006ee6:	4b05      	ldr	r3, [pc, #20]	; (8006efc <xTaskGetTickCount+0x1c>)
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006eec:	687b      	ldr	r3, [r7, #4]
}
 8006eee:	4618      	mov	r0, r3
 8006ef0:	370c      	adds	r7, #12
 8006ef2:	46bd      	mov	sp, r7
 8006ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef8:	4770      	bx	lr
 8006efa:	bf00      	nop
 8006efc:	20000c28 	.word	0x20000c28

08006f00 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006f00:	b580      	push	{r7, lr}
 8006f02:	b086      	sub	sp, #24
 8006f04:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006f06:	2300      	movs	r3, #0
 8006f08:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006f0a:	4b4f      	ldr	r3, [pc, #316]	; (8007048 <xTaskIncrementTick+0x148>)
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	f040 808f 	bne.w	8007032 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006f14:	4b4d      	ldr	r3, [pc, #308]	; (800704c <xTaskIncrementTick+0x14c>)
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	3301      	adds	r3, #1
 8006f1a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006f1c:	4a4b      	ldr	r2, [pc, #300]	; (800704c <xTaskIncrementTick+0x14c>)
 8006f1e:	693b      	ldr	r3, [r7, #16]
 8006f20:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006f22:	693b      	ldr	r3, [r7, #16]
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d120      	bne.n	8006f6a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006f28:	4b49      	ldr	r3, [pc, #292]	; (8007050 <xTaskIncrementTick+0x150>)
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d00a      	beq.n	8006f48 <xTaskIncrementTick+0x48>
	__asm volatile
 8006f32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f36:	f383 8811 	msr	BASEPRI, r3
 8006f3a:	f3bf 8f6f 	isb	sy
 8006f3e:	f3bf 8f4f 	dsb	sy
 8006f42:	603b      	str	r3, [r7, #0]
}
 8006f44:	bf00      	nop
 8006f46:	e7fe      	b.n	8006f46 <xTaskIncrementTick+0x46>
 8006f48:	4b41      	ldr	r3, [pc, #260]	; (8007050 <xTaskIncrementTick+0x150>)
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	60fb      	str	r3, [r7, #12]
 8006f4e:	4b41      	ldr	r3, [pc, #260]	; (8007054 <xTaskIncrementTick+0x154>)
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	4a3f      	ldr	r2, [pc, #252]	; (8007050 <xTaskIncrementTick+0x150>)
 8006f54:	6013      	str	r3, [r2, #0]
 8006f56:	4a3f      	ldr	r2, [pc, #252]	; (8007054 <xTaskIncrementTick+0x154>)
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	6013      	str	r3, [r2, #0]
 8006f5c:	4b3e      	ldr	r3, [pc, #248]	; (8007058 <xTaskIncrementTick+0x158>)
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	3301      	adds	r3, #1
 8006f62:	4a3d      	ldr	r2, [pc, #244]	; (8007058 <xTaskIncrementTick+0x158>)
 8006f64:	6013      	str	r3, [r2, #0]
 8006f66:	f000 fad1 	bl	800750c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006f6a:	4b3c      	ldr	r3, [pc, #240]	; (800705c <xTaskIncrementTick+0x15c>)
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	693a      	ldr	r2, [r7, #16]
 8006f70:	429a      	cmp	r2, r3
 8006f72:	d349      	bcc.n	8007008 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006f74:	4b36      	ldr	r3, [pc, #216]	; (8007050 <xTaskIncrementTick+0x150>)
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d104      	bne.n	8006f88 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006f7e:	4b37      	ldr	r3, [pc, #220]	; (800705c <xTaskIncrementTick+0x15c>)
 8006f80:	f04f 32ff 	mov.w	r2, #4294967295
 8006f84:	601a      	str	r2, [r3, #0]
					break;
 8006f86:	e03f      	b.n	8007008 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006f88:	4b31      	ldr	r3, [pc, #196]	; (8007050 <xTaskIncrementTick+0x150>)
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	68db      	ldr	r3, [r3, #12]
 8006f8e:	68db      	ldr	r3, [r3, #12]
 8006f90:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006f92:	68bb      	ldr	r3, [r7, #8]
 8006f94:	685b      	ldr	r3, [r3, #4]
 8006f96:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006f98:	693a      	ldr	r2, [r7, #16]
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	429a      	cmp	r2, r3
 8006f9e:	d203      	bcs.n	8006fa8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006fa0:	4a2e      	ldr	r2, [pc, #184]	; (800705c <xTaskIncrementTick+0x15c>)
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006fa6:	e02f      	b.n	8007008 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006fa8:	68bb      	ldr	r3, [r7, #8]
 8006faa:	3304      	adds	r3, #4
 8006fac:	4618      	mov	r0, r3
 8006fae:	f7fe ff99 	bl	8005ee4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006fb2:	68bb      	ldr	r3, [r7, #8]
 8006fb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d004      	beq.n	8006fc4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006fba:	68bb      	ldr	r3, [r7, #8]
 8006fbc:	3318      	adds	r3, #24
 8006fbe:	4618      	mov	r0, r3
 8006fc0:	f7fe ff90 	bl	8005ee4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006fc4:	68bb      	ldr	r3, [r7, #8]
 8006fc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fc8:	4b25      	ldr	r3, [pc, #148]	; (8007060 <xTaskIncrementTick+0x160>)
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	429a      	cmp	r2, r3
 8006fce:	d903      	bls.n	8006fd8 <xTaskIncrementTick+0xd8>
 8006fd0:	68bb      	ldr	r3, [r7, #8]
 8006fd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fd4:	4a22      	ldr	r2, [pc, #136]	; (8007060 <xTaskIncrementTick+0x160>)
 8006fd6:	6013      	str	r3, [r2, #0]
 8006fd8:	68bb      	ldr	r3, [r7, #8]
 8006fda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fdc:	4613      	mov	r3, r2
 8006fde:	009b      	lsls	r3, r3, #2
 8006fe0:	4413      	add	r3, r2
 8006fe2:	009b      	lsls	r3, r3, #2
 8006fe4:	4a1f      	ldr	r2, [pc, #124]	; (8007064 <xTaskIncrementTick+0x164>)
 8006fe6:	441a      	add	r2, r3
 8006fe8:	68bb      	ldr	r3, [r7, #8]
 8006fea:	3304      	adds	r3, #4
 8006fec:	4619      	mov	r1, r3
 8006fee:	4610      	mov	r0, r2
 8006ff0:	f7fe ff1b 	bl	8005e2a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006ff4:	68bb      	ldr	r3, [r7, #8]
 8006ff6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ff8:	4b1b      	ldr	r3, [pc, #108]	; (8007068 <xTaskIncrementTick+0x168>)
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ffe:	429a      	cmp	r2, r3
 8007000:	d3b8      	bcc.n	8006f74 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8007002:	2301      	movs	r3, #1
 8007004:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007006:	e7b5      	b.n	8006f74 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007008:	4b17      	ldr	r3, [pc, #92]	; (8007068 <xTaskIncrementTick+0x168>)
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800700e:	4915      	ldr	r1, [pc, #84]	; (8007064 <xTaskIncrementTick+0x164>)
 8007010:	4613      	mov	r3, r2
 8007012:	009b      	lsls	r3, r3, #2
 8007014:	4413      	add	r3, r2
 8007016:	009b      	lsls	r3, r3, #2
 8007018:	440b      	add	r3, r1
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	2b01      	cmp	r3, #1
 800701e:	d901      	bls.n	8007024 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8007020:	2301      	movs	r3, #1
 8007022:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007024:	4b11      	ldr	r3, [pc, #68]	; (800706c <xTaskIncrementTick+0x16c>)
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	2b00      	cmp	r3, #0
 800702a:	d007      	beq.n	800703c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800702c:	2301      	movs	r3, #1
 800702e:	617b      	str	r3, [r7, #20]
 8007030:	e004      	b.n	800703c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007032:	4b0f      	ldr	r3, [pc, #60]	; (8007070 <xTaskIncrementTick+0x170>)
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	3301      	adds	r3, #1
 8007038:	4a0d      	ldr	r2, [pc, #52]	; (8007070 <xTaskIncrementTick+0x170>)
 800703a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800703c:	697b      	ldr	r3, [r7, #20]
}
 800703e:	4618      	mov	r0, r3
 8007040:	3718      	adds	r7, #24
 8007042:	46bd      	mov	sp, r7
 8007044:	bd80      	pop	{r7, pc}
 8007046:	bf00      	nop
 8007048:	20000c4c 	.word	0x20000c4c
 800704c:	20000c28 	.word	0x20000c28
 8007050:	20000bdc 	.word	0x20000bdc
 8007054:	20000be0 	.word	0x20000be0
 8007058:	20000c3c 	.word	0x20000c3c
 800705c:	20000c44 	.word	0x20000c44
 8007060:	20000c2c 	.word	0x20000c2c
 8007064:	20000754 	.word	0x20000754
 8007068:	20000750 	.word	0x20000750
 800706c:	20000c38 	.word	0x20000c38
 8007070:	20000c34 	.word	0x20000c34

08007074 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007074:	b480      	push	{r7}
 8007076:	b085      	sub	sp, #20
 8007078:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800707a:	4b28      	ldr	r3, [pc, #160]	; (800711c <vTaskSwitchContext+0xa8>)
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	2b00      	cmp	r3, #0
 8007080:	d003      	beq.n	800708a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007082:	4b27      	ldr	r3, [pc, #156]	; (8007120 <vTaskSwitchContext+0xac>)
 8007084:	2201      	movs	r2, #1
 8007086:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007088:	e041      	b.n	800710e <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800708a:	4b25      	ldr	r3, [pc, #148]	; (8007120 <vTaskSwitchContext+0xac>)
 800708c:	2200      	movs	r2, #0
 800708e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007090:	4b24      	ldr	r3, [pc, #144]	; (8007124 <vTaskSwitchContext+0xb0>)
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	60fb      	str	r3, [r7, #12]
 8007096:	e010      	b.n	80070ba <vTaskSwitchContext+0x46>
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	2b00      	cmp	r3, #0
 800709c:	d10a      	bne.n	80070b4 <vTaskSwitchContext+0x40>
	__asm volatile
 800709e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070a2:	f383 8811 	msr	BASEPRI, r3
 80070a6:	f3bf 8f6f 	isb	sy
 80070aa:	f3bf 8f4f 	dsb	sy
 80070ae:	607b      	str	r3, [r7, #4]
}
 80070b0:	bf00      	nop
 80070b2:	e7fe      	b.n	80070b2 <vTaskSwitchContext+0x3e>
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	3b01      	subs	r3, #1
 80070b8:	60fb      	str	r3, [r7, #12]
 80070ba:	491b      	ldr	r1, [pc, #108]	; (8007128 <vTaskSwitchContext+0xb4>)
 80070bc:	68fa      	ldr	r2, [r7, #12]
 80070be:	4613      	mov	r3, r2
 80070c0:	009b      	lsls	r3, r3, #2
 80070c2:	4413      	add	r3, r2
 80070c4:	009b      	lsls	r3, r3, #2
 80070c6:	440b      	add	r3, r1
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d0e4      	beq.n	8007098 <vTaskSwitchContext+0x24>
 80070ce:	68fa      	ldr	r2, [r7, #12]
 80070d0:	4613      	mov	r3, r2
 80070d2:	009b      	lsls	r3, r3, #2
 80070d4:	4413      	add	r3, r2
 80070d6:	009b      	lsls	r3, r3, #2
 80070d8:	4a13      	ldr	r2, [pc, #76]	; (8007128 <vTaskSwitchContext+0xb4>)
 80070da:	4413      	add	r3, r2
 80070dc:	60bb      	str	r3, [r7, #8]
 80070de:	68bb      	ldr	r3, [r7, #8]
 80070e0:	685b      	ldr	r3, [r3, #4]
 80070e2:	685a      	ldr	r2, [r3, #4]
 80070e4:	68bb      	ldr	r3, [r7, #8]
 80070e6:	605a      	str	r2, [r3, #4]
 80070e8:	68bb      	ldr	r3, [r7, #8]
 80070ea:	685a      	ldr	r2, [r3, #4]
 80070ec:	68bb      	ldr	r3, [r7, #8]
 80070ee:	3308      	adds	r3, #8
 80070f0:	429a      	cmp	r2, r3
 80070f2:	d104      	bne.n	80070fe <vTaskSwitchContext+0x8a>
 80070f4:	68bb      	ldr	r3, [r7, #8]
 80070f6:	685b      	ldr	r3, [r3, #4]
 80070f8:	685a      	ldr	r2, [r3, #4]
 80070fa:	68bb      	ldr	r3, [r7, #8]
 80070fc:	605a      	str	r2, [r3, #4]
 80070fe:	68bb      	ldr	r3, [r7, #8]
 8007100:	685b      	ldr	r3, [r3, #4]
 8007102:	68db      	ldr	r3, [r3, #12]
 8007104:	4a09      	ldr	r2, [pc, #36]	; (800712c <vTaskSwitchContext+0xb8>)
 8007106:	6013      	str	r3, [r2, #0]
 8007108:	4a06      	ldr	r2, [pc, #24]	; (8007124 <vTaskSwitchContext+0xb0>)
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	6013      	str	r3, [r2, #0]
}
 800710e:	bf00      	nop
 8007110:	3714      	adds	r7, #20
 8007112:	46bd      	mov	sp, r7
 8007114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007118:	4770      	bx	lr
 800711a:	bf00      	nop
 800711c:	20000c4c 	.word	0x20000c4c
 8007120:	20000c38 	.word	0x20000c38
 8007124:	20000c2c 	.word	0x20000c2c
 8007128:	20000754 	.word	0x20000754
 800712c:	20000750 	.word	0x20000750

08007130 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007130:	b580      	push	{r7, lr}
 8007132:	b084      	sub	sp, #16
 8007134:	af00      	add	r7, sp, #0
 8007136:	6078      	str	r0, [r7, #4]
 8007138:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	2b00      	cmp	r3, #0
 800713e:	d10a      	bne.n	8007156 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8007140:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007144:	f383 8811 	msr	BASEPRI, r3
 8007148:	f3bf 8f6f 	isb	sy
 800714c:	f3bf 8f4f 	dsb	sy
 8007150:	60fb      	str	r3, [r7, #12]
}
 8007152:	bf00      	nop
 8007154:	e7fe      	b.n	8007154 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007156:	4b07      	ldr	r3, [pc, #28]	; (8007174 <vTaskPlaceOnEventList+0x44>)
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	3318      	adds	r3, #24
 800715c:	4619      	mov	r1, r3
 800715e:	6878      	ldr	r0, [r7, #4]
 8007160:	f7fe fe87 	bl	8005e72 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007164:	2101      	movs	r1, #1
 8007166:	6838      	ldr	r0, [r7, #0]
 8007168:	f000 fa7c 	bl	8007664 <prvAddCurrentTaskToDelayedList>
}
 800716c:	bf00      	nop
 800716e:	3710      	adds	r7, #16
 8007170:	46bd      	mov	sp, r7
 8007172:	bd80      	pop	{r7, pc}
 8007174:	20000750 	.word	0x20000750

08007178 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007178:	b580      	push	{r7, lr}
 800717a:	b086      	sub	sp, #24
 800717c:	af00      	add	r7, sp, #0
 800717e:	60f8      	str	r0, [r7, #12]
 8007180:	60b9      	str	r1, [r7, #8]
 8007182:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	2b00      	cmp	r3, #0
 8007188:	d10a      	bne.n	80071a0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800718a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800718e:	f383 8811 	msr	BASEPRI, r3
 8007192:	f3bf 8f6f 	isb	sy
 8007196:	f3bf 8f4f 	dsb	sy
 800719a:	617b      	str	r3, [r7, #20]
}
 800719c:	bf00      	nop
 800719e:	e7fe      	b.n	800719e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80071a0:	4b0a      	ldr	r3, [pc, #40]	; (80071cc <vTaskPlaceOnEventListRestricted+0x54>)
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	3318      	adds	r3, #24
 80071a6:	4619      	mov	r1, r3
 80071a8:	68f8      	ldr	r0, [r7, #12]
 80071aa:	f7fe fe3e 	bl	8005e2a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d002      	beq.n	80071ba <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80071b4:	f04f 33ff 	mov.w	r3, #4294967295
 80071b8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80071ba:	6879      	ldr	r1, [r7, #4]
 80071bc:	68b8      	ldr	r0, [r7, #8]
 80071be:	f000 fa51 	bl	8007664 <prvAddCurrentTaskToDelayedList>
	}
 80071c2:	bf00      	nop
 80071c4:	3718      	adds	r7, #24
 80071c6:	46bd      	mov	sp, r7
 80071c8:	bd80      	pop	{r7, pc}
 80071ca:	bf00      	nop
 80071cc:	20000750 	.word	0x20000750

080071d0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80071d0:	b580      	push	{r7, lr}
 80071d2:	b086      	sub	sp, #24
 80071d4:	af00      	add	r7, sp, #0
 80071d6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	68db      	ldr	r3, [r3, #12]
 80071dc:	68db      	ldr	r3, [r3, #12]
 80071de:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80071e0:	693b      	ldr	r3, [r7, #16]
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d10a      	bne.n	80071fc <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80071e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071ea:	f383 8811 	msr	BASEPRI, r3
 80071ee:	f3bf 8f6f 	isb	sy
 80071f2:	f3bf 8f4f 	dsb	sy
 80071f6:	60fb      	str	r3, [r7, #12]
}
 80071f8:	bf00      	nop
 80071fa:	e7fe      	b.n	80071fa <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80071fc:	693b      	ldr	r3, [r7, #16]
 80071fe:	3318      	adds	r3, #24
 8007200:	4618      	mov	r0, r3
 8007202:	f7fe fe6f 	bl	8005ee4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007206:	4b1e      	ldr	r3, [pc, #120]	; (8007280 <xTaskRemoveFromEventList+0xb0>)
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	2b00      	cmp	r3, #0
 800720c:	d11d      	bne.n	800724a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800720e:	693b      	ldr	r3, [r7, #16]
 8007210:	3304      	adds	r3, #4
 8007212:	4618      	mov	r0, r3
 8007214:	f7fe fe66 	bl	8005ee4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007218:	693b      	ldr	r3, [r7, #16]
 800721a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800721c:	4b19      	ldr	r3, [pc, #100]	; (8007284 <xTaskRemoveFromEventList+0xb4>)
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	429a      	cmp	r2, r3
 8007222:	d903      	bls.n	800722c <xTaskRemoveFromEventList+0x5c>
 8007224:	693b      	ldr	r3, [r7, #16]
 8007226:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007228:	4a16      	ldr	r2, [pc, #88]	; (8007284 <xTaskRemoveFromEventList+0xb4>)
 800722a:	6013      	str	r3, [r2, #0]
 800722c:	693b      	ldr	r3, [r7, #16]
 800722e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007230:	4613      	mov	r3, r2
 8007232:	009b      	lsls	r3, r3, #2
 8007234:	4413      	add	r3, r2
 8007236:	009b      	lsls	r3, r3, #2
 8007238:	4a13      	ldr	r2, [pc, #76]	; (8007288 <xTaskRemoveFromEventList+0xb8>)
 800723a:	441a      	add	r2, r3
 800723c:	693b      	ldr	r3, [r7, #16]
 800723e:	3304      	adds	r3, #4
 8007240:	4619      	mov	r1, r3
 8007242:	4610      	mov	r0, r2
 8007244:	f7fe fdf1 	bl	8005e2a <vListInsertEnd>
 8007248:	e005      	b.n	8007256 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800724a:	693b      	ldr	r3, [r7, #16]
 800724c:	3318      	adds	r3, #24
 800724e:	4619      	mov	r1, r3
 8007250:	480e      	ldr	r0, [pc, #56]	; (800728c <xTaskRemoveFromEventList+0xbc>)
 8007252:	f7fe fdea 	bl	8005e2a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007256:	693b      	ldr	r3, [r7, #16]
 8007258:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800725a:	4b0d      	ldr	r3, [pc, #52]	; (8007290 <xTaskRemoveFromEventList+0xc0>)
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007260:	429a      	cmp	r2, r3
 8007262:	d905      	bls.n	8007270 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007264:	2301      	movs	r3, #1
 8007266:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007268:	4b0a      	ldr	r3, [pc, #40]	; (8007294 <xTaskRemoveFromEventList+0xc4>)
 800726a:	2201      	movs	r2, #1
 800726c:	601a      	str	r2, [r3, #0]
 800726e:	e001      	b.n	8007274 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8007270:	2300      	movs	r3, #0
 8007272:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007274:	697b      	ldr	r3, [r7, #20]
}
 8007276:	4618      	mov	r0, r3
 8007278:	3718      	adds	r7, #24
 800727a:	46bd      	mov	sp, r7
 800727c:	bd80      	pop	{r7, pc}
 800727e:	bf00      	nop
 8007280:	20000c4c 	.word	0x20000c4c
 8007284:	20000c2c 	.word	0x20000c2c
 8007288:	20000754 	.word	0x20000754
 800728c:	20000be4 	.word	0x20000be4
 8007290:	20000750 	.word	0x20000750
 8007294:	20000c38 	.word	0x20000c38

08007298 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007298:	b480      	push	{r7}
 800729a:	b083      	sub	sp, #12
 800729c:	af00      	add	r7, sp, #0
 800729e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80072a0:	4b06      	ldr	r3, [pc, #24]	; (80072bc <vTaskInternalSetTimeOutState+0x24>)
 80072a2:	681a      	ldr	r2, [r3, #0]
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80072a8:	4b05      	ldr	r3, [pc, #20]	; (80072c0 <vTaskInternalSetTimeOutState+0x28>)
 80072aa:	681a      	ldr	r2, [r3, #0]
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	605a      	str	r2, [r3, #4]
}
 80072b0:	bf00      	nop
 80072b2:	370c      	adds	r7, #12
 80072b4:	46bd      	mov	sp, r7
 80072b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ba:	4770      	bx	lr
 80072bc:	20000c3c 	.word	0x20000c3c
 80072c0:	20000c28 	.word	0x20000c28

080072c4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80072c4:	b580      	push	{r7, lr}
 80072c6:	b088      	sub	sp, #32
 80072c8:	af00      	add	r7, sp, #0
 80072ca:	6078      	str	r0, [r7, #4]
 80072cc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d10a      	bne.n	80072ea <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80072d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072d8:	f383 8811 	msr	BASEPRI, r3
 80072dc:	f3bf 8f6f 	isb	sy
 80072e0:	f3bf 8f4f 	dsb	sy
 80072e4:	613b      	str	r3, [r7, #16]
}
 80072e6:	bf00      	nop
 80072e8:	e7fe      	b.n	80072e8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80072ea:	683b      	ldr	r3, [r7, #0]
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d10a      	bne.n	8007306 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80072f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072f4:	f383 8811 	msr	BASEPRI, r3
 80072f8:	f3bf 8f6f 	isb	sy
 80072fc:	f3bf 8f4f 	dsb	sy
 8007300:	60fb      	str	r3, [r7, #12]
}
 8007302:	bf00      	nop
 8007304:	e7fe      	b.n	8007304 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8007306:	f000 fe7d 	bl	8008004 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800730a:	4b1d      	ldr	r3, [pc, #116]	; (8007380 <xTaskCheckForTimeOut+0xbc>)
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	685b      	ldr	r3, [r3, #4]
 8007314:	69ba      	ldr	r2, [r7, #24]
 8007316:	1ad3      	subs	r3, r2, r3
 8007318:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800731a:	683b      	ldr	r3, [r7, #0]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007322:	d102      	bne.n	800732a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007324:	2300      	movs	r3, #0
 8007326:	61fb      	str	r3, [r7, #28]
 8007328:	e023      	b.n	8007372 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681a      	ldr	r2, [r3, #0]
 800732e:	4b15      	ldr	r3, [pc, #84]	; (8007384 <xTaskCheckForTimeOut+0xc0>)
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	429a      	cmp	r2, r3
 8007334:	d007      	beq.n	8007346 <xTaskCheckForTimeOut+0x82>
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	685b      	ldr	r3, [r3, #4]
 800733a:	69ba      	ldr	r2, [r7, #24]
 800733c:	429a      	cmp	r2, r3
 800733e:	d302      	bcc.n	8007346 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007340:	2301      	movs	r3, #1
 8007342:	61fb      	str	r3, [r7, #28]
 8007344:	e015      	b.n	8007372 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007346:	683b      	ldr	r3, [r7, #0]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	697a      	ldr	r2, [r7, #20]
 800734c:	429a      	cmp	r2, r3
 800734e:	d20b      	bcs.n	8007368 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007350:	683b      	ldr	r3, [r7, #0]
 8007352:	681a      	ldr	r2, [r3, #0]
 8007354:	697b      	ldr	r3, [r7, #20]
 8007356:	1ad2      	subs	r2, r2, r3
 8007358:	683b      	ldr	r3, [r7, #0]
 800735a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800735c:	6878      	ldr	r0, [r7, #4]
 800735e:	f7ff ff9b 	bl	8007298 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007362:	2300      	movs	r3, #0
 8007364:	61fb      	str	r3, [r7, #28]
 8007366:	e004      	b.n	8007372 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8007368:	683b      	ldr	r3, [r7, #0]
 800736a:	2200      	movs	r2, #0
 800736c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800736e:	2301      	movs	r3, #1
 8007370:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007372:	f000 fe77 	bl	8008064 <vPortExitCritical>

	return xReturn;
 8007376:	69fb      	ldr	r3, [r7, #28]
}
 8007378:	4618      	mov	r0, r3
 800737a:	3720      	adds	r7, #32
 800737c:	46bd      	mov	sp, r7
 800737e:	bd80      	pop	{r7, pc}
 8007380:	20000c28 	.word	0x20000c28
 8007384:	20000c3c 	.word	0x20000c3c

08007388 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007388:	b480      	push	{r7}
 800738a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800738c:	4b03      	ldr	r3, [pc, #12]	; (800739c <vTaskMissedYield+0x14>)
 800738e:	2201      	movs	r2, #1
 8007390:	601a      	str	r2, [r3, #0]
}
 8007392:	bf00      	nop
 8007394:	46bd      	mov	sp, r7
 8007396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800739a:	4770      	bx	lr
 800739c:	20000c38 	.word	0x20000c38

080073a0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80073a0:	b580      	push	{r7, lr}
 80073a2:	b082      	sub	sp, #8
 80073a4:	af00      	add	r7, sp, #0
 80073a6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80073a8:	f000 f852 	bl	8007450 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80073ac:	4b06      	ldr	r3, [pc, #24]	; (80073c8 <prvIdleTask+0x28>)
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	2b01      	cmp	r3, #1
 80073b2:	d9f9      	bls.n	80073a8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80073b4:	4b05      	ldr	r3, [pc, #20]	; (80073cc <prvIdleTask+0x2c>)
 80073b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80073ba:	601a      	str	r2, [r3, #0]
 80073bc:	f3bf 8f4f 	dsb	sy
 80073c0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80073c4:	e7f0      	b.n	80073a8 <prvIdleTask+0x8>
 80073c6:	bf00      	nop
 80073c8:	20000754 	.word	0x20000754
 80073cc:	e000ed04 	.word	0xe000ed04

080073d0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80073d0:	b580      	push	{r7, lr}
 80073d2:	b082      	sub	sp, #8
 80073d4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80073d6:	2300      	movs	r3, #0
 80073d8:	607b      	str	r3, [r7, #4]
 80073da:	e00c      	b.n	80073f6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80073dc:	687a      	ldr	r2, [r7, #4]
 80073de:	4613      	mov	r3, r2
 80073e0:	009b      	lsls	r3, r3, #2
 80073e2:	4413      	add	r3, r2
 80073e4:	009b      	lsls	r3, r3, #2
 80073e6:	4a12      	ldr	r2, [pc, #72]	; (8007430 <prvInitialiseTaskLists+0x60>)
 80073e8:	4413      	add	r3, r2
 80073ea:	4618      	mov	r0, r3
 80073ec:	f7fe fcf0 	bl	8005dd0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	3301      	adds	r3, #1
 80073f4:	607b      	str	r3, [r7, #4]
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	2b37      	cmp	r3, #55	; 0x37
 80073fa:	d9ef      	bls.n	80073dc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80073fc:	480d      	ldr	r0, [pc, #52]	; (8007434 <prvInitialiseTaskLists+0x64>)
 80073fe:	f7fe fce7 	bl	8005dd0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007402:	480d      	ldr	r0, [pc, #52]	; (8007438 <prvInitialiseTaskLists+0x68>)
 8007404:	f7fe fce4 	bl	8005dd0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007408:	480c      	ldr	r0, [pc, #48]	; (800743c <prvInitialiseTaskLists+0x6c>)
 800740a:	f7fe fce1 	bl	8005dd0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800740e:	480c      	ldr	r0, [pc, #48]	; (8007440 <prvInitialiseTaskLists+0x70>)
 8007410:	f7fe fcde 	bl	8005dd0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007414:	480b      	ldr	r0, [pc, #44]	; (8007444 <prvInitialiseTaskLists+0x74>)
 8007416:	f7fe fcdb 	bl	8005dd0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800741a:	4b0b      	ldr	r3, [pc, #44]	; (8007448 <prvInitialiseTaskLists+0x78>)
 800741c:	4a05      	ldr	r2, [pc, #20]	; (8007434 <prvInitialiseTaskLists+0x64>)
 800741e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007420:	4b0a      	ldr	r3, [pc, #40]	; (800744c <prvInitialiseTaskLists+0x7c>)
 8007422:	4a05      	ldr	r2, [pc, #20]	; (8007438 <prvInitialiseTaskLists+0x68>)
 8007424:	601a      	str	r2, [r3, #0]
}
 8007426:	bf00      	nop
 8007428:	3708      	adds	r7, #8
 800742a:	46bd      	mov	sp, r7
 800742c:	bd80      	pop	{r7, pc}
 800742e:	bf00      	nop
 8007430:	20000754 	.word	0x20000754
 8007434:	20000bb4 	.word	0x20000bb4
 8007438:	20000bc8 	.word	0x20000bc8
 800743c:	20000be4 	.word	0x20000be4
 8007440:	20000bf8 	.word	0x20000bf8
 8007444:	20000c10 	.word	0x20000c10
 8007448:	20000bdc 	.word	0x20000bdc
 800744c:	20000be0 	.word	0x20000be0

08007450 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007450:	b580      	push	{r7, lr}
 8007452:	b082      	sub	sp, #8
 8007454:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007456:	e019      	b.n	800748c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007458:	f000 fdd4 	bl	8008004 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800745c:	4b10      	ldr	r3, [pc, #64]	; (80074a0 <prvCheckTasksWaitingTermination+0x50>)
 800745e:	68db      	ldr	r3, [r3, #12]
 8007460:	68db      	ldr	r3, [r3, #12]
 8007462:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	3304      	adds	r3, #4
 8007468:	4618      	mov	r0, r3
 800746a:	f7fe fd3b 	bl	8005ee4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800746e:	4b0d      	ldr	r3, [pc, #52]	; (80074a4 <prvCheckTasksWaitingTermination+0x54>)
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	3b01      	subs	r3, #1
 8007474:	4a0b      	ldr	r2, [pc, #44]	; (80074a4 <prvCheckTasksWaitingTermination+0x54>)
 8007476:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007478:	4b0b      	ldr	r3, [pc, #44]	; (80074a8 <prvCheckTasksWaitingTermination+0x58>)
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	3b01      	subs	r3, #1
 800747e:	4a0a      	ldr	r2, [pc, #40]	; (80074a8 <prvCheckTasksWaitingTermination+0x58>)
 8007480:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007482:	f000 fdef 	bl	8008064 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007486:	6878      	ldr	r0, [r7, #4]
 8007488:	f000 f810 	bl	80074ac <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800748c:	4b06      	ldr	r3, [pc, #24]	; (80074a8 <prvCheckTasksWaitingTermination+0x58>)
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	2b00      	cmp	r3, #0
 8007492:	d1e1      	bne.n	8007458 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007494:	bf00      	nop
 8007496:	bf00      	nop
 8007498:	3708      	adds	r7, #8
 800749a:	46bd      	mov	sp, r7
 800749c:	bd80      	pop	{r7, pc}
 800749e:	bf00      	nop
 80074a0:	20000bf8 	.word	0x20000bf8
 80074a4:	20000c24 	.word	0x20000c24
 80074a8:	20000c0c 	.word	0x20000c0c

080074ac <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80074ac:	b580      	push	{r7, lr}
 80074ae:	b084      	sub	sp, #16
 80074b0:	af00      	add	r7, sp, #0
 80074b2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d108      	bne.n	80074d0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074c2:	4618      	mov	r0, r3
 80074c4:	f000 ff8c 	bl	80083e0 <vPortFree>
				vPortFree( pxTCB );
 80074c8:	6878      	ldr	r0, [r7, #4]
 80074ca:	f000 ff89 	bl	80083e0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80074ce:	e018      	b.n	8007502 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80074d6:	2b01      	cmp	r3, #1
 80074d8:	d103      	bne.n	80074e2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80074da:	6878      	ldr	r0, [r7, #4]
 80074dc:	f000 ff80 	bl	80083e0 <vPortFree>
	}
 80074e0:	e00f      	b.n	8007502 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80074e8:	2b02      	cmp	r3, #2
 80074ea:	d00a      	beq.n	8007502 <prvDeleteTCB+0x56>
	__asm volatile
 80074ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074f0:	f383 8811 	msr	BASEPRI, r3
 80074f4:	f3bf 8f6f 	isb	sy
 80074f8:	f3bf 8f4f 	dsb	sy
 80074fc:	60fb      	str	r3, [r7, #12]
}
 80074fe:	bf00      	nop
 8007500:	e7fe      	b.n	8007500 <prvDeleteTCB+0x54>
	}
 8007502:	bf00      	nop
 8007504:	3710      	adds	r7, #16
 8007506:	46bd      	mov	sp, r7
 8007508:	bd80      	pop	{r7, pc}
	...

0800750c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800750c:	b480      	push	{r7}
 800750e:	b083      	sub	sp, #12
 8007510:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007512:	4b0c      	ldr	r3, [pc, #48]	; (8007544 <prvResetNextTaskUnblockTime+0x38>)
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	2b00      	cmp	r3, #0
 800751a:	d104      	bne.n	8007526 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800751c:	4b0a      	ldr	r3, [pc, #40]	; (8007548 <prvResetNextTaskUnblockTime+0x3c>)
 800751e:	f04f 32ff 	mov.w	r2, #4294967295
 8007522:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007524:	e008      	b.n	8007538 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007526:	4b07      	ldr	r3, [pc, #28]	; (8007544 <prvResetNextTaskUnblockTime+0x38>)
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	68db      	ldr	r3, [r3, #12]
 800752c:	68db      	ldr	r3, [r3, #12]
 800752e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	685b      	ldr	r3, [r3, #4]
 8007534:	4a04      	ldr	r2, [pc, #16]	; (8007548 <prvResetNextTaskUnblockTime+0x3c>)
 8007536:	6013      	str	r3, [r2, #0]
}
 8007538:	bf00      	nop
 800753a:	370c      	adds	r7, #12
 800753c:	46bd      	mov	sp, r7
 800753e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007542:	4770      	bx	lr
 8007544:	20000bdc 	.word	0x20000bdc
 8007548:	20000c44 	.word	0x20000c44

0800754c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800754c:	b480      	push	{r7}
 800754e:	b083      	sub	sp, #12
 8007550:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007552:	4b0b      	ldr	r3, [pc, #44]	; (8007580 <xTaskGetSchedulerState+0x34>)
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	2b00      	cmp	r3, #0
 8007558:	d102      	bne.n	8007560 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800755a:	2301      	movs	r3, #1
 800755c:	607b      	str	r3, [r7, #4]
 800755e:	e008      	b.n	8007572 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007560:	4b08      	ldr	r3, [pc, #32]	; (8007584 <xTaskGetSchedulerState+0x38>)
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	2b00      	cmp	r3, #0
 8007566:	d102      	bne.n	800756e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007568:	2302      	movs	r3, #2
 800756a:	607b      	str	r3, [r7, #4]
 800756c:	e001      	b.n	8007572 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800756e:	2300      	movs	r3, #0
 8007570:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007572:	687b      	ldr	r3, [r7, #4]
	}
 8007574:	4618      	mov	r0, r3
 8007576:	370c      	adds	r7, #12
 8007578:	46bd      	mov	sp, r7
 800757a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800757e:	4770      	bx	lr
 8007580:	20000c30 	.word	0x20000c30
 8007584:	20000c4c 	.word	0x20000c4c

08007588 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007588:	b580      	push	{r7, lr}
 800758a:	b086      	sub	sp, #24
 800758c:	af00      	add	r7, sp, #0
 800758e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007594:	2300      	movs	r3, #0
 8007596:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	2b00      	cmp	r3, #0
 800759c:	d056      	beq.n	800764c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800759e:	4b2e      	ldr	r3, [pc, #184]	; (8007658 <xTaskPriorityDisinherit+0xd0>)
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	693a      	ldr	r2, [r7, #16]
 80075a4:	429a      	cmp	r2, r3
 80075a6:	d00a      	beq.n	80075be <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80075a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075ac:	f383 8811 	msr	BASEPRI, r3
 80075b0:	f3bf 8f6f 	isb	sy
 80075b4:	f3bf 8f4f 	dsb	sy
 80075b8:	60fb      	str	r3, [r7, #12]
}
 80075ba:	bf00      	nop
 80075bc:	e7fe      	b.n	80075bc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80075be:	693b      	ldr	r3, [r7, #16]
 80075c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d10a      	bne.n	80075dc <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80075c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075ca:	f383 8811 	msr	BASEPRI, r3
 80075ce:	f3bf 8f6f 	isb	sy
 80075d2:	f3bf 8f4f 	dsb	sy
 80075d6:	60bb      	str	r3, [r7, #8]
}
 80075d8:	bf00      	nop
 80075da:	e7fe      	b.n	80075da <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80075dc:	693b      	ldr	r3, [r7, #16]
 80075de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80075e0:	1e5a      	subs	r2, r3, #1
 80075e2:	693b      	ldr	r3, [r7, #16]
 80075e4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80075e6:	693b      	ldr	r3, [r7, #16]
 80075e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075ea:	693b      	ldr	r3, [r7, #16]
 80075ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80075ee:	429a      	cmp	r2, r3
 80075f0:	d02c      	beq.n	800764c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80075f2:	693b      	ldr	r3, [r7, #16]
 80075f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d128      	bne.n	800764c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80075fa:	693b      	ldr	r3, [r7, #16]
 80075fc:	3304      	adds	r3, #4
 80075fe:	4618      	mov	r0, r3
 8007600:	f7fe fc70 	bl	8005ee4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007604:	693b      	ldr	r3, [r7, #16]
 8007606:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007608:	693b      	ldr	r3, [r7, #16]
 800760a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800760c:	693b      	ldr	r3, [r7, #16]
 800760e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007610:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007614:	693b      	ldr	r3, [r7, #16]
 8007616:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007618:	693b      	ldr	r3, [r7, #16]
 800761a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800761c:	4b0f      	ldr	r3, [pc, #60]	; (800765c <xTaskPriorityDisinherit+0xd4>)
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	429a      	cmp	r2, r3
 8007622:	d903      	bls.n	800762c <xTaskPriorityDisinherit+0xa4>
 8007624:	693b      	ldr	r3, [r7, #16]
 8007626:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007628:	4a0c      	ldr	r2, [pc, #48]	; (800765c <xTaskPriorityDisinherit+0xd4>)
 800762a:	6013      	str	r3, [r2, #0]
 800762c:	693b      	ldr	r3, [r7, #16]
 800762e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007630:	4613      	mov	r3, r2
 8007632:	009b      	lsls	r3, r3, #2
 8007634:	4413      	add	r3, r2
 8007636:	009b      	lsls	r3, r3, #2
 8007638:	4a09      	ldr	r2, [pc, #36]	; (8007660 <xTaskPriorityDisinherit+0xd8>)
 800763a:	441a      	add	r2, r3
 800763c:	693b      	ldr	r3, [r7, #16]
 800763e:	3304      	adds	r3, #4
 8007640:	4619      	mov	r1, r3
 8007642:	4610      	mov	r0, r2
 8007644:	f7fe fbf1 	bl	8005e2a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007648:	2301      	movs	r3, #1
 800764a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800764c:	697b      	ldr	r3, [r7, #20]
	}
 800764e:	4618      	mov	r0, r3
 8007650:	3718      	adds	r7, #24
 8007652:	46bd      	mov	sp, r7
 8007654:	bd80      	pop	{r7, pc}
 8007656:	bf00      	nop
 8007658:	20000750 	.word	0x20000750
 800765c:	20000c2c 	.word	0x20000c2c
 8007660:	20000754 	.word	0x20000754

08007664 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007664:	b580      	push	{r7, lr}
 8007666:	b084      	sub	sp, #16
 8007668:	af00      	add	r7, sp, #0
 800766a:	6078      	str	r0, [r7, #4]
 800766c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800766e:	4b21      	ldr	r3, [pc, #132]	; (80076f4 <prvAddCurrentTaskToDelayedList+0x90>)
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007674:	4b20      	ldr	r3, [pc, #128]	; (80076f8 <prvAddCurrentTaskToDelayedList+0x94>)
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	3304      	adds	r3, #4
 800767a:	4618      	mov	r0, r3
 800767c:	f7fe fc32 	bl	8005ee4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007686:	d10a      	bne.n	800769e <prvAddCurrentTaskToDelayedList+0x3a>
 8007688:	683b      	ldr	r3, [r7, #0]
 800768a:	2b00      	cmp	r3, #0
 800768c:	d007      	beq.n	800769e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800768e:	4b1a      	ldr	r3, [pc, #104]	; (80076f8 <prvAddCurrentTaskToDelayedList+0x94>)
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	3304      	adds	r3, #4
 8007694:	4619      	mov	r1, r3
 8007696:	4819      	ldr	r0, [pc, #100]	; (80076fc <prvAddCurrentTaskToDelayedList+0x98>)
 8007698:	f7fe fbc7 	bl	8005e2a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800769c:	e026      	b.n	80076ec <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800769e:	68fa      	ldr	r2, [r7, #12]
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	4413      	add	r3, r2
 80076a4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80076a6:	4b14      	ldr	r3, [pc, #80]	; (80076f8 <prvAddCurrentTaskToDelayedList+0x94>)
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	68ba      	ldr	r2, [r7, #8]
 80076ac:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80076ae:	68ba      	ldr	r2, [r7, #8]
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	429a      	cmp	r2, r3
 80076b4:	d209      	bcs.n	80076ca <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80076b6:	4b12      	ldr	r3, [pc, #72]	; (8007700 <prvAddCurrentTaskToDelayedList+0x9c>)
 80076b8:	681a      	ldr	r2, [r3, #0]
 80076ba:	4b0f      	ldr	r3, [pc, #60]	; (80076f8 <prvAddCurrentTaskToDelayedList+0x94>)
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	3304      	adds	r3, #4
 80076c0:	4619      	mov	r1, r3
 80076c2:	4610      	mov	r0, r2
 80076c4:	f7fe fbd5 	bl	8005e72 <vListInsert>
}
 80076c8:	e010      	b.n	80076ec <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80076ca:	4b0e      	ldr	r3, [pc, #56]	; (8007704 <prvAddCurrentTaskToDelayedList+0xa0>)
 80076cc:	681a      	ldr	r2, [r3, #0]
 80076ce:	4b0a      	ldr	r3, [pc, #40]	; (80076f8 <prvAddCurrentTaskToDelayedList+0x94>)
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	3304      	adds	r3, #4
 80076d4:	4619      	mov	r1, r3
 80076d6:	4610      	mov	r0, r2
 80076d8:	f7fe fbcb 	bl	8005e72 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80076dc:	4b0a      	ldr	r3, [pc, #40]	; (8007708 <prvAddCurrentTaskToDelayedList+0xa4>)
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	68ba      	ldr	r2, [r7, #8]
 80076e2:	429a      	cmp	r2, r3
 80076e4:	d202      	bcs.n	80076ec <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80076e6:	4a08      	ldr	r2, [pc, #32]	; (8007708 <prvAddCurrentTaskToDelayedList+0xa4>)
 80076e8:	68bb      	ldr	r3, [r7, #8]
 80076ea:	6013      	str	r3, [r2, #0]
}
 80076ec:	bf00      	nop
 80076ee:	3710      	adds	r7, #16
 80076f0:	46bd      	mov	sp, r7
 80076f2:	bd80      	pop	{r7, pc}
 80076f4:	20000c28 	.word	0x20000c28
 80076f8:	20000750 	.word	0x20000750
 80076fc:	20000c10 	.word	0x20000c10
 8007700:	20000be0 	.word	0x20000be0
 8007704:	20000bdc 	.word	0x20000bdc
 8007708:	20000c44 	.word	0x20000c44

0800770c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800770c:	b580      	push	{r7, lr}
 800770e:	b08a      	sub	sp, #40	; 0x28
 8007710:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007712:	2300      	movs	r3, #0
 8007714:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007716:	f000 fb07 	bl	8007d28 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800771a:	4b1c      	ldr	r3, [pc, #112]	; (800778c <xTimerCreateTimerTask+0x80>)
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	2b00      	cmp	r3, #0
 8007720:	d021      	beq.n	8007766 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007722:	2300      	movs	r3, #0
 8007724:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007726:	2300      	movs	r3, #0
 8007728:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800772a:	1d3a      	adds	r2, r7, #4
 800772c:	f107 0108 	add.w	r1, r7, #8
 8007730:	f107 030c 	add.w	r3, r7, #12
 8007734:	4618      	mov	r0, r3
 8007736:	f7fe fb31 	bl	8005d9c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800773a:	6879      	ldr	r1, [r7, #4]
 800773c:	68bb      	ldr	r3, [r7, #8]
 800773e:	68fa      	ldr	r2, [r7, #12]
 8007740:	9202      	str	r2, [sp, #8]
 8007742:	9301      	str	r3, [sp, #4]
 8007744:	2302      	movs	r3, #2
 8007746:	9300      	str	r3, [sp, #0]
 8007748:	2300      	movs	r3, #0
 800774a:	460a      	mov	r2, r1
 800774c:	4910      	ldr	r1, [pc, #64]	; (8007790 <xTimerCreateTimerTask+0x84>)
 800774e:	4811      	ldr	r0, [pc, #68]	; (8007794 <xTimerCreateTimerTask+0x88>)
 8007750:	f7ff f8de 	bl	8006910 <xTaskCreateStatic>
 8007754:	4603      	mov	r3, r0
 8007756:	4a10      	ldr	r2, [pc, #64]	; (8007798 <xTimerCreateTimerTask+0x8c>)
 8007758:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800775a:	4b0f      	ldr	r3, [pc, #60]	; (8007798 <xTimerCreateTimerTask+0x8c>)
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	2b00      	cmp	r3, #0
 8007760:	d001      	beq.n	8007766 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007762:	2301      	movs	r3, #1
 8007764:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007766:	697b      	ldr	r3, [r7, #20]
 8007768:	2b00      	cmp	r3, #0
 800776a:	d10a      	bne.n	8007782 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800776c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007770:	f383 8811 	msr	BASEPRI, r3
 8007774:	f3bf 8f6f 	isb	sy
 8007778:	f3bf 8f4f 	dsb	sy
 800777c:	613b      	str	r3, [r7, #16]
}
 800777e:	bf00      	nop
 8007780:	e7fe      	b.n	8007780 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8007782:	697b      	ldr	r3, [r7, #20]
}
 8007784:	4618      	mov	r0, r3
 8007786:	3718      	adds	r7, #24
 8007788:	46bd      	mov	sp, r7
 800778a:	bd80      	pop	{r7, pc}
 800778c:	20000c80 	.word	0x20000c80
 8007790:	08009b44 	.word	0x08009b44
 8007794:	080078d1 	.word	0x080078d1
 8007798:	20000c84 	.word	0x20000c84

0800779c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800779c:	b580      	push	{r7, lr}
 800779e:	b08a      	sub	sp, #40	; 0x28
 80077a0:	af00      	add	r7, sp, #0
 80077a2:	60f8      	str	r0, [r7, #12]
 80077a4:	60b9      	str	r1, [r7, #8]
 80077a6:	607a      	str	r2, [r7, #4]
 80077a8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80077aa:	2300      	movs	r3, #0
 80077ac:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d10a      	bne.n	80077ca <xTimerGenericCommand+0x2e>
	__asm volatile
 80077b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077b8:	f383 8811 	msr	BASEPRI, r3
 80077bc:	f3bf 8f6f 	isb	sy
 80077c0:	f3bf 8f4f 	dsb	sy
 80077c4:	623b      	str	r3, [r7, #32]
}
 80077c6:	bf00      	nop
 80077c8:	e7fe      	b.n	80077c8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80077ca:	4b1a      	ldr	r3, [pc, #104]	; (8007834 <xTimerGenericCommand+0x98>)
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d02a      	beq.n	8007828 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80077d2:	68bb      	ldr	r3, [r7, #8]
 80077d4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80077de:	68bb      	ldr	r3, [r7, #8]
 80077e0:	2b05      	cmp	r3, #5
 80077e2:	dc18      	bgt.n	8007816 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80077e4:	f7ff feb2 	bl	800754c <xTaskGetSchedulerState>
 80077e8:	4603      	mov	r3, r0
 80077ea:	2b02      	cmp	r3, #2
 80077ec:	d109      	bne.n	8007802 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80077ee:	4b11      	ldr	r3, [pc, #68]	; (8007834 <xTimerGenericCommand+0x98>)
 80077f0:	6818      	ldr	r0, [r3, #0]
 80077f2:	f107 0110 	add.w	r1, r7, #16
 80077f6:	2300      	movs	r3, #0
 80077f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80077fa:	f7fe fca1 	bl	8006140 <xQueueGenericSend>
 80077fe:	6278      	str	r0, [r7, #36]	; 0x24
 8007800:	e012      	b.n	8007828 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007802:	4b0c      	ldr	r3, [pc, #48]	; (8007834 <xTimerGenericCommand+0x98>)
 8007804:	6818      	ldr	r0, [r3, #0]
 8007806:	f107 0110 	add.w	r1, r7, #16
 800780a:	2300      	movs	r3, #0
 800780c:	2200      	movs	r2, #0
 800780e:	f7fe fc97 	bl	8006140 <xQueueGenericSend>
 8007812:	6278      	str	r0, [r7, #36]	; 0x24
 8007814:	e008      	b.n	8007828 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007816:	4b07      	ldr	r3, [pc, #28]	; (8007834 <xTimerGenericCommand+0x98>)
 8007818:	6818      	ldr	r0, [r3, #0]
 800781a:	f107 0110 	add.w	r1, r7, #16
 800781e:	2300      	movs	r3, #0
 8007820:	683a      	ldr	r2, [r7, #0]
 8007822:	f7fe fd8b 	bl	800633c <xQueueGenericSendFromISR>
 8007826:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800782a:	4618      	mov	r0, r3
 800782c:	3728      	adds	r7, #40	; 0x28
 800782e:	46bd      	mov	sp, r7
 8007830:	bd80      	pop	{r7, pc}
 8007832:	bf00      	nop
 8007834:	20000c80 	.word	0x20000c80

08007838 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007838:	b580      	push	{r7, lr}
 800783a:	b088      	sub	sp, #32
 800783c:	af02      	add	r7, sp, #8
 800783e:	6078      	str	r0, [r7, #4]
 8007840:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007842:	4b22      	ldr	r3, [pc, #136]	; (80078cc <prvProcessExpiredTimer+0x94>)
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	68db      	ldr	r3, [r3, #12]
 8007848:	68db      	ldr	r3, [r3, #12]
 800784a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800784c:	697b      	ldr	r3, [r7, #20]
 800784e:	3304      	adds	r3, #4
 8007850:	4618      	mov	r0, r3
 8007852:	f7fe fb47 	bl	8005ee4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007856:	697b      	ldr	r3, [r7, #20]
 8007858:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800785c:	f003 0304 	and.w	r3, r3, #4
 8007860:	2b00      	cmp	r3, #0
 8007862:	d022      	beq.n	80078aa <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007864:	697b      	ldr	r3, [r7, #20]
 8007866:	699a      	ldr	r2, [r3, #24]
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	18d1      	adds	r1, r2, r3
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	683a      	ldr	r2, [r7, #0]
 8007870:	6978      	ldr	r0, [r7, #20]
 8007872:	f000 f8d1 	bl	8007a18 <prvInsertTimerInActiveList>
 8007876:	4603      	mov	r3, r0
 8007878:	2b00      	cmp	r3, #0
 800787a:	d01f      	beq.n	80078bc <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800787c:	2300      	movs	r3, #0
 800787e:	9300      	str	r3, [sp, #0]
 8007880:	2300      	movs	r3, #0
 8007882:	687a      	ldr	r2, [r7, #4]
 8007884:	2100      	movs	r1, #0
 8007886:	6978      	ldr	r0, [r7, #20]
 8007888:	f7ff ff88 	bl	800779c <xTimerGenericCommand>
 800788c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800788e:	693b      	ldr	r3, [r7, #16]
 8007890:	2b00      	cmp	r3, #0
 8007892:	d113      	bne.n	80078bc <prvProcessExpiredTimer+0x84>
	__asm volatile
 8007894:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007898:	f383 8811 	msr	BASEPRI, r3
 800789c:	f3bf 8f6f 	isb	sy
 80078a0:	f3bf 8f4f 	dsb	sy
 80078a4:	60fb      	str	r3, [r7, #12]
}
 80078a6:	bf00      	nop
 80078a8:	e7fe      	b.n	80078a8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80078aa:	697b      	ldr	r3, [r7, #20]
 80078ac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80078b0:	f023 0301 	bic.w	r3, r3, #1
 80078b4:	b2da      	uxtb	r2, r3
 80078b6:	697b      	ldr	r3, [r7, #20]
 80078b8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80078bc:	697b      	ldr	r3, [r7, #20]
 80078be:	6a1b      	ldr	r3, [r3, #32]
 80078c0:	6978      	ldr	r0, [r7, #20]
 80078c2:	4798      	blx	r3
}
 80078c4:	bf00      	nop
 80078c6:	3718      	adds	r7, #24
 80078c8:	46bd      	mov	sp, r7
 80078ca:	bd80      	pop	{r7, pc}
 80078cc:	20000c78 	.word	0x20000c78

080078d0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80078d0:	b580      	push	{r7, lr}
 80078d2:	b084      	sub	sp, #16
 80078d4:	af00      	add	r7, sp, #0
 80078d6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80078d8:	f107 0308 	add.w	r3, r7, #8
 80078dc:	4618      	mov	r0, r3
 80078de:	f000 f857 	bl	8007990 <prvGetNextExpireTime>
 80078e2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80078e4:	68bb      	ldr	r3, [r7, #8]
 80078e6:	4619      	mov	r1, r3
 80078e8:	68f8      	ldr	r0, [r7, #12]
 80078ea:	f000 f803 	bl	80078f4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80078ee:	f000 f8d5 	bl	8007a9c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80078f2:	e7f1      	b.n	80078d8 <prvTimerTask+0x8>

080078f4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80078f4:	b580      	push	{r7, lr}
 80078f6:	b084      	sub	sp, #16
 80078f8:	af00      	add	r7, sp, #0
 80078fa:	6078      	str	r0, [r7, #4]
 80078fc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80078fe:	f7ff fa43 	bl	8006d88 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007902:	f107 0308 	add.w	r3, r7, #8
 8007906:	4618      	mov	r0, r3
 8007908:	f000 f866 	bl	80079d8 <prvSampleTimeNow>
 800790c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800790e:	68bb      	ldr	r3, [r7, #8]
 8007910:	2b00      	cmp	r3, #0
 8007912:	d130      	bne.n	8007976 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007914:	683b      	ldr	r3, [r7, #0]
 8007916:	2b00      	cmp	r3, #0
 8007918:	d10a      	bne.n	8007930 <prvProcessTimerOrBlockTask+0x3c>
 800791a:	687a      	ldr	r2, [r7, #4]
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	429a      	cmp	r2, r3
 8007920:	d806      	bhi.n	8007930 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007922:	f7ff fa3f 	bl	8006da4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007926:	68f9      	ldr	r1, [r7, #12]
 8007928:	6878      	ldr	r0, [r7, #4]
 800792a:	f7ff ff85 	bl	8007838 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800792e:	e024      	b.n	800797a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007930:	683b      	ldr	r3, [r7, #0]
 8007932:	2b00      	cmp	r3, #0
 8007934:	d008      	beq.n	8007948 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007936:	4b13      	ldr	r3, [pc, #76]	; (8007984 <prvProcessTimerOrBlockTask+0x90>)
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	2b00      	cmp	r3, #0
 800793e:	d101      	bne.n	8007944 <prvProcessTimerOrBlockTask+0x50>
 8007940:	2301      	movs	r3, #1
 8007942:	e000      	b.n	8007946 <prvProcessTimerOrBlockTask+0x52>
 8007944:	2300      	movs	r3, #0
 8007946:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007948:	4b0f      	ldr	r3, [pc, #60]	; (8007988 <prvProcessTimerOrBlockTask+0x94>)
 800794a:	6818      	ldr	r0, [r3, #0]
 800794c:	687a      	ldr	r2, [r7, #4]
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	1ad3      	subs	r3, r2, r3
 8007952:	683a      	ldr	r2, [r7, #0]
 8007954:	4619      	mov	r1, r3
 8007956:	f7fe ffa7 	bl	80068a8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800795a:	f7ff fa23 	bl	8006da4 <xTaskResumeAll>
 800795e:	4603      	mov	r3, r0
 8007960:	2b00      	cmp	r3, #0
 8007962:	d10a      	bne.n	800797a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007964:	4b09      	ldr	r3, [pc, #36]	; (800798c <prvProcessTimerOrBlockTask+0x98>)
 8007966:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800796a:	601a      	str	r2, [r3, #0]
 800796c:	f3bf 8f4f 	dsb	sy
 8007970:	f3bf 8f6f 	isb	sy
}
 8007974:	e001      	b.n	800797a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007976:	f7ff fa15 	bl	8006da4 <xTaskResumeAll>
}
 800797a:	bf00      	nop
 800797c:	3710      	adds	r7, #16
 800797e:	46bd      	mov	sp, r7
 8007980:	bd80      	pop	{r7, pc}
 8007982:	bf00      	nop
 8007984:	20000c7c 	.word	0x20000c7c
 8007988:	20000c80 	.word	0x20000c80
 800798c:	e000ed04 	.word	0xe000ed04

08007990 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007990:	b480      	push	{r7}
 8007992:	b085      	sub	sp, #20
 8007994:	af00      	add	r7, sp, #0
 8007996:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007998:	4b0e      	ldr	r3, [pc, #56]	; (80079d4 <prvGetNextExpireTime+0x44>)
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d101      	bne.n	80079a6 <prvGetNextExpireTime+0x16>
 80079a2:	2201      	movs	r2, #1
 80079a4:	e000      	b.n	80079a8 <prvGetNextExpireTime+0x18>
 80079a6:	2200      	movs	r2, #0
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d105      	bne.n	80079c0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80079b4:	4b07      	ldr	r3, [pc, #28]	; (80079d4 <prvGetNextExpireTime+0x44>)
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	68db      	ldr	r3, [r3, #12]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	60fb      	str	r3, [r7, #12]
 80079be:	e001      	b.n	80079c4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80079c0:	2300      	movs	r3, #0
 80079c2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80079c4:	68fb      	ldr	r3, [r7, #12]
}
 80079c6:	4618      	mov	r0, r3
 80079c8:	3714      	adds	r7, #20
 80079ca:	46bd      	mov	sp, r7
 80079cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d0:	4770      	bx	lr
 80079d2:	bf00      	nop
 80079d4:	20000c78 	.word	0x20000c78

080079d8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80079d8:	b580      	push	{r7, lr}
 80079da:	b084      	sub	sp, #16
 80079dc:	af00      	add	r7, sp, #0
 80079de:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80079e0:	f7ff fa7e 	bl	8006ee0 <xTaskGetTickCount>
 80079e4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80079e6:	4b0b      	ldr	r3, [pc, #44]	; (8007a14 <prvSampleTimeNow+0x3c>)
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	68fa      	ldr	r2, [r7, #12]
 80079ec:	429a      	cmp	r2, r3
 80079ee:	d205      	bcs.n	80079fc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80079f0:	f000 f936 	bl	8007c60 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	2201      	movs	r2, #1
 80079f8:	601a      	str	r2, [r3, #0]
 80079fa:	e002      	b.n	8007a02 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	2200      	movs	r2, #0
 8007a00:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007a02:	4a04      	ldr	r2, [pc, #16]	; (8007a14 <prvSampleTimeNow+0x3c>)
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007a08:	68fb      	ldr	r3, [r7, #12]
}
 8007a0a:	4618      	mov	r0, r3
 8007a0c:	3710      	adds	r7, #16
 8007a0e:	46bd      	mov	sp, r7
 8007a10:	bd80      	pop	{r7, pc}
 8007a12:	bf00      	nop
 8007a14:	20000c88 	.word	0x20000c88

08007a18 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007a18:	b580      	push	{r7, lr}
 8007a1a:	b086      	sub	sp, #24
 8007a1c:	af00      	add	r7, sp, #0
 8007a1e:	60f8      	str	r0, [r7, #12]
 8007a20:	60b9      	str	r1, [r7, #8]
 8007a22:	607a      	str	r2, [r7, #4]
 8007a24:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007a26:	2300      	movs	r3, #0
 8007a28:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	68ba      	ldr	r2, [r7, #8]
 8007a2e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	68fa      	ldr	r2, [r7, #12]
 8007a34:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007a36:	68ba      	ldr	r2, [r7, #8]
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	429a      	cmp	r2, r3
 8007a3c:	d812      	bhi.n	8007a64 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007a3e:	687a      	ldr	r2, [r7, #4]
 8007a40:	683b      	ldr	r3, [r7, #0]
 8007a42:	1ad2      	subs	r2, r2, r3
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	699b      	ldr	r3, [r3, #24]
 8007a48:	429a      	cmp	r2, r3
 8007a4a:	d302      	bcc.n	8007a52 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007a4c:	2301      	movs	r3, #1
 8007a4e:	617b      	str	r3, [r7, #20]
 8007a50:	e01b      	b.n	8007a8a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007a52:	4b10      	ldr	r3, [pc, #64]	; (8007a94 <prvInsertTimerInActiveList+0x7c>)
 8007a54:	681a      	ldr	r2, [r3, #0]
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	3304      	adds	r3, #4
 8007a5a:	4619      	mov	r1, r3
 8007a5c:	4610      	mov	r0, r2
 8007a5e:	f7fe fa08 	bl	8005e72 <vListInsert>
 8007a62:	e012      	b.n	8007a8a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007a64:	687a      	ldr	r2, [r7, #4]
 8007a66:	683b      	ldr	r3, [r7, #0]
 8007a68:	429a      	cmp	r2, r3
 8007a6a:	d206      	bcs.n	8007a7a <prvInsertTimerInActiveList+0x62>
 8007a6c:	68ba      	ldr	r2, [r7, #8]
 8007a6e:	683b      	ldr	r3, [r7, #0]
 8007a70:	429a      	cmp	r2, r3
 8007a72:	d302      	bcc.n	8007a7a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007a74:	2301      	movs	r3, #1
 8007a76:	617b      	str	r3, [r7, #20]
 8007a78:	e007      	b.n	8007a8a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007a7a:	4b07      	ldr	r3, [pc, #28]	; (8007a98 <prvInsertTimerInActiveList+0x80>)
 8007a7c:	681a      	ldr	r2, [r3, #0]
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	3304      	adds	r3, #4
 8007a82:	4619      	mov	r1, r3
 8007a84:	4610      	mov	r0, r2
 8007a86:	f7fe f9f4 	bl	8005e72 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007a8a:	697b      	ldr	r3, [r7, #20]
}
 8007a8c:	4618      	mov	r0, r3
 8007a8e:	3718      	adds	r7, #24
 8007a90:	46bd      	mov	sp, r7
 8007a92:	bd80      	pop	{r7, pc}
 8007a94:	20000c7c 	.word	0x20000c7c
 8007a98:	20000c78 	.word	0x20000c78

08007a9c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007a9c:	b580      	push	{r7, lr}
 8007a9e:	b08e      	sub	sp, #56	; 0x38
 8007aa0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007aa2:	e0ca      	b.n	8007c3a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	da18      	bge.n	8007adc <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007aaa:	1d3b      	adds	r3, r7, #4
 8007aac:	3304      	adds	r3, #4
 8007aae:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007ab0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d10a      	bne.n	8007acc <prvProcessReceivedCommands+0x30>
	__asm volatile
 8007ab6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007aba:	f383 8811 	msr	BASEPRI, r3
 8007abe:	f3bf 8f6f 	isb	sy
 8007ac2:	f3bf 8f4f 	dsb	sy
 8007ac6:	61fb      	str	r3, [r7, #28]
}
 8007ac8:	bf00      	nop
 8007aca:	e7fe      	b.n	8007aca <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007acc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007ad2:	6850      	ldr	r0, [r2, #4]
 8007ad4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007ad6:	6892      	ldr	r2, [r2, #8]
 8007ad8:	4611      	mov	r1, r2
 8007ada:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	f2c0 80aa 	blt.w	8007c38 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007ae8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007aea:	695b      	ldr	r3, [r3, #20]
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d004      	beq.n	8007afa <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007af0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007af2:	3304      	adds	r3, #4
 8007af4:	4618      	mov	r0, r3
 8007af6:	f7fe f9f5 	bl	8005ee4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007afa:	463b      	mov	r3, r7
 8007afc:	4618      	mov	r0, r3
 8007afe:	f7ff ff6b 	bl	80079d8 <prvSampleTimeNow>
 8007b02:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	2b09      	cmp	r3, #9
 8007b08:	f200 8097 	bhi.w	8007c3a <prvProcessReceivedCommands+0x19e>
 8007b0c:	a201      	add	r2, pc, #4	; (adr r2, 8007b14 <prvProcessReceivedCommands+0x78>)
 8007b0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b12:	bf00      	nop
 8007b14:	08007b3d 	.word	0x08007b3d
 8007b18:	08007b3d 	.word	0x08007b3d
 8007b1c:	08007b3d 	.word	0x08007b3d
 8007b20:	08007bb1 	.word	0x08007bb1
 8007b24:	08007bc5 	.word	0x08007bc5
 8007b28:	08007c0f 	.word	0x08007c0f
 8007b2c:	08007b3d 	.word	0x08007b3d
 8007b30:	08007b3d 	.word	0x08007b3d
 8007b34:	08007bb1 	.word	0x08007bb1
 8007b38:	08007bc5 	.word	0x08007bc5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007b3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b3e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007b42:	f043 0301 	orr.w	r3, r3, #1
 8007b46:	b2da      	uxtb	r2, r3
 8007b48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b4a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007b4e:	68ba      	ldr	r2, [r7, #8]
 8007b50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b52:	699b      	ldr	r3, [r3, #24]
 8007b54:	18d1      	adds	r1, r2, r3
 8007b56:	68bb      	ldr	r3, [r7, #8]
 8007b58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b5a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007b5c:	f7ff ff5c 	bl	8007a18 <prvInsertTimerInActiveList>
 8007b60:	4603      	mov	r3, r0
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d069      	beq.n	8007c3a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007b66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b68:	6a1b      	ldr	r3, [r3, #32]
 8007b6a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007b6c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007b6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b70:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007b74:	f003 0304 	and.w	r3, r3, #4
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d05e      	beq.n	8007c3a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007b7c:	68ba      	ldr	r2, [r7, #8]
 8007b7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b80:	699b      	ldr	r3, [r3, #24]
 8007b82:	441a      	add	r2, r3
 8007b84:	2300      	movs	r3, #0
 8007b86:	9300      	str	r3, [sp, #0]
 8007b88:	2300      	movs	r3, #0
 8007b8a:	2100      	movs	r1, #0
 8007b8c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007b8e:	f7ff fe05 	bl	800779c <xTimerGenericCommand>
 8007b92:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007b94:	6a3b      	ldr	r3, [r7, #32]
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d14f      	bne.n	8007c3a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8007b9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b9e:	f383 8811 	msr	BASEPRI, r3
 8007ba2:	f3bf 8f6f 	isb	sy
 8007ba6:	f3bf 8f4f 	dsb	sy
 8007baa:	61bb      	str	r3, [r7, #24]
}
 8007bac:	bf00      	nop
 8007bae:	e7fe      	b.n	8007bae <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007bb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bb2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007bb6:	f023 0301 	bic.w	r3, r3, #1
 8007bba:	b2da      	uxtb	r2, r3
 8007bbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bbe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8007bc2:	e03a      	b.n	8007c3a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007bc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bc6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007bca:	f043 0301 	orr.w	r3, r3, #1
 8007bce:	b2da      	uxtb	r2, r3
 8007bd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bd2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007bd6:	68ba      	ldr	r2, [r7, #8]
 8007bd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bda:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007bdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bde:	699b      	ldr	r3, [r3, #24]
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d10a      	bne.n	8007bfa <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8007be4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007be8:	f383 8811 	msr	BASEPRI, r3
 8007bec:	f3bf 8f6f 	isb	sy
 8007bf0:	f3bf 8f4f 	dsb	sy
 8007bf4:	617b      	str	r3, [r7, #20]
}
 8007bf6:	bf00      	nop
 8007bf8:	e7fe      	b.n	8007bf8 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007bfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bfc:	699a      	ldr	r2, [r3, #24]
 8007bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c00:	18d1      	adds	r1, r2, r3
 8007c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c06:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007c08:	f7ff ff06 	bl	8007a18 <prvInsertTimerInActiveList>
					break;
 8007c0c:	e015      	b.n	8007c3a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007c0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c10:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007c14:	f003 0302 	and.w	r3, r3, #2
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d103      	bne.n	8007c24 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8007c1c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007c1e:	f000 fbdf 	bl	80083e0 <vPortFree>
 8007c22:	e00a      	b.n	8007c3a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007c24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c26:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007c2a:	f023 0301 	bic.w	r3, r3, #1
 8007c2e:	b2da      	uxtb	r2, r3
 8007c30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c32:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007c36:	e000      	b.n	8007c3a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8007c38:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007c3a:	4b08      	ldr	r3, [pc, #32]	; (8007c5c <prvProcessReceivedCommands+0x1c0>)
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	1d39      	adds	r1, r7, #4
 8007c40:	2200      	movs	r2, #0
 8007c42:	4618      	mov	r0, r3
 8007c44:	f7fe fc16 	bl	8006474 <xQueueReceive>
 8007c48:	4603      	mov	r3, r0
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	f47f af2a 	bne.w	8007aa4 <prvProcessReceivedCommands+0x8>
	}
}
 8007c50:	bf00      	nop
 8007c52:	bf00      	nop
 8007c54:	3730      	adds	r7, #48	; 0x30
 8007c56:	46bd      	mov	sp, r7
 8007c58:	bd80      	pop	{r7, pc}
 8007c5a:	bf00      	nop
 8007c5c:	20000c80 	.word	0x20000c80

08007c60 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007c60:	b580      	push	{r7, lr}
 8007c62:	b088      	sub	sp, #32
 8007c64:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007c66:	e048      	b.n	8007cfa <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007c68:	4b2d      	ldr	r3, [pc, #180]	; (8007d20 <prvSwitchTimerLists+0xc0>)
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	68db      	ldr	r3, [r3, #12]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007c72:	4b2b      	ldr	r3, [pc, #172]	; (8007d20 <prvSwitchTimerLists+0xc0>)
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	68db      	ldr	r3, [r3, #12]
 8007c78:	68db      	ldr	r3, [r3, #12]
 8007c7a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	3304      	adds	r3, #4
 8007c80:	4618      	mov	r0, r3
 8007c82:	f7fe f92f 	bl	8005ee4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	6a1b      	ldr	r3, [r3, #32]
 8007c8a:	68f8      	ldr	r0, [r7, #12]
 8007c8c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007c94:	f003 0304 	and.w	r3, r3, #4
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d02e      	beq.n	8007cfa <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	699b      	ldr	r3, [r3, #24]
 8007ca0:	693a      	ldr	r2, [r7, #16]
 8007ca2:	4413      	add	r3, r2
 8007ca4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007ca6:	68ba      	ldr	r2, [r7, #8]
 8007ca8:	693b      	ldr	r3, [r7, #16]
 8007caa:	429a      	cmp	r2, r3
 8007cac:	d90e      	bls.n	8007ccc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	68ba      	ldr	r2, [r7, #8]
 8007cb2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	68fa      	ldr	r2, [r7, #12]
 8007cb8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007cba:	4b19      	ldr	r3, [pc, #100]	; (8007d20 <prvSwitchTimerLists+0xc0>)
 8007cbc:	681a      	ldr	r2, [r3, #0]
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	3304      	adds	r3, #4
 8007cc2:	4619      	mov	r1, r3
 8007cc4:	4610      	mov	r0, r2
 8007cc6:	f7fe f8d4 	bl	8005e72 <vListInsert>
 8007cca:	e016      	b.n	8007cfa <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007ccc:	2300      	movs	r3, #0
 8007cce:	9300      	str	r3, [sp, #0]
 8007cd0:	2300      	movs	r3, #0
 8007cd2:	693a      	ldr	r2, [r7, #16]
 8007cd4:	2100      	movs	r1, #0
 8007cd6:	68f8      	ldr	r0, [r7, #12]
 8007cd8:	f7ff fd60 	bl	800779c <xTimerGenericCommand>
 8007cdc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d10a      	bne.n	8007cfa <prvSwitchTimerLists+0x9a>
	__asm volatile
 8007ce4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ce8:	f383 8811 	msr	BASEPRI, r3
 8007cec:	f3bf 8f6f 	isb	sy
 8007cf0:	f3bf 8f4f 	dsb	sy
 8007cf4:	603b      	str	r3, [r7, #0]
}
 8007cf6:	bf00      	nop
 8007cf8:	e7fe      	b.n	8007cf8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007cfa:	4b09      	ldr	r3, [pc, #36]	; (8007d20 <prvSwitchTimerLists+0xc0>)
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d1b1      	bne.n	8007c68 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007d04:	4b06      	ldr	r3, [pc, #24]	; (8007d20 <prvSwitchTimerLists+0xc0>)
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007d0a:	4b06      	ldr	r3, [pc, #24]	; (8007d24 <prvSwitchTimerLists+0xc4>)
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	4a04      	ldr	r2, [pc, #16]	; (8007d20 <prvSwitchTimerLists+0xc0>)
 8007d10:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007d12:	4a04      	ldr	r2, [pc, #16]	; (8007d24 <prvSwitchTimerLists+0xc4>)
 8007d14:	697b      	ldr	r3, [r7, #20]
 8007d16:	6013      	str	r3, [r2, #0]
}
 8007d18:	bf00      	nop
 8007d1a:	3718      	adds	r7, #24
 8007d1c:	46bd      	mov	sp, r7
 8007d1e:	bd80      	pop	{r7, pc}
 8007d20:	20000c78 	.word	0x20000c78
 8007d24:	20000c7c 	.word	0x20000c7c

08007d28 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007d28:	b580      	push	{r7, lr}
 8007d2a:	b082      	sub	sp, #8
 8007d2c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007d2e:	f000 f969 	bl	8008004 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007d32:	4b15      	ldr	r3, [pc, #84]	; (8007d88 <prvCheckForValidListAndQueue+0x60>)
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d120      	bne.n	8007d7c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007d3a:	4814      	ldr	r0, [pc, #80]	; (8007d8c <prvCheckForValidListAndQueue+0x64>)
 8007d3c:	f7fe f848 	bl	8005dd0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007d40:	4813      	ldr	r0, [pc, #76]	; (8007d90 <prvCheckForValidListAndQueue+0x68>)
 8007d42:	f7fe f845 	bl	8005dd0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007d46:	4b13      	ldr	r3, [pc, #76]	; (8007d94 <prvCheckForValidListAndQueue+0x6c>)
 8007d48:	4a10      	ldr	r2, [pc, #64]	; (8007d8c <prvCheckForValidListAndQueue+0x64>)
 8007d4a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007d4c:	4b12      	ldr	r3, [pc, #72]	; (8007d98 <prvCheckForValidListAndQueue+0x70>)
 8007d4e:	4a10      	ldr	r2, [pc, #64]	; (8007d90 <prvCheckForValidListAndQueue+0x68>)
 8007d50:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007d52:	2300      	movs	r3, #0
 8007d54:	9300      	str	r3, [sp, #0]
 8007d56:	4b11      	ldr	r3, [pc, #68]	; (8007d9c <prvCheckForValidListAndQueue+0x74>)
 8007d58:	4a11      	ldr	r2, [pc, #68]	; (8007da0 <prvCheckForValidListAndQueue+0x78>)
 8007d5a:	2110      	movs	r1, #16
 8007d5c:	200a      	movs	r0, #10
 8007d5e:	f7fe f953 	bl	8006008 <xQueueGenericCreateStatic>
 8007d62:	4603      	mov	r3, r0
 8007d64:	4a08      	ldr	r2, [pc, #32]	; (8007d88 <prvCheckForValidListAndQueue+0x60>)
 8007d66:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007d68:	4b07      	ldr	r3, [pc, #28]	; (8007d88 <prvCheckForValidListAndQueue+0x60>)
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d005      	beq.n	8007d7c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007d70:	4b05      	ldr	r3, [pc, #20]	; (8007d88 <prvCheckForValidListAndQueue+0x60>)
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	490b      	ldr	r1, [pc, #44]	; (8007da4 <prvCheckForValidListAndQueue+0x7c>)
 8007d76:	4618      	mov	r0, r3
 8007d78:	f7fe fd6c 	bl	8006854 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007d7c:	f000 f972 	bl	8008064 <vPortExitCritical>
}
 8007d80:	bf00      	nop
 8007d82:	46bd      	mov	sp, r7
 8007d84:	bd80      	pop	{r7, pc}
 8007d86:	bf00      	nop
 8007d88:	20000c80 	.word	0x20000c80
 8007d8c:	20000c50 	.word	0x20000c50
 8007d90:	20000c64 	.word	0x20000c64
 8007d94:	20000c78 	.word	0x20000c78
 8007d98:	20000c7c 	.word	0x20000c7c
 8007d9c:	20000d2c 	.word	0x20000d2c
 8007da0:	20000c8c 	.word	0x20000c8c
 8007da4:	08009b4c 	.word	0x08009b4c

08007da8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007da8:	b480      	push	{r7}
 8007daa:	b085      	sub	sp, #20
 8007dac:	af00      	add	r7, sp, #0
 8007dae:	60f8      	str	r0, [r7, #12]
 8007db0:	60b9      	str	r1, [r7, #8]
 8007db2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	3b04      	subs	r3, #4
 8007db8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007dc0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	3b04      	subs	r3, #4
 8007dc6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007dc8:	68bb      	ldr	r3, [r7, #8]
 8007dca:	f023 0201 	bic.w	r2, r3, #1
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	3b04      	subs	r3, #4
 8007dd6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007dd8:	4a0c      	ldr	r2, [pc, #48]	; (8007e0c <pxPortInitialiseStack+0x64>)
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	3b14      	subs	r3, #20
 8007de2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007de4:	687a      	ldr	r2, [r7, #4]
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	3b04      	subs	r3, #4
 8007dee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	f06f 0202 	mvn.w	r2, #2
 8007df6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	3b20      	subs	r3, #32
 8007dfc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007dfe:	68fb      	ldr	r3, [r7, #12]
}
 8007e00:	4618      	mov	r0, r3
 8007e02:	3714      	adds	r7, #20
 8007e04:	46bd      	mov	sp, r7
 8007e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e0a:	4770      	bx	lr
 8007e0c:	08007e11 	.word	0x08007e11

08007e10 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007e10:	b480      	push	{r7}
 8007e12:	b085      	sub	sp, #20
 8007e14:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007e16:	2300      	movs	r3, #0
 8007e18:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007e1a:	4b12      	ldr	r3, [pc, #72]	; (8007e64 <prvTaskExitError+0x54>)
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e22:	d00a      	beq.n	8007e3a <prvTaskExitError+0x2a>
	__asm volatile
 8007e24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e28:	f383 8811 	msr	BASEPRI, r3
 8007e2c:	f3bf 8f6f 	isb	sy
 8007e30:	f3bf 8f4f 	dsb	sy
 8007e34:	60fb      	str	r3, [r7, #12]
}
 8007e36:	bf00      	nop
 8007e38:	e7fe      	b.n	8007e38 <prvTaskExitError+0x28>
	__asm volatile
 8007e3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e3e:	f383 8811 	msr	BASEPRI, r3
 8007e42:	f3bf 8f6f 	isb	sy
 8007e46:	f3bf 8f4f 	dsb	sy
 8007e4a:	60bb      	str	r3, [r7, #8]
}
 8007e4c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007e4e:	bf00      	nop
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d0fc      	beq.n	8007e50 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007e56:	bf00      	nop
 8007e58:	bf00      	nop
 8007e5a:	3714      	adds	r7, #20
 8007e5c:	46bd      	mov	sp, r7
 8007e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e62:	4770      	bx	lr
 8007e64:	2000000c 	.word	0x2000000c
	...

08007e70 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007e70:	4b07      	ldr	r3, [pc, #28]	; (8007e90 <pxCurrentTCBConst2>)
 8007e72:	6819      	ldr	r1, [r3, #0]
 8007e74:	6808      	ldr	r0, [r1, #0]
 8007e76:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e7a:	f380 8809 	msr	PSP, r0
 8007e7e:	f3bf 8f6f 	isb	sy
 8007e82:	f04f 0000 	mov.w	r0, #0
 8007e86:	f380 8811 	msr	BASEPRI, r0
 8007e8a:	4770      	bx	lr
 8007e8c:	f3af 8000 	nop.w

08007e90 <pxCurrentTCBConst2>:
 8007e90:	20000750 	.word	0x20000750
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007e94:	bf00      	nop
 8007e96:	bf00      	nop

08007e98 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007e98:	4808      	ldr	r0, [pc, #32]	; (8007ebc <prvPortStartFirstTask+0x24>)
 8007e9a:	6800      	ldr	r0, [r0, #0]
 8007e9c:	6800      	ldr	r0, [r0, #0]
 8007e9e:	f380 8808 	msr	MSP, r0
 8007ea2:	f04f 0000 	mov.w	r0, #0
 8007ea6:	f380 8814 	msr	CONTROL, r0
 8007eaa:	b662      	cpsie	i
 8007eac:	b661      	cpsie	f
 8007eae:	f3bf 8f4f 	dsb	sy
 8007eb2:	f3bf 8f6f 	isb	sy
 8007eb6:	df00      	svc	0
 8007eb8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007eba:	bf00      	nop
 8007ebc:	e000ed08 	.word	0xe000ed08

08007ec0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007ec0:	b580      	push	{r7, lr}
 8007ec2:	b086      	sub	sp, #24
 8007ec4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007ec6:	4b46      	ldr	r3, [pc, #280]	; (8007fe0 <xPortStartScheduler+0x120>)
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	4a46      	ldr	r2, [pc, #280]	; (8007fe4 <xPortStartScheduler+0x124>)
 8007ecc:	4293      	cmp	r3, r2
 8007ece:	d10a      	bne.n	8007ee6 <xPortStartScheduler+0x26>
	__asm volatile
 8007ed0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ed4:	f383 8811 	msr	BASEPRI, r3
 8007ed8:	f3bf 8f6f 	isb	sy
 8007edc:	f3bf 8f4f 	dsb	sy
 8007ee0:	613b      	str	r3, [r7, #16]
}
 8007ee2:	bf00      	nop
 8007ee4:	e7fe      	b.n	8007ee4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007ee6:	4b3e      	ldr	r3, [pc, #248]	; (8007fe0 <xPortStartScheduler+0x120>)
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	4a3f      	ldr	r2, [pc, #252]	; (8007fe8 <xPortStartScheduler+0x128>)
 8007eec:	4293      	cmp	r3, r2
 8007eee:	d10a      	bne.n	8007f06 <xPortStartScheduler+0x46>
	__asm volatile
 8007ef0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ef4:	f383 8811 	msr	BASEPRI, r3
 8007ef8:	f3bf 8f6f 	isb	sy
 8007efc:	f3bf 8f4f 	dsb	sy
 8007f00:	60fb      	str	r3, [r7, #12]
}
 8007f02:	bf00      	nop
 8007f04:	e7fe      	b.n	8007f04 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007f06:	4b39      	ldr	r3, [pc, #228]	; (8007fec <xPortStartScheduler+0x12c>)
 8007f08:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007f0a:	697b      	ldr	r3, [r7, #20]
 8007f0c:	781b      	ldrb	r3, [r3, #0]
 8007f0e:	b2db      	uxtb	r3, r3
 8007f10:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007f12:	697b      	ldr	r3, [r7, #20]
 8007f14:	22ff      	movs	r2, #255	; 0xff
 8007f16:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007f18:	697b      	ldr	r3, [r7, #20]
 8007f1a:	781b      	ldrb	r3, [r3, #0]
 8007f1c:	b2db      	uxtb	r3, r3
 8007f1e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007f20:	78fb      	ldrb	r3, [r7, #3]
 8007f22:	b2db      	uxtb	r3, r3
 8007f24:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007f28:	b2da      	uxtb	r2, r3
 8007f2a:	4b31      	ldr	r3, [pc, #196]	; (8007ff0 <xPortStartScheduler+0x130>)
 8007f2c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007f2e:	4b31      	ldr	r3, [pc, #196]	; (8007ff4 <xPortStartScheduler+0x134>)
 8007f30:	2207      	movs	r2, #7
 8007f32:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007f34:	e009      	b.n	8007f4a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007f36:	4b2f      	ldr	r3, [pc, #188]	; (8007ff4 <xPortStartScheduler+0x134>)
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	3b01      	subs	r3, #1
 8007f3c:	4a2d      	ldr	r2, [pc, #180]	; (8007ff4 <xPortStartScheduler+0x134>)
 8007f3e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007f40:	78fb      	ldrb	r3, [r7, #3]
 8007f42:	b2db      	uxtb	r3, r3
 8007f44:	005b      	lsls	r3, r3, #1
 8007f46:	b2db      	uxtb	r3, r3
 8007f48:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007f4a:	78fb      	ldrb	r3, [r7, #3]
 8007f4c:	b2db      	uxtb	r3, r3
 8007f4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f52:	2b80      	cmp	r3, #128	; 0x80
 8007f54:	d0ef      	beq.n	8007f36 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007f56:	4b27      	ldr	r3, [pc, #156]	; (8007ff4 <xPortStartScheduler+0x134>)
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	f1c3 0307 	rsb	r3, r3, #7
 8007f5e:	2b04      	cmp	r3, #4
 8007f60:	d00a      	beq.n	8007f78 <xPortStartScheduler+0xb8>
	__asm volatile
 8007f62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f66:	f383 8811 	msr	BASEPRI, r3
 8007f6a:	f3bf 8f6f 	isb	sy
 8007f6e:	f3bf 8f4f 	dsb	sy
 8007f72:	60bb      	str	r3, [r7, #8]
}
 8007f74:	bf00      	nop
 8007f76:	e7fe      	b.n	8007f76 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007f78:	4b1e      	ldr	r3, [pc, #120]	; (8007ff4 <xPortStartScheduler+0x134>)
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	021b      	lsls	r3, r3, #8
 8007f7e:	4a1d      	ldr	r2, [pc, #116]	; (8007ff4 <xPortStartScheduler+0x134>)
 8007f80:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007f82:	4b1c      	ldr	r3, [pc, #112]	; (8007ff4 <xPortStartScheduler+0x134>)
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007f8a:	4a1a      	ldr	r2, [pc, #104]	; (8007ff4 <xPortStartScheduler+0x134>)
 8007f8c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	b2da      	uxtb	r2, r3
 8007f92:	697b      	ldr	r3, [r7, #20]
 8007f94:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007f96:	4b18      	ldr	r3, [pc, #96]	; (8007ff8 <xPortStartScheduler+0x138>)
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	4a17      	ldr	r2, [pc, #92]	; (8007ff8 <xPortStartScheduler+0x138>)
 8007f9c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007fa0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007fa2:	4b15      	ldr	r3, [pc, #84]	; (8007ff8 <xPortStartScheduler+0x138>)
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	4a14      	ldr	r2, [pc, #80]	; (8007ff8 <xPortStartScheduler+0x138>)
 8007fa8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007fac:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007fae:	f000 f8dd 	bl	800816c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007fb2:	4b12      	ldr	r3, [pc, #72]	; (8007ffc <xPortStartScheduler+0x13c>)
 8007fb4:	2200      	movs	r2, #0
 8007fb6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007fb8:	f000 f8fc 	bl	80081b4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007fbc:	4b10      	ldr	r3, [pc, #64]	; (8008000 <xPortStartScheduler+0x140>)
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	4a0f      	ldr	r2, [pc, #60]	; (8008000 <xPortStartScheduler+0x140>)
 8007fc2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007fc6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007fc8:	f7ff ff66 	bl	8007e98 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007fcc:	f7ff f852 	bl	8007074 <vTaskSwitchContext>
	prvTaskExitError();
 8007fd0:	f7ff ff1e 	bl	8007e10 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007fd4:	2300      	movs	r3, #0
}
 8007fd6:	4618      	mov	r0, r3
 8007fd8:	3718      	adds	r7, #24
 8007fda:	46bd      	mov	sp, r7
 8007fdc:	bd80      	pop	{r7, pc}
 8007fde:	bf00      	nop
 8007fe0:	e000ed00 	.word	0xe000ed00
 8007fe4:	410fc271 	.word	0x410fc271
 8007fe8:	410fc270 	.word	0x410fc270
 8007fec:	e000e400 	.word	0xe000e400
 8007ff0:	20000d7c 	.word	0x20000d7c
 8007ff4:	20000d80 	.word	0x20000d80
 8007ff8:	e000ed20 	.word	0xe000ed20
 8007ffc:	2000000c 	.word	0x2000000c
 8008000:	e000ef34 	.word	0xe000ef34

08008004 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008004:	b480      	push	{r7}
 8008006:	b083      	sub	sp, #12
 8008008:	af00      	add	r7, sp, #0
	__asm volatile
 800800a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800800e:	f383 8811 	msr	BASEPRI, r3
 8008012:	f3bf 8f6f 	isb	sy
 8008016:	f3bf 8f4f 	dsb	sy
 800801a:	607b      	str	r3, [r7, #4]
}
 800801c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800801e:	4b0f      	ldr	r3, [pc, #60]	; (800805c <vPortEnterCritical+0x58>)
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	3301      	adds	r3, #1
 8008024:	4a0d      	ldr	r2, [pc, #52]	; (800805c <vPortEnterCritical+0x58>)
 8008026:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008028:	4b0c      	ldr	r3, [pc, #48]	; (800805c <vPortEnterCritical+0x58>)
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	2b01      	cmp	r3, #1
 800802e:	d10f      	bne.n	8008050 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008030:	4b0b      	ldr	r3, [pc, #44]	; (8008060 <vPortEnterCritical+0x5c>)
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	b2db      	uxtb	r3, r3
 8008036:	2b00      	cmp	r3, #0
 8008038:	d00a      	beq.n	8008050 <vPortEnterCritical+0x4c>
	__asm volatile
 800803a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800803e:	f383 8811 	msr	BASEPRI, r3
 8008042:	f3bf 8f6f 	isb	sy
 8008046:	f3bf 8f4f 	dsb	sy
 800804a:	603b      	str	r3, [r7, #0]
}
 800804c:	bf00      	nop
 800804e:	e7fe      	b.n	800804e <vPortEnterCritical+0x4a>
	}
}
 8008050:	bf00      	nop
 8008052:	370c      	adds	r7, #12
 8008054:	46bd      	mov	sp, r7
 8008056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800805a:	4770      	bx	lr
 800805c:	2000000c 	.word	0x2000000c
 8008060:	e000ed04 	.word	0xe000ed04

08008064 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008064:	b480      	push	{r7}
 8008066:	b083      	sub	sp, #12
 8008068:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800806a:	4b12      	ldr	r3, [pc, #72]	; (80080b4 <vPortExitCritical+0x50>)
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	2b00      	cmp	r3, #0
 8008070:	d10a      	bne.n	8008088 <vPortExitCritical+0x24>
	__asm volatile
 8008072:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008076:	f383 8811 	msr	BASEPRI, r3
 800807a:	f3bf 8f6f 	isb	sy
 800807e:	f3bf 8f4f 	dsb	sy
 8008082:	607b      	str	r3, [r7, #4]
}
 8008084:	bf00      	nop
 8008086:	e7fe      	b.n	8008086 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008088:	4b0a      	ldr	r3, [pc, #40]	; (80080b4 <vPortExitCritical+0x50>)
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	3b01      	subs	r3, #1
 800808e:	4a09      	ldr	r2, [pc, #36]	; (80080b4 <vPortExitCritical+0x50>)
 8008090:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008092:	4b08      	ldr	r3, [pc, #32]	; (80080b4 <vPortExitCritical+0x50>)
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	2b00      	cmp	r3, #0
 8008098:	d105      	bne.n	80080a6 <vPortExitCritical+0x42>
 800809a:	2300      	movs	r3, #0
 800809c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800809e:	683b      	ldr	r3, [r7, #0]
 80080a0:	f383 8811 	msr	BASEPRI, r3
}
 80080a4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80080a6:	bf00      	nop
 80080a8:	370c      	adds	r7, #12
 80080aa:	46bd      	mov	sp, r7
 80080ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b0:	4770      	bx	lr
 80080b2:	bf00      	nop
 80080b4:	2000000c 	.word	0x2000000c
	...

080080c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80080c0:	f3ef 8009 	mrs	r0, PSP
 80080c4:	f3bf 8f6f 	isb	sy
 80080c8:	4b15      	ldr	r3, [pc, #84]	; (8008120 <pxCurrentTCBConst>)
 80080ca:	681a      	ldr	r2, [r3, #0]
 80080cc:	f01e 0f10 	tst.w	lr, #16
 80080d0:	bf08      	it	eq
 80080d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80080d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080da:	6010      	str	r0, [r2, #0]
 80080dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80080e0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80080e4:	f380 8811 	msr	BASEPRI, r0
 80080e8:	f3bf 8f4f 	dsb	sy
 80080ec:	f3bf 8f6f 	isb	sy
 80080f0:	f7fe ffc0 	bl	8007074 <vTaskSwitchContext>
 80080f4:	f04f 0000 	mov.w	r0, #0
 80080f8:	f380 8811 	msr	BASEPRI, r0
 80080fc:	bc09      	pop	{r0, r3}
 80080fe:	6819      	ldr	r1, [r3, #0]
 8008100:	6808      	ldr	r0, [r1, #0]
 8008102:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008106:	f01e 0f10 	tst.w	lr, #16
 800810a:	bf08      	it	eq
 800810c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008110:	f380 8809 	msr	PSP, r0
 8008114:	f3bf 8f6f 	isb	sy
 8008118:	4770      	bx	lr
 800811a:	bf00      	nop
 800811c:	f3af 8000 	nop.w

08008120 <pxCurrentTCBConst>:
 8008120:	20000750 	.word	0x20000750
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008124:	bf00      	nop
 8008126:	bf00      	nop

08008128 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008128:	b580      	push	{r7, lr}
 800812a:	b082      	sub	sp, #8
 800812c:	af00      	add	r7, sp, #0
	__asm volatile
 800812e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008132:	f383 8811 	msr	BASEPRI, r3
 8008136:	f3bf 8f6f 	isb	sy
 800813a:	f3bf 8f4f 	dsb	sy
 800813e:	607b      	str	r3, [r7, #4]
}
 8008140:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008142:	f7fe fedd 	bl	8006f00 <xTaskIncrementTick>
 8008146:	4603      	mov	r3, r0
 8008148:	2b00      	cmp	r3, #0
 800814a:	d003      	beq.n	8008154 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800814c:	4b06      	ldr	r3, [pc, #24]	; (8008168 <xPortSysTickHandler+0x40>)
 800814e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008152:	601a      	str	r2, [r3, #0]
 8008154:	2300      	movs	r3, #0
 8008156:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008158:	683b      	ldr	r3, [r7, #0]
 800815a:	f383 8811 	msr	BASEPRI, r3
}
 800815e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008160:	bf00      	nop
 8008162:	3708      	adds	r7, #8
 8008164:	46bd      	mov	sp, r7
 8008166:	bd80      	pop	{r7, pc}
 8008168:	e000ed04 	.word	0xe000ed04

0800816c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800816c:	b480      	push	{r7}
 800816e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008170:	4b0b      	ldr	r3, [pc, #44]	; (80081a0 <vPortSetupTimerInterrupt+0x34>)
 8008172:	2200      	movs	r2, #0
 8008174:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008176:	4b0b      	ldr	r3, [pc, #44]	; (80081a4 <vPortSetupTimerInterrupt+0x38>)
 8008178:	2200      	movs	r2, #0
 800817a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800817c:	4b0a      	ldr	r3, [pc, #40]	; (80081a8 <vPortSetupTimerInterrupt+0x3c>)
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	4a0a      	ldr	r2, [pc, #40]	; (80081ac <vPortSetupTimerInterrupt+0x40>)
 8008182:	fba2 2303 	umull	r2, r3, r2, r3
 8008186:	099b      	lsrs	r3, r3, #6
 8008188:	4a09      	ldr	r2, [pc, #36]	; (80081b0 <vPortSetupTimerInterrupt+0x44>)
 800818a:	3b01      	subs	r3, #1
 800818c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800818e:	4b04      	ldr	r3, [pc, #16]	; (80081a0 <vPortSetupTimerInterrupt+0x34>)
 8008190:	2207      	movs	r2, #7
 8008192:	601a      	str	r2, [r3, #0]
}
 8008194:	bf00      	nop
 8008196:	46bd      	mov	sp, r7
 8008198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800819c:	4770      	bx	lr
 800819e:	bf00      	nop
 80081a0:	e000e010 	.word	0xe000e010
 80081a4:	e000e018 	.word	0xe000e018
 80081a8:	20000000 	.word	0x20000000
 80081ac:	10624dd3 	.word	0x10624dd3
 80081b0:	e000e014 	.word	0xe000e014

080081b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80081b4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80081c4 <vPortEnableVFP+0x10>
 80081b8:	6801      	ldr	r1, [r0, #0]
 80081ba:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80081be:	6001      	str	r1, [r0, #0]
 80081c0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80081c2:	bf00      	nop
 80081c4:	e000ed88 	.word	0xe000ed88

080081c8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80081c8:	b480      	push	{r7}
 80081ca:	b085      	sub	sp, #20
 80081cc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80081ce:	f3ef 8305 	mrs	r3, IPSR
 80081d2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	2b0f      	cmp	r3, #15
 80081d8:	d914      	bls.n	8008204 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80081da:	4a17      	ldr	r2, [pc, #92]	; (8008238 <vPortValidateInterruptPriority+0x70>)
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	4413      	add	r3, r2
 80081e0:	781b      	ldrb	r3, [r3, #0]
 80081e2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80081e4:	4b15      	ldr	r3, [pc, #84]	; (800823c <vPortValidateInterruptPriority+0x74>)
 80081e6:	781b      	ldrb	r3, [r3, #0]
 80081e8:	7afa      	ldrb	r2, [r7, #11]
 80081ea:	429a      	cmp	r2, r3
 80081ec:	d20a      	bcs.n	8008204 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80081ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081f2:	f383 8811 	msr	BASEPRI, r3
 80081f6:	f3bf 8f6f 	isb	sy
 80081fa:	f3bf 8f4f 	dsb	sy
 80081fe:	607b      	str	r3, [r7, #4]
}
 8008200:	bf00      	nop
 8008202:	e7fe      	b.n	8008202 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008204:	4b0e      	ldr	r3, [pc, #56]	; (8008240 <vPortValidateInterruptPriority+0x78>)
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800820c:	4b0d      	ldr	r3, [pc, #52]	; (8008244 <vPortValidateInterruptPriority+0x7c>)
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	429a      	cmp	r2, r3
 8008212:	d90a      	bls.n	800822a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8008214:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008218:	f383 8811 	msr	BASEPRI, r3
 800821c:	f3bf 8f6f 	isb	sy
 8008220:	f3bf 8f4f 	dsb	sy
 8008224:	603b      	str	r3, [r7, #0]
}
 8008226:	bf00      	nop
 8008228:	e7fe      	b.n	8008228 <vPortValidateInterruptPriority+0x60>
	}
 800822a:	bf00      	nop
 800822c:	3714      	adds	r7, #20
 800822e:	46bd      	mov	sp, r7
 8008230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008234:	4770      	bx	lr
 8008236:	bf00      	nop
 8008238:	e000e3f0 	.word	0xe000e3f0
 800823c:	20000d7c 	.word	0x20000d7c
 8008240:	e000ed0c 	.word	0xe000ed0c
 8008244:	20000d80 	.word	0x20000d80

08008248 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008248:	b580      	push	{r7, lr}
 800824a:	b08a      	sub	sp, #40	; 0x28
 800824c:	af00      	add	r7, sp, #0
 800824e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008250:	2300      	movs	r3, #0
 8008252:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008254:	f7fe fd98 	bl	8006d88 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008258:	4b5b      	ldr	r3, [pc, #364]	; (80083c8 <pvPortMalloc+0x180>)
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	2b00      	cmp	r3, #0
 800825e:	d101      	bne.n	8008264 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008260:	f000 f920 	bl	80084a4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008264:	4b59      	ldr	r3, [pc, #356]	; (80083cc <pvPortMalloc+0x184>)
 8008266:	681a      	ldr	r2, [r3, #0]
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	4013      	ands	r3, r2
 800826c:	2b00      	cmp	r3, #0
 800826e:	f040 8093 	bne.w	8008398 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	2b00      	cmp	r3, #0
 8008276:	d01d      	beq.n	80082b4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8008278:	2208      	movs	r2, #8
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	4413      	add	r3, r2
 800827e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	f003 0307 	and.w	r3, r3, #7
 8008286:	2b00      	cmp	r3, #0
 8008288:	d014      	beq.n	80082b4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	f023 0307 	bic.w	r3, r3, #7
 8008290:	3308      	adds	r3, #8
 8008292:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	f003 0307 	and.w	r3, r3, #7
 800829a:	2b00      	cmp	r3, #0
 800829c:	d00a      	beq.n	80082b4 <pvPortMalloc+0x6c>
	__asm volatile
 800829e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082a2:	f383 8811 	msr	BASEPRI, r3
 80082a6:	f3bf 8f6f 	isb	sy
 80082aa:	f3bf 8f4f 	dsb	sy
 80082ae:	617b      	str	r3, [r7, #20]
}
 80082b0:	bf00      	nop
 80082b2:	e7fe      	b.n	80082b2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d06e      	beq.n	8008398 <pvPortMalloc+0x150>
 80082ba:	4b45      	ldr	r3, [pc, #276]	; (80083d0 <pvPortMalloc+0x188>)
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	687a      	ldr	r2, [r7, #4]
 80082c0:	429a      	cmp	r2, r3
 80082c2:	d869      	bhi.n	8008398 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80082c4:	4b43      	ldr	r3, [pc, #268]	; (80083d4 <pvPortMalloc+0x18c>)
 80082c6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80082c8:	4b42      	ldr	r3, [pc, #264]	; (80083d4 <pvPortMalloc+0x18c>)
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80082ce:	e004      	b.n	80082da <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80082d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082d2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80082d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80082da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082dc:	685b      	ldr	r3, [r3, #4]
 80082de:	687a      	ldr	r2, [r7, #4]
 80082e0:	429a      	cmp	r2, r3
 80082e2:	d903      	bls.n	80082ec <pvPortMalloc+0xa4>
 80082e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d1f1      	bne.n	80082d0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80082ec:	4b36      	ldr	r3, [pc, #216]	; (80083c8 <pvPortMalloc+0x180>)
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80082f2:	429a      	cmp	r2, r3
 80082f4:	d050      	beq.n	8008398 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80082f6:	6a3b      	ldr	r3, [r7, #32]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	2208      	movs	r2, #8
 80082fc:	4413      	add	r3, r2
 80082fe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008302:	681a      	ldr	r2, [r3, #0]
 8008304:	6a3b      	ldr	r3, [r7, #32]
 8008306:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800830a:	685a      	ldr	r2, [r3, #4]
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	1ad2      	subs	r2, r2, r3
 8008310:	2308      	movs	r3, #8
 8008312:	005b      	lsls	r3, r3, #1
 8008314:	429a      	cmp	r2, r3
 8008316:	d91f      	bls.n	8008358 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008318:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	4413      	add	r3, r2
 800831e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008320:	69bb      	ldr	r3, [r7, #24]
 8008322:	f003 0307 	and.w	r3, r3, #7
 8008326:	2b00      	cmp	r3, #0
 8008328:	d00a      	beq.n	8008340 <pvPortMalloc+0xf8>
	__asm volatile
 800832a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800832e:	f383 8811 	msr	BASEPRI, r3
 8008332:	f3bf 8f6f 	isb	sy
 8008336:	f3bf 8f4f 	dsb	sy
 800833a:	613b      	str	r3, [r7, #16]
}
 800833c:	bf00      	nop
 800833e:	e7fe      	b.n	800833e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008342:	685a      	ldr	r2, [r3, #4]
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	1ad2      	subs	r2, r2, r3
 8008348:	69bb      	ldr	r3, [r7, #24]
 800834a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800834c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800834e:	687a      	ldr	r2, [r7, #4]
 8008350:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008352:	69b8      	ldr	r0, [r7, #24]
 8008354:	f000 f908 	bl	8008568 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008358:	4b1d      	ldr	r3, [pc, #116]	; (80083d0 <pvPortMalloc+0x188>)
 800835a:	681a      	ldr	r2, [r3, #0]
 800835c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800835e:	685b      	ldr	r3, [r3, #4]
 8008360:	1ad3      	subs	r3, r2, r3
 8008362:	4a1b      	ldr	r2, [pc, #108]	; (80083d0 <pvPortMalloc+0x188>)
 8008364:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008366:	4b1a      	ldr	r3, [pc, #104]	; (80083d0 <pvPortMalloc+0x188>)
 8008368:	681a      	ldr	r2, [r3, #0]
 800836a:	4b1b      	ldr	r3, [pc, #108]	; (80083d8 <pvPortMalloc+0x190>)
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	429a      	cmp	r2, r3
 8008370:	d203      	bcs.n	800837a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008372:	4b17      	ldr	r3, [pc, #92]	; (80083d0 <pvPortMalloc+0x188>)
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	4a18      	ldr	r2, [pc, #96]	; (80083d8 <pvPortMalloc+0x190>)
 8008378:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800837a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800837c:	685a      	ldr	r2, [r3, #4]
 800837e:	4b13      	ldr	r3, [pc, #76]	; (80083cc <pvPortMalloc+0x184>)
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	431a      	orrs	r2, r3
 8008384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008386:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800838a:	2200      	movs	r2, #0
 800838c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800838e:	4b13      	ldr	r3, [pc, #76]	; (80083dc <pvPortMalloc+0x194>)
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	3301      	adds	r3, #1
 8008394:	4a11      	ldr	r2, [pc, #68]	; (80083dc <pvPortMalloc+0x194>)
 8008396:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008398:	f7fe fd04 	bl	8006da4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800839c:	69fb      	ldr	r3, [r7, #28]
 800839e:	f003 0307 	and.w	r3, r3, #7
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d00a      	beq.n	80083bc <pvPortMalloc+0x174>
	__asm volatile
 80083a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083aa:	f383 8811 	msr	BASEPRI, r3
 80083ae:	f3bf 8f6f 	isb	sy
 80083b2:	f3bf 8f4f 	dsb	sy
 80083b6:	60fb      	str	r3, [r7, #12]
}
 80083b8:	bf00      	nop
 80083ba:	e7fe      	b.n	80083ba <pvPortMalloc+0x172>
	return pvReturn;
 80083bc:	69fb      	ldr	r3, [r7, #28]
}
 80083be:	4618      	mov	r0, r3
 80083c0:	3728      	adds	r7, #40	; 0x28
 80083c2:	46bd      	mov	sp, r7
 80083c4:	bd80      	pop	{r7, pc}
 80083c6:	bf00      	nop
 80083c8:	2000498c 	.word	0x2000498c
 80083cc:	200049a0 	.word	0x200049a0
 80083d0:	20004990 	.word	0x20004990
 80083d4:	20004984 	.word	0x20004984
 80083d8:	20004994 	.word	0x20004994
 80083dc:	20004998 	.word	0x20004998

080083e0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80083e0:	b580      	push	{r7, lr}
 80083e2:	b086      	sub	sp, #24
 80083e4:	af00      	add	r7, sp, #0
 80083e6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d04d      	beq.n	800848e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80083f2:	2308      	movs	r3, #8
 80083f4:	425b      	negs	r3, r3
 80083f6:	697a      	ldr	r2, [r7, #20]
 80083f8:	4413      	add	r3, r2
 80083fa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80083fc:	697b      	ldr	r3, [r7, #20]
 80083fe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008400:	693b      	ldr	r3, [r7, #16]
 8008402:	685a      	ldr	r2, [r3, #4]
 8008404:	4b24      	ldr	r3, [pc, #144]	; (8008498 <vPortFree+0xb8>)
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	4013      	ands	r3, r2
 800840a:	2b00      	cmp	r3, #0
 800840c:	d10a      	bne.n	8008424 <vPortFree+0x44>
	__asm volatile
 800840e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008412:	f383 8811 	msr	BASEPRI, r3
 8008416:	f3bf 8f6f 	isb	sy
 800841a:	f3bf 8f4f 	dsb	sy
 800841e:	60fb      	str	r3, [r7, #12]
}
 8008420:	bf00      	nop
 8008422:	e7fe      	b.n	8008422 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008424:	693b      	ldr	r3, [r7, #16]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	2b00      	cmp	r3, #0
 800842a:	d00a      	beq.n	8008442 <vPortFree+0x62>
	__asm volatile
 800842c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008430:	f383 8811 	msr	BASEPRI, r3
 8008434:	f3bf 8f6f 	isb	sy
 8008438:	f3bf 8f4f 	dsb	sy
 800843c:	60bb      	str	r3, [r7, #8]
}
 800843e:	bf00      	nop
 8008440:	e7fe      	b.n	8008440 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008442:	693b      	ldr	r3, [r7, #16]
 8008444:	685a      	ldr	r2, [r3, #4]
 8008446:	4b14      	ldr	r3, [pc, #80]	; (8008498 <vPortFree+0xb8>)
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	4013      	ands	r3, r2
 800844c:	2b00      	cmp	r3, #0
 800844e:	d01e      	beq.n	800848e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008450:	693b      	ldr	r3, [r7, #16]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	2b00      	cmp	r3, #0
 8008456:	d11a      	bne.n	800848e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008458:	693b      	ldr	r3, [r7, #16]
 800845a:	685a      	ldr	r2, [r3, #4]
 800845c:	4b0e      	ldr	r3, [pc, #56]	; (8008498 <vPortFree+0xb8>)
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	43db      	mvns	r3, r3
 8008462:	401a      	ands	r2, r3
 8008464:	693b      	ldr	r3, [r7, #16]
 8008466:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008468:	f7fe fc8e 	bl	8006d88 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800846c:	693b      	ldr	r3, [r7, #16]
 800846e:	685a      	ldr	r2, [r3, #4]
 8008470:	4b0a      	ldr	r3, [pc, #40]	; (800849c <vPortFree+0xbc>)
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	4413      	add	r3, r2
 8008476:	4a09      	ldr	r2, [pc, #36]	; (800849c <vPortFree+0xbc>)
 8008478:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800847a:	6938      	ldr	r0, [r7, #16]
 800847c:	f000 f874 	bl	8008568 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008480:	4b07      	ldr	r3, [pc, #28]	; (80084a0 <vPortFree+0xc0>)
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	3301      	adds	r3, #1
 8008486:	4a06      	ldr	r2, [pc, #24]	; (80084a0 <vPortFree+0xc0>)
 8008488:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800848a:	f7fe fc8b 	bl	8006da4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800848e:	bf00      	nop
 8008490:	3718      	adds	r7, #24
 8008492:	46bd      	mov	sp, r7
 8008494:	bd80      	pop	{r7, pc}
 8008496:	bf00      	nop
 8008498:	200049a0 	.word	0x200049a0
 800849c:	20004990 	.word	0x20004990
 80084a0:	2000499c 	.word	0x2000499c

080084a4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80084a4:	b480      	push	{r7}
 80084a6:	b085      	sub	sp, #20
 80084a8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80084aa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80084ae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80084b0:	4b27      	ldr	r3, [pc, #156]	; (8008550 <prvHeapInit+0xac>)
 80084b2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	f003 0307 	and.w	r3, r3, #7
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d00c      	beq.n	80084d8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	3307      	adds	r3, #7
 80084c2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	f023 0307 	bic.w	r3, r3, #7
 80084ca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80084cc:	68ba      	ldr	r2, [r7, #8]
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	1ad3      	subs	r3, r2, r3
 80084d2:	4a1f      	ldr	r2, [pc, #124]	; (8008550 <prvHeapInit+0xac>)
 80084d4:	4413      	add	r3, r2
 80084d6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80084dc:	4a1d      	ldr	r2, [pc, #116]	; (8008554 <prvHeapInit+0xb0>)
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80084e2:	4b1c      	ldr	r3, [pc, #112]	; (8008554 <prvHeapInit+0xb0>)
 80084e4:	2200      	movs	r2, #0
 80084e6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	68ba      	ldr	r2, [r7, #8]
 80084ec:	4413      	add	r3, r2
 80084ee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80084f0:	2208      	movs	r2, #8
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	1a9b      	subs	r3, r3, r2
 80084f6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	f023 0307 	bic.w	r3, r3, #7
 80084fe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	4a15      	ldr	r2, [pc, #84]	; (8008558 <prvHeapInit+0xb4>)
 8008504:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008506:	4b14      	ldr	r3, [pc, #80]	; (8008558 <prvHeapInit+0xb4>)
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	2200      	movs	r2, #0
 800850c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800850e:	4b12      	ldr	r3, [pc, #72]	; (8008558 <prvHeapInit+0xb4>)
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	2200      	movs	r2, #0
 8008514:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800851a:	683b      	ldr	r3, [r7, #0]
 800851c:	68fa      	ldr	r2, [r7, #12]
 800851e:	1ad2      	subs	r2, r2, r3
 8008520:	683b      	ldr	r3, [r7, #0]
 8008522:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008524:	4b0c      	ldr	r3, [pc, #48]	; (8008558 <prvHeapInit+0xb4>)
 8008526:	681a      	ldr	r2, [r3, #0]
 8008528:	683b      	ldr	r3, [r7, #0]
 800852a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800852c:	683b      	ldr	r3, [r7, #0]
 800852e:	685b      	ldr	r3, [r3, #4]
 8008530:	4a0a      	ldr	r2, [pc, #40]	; (800855c <prvHeapInit+0xb8>)
 8008532:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008534:	683b      	ldr	r3, [r7, #0]
 8008536:	685b      	ldr	r3, [r3, #4]
 8008538:	4a09      	ldr	r2, [pc, #36]	; (8008560 <prvHeapInit+0xbc>)
 800853a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800853c:	4b09      	ldr	r3, [pc, #36]	; (8008564 <prvHeapInit+0xc0>)
 800853e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008542:	601a      	str	r2, [r3, #0]
}
 8008544:	bf00      	nop
 8008546:	3714      	adds	r7, #20
 8008548:	46bd      	mov	sp, r7
 800854a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800854e:	4770      	bx	lr
 8008550:	20000d84 	.word	0x20000d84
 8008554:	20004984 	.word	0x20004984
 8008558:	2000498c 	.word	0x2000498c
 800855c:	20004994 	.word	0x20004994
 8008560:	20004990 	.word	0x20004990
 8008564:	200049a0 	.word	0x200049a0

08008568 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008568:	b480      	push	{r7}
 800856a:	b085      	sub	sp, #20
 800856c:	af00      	add	r7, sp, #0
 800856e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008570:	4b28      	ldr	r3, [pc, #160]	; (8008614 <prvInsertBlockIntoFreeList+0xac>)
 8008572:	60fb      	str	r3, [r7, #12]
 8008574:	e002      	b.n	800857c <prvInsertBlockIntoFreeList+0x14>
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	60fb      	str	r3, [r7, #12]
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	687a      	ldr	r2, [r7, #4]
 8008582:	429a      	cmp	r2, r3
 8008584:	d8f7      	bhi.n	8008576 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	685b      	ldr	r3, [r3, #4]
 800858e:	68ba      	ldr	r2, [r7, #8]
 8008590:	4413      	add	r3, r2
 8008592:	687a      	ldr	r2, [r7, #4]
 8008594:	429a      	cmp	r2, r3
 8008596:	d108      	bne.n	80085aa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	685a      	ldr	r2, [r3, #4]
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	685b      	ldr	r3, [r3, #4]
 80085a0:	441a      	add	r2, r3
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	685b      	ldr	r3, [r3, #4]
 80085b2:	68ba      	ldr	r2, [r7, #8]
 80085b4:	441a      	add	r2, r3
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	429a      	cmp	r2, r3
 80085bc:	d118      	bne.n	80085f0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	681a      	ldr	r2, [r3, #0]
 80085c2:	4b15      	ldr	r3, [pc, #84]	; (8008618 <prvInsertBlockIntoFreeList+0xb0>)
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	429a      	cmp	r2, r3
 80085c8:	d00d      	beq.n	80085e6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	685a      	ldr	r2, [r3, #4]
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	685b      	ldr	r3, [r3, #4]
 80085d4:	441a      	add	r2, r3
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	681a      	ldr	r2, [r3, #0]
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	601a      	str	r2, [r3, #0]
 80085e4:	e008      	b.n	80085f8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80085e6:	4b0c      	ldr	r3, [pc, #48]	; (8008618 <prvInsertBlockIntoFreeList+0xb0>)
 80085e8:	681a      	ldr	r2, [r3, #0]
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	601a      	str	r2, [r3, #0]
 80085ee:	e003      	b.n	80085f8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	681a      	ldr	r2, [r3, #0]
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80085f8:	68fa      	ldr	r2, [r7, #12]
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	429a      	cmp	r2, r3
 80085fe:	d002      	beq.n	8008606 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	687a      	ldr	r2, [r7, #4]
 8008604:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008606:	bf00      	nop
 8008608:	3714      	adds	r7, #20
 800860a:	46bd      	mov	sp, r7
 800860c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008610:	4770      	bx	lr
 8008612:	bf00      	nop
 8008614:	20004984 	.word	0x20004984
 8008618:	2000498c 	.word	0x2000498c

0800861c <__errno>:
 800861c:	4b01      	ldr	r3, [pc, #4]	; (8008624 <__errno+0x8>)
 800861e:	6818      	ldr	r0, [r3, #0]
 8008620:	4770      	bx	lr
 8008622:	bf00      	nop
 8008624:	20000010 	.word	0x20000010

08008628 <__libc_init_array>:
 8008628:	b570      	push	{r4, r5, r6, lr}
 800862a:	4d0d      	ldr	r5, [pc, #52]	; (8008660 <__libc_init_array+0x38>)
 800862c:	4c0d      	ldr	r4, [pc, #52]	; (8008664 <__libc_init_array+0x3c>)
 800862e:	1b64      	subs	r4, r4, r5
 8008630:	10a4      	asrs	r4, r4, #2
 8008632:	2600      	movs	r6, #0
 8008634:	42a6      	cmp	r6, r4
 8008636:	d109      	bne.n	800864c <__libc_init_array+0x24>
 8008638:	4d0b      	ldr	r5, [pc, #44]	; (8008668 <__libc_init_array+0x40>)
 800863a:	4c0c      	ldr	r4, [pc, #48]	; (800866c <__libc_init_array+0x44>)
 800863c:	f001 f9be 	bl	80099bc <_init>
 8008640:	1b64      	subs	r4, r4, r5
 8008642:	10a4      	asrs	r4, r4, #2
 8008644:	2600      	movs	r6, #0
 8008646:	42a6      	cmp	r6, r4
 8008648:	d105      	bne.n	8008656 <__libc_init_array+0x2e>
 800864a:	bd70      	pop	{r4, r5, r6, pc}
 800864c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008650:	4798      	blx	r3
 8008652:	3601      	adds	r6, #1
 8008654:	e7ee      	b.n	8008634 <__libc_init_array+0xc>
 8008656:	f855 3b04 	ldr.w	r3, [r5], #4
 800865a:	4798      	blx	r3
 800865c:	3601      	adds	r6, #1
 800865e:	e7f2      	b.n	8008646 <__libc_init_array+0x1e>
 8008660:	08009e54 	.word	0x08009e54
 8008664:	08009e54 	.word	0x08009e54
 8008668:	08009e54 	.word	0x08009e54
 800866c:	08009e58 	.word	0x08009e58

08008670 <memcpy>:
 8008670:	440a      	add	r2, r1
 8008672:	4291      	cmp	r1, r2
 8008674:	f100 33ff 	add.w	r3, r0, #4294967295
 8008678:	d100      	bne.n	800867c <memcpy+0xc>
 800867a:	4770      	bx	lr
 800867c:	b510      	push	{r4, lr}
 800867e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008682:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008686:	4291      	cmp	r1, r2
 8008688:	d1f9      	bne.n	800867e <memcpy+0xe>
 800868a:	bd10      	pop	{r4, pc}

0800868c <memset>:
 800868c:	4402      	add	r2, r0
 800868e:	4603      	mov	r3, r0
 8008690:	4293      	cmp	r3, r2
 8008692:	d100      	bne.n	8008696 <memset+0xa>
 8008694:	4770      	bx	lr
 8008696:	f803 1b01 	strb.w	r1, [r3], #1
 800869a:	e7f9      	b.n	8008690 <memset+0x4>

0800869c <iprintf>:
 800869c:	b40f      	push	{r0, r1, r2, r3}
 800869e:	4b0a      	ldr	r3, [pc, #40]	; (80086c8 <iprintf+0x2c>)
 80086a0:	b513      	push	{r0, r1, r4, lr}
 80086a2:	681c      	ldr	r4, [r3, #0]
 80086a4:	b124      	cbz	r4, 80086b0 <iprintf+0x14>
 80086a6:	69a3      	ldr	r3, [r4, #24]
 80086a8:	b913      	cbnz	r3, 80086b0 <iprintf+0x14>
 80086aa:	4620      	mov	r0, r4
 80086ac:	f000 fa7e 	bl	8008bac <__sinit>
 80086b0:	ab05      	add	r3, sp, #20
 80086b2:	9a04      	ldr	r2, [sp, #16]
 80086b4:	68a1      	ldr	r1, [r4, #8]
 80086b6:	9301      	str	r3, [sp, #4]
 80086b8:	4620      	mov	r0, r4
 80086ba:	f000 fdab 	bl	8009214 <_vfiprintf_r>
 80086be:	b002      	add	sp, #8
 80086c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80086c4:	b004      	add	sp, #16
 80086c6:	4770      	bx	lr
 80086c8:	20000010 	.word	0x20000010

080086cc <_puts_r>:
 80086cc:	b570      	push	{r4, r5, r6, lr}
 80086ce:	460e      	mov	r6, r1
 80086d0:	4605      	mov	r5, r0
 80086d2:	b118      	cbz	r0, 80086dc <_puts_r+0x10>
 80086d4:	6983      	ldr	r3, [r0, #24]
 80086d6:	b90b      	cbnz	r3, 80086dc <_puts_r+0x10>
 80086d8:	f000 fa68 	bl	8008bac <__sinit>
 80086dc:	69ab      	ldr	r3, [r5, #24]
 80086de:	68ac      	ldr	r4, [r5, #8]
 80086e0:	b913      	cbnz	r3, 80086e8 <_puts_r+0x1c>
 80086e2:	4628      	mov	r0, r5
 80086e4:	f000 fa62 	bl	8008bac <__sinit>
 80086e8:	4b2c      	ldr	r3, [pc, #176]	; (800879c <_puts_r+0xd0>)
 80086ea:	429c      	cmp	r4, r3
 80086ec:	d120      	bne.n	8008730 <_puts_r+0x64>
 80086ee:	686c      	ldr	r4, [r5, #4]
 80086f0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80086f2:	07db      	lsls	r3, r3, #31
 80086f4:	d405      	bmi.n	8008702 <_puts_r+0x36>
 80086f6:	89a3      	ldrh	r3, [r4, #12]
 80086f8:	0598      	lsls	r0, r3, #22
 80086fa:	d402      	bmi.n	8008702 <_puts_r+0x36>
 80086fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80086fe:	f000 faf3 	bl	8008ce8 <__retarget_lock_acquire_recursive>
 8008702:	89a3      	ldrh	r3, [r4, #12]
 8008704:	0719      	lsls	r1, r3, #28
 8008706:	d51d      	bpl.n	8008744 <_puts_r+0x78>
 8008708:	6923      	ldr	r3, [r4, #16]
 800870a:	b1db      	cbz	r3, 8008744 <_puts_r+0x78>
 800870c:	3e01      	subs	r6, #1
 800870e:	68a3      	ldr	r3, [r4, #8]
 8008710:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008714:	3b01      	subs	r3, #1
 8008716:	60a3      	str	r3, [r4, #8]
 8008718:	bb39      	cbnz	r1, 800876a <_puts_r+0x9e>
 800871a:	2b00      	cmp	r3, #0
 800871c:	da38      	bge.n	8008790 <_puts_r+0xc4>
 800871e:	4622      	mov	r2, r4
 8008720:	210a      	movs	r1, #10
 8008722:	4628      	mov	r0, r5
 8008724:	f000 f868 	bl	80087f8 <__swbuf_r>
 8008728:	3001      	adds	r0, #1
 800872a:	d011      	beq.n	8008750 <_puts_r+0x84>
 800872c:	250a      	movs	r5, #10
 800872e:	e011      	b.n	8008754 <_puts_r+0x88>
 8008730:	4b1b      	ldr	r3, [pc, #108]	; (80087a0 <_puts_r+0xd4>)
 8008732:	429c      	cmp	r4, r3
 8008734:	d101      	bne.n	800873a <_puts_r+0x6e>
 8008736:	68ac      	ldr	r4, [r5, #8]
 8008738:	e7da      	b.n	80086f0 <_puts_r+0x24>
 800873a:	4b1a      	ldr	r3, [pc, #104]	; (80087a4 <_puts_r+0xd8>)
 800873c:	429c      	cmp	r4, r3
 800873e:	bf08      	it	eq
 8008740:	68ec      	ldreq	r4, [r5, #12]
 8008742:	e7d5      	b.n	80086f0 <_puts_r+0x24>
 8008744:	4621      	mov	r1, r4
 8008746:	4628      	mov	r0, r5
 8008748:	f000 f8a8 	bl	800889c <__swsetup_r>
 800874c:	2800      	cmp	r0, #0
 800874e:	d0dd      	beq.n	800870c <_puts_r+0x40>
 8008750:	f04f 35ff 	mov.w	r5, #4294967295
 8008754:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008756:	07da      	lsls	r2, r3, #31
 8008758:	d405      	bmi.n	8008766 <_puts_r+0x9a>
 800875a:	89a3      	ldrh	r3, [r4, #12]
 800875c:	059b      	lsls	r3, r3, #22
 800875e:	d402      	bmi.n	8008766 <_puts_r+0x9a>
 8008760:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008762:	f000 fac2 	bl	8008cea <__retarget_lock_release_recursive>
 8008766:	4628      	mov	r0, r5
 8008768:	bd70      	pop	{r4, r5, r6, pc}
 800876a:	2b00      	cmp	r3, #0
 800876c:	da04      	bge.n	8008778 <_puts_r+0xac>
 800876e:	69a2      	ldr	r2, [r4, #24]
 8008770:	429a      	cmp	r2, r3
 8008772:	dc06      	bgt.n	8008782 <_puts_r+0xb6>
 8008774:	290a      	cmp	r1, #10
 8008776:	d004      	beq.n	8008782 <_puts_r+0xb6>
 8008778:	6823      	ldr	r3, [r4, #0]
 800877a:	1c5a      	adds	r2, r3, #1
 800877c:	6022      	str	r2, [r4, #0]
 800877e:	7019      	strb	r1, [r3, #0]
 8008780:	e7c5      	b.n	800870e <_puts_r+0x42>
 8008782:	4622      	mov	r2, r4
 8008784:	4628      	mov	r0, r5
 8008786:	f000 f837 	bl	80087f8 <__swbuf_r>
 800878a:	3001      	adds	r0, #1
 800878c:	d1bf      	bne.n	800870e <_puts_r+0x42>
 800878e:	e7df      	b.n	8008750 <_puts_r+0x84>
 8008790:	6823      	ldr	r3, [r4, #0]
 8008792:	250a      	movs	r5, #10
 8008794:	1c5a      	adds	r2, r3, #1
 8008796:	6022      	str	r2, [r4, #0]
 8008798:	701d      	strb	r5, [r3, #0]
 800879a:	e7db      	b.n	8008754 <_puts_r+0x88>
 800879c:	08009dd8 	.word	0x08009dd8
 80087a0:	08009df8 	.word	0x08009df8
 80087a4:	08009db8 	.word	0x08009db8

080087a8 <puts>:
 80087a8:	4b02      	ldr	r3, [pc, #8]	; (80087b4 <puts+0xc>)
 80087aa:	4601      	mov	r1, r0
 80087ac:	6818      	ldr	r0, [r3, #0]
 80087ae:	f7ff bf8d 	b.w	80086cc <_puts_r>
 80087b2:	bf00      	nop
 80087b4:	20000010 	.word	0x20000010

080087b8 <siprintf>:
 80087b8:	b40e      	push	{r1, r2, r3}
 80087ba:	b500      	push	{lr}
 80087bc:	b09c      	sub	sp, #112	; 0x70
 80087be:	ab1d      	add	r3, sp, #116	; 0x74
 80087c0:	9002      	str	r0, [sp, #8]
 80087c2:	9006      	str	r0, [sp, #24]
 80087c4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80087c8:	4809      	ldr	r0, [pc, #36]	; (80087f0 <siprintf+0x38>)
 80087ca:	9107      	str	r1, [sp, #28]
 80087cc:	9104      	str	r1, [sp, #16]
 80087ce:	4909      	ldr	r1, [pc, #36]	; (80087f4 <siprintf+0x3c>)
 80087d0:	f853 2b04 	ldr.w	r2, [r3], #4
 80087d4:	9105      	str	r1, [sp, #20]
 80087d6:	6800      	ldr	r0, [r0, #0]
 80087d8:	9301      	str	r3, [sp, #4]
 80087da:	a902      	add	r1, sp, #8
 80087dc:	f000 fbf0 	bl	8008fc0 <_svfiprintf_r>
 80087e0:	9b02      	ldr	r3, [sp, #8]
 80087e2:	2200      	movs	r2, #0
 80087e4:	701a      	strb	r2, [r3, #0]
 80087e6:	b01c      	add	sp, #112	; 0x70
 80087e8:	f85d eb04 	ldr.w	lr, [sp], #4
 80087ec:	b003      	add	sp, #12
 80087ee:	4770      	bx	lr
 80087f0:	20000010 	.word	0x20000010
 80087f4:	ffff0208 	.word	0xffff0208

080087f8 <__swbuf_r>:
 80087f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087fa:	460e      	mov	r6, r1
 80087fc:	4614      	mov	r4, r2
 80087fe:	4605      	mov	r5, r0
 8008800:	b118      	cbz	r0, 800880a <__swbuf_r+0x12>
 8008802:	6983      	ldr	r3, [r0, #24]
 8008804:	b90b      	cbnz	r3, 800880a <__swbuf_r+0x12>
 8008806:	f000 f9d1 	bl	8008bac <__sinit>
 800880a:	4b21      	ldr	r3, [pc, #132]	; (8008890 <__swbuf_r+0x98>)
 800880c:	429c      	cmp	r4, r3
 800880e:	d12b      	bne.n	8008868 <__swbuf_r+0x70>
 8008810:	686c      	ldr	r4, [r5, #4]
 8008812:	69a3      	ldr	r3, [r4, #24]
 8008814:	60a3      	str	r3, [r4, #8]
 8008816:	89a3      	ldrh	r3, [r4, #12]
 8008818:	071a      	lsls	r2, r3, #28
 800881a:	d52f      	bpl.n	800887c <__swbuf_r+0x84>
 800881c:	6923      	ldr	r3, [r4, #16]
 800881e:	b36b      	cbz	r3, 800887c <__swbuf_r+0x84>
 8008820:	6923      	ldr	r3, [r4, #16]
 8008822:	6820      	ldr	r0, [r4, #0]
 8008824:	1ac0      	subs	r0, r0, r3
 8008826:	6963      	ldr	r3, [r4, #20]
 8008828:	b2f6      	uxtb	r6, r6
 800882a:	4283      	cmp	r3, r0
 800882c:	4637      	mov	r7, r6
 800882e:	dc04      	bgt.n	800883a <__swbuf_r+0x42>
 8008830:	4621      	mov	r1, r4
 8008832:	4628      	mov	r0, r5
 8008834:	f000 f926 	bl	8008a84 <_fflush_r>
 8008838:	bb30      	cbnz	r0, 8008888 <__swbuf_r+0x90>
 800883a:	68a3      	ldr	r3, [r4, #8]
 800883c:	3b01      	subs	r3, #1
 800883e:	60a3      	str	r3, [r4, #8]
 8008840:	6823      	ldr	r3, [r4, #0]
 8008842:	1c5a      	adds	r2, r3, #1
 8008844:	6022      	str	r2, [r4, #0]
 8008846:	701e      	strb	r6, [r3, #0]
 8008848:	6963      	ldr	r3, [r4, #20]
 800884a:	3001      	adds	r0, #1
 800884c:	4283      	cmp	r3, r0
 800884e:	d004      	beq.n	800885a <__swbuf_r+0x62>
 8008850:	89a3      	ldrh	r3, [r4, #12]
 8008852:	07db      	lsls	r3, r3, #31
 8008854:	d506      	bpl.n	8008864 <__swbuf_r+0x6c>
 8008856:	2e0a      	cmp	r6, #10
 8008858:	d104      	bne.n	8008864 <__swbuf_r+0x6c>
 800885a:	4621      	mov	r1, r4
 800885c:	4628      	mov	r0, r5
 800885e:	f000 f911 	bl	8008a84 <_fflush_r>
 8008862:	b988      	cbnz	r0, 8008888 <__swbuf_r+0x90>
 8008864:	4638      	mov	r0, r7
 8008866:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008868:	4b0a      	ldr	r3, [pc, #40]	; (8008894 <__swbuf_r+0x9c>)
 800886a:	429c      	cmp	r4, r3
 800886c:	d101      	bne.n	8008872 <__swbuf_r+0x7a>
 800886e:	68ac      	ldr	r4, [r5, #8]
 8008870:	e7cf      	b.n	8008812 <__swbuf_r+0x1a>
 8008872:	4b09      	ldr	r3, [pc, #36]	; (8008898 <__swbuf_r+0xa0>)
 8008874:	429c      	cmp	r4, r3
 8008876:	bf08      	it	eq
 8008878:	68ec      	ldreq	r4, [r5, #12]
 800887a:	e7ca      	b.n	8008812 <__swbuf_r+0x1a>
 800887c:	4621      	mov	r1, r4
 800887e:	4628      	mov	r0, r5
 8008880:	f000 f80c 	bl	800889c <__swsetup_r>
 8008884:	2800      	cmp	r0, #0
 8008886:	d0cb      	beq.n	8008820 <__swbuf_r+0x28>
 8008888:	f04f 37ff 	mov.w	r7, #4294967295
 800888c:	e7ea      	b.n	8008864 <__swbuf_r+0x6c>
 800888e:	bf00      	nop
 8008890:	08009dd8 	.word	0x08009dd8
 8008894:	08009df8 	.word	0x08009df8
 8008898:	08009db8 	.word	0x08009db8

0800889c <__swsetup_r>:
 800889c:	4b32      	ldr	r3, [pc, #200]	; (8008968 <__swsetup_r+0xcc>)
 800889e:	b570      	push	{r4, r5, r6, lr}
 80088a0:	681d      	ldr	r5, [r3, #0]
 80088a2:	4606      	mov	r6, r0
 80088a4:	460c      	mov	r4, r1
 80088a6:	b125      	cbz	r5, 80088b2 <__swsetup_r+0x16>
 80088a8:	69ab      	ldr	r3, [r5, #24]
 80088aa:	b913      	cbnz	r3, 80088b2 <__swsetup_r+0x16>
 80088ac:	4628      	mov	r0, r5
 80088ae:	f000 f97d 	bl	8008bac <__sinit>
 80088b2:	4b2e      	ldr	r3, [pc, #184]	; (800896c <__swsetup_r+0xd0>)
 80088b4:	429c      	cmp	r4, r3
 80088b6:	d10f      	bne.n	80088d8 <__swsetup_r+0x3c>
 80088b8:	686c      	ldr	r4, [r5, #4]
 80088ba:	89a3      	ldrh	r3, [r4, #12]
 80088bc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80088c0:	0719      	lsls	r1, r3, #28
 80088c2:	d42c      	bmi.n	800891e <__swsetup_r+0x82>
 80088c4:	06dd      	lsls	r5, r3, #27
 80088c6:	d411      	bmi.n	80088ec <__swsetup_r+0x50>
 80088c8:	2309      	movs	r3, #9
 80088ca:	6033      	str	r3, [r6, #0]
 80088cc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80088d0:	81a3      	strh	r3, [r4, #12]
 80088d2:	f04f 30ff 	mov.w	r0, #4294967295
 80088d6:	e03e      	b.n	8008956 <__swsetup_r+0xba>
 80088d8:	4b25      	ldr	r3, [pc, #148]	; (8008970 <__swsetup_r+0xd4>)
 80088da:	429c      	cmp	r4, r3
 80088dc:	d101      	bne.n	80088e2 <__swsetup_r+0x46>
 80088de:	68ac      	ldr	r4, [r5, #8]
 80088e0:	e7eb      	b.n	80088ba <__swsetup_r+0x1e>
 80088e2:	4b24      	ldr	r3, [pc, #144]	; (8008974 <__swsetup_r+0xd8>)
 80088e4:	429c      	cmp	r4, r3
 80088e6:	bf08      	it	eq
 80088e8:	68ec      	ldreq	r4, [r5, #12]
 80088ea:	e7e6      	b.n	80088ba <__swsetup_r+0x1e>
 80088ec:	0758      	lsls	r0, r3, #29
 80088ee:	d512      	bpl.n	8008916 <__swsetup_r+0x7a>
 80088f0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80088f2:	b141      	cbz	r1, 8008906 <__swsetup_r+0x6a>
 80088f4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80088f8:	4299      	cmp	r1, r3
 80088fa:	d002      	beq.n	8008902 <__swsetup_r+0x66>
 80088fc:	4630      	mov	r0, r6
 80088fe:	f000 fa59 	bl	8008db4 <_free_r>
 8008902:	2300      	movs	r3, #0
 8008904:	6363      	str	r3, [r4, #52]	; 0x34
 8008906:	89a3      	ldrh	r3, [r4, #12]
 8008908:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800890c:	81a3      	strh	r3, [r4, #12]
 800890e:	2300      	movs	r3, #0
 8008910:	6063      	str	r3, [r4, #4]
 8008912:	6923      	ldr	r3, [r4, #16]
 8008914:	6023      	str	r3, [r4, #0]
 8008916:	89a3      	ldrh	r3, [r4, #12]
 8008918:	f043 0308 	orr.w	r3, r3, #8
 800891c:	81a3      	strh	r3, [r4, #12]
 800891e:	6923      	ldr	r3, [r4, #16]
 8008920:	b94b      	cbnz	r3, 8008936 <__swsetup_r+0x9a>
 8008922:	89a3      	ldrh	r3, [r4, #12]
 8008924:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008928:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800892c:	d003      	beq.n	8008936 <__swsetup_r+0x9a>
 800892e:	4621      	mov	r1, r4
 8008930:	4630      	mov	r0, r6
 8008932:	f000 f9ff 	bl	8008d34 <__smakebuf_r>
 8008936:	89a0      	ldrh	r0, [r4, #12]
 8008938:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800893c:	f010 0301 	ands.w	r3, r0, #1
 8008940:	d00a      	beq.n	8008958 <__swsetup_r+0xbc>
 8008942:	2300      	movs	r3, #0
 8008944:	60a3      	str	r3, [r4, #8]
 8008946:	6963      	ldr	r3, [r4, #20]
 8008948:	425b      	negs	r3, r3
 800894a:	61a3      	str	r3, [r4, #24]
 800894c:	6923      	ldr	r3, [r4, #16]
 800894e:	b943      	cbnz	r3, 8008962 <__swsetup_r+0xc6>
 8008950:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008954:	d1ba      	bne.n	80088cc <__swsetup_r+0x30>
 8008956:	bd70      	pop	{r4, r5, r6, pc}
 8008958:	0781      	lsls	r1, r0, #30
 800895a:	bf58      	it	pl
 800895c:	6963      	ldrpl	r3, [r4, #20]
 800895e:	60a3      	str	r3, [r4, #8]
 8008960:	e7f4      	b.n	800894c <__swsetup_r+0xb0>
 8008962:	2000      	movs	r0, #0
 8008964:	e7f7      	b.n	8008956 <__swsetup_r+0xba>
 8008966:	bf00      	nop
 8008968:	20000010 	.word	0x20000010
 800896c:	08009dd8 	.word	0x08009dd8
 8008970:	08009df8 	.word	0x08009df8
 8008974:	08009db8 	.word	0x08009db8

08008978 <__sflush_r>:
 8008978:	898a      	ldrh	r2, [r1, #12]
 800897a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800897e:	4605      	mov	r5, r0
 8008980:	0710      	lsls	r0, r2, #28
 8008982:	460c      	mov	r4, r1
 8008984:	d458      	bmi.n	8008a38 <__sflush_r+0xc0>
 8008986:	684b      	ldr	r3, [r1, #4]
 8008988:	2b00      	cmp	r3, #0
 800898a:	dc05      	bgt.n	8008998 <__sflush_r+0x20>
 800898c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800898e:	2b00      	cmp	r3, #0
 8008990:	dc02      	bgt.n	8008998 <__sflush_r+0x20>
 8008992:	2000      	movs	r0, #0
 8008994:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008998:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800899a:	2e00      	cmp	r6, #0
 800899c:	d0f9      	beq.n	8008992 <__sflush_r+0x1a>
 800899e:	2300      	movs	r3, #0
 80089a0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80089a4:	682f      	ldr	r7, [r5, #0]
 80089a6:	602b      	str	r3, [r5, #0]
 80089a8:	d032      	beq.n	8008a10 <__sflush_r+0x98>
 80089aa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80089ac:	89a3      	ldrh	r3, [r4, #12]
 80089ae:	075a      	lsls	r2, r3, #29
 80089b0:	d505      	bpl.n	80089be <__sflush_r+0x46>
 80089b2:	6863      	ldr	r3, [r4, #4]
 80089b4:	1ac0      	subs	r0, r0, r3
 80089b6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80089b8:	b10b      	cbz	r3, 80089be <__sflush_r+0x46>
 80089ba:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80089bc:	1ac0      	subs	r0, r0, r3
 80089be:	2300      	movs	r3, #0
 80089c0:	4602      	mov	r2, r0
 80089c2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80089c4:	6a21      	ldr	r1, [r4, #32]
 80089c6:	4628      	mov	r0, r5
 80089c8:	47b0      	blx	r6
 80089ca:	1c43      	adds	r3, r0, #1
 80089cc:	89a3      	ldrh	r3, [r4, #12]
 80089ce:	d106      	bne.n	80089de <__sflush_r+0x66>
 80089d0:	6829      	ldr	r1, [r5, #0]
 80089d2:	291d      	cmp	r1, #29
 80089d4:	d82c      	bhi.n	8008a30 <__sflush_r+0xb8>
 80089d6:	4a2a      	ldr	r2, [pc, #168]	; (8008a80 <__sflush_r+0x108>)
 80089d8:	40ca      	lsrs	r2, r1
 80089da:	07d6      	lsls	r6, r2, #31
 80089dc:	d528      	bpl.n	8008a30 <__sflush_r+0xb8>
 80089de:	2200      	movs	r2, #0
 80089e0:	6062      	str	r2, [r4, #4]
 80089e2:	04d9      	lsls	r1, r3, #19
 80089e4:	6922      	ldr	r2, [r4, #16]
 80089e6:	6022      	str	r2, [r4, #0]
 80089e8:	d504      	bpl.n	80089f4 <__sflush_r+0x7c>
 80089ea:	1c42      	adds	r2, r0, #1
 80089ec:	d101      	bne.n	80089f2 <__sflush_r+0x7a>
 80089ee:	682b      	ldr	r3, [r5, #0]
 80089f0:	b903      	cbnz	r3, 80089f4 <__sflush_r+0x7c>
 80089f2:	6560      	str	r0, [r4, #84]	; 0x54
 80089f4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80089f6:	602f      	str	r7, [r5, #0]
 80089f8:	2900      	cmp	r1, #0
 80089fa:	d0ca      	beq.n	8008992 <__sflush_r+0x1a>
 80089fc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008a00:	4299      	cmp	r1, r3
 8008a02:	d002      	beq.n	8008a0a <__sflush_r+0x92>
 8008a04:	4628      	mov	r0, r5
 8008a06:	f000 f9d5 	bl	8008db4 <_free_r>
 8008a0a:	2000      	movs	r0, #0
 8008a0c:	6360      	str	r0, [r4, #52]	; 0x34
 8008a0e:	e7c1      	b.n	8008994 <__sflush_r+0x1c>
 8008a10:	6a21      	ldr	r1, [r4, #32]
 8008a12:	2301      	movs	r3, #1
 8008a14:	4628      	mov	r0, r5
 8008a16:	47b0      	blx	r6
 8008a18:	1c41      	adds	r1, r0, #1
 8008a1a:	d1c7      	bne.n	80089ac <__sflush_r+0x34>
 8008a1c:	682b      	ldr	r3, [r5, #0]
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d0c4      	beq.n	80089ac <__sflush_r+0x34>
 8008a22:	2b1d      	cmp	r3, #29
 8008a24:	d001      	beq.n	8008a2a <__sflush_r+0xb2>
 8008a26:	2b16      	cmp	r3, #22
 8008a28:	d101      	bne.n	8008a2e <__sflush_r+0xb6>
 8008a2a:	602f      	str	r7, [r5, #0]
 8008a2c:	e7b1      	b.n	8008992 <__sflush_r+0x1a>
 8008a2e:	89a3      	ldrh	r3, [r4, #12]
 8008a30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008a34:	81a3      	strh	r3, [r4, #12]
 8008a36:	e7ad      	b.n	8008994 <__sflush_r+0x1c>
 8008a38:	690f      	ldr	r7, [r1, #16]
 8008a3a:	2f00      	cmp	r7, #0
 8008a3c:	d0a9      	beq.n	8008992 <__sflush_r+0x1a>
 8008a3e:	0793      	lsls	r3, r2, #30
 8008a40:	680e      	ldr	r6, [r1, #0]
 8008a42:	bf08      	it	eq
 8008a44:	694b      	ldreq	r3, [r1, #20]
 8008a46:	600f      	str	r7, [r1, #0]
 8008a48:	bf18      	it	ne
 8008a4a:	2300      	movne	r3, #0
 8008a4c:	eba6 0807 	sub.w	r8, r6, r7
 8008a50:	608b      	str	r3, [r1, #8]
 8008a52:	f1b8 0f00 	cmp.w	r8, #0
 8008a56:	dd9c      	ble.n	8008992 <__sflush_r+0x1a>
 8008a58:	6a21      	ldr	r1, [r4, #32]
 8008a5a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008a5c:	4643      	mov	r3, r8
 8008a5e:	463a      	mov	r2, r7
 8008a60:	4628      	mov	r0, r5
 8008a62:	47b0      	blx	r6
 8008a64:	2800      	cmp	r0, #0
 8008a66:	dc06      	bgt.n	8008a76 <__sflush_r+0xfe>
 8008a68:	89a3      	ldrh	r3, [r4, #12]
 8008a6a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008a6e:	81a3      	strh	r3, [r4, #12]
 8008a70:	f04f 30ff 	mov.w	r0, #4294967295
 8008a74:	e78e      	b.n	8008994 <__sflush_r+0x1c>
 8008a76:	4407      	add	r7, r0
 8008a78:	eba8 0800 	sub.w	r8, r8, r0
 8008a7c:	e7e9      	b.n	8008a52 <__sflush_r+0xda>
 8008a7e:	bf00      	nop
 8008a80:	20400001 	.word	0x20400001

08008a84 <_fflush_r>:
 8008a84:	b538      	push	{r3, r4, r5, lr}
 8008a86:	690b      	ldr	r3, [r1, #16]
 8008a88:	4605      	mov	r5, r0
 8008a8a:	460c      	mov	r4, r1
 8008a8c:	b913      	cbnz	r3, 8008a94 <_fflush_r+0x10>
 8008a8e:	2500      	movs	r5, #0
 8008a90:	4628      	mov	r0, r5
 8008a92:	bd38      	pop	{r3, r4, r5, pc}
 8008a94:	b118      	cbz	r0, 8008a9e <_fflush_r+0x1a>
 8008a96:	6983      	ldr	r3, [r0, #24]
 8008a98:	b90b      	cbnz	r3, 8008a9e <_fflush_r+0x1a>
 8008a9a:	f000 f887 	bl	8008bac <__sinit>
 8008a9e:	4b14      	ldr	r3, [pc, #80]	; (8008af0 <_fflush_r+0x6c>)
 8008aa0:	429c      	cmp	r4, r3
 8008aa2:	d11b      	bne.n	8008adc <_fflush_r+0x58>
 8008aa4:	686c      	ldr	r4, [r5, #4]
 8008aa6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d0ef      	beq.n	8008a8e <_fflush_r+0xa>
 8008aae:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008ab0:	07d0      	lsls	r0, r2, #31
 8008ab2:	d404      	bmi.n	8008abe <_fflush_r+0x3a>
 8008ab4:	0599      	lsls	r1, r3, #22
 8008ab6:	d402      	bmi.n	8008abe <_fflush_r+0x3a>
 8008ab8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008aba:	f000 f915 	bl	8008ce8 <__retarget_lock_acquire_recursive>
 8008abe:	4628      	mov	r0, r5
 8008ac0:	4621      	mov	r1, r4
 8008ac2:	f7ff ff59 	bl	8008978 <__sflush_r>
 8008ac6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008ac8:	07da      	lsls	r2, r3, #31
 8008aca:	4605      	mov	r5, r0
 8008acc:	d4e0      	bmi.n	8008a90 <_fflush_r+0xc>
 8008ace:	89a3      	ldrh	r3, [r4, #12]
 8008ad0:	059b      	lsls	r3, r3, #22
 8008ad2:	d4dd      	bmi.n	8008a90 <_fflush_r+0xc>
 8008ad4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008ad6:	f000 f908 	bl	8008cea <__retarget_lock_release_recursive>
 8008ada:	e7d9      	b.n	8008a90 <_fflush_r+0xc>
 8008adc:	4b05      	ldr	r3, [pc, #20]	; (8008af4 <_fflush_r+0x70>)
 8008ade:	429c      	cmp	r4, r3
 8008ae0:	d101      	bne.n	8008ae6 <_fflush_r+0x62>
 8008ae2:	68ac      	ldr	r4, [r5, #8]
 8008ae4:	e7df      	b.n	8008aa6 <_fflush_r+0x22>
 8008ae6:	4b04      	ldr	r3, [pc, #16]	; (8008af8 <_fflush_r+0x74>)
 8008ae8:	429c      	cmp	r4, r3
 8008aea:	bf08      	it	eq
 8008aec:	68ec      	ldreq	r4, [r5, #12]
 8008aee:	e7da      	b.n	8008aa6 <_fflush_r+0x22>
 8008af0:	08009dd8 	.word	0x08009dd8
 8008af4:	08009df8 	.word	0x08009df8
 8008af8:	08009db8 	.word	0x08009db8

08008afc <std>:
 8008afc:	2300      	movs	r3, #0
 8008afe:	b510      	push	{r4, lr}
 8008b00:	4604      	mov	r4, r0
 8008b02:	e9c0 3300 	strd	r3, r3, [r0]
 8008b06:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008b0a:	6083      	str	r3, [r0, #8]
 8008b0c:	8181      	strh	r1, [r0, #12]
 8008b0e:	6643      	str	r3, [r0, #100]	; 0x64
 8008b10:	81c2      	strh	r2, [r0, #14]
 8008b12:	6183      	str	r3, [r0, #24]
 8008b14:	4619      	mov	r1, r3
 8008b16:	2208      	movs	r2, #8
 8008b18:	305c      	adds	r0, #92	; 0x5c
 8008b1a:	f7ff fdb7 	bl	800868c <memset>
 8008b1e:	4b05      	ldr	r3, [pc, #20]	; (8008b34 <std+0x38>)
 8008b20:	6263      	str	r3, [r4, #36]	; 0x24
 8008b22:	4b05      	ldr	r3, [pc, #20]	; (8008b38 <std+0x3c>)
 8008b24:	62a3      	str	r3, [r4, #40]	; 0x28
 8008b26:	4b05      	ldr	r3, [pc, #20]	; (8008b3c <std+0x40>)
 8008b28:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008b2a:	4b05      	ldr	r3, [pc, #20]	; (8008b40 <std+0x44>)
 8008b2c:	6224      	str	r4, [r4, #32]
 8008b2e:	6323      	str	r3, [r4, #48]	; 0x30
 8008b30:	bd10      	pop	{r4, pc}
 8008b32:	bf00      	nop
 8008b34:	080097bd 	.word	0x080097bd
 8008b38:	080097df 	.word	0x080097df
 8008b3c:	08009817 	.word	0x08009817
 8008b40:	0800983b 	.word	0x0800983b

08008b44 <_cleanup_r>:
 8008b44:	4901      	ldr	r1, [pc, #4]	; (8008b4c <_cleanup_r+0x8>)
 8008b46:	f000 b8af 	b.w	8008ca8 <_fwalk_reent>
 8008b4a:	bf00      	nop
 8008b4c:	08008a85 	.word	0x08008a85

08008b50 <__sfmoreglue>:
 8008b50:	b570      	push	{r4, r5, r6, lr}
 8008b52:	1e4a      	subs	r2, r1, #1
 8008b54:	2568      	movs	r5, #104	; 0x68
 8008b56:	4355      	muls	r5, r2
 8008b58:	460e      	mov	r6, r1
 8008b5a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008b5e:	f000 f979 	bl	8008e54 <_malloc_r>
 8008b62:	4604      	mov	r4, r0
 8008b64:	b140      	cbz	r0, 8008b78 <__sfmoreglue+0x28>
 8008b66:	2100      	movs	r1, #0
 8008b68:	e9c0 1600 	strd	r1, r6, [r0]
 8008b6c:	300c      	adds	r0, #12
 8008b6e:	60a0      	str	r0, [r4, #8]
 8008b70:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008b74:	f7ff fd8a 	bl	800868c <memset>
 8008b78:	4620      	mov	r0, r4
 8008b7a:	bd70      	pop	{r4, r5, r6, pc}

08008b7c <__sfp_lock_acquire>:
 8008b7c:	4801      	ldr	r0, [pc, #4]	; (8008b84 <__sfp_lock_acquire+0x8>)
 8008b7e:	f000 b8b3 	b.w	8008ce8 <__retarget_lock_acquire_recursive>
 8008b82:	bf00      	nop
 8008b84:	20004c28 	.word	0x20004c28

08008b88 <__sfp_lock_release>:
 8008b88:	4801      	ldr	r0, [pc, #4]	; (8008b90 <__sfp_lock_release+0x8>)
 8008b8a:	f000 b8ae 	b.w	8008cea <__retarget_lock_release_recursive>
 8008b8e:	bf00      	nop
 8008b90:	20004c28 	.word	0x20004c28

08008b94 <__sinit_lock_acquire>:
 8008b94:	4801      	ldr	r0, [pc, #4]	; (8008b9c <__sinit_lock_acquire+0x8>)
 8008b96:	f000 b8a7 	b.w	8008ce8 <__retarget_lock_acquire_recursive>
 8008b9a:	bf00      	nop
 8008b9c:	20004c23 	.word	0x20004c23

08008ba0 <__sinit_lock_release>:
 8008ba0:	4801      	ldr	r0, [pc, #4]	; (8008ba8 <__sinit_lock_release+0x8>)
 8008ba2:	f000 b8a2 	b.w	8008cea <__retarget_lock_release_recursive>
 8008ba6:	bf00      	nop
 8008ba8:	20004c23 	.word	0x20004c23

08008bac <__sinit>:
 8008bac:	b510      	push	{r4, lr}
 8008bae:	4604      	mov	r4, r0
 8008bb0:	f7ff fff0 	bl	8008b94 <__sinit_lock_acquire>
 8008bb4:	69a3      	ldr	r3, [r4, #24]
 8008bb6:	b11b      	cbz	r3, 8008bc0 <__sinit+0x14>
 8008bb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008bbc:	f7ff bff0 	b.w	8008ba0 <__sinit_lock_release>
 8008bc0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008bc4:	6523      	str	r3, [r4, #80]	; 0x50
 8008bc6:	4b13      	ldr	r3, [pc, #76]	; (8008c14 <__sinit+0x68>)
 8008bc8:	4a13      	ldr	r2, [pc, #76]	; (8008c18 <__sinit+0x6c>)
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	62a2      	str	r2, [r4, #40]	; 0x28
 8008bce:	42a3      	cmp	r3, r4
 8008bd0:	bf04      	itt	eq
 8008bd2:	2301      	moveq	r3, #1
 8008bd4:	61a3      	streq	r3, [r4, #24]
 8008bd6:	4620      	mov	r0, r4
 8008bd8:	f000 f820 	bl	8008c1c <__sfp>
 8008bdc:	6060      	str	r0, [r4, #4]
 8008bde:	4620      	mov	r0, r4
 8008be0:	f000 f81c 	bl	8008c1c <__sfp>
 8008be4:	60a0      	str	r0, [r4, #8]
 8008be6:	4620      	mov	r0, r4
 8008be8:	f000 f818 	bl	8008c1c <__sfp>
 8008bec:	2200      	movs	r2, #0
 8008bee:	60e0      	str	r0, [r4, #12]
 8008bf0:	2104      	movs	r1, #4
 8008bf2:	6860      	ldr	r0, [r4, #4]
 8008bf4:	f7ff ff82 	bl	8008afc <std>
 8008bf8:	68a0      	ldr	r0, [r4, #8]
 8008bfa:	2201      	movs	r2, #1
 8008bfc:	2109      	movs	r1, #9
 8008bfe:	f7ff ff7d 	bl	8008afc <std>
 8008c02:	68e0      	ldr	r0, [r4, #12]
 8008c04:	2202      	movs	r2, #2
 8008c06:	2112      	movs	r1, #18
 8008c08:	f7ff ff78 	bl	8008afc <std>
 8008c0c:	2301      	movs	r3, #1
 8008c0e:	61a3      	str	r3, [r4, #24]
 8008c10:	e7d2      	b.n	8008bb8 <__sinit+0xc>
 8008c12:	bf00      	nop
 8008c14:	08009db4 	.word	0x08009db4
 8008c18:	08008b45 	.word	0x08008b45

08008c1c <__sfp>:
 8008c1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c1e:	4607      	mov	r7, r0
 8008c20:	f7ff ffac 	bl	8008b7c <__sfp_lock_acquire>
 8008c24:	4b1e      	ldr	r3, [pc, #120]	; (8008ca0 <__sfp+0x84>)
 8008c26:	681e      	ldr	r6, [r3, #0]
 8008c28:	69b3      	ldr	r3, [r6, #24]
 8008c2a:	b913      	cbnz	r3, 8008c32 <__sfp+0x16>
 8008c2c:	4630      	mov	r0, r6
 8008c2e:	f7ff ffbd 	bl	8008bac <__sinit>
 8008c32:	3648      	adds	r6, #72	; 0x48
 8008c34:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008c38:	3b01      	subs	r3, #1
 8008c3a:	d503      	bpl.n	8008c44 <__sfp+0x28>
 8008c3c:	6833      	ldr	r3, [r6, #0]
 8008c3e:	b30b      	cbz	r3, 8008c84 <__sfp+0x68>
 8008c40:	6836      	ldr	r6, [r6, #0]
 8008c42:	e7f7      	b.n	8008c34 <__sfp+0x18>
 8008c44:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008c48:	b9d5      	cbnz	r5, 8008c80 <__sfp+0x64>
 8008c4a:	4b16      	ldr	r3, [pc, #88]	; (8008ca4 <__sfp+0x88>)
 8008c4c:	60e3      	str	r3, [r4, #12]
 8008c4e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008c52:	6665      	str	r5, [r4, #100]	; 0x64
 8008c54:	f000 f847 	bl	8008ce6 <__retarget_lock_init_recursive>
 8008c58:	f7ff ff96 	bl	8008b88 <__sfp_lock_release>
 8008c5c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008c60:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008c64:	6025      	str	r5, [r4, #0]
 8008c66:	61a5      	str	r5, [r4, #24]
 8008c68:	2208      	movs	r2, #8
 8008c6a:	4629      	mov	r1, r5
 8008c6c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008c70:	f7ff fd0c 	bl	800868c <memset>
 8008c74:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008c78:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008c7c:	4620      	mov	r0, r4
 8008c7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008c80:	3468      	adds	r4, #104	; 0x68
 8008c82:	e7d9      	b.n	8008c38 <__sfp+0x1c>
 8008c84:	2104      	movs	r1, #4
 8008c86:	4638      	mov	r0, r7
 8008c88:	f7ff ff62 	bl	8008b50 <__sfmoreglue>
 8008c8c:	4604      	mov	r4, r0
 8008c8e:	6030      	str	r0, [r6, #0]
 8008c90:	2800      	cmp	r0, #0
 8008c92:	d1d5      	bne.n	8008c40 <__sfp+0x24>
 8008c94:	f7ff ff78 	bl	8008b88 <__sfp_lock_release>
 8008c98:	230c      	movs	r3, #12
 8008c9a:	603b      	str	r3, [r7, #0]
 8008c9c:	e7ee      	b.n	8008c7c <__sfp+0x60>
 8008c9e:	bf00      	nop
 8008ca0:	08009db4 	.word	0x08009db4
 8008ca4:	ffff0001 	.word	0xffff0001

08008ca8 <_fwalk_reent>:
 8008ca8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008cac:	4606      	mov	r6, r0
 8008cae:	4688      	mov	r8, r1
 8008cb0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008cb4:	2700      	movs	r7, #0
 8008cb6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008cba:	f1b9 0901 	subs.w	r9, r9, #1
 8008cbe:	d505      	bpl.n	8008ccc <_fwalk_reent+0x24>
 8008cc0:	6824      	ldr	r4, [r4, #0]
 8008cc2:	2c00      	cmp	r4, #0
 8008cc4:	d1f7      	bne.n	8008cb6 <_fwalk_reent+0xe>
 8008cc6:	4638      	mov	r0, r7
 8008cc8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008ccc:	89ab      	ldrh	r3, [r5, #12]
 8008cce:	2b01      	cmp	r3, #1
 8008cd0:	d907      	bls.n	8008ce2 <_fwalk_reent+0x3a>
 8008cd2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008cd6:	3301      	adds	r3, #1
 8008cd8:	d003      	beq.n	8008ce2 <_fwalk_reent+0x3a>
 8008cda:	4629      	mov	r1, r5
 8008cdc:	4630      	mov	r0, r6
 8008cde:	47c0      	blx	r8
 8008ce0:	4307      	orrs	r7, r0
 8008ce2:	3568      	adds	r5, #104	; 0x68
 8008ce4:	e7e9      	b.n	8008cba <_fwalk_reent+0x12>

08008ce6 <__retarget_lock_init_recursive>:
 8008ce6:	4770      	bx	lr

08008ce8 <__retarget_lock_acquire_recursive>:
 8008ce8:	4770      	bx	lr

08008cea <__retarget_lock_release_recursive>:
 8008cea:	4770      	bx	lr

08008cec <__swhatbuf_r>:
 8008cec:	b570      	push	{r4, r5, r6, lr}
 8008cee:	460e      	mov	r6, r1
 8008cf0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008cf4:	2900      	cmp	r1, #0
 8008cf6:	b096      	sub	sp, #88	; 0x58
 8008cf8:	4614      	mov	r4, r2
 8008cfa:	461d      	mov	r5, r3
 8008cfc:	da07      	bge.n	8008d0e <__swhatbuf_r+0x22>
 8008cfe:	2300      	movs	r3, #0
 8008d00:	602b      	str	r3, [r5, #0]
 8008d02:	89b3      	ldrh	r3, [r6, #12]
 8008d04:	061a      	lsls	r2, r3, #24
 8008d06:	d410      	bmi.n	8008d2a <__swhatbuf_r+0x3e>
 8008d08:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008d0c:	e00e      	b.n	8008d2c <__swhatbuf_r+0x40>
 8008d0e:	466a      	mov	r2, sp
 8008d10:	f000 fdba 	bl	8009888 <_fstat_r>
 8008d14:	2800      	cmp	r0, #0
 8008d16:	dbf2      	blt.n	8008cfe <__swhatbuf_r+0x12>
 8008d18:	9a01      	ldr	r2, [sp, #4]
 8008d1a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008d1e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008d22:	425a      	negs	r2, r3
 8008d24:	415a      	adcs	r2, r3
 8008d26:	602a      	str	r2, [r5, #0]
 8008d28:	e7ee      	b.n	8008d08 <__swhatbuf_r+0x1c>
 8008d2a:	2340      	movs	r3, #64	; 0x40
 8008d2c:	2000      	movs	r0, #0
 8008d2e:	6023      	str	r3, [r4, #0]
 8008d30:	b016      	add	sp, #88	; 0x58
 8008d32:	bd70      	pop	{r4, r5, r6, pc}

08008d34 <__smakebuf_r>:
 8008d34:	898b      	ldrh	r3, [r1, #12]
 8008d36:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008d38:	079d      	lsls	r5, r3, #30
 8008d3a:	4606      	mov	r6, r0
 8008d3c:	460c      	mov	r4, r1
 8008d3e:	d507      	bpl.n	8008d50 <__smakebuf_r+0x1c>
 8008d40:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008d44:	6023      	str	r3, [r4, #0]
 8008d46:	6123      	str	r3, [r4, #16]
 8008d48:	2301      	movs	r3, #1
 8008d4a:	6163      	str	r3, [r4, #20]
 8008d4c:	b002      	add	sp, #8
 8008d4e:	bd70      	pop	{r4, r5, r6, pc}
 8008d50:	ab01      	add	r3, sp, #4
 8008d52:	466a      	mov	r2, sp
 8008d54:	f7ff ffca 	bl	8008cec <__swhatbuf_r>
 8008d58:	9900      	ldr	r1, [sp, #0]
 8008d5a:	4605      	mov	r5, r0
 8008d5c:	4630      	mov	r0, r6
 8008d5e:	f000 f879 	bl	8008e54 <_malloc_r>
 8008d62:	b948      	cbnz	r0, 8008d78 <__smakebuf_r+0x44>
 8008d64:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008d68:	059a      	lsls	r2, r3, #22
 8008d6a:	d4ef      	bmi.n	8008d4c <__smakebuf_r+0x18>
 8008d6c:	f023 0303 	bic.w	r3, r3, #3
 8008d70:	f043 0302 	orr.w	r3, r3, #2
 8008d74:	81a3      	strh	r3, [r4, #12]
 8008d76:	e7e3      	b.n	8008d40 <__smakebuf_r+0xc>
 8008d78:	4b0d      	ldr	r3, [pc, #52]	; (8008db0 <__smakebuf_r+0x7c>)
 8008d7a:	62b3      	str	r3, [r6, #40]	; 0x28
 8008d7c:	89a3      	ldrh	r3, [r4, #12]
 8008d7e:	6020      	str	r0, [r4, #0]
 8008d80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008d84:	81a3      	strh	r3, [r4, #12]
 8008d86:	9b00      	ldr	r3, [sp, #0]
 8008d88:	6163      	str	r3, [r4, #20]
 8008d8a:	9b01      	ldr	r3, [sp, #4]
 8008d8c:	6120      	str	r0, [r4, #16]
 8008d8e:	b15b      	cbz	r3, 8008da8 <__smakebuf_r+0x74>
 8008d90:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008d94:	4630      	mov	r0, r6
 8008d96:	f000 fd89 	bl	80098ac <_isatty_r>
 8008d9a:	b128      	cbz	r0, 8008da8 <__smakebuf_r+0x74>
 8008d9c:	89a3      	ldrh	r3, [r4, #12]
 8008d9e:	f023 0303 	bic.w	r3, r3, #3
 8008da2:	f043 0301 	orr.w	r3, r3, #1
 8008da6:	81a3      	strh	r3, [r4, #12]
 8008da8:	89a0      	ldrh	r0, [r4, #12]
 8008daa:	4305      	orrs	r5, r0
 8008dac:	81a5      	strh	r5, [r4, #12]
 8008dae:	e7cd      	b.n	8008d4c <__smakebuf_r+0x18>
 8008db0:	08008b45 	.word	0x08008b45

08008db4 <_free_r>:
 8008db4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008db6:	2900      	cmp	r1, #0
 8008db8:	d048      	beq.n	8008e4c <_free_r+0x98>
 8008dba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008dbe:	9001      	str	r0, [sp, #4]
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	f1a1 0404 	sub.w	r4, r1, #4
 8008dc6:	bfb8      	it	lt
 8008dc8:	18e4      	addlt	r4, r4, r3
 8008dca:	f000 fdab 	bl	8009924 <__malloc_lock>
 8008dce:	4a20      	ldr	r2, [pc, #128]	; (8008e50 <_free_r+0x9c>)
 8008dd0:	9801      	ldr	r0, [sp, #4]
 8008dd2:	6813      	ldr	r3, [r2, #0]
 8008dd4:	4615      	mov	r5, r2
 8008dd6:	b933      	cbnz	r3, 8008de6 <_free_r+0x32>
 8008dd8:	6063      	str	r3, [r4, #4]
 8008dda:	6014      	str	r4, [r2, #0]
 8008ddc:	b003      	add	sp, #12
 8008dde:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008de2:	f000 bda5 	b.w	8009930 <__malloc_unlock>
 8008de6:	42a3      	cmp	r3, r4
 8008de8:	d90b      	bls.n	8008e02 <_free_r+0x4e>
 8008dea:	6821      	ldr	r1, [r4, #0]
 8008dec:	1862      	adds	r2, r4, r1
 8008dee:	4293      	cmp	r3, r2
 8008df0:	bf04      	itt	eq
 8008df2:	681a      	ldreq	r2, [r3, #0]
 8008df4:	685b      	ldreq	r3, [r3, #4]
 8008df6:	6063      	str	r3, [r4, #4]
 8008df8:	bf04      	itt	eq
 8008dfa:	1852      	addeq	r2, r2, r1
 8008dfc:	6022      	streq	r2, [r4, #0]
 8008dfe:	602c      	str	r4, [r5, #0]
 8008e00:	e7ec      	b.n	8008ddc <_free_r+0x28>
 8008e02:	461a      	mov	r2, r3
 8008e04:	685b      	ldr	r3, [r3, #4]
 8008e06:	b10b      	cbz	r3, 8008e0c <_free_r+0x58>
 8008e08:	42a3      	cmp	r3, r4
 8008e0a:	d9fa      	bls.n	8008e02 <_free_r+0x4e>
 8008e0c:	6811      	ldr	r1, [r2, #0]
 8008e0e:	1855      	adds	r5, r2, r1
 8008e10:	42a5      	cmp	r5, r4
 8008e12:	d10b      	bne.n	8008e2c <_free_r+0x78>
 8008e14:	6824      	ldr	r4, [r4, #0]
 8008e16:	4421      	add	r1, r4
 8008e18:	1854      	adds	r4, r2, r1
 8008e1a:	42a3      	cmp	r3, r4
 8008e1c:	6011      	str	r1, [r2, #0]
 8008e1e:	d1dd      	bne.n	8008ddc <_free_r+0x28>
 8008e20:	681c      	ldr	r4, [r3, #0]
 8008e22:	685b      	ldr	r3, [r3, #4]
 8008e24:	6053      	str	r3, [r2, #4]
 8008e26:	4421      	add	r1, r4
 8008e28:	6011      	str	r1, [r2, #0]
 8008e2a:	e7d7      	b.n	8008ddc <_free_r+0x28>
 8008e2c:	d902      	bls.n	8008e34 <_free_r+0x80>
 8008e2e:	230c      	movs	r3, #12
 8008e30:	6003      	str	r3, [r0, #0]
 8008e32:	e7d3      	b.n	8008ddc <_free_r+0x28>
 8008e34:	6825      	ldr	r5, [r4, #0]
 8008e36:	1961      	adds	r1, r4, r5
 8008e38:	428b      	cmp	r3, r1
 8008e3a:	bf04      	itt	eq
 8008e3c:	6819      	ldreq	r1, [r3, #0]
 8008e3e:	685b      	ldreq	r3, [r3, #4]
 8008e40:	6063      	str	r3, [r4, #4]
 8008e42:	bf04      	itt	eq
 8008e44:	1949      	addeq	r1, r1, r5
 8008e46:	6021      	streq	r1, [r4, #0]
 8008e48:	6054      	str	r4, [r2, #4]
 8008e4a:	e7c7      	b.n	8008ddc <_free_r+0x28>
 8008e4c:	b003      	add	sp, #12
 8008e4e:	bd30      	pop	{r4, r5, pc}
 8008e50:	200049a4 	.word	0x200049a4

08008e54 <_malloc_r>:
 8008e54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e56:	1ccd      	adds	r5, r1, #3
 8008e58:	f025 0503 	bic.w	r5, r5, #3
 8008e5c:	3508      	adds	r5, #8
 8008e5e:	2d0c      	cmp	r5, #12
 8008e60:	bf38      	it	cc
 8008e62:	250c      	movcc	r5, #12
 8008e64:	2d00      	cmp	r5, #0
 8008e66:	4606      	mov	r6, r0
 8008e68:	db01      	blt.n	8008e6e <_malloc_r+0x1a>
 8008e6a:	42a9      	cmp	r1, r5
 8008e6c:	d903      	bls.n	8008e76 <_malloc_r+0x22>
 8008e6e:	230c      	movs	r3, #12
 8008e70:	6033      	str	r3, [r6, #0]
 8008e72:	2000      	movs	r0, #0
 8008e74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008e76:	f000 fd55 	bl	8009924 <__malloc_lock>
 8008e7a:	4921      	ldr	r1, [pc, #132]	; (8008f00 <_malloc_r+0xac>)
 8008e7c:	680a      	ldr	r2, [r1, #0]
 8008e7e:	4614      	mov	r4, r2
 8008e80:	b99c      	cbnz	r4, 8008eaa <_malloc_r+0x56>
 8008e82:	4f20      	ldr	r7, [pc, #128]	; (8008f04 <_malloc_r+0xb0>)
 8008e84:	683b      	ldr	r3, [r7, #0]
 8008e86:	b923      	cbnz	r3, 8008e92 <_malloc_r+0x3e>
 8008e88:	4621      	mov	r1, r4
 8008e8a:	4630      	mov	r0, r6
 8008e8c:	f000 fc86 	bl	800979c <_sbrk_r>
 8008e90:	6038      	str	r0, [r7, #0]
 8008e92:	4629      	mov	r1, r5
 8008e94:	4630      	mov	r0, r6
 8008e96:	f000 fc81 	bl	800979c <_sbrk_r>
 8008e9a:	1c43      	adds	r3, r0, #1
 8008e9c:	d123      	bne.n	8008ee6 <_malloc_r+0x92>
 8008e9e:	230c      	movs	r3, #12
 8008ea0:	6033      	str	r3, [r6, #0]
 8008ea2:	4630      	mov	r0, r6
 8008ea4:	f000 fd44 	bl	8009930 <__malloc_unlock>
 8008ea8:	e7e3      	b.n	8008e72 <_malloc_r+0x1e>
 8008eaa:	6823      	ldr	r3, [r4, #0]
 8008eac:	1b5b      	subs	r3, r3, r5
 8008eae:	d417      	bmi.n	8008ee0 <_malloc_r+0x8c>
 8008eb0:	2b0b      	cmp	r3, #11
 8008eb2:	d903      	bls.n	8008ebc <_malloc_r+0x68>
 8008eb4:	6023      	str	r3, [r4, #0]
 8008eb6:	441c      	add	r4, r3
 8008eb8:	6025      	str	r5, [r4, #0]
 8008eba:	e004      	b.n	8008ec6 <_malloc_r+0x72>
 8008ebc:	6863      	ldr	r3, [r4, #4]
 8008ebe:	42a2      	cmp	r2, r4
 8008ec0:	bf0c      	ite	eq
 8008ec2:	600b      	streq	r3, [r1, #0]
 8008ec4:	6053      	strne	r3, [r2, #4]
 8008ec6:	4630      	mov	r0, r6
 8008ec8:	f000 fd32 	bl	8009930 <__malloc_unlock>
 8008ecc:	f104 000b 	add.w	r0, r4, #11
 8008ed0:	1d23      	adds	r3, r4, #4
 8008ed2:	f020 0007 	bic.w	r0, r0, #7
 8008ed6:	1ac2      	subs	r2, r0, r3
 8008ed8:	d0cc      	beq.n	8008e74 <_malloc_r+0x20>
 8008eda:	1a1b      	subs	r3, r3, r0
 8008edc:	50a3      	str	r3, [r4, r2]
 8008ede:	e7c9      	b.n	8008e74 <_malloc_r+0x20>
 8008ee0:	4622      	mov	r2, r4
 8008ee2:	6864      	ldr	r4, [r4, #4]
 8008ee4:	e7cc      	b.n	8008e80 <_malloc_r+0x2c>
 8008ee6:	1cc4      	adds	r4, r0, #3
 8008ee8:	f024 0403 	bic.w	r4, r4, #3
 8008eec:	42a0      	cmp	r0, r4
 8008eee:	d0e3      	beq.n	8008eb8 <_malloc_r+0x64>
 8008ef0:	1a21      	subs	r1, r4, r0
 8008ef2:	4630      	mov	r0, r6
 8008ef4:	f000 fc52 	bl	800979c <_sbrk_r>
 8008ef8:	3001      	adds	r0, #1
 8008efa:	d1dd      	bne.n	8008eb8 <_malloc_r+0x64>
 8008efc:	e7cf      	b.n	8008e9e <_malloc_r+0x4a>
 8008efe:	bf00      	nop
 8008f00:	200049a4 	.word	0x200049a4
 8008f04:	200049a8 	.word	0x200049a8

08008f08 <__ssputs_r>:
 8008f08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008f0c:	688e      	ldr	r6, [r1, #8]
 8008f0e:	429e      	cmp	r6, r3
 8008f10:	4682      	mov	sl, r0
 8008f12:	460c      	mov	r4, r1
 8008f14:	4690      	mov	r8, r2
 8008f16:	461f      	mov	r7, r3
 8008f18:	d838      	bhi.n	8008f8c <__ssputs_r+0x84>
 8008f1a:	898a      	ldrh	r2, [r1, #12]
 8008f1c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008f20:	d032      	beq.n	8008f88 <__ssputs_r+0x80>
 8008f22:	6825      	ldr	r5, [r4, #0]
 8008f24:	6909      	ldr	r1, [r1, #16]
 8008f26:	eba5 0901 	sub.w	r9, r5, r1
 8008f2a:	6965      	ldr	r5, [r4, #20]
 8008f2c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008f30:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008f34:	3301      	adds	r3, #1
 8008f36:	444b      	add	r3, r9
 8008f38:	106d      	asrs	r5, r5, #1
 8008f3a:	429d      	cmp	r5, r3
 8008f3c:	bf38      	it	cc
 8008f3e:	461d      	movcc	r5, r3
 8008f40:	0553      	lsls	r3, r2, #21
 8008f42:	d531      	bpl.n	8008fa8 <__ssputs_r+0xa0>
 8008f44:	4629      	mov	r1, r5
 8008f46:	f7ff ff85 	bl	8008e54 <_malloc_r>
 8008f4a:	4606      	mov	r6, r0
 8008f4c:	b950      	cbnz	r0, 8008f64 <__ssputs_r+0x5c>
 8008f4e:	230c      	movs	r3, #12
 8008f50:	f8ca 3000 	str.w	r3, [sl]
 8008f54:	89a3      	ldrh	r3, [r4, #12]
 8008f56:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008f5a:	81a3      	strh	r3, [r4, #12]
 8008f5c:	f04f 30ff 	mov.w	r0, #4294967295
 8008f60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f64:	6921      	ldr	r1, [r4, #16]
 8008f66:	464a      	mov	r2, r9
 8008f68:	f7ff fb82 	bl	8008670 <memcpy>
 8008f6c:	89a3      	ldrh	r3, [r4, #12]
 8008f6e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008f72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008f76:	81a3      	strh	r3, [r4, #12]
 8008f78:	6126      	str	r6, [r4, #16]
 8008f7a:	6165      	str	r5, [r4, #20]
 8008f7c:	444e      	add	r6, r9
 8008f7e:	eba5 0509 	sub.w	r5, r5, r9
 8008f82:	6026      	str	r6, [r4, #0]
 8008f84:	60a5      	str	r5, [r4, #8]
 8008f86:	463e      	mov	r6, r7
 8008f88:	42be      	cmp	r6, r7
 8008f8a:	d900      	bls.n	8008f8e <__ssputs_r+0x86>
 8008f8c:	463e      	mov	r6, r7
 8008f8e:	4632      	mov	r2, r6
 8008f90:	6820      	ldr	r0, [r4, #0]
 8008f92:	4641      	mov	r1, r8
 8008f94:	f000 fcac 	bl	80098f0 <memmove>
 8008f98:	68a3      	ldr	r3, [r4, #8]
 8008f9a:	6822      	ldr	r2, [r4, #0]
 8008f9c:	1b9b      	subs	r3, r3, r6
 8008f9e:	4432      	add	r2, r6
 8008fa0:	60a3      	str	r3, [r4, #8]
 8008fa2:	6022      	str	r2, [r4, #0]
 8008fa4:	2000      	movs	r0, #0
 8008fa6:	e7db      	b.n	8008f60 <__ssputs_r+0x58>
 8008fa8:	462a      	mov	r2, r5
 8008faa:	f000 fcc7 	bl	800993c <_realloc_r>
 8008fae:	4606      	mov	r6, r0
 8008fb0:	2800      	cmp	r0, #0
 8008fb2:	d1e1      	bne.n	8008f78 <__ssputs_r+0x70>
 8008fb4:	6921      	ldr	r1, [r4, #16]
 8008fb6:	4650      	mov	r0, sl
 8008fb8:	f7ff fefc 	bl	8008db4 <_free_r>
 8008fbc:	e7c7      	b.n	8008f4e <__ssputs_r+0x46>
	...

08008fc0 <_svfiprintf_r>:
 8008fc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fc4:	4698      	mov	r8, r3
 8008fc6:	898b      	ldrh	r3, [r1, #12]
 8008fc8:	061b      	lsls	r3, r3, #24
 8008fca:	b09d      	sub	sp, #116	; 0x74
 8008fcc:	4607      	mov	r7, r0
 8008fce:	460d      	mov	r5, r1
 8008fd0:	4614      	mov	r4, r2
 8008fd2:	d50e      	bpl.n	8008ff2 <_svfiprintf_r+0x32>
 8008fd4:	690b      	ldr	r3, [r1, #16]
 8008fd6:	b963      	cbnz	r3, 8008ff2 <_svfiprintf_r+0x32>
 8008fd8:	2140      	movs	r1, #64	; 0x40
 8008fda:	f7ff ff3b 	bl	8008e54 <_malloc_r>
 8008fde:	6028      	str	r0, [r5, #0]
 8008fe0:	6128      	str	r0, [r5, #16]
 8008fe2:	b920      	cbnz	r0, 8008fee <_svfiprintf_r+0x2e>
 8008fe4:	230c      	movs	r3, #12
 8008fe6:	603b      	str	r3, [r7, #0]
 8008fe8:	f04f 30ff 	mov.w	r0, #4294967295
 8008fec:	e0d1      	b.n	8009192 <_svfiprintf_r+0x1d2>
 8008fee:	2340      	movs	r3, #64	; 0x40
 8008ff0:	616b      	str	r3, [r5, #20]
 8008ff2:	2300      	movs	r3, #0
 8008ff4:	9309      	str	r3, [sp, #36]	; 0x24
 8008ff6:	2320      	movs	r3, #32
 8008ff8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008ffc:	f8cd 800c 	str.w	r8, [sp, #12]
 8009000:	2330      	movs	r3, #48	; 0x30
 8009002:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80091ac <_svfiprintf_r+0x1ec>
 8009006:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800900a:	f04f 0901 	mov.w	r9, #1
 800900e:	4623      	mov	r3, r4
 8009010:	469a      	mov	sl, r3
 8009012:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009016:	b10a      	cbz	r2, 800901c <_svfiprintf_r+0x5c>
 8009018:	2a25      	cmp	r2, #37	; 0x25
 800901a:	d1f9      	bne.n	8009010 <_svfiprintf_r+0x50>
 800901c:	ebba 0b04 	subs.w	fp, sl, r4
 8009020:	d00b      	beq.n	800903a <_svfiprintf_r+0x7a>
 8009022:	465b      	mov	r3, fp
 8009024:	4622      	mov	r2, r4
 8009026:	4629      	mov	r1, r5
 8009028:	4638      	mov	r0, r7
 800902a:	f7ff ff6d 	bl	8008f08 <__ssputs_r>
 800902e:	3001      	adds	r0, #1
 8009030:	f000 80aa 	beq.w	8009188 <_svfiprintf_r+0x1c8>
 8009034:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009036:	445a      	add	r2, fp
 8009038:	9209      	str	r2, [sp, #36]	; 0x24
 800903a:	f89a 3000 	ldrb.w	r3, [sl]
 800903e:	2b00      	cmp	r3, #0
 8009040:	f000 80a2 	beq.w	8009188 <_svfiprintf_r+0x1c8>
 8009044:	2300      	movs	r3, #0
 8009046:	f04f 32ff 	mov.w	r2, #4294967295
 800904a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800904e:	f10a 0a01 	add.w	sl, sl, #1
 8009052:	9304      	str	r3, [sp, #16]
 8009054:	9307      	str	r3, [sp, #28]
 8009056:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800905a:	931a      	str	r3, [sp, #104]	; 0x68
 800905c:	4654      	mov	r4, sl
 800905e:	2205      	movs	r2, #5
 8009060:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009064:	4851      	ldr	r0, [pc, #324]	; (80091ac <_svfiprintf_r+0x1ec>)
 8009066:	f7f7 f8b3 	bl	80001d0 <memchr>
 800906a:	9a04      	ldr	r2, [sp, #16]
 800906c:	b9d8      	cbnz	r0, 80090a6 <_svfiprintf_r+0xe6>
 800906e:	06d0      	lsls	r0, r2, #27
 8009070:	bf44      	itt	mi
 8009072:	2320      	movmi	r3, #32
 8009074:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009078:	0711      	lsls	r1, r2, #28
 800907a:	bf44      	itt	mi
 800907c:	232b      	movmi	r3, #43	; 0x2b
 800907e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009082:	f89a 3000 	ldrb.w	r3, [sl]
 8009086:	2b2a      	cmp	r3, #42	; 0x2a
 8009088:	d015      	beq.n	80090b6 <_svfiprintf_r+0xf6>
 800908a:	9a07      	ldr	r2, [sp, #28]
 800908c:	4654      	mov	r4, sl
 800908e:	2000      	movs	r0, #0
 8009090:	f04f 0c0a 	mov.w	ip, #10
 8009094:	4621      	mov	r1, r4
 8009096:	f811 3b01 	ldrb.w	r3, [r1], #1
 800909a:	3b30      	subs	r3, #48	; 0x30
 800909c:	2b09      	cmp	r3, #9
 800909e:	d94e      	bls.n	800913e <_svfiprintf_r+0x17e>
 80090a0:	b1b0      	cbz	r0, 80090d0 <_svfiprintf_r+0x110>
 80090a2:	9207      	str	r2, [sp, #28]
 80090a4:	e014      	b.n	80090d0 <_svfiprintf_r+0x110>
 80090a6:	eba0 0308 	sub.w	r3, r0, r8
 80090aa:	fa09 f303 	lsl.w	r3, r9, r3
 80090ae:	4313      	orrs	r3, r2
 80090b0:	9304      	str	r3, [sp, #16]
 80090b2:	46a2      	mov	sl, r4
 80090b4:	e7d2      	b.n	800905c <_svfiprintf_r+0x9c>
 80090b6:	9b03      	ldr	r3, [sp, #12]
 80090b8:	1d19      	adds	r1, r3, #4
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	9103      	str	r1, [sp, #12]
 80090be:	2b00      	cmp	r3, #0
 80090c0:	bfbb      	ittet	lt
 80090c2:	425b      	neglt	r3, r3
 80090c4:	f042 0202 	orrlt.w	r2, r2, #2
 80090c8:	9307      	strge	r3, [sp, #28]
 80090ca:	9307      	strlt	r3, [sp, #28]
 80090cc:	bfb8      	it	lt
 80090ce:	9204      	strlt	r2, [sp, #16]
 80090d0:	7823      	ldrb	r3, [r4, #0]
 80090d2:	2b2e      	cmp	r3, #46	; 0x2e
 80090d4:	d10c      	bne.n	80090f0 <_svfiprintf_r+0x130>
 80090d6:	7863      	ldrb	r3, [r4, #1]
 80090d8:	2b2a      	cmp	r3, #42	; 0x2a
 80090da:	d135      	bne.n	8009148 <_svfiprintf_r+0x188>
 80090dc:	9b03      	ldr	r3, [sp, #12]
 80090de:	1d1a      	adds	r2, r3, #4
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	9203      	str	r2, [sp, #12]
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	bfb8      	it	lt
 80090e8:	f04f 33ff 	movlt.w	r3, #4294967295
 80090ec:	3402      	adds	r4, #2
 80090ee:	9305      	str	r3, [sp, #20]
 80090f0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80091bc <_svfiprintf_r+0x1fc>
 80090f4:	7821      	ldrb	r1, [r4, #0]
 80090f6:	2203      	movs	r2, #3
 80090f8:	4650      	mov	r0, sl
 80090fa:	f7f7 f869 	bl	80001d0 <memchr>
 80090fe:	b140      	cbz	r0, 8009112 <_svfiprintf_r+0x152>
 8009100:	2340      	movs	r3, #64	; 0x40
 8009102:	eba0 000a 	sub.w	r0, r0, sl
 8009106:	fa03 f000 	lsl.w	r0, r3, r0
 800910a:	9b04      	ldr	r3, [sp, #16]
 800910c:	4303      	orrs	r3, r0
 800910e:	3401      	adds	r4, #1
 8009110:	9304      	str	r3, [sp, #16]
 8009112:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009116:	4826      	ldr	r0, [pc, #152]	; (80091b0 <_svfiprintf_r+0x1f0>)
 8009118:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800911c:	2206      	movs	r2, #6
 800911e:	f7f7 f857 	bl	80001d0 <memchr>
 8009122:	2800      	cmp	r0, #0
 8009124:	d038      	beq.n	8009198 <_svfiprintf_r+0x1d8>
 8009126:	4b23      	ldr	r3, [pc, #140]	; (80091b4 <_svfiprintf_r+0x1f4>)
 8009128:	bb1b      	cbnz	r3, 8009172 <_svfiprintf_r+0x1b2>
 800912a:	9b03      	ldr	r3, [sp, #12]
 800912c:	3307      	adds	r3, #7
 800912e:	f023 0307 	bic.w	r3, r3, #7
 8009132:	3308      	adds	r3, #8
 8009134:	9303      	str	r3, [sp, #12]
 8009136:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009138:	4433      	add	r3, r6
 800913a:	9309      	str	r3, [sp, #36]	; 0x24
 800913c:	e767      	b.n	800900e <_svfiprintf_r+0x4e>
 800913e:	fb0c 3202 	mla	r2, ip, r2, r3
 8009142:	460c      	mov	r4, r1
 8009144:	2001      	movs	r0, #1
 8009146:	e7a5      	b.n	8009094 <_svfiprintf_r+0xd4>
 8009148:	2300      	movs	r3, #0
 800914a:	3401      	adds	r4, #1
 800914c:	9305      	str	r3, [sp, #20]
 800914e:	4619      	mov	r1, r3
 8009150:	f04f 0c0a 	mov.w	ip, #10
 8009154:	4620      	mov	r0, r4
 8009156:	f810 2b01 	ldrb.w	r2, [r0], #1
 800915a:	3a30      	subs	r2, #48	; 0x30
 800915c:	2a09      	cmp	r2, #9
 800915e:	d903      	bls.n	8009168 <_svfiprintf_r+0x1a8>
 8009160:	2b00      	cmp	r3, #0
 8009162:	d0c5      	beq.n	80090f0 <_svfiprintf_r+0x130>
 8009164:	9105      	str	r1, [sp, #20]
 8009166:	e7c3      	b.n	80090f0 <_svfiprintf_r+0x130>
 8009168:	fb0c 2101 	mla	r1, ip, r1, r2
 800916c:	4604      	mov	r4, r0
 800916e:	2301      	movs	r3, #1
 8009170:	e7f0      	b.n	8009154 <_svfiprintf_r+0x194>
 8009172:	ab03      	add	r3, sp, #12
 8009174:	9300      	str	r3, [sp, #0]
 8009176:	462a      	mov	r2, r5
 8009178:	4b0f      	ldr	r3, [pc, #60]	; (80091b8 <_svfiprintf_r+0x1f8>)
 800917a:	a904      	add	r1, sp, #16
 800917c:	4638      	mov	r0, r7
 800917e:	f3af 8000 	nop.w
 8009182:	1c42      	adds	r2, r0, #1
 8009184:	4606      	mov	r6, r0
 8009186:	d1d6      	bne.n	8009136 <_svfiprintf_r+0x176>
 8009188:	89ab      	ldrh	r3, [r5, #12]
 800918a:	065b      	lsls	r3, r3, #25
 800918c:	f53f af2c 	bmi.w	8008fe8 <_svfiprintf_r+0x28>
 8009190:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009192:	b01d      	add	sp, #116	; 0x74
 8009194:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009198:	ab03      	add	r3, sp, #12
 800919a:	9300      	str	r3, [sp, #0]
 800919c:	462a      	mov	r2, r5
 800919e:	4b06      	ldr	r3, [pc, #24]	; (80091b8 <_svfiprintf_r+0x1f8>)
 80091a0:	a904      	add	r1, sp, #16
 80091a2:	4638      	mov	r0, r7
 80091a4:	f000 f9d4 	bl	8009550 <_printf_i>
 80091a8:	e7eb      	b.n	8009182 <_svfiprintf_r+0x1c2>
 80091aa:	bf00      	nop
 80091ac:	08009e18 	.word	0x08009e18
 80091b0:	08009e22 	.word	0x08009e22
 80091b4:	00000000 	.word	0x00000000
 80091b8:	08008f09 	.word	0x08008f09
 80091bc:	08009e1e 	.word	0x08009e1e

080091c0 <__sfputc_r>:
 80091c0:	6893      	ldr	r3, [r2, #8]
 80091c2:	3b01      	subs	r3, #1
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	b410      	push	{r4}
 80091c8:	6093      	str	r3, [r2, #8]
 80091ca:	da08      	bge.n	80091de <__sfputc_r+0x1e>
 80091cc:	6994      	ldr	r4, [r2, #24]
 80091ce:	42a3      	cmp	r3, r4
 80091d0:	db01      	blt.n	80091d6 <__sfputc_r+0x16>
 80091d2:	290a      	cmp	r1, #10
 80091d4:	d103      	bne.n	80091de <__sfputc_r+0x1e>
 80091d6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80091da:	f7ff bb0d 	b.w	80087f8 <__swbuf_r>
 80091de:	6813      	ldr	r3, [r2, #0]
 80091e0:	1c58      	adds	r0, r3, #1
 80091e2:	6010      	str	r0, [r2, #0]
 80091e4:	7019      	strb	r1, [r3, #0]
 80091e6:	4608      	mov	r0, r1
 80091e8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80091ec:	4770      	bx	lr

080091ee <__sfputs_r>:
 80091ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091f0:	4606      	mov	r6, r0
 80091f2:	460f      	mov	r7, r1
 80091f4:	4614      	mov	r4, r2
 80091f6:	18d5      	adds	r5, r2, r3
 80091f8:	42ac      	cmp	r4, r5
 80091fa:	d101      	bne.n	8009200 <__sfputs_r+0x12>
 80091fc:	2000      	movs	r0, #0
 80091fe:	e007      	b.n	8009210 <__sfputs_r+0x22>
 8009200:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009204:	463a      	mov	r2, r7
 8009206:	4630      	mov	r0, r6
 8009208:	f7ff ffda 	bl	80091c0 <__sfputc_r>
 800920c:	1c43      	adds	r3, r0, #1
 800920e:	d1f3      	bne.n	80091f8 <__sfputs_r+0xa>
 8009210:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009214 <_vfiprintf_r>:
 8009214:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009218:	460d      	mov	r5, r1
 800921a:	b09d      	sub	sp, #116	; 0x74
 800921c:	4614      	mov	r4, r2
 800921e:	4698      	mov	r8, r3
 8009220:	4606      	mov	r6, r0
 8009222:	b118      	cbz	r0, 800922c <_vfiprintf_r+0x18>
 8009224:	6983      	ldr	r3, [r0, #24]
 8009226:	b90b      	cbnz	r3, 800922c <_vfiprintf_r+0x18>
 8009228:	f7ff fcc0 	bl	8008bac <__sinit>
 800922c:	4b89      	ldr	r3, [pc, #548]	; (8009454 <_vfiprintf_r+0x240>)
 800922e:	429d      	cmp	r5, r3
 8009230:	d11b      	bne.n	800926a <_vfiprintf_r+0x56>
 8009232:	6875      	ldr	r5, [r6, #4]
 8009234:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009236:	07d9      	lsls	r1, r3, #31
 8009238:	d405      	bmi.n	8009246 <_vfiprintf_r+0x32>
 800923a:	89ab      	ldrh	r3, [r5, #12]
 800923c:	059a      	lsls	r2, r3, #22
 800923e:	d402      	bmi.n	8009246 <_vfiprintf_r+0x32>
 8009240:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009242:	f7ff fd51 	bl	8008ce8 <__retarget_lock_acquire_recursive>
 8009246:	89ab      	ldrh	r3, [r5, #12]
 8009248:	071b      	lsls	r3, r3, #28
 800924a:	d501      	bpl.n	8009250 <_vfiprintf_r+0x3c>
 800924c:	692b      	ldr	r3, [r5, #16]
 800924e:	b9eb      	cbnz	r3, 800928c <_vfiprintf_r+0x78>
 8009250:	4629      	mov	r1, r5
 8009252:	4630      	mov	r0, r6
 8009254:	f7ff fb22 	bl	800889c <__swsetup_r>
 8009258:	b1c0      	cbz	r0, 800928c <_vfiprintf_r+0x78>
 800925a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800925c:	07dc      	lsls	r4, r3, #31
 800925e:	d50e      	bpl.n	800927e <_vfiprintf_r+0x6a>
 8009260:	f04f 30ff 	mov.w	r0, #4294967295
 8009264:	b01d      	add	sp, #116	; 0x74
 8009266:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800926a:	4b7b      	ldr	r3, [pc, #492]	; (8009458 <_vfiprintf_r+0x244>)
 800926c:	429d      	cmp	r5, r3
 800926e:	d101      	bne.n	8009274 <_vfiprintf_r+0x60>
 8009270:	68b5      	ldr	r5, [r6, #8]
 8009272:	e7df      	b.n	8009234 <_vfiprintf_r+0x20>
 8009274:	4b79      	ldr	r3, [pc, #484]	; (800945c <_vfiprintf_r+0x248>)
 8009276:	429d      	cmp	r5, r3
 8009278:	bf08      	it	eq
 800927a:	68f5      	ldreq	r5, [r6, #12]
 800927c:	e7da      	b.n	8009234 <_vfiprintf_r+0x20>
 800927e:	89ab      	ldrh	r3, [r5, #12]
 8009280:	0598      	lsls	r0, r3, #22
 8009282:	d4ed      	bmi.n	8009260 <_vfiprintf_r+0x4c>
 8009284:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009286:	f7ff fd30 	bl	8008cea <__retarget_lock_release_recursive>
 800928a:	e7e9      	b.n	8009260 <_vfiprintf_r+0x4c>
 800928c:	2300      	movs	r3, #0
 800928e:	9309      	str	r3, [sp, #36]	; 0x24
 8009290:	2320      	movs	r3, #32
 8009292:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009296:	f8cd 800c 	str.w	r8, [sp, #12]
 800929a:	2330      	movs	r3, #48	; 0x30
 800929c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009460 <_vfiprintf_r+0x24c>
 80092a0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80092a4:	f04f 0901 	mov.w	r9, #1
 80092a8:	4623      	mov	r3, r4
 80092aa:	469a      	mov	sl, r3
 80092ac:	f813 2b01 	ldrb.w	r2, [r3], #1
 80092b0:	b10a      	cbz	r2, 80092b6 <_vfiprintf_r+0xa2>
 80092b2:	2a25      	cmp	r2, #37	; 0x25
 80092b4:	d1f9      	bne.n	80092aa <_vfiprintf_r+0x96>
 80092b6:	ebba 0b04 	subs.w	fp, sl, r4
 80092ba:	d00b      	beq.n	80092d4 <_vfiprintf_r+0xc0>
 80092bc:	465b      	mov	r3, fp
 80092be:	4622      	mov	r2, r4
 80092c0:	4629      	mov	r1, r5
 80092c2:	4630      	mov	r0, r6
 80092c4:	f7ff ff93 	bl	80091ee <__sfputs_r>
 80092c8:	3001      	adds	r0, #1
 80092ca:	f000 80aa 	beq.w	8009422 <_vfiprintf_r+0x20e>
 80092ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80092d0:	445a      	add	r2, fp
 80092d2:	9209      	str	r2, [sp, #36]	; 0x24
 80092d4:	f89a 3000 	ldrb.w	r3, [sl]
 80092d8:	2b00      	cmp	r3, #0
 80092da:	f000 80a2 	beq.w	8009422 <_vfiprintf_r+0x20e>
 80092de:	2300      	movs	r3, #0
 80092e0:	f04f 32ff 	mov.w	r2, #4294967295
 80092e4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80092e8:	f10a 0a01 	add.w	sl, sl, #1
 80092ec:	9304      	str	r3, [sp, #16]
 80092ee:	9307      	str	r3, [sp, #28]
 80092f0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80092f4:	931a      	str	r3, [sp, #104]	; 0x68
 80092f6:	4654      	mov	r4, sl
 80092f8:	2205      	movs	r2, #5
 80092fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80092fe:	4858      	ldr	r0, [pc, #352]	; (8009460 <_vfiprintf_r+0x24c>)
 8009300:	f7f6 ff66 	bl	80001d0 <memchr>
 8009304:	9a04      	ldr	r2, [sp, #16]
 8009306:	b9d8      	cbnz	r0, 8009340 <_vfiprintf_r+0x12c>
 8009308:	06d1      	lsls	r1, r2, #27
 800930a:	bf44      	itt	mi
 800930c:	2320      	movmi	r3, #32
 800930e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009312:	0713      	lsls	r3, r2, #28
 8009314:	bf44      	itt	mi
 8009316:	232b      	movmi	r3, #43	; 0x2b
 8009318:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800931c:	f89a 3000 	ldrb.w	r3, [sl]
 8009320:	2b2a      	cmp	r3, #42	; 0x2a
 8009322:	d015      	beq.n	8009350 <_vfiprintf_r+0x13c>
 8009324:	9a07      	ldr	r2, [sp, #28]
 8009326:	4654      	mov	r4, sl
 8009328:	2000      	movs	r0, #0
 800932a:	f04f 0c0a 	mov.w	ip, #10
 800932e:	4621      	mov	r1, r4
 8009330:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009334:	3b30      	subs	r3, #48	; 0x30
 8009336:	2b09      	cmp	r3, #9
 8009338:	d94e      	bls.n	80093d8 <_vfiprintf_r+0x1c4>
 800933a:	b1b0      	cbz	r0, 800936a <_vfiprintf_r+0x156>
 800933c:	9207      	str	r2, [sp, #28]
 800933e:	e014      	b.n	800936a <_vfiprintf_r+0x156>
 8009340:	eba0 0308 	sub.w	r3, r0, r8
 8009344:	fa09 f303 	lsl.w	r3, r9, r3
 8009348:	4313      	orrs	r3, r2
 800934a:	9304      	str	r3, [sp, #16]
 800934c:	46a2      	mov	sl, r4
 800934e:	e7d2      	b.n	80092f6 <_vfiprintf_r+0xe2>
 8009350:	9b03      	ldr	r3, [sp, #12]
 8009352:	1d19      	adds	r1, r3, #4
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	9103      	str	r1, [sp, #12]
 8009358:	2b00      	cmp	r3, #0
 800935a:	bfbb      	ittet	lt
 800935c:	425b      	neglt	r3, r3
 800935e:	f042 0202 	orrlt.w	r2, r2, #2
 8009362:	9307      	strge	r3, [sp, #28]
 8009364:	9307      	strlt	r3, [sp, #28]
 8009366:	bfb8      	it	lt
 8009368:	9204      	strlt	r2, [sp, #16]
 800936a:	7823      	ldrb	r3, [r4, #0]
 800936c:	2b2e      	cmp	r3, #46	; 0x2e
 800936e:	d10c      	bne.n	800938a <_vfiprintf_r+0x176>
 8009370:	7863      	ldrb	r3, [r4, #1]
 8009372:	2b2a      	cmp	r3, #42	; 0x2a
 8009374:	d135      	bne.n	80093e2 <_vfiprintf_r+0x1ce>
 8009376:	9b03      	ldr	r3, [sp, #12]
 8009378:	1d1a      	adds	r2, r3, #4
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	9203      	str	r2, [sp, #12]
 800937e:	2b00      	cmp	r3, #0
 8009380:	bfb8      	it	lt
 8009382:	f04f 33ff 	movlt.w	r3, #4294967295
 8009386:	3402      	adds	r4, #2
 8009388:	9305      	str	r3, [sp, #20]
 800938a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009470 <_vfiprintf_r+0x25c>
 800938e:	7821      	ldrb	r1, [r4, #0]
 8009390:	2203      	movs	r2, #3
 8009392:	4650      	mov	r0, sl
 8009394:	f7f6 ff1c 	bl	80001d0 <memchr>
 8009398:	b140      	cbz	r0, 80093ac <_vfiprintf_r+0x198>
 800939a:	2340      	movs	r3, #64	; 0x40
 800939c:	eba0 000a 	sub.w	r0, r0, sl
 80093a0:	fa03 f000 	lsl.w	r0, r3, r0
 80093a4:	9b04      	ldr	r3, [sp, #16]
 80093a6:	4303      	orrs	r3, r0
 80093a8:	3401      	adds	r4, #1
 80093aa:	9304      	str	r3, [sp, #16]
 80093ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80093b0:	482c      	ldr	r0, [pc, #176]	; (8009464 <_vfiprintf_r+0x250>)
 80093b2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80093b6:	2206      	movs	r2, #6
 80093b8:	f7f6 ff0a 	bl	80001d0 <memchr>
 80093bc:	2800      	cmp	r0, #0
 80093be:	d03f      	beq.n	8009440 <_vfiprintf_r+0x22c>
 80093c0:	4b29      	ldr	r3, [pc, #164]	; (8009468 <_vfiprintf_r+0x254>)
 80093c2:	bb1b      	cbnz	r3, 800940c <_vfiprintf_r+0x1f8>
 80093c4:	9b03      	ldr	r3, [sp, #12]
 80093c6:	3307      	adds	r3, #7
 80093c8:	f023 0307 	bic.w	r3, r3, #7
 80093cc:	3308      	adds	r3, #8
 80093ce:	9303      	str	r3, [sp, #12]
 80093d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80093d2:	443b      	add	r3, r7
 80093d4:	9309      	str	r3, [sp, #36]	; 0x24
 80093d6:	e767      	b.n	80092a8 <_vfiprintf_r+0x94>
 80093d8:	fb0c 3202 	mla	r2, ip, r2, r3
 80093dc:	460c      	mov	r4, r1
 80093de:	2001      	movs	r0, #1
 80093e0:	e7a5      	b.n	800932e <_vfiprintf_r+0x11a>
 80093e2:	2300      	movs	r3, #0
 80093e4:	3401      	adds	r4, #1
 80093e6:	9305      	str	r3, [sp, #20]
 80093e8:	4619      	mov	r1, r3
 80093ea:	f04f 0c0a 	mov.w	ip, #10
 80093ee:	4620      	mov	r0, r4
 80093f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80093f4:	3a30      	subs	r2, #48	; 0x30
 80093f6:	2a09      	cmp	r2, #9
 80093f8:	d903      	bls.n	8009402 <_vfiprintf_r+0x1ee>
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d0c5      	beq.n	800938a <_vfiprintf_r+0x176>
 80093fe:	9105      	str	r1, [sp, #20]
 8009400:	e7c3      	b.n	800938a <_vfiprintf_r+0x176>
 8009402:	fb0c 2101 	mla	r1, ip, r1, r2
 8009406:	4604      	mov	r4, r0
 8009408:	2301      	movs	r3, #1
 800940a:	e7f0      	b.n	80093ee <_vfiprintf_r+0x1da>
 800940c:	ab03      	add	r3, sp, #12
 800940e:	9300      	str	r3, [sp, #0]
 8009410:	462a      	mov	r2, r5
 8009412:	4b16      	ldr	r3, [pc, #88]	; (800946c <_vfiprintf_r+0x258>)
 8009414:	a904      	add	r1, sp, #16
 8009416:	4630      	mov	r0, r6
 8009418:	f3af 8000 	nop.w
 800941c:	4607      	mov	r7, r0
 800941e:	1c78      	adds	r0, r7, #1
 8009420:	d1d6      	bne.n	80093d0 <_vfiprintf_r+0x1bc>
 8009422:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009424:	07d9      	lsls	r1, r3, #31
 8009426:	d405      	bmi.n	8009434 <_vfiprintf_r+0x220>
 8009428:	89ab      	ldrh	r3, [r5, #12]
 800942a:	059a      	lsls	r2, r3, #22
 800942c:	d402      	bmi.n	8009434 <_vfiprintf_r+0x220>
 800942e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009430:	f7ff fc5b 	bl	8008cea <__retarget_lock_release_recursive>
 8009434:	89ab      	ldrh	r3, [r5, #12]
 8009436:	065b      	lsls	r3, r3, #25
 8009438:	f53f af12 	bmi.w	8009260 <_vfiprintf_r+0x4c>
 800943c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800943e:	e711      	b.n	8009264 <_vfiprintf_r+0x50>
 8009440:	ab03      	add	r3, sp, #12
 8009442:	9300      	str	r3, [sp, #0]
 8009444:	462a      	mov	r2, r5
 8009446:	4b09      	ldr	r3, [pc, #36]	; (800946c <_vfiprintf_r+0x258>)
 8009448:	a904      	add	r1, sp, #16
 800944a:	4630      	mov	r0, r6
 800944c:	f000 f880 	bl	8009550 <_printf_i>
 8009450:	e7e4      	b.n	800941c <_vfiprintf_r+0x208>
 8009452:	bf00      	nop
 8009454:	08009dd8 	.word	0x08009dd8
 8009458:	08009df8 	.word	0x08009df8
 800945c:	08009db8 	.word	0x08009db8
 8009460:	08009e18 	.word	0x08009e18
 8009464:	08009e22 	.word	0x08009e22
 8009468:	00000000 	.word	0x00000000
 800946c:	080091ef 	.word	0x080091ef
 8009470:	08009e1e 	.word	0x08009e1e

08009474 <_printf_common>:
 8009474:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009478:	4616      	mov	r6, r2
 800947a:	4699      	mov	r9, r3
 800947c:	688a      	ldr	r2, [r1, #8]
 800947e:	690b      	ldr	r3, [r1, #16]
 8009480:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009484:	4293      	cmp	r3, r2
 8009486:	bfb8      	it	lt
 8009488:	4613      	movlt	r3, r2
 800948a:	6033      	str	r3, [r6, #0]
 800948c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009490:	4607      	mov	r7, r0
 8009492:	460c      	mov	r4, r1
 8009494:	b10a      	cbz	r2, 800949a <_printf_common+0x26>
 8009496:	3301      	adds	r3, #1
 8009498:	6033      	str	r3, [r6, #0]
 800949a:	6823      	ldr	r3, [r4, #0]
 800949c:	0699      	lsls	r1, r3, #26
 800949e:	bf42      	ittt	mi
 80094a0:	6833      	ldrmi	r3, [r6, #0]
 80094a2:	3302      	addmi	r3, #2
 80094a4:	6033      	strmi	r3, [r6, #0]
 80094a6:	6825      	ldr	r5, [r4, #0]
 80094a8:	f015 0506 	ands.w	r5, r5, #6
 80094ac:	d106      	bne.n	80094bc <_printf_common+0x48>
 80094ae:	f104 0a19 	add.w	sl, r4, #25
 80094b2:	68e3      	ldr	r3, [r4, #12]
 80094b4:	6832      	ldr	r2, [r6, #0]
 80094b6:	1a9b      	subs	r3, r3, r2
 80094b8:	42ab      	cmp	r3, r5
 80094ba:	dc26      	bgt.n	800950a <_printf_common+0x96>
 80094bc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80094c0:	1e13      	subs	r3, r2, #0
 80094c2:	6822      	ldr	r2, [r4, #0]
 80094c4:	bf18      	it	ne
 80094c6:	2301      	movne	r3, #1
 80094c8:	0692      	lsls	r2, r2, #26
 80094ca:	d42b      	bmi.n	8009524 <_printf_common+0xb0>
 80094cc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80094d0:	4649      	mov	r1, r9
 80094d2:	4638      	mov	r0, r7
 80094d4:	47c0      	blx	r8
 80094d6:	3001      	adds	r0, #1
 80094d8:	d01e      	beq.n	8009518 <_printf_common+0xa4>
 80094da:	6823      	ldr	r3, [r4, #0]
 80094dc:	68e5      	ldr	r5, [r4, #12]
 80094de:	6832      	ldr	r2, [r6, #0]
 80094e0:	f003 0306 	and.w	r3, r3, #6
 80094e4:	2b04      	cmp	r3, #4
 80094e6:	bf08      	it	eq
 80094e8:	1aad      	subeq	r5, r5, r2
 80094ea:	68a3      	ldr	r3, [r4, #8]
 80094ec:	6922      	ldr	r2, [r4, #16]
 80094ee:	bf0c      	ite	eq
 80094f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80094f4:	2500      	movne	r5, #0
 80094f6:	4293      	cmp	r3, r2
 80094f8:	bfc4      	itt	gt
 80094fa:	1a9b      	subgt	r3, r3, r2
 80094fc:	18ed      	addgt	r5, r5, r3
 80094fe:	2600      	movs	r6, #0
 8009500:	341a      	adds	r4, #26
 8009502:	42b5      	cmp	r5, r6
 8009504:	d11a      	bne.n	800953c <_printf_common+0xc8>
 8009506:	2000      	movs	r0, #0
 8009508:	e008      	b.n	800951c <_printf_common+0xa8>
 800950a:	2301      	movs	r3, #1
 800950c:	4652      	mov	r2, sl
 800950e:	4649      	mov	r1, r9
 8009510:	4638      	mov	r0, r7
 8009512:	47c0      	blx	r8
 8009514:	3001      	adds	r0, #1
 8009516:	d103      	bne.n	8009520 <_printf_common+0xac>
 8009518:	f04f 30ff 	mov.w	r0, #4294967295
 800951c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009520:	3501      	adds	r5, #1
 8009522:	e7c6      	b.n	80094b2 <_printf_common+0x3e>
 8009524:	18e1      	adds	r1, r4, r3
 8009526:	1c5a      	adds	r2, r3, #1
 8009528:	2030      	movs	r0, #48	; 0x30
 800952a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800952e:	4422      	add	r2, r4
 8009530:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009534:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009538:	3302      	adds	r3, #2
 800953a:	e7c7      	b.n	80094cc <_printf_common+0x58>
 800953c:	2301      	movs	r3, #1
 800953e:	4622      	mov	r2, r4
 8009540:	4649      	mov	r1, r9
 8009542:	4638      	mov	r0, r7
 8009544:	47c0      	blx	r8
 8009546:	3001      	adds	r0, #1
 8009548:	d0e6      	beq.n	8009518 <_printf_common+0xa4>
 800954a:	3601      	adds	r6, #1
 800954c:	e7d9      	b.n	8009502 <_printf_common+0x8e>
	...

08009550 <_printf_i>:
 8009550:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009554:	460c      	mov	r4, r1
 8009556:	4691      	mov	r9, r2
 8009558:	7e27      	ldrb	r7, [r4, #24]
 800955a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800955c:	2f78      	cmp	r7, #120	; 0x78
 800955e:	4680      	mov	r8, r0
 8009560:	469a      	mov	sl, r3
 8009562:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009566:	d807      	bhi.n	8009578 <_printf_i+0x28>
 8009568:	2f62      	cmp	r7, #98	; 0x62
 800956a:	d80a      	bhi.n	8009582 <_printf_i+0x32>
 800956c:	2f00      	cmp	r7, #0
 800956e:	f000 80d8 	beq.w	8009722 <_printf_i+0x1d2>
 8009572:	2f58      	cmp	r7, #88	; 0x58
 8009574:	f000 80a3 	beq.w	80096be <_printf_i+0x16e>
 8009578:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800957c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009580:	e03a      	b.n	80095f8 <_printf_i+0xa8>
 8009582:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009586:	2b15      	cmp	r3, #21
 8009588:	d8f6      	bhi.n	8009578 <_printf_i+0x28>
 800958a:	a001      	add	r0, pc, #4	; (adr r0, 8009590 <_printf_i+0x40>)
 800958c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8009590:	080095e9 	.word	0x080095e9
 8009594:	080095fd 	.word	0x080095fd
 8009598:	08009579 	.word	0x08009579
 800959c:	08009579 	.word	0x08009579
 80095a0:	08009579 	.word	0x08009579
 80095a4:	08009579 	.word	0x08009579
 80095a8:	080095fd 	.word	0x080095fd
 80095ac:	08009579 	.word	0x08009579
 80095b0:	08009579 	.word	0x08009579
 80095b4:	08009579 	.word	0x08009579
 80095b8:	08009579 	.word	0x08009579
 80095bc:	08009709 	.word	0x08009709
 80095c0:	0800962d 	.word	0x0800962d
 80095c4:	080096eb 	.word	0x080096eb
 80095c8:	08009579 	.word	0x08009579
 80095cc:	08009579 	.word	0x08009579
 80095d0:	0800972b 	.word	0x0800972b
 80095d4:	08009579 	.word	0x08009579
 80095d8:	0800962d 	.word	0x0800962d
 80095dc:	08009579 	.word	0x08009579
 80095e0:	08009579 	.word	0x08009579
 80095e4:	080096f3 	.word	0x080096f3
 80095e8:	680b      	ldr	r3, [r1, #0]
 80095ea:	1d1a      	adds	r2, r3, #4
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	600a      	str	r2, [r1, #0]
 80095f0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80095f4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80095f8:	2301      	movs	r3, #1
 80095fa:	e0a3      	b.n	8009744 <_printf_i+0x1f4>
 80095fc:	6825      	ldr	r5, [r4, #0]
 80095fe:	6808      	ldr	r0, [r1, #0]
 8009600:	062e      	lsls	r6, r5, #24
 8009602:	f100 0304 	add.w	r3, r0, #4
 8009606:	d50a      	bpl.n	800961e <_printf_i+0xce>
 8009608:	6805      	ldr	r5, [r0, #0]
 800960a:	600b      	str	r3, [r1, #0]
 800960c:	2d00      	cmp	r5, #0
 800960e:	da03      	bge.n	8009618 <_printf_i+0xc8>
 8009610:	232d      	movs	r3, #45	; 0x2d
 8009612:	426d      	negs	r5, r5
 8009614:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009618:	485e      	ldr	r0, [pc, #376]	; (8009794 <_printf_i+0x244>)
 800961a:	230a      	movs	r3, #10
 800961c:	e019      	b.n	8009652 <_printf_i+0x102>
 800961e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8009622:	6805      	ldr	r5, [r0, #0]
 8009624:	600b      	str	r3, [r1, #0]
 8009626:	bf18      	it	ne
 8009628:	b22d      	sxthne	r5, r5
 800962a:	e7ef      	b.n	800960c <_printf_i+0xbc>
 800962c:	680b      	ldr	r3, [r1, #0]
 800962e:	6825      	ldr	r5, [r4, #0]
 8009630:	1d18      	adds	r0, r3, #4
 8009632:	6008      	str	r0, [r1, #0]
 8009634:	0628      	lsls	r0, r5, #24
 8009636:	d501      	bpl.n	800963c <_printf_i+0xec>
 8009638:	681d      	ldr	r5, [r3, #0]
 800963a:	e002      	b.n	8009642 <_printf_i+0xf2>
 800963c:	0669      	lsls	r1, r5, #25
 800963e:	d5fb      	bpl.n	8009638 <_printf_i+0xe8>
 8009640:	881d      	ldrh	r5, [r3, #0]
 8009642:	4854      	ldr	r0, [pc, #336]	; (8009794 <_printf_i+0x244>)
 8009644:	2f6f      	cmp	r7, #111	; 0x6f
 8009646:	bf0c      	ite	eq
 8009648:	2308      	moveq	r3, #8
 800964a:	230a      	movne	r3, #10
 800964c:	2100      	movs	r1, #0
 800964e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009652:	6866      	ldr	r6, [r4, #4]
 8009654:	60a6      	str	r6, [r4, #8]
 8009656:	2e00      	cmp	r6, #0
 8009658:	bfa2      	ittt	ge
 800965a:	6821      	ldrge	r1, [r4, #0]
 800965c:	f021 0104 	bicge.w	r1, r1, #4
 8009660:	6021      	strge	r1, [r4, #0]
 8009662:	b90d      	cbnz	r5, 8009668 <_printf_i+0x118>
 8009664:	2e00      	cmp	r6, #0
 8009666:	d04d      	beq.n	8009704 <_printf_i+0x1b4>
 8009668:	4616      	mov	r6, r2
 800966a:	fbb5 f1f3 	udiv	r1, r5, r3
 800966e:	fb03 5711 	mls	r7, r3, r1, r5
 8009672:	5dc7      	ldrb	r7, [r0, r7]
 8009674:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009678:	462f      	mov	r7, r5
 800967a:	42bb      	cmp	r3, r7
 800967c:	460d      	mov	r5, r1
 800967e:	d9f4      	bls.n	800966a <_printf_i+0x11a>
 8009680:	2b08      	cmp	r3, #8
 8009682:	d10b      	bne.n	800969c <_printf_i+0x14c>
 8009684:	6823      	ldr	r3, [r4, #0]
 8009686:	07df      	lsls	r7, r3, #31
 8009688:	d508      	bpl.n	800969c <_printf_i+0x14c>
 800968a:	6923      	ldr	r3, [r4, #16]
 800968c:	6861      	ldr	r1, [r4, #4]
 800968e:	4299      	cmp	r1, r3
 8009690:	bfde      	ittt	le
 8009692:	2330      	movle	r3, #48	; 0x30
 8009694:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009698:	f106 36ff 	addle.w	r6, r6, #4294967295
 800969c:	1b92      	subs	r2, r2, r6
 800969e:	6122      	str	r2, [r4, #16]
 80096a0:	f8cd a000 	str.w	sl, [sp]
 80096a4:	464b      	mov	r3, r9
 80096a6:	aa03      	add	r2, sp, #12
 80096a8:	4621      	mov	r1, r4
 80096aa:	4640      	mov	r0, r8
 80096ac:	f7ff fee2 	bl	8009474 <_printf_common>
 80096b0:	3001      	adds	r0, #1
 80096b2:	d14c      	bne.n	800974e <_printf_i+0x1fe>
 80096b4:	f04f 30ff 	mov.w	r0, #4294967295
 80096b8:	b004      	add	sp, #16
 80096ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80096be:	4835      	ldr	r0, [pc, #212]	; (8009794 <_printf_i+0x244>)
 80096c0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80096c4:	6823      	ldr	r3, [r4, #0]
 80096c6:	680e      	ldr	r6, [r1, #0]
 80096c8:	061f      	lsls	r7, r3, #24
 80096ca:	f856 5b04 	ldr.w	r5, [r6], #4
 80096ce:	600e      	str	r6, [r1, #0]
 80096d0:	d514      	bpl.n	80096fc <_printf_i+0x1ac>
 80096d2:	07d9      	lsls	r1, r3, #31
 80096d4:	bf44      	itt	mi
 80096d6:	f043 0320 	orrmi.w	r3, r3, #32
 80096da:	6023      	strmi	r3, [r4, #0]
 80096dc:	b91d      	cbnz	r5, 80096e6 <_printf_i+0x196>
 80096de:	6823      	ldr	r3, [r4, #0]
 80096e0:	f023 0320 	bic.w	r3, r3, #32
 80096e4:	6023      	str	r3, [r4, #0]
 80096e6:	2310      	movs	r3, #16
 80096e8:	e7b0      	b.n	800964c <_printf_i+0xfc>
 80096ea:	6823      	ldr	r3, [r4, #0]
 80096ec:	f043 0320 	orr.w	r3, r3, #32
 80096f0:	6023      	str	r3, [r4, #0]
 80096f2:	2378      	movs	r3, #120	; 0x78
 80096f4:	4828      	ldr	r0, [pc, #160]	; (8009798 <_printf_i+0x248>)
 80096f6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80096fa:	e7e3      	b.n	80096c4 <_printf_i+0x174>
 80096fc:	065e      	lsls	r6, r3, #25
 80096fe:	bf48      	it	mi
 8009700:	b2ad      	uxthmi	r5, r5
 8009702:	e7e6      	b.n	80096d2 <_printf_i+0x182>
 8009704:	4616      	mov	r6, r2
 8009706:	e7bb      	b.n	8009680 <_printf_i+0x130>
 8009708:	680b      	ldr	r3, [r1, #0]
 800970a:	6826      	ldr	r6, [r4, #0]
 800970c:	6960      	ldr	r0, [r4, #20]
 800970e:	1d1d      	adds	r5, r3, #4
 8009710:	600d      	str	r5, [r1, #0]
 8009712:	0635      	lsls	r5, r6, #24
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	d501      	bpl.n	800971c <_printf_i+0x1cc>
 8009718:	6018      	str	r0, [r3, #0]
 800971a:	e002      	b.n	8009722 <_printf_i+0x1d2>
 800971c:	0671      	lsls	r1, r6, #25
 800971e:	d5fb      	bpl.n	8009718 <_printf_i+0x1c8>
 8009720:	8018      	strh	r0, [r3, #0]
 8009722:	2300      	movs	r3, #0
 8009724:	6123      	str	r3, [r4, #16]
 8009726:	4616      	mov	r6, r2
 8009728:	e7ba      	b.n	80096a0 <_printf_i+0x150>
 800972a:	680b      	ldr	r3, [r1, #0]
 800972c:	1d1a      	adds	r2, r3, #4
 800972e:	600a      	str	r2, [r1, #0]
 8009730:	681e      	ldr	r6, [r3, #0]
 8009732:	6862      	ldr	r2, [r4, #4]
 8009734:	2100      	movs	r1, #0
 8009736:	4630      	mov	r0, r6
 8009738:	f7f6 fd4a 	bl	80001d0 <memchr>
 800973c:	b108      	cbz	r0, 8009742 <_printf_i+0x1f2>
 800973e:	1b80      	subs	r0, r0, r6
 8009740:	6060      	str	r0, [r4, #4]
 8009742:	6863      	ldr	r3, [r4, #4]
 8009744:	6123      	str	r3, [r4, #16]
 8009746:	2300      	movs	r3, #0
 8009748:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800974c:	e7a8      	b.n	80096a0 <_printf_i+0x150>
 800974e:	6923      	ldr	r3, [r4, #16]
 8009750:	4632      	mov	r2, r6
 8009752:	4649      	mov	r1, r9
 8009754:	4640      	mov	r0, r8
 8009756:	47d0      	blx	sl
 8009758:	3001      	adds	r0, #1
 800975a:	d0ab      	beq.n	80096b4 <_printf_i+0x164>
 800975c:	6823      	ldr	r3, [r4, #0]
 800975e:	079b      	lsls	r3, r3, #30
 8009760:	d413      	bmi.n	800978a <_printf_i+0x23a>
 8009762:	68e0      	ldr	r0, [r4, #12]
 8009764:	9b03      	ldr	r3, [sp, #12]
 8009766:	4298      	cmp	r0, r3
 8009768:	bfb8      	it	lt
 800976a:	4618      	movlt	r0, r3
 800976c:	e7a4      	b.n	80096b8 <_printf_i+0x168>
 800976e:	2301      	movs	r3, #1
 8009770:	4632      	mov	r2, r6
 8009772:	4649      	mov	r1, r9
 8009774:	4640      	mov	r0, r8
 8009776:	47d0      	blx	sl
 8009778:	3001      	adds	r0, #1
 800977a:	d09b      	beq.n	80096b4 <_printf_i+0x164>
 800977c:	3501      	adds	r5, #1
 800977e:	68e3      	ldr	r3, [r4, #12]
 8009780:	9903      	ldr	r1, [sp, #12]
 8009782:	1a5b      	subs	r3, r3, r1
 8009784:	42ab      	cmp	r3, r5
 8009786:	dcf2      	bgt.n	800976e <_printf_i+0x21e>
 8009788:	e7eb      	b.n	8009762 <_printf_i+0x212>
 800978a:	2500      	movs	r5, #0
 800978c:	f104 0619 	add.w	r6, r4, #25
 8009790:	e7f5      	b.n	800977e <_printf_i+0x22e>
 8009792:	bf00      	nop
 8009794:	08009e29 	.word	0x08009e29
 8009798:	08009e3a 	.word	0x08009e3a

0800979c <_sbrk_r>:
 800979c:	b538      	push	{r3, r4, r5, lr}
 800979e:	4d06      	ldr	r5, [pc, #24]	; (80097b8 <_sbrk_r+0x1c>)
 80097a0:	2300      	movs	r3, #0
 80097a2:	4604      	mov	r4, r0
 80097a4:	4608      	mov	r0, r1
 80097a6:	602b      	str	r3, [r5, #0]
 80097a8:	f7f8 f9ec 	bl	8001b84 <_sbrk>
 80097ac:	1c43      	adds	r3, r0, #1
 80097ae:	d102      	bne.n	80097b6 <_sbrk_r+0x1a>
 80097b0:	682b      	ldr	r3, [r5, #0]
 80097b2:	b103      	cbz	r3, 80097b6 <_sbrk_r+0x1a>
 80097b4:	6023      	str	r3, [r4, #0]
 80097b6:	bd38      	pop	{r3, r4, r5, pc}
 80097b8:	20004c2c 	.word	0x20004c2c

080097bc <__sread>:
 80097bc:	b510      	push	{r4, lr}
 80097be:	460c      	mov	r4, r1
 80097c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80097c4:	f000 f8e0 	bl	8009988 <_read_r>
 80097c8:	2800      	cmp	r0, #0
 80097ca:	bfab      	itete	ge
 80097cc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80097ce:	89a3      	ldrhlt	r3, [r4, #12]
 80097d0:	181b      	addge	r3, r3, r0
 80097d2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80097d6:	bfac      	ite	ge
 80097d8:	6563      	strge	r3, [r4, #84]	; 0x54
 80097da:	81a3      	strhlt	r3, [r4, #12]
 80097dc:	bd10      	pop	{r4, pc}

080097de <__swrite>:
 80097de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80097e2:	461f      	mov	r7, r3
 80097e4:	898b      	ldrh	r3, [r1, #12]
 80097e6:	05db      	lsls	r3, r3, #23
 80097e8:	4605      	mov	r5, r0
 80097ea:	460c      	mov	r4, r1
 80097ec:	4616      	mov	r6, r2
 80097ee:	d505      	bpl.n	80097fc <__swrite+0x1e>
 80097f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80097f4:	2302      	movs	r3, #2
 80097f6:	2200      	movs	r2, #0
 80097f8:	f000 f868 	bl	80098cc <_lseek_r>
 80097fc:	89a3      	ldrh	r3, [r4, #12]
 80097fe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009802:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009806:	81a3      	strh	r3, [r4, #12]
 8009808:	4632      	mov	r2, r6
 800980a:	463b      	mov	r3, r7
 800980c:	4628      	mov	r0, r5
 800980e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009812:	f000 b817 	b.w	8009844 <_write_r>

08009816 <__sseek>:
 8009816:	b510      	push	{r4, lr}
 8009818:	460c      	mov	r4, r1
 800981a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800981e:	f000 f855 	bl	80098cc <_lseek_r>
 8009822:	1c43      	adds	r3, r0, #1
 8009824:	89a3      	ldrh	r3, [r4, #12]
 8009826:	bf15      	itete	ne
 8009828:	6560      	strne	r0, [r4, #84]	; 0x54
 800982a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800982e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009832:	81a3      	strheq	r3, [r4, #12]
 8009834:	bf18      	it	ne
 8009836:	81a3      	strhne	r3, [r4, #12]
 8009838:	bd10      	pop	{r4, pc}

0800983a <__sclose>:
 800983a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800983e:	f000 b813 	b.w	8009868 <_close_r>
	...

08009844 <_write_r>:
 8009844:	b538      	push	{r3, r4, r5, lr}
 8009846:	4d07      	ldr	r5, [pc, #28]	; (8009864 <_write_r+0x20>)
 8009848:	4604      	mov	r4, r0
 800984a:	4608      	mov	r0, r1
 800984c:	4611      	mov	r1, r2
 800984e:	2200      	movs	r2, #0
 8009850:	602a      	str	r2, [r5, #0]
 8009852:	461a      	mov	r2, r3
 8009854:	f7f8 f945 	bl	8001ae2 <_write>
 8009858:	1c43      	adds	r3, r0, #1
 800985a:	d102      	bne.n	8009862 <_write_r+0x1e>
 800985c:	682b      	ldr	r3, [r5, #0]
 800985e:	b103      	cbz	r3, 8009862 <_write_r+0x1e>
 8009860:	6023      	str	r3, [r4, #0]
 8009862:	bd38      	pop	{r3, r4, r5, pc}
 8009864:	20004c2c 	.word	0x20004c2c

08009868 <_close_r>:
 8009868:	b538      	push	{r3, r4, r5, lr}
 800986a:	4d06      	ldr	r5, [pc, #24]	; (8009884 <_close_r+0x1c>)
 800986c:	2300      	movs	r3, #0
 800986e:	4604      	mov	r4, r0
 8009870:	4608      	mov	r0, r1
 8009872:	602b      	str	r3, [r5, #0]
 8009874:	f7f8 f951 	bl	8001b1a <_close>
 8009878:	1c43      	adds	r3, r0, #1
 800987a:	d102      	bne.n	8009882 <_close_r+0x1a>
 800987c:	682b      	ldr	r3, [r5, #0]
 800987e:	b103      	cbz	r3, 8009882 <_close_r+0x1a>
 8009880:	6023      	str	r3, [r4, #0]
 8009882:	bd38      	pop	{r3, r4, r5, pc}
 8009884:	20004c2c 	.word	0x20004c2c

08009888 <_fstat_r>:
 8009888:	b538      	push	{r3, r4, r5, lr}
 800988a:	4d07      	ldr	r5, [pc, #28]	; (80098a8 <_fstat_r+0x20>)
 800988c:	2300      	movs	r3, #0
 800988e:	4604      	mov	r4, r0
 8009890:	4608      	mov	r0, r1
 8009892:	4611      	mov	r1, r2
 8009894:	602b      	str	r3, [r5, #0]
 8009896:	f7f8 f94c 	bl	8001b32 <_fstat>
 800989a:	1c43      	adds	r3, r0, #1
 800989c:	d102      	bne.n	80098a4 <_fstat_r+0x1c>
 800989e:	682b      	ldr	r3, [r5, #0]
 80098a0:	b103      	cbz	r3, 80098a4 <_fstat_r+0x1c>
 80098a2:	6023      	str	r3, [r4, #0]
 80098a4:	bd38      	pop	{r3, r4, r5, pc}
 80098a6:	bf00      	nop
 80098a8:	20004c2c 	.word	0x20004c2c

080098ac <_isatty_r>:
 80098ac:	b538      	push	{r3, r4, r5, lr}
 80098ae:	4d06      	ldr	r5, [pc, #24]	; (80098c8 <_isatty_r+0x1c>)
 80098b0:	2300      	movs	r3, #0
 80098b2:	4604      	mov	r4, r0
 80098b4:	4608      	mov	r0, r1
 80098b6:	602b      	str	r3, [r5, #0]
 80098b8:	f7f8 f94b 	bl	8001b52 <_isatty>
 80098bc:	1c43      	adds	r3, r0, #1
 80098be:	d102      	bne.n	80098c6 <_isatty_r+0x1a>
 80098c0:	682b      	ldr	r3, [r5, #0]
 80098c2:	b103      	cbz	r3, 80098c6 <_isatty_r+0x1a>
 80098c4:	6023      	str	r3, [r4, #0]
 80098c6:	bd38      	pop	{r3, r4, r5, pc}
 80098c8:	20004c2c 	.word	0x20004c2c

080098cc <_lseek_r>:
 80098cc:	b538      	push	{r3, r4, r5, lr}
 80098ce:	4d07      	ldr	r5, [pc, #28]	; (80098ec <_lseek_r+0x20>)
 80098d0:	4604      	mov	r4, r0
 80098d2:	4608      	mov	r0, r1
 80098d4:	4611      	mov	r1, r2
 80098d6:	2200      	movs	r2, #0
 80098d8:	602a      	str	r2, [r5, #0]
 80098da:	461a      	mov	r2, r3
 80098dc:	f7f8 f944 	bl	8001b68 <_lseek>
 80098e0:	1c43      	adds	r3, r0, #1
 80098e2:	d102      	bne.n	80098ea <_lseek_r+0x1e>
 80098e4:	682b      	ldr	r3, [r5, #0]
 80098e6:	b103      	cbz	r3, 80098ea <_lseek_r+0x1e>
 80098e8:	6023      	str	r3, [r4, #0]
 80098ea:	bd38      	pop	{r3, r4, r5, pc}
 80098ec:	20004c2c 	.word	0x20004c2c

080098f0 <memmove>:
 80098f0:	4288      	cmp	r0, r1
 80098f2:	b510      	push	{r4, lr}
 80098f4:	eb01 0402 	add.w	r4, r1, r2
 80098f8:	d902      	bls.n	8009900 <memmove+0x10>
 80098fa:	4284      	cmp	r4, r0
 80098fc:	4623      	mov	r3, r4
 80098fe:	d807      	bhi.n	8009910 <memmove+0x20>
 8009900:	1e43      	subs	r3, r0, #1
 8009902:	42a1      	cmp	r1, r4
 8009904:	d008      	beq.n	8009918 <memmove+0x28>
 8009906:	f811 2b01 	ldrb.w	r2, [r1], #1
 800990a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800990e:	e7f8      	b.n	8009902 <memmove+0x12>
 8009910:	4402      	add	r2, r0
 8009912:	4601      	mov	r1, r0
 8009914:	428a      	cmp	r2, r1
 8009916:	d100      	bne.n	800991a <memmove+0x2a>
 8009918:	bd10      	pop	{r4, pc}
 800991a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800991e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009922:	e7f7      	b.n	8009914 <memmove+0x24>

08009924 <__malloc_lock>:
 8009924:	4801      	ldr	r0, [pc, #4]	; (800992c <__malloc_lock+0x8>)
 8009926:	f7ff b9df 	b.w	8008ce8 <__retarget_lock_acquire_recursive>
 800992a:	bf00      	nop
 800992c:	20004c24 	.word	0x20004c24

08009930 <__malloc_unlock>:
 8009930:	4801      	ldr	r0, [pc, #4]	; (8009938 <__malloc_unlock+0x8>)
 8009932:	f7ff b9da 	b.w	8008cea <__retarget_lock_release_recursive>
 8009936:	bf00      	nop
 8009938:	20004c24 	.word	0x20004c24

0800993c <_realloc_r>:
 800993c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800993e:	4607      	mov	r7, r0
 8009940:	4614      	mov	r4, r2
 8009942:	460e      	mov	r6, r1
 8009944:	b921      	cbnz	r1, 8009950 <_realloc_r+0x14>
 8009946:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800994a:	4611      	mov	r1, r2
 800994c:	f7ff ba82 	b.w	8008e54 <_malloc_r>
 8009950:	b922      	cbnz	r2, 800995c <_realloc_r+0x20>
 8009952:	f7ff fa2f 	bl	8008db4 <_free_r>
 8009956:	4625      	mov	r5, r4
 8009958:	4628      	mov	r0, r5
 800995a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800995c:	f000 f826 	bl	80099ac <_malloc_usable_size_r>
 8009960:	42a0      	cmp	r0, r4
 8009962:	d20f      	bcs.n	8009984 <_realloc_r+0x48>
 8009964:	4621      	mov	r1, r4
 8009966:	4638      	mov	r0, r7
 8009968:	f7ff fa74 	bl	8008e54 <_malloc_r>
 800996c:	4605      	mov	r5, r0
 800996e:	2800      	cmp	r0, #0
 8009970:	d0f2      	beq.n	8009958 <_realloc_r+0x1c>
 8009972:	4631      	mov	r1, r6
 8009974:	4622      	mov	r2, r4
 8009976:	f7fe fe7b 	bl	8008670 <memcpy>
 800997a:	4631      	mov	r1, r6
 800997c:	4638      	mov	r0, r7
 800997e:	f7ff fa19 	bl	8008db4 <_free_r>
 8009982:	e7e9      	b.n	8009958 <_realloc_r+0x1c>
 8009984:	4635      	mov	r5, r6
 8009986:	e7e7      	b.n	8009958 <_realloc_r+0x1c>

08009988 <_read_r>:
 8009988:	b538      	push	{r3, r4, r5, lr}
 800998a:	4d07      	ldr	r5, [pc, #28]	; (80099a8 <_read_r+0x20>)
 800998c:	4604      	mov	r4, r0
 800998e:	4608      	mov	r0, r1
 8009990:	4611      	mov	r1, r2
 8009992:	2200      	movs	r2, #0
 8009994:	602a      	str	r2, [r5, #0]
 8009996:	461a      	mov	r2, r3
 8009998:	f7f8 f886 	bl	8001aa8 <_read>
 800999c:	1c43      	adds	r3, r0, #1
 800999e:	d102      	bne.n	80099a6 <_read_r+0x1e>
 80099a0:	682b      	ldr	r3, [r5, #0]
 80099a2:	b103      	cbz	r3, 80099a6 <_read_r+0x1e>
 80099a4:	6023      	str	r3, [r4, #0]
 80099a6:	bd38      	pop	{r3, r4, r5, pc}
 80099a8:	20004c2c 	.word	0x20004c2c

080099ac <_malloc_usable_size_r>:
 80099ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80099b0:	1f18      	subs	r0, r3, #4
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	bfbc      	itt	lt
 80099b6:	580b      	ldrlt	r3, [r1, r0]
 80099b8:	18c0      	addlt	r0, r0, r3
 80099ba:	4770      	bx	lr

080099bc <_init>:
 80099bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099be:	bf00      	nop
 80099c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80099c2:	bc08      	pop	{r3}
 80099c4:	469e      	mov	lr, r3
 80099c6:	4770      	bx	lr

080099c8 <_fini>:
 80099c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099ca:	bf00      	nop
 80099cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80099ce:	bc08      	pop	{r3}
 80099d0:	469e      	mov	lr, r3
 80099d2:	4770      	bx	lr
