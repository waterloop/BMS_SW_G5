
STM32F405RGTx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009854  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000478  080099e4  080099e4  000199e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009e5c  08009e5c  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08009e5c  08009e5c  00019e5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009e64  08009e64  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009e64  08009e64  00019e64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009e68  08009e68  00019e68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08009e6c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004bbc  20000074  08009ee0  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004c30  08009ee0  00024c30  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00026d3f  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004738  00000000  00000000  00046de3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a08  00000000  00000000  0004b520  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001860  00000000  00000000  0004cf28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025062  00000000  00000000  0004e788  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c9ad  00000000  00000000  000737ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dce5b  00000000  00000000  00090197  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0016cff2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000076e4  00000000  00000000  0016d048  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080099cc 	.word	0x080099cc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	080099cc 	.word	0x080099cc

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96e 	b.w	8000564 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468c      	mov	ip, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	f040 8083 	bne.w	80003b6 <__udivmoddi4+0x116>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d947      	bls.n	8000346 <__udivmoddi4+0xa6>
 80002b6:	fab2 f282 	clz	r2, r2
 80002ba:	b142      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002bc:	f1c2 0020 	rsb	r0, r2, #32
 80002c0:	fa24 f000 	lsr.w	r0, r4, r0
 80002c4:	4091      	lsls	r1, r2
 80002c6:	4097      	lsls	r7, r2
 80002c8:	ea40 0c01 	orr.w	ip, r0, r1
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbbc f6f8 	udiv	r6, ip, r8
 80002d8:	fa1f fe87 	uxth.w	lr, r7
 80002dc:	fb08 c116 	mls	r1, r8, r6, ip
 80002e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e4:	fb06 f10e 	mul.w	r1, r6, lr
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18fb      	adds	r3, r7, r3
 80002ee:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f2:	f080 8119 	bcs.w	8000528 <__udivmoddi4+0x288>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8116 	bls.w	8000528 <__udivmoddi4+0x288>
 80002fc:	3e02      	subs	r6, #2
 80002fe:	443b      	add	r3, r7
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0f8 	udiv	r0, r3, r8
 8000308:	fb08 3310 	mls	r3, r8, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fe0e 	mul.w	lr, r0, lr
 8000314:	45a6      	cmp	lr, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	193c      	adds	r4, r7, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	f080 8105 	bcs.w	800052c <__udivmoddi4+0x28c>
 8000322:	45a6      	cmp	lr, r4
 8000324:	f240 8102 	bls.w	800052c <__udivmoddi4+0x28c>
 8000328:	3802      	subs	r0, #2
 800032a:	443c      	add	r4, r7
 800032c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000330:	eba4 040e 	sub.w	r4, r4, lr
 8000334:	2600      	movs	r6, #0
 8000336:	b11d      	cbz	r5, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c5 4300 	strd	r4, r3, [r5]
 8000340:	4631      	mov	r1, r6
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	b902      	cbnz	r2, 800034a <__udivmoddi4+0xaa>
 8000348:	deff      	udf	#255	; 0xff
 800034a:	fab2 f282 	clz	r2, r2
 800034e:	2a00      	cmp	r2, #0
 8000350:	d150      	bne.n	80003f4 <__udivmoddi4+0x154>
 8000352:	1bcb      	subs	r3, r1, r7
 8000354:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000358:	fa1f f887 	uxth.w	r8, r7
 800035c:	2601      	movs	r6, #1
 800035e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000362:	0c21      	lsrs	r1, r4, #16
 8000364:	fb0e 331c 	mls	r3, lr, ip, r3
 8000368:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800036c:	fb08 f30c 	mul.w	r3, r8, ip
 8000370:	428b      	cmp	r3, r1
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0xe4>
 8000374:	1879      	adds	r1, r7, r1
 8000376:	f10c 30ff 	add.w	r0, ip, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0xe2>
 800037c:	428b      	cmp	r3, r1
 800037e:	f200 80e9 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 8000382:	4684      	mov	ip, r0
 8000384:	1ac9      	subs	r1, r1, r3
 8000386:	b2a3      	uxth	r3, r4
 8000388:	fbb1 f0fe 	udiv	r0, r1, lr
 800038c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000390:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000394:	fb08 f800 	mul.w	r8, r8, r0
 8000398:	45a0      	cmp	r8, r4
 800039a:	d907      	bls.n	80003ac <__udivmoddi4+0x10c>
 800039c:	193c      	adds	r4, r7, r4
 800039e:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a2:	d202      	bcs.n	80003aa <__udivmoddi4+0x10a>
 80003a4:	45a0      	cmp	r8, r4
 80003a6:	f200 80d9 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003aa:	4618      	mov	r0, r3
 80003ac:	eba4 0408 	sub.w	r4, r4, r8
 80003b0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003b4:	e7bf      	b.n	8000336 <__udivmoddi4+0x96>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0x12e>
 80003ba:	2d00      	cmp	r5, #0
 80003bc:	f000 80b1 	beq.w	8000522 <__udivmoddi4+0x282>
 80003c0:	2600      	movs	r6, #0
 80003c2:	e9c5 0100 	strd	r0, r1, [r5]
 80003c6:	4630      	mov	r0, r6
 80003c8:	4631      	mov	r1, r6
 80003ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ce:	fab3 f683 	clz	r6, r3
 80003d2:	2e00      	cmp	r6, #0
 80003d4:	d14a      	bne.n	800046c <__udivmoddi4+0x1cc>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d302      	bcc.n	80003e0 <__udivmoddi4+0x140>
 80003da:	4282      	cmp	r2, r0
 80003dc:	f200 80b8 	bhi.w	8000550 <__udivmoddi4+0x2b0>
 80003e0:	1a84      	subs	r4, r0, r2
 80003e2:	eb61 0103 	sbc.w	r1, r1, r3
 80003e6:	2001      	movs	r0, #1
 80003e8:	468c      	mov	ip, r1
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	d0a8      	beq.n	8000340 <__udivmoddi4+0xa0>
 80003ee:	e9c5 4c00 	strd	r4, ip, [r5]
 80003f2:	e7a5      	b.n	8000340 <__udivmoddi4+0xa0>
 80003f4:	f1c2 0320 	rsb	r3, r2, #32
 80003f8:	fa20 f603 	lsr.w	r6, r0, r3
 80003fc:	4097      	lsls	r7, r2
 80003fe:	fa01 f002 	lsl.w	r0, r1, r2
 8000402:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000406:	40d9      	lsrs	r1, r3
 8000408:	4330      	orrs	r0, r6
 800040a:	0c03      	lsrs	r3, r0, #16
 800040c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000410:	fa1f f887 	uxth.w	r8, r7
 8000414:	fb0e 1116 	mls	r1, lr, r6, r1
 8000418:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800041c:	fb06 f108 	mul.w	r1, r6, r8
 8000420:	4299      	cmp	r1, r3
 8000422:	fa04 f402 	lsl.w	r4, r4, r2
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x19c>
 8000428:	18fb      	adds	r3, r7, r3
 800042a:	f106 3cff 	add.w	ip, r6, #4294967295
 800042e:	f080 808d 	bcs.w	800054c <__udivmoddi4+0x2ac>
 8000432:	4299      	cmp	r1, r3
 8000434:	f240 808a 	bls.w	800054c <__udivmoddi4+0x2ac>
 8000438:	3e02      	subs	r6, #2
 800043a:	443b      	add	r3, r7
 800043c:	1a5b      	subs	r3, r3, r1
 800043e:	b281      	uxth	r1, r0
 8000440:	fbb3 f0fe 	udiv	r0, r3, lr
 8000444:	fb0e 3310 	mls	r3, lr, r0, r3
 8000448:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044c:	fb00 f308 	mul.w	r3, r0, r8
 8000450:	428b      	cmp	r3, r1
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x1c4>
 8000454:	1879      	adds	r1, r7, r1
 8000456:	f100 3cff 	add.w	ip, r0, #4294967295
 800045a:	d273      	bcs.n	8000544 <__udivmoddi4+0x2a4>
 800045c:	428b      	cmp	r3, r1
 800045e:	d971      	bls.n	8000544 <__udivmoddi4+0x2a4>
 8000460:	3802      	subs	r0, #2
 8000462:	4439      	add	r1, r7
 8000464:	1acb      	subs	r3, r1, r3
 8000466:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800046a:	e778      	b.n	800035e <__udivmoddi4+0xbe>
 800046c:	f1c6 0c20 	rsb	ip, r6, #32
 8000470:	fa03 f406 	lsl.w	r4, r3, r6
 8000474:	fa22 f30c 	lsr.w	r3, r2, ip
 8000478:	431c      	orrs	r4, r3
 800047a:	fa20 f70c 	lsr.w	r7, r0, ip
 800047e:	fa01 f306 	lsl.w	r3, r1, r6
 8000482:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000486:	fa21 f10c 	lsr.w	r1, r1, ip
 800048a:	431f      	orrs	r7, r3
 800048c:	0c3b      	lsrs	r3, r7, #16
 800048e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000492:	fa1f f884 	uxth.w	r8, r4
 8000496:	fb0e 1119 	mls	r1, lr, r9, r1
 800049a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800049e:	fb09 fa08 	mul.w	sl, r9, r8
 80004a2:	458a      	cmp	sl, r1
 80004a4:	fa02 f206 	lsl.w	r2, r2, r6
 80004a8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x220>
 80004ae:	1861      	adds	r1, r4, r1
 80004b0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004b4:	d248      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 80004b6:	458a      	cmp	sl, r1
 80004b8:	d946      	bls.n	8000548 <__udivmoddi4+0x2a8>
 80004ba:	f1a9 0902 	sub.w	r9, r9, #2
 80004be:	4421      	add	r1, r4
 80004c0:	eba1 010a 	sub.w	r1, r1, sl
 80004c4:	b2bf      	uxth	r7, r7
 80004c6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ca:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ce:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004d2:	fb00 f808 	mul.w	r8, r0, r8
 80004d6:	45b8      	cmp	r8, r7
 80004d8:	d907      	bls.n	80004ea <__udivmoddi4+0x24a>
 80004da:	19e7      	adds	r7, r4, r7
 80004dc:	f100 31ff 	add.w	r1, r0, #4294967295
 80004e0:	d22e      	bcs.n	8000540 <__udivmoddi4+0x2a0>
 80004e2:	45b8      	cmp	r8, r7
 80004e4:	d92c      	bls.n	8000540 <__udivmoddi4+0x2a0>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4427      	add	r7, r4
 80004ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ee:	eba7 0708 	sub.w	r7, r7, r8
 80004f2:	fba0 8902 	umull	r8, r9, r0, r2
 80004f6:	454f      	cmp	r7, r9
 80004f8:	46c6      	mov	lr, r8
 80004fa:	4649      	mov	r1, r9
 80004fc:	d31a      	bcc.n	8000534 <__udivmoddi4+0x294>
 80004fe:	d017      	beq.n	8000530 <__udivmoddi4+0x290>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x27a>
 8000502:	ebb3 020e 	subs.w	r2, r3, lr
 8000506:	eb67 0701 	sbc.w	r7, r7, r1
 800050a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800050e:	40f2      	lsrs	r2, r6
 8000510:	ea4c 0202 	orr.w	r2, ip, r2
 8000514:	40f7      	lsrs	r7, r6
 8000516:	e9c5 2700 	strd	r2, r7, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	462e      	mov	r6, r5
 8000524:	4628      	mov	r0, r5
 8000526:	e70b      	b.n	8000340 <__udivmoddi4+0xa0>
 8000528:	4606      	mov	r6, r0
 800052a:	e6e9      	b.n	8000300 <__udivmoddi4+0x60>
 800052c:	4618      	mov	r0, r3
 800052e:	e6fd      	b.n	800032c <__udivmoddi4+0x8c>
 8000530:	4543      	cmp	r3, r8
 8000532:	d2e5      	bcs.n	8000500 <__udivmoddi4+0x260>
 8000534:	ebb8 0e02 	subs.w	lr, r8, r2
 8000538:	eb69 0104 	sbc.w	r1, r9, r4
 800053c:	3801      	subs	r0, #1
 800053e:	e7df      	b.n	8000500 <__udivmoddi4+0x260>
 8000540:	4608      	mov	r0, r1
 8000542:	e7d2      	b.n	80004ea <__udivmoddi4+0x24a>
 8000544:	4660      	mov	r0, ip
 8000546:	e78d      	b.n	8000464 <__udivmoddi4+0x1c4>
 8000548:	4681      	mov	r9, r0
 800054a:	e7b9      	b.n	80004c0 <__udivmoddi4+0x220>
 800054c:	4666      	mov	r6, ip
 800054e:	e775      	b.n	800043c <__udivmoddi4+0x19c>
 8000550:	4630      	mov	r0, r6
 8000552:	e74a      	b.n	80003ea <__udivmoddi4+0x14a>
 8000554:	f1ac 0c02 	sub.w	ip, ip, #2
 8000558:	4439      	add	r1, r7
 800055a:	e713      	b.n	8000384 <__udivmoddi4+0xe4>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	e724      	b.n	80003ac <__udivmoddi4+0x10c>
 8000562:	bf00      	nop

08000564 <__aeabi_idiv0>:
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop

08000568 <__io_putchar>:
#if BMS_DEBUG
#include "bms_tests.h"
#endif

// override __io_putchar from the STL to enable UART printing
void __io_putchar(uint8_t ch) {
 8000568:	b580      	push	{r7, lr}
 800056a:	b082      	sub	sp, #8
 800056c:	af00      	add	r7, sp, #0
 800056e:	4603      	mov	r3, r0
 8000570:	71fb      	strb	r3, [r7, #7]
	HAL_UART_Transmit(&huart1, &ch, 1, 500);
 8000572:	1df9      	adds	r1, r7, #7
 8000574:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000578:	2201      	movs	r2, #1
 800057a:	4803      	ldr	r0, [pc, #12]	; (8000588 <__io_putchar+0x20>)
 800057c:	f005 f819 	bl	80055b2 <HAL_UART_Transmit>
}
 8000580:	bf00      	nop
 8000582:	3708      	adds	r7, #8
 8000584:	46bd      	mov	sp, r7
 8000586:	bd80      	pop	{r7, pc}
 8000588:	20004a40 	.word	0x20004a40

0800058c <bms_entry>:

int bms_entry() {	
 800058c:	b580      	push	{r7, lr}
 800058e:	af00      	add	r7, sp, #0
	printf("starting timers...\r\n");
 8000590:	4810      	ldr	r0, [pc, #64]	; (80005d4 <bms_entry+0x48>)
 8000592:	f008 f911 	bl	80087b8 <puts>
	start_timers();
 8000596:	f001 fb43 	bl	8001c20 <start_timers>

	printf("initializing RTOS kernel...\r\n");
 800059a:	480f      	ldr	r0, [pc, #60]	; (80005d8 <bms_entry+0x4c>)
 800059c:	f008 f90c 	bl	80087b8 <puts>
	osKernelInitialize();
 80005a0:	f005 faf0 	bl	8005b84 <osKernelInitialize>

	printf("starting RTOS threads...\r\n");
 80005a4:	480d      	ldr	r0, [pc, #52]	; (80005dc <bms_entry+0x50>)
 80005a6:	f008 f907 	bl	80087b8 <puts>
	osThreadNew(ext_led_blink_thread_fn, NULL, &ext_led_blink_thread_attrs);
 80005aa:	4a0d      	ldr	r2, [pc, #52]	; (80005e0 <bms_entry+0x54>)
 80005ac:	2100      	movs	r1, #0
 80005ae:	480d      	ldr	r0, [pc, #52]	; (80005e4 <bms_entry+0x58>)
 80005b0:	f005 fb32 	bl	8005c18 <osThreadNew>
	// osThreadNew(rtos_heartbeat_logger_thread_fn, NULL, &rtos_heartbeat_logger_thread_attrs);
	osThreadNew(measurements_thread_fn, NULL, &measurements_thread_attrs);
 80005b4:	4a0c      	ldr	r2, [pc, #48]	; (80005e8 <bms_entry+0x5c>)
 80005b6:	2100      	movs	r1, #0
 80005b8:	480c      	ldr	r0, [pc, #48]	; (80005ec <bms_entry+0x60>)
 80005ba:	f005 fb2d 	bl	8005c18 <osThreadNew>

	printf("starting RTOS scheduler...\r\n");
 80005be:	480c      	ldr	r0, [pc, #48]	; (80005f0 <bms_entry+0x64>)
 80005c0:	f008 f8fa 	bl	80087b8 <puts>
	osKernelStart();
 80005c4:	f005 fb02 	bl	8005bcc <osKernelStart>

	// should never reach this point, since we have handed execution over to the RTOS
	Error_Handler();
 80005c8:	f000 ffc6 	bl	8001558 <Error_Handler>

	return 0;
 80005cc:	2300      	movs	r3, #0
}
 80005ce:	4618      	mov	r0, r3
 80005d0:	bd80      	pop	{r7, pc}
 80005d2:	bf00      	nop
 80005d4:	080099e4 	.word	0x080099e4
 80005d8:	080099f8 	.word	0x080099f8
 80005dc:	08009a18 	.word	0x08009a18
 80005e0:	08009d7c 	.word	0x08009d7c
 80005e4:	08001c69 	.word	0x08001c69
 80005e8:	08009da0 	.word	0x08009da0
 80005ec:	08001c89 	.word	0x08001c89
 80005f0:	08009a34 	.word	0x08009a34

080005f4 <Buffer_init>:
	0x585a, 0x8ba7, 0x4e3e, 0x450c, 0x8095
};

/////////////////////////////////////////////////////////////////////////////////////////////////////
// Buffer methods
Buffer Buffer_init() {
 80005f4:	b480      	push	{r7}
 80005f6:	b087      	sub	sp, #28
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	6078      	str	r0, [r7, #4]
	Buffer buffer = {};
 80005fc:	f107 030c 	add.w	r3, r7, #12
 8000600:	2200      	movs	r2, #0
 8000602:	601a      	str	r2, [r3, #0]
 8000604:	605a      	str	r2, [r3, #4]
 8000606:	f8c3 2007 	str.w	r2, [r3, #7]
	buffer.len = 0;
 800060a:	2300      	movs	r3, #0
 800060c:	733b      	strb	r3, [r7, #12]
	return buffer;
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	461a      	mov	r2, r3
 8000612:	f107 030c 	add.w	r3, r7, #12
 8000616:	cb03      	ldmia	r3!, {r0, r1}
 8000618:	6010      	str	r0, [r2, #0]
 800061a:	6051      	str	r1, [r2, #4]
 800061c:	8819      	ldrh	r1, [r3, #0]
 800061e:	789b      	ldrb	r3, [r3, #2]
 8000620:	8111      	strh	r1, [r2, #8]
 8000622:	7293      	strb	r3, [r2, #10]
}
 8000624:	6878      	ldr	r0, [r7, #4]
 8000626:	371c      	adds	r7, #28
 8000628:	46bd      	mov	sp, r7
 800062a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062e:	4770      	bx	lr

08000630 <Buffer_append>:

void Buffer_append(Buffer* self, uint8_t val) {
 8000630:	b480      	push	{r7}
 8000632:	b085      	sub	sp, #20
 8000634:	af00      	add	r7, sp, #0
 8000636:	6078      	str	r0, [r7, #4]
 8000638:	460b      	mov	r3, r1
 800063a:	70fb      	strb	r3, [r7, #3]
	uint8_t indx = self->len;
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	781b      	ldrb	r3, [r3, #0]
 8000640:	73fb      	strb	r3, [r7, #15]
	self->data[indx] = val;
 8000642:	7bfb      	ldrb	r3, [r7, #15]
 8000644:	687a      	ldr	r2, [r7, #4]
 8000646:	4413      	add	r3, r2
 8000648:	78fa      	ldrb	r2, [r7, #3]
 800064a:	705a      	strb	r2, [r3, #1]
	self->len += 1;
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	781b      	ldrb	r3, [r3, #0]
 8000650:	3301      	adds	r3, #1
 8000652:	b2da      	uxtb	r2, r3
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	701a      	strb	r2, [r3, #0]
}
 8000658:	bf00      	nop
 800065a:	3714      	adds	r7, #20
 800065c:	46bd      	mov	sp, r7
 800065e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000662:	4770      	bx	lr

08000664 <Buffer_index>:

uint8_t Buffer_index(Buffer* self, uint8_t indx) {
 8000664:	b580      	push	{r7, lr}
 8000666:	b082      	sub	sp, #8
 8000668:	af00      	add	r7, sp, #0
 800066a:	6078      	str	r0, [r7, #4]
 800066c:	460b      	mov	r3, r1
 800066e:	70fb      	strb	r3, [r7, #3]
	if (indx >= self->len) { Error_Handler(); }
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	781b      	ldrb	r3, [r3, #0]
 8000674:	78fa      	ldrb	r2, [r7, #3]
 8000676:	429a      	cmp	r2, r3
 8000678:	d301      	bcc.n	800067e <Buffer_index+0x1a>
 800067a:	f000 ff6d 	bl	8001558 <Error_Handler>
	return self->data[indx];
 800067e:	78fb      	ldrb	r3, [r7, #3]
 8000680:	687a      	ldr	r2, [r7, #4]
 8000682:	4413      	add	r3, r2
 8000684:	785b      	ldrb	r3, [r3, #1]
}
 8000686:	4618      	mov	r0, r3
 8000688:	3708      	adds	r7, #8
 800068a:	46bd      	mov	sp, r7
 800068c:	bd80      	pop	{r7, pc}

0800068e <Buffer_set_index>:
void Buffer_set_index(Buffer* self, uint8_t indx, uint8_t val) {
 800068e:	b580      	push	{r7, lr}
 8000690:	b082      	sub	sp, #8
 8000692:	af00      	add	r7, sp, #0
 8000694:	6078      	str	r0, [r7, #4]
 8000696:	460b      	mov	r3, r1
 8000698:	70fb      	strb	r3, [r7, #3]
 800069a:	4613      	mov	r3, r2
 800069c:	70bb      	strb	r3, [r7, #2]
	if (indx >= self->len) { Error_Handler(); }
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	781b      	ldrb	r3, [r3, #0]
 80006a2:	78fa      	ldrb	r2, [r7, #3]
 80006a4:	429a      	cmp	r2, r3
 80006a6:	d301      	bcc.n	80006ac <Buffer_set_index+0x1e>
 80006a8:	f000 ff56 	bl	8001558 <Error_Handler>
	self->data[indx] = val;
 80006ac:	78fb      	ldrb	r3, [r7, #3]
 80006ae:	687a      	ldr	r2, [r7, #4]
 80006b0:	4413      	add	r3, r2
 80006b2:	78ba      	ldrb	r2, [r7, #2]
 80006b4:	705a      	strb	r2, [r3, #1]
}
 80006b6:	bf00      	nop
 80006b8:	3708      	adds	r7, #8
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bd80      	pop	{r7, pc}
	...

080006c0 <Buffer_add_pec>:

void Buffer_add_pec(Buffer* self) {
 80006c0:	b590      	push	{r4, r7, lr}
 80006c2:	b085      	sub	sp, #20
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	6078      	str	r0, [r7, #4]
	uint16_t remainder = 16;
 80006c8:	2310      	movs	r3, #16
 80006ca:	81fb      	strh	r3, [r7, #14]
	uint16_t addr = 0;
 80006cc:	2300      	movs	r3, #0
 80006ce:	817b      	strh	r3, [r7, #10]
	for (uint8_t i = 0; i < self->len; i++) {
 80006d0:	2300      	movs	r3, #0
 80006d2:	737b      	strb	r3, [r7, #13]
 80006d4:	e01b      	b.n	800070e <Buffer_add_pec+0x4e>
		addr = ( (remainder >> 7)^Buffer_index(self, i) ) & 0xff;
 80006d6:	89fb      	ldrh	r3, [r7, #14]
 80006d8:	09db      	lsrs	r3, r3, #7
 80006da:	b29c      	uxth	r4, r3
 80006dc:	7b7b      	ldrb	r3, [r7, #13]
 80006de:	4619      	mov	r1, r3
 80006e0:	6878      	ldr	r0, [r7, #4]
 80006e2:	f7ff ffbf 	bl	8000664 <Buffer_index>
 80006e6:	4603      	mov	r3, r0
 80006e8:	b29b      	uxth	r3, r3
 80006ea:	4063      	eors	r3, r4
 80006ec:	b29b      	uxth	r3, r3
 80006ee:	b2db      	uxtb	r3, r3
 80006f0:	817b      	strh	r3, [r7, #10]
		remainder = (remainder << 8)^_CRC15_LUT[addr];
 80006f2:	89fb      	ldrh	r3, [r7, #14]
 80006f4:	021b      	lsls	r3, r3, #8
 80006f6:	b21a      	sxth	r2, r3
 80006f8:	897b      	ldrh	r3, [r7, #10]
 80006fa:	4912      	ldr	r1, [pc, #72]	; (8000744 <Buffer_add_pec+0x84>)
 80006fc:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000700:	b21b      	sxth	r3, r3
 8000702:	4053      	eors	r3, r2
 8000704:	b21b      	sxth	r3, r3
 8000706:	81fb      	strh	r3, [r7, #14]
	for (uint8_t i = 0; i < self->len; i++) {
 8000708:	7b7b      	ldrb	r3, [r7, #13]
 800070a:	3301      	adds	r3, #1
 800070c:	737b      	strb	r3, [r7, #13]
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	781b      	ldrb	r3, [r3, #0]
 8000712:	7b7a      	ldrb	r2, [r7, #13]
 8000714:	429a      	cmp	r2, r3
 8000716:	d3de      	bcc.n	80006d6 <Buffer_add_pec+0x16>
	}
	uint16_t pec = remainder*2;
 8000718:	89fb      	ldrh	r3, [r7, #14]
 800071a:	005b      	lsls	r3, r3, #1
 800071c:	813b      	strh	r3, [r7, #8]
	Buffer_append(self, (pec >> 8) & 0xff);
 800071e:	893b      	ldrh	r3, [r7, #8]
 8000720:	0a1b      	lsrs	r3, r3, #8
 8000722:	b29b      	uxth	r3, r3
 8000724:	b2db      	uxtb	r3, r3
 8000726:	4619      	mov	r1, r3
 8000728:	6878      	ldr	r0, [r7, #4]
 800072a:	f7ff ff81 	bl	8000630 <Buffer_append>
	Buffer_append(self, pec & 0xff);
 800072e:	893b      	ldrh	r3, [r7, #8]
 8000730:	b2db      	uxtb	r3, r3
 8000732:	4619      	mov	r1, r3
 8000734:	6878      	ldr	r0, [r7, #4]
 8000736:	f7ff ff7b 	bl	8000630 <Buffer_append>
}
 800073a:	bf00      	nop
 800073c:	3714      	adds	r7, #20
 800073e:	46bd      	mov	sp, r7
 8000740:	bd90      	pop	{r4, r7, pc}
 8000742:	bf00      	nop
 8000744:	08009b64 	.word	0x08009b64

08000748 <Buffer_check_pec>:

uint8_t Buffer_check_pec(Buffer* self) {
 8000748:	b590      	push	{r4, r7, lr}
 800074a:	b087      	sub	sp, #28
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]
	uint16_t remainder = 16;
 8000750:	2310      	movs	r3, #16
 8000752:	82fb      	strh	r3, [r7, #22]
	uint16_t addr = 0;
 8000754:	2300      	movs	r3, #0
 8000756:	827b      	strh	r3, [r7, #18]
	for (uint8_t i = 0; i < self->len - 2; i++) {
 8000758:	2300      	movs	r3, #0
 800075a:	757b      	strb	r3, [r7, #21]
 800075c:	e01b      	b.n	8000796 <Buffer_check_pec+0x4e>
		addr = ( (remainder >> 7)^Buffer_index(self, i) ) & 0xff;
 800075e:	8afb      	ldrh	r3, [r7, #22]
 8000760:	09db      	lsrs	r3, r3, #7
 8000762:	b29c      	uxth	r4, r3
 8000764:	7d7b      	ldrb	r3, [r7, #21]
 8000766:	4619      	mov	r1, r3
 8000768:	6878      	ldr	r0, [r7, #4]
 800076a:	f7ff ff7b 	bl	8000664 <Buffer_index>
 800076e:	4603      	mov	r3, r0
 8000770:	b29b      	uxth	r3, r3
 8000772:	4063      	eors	r3, r4
 8000774:	b29b      	uxth	r3, r3
 8000776:	b2db      	uxtb	r3, r3
 8000778:	827b      	strh	r3, [r7, #18]
		remainder = (remainder << 8)^_CRC15_LUT[addr];
 800077a:	8afb      	ldrh	r3, [r7, #22]
 800077c:	021b      	lsls	r3, r3, #8
 800077e:	b21a      	sxth	r2, r3
 8000780:	8a7b      	ldrh	r3, [r7, #18]
 8000782:	491b      	ldr	r1, [pc, #108]	; (80007f0 <Buffer_check_pec+0xa8>)
 8000784:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000788:	b21b      	sxth	r3, r3
 800078a:	4053      	eors	r3, r2
 800078c:	b21b      	sxth	r3, r3
 800078e:	82fb      	strh	r3, [r7, #22]
	for (uint8_t i = 0; i < self->len - 2; i++) {
 8000790:	7d7b      	ldrb	r3, [r7, #21]
 8000792:	3301      	adds	r3, #1
 8000794:	757b      	strb	r3, [r7, #21]
 8000796:	7d7a      	ldrb	r2, [r7, #21]
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	781b      	ldrb	r3, [r3, #0]
 800079c:	3b02      	subs	r3, #2
 800079e:	429a      	cmp	r2, r3
 80007a0:	dbdd      	blt.n	800075e <Buffer_check_pec+0x16>
	}
	uint16_t calc_pec = remainder*2;
 80007a2:	8afb      	ldrh	r3, [r7, #22]
 80007a4:	005b      	lsls	r3, r3, #1
 80007a6:	823b      	strh	r3, [r7, #16]
	uint16_t act_pec = ((uint16_t)Buffer_index(self, self->len - 2) << 8) | Buffer_index(self, self->len - 1);
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	781b      	ldrb	r3, [r3, #0]
 80007ac:	3b02      	subs	r3, #2
 80007ae:	b2db      	uxtb	r3, r3
 80007b0:	4619      	mov	r1, r3
 80007b2:	6878      	ldr	r0, [r7, #4]
 80007b4:	f7ff ff56 	bl	8000664 <Buffer_index>
 80007b8:	4603      	mov	r3, r0
 80007ba:	021b      	lsls	r3, r3, #8
 80007bc:	b21c      	sxth	r4, r3
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	781b      	ldrb	r3, [r3, #0]
 80007c2:	3b01      	subs	r3, #1
 80007c4:	b2db      	uxtb	r3, r3
 80007c6:	4619      	mov	r1, r3
 80007c8:	6878      	ldr	r0, [r7, #4]
 80007ca:	f7ff ff4b 	bl	8000664 <Buffer_index>
 80007ce:	4603      	mov	r3, r0
 80007d0:	b21b      	sxth	r3, r3
 80007d2:	4323      	orrs	r3, r4
 80007d4:	b21b      	sxth	r3, r3
 80007d6:	81fb      	strh	r3, [r7, #14]
	return calc_pec == act_pec;
 80007d8:	8a3a      	ldrh	r2, [r7, #16]
 80007da:	89fb      	ldrh	r3, [r7, #14]
 80007dc:	429a      	cmp	r2, r3
 80007de:	bf0c      	ite	eq
 80007e0:	2301      	moveq	r3, #1
 80007e2:	2300      	movne	r3, #0
 80007e4:	b2db      	uxtb	r3, r3
}
 80007e6:	4618      	mov	r0, r3
 80007e8:	371c      	adds	r7, #28
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd90      	pop	{r4, r7, pc}
 80007ee:	bf00      	nop
 80007f0:	08009b64 	.word	0x08009b64

080007f4 <Buffer_print>:

void Buffer_print(Buffer* self) {
 80007f4:	b590      	push	{r4, r7, lr}
 80007f6:	f5ad 7d01 	sub.w	sp, sp, #516	; 0x204
 80007fa:	af00      	add	r7, sp, #0
 80007fc:	1d3b      	adds	r3, r7, #4
 80007fe:	6018      	str	r0, [r3, #0]
	char str[500];
	for (uint8_t i = 0; i < self->len; i++) {
 8000800:	2300      	movs	r3, #0
 8000802:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
 8000806:	e019      	b.n	800083c <Buffer_print+0x48>
		sprintf(str, "pkt byte %d: %d\r\n", i, Buffer_index(self, i));
 8000808:	f897 41ff 	ldrb.w	r4, [r7, #511]	; 0x1ff
 800080c:	f897 21ff 	ldrb.w	r2, [r7, #511]	; 0x1ff
 8000810:	1d3b      	adds	r3, r7, #4
 8000812:	4611      	mov	r1, r2
 8000814:	6818      	ldr	r0, [r3, #0]
 8000816:	f7ff ff25 	bl	8000664 <Buffer_index>
 800081a:	4603      	mov	r3, r0
 800081c:	f107 0008 	add.w	r0, r7, #8
 8000820:	4622      	mov	r2, r4
 8000822:	490e      	ldr	r1, [pc, #56]	; (800085c <Buffer_print+0x68>)
 8000824:	f007 ffd0 	bl	80087c8 <siprintf>
		printf(str);
 8000828:	f107 0308 	add.w	r3, r7, #8
 800082c:	4618      	mov	r0, r3
 800082e:	f007 ff3d 	bl	80086ac <iprintf>
	for (uint8_t i = 0; i < self->len; i++) {
 8000832:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8000836:	3301      	adds	r3, #1
 8000838:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
 800083c:	1d3b      	adds	r3, r7, #4
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	781b      	ldrb	r3, [r3, #0]
 8000842:	f897 21ff 	ldrb.w	r2, [r7, #511]	; 0x1ff
 8000846:	429a      	cmp	r2, r3
 8000848:	d3de      	bcc.n	8000808 <Buffer_print+0x14>
	}
	printf("\r\n");
 800084a:	4805      	ldr	r0, [pc, #20]	; (8000860 <Buffer_print+0x6c>)
 800084c:	f007 ffb4 	bl	80087b8 <puts>
}
 8000850:	bf00      	nop
 8000852:	f507 7701 	add.w	r7, r7, #516	; 0x204
 8000856:	46bd      	mov	sp, r7
 8000858:	bd90      	pop	{r4, r7, pc}
 800085a:	bf00      	nop
 800085c:	08009a50 	.word	0x08009a50
 8000860:	08009a64 	.word	0x08009a64

08000864 <Buffer_clear>:

void Buffer_clear(Buffer* self) {
 8000864:	b580      	push	{r7, lr}
 8000866:	b082      	sub	sp, #8
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
	while (self->len > 0) {
 800086c:	e00e      	b.n	800088c <Buffer_clear+0x28>
		Buffer_set_index(self, self->len - 1, 0);
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	781b      	ldrb	r3, [r3, #0]
 8000872:	3b01      	subs	r3, #1
 8000874:	b2db      	uxtb	r3, r3
 8000876:	2200      	movs	r2, #0
 8000878:	4619      	mov	r1, r3
 800087a:	6878      	ldr	r0, [r7, #4]
 800087c:	f7ff ff07 	bl	800068e <Buffer_set_index>
		self->len = self->len - 1;
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	781b      	ldrb	r3, [r3, #0]
 8000884:	3b01      	subs	r3, #1
 8000886:	b2da      	uxtb	r2, r3
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	701a      	strb	r2, [r3, #0]
	while (self->len > 0) {
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	781b      	ldrb	r3, [r3, #0]
 8000890:	2b00      	cmp	r3, #0
 8000892:	d1ec      	bne.n	800086e <Buffer_clear+0xa>
	}
}
 8000894:	bf00      	nop
 8000896:	bf00      	nop
 8000898:	3708      	adds	r7, #8
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}

0800089e <Ltc6813_init>:
/////////////////////////////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////////////////////////////
// Ltc6813 methods
Ltc6813 Ltc6813_init(SPI_HandleTypeDef spi, GPIO_TypeDef* cs_gpio_port, uint8_t cs_pin_num) {
 800089e:	b084      	sub	sp, #16
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b0b8      	sub	sp, #224	; 0xe0
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6178      	str	r0, [r7, #20]
 80008a8:	f107 00ec 	add.w	r0, r7, #236	; 0xec
 80008ac:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	Ltc6813 slave_device = {};
 80008b0:	f107 031c 	add.w	r3, r7, #28
 80008b4:	22c4      	movs	r2, #196	; 0xc4
 80008b6:	2100      	movs	r1, #0
 80008b8:	4618      	mov	r0, r3
 80008ba:	f007 feef 	bl	800869c <memset>
	slave_device._spi_interface = spi;
 80008be:	f107 031c 	add.w	r3, r7, #28
 80008c2:	f107 01ec 	add.w	r1, r7, #236	; 0xec
 80008c6:	2258      	movs	r2, #88	; 0x58
 80008c8:	4618      	mov	r0, r3
 80008ca:	f007 fed9 	bl	8008680 <memcpy>

	// config CS pin as GPIO output
	cs_gpio_port->MODER &= ~(0b11u << (cs_pin_num*2));
 80008ce:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80008d2:	681a      	ldr	r2, [r3, #0]
 80008d4:	f897 3148 	ldrb.w	r3, [r7, #328]	; 0x148
 80008d8:	005b      	lsls	r3, r3, #1
 80008da:	2103      	movs	r1, #3
 80008dc:	fa01 f303 	lsl.w	r3, r1, r3
 80008e0:	43db      	mvns	r3, r3
 80008e2:	401a      	ands	r2, r3
 80008e4:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80008e8:	601a      	str	r2, [r3, #0]
	cs_gpio_port->MODER |= (0b01u << (cs_pin_num*2));
 80008ea:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80008ee:	681a      	ldr	r2, [r3, #0]
 80008f0:	f897 3148 	ldrb.w	r3, [r7, #328]	; 0x148
 80008f4:	005b      	lsls	r3, r3, #1
 80008f6:	2101      	movs	r1, #1
 80008f8:	fa01 f303 	lsl.w	r3, r1, r3
 80008fc:	431a      	orrs	r2, r3
 80008fe:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8000902:	601a      	str	r2, [r3, #0]

	slave_device._cs_gpio_port = cs_gpio_port;
 8000904:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8000908:	677b      	str	r3, [r7, #116]	; 0x74
	slave_device._cs_pin_num = cs_pin_num;
 800090a:	f897 3148 	ldrb.w	r3, [r7, #328]	; 0x148
 800090e:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

	slave_device.cmd_bfr = Buffer_init();
 8000912:	463b      	mov	r3, r7
 8000914:	4618      	mov	r0, r3
 8000916:	f7ff fe6d 	bl	80005f4 <Buffer_init>
 800091a:	f107 0379 	add.w	r3, r7, #121	; 0x79
 800091e:	463a      	mov	r2, r7
 8000920:	6810      	ldr	r0, [r2, #0]
 8000922:	6851      	ldr	r1, [r2, #4]
 8000924:	6018      	str	r0, [r3, #0]
 8000926:	6059      	str	r1, [r3, #4]
 8000928:	8911      	ldrh	r1, [r2, #8]
 800092a:	7a92      	ldrb	r2, [r2, #10]
 800092c:	8119      	strh	r1, [r3, #8]
 800092e:	729a      	strb	r2, [r3, #10]

	slave_device.cfga_bfr = Buffer_init();
 8000930:	463b      	mov	r3, r7
 8000932:	4618      	mov	r0, r3
 8000934:	f7ff fe5e 	bl	80005f4 <Buffer_init>
 8000938:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800093c:	463a      	mov	r2, r7
 800093e:	6810      	ldr	r0, [r2, #0]
 8000940:	6851      	ldr	r1, [r2, #4]
 8000942:	c303      	stmia	r3!, {r0, r1}
 8000944:	8911      	ldrh	r1, [r2, #8]
 8000946:	7a92      	ldrb	r2, [r2, #10]
 8000948:	8019      	strh	r1, [r3, #0]
 800094a:	709a      	strb	r2, [r3, #2]
	slave_device.cfgb_bfr = Buffer_init();
 800094c:	463b      	mov	r3, r7
 800094e:	4618      	mov	r0, r3
 8000950:	f7ff fe50 	bl	80005f4 <Buffer_init>
 8000954:	f107 038f 	add.w	r3, r7, #143	; 0x8f
 8000958:	463a      	mov	r2, r7
 800095a:	6810      	ldr	r0, [r2, #0]
 800095c:	6851      	ldr	r1, [r2, #4]
 800095e:	6018      	str	r0, [r3, #0]
 8000960:	6059      	str	r1, [r3, #4]
 8000962:	8911      	ldrh	r1, [r2, #8]
 8000964:	7a92      	ldrb	r2, [r2, #10]
 8000966:	8119      	strh	r1, [r3, #8]
 8000968:	729a      	strb	r2, [r3, #10]

	slave_device.cva_bfr = Buffer_init();
 800096a:	463b      	mov	r3, r7
 800096c:	4618      	mov	r0, r3
 800096e:	f7ff fe41 	bl	80005f4 <Buffer_init>
 8000972:	f107 039a 	add.w	r3, r7, #154	; 0x9a
 8000976:	463a      	mov	r2, r7
 8000978:	6810      	ldr	r0, [r2, #0]
 800097a:	6851      	ldr	r1, [r2, #4]
 800097c:	6018      	str	r0, [r3, #0]
 800097e:	6059      	str	r1, [r3, #4]
 8000980:	8911      	ldrh	r1, [r2, #8]
 8000982:	7a92      	ldrb	r2, [r2, #10]
 8000984:	8119      	strh	r1, [r3, #8]
 8000986:	729a      	strb	r2, [r3, #10]
	slave_device.cvb_bfr = Buffer_init();
 8000988:	463b      	mov	r3, r7
 800098a:	4618      	mov	r0, r3
 800098c:	f7ff fe32 	bl	80005f4 <Buffer_init>
 8000990:	f107 03a5 	add.w	r3, r7, #165	; 0xa5
 8000994:	463a      	mov	r2, r7
 8000996:	6810      	ldr	r0, [r2, #0]
 8000998:	6851      	ldr	r1, [r2, #4]
 800099a:	6018      	str	r0, [r3, #0]
 800099c:	6059      	str	r1, [r3, #4]
 800099e:	8911      	ldrh	r1, [r2, #8]
 80009a0:	7a92      	ldrb	r2, [r2, #10]
 80009a2:	8119      	strh	r1, [r3, #8]
 80009a4:	729a      	strb	r2, [r3, #10]
	slave_device.cvc_bfr = Buffer_init();
 80009a6:	463b      	mov	r3, r7
 80009a8:	4618      	mov	r0, r3
 80009aa:	f7ff fe23 	bl	80005f4 <Buffer_init>
 80009ae:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80009b2:	463a      	mov	r2, r7
 80009b4:	6810      	ldr	r0, [r2, #0]
 80009b6:	6851      	ldr	r1, [r2, #4]
 80009b8:	c303      	stmia	r3!, {r0, r1}
 80009ba:	8911      	ldrh	r1, [r2, #8]
 80009bc:	7a92      	ldrb	r2, [r2, #10]
 80009be:	8019      	strh	r1, [r3, #0]
 80009c0:	709a      	strb	r2, [r3, #2]
	slave_device.cvd_bfr = Buffer_init();
 80009c2:	463b      	mov	r3, r7
 80009c4:	4618      	mov	r0, r3
 80009c6:	f7ff fe15 	bl	80005f4 <Buffer_init>
 80009ca:	f107 03bb 	add.w	r3, r7, #187	; 0xbb
 80009ce:	463a      	mov	r2, r7
 80009d0:	6810      	ldr	r0, [r2, #0]
 80009d2:	6851      	ldr	r1, [r2, #4]
 80009d4:	6018      	str	r0, [r3, #0]
 80009d6:	6059      	str	r1, [r3, #4]
 80009d8:	8911      	ldrh	r1, [r2, #8]
 80009da:	7a92      	ldrb	r2, [r2, #10]
 80009dc:	8119      	strh	r1, [r3, #8]
 80009de:	729a      	strb	r2, [r3, #10]
	slave_device.cve_bfr = Buffer_init();
 80009e0:	463b      	mov	r3, r7
 80009e2:	4618      	mov	r0, r3
 80009e4:	f7ff fe06 	bl	80005f4 <Buffer_init>
 80009e8:	f107 03c6 	add.w	r3, r7, #198	; 0xc6
 80009ec:	463a      	mov	r2, r7
 80009ee:	6810      	ldr	r0, [r2, #0]
 80009f0:	6851      	ldr	r1, [r2, #4]
 80009f2:	6018      	str	r0, [r3, #0]
 80009f4:	6059      	str	r1, [r3, #4]
 80009f6:	8911      	ldrh	r1, [r2, #8]
 80009f8:	7a92      	ldrb	r2, [r2, #10]
 80009fa:	8119      	strh	r1, [r3, #8]
 80009fc:	729a      	strb	r2, [r3, #10]
	slave_device.cvf_bfr = Buffer_init();
 80009fe:	463b      	mov	r3, r7
 8000a00:	4618      	mov	r0, r3
 8000a02:	f7ff fdf7 	bl	80005f4 <Buffer_init>
 8000a06:	f107 03d1 	add.w	r3, r7, #209	; 0xd1
 8000a0a:	463a      	mov	r2, r7
 8000a0c:	6810      	ldr	r0, [r2, #0]
 8000a0e:	6851      	ldr	r1, [r2, #4]
 8000a10:	6018      	str	r0, [r3, #0]
 8000a12:	6059      	str	r1, [r3, #4]
 8000a14:	8911      	ldrh	r1, [r2, #8]
 8000a16:	7a92      	ldrb	r2, [r2, #10]
 8000a18:	8119      	strh	r1, [r3, #8]
 8000a1a:	729a      	strb	r2, [r3, #10]

	slave_device.timeout = 10000;
 8000a1c:	f242 7310 	movw	r3, #10000	; 0x2710
 8000a20:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

	Ltc6813_cs_high(&slave_device);
 8000a24:	f107 031c 	add.w	r3, r7, #28
 8000a28:	4618      	mov	r0, r3
 8000a2a:	f000 f824 	bl	8000a76 <Ltc6813_cs_high>

	return slave_device;
 8000a2e:	697b      	ldr	r3, [r7, #20]
 8000a30:	4618      	mov	r0, r3
 8000a32:	f107 031c 	add.w	r3, r7, #28
 8000a36:	22c4      	movs	r2, #196	; 0xc4
 8000a38:	4619      	mov	r1, r3
 8000a3a:	f007 fe21 	bl	8008680 <memcpy>
}
 8000a3e:	6978      	ldr	r0, [r7, #20]
 8000a40:	37e0      	adds	r7, #224	; 0xe0
 8000a42:	46bd      	mov	sp, r7
 8000a44:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000a48:	b004      	add	sp, #16
 8000a4a:	4770      	bx	lr

08000a4c <Ltc6813_cs_low>:

void Ltc6813_cs_low(Ltc6813* self) { HAL_GPIO_WritePin(self->_cs_gpio_port, (1u << self->_cs_pin_num), 0); }
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b082      	sub	sp, #8
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8000a5e:	461a      	mov	r2, r3
 8000a60:	2301      	movs	r3, #1
 8000a62:	4093      	lsls	r3, r2
 8000a64:	b29b      	uxth	r3, r3
 8000a66:	2200      	movs	r2, #0
 8000a68:	4619      	mov	r1, r3
 8000a6a:	f002 f80d 	bl	8002a88 <HAL_GPIO_WritePin>
 8000a6e:	bf00      	nop
 8000a70:	3708      	adds	r7, #8
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bd80      	pop	{r7, pc}

08000a76 <Ltc6813_cs_high>:
void Ltc6813_cs_high(Ltc6813* self) { HAL_GPIO_WritePin(self->_cs_gpio_port, (1u << self->_cs_pin_num), 1); }
 8000a76:	b580      	push	{r7, lr}
 8000a78:	b082      	sub	sp, #8
 8000a7a:	af00      	add	r7, sp, #0
 8000a7c:	6078      	str	r0, [r7, #4]
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8000a88:	461a      	mov	r2, r3
 8000a8a:	2301      	movs	r3, #1
 8000a8c:	4093      	lsls	r3, r2
 8000a8e:	b29b      	uxth	r3, r3
 8000a90:	2201      	movs	r2, #1
 8000a92:	4619      	mov	r1, r3
 8000a94:	f001 fff8 	bl	8002a88 <HAL_GPIO_WritePin>
 8000a98:	bf00      	nop
 8000a9a:	3708      	adds	r7, #8
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	bd80      	pop	{r7, pc}

08000aa0 <Ltc6813_wakeup_sleep>:

// WAKEUP FUNCTIONS:
// setting CS low will send a long isoSPI pulse (reference: page 18 of LTC6820 datasheet)
void Ltc6813_wakeup_sleep(Ltc6813* self) {
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b082      	sub	sp, #8
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
	Ltc6813_cs_low(self);
 8000aa8:	6878      	ldr	r0, [r7, #4]
 8000aaa:	f7ff ffcf 	bl	8000a4c <Ltc6813_cs_low>
	delay_us(410);		// according to datasheet, t_wake = 400us
 8000aae:	f44f 70cd 	mov.w	r0, #410	; 0x19a
 8000ab2:	f001 f8bf 	bl	8001c34 <delay_us>
	Ltc6813_cs_high(self);
 8000ab6:	6878      	ldr	r0, [r7, #4]
 8000ab8:	f7ff ffdd 	bl	8000a76 <Ltc6813_cs_high>
	delay_us(30);
 8000abc:	201e      	movs	r0, #30
 8000abe:	f001 f8b9 	bl	8001c34 <delay_us>
}
 8000ac2:	bf00      	nop
 8000ac4:	3708      	adds	r7, #8
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd80      	pop	{r7, pc}
	...

08000acc <Ltc6813_print_voltages>:
	Ltc6813_cs_low(self);
	delay_us(20);		// according to datasheet, t_wake = 10us
	Ltc6813_cs_high(self);
}

void Ltc6813_print_voltages(Ltc6813* self) {
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b082      	sub	sp, #8
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]

	printf("PRINTING CVA\r\n");
 8000ad4:	4819      	ldr	r0, [pc, #100]	; (8000b3c <Ltc6813_print_voltages+0x70>)
 8000ad6:	f007 fe6f 	bl	80087b8 <puts>
	Buffer_print(&(self->cva_bfr));
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	337e      	adds	r3, #126	; 0x7e
 8000ade:	4618      	mov	r0, r3
 8000ae0:	f7ff fe88 	bl	80007f4 <Buffer_print>

	printf("PRINTING CVB\r\n");
 8000ae4:	4816      	ldr	r0, [pc, #88]	; (8000b40 <Ltc6813_print_voltages+0x74>)
 8000ae6:	f007 fe67 	bl	80087b8 <puts>
	Buffer_print(&(self->cvb_bfr));
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	3389      	adds	r3, #137	; 0x89
 8000aee:	4618      	mov	r0, r3
 8000af0:	f7ff fe80 	bl	80007f4 <Buffer_print>

	printf("PRINTING CVC\r\n");
 8000af4:	4813      	ldr	r0, [pc, #76]	; (8000b44 <Ltc6813_print_voltages+0x78>)
 8000af6:	f007 fe5f 	bl	80087b8 <puts>
	Buffer_print(&(self->cvc_bfr));
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	3394      	adds	r3, #148	; 0x94
 8000afe:	4618      	mov	r0, r3
 8000b00:	f7ff fe78 	bl	80007f4 <Buffer_print>

	printf("PRINTING CVD\r\n");
 8000b04:	4810      	ldr	r0, [pc, #64]	; (8000b48 <Ltc6813_print_voltages+0x7c>)
 8000b06:	f007 fe57 	bl	80087b8 <puts>
	Buffer_print(&(self->cvd_bfr));
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	339f      	adds	r3, #159	; 0x9f
 8000b0e:	4618      	mov	r0, r3
 8000b10:	f7ff fe70 	bl	80007f4 <Buffer_print>

	printf("PRINTING CVE\r\n");
 8000b14:	480d      	ldr	r0, [pc, #52]	; (8000b4c <Ltc6813_print_voltages+0x80>)
 8000b16:	f007 fe4f 	bl	80087b8 <puts>
	Buffer_print(&(self->cve_bfr));
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	33aa      	adds	r3, #170	; 0xaa
 8000b1e:	4618      	mov	r0, r3
 8000b20:	f7ff fe68 	bl	80007f4 <Buffer_print>

	printf("PRINTING CVF\r\n");
 8000b24:	480a      	ldr	r0, [pc, #40]	; (8000b50 <Ltc6813_print_voltages+0x84>)
 8000b26:	f007 fe47 	bl	80087b8 <puts>
	Buffer_print(&(self->cvf_bfr));
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	33b5      	adds	r3, #181	; 0xb5
 8000b2e:	4618      	mov	r0, r3
 8000b30:	f7ff fe60 	bl	80007f4 <Buffer_print>

}
 8000b34:	bf00      	nop
 8000b36:	3708      	adds	r7, #8
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bd80      	pop	{r7, pc}
 8000b3c:	08009a68 	.word	0x08009a68
 8000b40:	08009a78 	.word	0x08009a78
 8000b44:	08009a88 	.word	0x08009a88
 8000b48:	08009a98 	.word	0x08009a98
 8000b4c:	08009aa8 	.word	0x08009aa8
 8000b50:	08009ab8 	.word	0x08009ab8

08000b54 <Ltc6813_send_cmd>:

// READ COMMAND FUNCTIONS:
// commands to send read commands and receive data back (page 60 of LTC6813 datasheet)
void Ltc6813_send_cmd(Ltc6813* self, uint16_t cmd) {
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b082      	sub	sp, #8
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
 8000b5c:	460b      	mov	r3, r1
 8000b5e:	807b      	strh	r3, [r7, #2]
	Buffer_clear(&self->cmd_bfr);
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	335d      	adds	r3, #93	; 0x5d
 8000b64:	4618      	mov	r0, r3
 8000b66:	f7ff fe7d 	bl	8000864 <Buffer_clear>

	Buffer_append(&self->cmd_bfr, (cmd >> 8) & 0xff);
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	f103 025d 	add.w	r2, r3, #93	; 0x5d
 8000b70:	887b      	ldrh	r3, [r7, #2]
 8000b72:	0a1b      	lsrs	r3, r3, #8
 8000b74:	b29b      	uxth	r3, r3
 8000b76:	b2db      	uxtb	r3, r3
 8000b78:	4619      	mov	r1, r3
 8000b7a:	4610      	mov	r0, r2
 8000b7c:	f7ff fd58 	bl	8000630 <Buffer_append>
	Buffer_append(&self->cmd_bfr, cmd & 0xff);
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	335d      	adds	r3, #93	; 0x5d
 8000b84:	887a      	ldrh	r2, [r7, #2]
 8000b86:	b2d2      	uxtb	r2, r2
 8000b88:	4611      	mov	r1, r2
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	f7ff fd50 	bl	8000630 <Buffer_append>

	Buffer_add_pec(&self->cmd_bfr);
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	335d      	adds	r3, #93	; 0x5d
 8000b94:	4618      	mov	r0, r3
 8000b96:	f7ff fd93 	bl	80006c0 <Buffer_add_pec>

	Ltc6813_cs_low(self);
 8000b9a:	6878      	ldr	r0, [r7, #4]
 8000b9c:	f7ff ff56 	bl	8000a4c <Ltc6813_cs_low>
	HAL_SPI_Transmit(&self->_spi_interface, self->cmd_bfr.data, self->cmd_bfr.len, self->timeout);
 8000ba0:	6878      	ldr	r0, [r7, #4]
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	f103 015e 	add.w	r1, r3, #94	; 0x5e
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8000bae:	b29a      	uxth	r2, r3
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8000bb6:	f002 fcc8 	bl	800354a <HAL_SPI_Transmit>
	Ltc6813_cs_high(self);
 8000bba:	6878      	ldr	r0, [r7, #4]
 8000bbc:	f7ff ff5b 	bl	8000a76 <Ltc6813_cs_high>
}
 8000bc0:	bf00      	nop
 8000bc2:	3708      	adds	r7, #8
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bd80      	pop	{r7, pc}

08000bc8 <Ltc6813_read_reg>:

uint8_t Ltc6813_read_reg(Ltc6813* self, uint8_t reg_cmd) {
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b084      	sub	sp, #16
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
 8000bd0:	460b      	mov	r3, r1
 8000bd2:	70fb      	strb	r3, [r7, #3]

	Buffer* reg_buf;

	switch (reg_cmd) {
 8000bd4:	78fb      	ldrb	r3, [r7, #3]
 8000bd6:	3b02      	subs	r3, #2
 8000bd8:	2b24      	cmp	r3, #36	; 0x24
 8000bda:	d86d      	bhi.n	8000cb8 <Ltc6813_read_reg+0xf0>
 8000bdc:	a201      	add	r2, pc, #4	; (adr r2, 8000be4 <Ltc6813_read_reg+0x1c>)
 8000bde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000be2:	bf00      	nop
 8000be4:	08000c79 	.word	0x08000c79
 8000be8:	08000cb9 	.word	0x08000cb9
 8000bec:	08000c89 	.word	0x08000c89
 8000bf0:	08000cb9 	.word	0x08000cb9
 8000bf4:	08000c91 	.word	0x08000c91
 8000bf8:	08000cb9 	.word	0x08000cb9
 8000bfc:	08000c99 	.word	0x08000c99
 8000c00:	08000ca9 	.word	0x08000ca9
 8000c04:	08000ca1 	.word	0x08000ca1
 8000c08:	08000cb1 	.word	0x08000cb1
 8000c0c:	08000cb9 	.word	0x08000cb9
 8000c10:	08000cb9 	.word	0x08000cb9
 8000c14:	08000cb9 	.word	0x08000cb9
 8000c18:	08000cb9 	.word	0x08000cb9
 8000c1c:	08000cb9 	.word	0x08000cb9
 8000c20:	08000cb9 	.word	0x08000cb9
 8000c24:	08000cb9 	.word	0x08000cb9
 8000c28:	08000cb9 	.word	0x08000cb9
 8000c2c:	08000cb9 	.word	0x08000cb9
 8000c30:	08000cb9 	.word	0x08000cb9
 8000c34:	08000cb9 	.word	0x08000cb9
 8000c38:	08000cb9 	.word	0x08000cb9
 8000c3c:	08000cb9 	.word	0x08000cb9
 8000c40:	08000cb9 	.word	0x08000cb9
 8000c44:	08000cb9 	.word	0x08000cb9
 8000c48:	08000cb9 	.word	0x08000cb9
 8000c4c:	08000cb9 	.word	0x08000cb9
 8000c50:	08000cb9 	.word	0x08000cb9
 8000c54:	08000cb9 	.word	0x08000cb9
 8000c58:	08000cb9 	.word	0x08000cb9
 8000c5c:	08000cb9 	.word	0x08000cb9
 8000c60:	08000cb9 	.word	0x08000cb9
 8000c64:	08000cb9 	.word	0x08000cb9
 8000c68:	08000cb9 	.word	0x08000cb9
 8000c6c:	08000cb9 	.word	0x08000cb9
 8000c70:	08000cb9 	.word	0x08000cb9
 8000c74:	08000c81 	.word	0x08000c81
		case RDCFGA:
			reg_buf = &(self->cfga_bfr);
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	3368      	adds	r3, #104	; 0x68
 8000c7c:	60fb      	str	r3, [r7, #12]
			break;
 8000c7e:	e01c      	b.n	8000cba <Ltc6813_read_reg+0xf2>
		case RDCFGB:
			reg_buf = &(self->cfgb_bfr);
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	3373      	adds	r3, #115	; 0x73
 8000c84:	60fb      	str	r3, [r7, #12]
			break;
 8000c86:	e018      	b.n	8000cba <Ltc6813_read_reg+0xf2>
		case RDCVA:
			reg_buf = &(self->cva_bfr);
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	337e      	adds	r3, #126	; 0x7e
 8000c8c:	60fb      	str	r3, [r7, #12]
			break;
 8000c8e:	e014      	b.n	8000cba <Ltc6813_read_reg+0xf2>
		case RDCVB:
			reg_buf = &(self->cvb_bfr);
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	3389      	adds	r3, #137	; 0x89
 8000c94:	60fb      	str	r3, [r7, #12]
			break;
 8000c96:	e010      	b.n	8000cba <Ltc6813_read_reg+0xf2>
		case RDCVC:
			reg_buf = &(self->cvc_bfr);
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	3394      	adds	r3, #148	; 0x94
 8000c9c:	60fb      	str	r3, [r7, #12]
			break;
 8000c9e:	e00c      	b.n	8000cba <Ltc6813_read_reg+0xf2>
		case RDCVD:
			reg_buf = &(self->cvd_bfr);
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	339f      	adds	r3, #159	; 0x9f
 8000ca4:	60fb      	str	r3, [r7, #12]
			break;
 8000ca6:	e008      	b.n	8000cba <Ltc6813_read_reg+0xf2>
		case RDCVE:
			reg_buf = &(self->cve_bfr);
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	33aa      	adds	r3, #170	; 0xaa
 8000cac:	60fb      	str	r3, [r7, #12]
			break;
 8000cae:	e004      	b.n	8000cba <Ltc6813_read_reg+0xf2>
		case RDCVF:
			reg_buf = &(self->cvf_bfr);
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	33b5      	adds	r3, #181	; 0xb5
 8000cb4:	60fb      	str	r3, [r7, #12]
			break;
 8000cb6:	e000      	b.n	8000cba <Ltc6813_read_reg+0xf2>
		default:
			break;
 8000cb8:	bf00      	nop
	}

	Buffer_clear(reg_buf);
 8000cba:	68f8      	ldr	r0, [r7, #12]
 8000cbc:	f7ff fdd2 	bl	8000864 <Buffer_clear>

	reg_buf->len = 8;
 8000cc0:	68fb      	ldr	r3, [r7, #12]
 8000cc2:	2208      	movs	r2, #8
 8000cc4:	701a      	strb	r2, [r3, #0]

	Ltc6813_cs_low(self);
 8000cc6:	6878      	ldr	r0, [r7, #4]
 8000cc8:	f7ff fec0 	bl	8000a4c <Ltc6813_cs_low>

	Ltc6813_send_cmd(self, reg_cmd);
 8000ccc:	78fb      	ldrb	r3, [r7, #3]
 8000cce:	b29b      	uxth	r3, r3
 8000cd0:	4619      	mov	r1, r3
 8000cd2:	6878      	ldr	r0, [r7, #4]
 8000cd4:	f7ff ff3e 	bl	8000b54 <Ltc6813_send_cmd>
	HAL_SPI_Receive(&self->_spi_interface, reg_buf->data, reg_buf->len, self->timeout);
 8000cd8:	6878      	ldr	r0, [r7, #4]
 8000cda:	68fb      	ldr	r3, [r7, #12]
 8000cdc:	1c59      	adds	r1, r3, #1
 8000cde:	68fb      	ldr	r3, [r7, #12]
 8000ce0:	781b      	ldrb	r3, [r3, #0]
 8000ce2:	b29a      	uxth	r2, r3
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8000cea:	f002 fd6a 	bl	80037c2 <HAL_SPI_Receive>

	Ltc6813_cs_high(self);
 8000cee:	6878      	ldr	r0, [r7, #4]
 8000cf0:	f7ff fec1 	bl	8000a76 <Ltc6813_cs_high>

	uint8_t pec_success = Buffer_check_pec(reg_buf);
 8000cf4:	68f8      	ldr	r0, [r7, #12]
 8000cf6:	f7ff fd27 	bl	8000748 <Buffer_check_pec>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	72fb      	strb	r3, [r7, #11]
	reg_buf->len = 6;
 8000cfe:	68fb      	ldr	r3, [r7, #12]
 8000d00:	2206      	movs	r2, #6
 8000d02:	701a      	strb	r2, [r3, #0]

	return pec_success;
 8000d04:	7afb      	ldrb	r3, [r7, #11]

}
 8000d06:	4618      	mov	r0, r3
 8000d08:	3710      	adds	r7, #16
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	bf00      	nop

08000d10 <Ltc6813_read_cfga>:

uint8_t Ltc6813_read_cfga(Ltc6813* self) {
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b082      	sub	sp, #8
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
	return Ltc6813_read_reg(self, RDCFGA);
 8000d18:	2102      	movs	r1, #2
 8000d1a:	6878      	ldr	r0, [r7, #4]
 8000d1c:	f7ff ff54 	bl	8000bc8 <Ltc6813_read_reg>
 8000d20:	4603      	mov	r3, r0
}
 8000d22:	4618      	mov	r0, r3
 8000d24:	3708      	adds	r7, #8
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bd80      	pop	{r7, pc}

08000d2a <Ltc6813_write_cfga>:

uint8_t Ltc6813_read_cfgb(Ltc6813* self) {
	return Ltc6813_read_reg(self, RDCFGB);
}

void Ltc6813_write_cfga(Ltc6813* self) {
 8000d2a:	b580      	push	{r7, lr}
 8000d2c:	b082      	sub	sp, #8
 8000d2e:	af00      	add	r7, sp, #0
 8000d30:	6078      	str	r0, [r7, #4]

	Buffer_add_pec(&(self->cfga_bfr));
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	3368      	adds	r3, #104	; 0x68
 8000d36:	4618      	mov	r0, r3
 8000d38:	f7ff fcc2 	bl	80006c0 <Buffer_add_pec>

	Ltc6813_cs_low(self);
 8000d3c:	6878      	ldr	r0, [r7, #4]
 8000d3e:	f7ff fe85 	bl	8000a4c <Ltc6813_cs_low>

	Ltc6813_send_cmd(self, WRCFGA);
 8000d42:	2101      	movs	r1, #1
 8000d44:	6878      	ldr	r0, [r7, #4]
 8000d46:	f7ff ff05 	bl	8000b54 <Ltc6813_send_cmd>
	HAL_SPI_Transmit(&self->_spi_interface, self->cfga_bfr.data, self->cfga_bfr.len, self->timeout);
 8000d4a:	6878      	ldr	r0, [r7, #4]
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	f103 0169 	add.w	r1, r3, #105	; 0x69
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8000d58:	b29a      	uxth	r2, r3
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8000d60:	f002 fbf3 	bl	800354a <HAL_SPI_Transmit>

	Ltc6813_cs_high(self);
 8000d64:	6878      	ldr	r0, [r7, #4]
 8000d66:	f7ff fe86 	bl	8000a76 <Ltc6813_cs_high>

	self->cfga_bfr.len = 6;
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	2206      	movs	r2, #6
 8000d6e:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
}
 8000d72:	bf00      	nop
 8000d74:	3708      	adds	r7, #8
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}

08000d7a <Ltc6813_read_adc>:

uint8_t Ltc6813_read_adc(Ltc6813* self, uint16_t mode) {
 8000d7a:	b580      	push	{r7, lr}
 8000d7c:	b084      	sub	sp, #16
 8000d7e:	af00      	add	r7, sp, #0
 8000d80:	6078      	str	r0, [r7, #4]
 8000d82:	460b      	mov	r3, r1
 8000d84:	807b      	strh	r3, [r7, #2]

	// Enter REFUP by waiting t(refup). Should be 4.4 ms, but can only delay integer ticks (1ms/tick)
	osDelay(5);
 8000d86:	2005      	movs	r0, #5
 8000d88:	f004 ffd8 	bl	8005d3c <osDelay>

	Ltc6813_cs_low(self);
 8000d8c:	6878      	ldr	r0, [r7, #4]
 8000d8e:	f7ff fe5d 	bl	8000a4c <Ltc6813_cs_low>

	Ltc6813_send_cmd(self, mode);
 8000d92:	887b      	ldrh	r3, [r7, #2]
 8000d94:	4619      	mov	r1, r3
 8000d96:	6878      	ldr	r0, [r7, #4]
 8000d98:	f7ff fedc 	bl	8000b54 <Ltc6813_send_cmd>

	uint32_t delay = FILTERED_ADC_DELAY;
 8000d9c:	23ca      	movs	r3, #202	; 0xca
 8000d9e:	60fb      	str	r3, [r7, #12]

	if (mode == FAST_ADC) {
 8000da0:	887b      	ldrh	r3, [r7, #2]
 8000da2:	f5b3 7f38 	cmp.w	r3, #736	; 0x2e0
 8000da6:	d102      	bne.n	8000dae <Ltc6813_read_adc+0x34>
		delay = FAST_ADC_DELAY;
 8000da8:	2302      	movs	r3, #2
 8000daa:	60fb      	str	r3, [r7, #12]
 8000dac:	e00c      	b.n	8000dc8 <Ltc6813_read_adc+0x4e>
	} else if (mode == NORMAL_ADC) {
 8000dae:	887b      	ldrh	r3, [r7, #2]
 8000db0:	f5b3 7f58 	cmp.w	r3, #864	; 0x360
 8000db4:	d102      	bne.n	8000dbc <Ltc6813_read_adc+0x42>
		delay = NORMAL_ADC_DELAY;
 8000db6:	2303      	movs	r3, #3
 8000db8:	60fb      	str	r3, [r7, #12]
 8000dba:	e005      	b.n	8000dc8 <Ltc6813_read_adc+0x4e>
	} else if (mode == FILTERED_ADC) {
 8000dbc:	887b      	ldrh	r3, [r7, #2]
 8000dbe:	f5b3 7f78 	cmp.w	r3, #992	; 0x3e0
 8000dc2:	d101      	bne.n	8000dc8 <Ltc6813_read_adc+0x4e>
		delay = FILTERED_ADC_DELAY;
 8000dc4:	23ca      	movs	r3, #202	; 0xca
 8000dc6:	60fb      	str	r3, [r7, #12]
	}

	osDelay(delay);
 8000dc8:	68f8      	ldr	r0, [r7, #12]
 8000dca:	f004 ffb7 	bl	8005d3c <osDelay>

	uint8_t success = 1;
 8000dce:	2301      	movs	r3, #1
 8000dd0:	72fb      	strb	r3, [r7, #11]

	success &= Ltc6813_read_reg(self, RDCVA);
 8000dd2:	2104      	movs	r1, #4
 8000dd4:	6878      	ldr	r0, [r7, #4]
 8000dd6:	f7ff fef7 	bl	8000bc8 <Ltc6813_read_reg>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	461a      	mov	r2, r3
 8000dde:	7afb      	ldrb	r3, [r7, #11]
 8000de0:	4013      	ands	r3, r2
 8000de2:	72fb      	strb	r3, [r7, #11]
	success &= Ltc6813_read_reg(self, RDCVB);
 8000de4:	2106      	movs	r1, #6
 8000de6:	6878      	ldr	r0, [r7, #4]
 8000de8:	f7ff feee 	bl	8000bc8 <Ltc6813_read_reg>
 8000dec:	4603      	mov	r3, r0
 8000dee:	461a      	mov	r2, r3
 8000df0:	7afb      	ldrb	r3, [r7, #11]
 8000df2:	4013      	ands	r3, r2
 8000df4:	72fb      	strb	r3, [r7, #11]
	success &= Ltc6813_read_reg(self, RDCVC);
 8000df6:	2108      	movs	r1, #8
 8000df8:	6878      	ldr	r0, [r7, #4]
 8000dfa:	f7ff fee5 	bl	8000bc8 <Ltc6813_read_reg>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	461a      	mov	r2, r3
 8000e02:	7afb      	ldrb	r3, [r7, #11]
 8000e04:	4013      	ands	r3, r2
 8000e06:	72fb      	strb	r3, [r7, #11]
	success &= Ltc6813_read_reg(self, RDCVD);
 8000e08:	210a      	movs	r1, #10
 8000e0a:	6878      	ldr	r0, [r7, #4]
 8000e0c:	f7ff fedc 	bl	8000bc8 <Ltc6813_read_reg>
 8000e10:	4603      	mov	r3, r0
 8000e12:	461a      	mov	r2, r3
 8000e14:	7afb      	ldrb	r3, [r7, #11]
 8000e16:	4013      	ands	r3, r2
 8000e18:	72fb      	strb	r3, [r7, #11]
	success &= Ltc6813_read_reg(self, RDCVE);
 8000e1a:	2109      	movs	r1, #9
 8000e1c:	6878      	ldr	r0, [r7, #4]
 8000e1e:	f7ff fed3 	bl	8000bc8 <Ltc6813_read_reg>
 8000e22:	4603      	mov	r3, r0
 8000e24:	461a      	mov	r2, r3
 8000e26:	7afb      	ldrb	r3, [r7, #11]
 8000e28:	4013      	ands	r3, r2
 8000e2a:	72fb      	strb	r3, [r7, #11]
	success &= Ltc6813_read_reg(self, RDCVF);
 8000e2c:	210b      	movs	r1, #11
 8000e2e:	6878      	ldr	r0, [r7, #4]
 8000e30:	f7ff feca 	bl	8000bc8 <Ltc6813_read_reg>
 8000e34:	4603      	mov	r3, r0
 8000e36:	461a      	mov	r2, r3
 8000e38:	7afb      	ldrb	r3, [r7, #11]
 8000e3a:	4013      	ands	r3, r2
 8000e3c:	72fb      	strb	r3, [r7, #11]

	return success;
 8000e3e:	7afb      	ldrb	r3, [r7, #11]

}
 8000e40:	4618      	mov	r0, r3
 8000e42:	3710      	adds	r7, #16
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd80      	pop	{r7, pc}

08000e48 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e4c:	f000 fffe 	bl	8001e4c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e50:	f000 f816 	bl	8000e80 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e54:	f000 fae4 	bl	8001420 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000e58:	f000 f9fc 	bl	8001254 <MX_TIM2_Init>
  MX_ADC1_Init();
 8000e5c:	f000 f87a 	bl	8000f54 <MX_ADC1_Init>
  MX_SPI1_Init();
 8000e60:	f000 f900 	bl	8001064 <MX_SPI1_Init>
  MX_TIM1_Init();
 8000e64:	f000 f934 	bl	80010d0 <MX_TIM1_Init>
  MX_TIM3_Init();
 8000e68:	f000 fa40 	bl	80012ec <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8000e6c:	f000 faae 	bl	80013cc <MX_USART1_UART_Init>
  MX_CAN1_Init();
 8000e70:	f000 f8c2 	bl	8000ff8 <MX_CAN1_Init>
  /* USER CODE BEGIN 2 */
  return bms_entry();
 8000e74:	f7ff fb8a 	bl	800058c <bms_entry>
 8000e78:	4603      	mov	r3, r0
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	bd80      	pop	{r7, pc}
	...

08000e80 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b094      	sub	sp, #80	; 0x50
 8000e84:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e86:	f107 0320 	add.w	r3, r7, #32
 8000e8a:	2230      	movs	r2, #48	; 0x30
 8000e8c:	2100      	movs	r1, #0
 8000e8e:	4618      	mov	r0, r3
 8000e90:	f007 fc04 	bl	800869c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e94:	f107 030c 	add.w	r3, r7, #12
 8000e98:	2200      	movs	r2, #0
 8000e9a:	601a      	str	r2, [r3, #0]
 8000e9c:	605a      	str	r2, [r3, #4]
 8000e9e:	609a      	str	r2, [r3, #8]
 8000ea0:	60da      	str	r2, [r3, #12]
 8000ea2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	60bb      	str	r3, [r7, #8]
 8000ea8:	4b28      	ldr	r3, [pc, #160]	; (8000f4c <SystemClock_Config+0xcc>)
 8000eaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eac:	4a27      	ldr	r2, [pc, #156]	; (8000f4c <SystemClock_Config+0xcc>)
 8000eae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000eb2:	6413      	str	r3, [r2, #64]	; 0x40
 8000eb4:	4b25      	ldr	r3, [pc, #148]	; (8000f4c <SystemClock_Config+0xcc>)
 8000eb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eb8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ebc:	60bb      	str	r3, [r7, #8]
 8000ebe:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	607b      	str	r3, [r7, #4]
 8000ec4:	4b22      	ldr	r3, [pc, #136]	; (8000f50 <SystemClock_Config+0xd0>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	4a21      	ldr	r2, [pc, #132]	; (8000f50 <SystemClock_Config+0xd0>)
 8000eca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ece:	6013      	str	r3, [r2, #0]
 8000ed0:	4b1f      	ldr	r3, [pc, #124]	; (8000f50 <SystemClock_Config+0xd0>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ed8:	607b      	str	r3, [r7, #4]
 8000eda:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000edc:	2301      	movs	r3, #1
 8000ede:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ee0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ee4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ee6:	2302      	movs	r3, #2
 8000ee8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000eea:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000eee:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000ef0:	2308      	movs	r3, #8
 8000ef2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 160;
 8000ef4:	23a0      	movs	r3, #160	; 0xa0
 8000ef6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ef8:	2302      	movs	r3, #2
 8000efa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000efc:	2304      	movs	r3, #4
 8000efe:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f00:	f107 0320 	add.w	r3, r7, #32
 8000f04:	4618      	mov	r0, r3
 8000f06:	f001 fdf3 	bl	8002af0 <HAL_RCC_OscConfig>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d001      	beq.n	8000f14 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000f10:	f000 fb22 	bl	8001558 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f14:	230f      	movs	r3, #15
 8000f16:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f18:	2302      	movs	r3, #2
 8000f1a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000f20:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000f24:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000f26:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f2a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000f2c:	f107 030c 	add.w	r3, r7, #12
 8000f30:	2105      	movs	r1, #5
 8000f32:	4618      	mov	r0, r3
 8000f34:	f002 f854 	bl	8002fe0 <HAL_RCC_ClockConfig>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d001      	beq.n	8000f42 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000f3e:	f000 fb0b 	bl	8001558 <Error_Handler>
  }
}
 8000f42:	bf00      	nop
 8000f44:	3750      	adds	r7, #80	; 0x50
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	40023800 	.word	0x40023800
 8000f50:	40007000 	.word	0x40007000

08000f54 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b084      	sub	sp, #16
 8000f58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000f5a:	463b      	mov	r3, r7
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	601a      	str	r2, [r3, #0]
 8000f60:	605a      	str	r2, [r3, #4]
 8000f62:	609a      	str	r2, [r3, #8]
 8000f64:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000f66:	4b21      	ldr	r3, [pc, #132]	; (8000fec <MX_ADC1_Init+0x98>)
 8000f68:	4a21      	ldr	r2, [pc, #132]	; (8000ff0 <MX_ADC1_Init+0x9c>)
 8000f6a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000f6c:	4b1f      	ldr	r3, [pc, #124]	; (8000fec <MX_ADC1_Init+0x98>)
 8000f6e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000f72:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000f74:	4b1d      	ldr	r3, [pc, #116]	; (8000fec <MX_ADC1_Init+0x98>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000f7a:	4b1c      	ldr	r3, [pc, #112]	; (8000fec <MX_ADC1_Init+0x98>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000f80:	4b1a      	ldr	r3, [pc, #104]	; (8000fec <MX_ADC1_Init+0x98>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f86:	4b19      	ldr	r3, [pc, #100]	; (8000fec <MX_ADC1_Init+0x98>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f8e:	4b17      	ldr	r3, [pc, #92]	; (8000fec <MX_ADC1_Init+0x98>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f94:	4b15      	ldr	r3, [pc, #84]	; (8000fec <MX_ADC1_Init+0x98>)
 8000f96:	4a17      	ldr	r2, [pc, #92]	; (8000ff4 <MX_ADC1_Init+0xa0>)
 8000f98:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f9a:	4b14      	ldr	r3, [pc, #80]	; (8000fec <MX_ADC1_Init+0x98>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000fa0:	4b12      	ldr	r3, [pc, #72]	; (8000fec <MX_ADC1_Init+0x98>)
 8000fa2:	2201      	movs	r2, #1
 8000fa4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000fa6:	4b11      	ldr	r3, [pc, #68]	; (8000fec <MX_ADC1_Init+0x98>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000fae:	4b0f      	ldr	r3, [pc, #60]	; (8000fec <MX_ADC1_Init+0x98>)
 8000fb0:	2201      	movs	r2, #1
 8000fb2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000fb4:	480d      	ldr	r0, [pc, #52]	; (8000fec <MX_ADC1_Init+0x98>)
 8000fb6:	f000 ff8b 	bl	8001ed0 <HAL_ADC_Init>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d001      	beq.n	8000fc4 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000fc0:	f000 faca 	bl	8001558 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000fc4:	2301      	movs	r3, #1
 8000fc6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000fc8:	2301      	movs	r3, #1
 8000fca:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fd0:	463b      	mov	r3, r7
 8000fd2:	4619      	mov	r1, r3
 8000fd4:	4805      	ldr	r0, [pc, #20]	; (8000fec <MX_ADC1_Init+0x98>)
 8000fd6:	f000 ffbf 	bl	8001f58 <HAL_ADC_ConfigChannel>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d001      	beq.n	8000fe4 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000fe0:	f000 faba 	bl	8001558 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000fe4:	bf00      	nop
 8000fe6:	3710      	adds	r7, #16
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd80      	pop	{r7, pc}
 8000fec:	200049f8 	.word	0x200049f8
 8000ff0:	40012000 	.word	0x40012000
 8000ff4:	0f000001 	.word	0x0f000001

08000ff8 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000ffc:	4b17      	ldr	r3, [pc, #92]	; (800105c <MX_CAN1_Init+0x64>)
 8000ffe:	4a18      	ldr	r2, [pc, #96]	; (8001060 <MX_CAN1_Init+0x68>)
 8001000:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 5;
 8001002:	4b16      	ldr	r3, [pc, #88]	; (800105c <MX_CAN1_Init+0x64>)
 8001004:	2205      	movs	r2, #5
 8001006:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001008:	4b14      	ldr	r3, [pc, #80]	; (800105c <MX_CAN1_Init+0x64>)
 800100a:	2200      	movs	r2, #0
 800100c:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800100e:	4b13      	ldr	r3, [pc, #76]	; (800105c <MX_CAN1_Init+0x64>)
 8001010:	2200      	movs	r2, #0
 8001012:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_13TQ;
 8001014:	4b11      	ldr	r3, [pc, #68]	; (800105c <MX_CAN1_Init+0x64>)
 8001016:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 800101a:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 800101c:	4b0f      	ldr	r3, [pc, #60]	; (800105c <MX_CAN1_Init+0x64>)
 800101e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001022:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001024:	4b0d      	ldr	r3, [pc, #52]	; (800105c <MX_CAN1_Init+0x64>)
 8001026:	2200      	movs	r2, #0
 8001028:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800102a:	4b0c      	ldr	r3, [pc, #48]	; (800105c <MX_CAN1_Init+0x64>)
 800102c:	2200      	movs	r2, #0
 800102e:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001030:	4b0a      	ldr	r3, [pc, #40]	; (800105c <MX_CAN1_Init+0x64>)
 8001032:	2200      	movs	r2, #0
 8001034:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8001036:	4b09      	ldr	r3, [pc, #36]	; (800105c <MX_CAN1_Init+0x64>)
 8001038:	2200      	movs	r2, #0
 800103a:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800103c:	4b07      	ldr	r3, [pc, #28]	; (800105c <MX_CAN1_Init+0x64>)
 800103e:	2200      	movs	r2, #0
 8001040:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001042:	4b06      	ldr	r3, [pc, #24]	; (800105c <MX_CAN1_Init+0x64>)
 8001044:	2200      	movs	r2, #0
 8001046:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001048:	4804      	ldr	r0, [pc, #16]	; (800105c <MX_CAN1_Init+0x64>)
 800104a:	f001 f9a3 	bl	8002394 <HAL_CAN_Init>
 800104e:	4603      	mov	r3, r0
 8001050:	2b00      	cmp	r3, #0
 8001052:	d001      	beq.n	8001058 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8001054:	f000 fa80 	bl	8001558 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8001058:	bf00      	nop
 800105a:	bd80      	pop	{r7, pc}
 800105c:	20004b6c 	.word	0x20004b6c
 8001060:	40006400 	.word	0x40006400

08001064 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001068:	4b17      	ldr	r3, [pc, #92]	; (80010c8 <MX_SPI1_Init+0x64>)
 800106a:	4a18      	ldr	r2, [pc, #96]	; (80010cc <MX_SPI1_Init+0x68>)
 800106c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800106e:	4b16      	ldr	r3, [pc, #88]	; (80010c8 <MX_SPI1_Init+0x64>)
 8001070:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001074:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001076:	4b14      	ldr	r3, [pc, #80]	; (80010c8 <MX_SPI1_Init+0x64>)
 8001078:	2200      	movs	r2, #0
 800107a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800107c:	4b12      	ldr	r3, [pc, #72]	; (80010c8 <MX_SPI1_Init+0x64>)
 800107e:	2200      	movs	r2, #0
 8001080:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001082:	4b11      	ldr	r3, [pc, #68]	; (80010c8 <MX_SPI1_Init+0x64>)
 8001084:	2202      	movs	r2, #2
 8001086:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001088:	4b0f      	ldr	r3, [pc, #60]	; (80010c8 <MX_SPI1_Init+0x64>)
 800108a:	2201      	movs	r2, #1
 800108c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800108e:	4b0e      	ldr	r3, [pc, #56]	; (80010c8 <MX_SPI1_Init+0x64>)
 8001090:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001094:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8001096:	4b0c      	ldr	r3, [pc, #48]	; (80010c8 <MX_SPI1_Init+0x64>)
 8001098:	2230      	movs	r2, #48	; 0x30
 800109a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800109c:	4b0a      	ldr	r3, [pc, #40]	; (80010c8 <MX_SPI1_Init+0x64>)
 800109e:	2200      	movs	r2, #0
 80010a0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80010a2:	4b09      	ldr	r3, [pc, #36]	; (80010c8 <MX_SPI1_Init+0x64>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80010a8:	4b07      	ldr	r3, [pc, #28]	; (80010c8 <MX_SPI1_Init+0x64>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80010ae:	4b06      	ldr	r3, [pc, #24]	; (80010c8 <MX_SPI1_Init+0x64>)
 80010b0:	220a      	movs	r2, #10
 80010b2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80010b4:	4804      	ldr	r0, [pc, #16]	; (80010c8 <MX_SPI1_Init+0x64>)
 80010b6:	f002 f9bf 	bl	8003438 <HAL_SPI_Init>
 80010ba:	4603      	mov	r3, r0
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d001      	beq.n	80010c4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80010c0:	f000 fa4a 	bl	8001558 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80010c4:	bf00      	nop
 80010c6:	bd80      	pop	{r7, pc}
 80010c8:	20004acc 	.word	0x20004acc
 80010cc:	40013000 	.word	0x40013000

080010d0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b096      	sub	sp, #88	; 0x58
 80010d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010d6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80010da:	2200      	movs	r2, #0
 80010dc:	601a      	str	r2, [r3, #0]
 80010de:	605a      	str	r2, [r3, #4]
 80010e0:	609a      	str	r2, [r3, #8]
 80010e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010e4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80010e8:	2200      	movs	r2, #0
 80010ea:	601a      	str	r2, [r3, #0]
 80010ec:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80010ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010f2:	2200      	movs	r2, #0
 80010f4:	601a      	str	r2, [r3, #0]
 80010f6:	605a      	str	r2, [r3, #4]
 80010f8:	609a      	str	r2, [r3, #8]
 80010fa:	60da      	str	r2, [r3, #12]
 80010fc:	611a      	str	r2, [r3, #16]
 80010fe:	615a      	str	r2, [r3, #20]
 8001100:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001102:	1d3b      	adds	r3, r7, #4
 8001104:	2220      	movs	r2, #32
 8001106:	2100      	movs	r1, #0
 8001108:	4618      	mov	r0, r3
 800110a:	f007 fac7 	bl	800869c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800110e:	4b4f      	ldr	r3, [pc, #316]	; (800124c <MX_TIM1_Init+0x17c>)
 8001110:	4a4f      	ldr	r2, [pc, #316]	; (8001250 <MX_TIM1_Init+0x180>)
 8001112:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 159;
 8001114:	4b4d      	ldr	r3, [pc, #308]	; (800124c <MX_TIM1_Init+0x17c>)
 8001116:	229f      	movs	r2, #159	; 0x9f
 8001118:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800111a:	4b4c      	ldr	r3, [pc, #304]	; (800124c <MX_TIM1_Init+0x17c>)
 800111c:	2200      	movs	r2, #0
 800111e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001120:	4b4a      	ldr	r3, [pc, #296]	; (800124c <MX_TIM1_Init+0x17c>)
 8001122:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001126:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001128:	4b48      	ldr	r3, [pc, #288]	; (800124c <MX_TIM1_Init+0x17c>)
 800112a:	2200      	movs	r2, #0
 800112c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800112e:	4b47      	ldr	r3, [pc, #284]	; (800124c <MX_TIM1_Init+0x17c>)
 8001130:	2200      	movs	r2, #0
 8001132:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001134:	4b45      	ldr	r3, [pc, #276]	; (800124c <MX_TIM1_Init+0x17c>)
 8001136:	2200      	movs	r2, #0
 8001138:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800113a:	4844      	ldr	r0, [pc, #272]	; (800124c <MX_TIM1_Init+0x17c>)
 800113c:	f002 ff24 	bl	8003f88 <HAL_TIM_Base_Init>
 8001140:	4603      	mov	r3, r0
 8001142:	2b00      	cmp	r3, #0
 8001144:	d001      	beq.n	800114a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001146:	f000 fa07 	bl	8001558 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800114a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800114e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001150:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001154:	4619      	mov	r1, r3
 8001156:	483d      	ldr	r0, [pc, #244]	; (800124c <MX_TIM1_Init+0x17c>)
 8001158:	f003 fbfc 	bl	8004954 <HAL_TIM_ConfigClockSource>
 800115c:	4603      	mov	r3, r0
 800115e:	2b00      	cmp	r3, #0
 8001160:	d001      	beq.n	8001166 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001162:	f000 f9f9 	bl	8001558 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001166:	4839      	ldr	r0, [pc, #228]	; (800124c <MX_TIM1_Init+0x17c>)
 8001168:	f003 f88f 	bl	800428a <HAL_TIM_PWM_Init>
 800116c:	4603      	mov	r3, r0
 800116e:	2b00      	cmp	r3, #0
 8001170:	d001      	beq.n	8001176 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001172:	f000 f9f1 	bl	8001558 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8001176:	4835      	ldr	r0, [pc, #212]	; (800124c <MX_TIM1_Init+0x17c>)
 8001178:	f003 f82e 	bl	80041d8 <HAL_TIM_OC_Init>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	d001      	beq.n	8001186 <MX_TIM1_Init+0xb6>
  {
    Error_Handler();
 8001182:	f000 f9e9 	bl	8001558 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001186:	2300      	movs	r3, #0
 8001188:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800118a:	2300      	movs	r3, #0
 800118c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800118e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001192:	4619      	mov	r1, r3
 8001194:	482d      	ldr	r0, [pc, #180]	; (800124c <MX_TIM1_Init+0x17c>)
 8001196:	f004 f8dd 	bl	8005354 <HAL_TIMEx_MasterConfigSynchronization>
 800119a:	4603      	mov	r3, r0
 800119c:	2b00      	cmp	r3, #0
 800119e:	d001      	beq.n	80011a4 <MX_TIM1_Init+0xd4>
  {
    Error_Handler();
 80011a0:	f000 f9da 	bl	8001558 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80011a4:	2360      	movs	r3, #96	; 0x60
 80011a6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80011a8:	2300      	movs	r3, #0
 80011aa:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011ac:	2300      	movs	r3, #0
 80011ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80011b0:	2300      	movs	r3, #0
 80011b2:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011b4:	2300      	movs	r3, #0
 80011b6:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80011b8:	2300      	movs	r3, #0
 80011ba:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80011bc:	2300      	movs	r3, #0
 80011be:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80011c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011c4:	2200      	movs	r2, #0
 80011c6:	4619      	mov	r1, r3
 80011c8:	4820      	ldr	r0, [pc, #128]	; (800124c <MX_TIM1_Init+0x17c>)
 80011ca:	f003 fb05 	bl	80047d8 <HAL_TIM_PWM_ConfigChannel>
 80011ce:	4603      	mov	r3, r0
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d001      	beq.n	80011d8 <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 80011d4:	f000 f9c0 	bl	8001558 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80011d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011dc:	2204      	movs	r2, #4
 80011de:	4619      	mov	r1, r3
 80011e0:	481a      	ldr	r0, [pc, #104]	; (800124c <MX_TIM1_Init+0x17c>)
 80011e2:	f003 faf9 	bl	80047d8 <HAL_TIM_PWM_ConfigChannel>
 80011e6:	4603      	mov	r3, r0
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d001      	beq.n	80011f0 <MX_TIM1_Init+0x120>
  {
    Error_Handler();
 80011ec:	f000 f9b4 	bl	8001558 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80011f0:	2300      	movs	r3, #0
 80011f2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80011f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011f8:	2208      	movs	r2, #8
 80011fa:	4619      	mov	r1, r3
 80011fc:	4813      	ldr	r0, [pc, #76]	; (800124c <MX_TIM1_Init+0x17c>)
 80011fe:	f003 f9ff 	bl	8004600 <HAL_TIM_OC_ConfigChannel>
 8001202:	4603      	mov	r3, r0
 8001204:	2b00      	cmp	r3, #0
 8001206:	d001      	beq.n	800120c <MX_TIM1_Init+0x13c>
  {
    Error_Handler();
 8001208:	f000 f9a6 	bl	8001558 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800120c:	2300      	movs	r3, #0
 800120e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001210:	2300      	movs	r3, #0
 8001212:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001214:	2300      	movs	r3, #0
 8001216:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001218:	2300      	movs	r3, #0
 800121a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800121c:	2300      	movs	r3, #0
 800121e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001220:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001224:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001226:	2300      	movs	r3, #0
 8001228:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800122a:	1d3b      	adds	r3, r7, #4
 800122c:	4619      	mov	r1, r3
 800122e:	4807      	ldr	r0, [pc, #28]	; (800124c <MX_TIM1_Init+0x17c>)
 8001230:	f004 f90c 	bl	800544c <HAL_TIMEx_ConfigBreakDeadTime>
 8001234:	4603      	mov	r3, r0
 8001236:	2b00      	cmp	r3, #0
 8001238:	d001      	beq.n	800123e <MX_TIM1_Init+0x16e>
  {
    Error_Handler();
 800123a:	f000 f98d 	bl	8001558 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800123e:	4803      	ldr	r0, [pc, #12]	; (800124c <MX_TIM1_Init+0x17c>)
 8001240:	f000 fb2e 	bl	80018a0 <HAL_TIM_MspPostInit>

}
 8001244:	bf00      	nop
 8001246:	3758      	adds	r7, #88	; 0x58
 8001248:	46bd      	mov	sp, r7
 800124a:	bd80      	pop	{r7, pc}
 800124c:	20004a84 	.word	0x20004a84
 8001250:	40010000 	.word	0x40010000

08001254 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b086      	sub	sp, #24
 8001258:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800125a:	f107 0308 	add.w	r3, r7, #8
 800125e:	2200      	movs	r2, #0
 8001260:	601a      	str	r2, [r3, #0]
 8001262:	605a      	str	r2, [r3, #4]
 8001264:	609a      	str	r2, [r3, #8]
 8001266:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001268:	463b      	mov	r3, r7
 800126a:	2200      	movs	r2, #0
 800126c:	601a      	str	r2, [r3, #0]
 800126e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001270:	4b1d      	ldr	r3, [pc, #116]	; (80012e8 <MX_TIM2_Init+0x94>)
 8001272:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001276:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 79;
 8001278:	4b1b      	ldr	r3, [pc, #108]	; (80012e8 <MX_TIM2_Init+0x94>)
 800127a:	224f      	movs	r2, #79	; 0x4f
 800127c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800127e:	4b1a      	ldr	r3, [pc, #104]	; (80012e8 <MX_TIM2_Init+0x94>)
 8001280:	2200      	movs	r2, #0
 8001282:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001284:	4b18      	ldr	r3, [pc, #96]	; (80012e8 <MX_TIM2_Init+0x94>)
 8001286:	f04f 32ff 	mov.w	r2, #4294967295
 800128a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800128c:	4b16      	ldr	r3, [pc, #88]	; (80012e8 <MX_TIM2_Init+0x94>)
 800128e:	2200      	movs	r2, #0
 8001290:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001292:	4b15      	ldr	r3, [pc, #84]	; (80012e8 <MX_TIM2_Init+0x94>)
 8001294:	2200      	movs	r2, #0
 8001296:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001298:	4813      	ldr	r0, [pc, #76]	; (80012e8 <MX_TIM2_Init+0x94>)
 800129a:	f002 fe75 	bl	8003f88 <HAL_TIM_Base_Init>
 800129e:	4603      	mov	r3, r0
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d001      	beq.n	80012a8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80012a4:	f000 f958 	bl	8001558 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012ac:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80012ae:	f107 0308 	add.w	r3, r7, #8
 80012b2:	4619      	mov	r1, r3
 80012b4:	480c      	ldr	r0, [pc, #48]	; (80012e8 <MX_TIM2_Init+0x94>)
 80012b6:	f003 fb4d 	bl	8004954 <HAL_TIM_ConfigClockSource>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d001      	beq.n	80012c4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80012c0:	f000 f94a 	bl	8001558 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012c4:	2300      	movs	r3, #0
 80012c6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012c8:	2300      	movs	r3, #0
 80012ca:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80012cc:	463b      	mov	r3, r7
 80012ce:	4619      	mov	r1, r3
 80012d0:	4805      	ldr	r0, [pc, #20]	; (80012e8 <MX_TIM2_Init+0x94>)
 80012d2:	f004 f83f 	bl	8005354 <HAL_TIMEx_MasterConfigSynchronization>
 80012d6:	4603      	mov	r3, r0
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d001      	beq.n	80012e0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80012dc:	f000 f93c 	bl	8001558 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80012e0:	bf00      	nop
 80012e2:	3718      	adds	r7, #24
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}
 80012e8:	20004b24 	.word	0x20004b24

080012ec <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b08a      	sub	sp, #40	; 0x28
 80012f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012f2:	f107 0318 	add.w	r3, r7, #24
 80012f6:	2200      	movs	r2, #0
 80012f8:	601a      	str	r2, [r3, #0]
 80012fa:	605a      	str	r2, [r3, #4]
 80012fc:	609a      	str	r2, [r3, #8]
 80012fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001300:	f107 0310 	add.w	r3, r7, #16
 8001304:	2200      	movs	r2, #0
 8001306:	601a      	str	r2, [r3, #0]
 8001308:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800130a:	463b      	mov	r3, r7
 800130c:	2200      	movs	r2, #0
 800130e:	601a      	str	r2, [r3, #0]
 8001310:	605a      	str	r2, [r3, #4]
 8001312:	609a      	str	r2, [r3, #8]
 8001314:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001316:	4b2b      	ldr	r3, [pc, #172]	; (80013c4 <MX_TIM3_Init+0xd8>)
 8001318:	4a2b      	ldr	r2, [pc, #172]	; (80013c8 <MX_TIM3_Init+0xdc>)
 800131a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800131c:	4b29      	ldr	r3, [pc, #164]	; (80013c4 <MX_TIM3_Init+0xd8>)
 800131e:	2200      	movs	r2, #0
 8001320:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001322:	4b28      	ldr	r3, [pc, #160]	; (80013c4 <MX_TIM3_Init+0xd8>)
 8001324:	2200      	movs	r2, #0
 8001326:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001328:	4b26      	ldr	r3, [pc, #152]	; (80013c4 <MX_TIM3_Init+0xd8>)
 800132a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800132e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001330:	4b24      	ldr	r3, [pc, #144]	; (80013c4 <MX_TIM3_Init+0xd8>)
 8001332:	2200      	movs	r2, #0
 8001334:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001336:	4b23      	ldr	r3, [pc, #140]	; (80013c4 <MX_TIM3_Init+0xd8>)
 8001338:	2200      	movs	r2, #0
 800133a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800133c:	4821      	ldr	r0, [pc, #132]	; (80013c4 <MX_TIM3_Init+0xd8>)
 800133e:	f002 fe23 	bl	8003f88 <HAL_TIM_Base_Init>
 8001342:	4603      	mov	r3, r0
 8001344:	2b00      	cmp	r3, #0
 8001346:	d001      	beq.n	800134c <MX_TIM3_Init+0x60>
  {
    Error_Handler();
 8001348:	f000 f906 	bl	8001558 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800134c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001350:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001352:	f107 0318 	add.w	r3, r7, #24
 8001356:	4619      	mov	r1, r3
 8001358:	481a      	ldr	r0, [pc, #104]	; (80013c4 <MX_TIM3_Init+0xd8>)
 800135a:	f003 fafb 	bl	8004954 <HAL_TIM_ConfigClockSource>
 800135e:	4603      	mov	r3, r0
 8001360:	2b00      	cmp	r3, #0
 8001362:	d001      	beq.n	8001368 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001364:	f000 f8f8 	bl	8001558 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8001368:	4816      	ldr	r0, [pc, #88]	; (80013c4 <MX_TIM3_Init+0xd8>)
 800136a:	f002 ffe7 	bl	800433c <HAL_TIM_IC_Init>
 800136e:	4603      	mov	r3, r0
 8001370:	2b00      	cmp	r3, #0
 8001372:	d001      	beq.n	8001378 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001374:	f000 f8f0 	bl	8001558 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001378:	2300      	movs	r3, #0
 800137a:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800137c:	2300      	movs	r3, #0
 800137e:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001380:	f107 0310 	add.w	r3, r7, #16
 8001384:	4619      	mov	r1, r3
 8001386:	480f      	ldr	r0, [pc, #60]	; (80013c4 <MX_TIM3_Init+0xd8>)
 8001388:	f003 ffe4 	bl	8005354 <HAL_TIMEx_MasterConfigSynchronization>
 800138c:	4603      	mov	r3, r0
 800138e:	2b00      	cmp	r3, #0
 8001390:	d001      	beq.n	8001396 <MX_TIM3_Init+0xaa>
  {
    Error_Handler();
 8001392:	f000 f8e1 	bl	8001558 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001396:	2300      	movs	r3, #0
 8001398:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800139a:	2301      	movs	r3, #1
 800139c:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800139e:	2300      	movs	r3, #0
 80013a0:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80013a2:	2300      	movs	r3, #0
 80013a4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80013a6:	463b      	mov	r3, r7
 80013a8:	2200      	movs	r2, #0
 80013aa:	4619      	mov	r1, r3
 80013ac:	4805      	ldr	r0, [pc, #20]	; (80013c4 <MX_TIM3_Init+0xd8>)
 80013ae:	f003 f97f 	bl	80046b0 <HAL_TIM_IC_ConfigChannel>
 80013b2:	4603      	mov	r3, r0
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d001      	beq.n	80013bc <MX_TIM3_Init+0xd0>
  {
    Error_Handler();
 80013b8:	f000 f8ce 	bl	8001558 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80013bc:	bf00      	nop
 80013be:	3728      	adds	r7, #40	; 0x28
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bd80      	pop	{r7, pc}
 80013c4:	200049b0 	.word	0x200049b0
 80013c8:	40000400 	.word	0x40000400

080013cc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80013d0:	4b11      	ldr	r3, [pc, #68]	; (8001418 <MX_USART1_UART_Init+0x4c>)
 80013d2:	4a12      	ldr	r2, [pc, #72]	; (800141c <MX_USART1_UART_Init+0x50>)
 80013d4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80013d6:	4b10      	ldr	r3, [pc, #64]	; (8001418 <MX_USART1_UART_Init+0x4c>)
 80013d8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80013dc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80013de:	4b0e      	ldr	r3, [pc, #56]	; (8001418 <MX_USART1_UART_Init+0x4c>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80013e4:	4b0c      	ldr	r3, [pc, #48]	; (8001418 <MX_USART1_UART_Init+0x4c>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80013ea:	4b0b      	ldr	r3, [pc, #44]	; (8001418 <MX_USART1_UART_Init+0x4c>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80013f0:	4b09      	ldr	r3, [pc, #36]	; (8001418 <MX_USART1_UART_Init+0x4c>)
 80013f2:	220c      	movs	r2, #12
 80013f4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013f6:	4b08      	ldr	r3, [pc, #32]	; (8001418 <MX_USART1_UART_Init+0x4c>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80013fc:	4b06      	ldr	r3, [pc, #24]	; (8001418 <MX_USART1_UART_Init+0x4c>)
 80013fe:	2200      	movs	r2, #0
 8001400:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001402:	4805      	ldr	r0, [pc, #20]	; (8001418 <MX_USART1_UART_Init+0x4c>)
 8001404:	f004 f888 	bl	8005518 <HAL_UART_Init>
 8001408:	4603      	mov	r3, r0
 800140a:	2b00      	cmp	r3, #0
 800140c:	d001      	beq.n	8001412 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800140e:	f000 f8a3 	bl	8001558 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001412:	bf00      	nop
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	20004a40 	.word	0x20004a40
 800141c:	40011000 	.word	0x40011000

08001420 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b08a      	sub	sp, #40	; 0x28
 8001424:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001426:	f107 0314 	add.w	r3, r7, #20
 800142a:	2200      	movs	r2, #0
 800142c:	601a      	str	r2, [r3, #0]
 800142e:	605a      	str	r2, [r3, #4]
 8001430:	609a      	str	r2, [r3, #8]
 8001432:	60da      	str	r2, [r3, #12]
 8001434:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001436:	2300      	movs	r3, #0
 8001438:	613b      	str	r3, [r7, #16]
 800143a:	4b3a      	ldr	r3, [pc, #232]	; (8001524 <MX_GPIO_Init+0x104>)
 800143c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800143e:	4a39      	ldr	r2, [pc, #228]	; (8001524 <MX_GPIO_Init+0x104>)
 8001440:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001444:	6313      	str	r3, [r2, #48]	; 0x30
 8001446:	4b37      	ldr	r3, [pc, #220]	; (8001524 <MX_GPIO_Init+0x104>)
 8001448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800144a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800144e:	613b      	str	r3, [r7, #16]
 8001450:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001452:	2300      	movs	r3, #0
 8001454:	60fb      	str	r3, [r7, #12]
 8001456:	4b33      	ldr	r3, [pc, #204]	; (8001524 <MX_GPIO_Init+0x104>)
 8001458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800145a:	4a32      	ldr	r2, [pc, #200]	; (8001524 <MX_GPIO_Init+0x104>)
 800145c:	f043 0304 	orr.w	r3, r3, #4
 8001460:	6313      	str	r3, [r2, #48]	; 0x30
 8001462:	4b30      	ldr	r3, [pc, #192]	; (8001524 <MX_GPIO_Init+0x104>)
 8001464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001466:	f003 0304 	and.w	r3, r3, #4
 800146a:	60fb      	str	r3, [r7, #12]
 800146c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800146e:	2300      	movs	r3, #0
 8001470:	60bb      	str	r3, [r7, #8]
 8001472:	4b2c      	ldr	r3, [pc, #176]	; (8001524 <MX_GPIO_Init+0x104>)
 8001474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001476:	4a2b      	ldr	r2, [pc, #172]	; (8001524 <MX_GPIO_Init+0x104>)
 8001478:	f043 0301 	orr.w	r3, r3, #1
 800147c:	6313      	str	r3, [r2, #48]	; 0x30
 800147e:	4b29      	ldr	r3, [pc, #164]	; (8001524 <MX_GPIO_Init+0x104>)
 8001480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001482:	f003 0301 	and.w	r3, r3, #1
 8001486:	60bb      	str	r3, [r7, #8]
 8001488:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800148a:	2300      	movs	r3, #0
 800148c:	607b      	str	r3, [r7, #4]
 800148e:	4b25      	ldr	r3, [pc, #148]	; (8001524 <MX_GPIO_Init+0x104>)
 8001490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001492:	4a24      	ldr	r2, [pc, #144]	; (8001524 <MX_GPIO_Init+0x104>)
 8001494:	f043 0302 	orr.w	r3, r3, #2
 8001498:	6313      	str	r3, [r2, #48]	; 0x30
 800149a:	4b22      	ldr	r3, [pc, #136]	; (8001524 <MX_GPIO_Init+0x104>)
 800149c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149e:	f003 0302 	and.w	r3, r3, #2
 80014a2:	607b      	str	r3, [r7, #4]
 80014a4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 80014a6:	2200      	movs	r2, #0
 80014a8:	2110      	movs	r1, #16
 80014aa:	481f      	ldr	r0, [pc, #124]	; (8001528 <MX_GPIO_Init+0x108>)
 80014ac:	f001 faec 	bl	8002a88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS2_GPIO_Port, CS2_Pin, GPIO_PIN_RESET);
 80014b0:	2200      	movs	r2, #0
 80014b2:	2110      	movs	r1, #16
 80014b4:	481d      	ldr	r0, [pc, #116]	; (800152c <MX_GPIO_Init+0x10c>)
 80014b6:	f001 fae7 	bl	8002a88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CONTACTOR_Pin|PRECHARGE_Pin|EXT_LED_Pin, GPIO_PIN_RESET);
 80014ba:	2200      	movs	r2, #0
 80014bc:	f240 4106 	movw	r1, #1030	; 0x406
 80014c0:	481b      	ldr	r0, [pc, #108]	; (8001530 <MX_GPIO_Init+0x110>)
 80014c2:	f001 fae1 	bl	8002a88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CS_Pin */
  GPIO_InitStruct.Pin = CS_Pin;
 80014c6:	2310      	movs	r3, #16
 80014c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014ca:	2301      	movs	r3, #1
 80014cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ce:	2300      	movs	r3, #0
 80014d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014d2:	2300      	movs	r3, #0
 80014d4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CS_GPIO_Port, &GPIO_InitStruct);
 80014d6:	f107 0314 	add.w	r3, r7, #20
 80014da:	4619      	mov	r1, r3
 80014dc:	4812      	ldr	r0, [pc, #72]	; (8001528 <MX_GPIO_Init+0x108>)
 80014de:	f001 f937 	bl	8002750 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS2_Pin */
  GPIO_InitStruct.Pin = CS2_Pin;
 80014e2:	2310      	movs	r3, #16
 80014e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014e6:	2301      	movs	r3, #1
 80014e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ea:	2300      	movs	r3, #0
 80014ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ee:	2300      	movs	r3, #0
 80014f0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CS2_GPIO_Port, &GPIO_InitStruct);
 80014f2:	f107 0314 	add.w	r3, r7, #20
 80014f6:	4619      	mov	r1, r3
 80014f8:	480c      	ldr	r0, [pc, #48]	; (800152c <MX_GPIO_Init+0x10c>)
 80014fa:	f001 f929 	bl	8002750 <HAL_GPIO_Init>

  /*Configure GPIO pins : CONTACTOR_Pin PRECHARGE_Pin EXT_LED_Pin */
  GPIO_InitStruct.Pin = CONTACTOR_Pin|PRECHARGE_Pin|EXT_LED_Pin;
 80014fe:	f240 4306 	movw	r3, #1030	; 0x406
 8001502:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001504:	2301      	movs	r3, #1
 8001506:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001508:	2300      	movs	r3, #0
 800150a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800150c:	2300      	movs	r3, #0
 800150e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001510:	f107 0314 	add.w	r3, r7, #20
 8001514:	4619      	mov	r1, r3
 8001516:	4806      	ldr	r0, [pc, #24]	; (8001530 <MX_GPIO_Init+0x110>)
 8001518:	f001 f91a 	bl	8002750 <HAL_GPIO_Init>

}
 800151c:	bf00      	nop
 800151e:	3728      	adds	r7, #40	; 0x28
 8001520:	46bd      	mov	sp, r7
 8001522:	bd80      	pop	{r7, pc}
 8001524:	40023800 	.word	0x40023800
 8001528:	40020000 	.word	0x40020000
 800152c:	40020800 	.word	0x40020800
 8001530:	40020400 	.word	0x40020400

08001534 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b082      	sub	sp, #8
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM9) {
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	4a04      	ldr	r2, [pc, #16]	; (8001554 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001542:	4293      	cmp	r3, r2
 8001544:	d101      	bne.n	800154a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001546:	f000 fca3 	bl	8001e90 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800154a:	bf00      	nop
 800154c:	3708      	adds	r7, #8
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	40014000 	.word	0x40014000

08001558 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001558:	b480      	push	{r7}
 800155a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800155c:	b672      	cpsid	i
}
 800155e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001560:	e7fe      	b.n	8001560 <Error_Handler+0x8>
	...

08001564 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b082      	sub	sp, #8
 8001568:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800156a:	2300      	movs	r3, #0
 800156c:	607b      	str	r3, [r7, #4]
 800156e:	4b12      	ldr	r3, [pc, #72]	; (80015b8 <HAL_MspInit+0x54>)
 8001570:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001572:	4a11      	ldr	r2, [pc, #68]	; (80015b8 <HAL_MspInit+0x54>)
 8001574:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001578:	6453      	str	r3, [r2, #68]	; 0x44
 800157a:	4b0f      	ldr	r3, [pc, #60]	; (80015b8 <HAL_MspInit+0x54>)
 800157c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800157e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001582:	607b      	str	r3, [r7, #4]
 8001584:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001586:	2300      	movs	r3, #0
 8001588:	603b      	str	r3, [r7, #0]
 800158a:	4b0b      	ldr	r3, [pc, #44]	; (80015b8 <HAL_MspInit+0x54>)
 800158c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800158e:	4a0a      	ldr	r2, [pc, #40]	; (80015b8 <HAL_MspInit+0x54>)
 8001590:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001594:	6413      	str	r3, [r2, #64]	; 0x40
 8001596:	4b08      	ldr	r3, [pc, #32]	; (80015b8 <HAL_MspInit+0x54>)
 8001598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800159a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800159e:	603b      	str	r3, [r7, #0]
 80015a0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80015a2:	2200      	movs	r2, #0
 80015a4:	210f      	movs	r1, #15
 80015a6:	f06f 0001 	mvn.w	r0, #1
 80015aa:	f001 f8a7 	bl	80026fc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015ae:	bf00      	nop
 80015b0:	3708      	adds	r7, #8
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}
 80015b6:	bf00      	nop
 80015b8:	40023800 	.word	0x40023800

080015bc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b08a      	sub	sp, #40	; 0x28
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015c4:	f107 0314 	add.w	r3, r7, #20
 80015c8:	2200      	movs	r2, #0
 80015ca:	601a      	str	r2, [r3, #0]
 80015cc:	605a      	str	r2, [r3, #4]
 80015ce:	609a      	str	r2, [r3, #8]
 80015d0:	60da      	str	r2, [r3, #12]
 80015d2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4a24      	ldr	r2, [pc, #144]	; (800166c <HAL_ADC_MspInit+0xb0>)
 80015da:	4293      	cmp	r3, r2
 80015dc:	d141      	bne.n	8001662 <HAL_ADC_MspInit+0xa6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80015de:	2300      	movs	r3, #0
 80015e0:	613b      	str	r3, [r7, #16]
 80015e2:	4b23      	ldr	r3, [pc, #140]	; (8001670 <HAL_ADC_MspInit+0xb4>)
 80015e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015e6:	4a22      	ldr	r2, [pc, #136]	; (8001670 <HAL_ADC_MspInit+0xb4>)
 80015e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015ec:	6453      	str	r3, [r2, #68]	; 0x44
 80015ee:	4b20      	ldr	r3, [pc, #128]	; (8001670 <HAL_ADC_MspInit+0xb4>)
 80015f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015f6:	613b      	str	r3, [r7, #16]
 80015f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80015fa:	2300      	movs	r3, #0
 80015fc:	60fb      	str	r3, [r7, #12]
 80015fe:	4b1c      	ldr	r3, [pc, #112]	; (8001670 <HAL_ADC_MspInit+0xb4>)
 8001600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001602:	4a1b      	ldr	r2, [pc, #108]	; (8001670 <HAL_ADC_MspInit+0xb4>)
 8001604:	f043 0304 	orr.w	r3, r3, #4
 8001608:	6313      	str	r3, [r2, #48]	; 0x30
 800160a:	4b19      	ldr	r3, [pc, #100]	; (8001670 <HAL_ADC_MspInit+0xb4>)
 800160c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800160e:	f003 0304 	and.w	r3, r3, #4
 8001612:	60fb      	str	r3, [r7, #12]
 8001614:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001616:	2300      	movs	r3, #0
 8001618:	60bb      	str	r3, [r7, #8]
 800161a:	4b15      	ldr	r3, [pc, #84]	; (8001670 <HAL_ADC_MspInit+0xb4>)
 800161c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800161e:	4a14      	ldr	r2, [pc, #80]	; (8001670 <HAL_ADC_MspInit+0xb4>)
 8001620:	f043 0301 	orr.w	r3, r3, #1
 8001624:	6313      	str	r3, [r2, #48]	; 0x30
 8001626:	4b12      	ldr	r3, [pc, #72]	; (8001670 <HAL_ADC_MspInit+0xb4>)
 8001628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800162a:	f003 0301 	and.w	r3, r3, #1
 800162e:	60bb      	str	r3, [r7, #8]
 8001630:	68bb      	ldr	r3, [r7, #8]
    PC1     ------> ADC1_IN11
    PC2     ------> ADC1_IN12
    PC3     ------> ADC1_IN13
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = ADC1_IN10_CURRENT_SENSE_Pin|ADC1_IN11_VBATT_Pin|ADC1_IN12_MC_CAP_Pin|ADC1_IN13_CONTACTOR_Pin;
 8001632:	230f      	movs	r3, #15
 8001634:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001636:	2303      	movs	r3, #3
 8001638:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800163a:	2300      	movs	r3, #0
 800163c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800163e:	f107 0314 	add.w	r3, r7, #20
 8001642:	4619      	mov	r1, r3
 8001644:	480b      	ldr	r0, [pc, #44]	; (8001674 <HAL_ADC_MspInit+0xb8>)
 8001646:	f001 f883 	bl	8002750 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC1_IN1_BUCK_TEMP_Pin;
 800164a:	2302      	movs	r3, #2
 800164c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800164e:	2303      	movs	r3, #3
 8001650:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001652:	2300      	movs	r3, #0
 8001654:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ADC1_IN1_BUCK_TEMP_GPIO_Port, &GPIO_InitStruct);
 8001656:	f107 0314 	add.w	r3, r7, #20
 800165a:	4619      	mov	r1, r3
 800165c:	4806      	ldr	r0, [pc, #24]	; (8001678 <HAL_ADC_MspInit+0xbc>)
 800165e:	f001 f877 	bl	8002750 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001662:	bf00      	nop
 8001664:	3728      	adds	r7, #40	; 0x28
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop
 800166c:	40012000 	.word	0x40012000
 8001670:	40023800 	.word	0x40023800
 8001674:	40020800 	.word	0x40020800
 8001678:	40020000 	.word	0x40020000

0800167c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b08a      	sub	sp, #40	; 0x28
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001684:	f107 0314 	add.w	r3, r7, #20
 8001688:	2200      	movs	r2, #0
 800168a:	601a      	str	r2, [r3, #0]
 800168c:	605a      	str	r2, [r3, #4]
 800168e:	609a      	str	r2, [r3, #8]
 8001690:	60da      	str	r2, [r3, #12]
 8001692:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4a19      	ldr	r2, [pc, #100]	; (8001700 <HAL_CAN_MspInit+0x84>)
 800169a:	4293      	cmp	r3, r2
 800169c:	d12c      	bne.n	80016f8 <HAL_CAN_MspInit+0x7c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800169e:	2300      	movs	r3, #0
 80016a0:	613b      	str	r3, [r7, #16]
 80016a2:	4b18      	ldr	r3, [pc, #96]	; (8001704 <HAL_CAN_MspInit+0x88>)
 80016a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016a6:	4a17      	ldr	r2, [pc, #92]	; (8001704 <HAL_CAN_MspInit+0x88>)
 80016a8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80016ac:	6413      	str	r3, [r2, #64]	; 0x40
 80016ae:	4b15      	ldr	r3, [pc, #84]	; (8001704 <HAL_CAN_MspInit+0x88>)
 80016b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016b6:	613b      	str	r3, [r7, #16]
 80016b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016ba:	2300      	movs	r3, #0
 80016bc:	60fb      	str	r3, [r7, #12]
 80016be:	4b11      	ldr	r3, [pc, #68]	; (8001704 <HAL_CAN_MspInit+0x88>)
 80016c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c2:	4a10      	ldr	r2, [pc, #64]	; (8001704 <HAL_CAN_MspInit+0x88>)
 80016c4:	f043 0301 	orr.w	r3, r3, #1
 80016c8:	6313      	str	r3, [r2, #48]	; 0x30
 80016ca:	4b0e      	ldr	r3, [pc, #56]	; (8001704 <HAL_CAN_MspInit+0x88>)
 80016cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ce:	f003 0301 	and.w	r3, r3, #1
 80016d2:	60fb      	str	r3, [r7, #12]
 80016d4:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80016d6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80016da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016dc:	2302      	movs	r3, #2
 80016de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e0:	2300      	movs	r3, #0
 80016e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016e4:	2303      	movs	r3, #3
 80016e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80016e8:	2309      	movs	r3, #9
 80016ea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016ec:	f107 0314 	add.w	r3, r7, #20
 80016f0:	4619      	mov	r1, r3
 80016f2:	4805      	ldr	r0, [pc, #20]	; (8001708 <HAL_CAN_MspInit+0x8c>)
 80016f4:	f001 f82c 	bl	8002750 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80016f8:	bf00      	nop
 80016fa:	3728      	adds	r7, #40	; 0x28
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bd80      	pop	{r7, pc}
 8001700:	40006400 	.word	0x40006400
 8001704:	40023800 	.word	0x40023800
 8001708:	40020000 	.word	0x40020000

0800170c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b08a      	sub	sp, #40	; 0x28
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001714:	f107 0314 	add.w	r3, r7, #20
 8001718:	2200      	movs	r2, #0
 800171a:	601a      	str	r2, [r3, #0]
 800171c:	605a      	str	r2, [r3, #4]
 800171e:	609a      	str	r2, [r3, #8]
 8001720:	60da      	str	r2, [r3, #12]
 8001722:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	4a19      	ldr	r2, [pc, #100]	; (8001790 <HAL_SPI_MspInit+0x84>)
 800172a:	4293      	cmp	r3, r2
 800172c:	d12b      	bne.n	8001786 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800172e:	2300      	movs	r3, #0
 8001730:	613b      	str	r3, [r7, #16]
 8001732:	4b18      	ldr	r3, [pc, #96]	; (8001794 <HAL_SPI_MspInit+0x88>)
 8001734:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001736:	4a17      	ldr	r2, [pc, #92]	; (8001794 <HAL_SPI_MspInit+0x88>)
 8001738:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800173c:	6453      	str	r3, [r2, #68]	; 0x44
 800173e:	4b15      	ldr	r3, [pc, #84]	; (8001794 <HAL_SPI_MspInit+0x88>)
 8001740:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001742:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001746:	613b      	str	r3, [r7, #16]
 8001748:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800174a:	2300      	movs	r3, #0
 800174c:	60fb      	str	r3, [r7, #12]
 800174e:	4b11      	ldr	r3, [pc, #68]	; (8001794 <HAL_SPI_MspInit+0x88>)
 8001750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001752:	4a10      	ldr	r2, [pc, #64]	; (8001794 <HAL_SPI_MspInit+0x88>)
 8001754:	f043 0301 	orr.w	r3, r3, #1
 8001758:	6313      	str	r3, [r2, #48]	; 0x30
 800175a:	4b0e      	ldr	r3, [pc, #56]	; (8001794 <HAL_SPI_MspInit+0x88>)
 800175c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800175e:	f003 0301 	and.w	r3, r3, #1
 8001762:	60fb      	str	r3, [r7, #12]
 8001764:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001766:	23e0      	movs	r3, #224	; 0xe0
 8001768:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800176a:	2302      	movs	r3, #2
 800176c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800176e:	2300      	movs	r3, #0
 8001770:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001772:	2303      	movs	r3, #3
 8001774:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001776:	2305      	movs	r3, #5
 8001778:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800177a:	f107 0314 	add.w	r3, r7, #20
 800177e:	4619      	mov	r1, r3
 8001780:	4805      	ldr	r0, [pc, #20]	; (8001798 <HAL_SPI_MspInit+0x8c>)
 8001782:	f000 ffe5 	bl	8002750 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001786:	bf00      	nop
 8001788:	3728      	adds	r7, #40	; 0x28
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}
 800178e:	bf00      	nop
 8001790:	40013000 	.word	0x40013000
 8001794:	40023800 	.word	0x40023800
 8001798:	40020000 	.word	0x40020000

0800179c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b08c      	sub	sp, #48	; 0x30
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017a4:	f107 031c 	add.w	r3, r7, #28
 80017a8:	2200      	movs	r2, #0
 80017aa:	601a      	str	r2, [r3, #0]
 80017ac:	605a      	str	r2, [r3, #4]
 80017ae:	609a      	str	r2, [r3, #8]
 80017b0:	60da      	str	r2, [r3, #12]
 80017b2:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	4a35      	ldr	r2, [pc, #212]	; (8001890 <HAL_TIM_Base_MspInit+0xf4>)
 80017ba:	4293      	cmp	r3, r2
 80017bc:	d116      	bne.n	80017ec <HAL_TIM_Base_MspInit+0x50>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80017be:	2300      	movs	r3, #0
 80017c0:	61bb      	str	r3, [r7, #24]
 80017c2:	4b34      	ldr	r3, [pc, #208]	; (8001894 <HAL_TIM_Base_MspInit+0xf8>)
 80017c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017c6:	4a33      	ldr	r2, [pc, #204]	; (8001894 <HAL_TIM_Base_MspInit+0xf8>)
 80017c8:	f043 0301 	orr.w	r3, r3, #1
 80017cc:	6453      	str	r3, [r2, #68]	; 0x44
 80017ce:	4b31      	ldr	r3, [pc, #196]	; (8001894 <HAL_TIM_Base_MspInit+0xf8>)
 80017d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017d2:	f003 0301 	and.w	r3, r3, #1
 80017d6:	61bb      	str	r3, [r7, #24]
 80017d8:	69bb      	ldr	r3, [r7, #24]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 80017da:	2200      	movs	r2, #0
 80017dc:	2100      	movs	r1, #0
 80017de:	2018      	movs	r0, #24
 80017e0:	f000 ff8c 	bl	80026fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 80017e4:	2018      	movs	r0, #24
 80017e6:	f000 ffa5 	bl	8002734 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80017ea:	e04c      	b.n	8001886 <HAL_TIM_Base_MspInit+0xea>
  else if(htim_base->Instance==TIM2)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80017f4:	d10e      	bne.n	8001814 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80017f6:	2300      	movs	r3, #0
 80017f8:	617b      	str	r3, [r7, #20]
 80017fa:	4b26      	ldr	r3, [pc, #152]	; (8001894 <HAL_TIM_Base_MspInit+0xf8>)
 80017fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017fe:	4a25      	ldr	r2, [pc, #148]	; (8001894 <HAL_TIM_Base_MspInit+0xf8>)
 8001800:	f043 0301 	orr.w	r3, r3, #1
 8001804:	6413      	str	r3, [r2, #64]	; 0x40
 8001806:	4b23      	ldr	r3, [pc, #140]	; (8001894 <HAL_TIM_Base_MspInit+0xf8>)
 8001808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800180a:	f003 0301 	and.w	r3, r3, #1
 800180e:	617b      	str	r3, [r7, #20]
 8001810:	697b      	ldr	r3, [r7, #20]
}
 8001812:	e038      	b.n	8001886 <HAL_TIM_Base_MspInit+0xea>
  else if(htim_base->Instance==TIM3)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	4a1f      	ldr	r2, [pc, #124]	; (8001898 <HAL_TIM_Base_MspInit+0xfc>)
 800181a:	4293      	cmp	r3, r2
 800181c:	d133      	bne.n	8001886 <HAL_TIM_Base_MspInit+0xea>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800181e:	2300      	movs	r3, #0
 8001820:	613b      	str	r3, [r7, #16]
 8001822:	4b1c      	ldr	r3, [pc, #112]	; (8001894 <HAL_TIM_Base_MspInit+0xf8>)
 8001824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001826:	4a1b      	ldr	r2, [pc, #108]	; (8001894 <HAL_TIM_Base_MspInit+0xf8>)
 8001828:	f043 0302 	orr.w	r3, r3, #2
 800182c:	6413      	str	r3, [r2, #64]	; 0x40
 800182e:	4b19      	ldr	r3, [pc, #100]	; (8001894 <HAL_TIM_Base_MspInit+0xf8>)
 8001830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001832:	f003 0302 	and.w	r3, r3, #2
 8001836:	613b      	str	r3, [r7, #16]
 8001838:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800183a:	2300      	movs	r3, #0
 800183c:	60fb      	str	r3, [r7, #12]
 800183e:	4b15      	ldr	r3, [pc, #84]	; (8001894 <HAL_TIM_Base_MspInit+0xf8>)
 8001840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001842:	4a14      	ldr	r2, [pc, #80]	; (8001894 <HAL_TIM_Base_MspInit+0xf8>)
 8001844:	f043 0304 	orr.w	r3, r3, #4
 8001848:	6313      	str	r3, [r2, #48]	; 0x30
 800184a:	4b12      	ldr	r3, [pc, #72]	; (8001894 <HAL_TIM_Base_MspInit+0xf8>)
 800184c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800184e:	f003 0304 	and.w	r3, r3, #4
 8001852:	60fb      	str	r3, [r7, #12]
 8001854:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TIM3_CH1_IMD_IN_Pin;
 8001856:	2340      	movs	r3, #64	; 0x40
 8001858:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800185a:	2302      	movs	r3, #2
 800185c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800185e:	2300      	movs	r3, #0
 8001860:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001862:	2300      	movs	r3, #0
 8001864:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001866:	2302      	movs	r3, #2
 8001868:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(TIM3_CH1_IMD_IN_GPIO_Port, &GPIO_InitStruct);
 800186a:	f107 031c 	add.w	r3, r7, #28
 800186e:	4619      	mov	r1, r3
 8001870:	480a      	ldr	r0, [pc, #40]	; (800189c <HAL_TIM_Base_MspInit+0x100>)
 8001872:	f000 ff6d 	bl	8002750 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8001876:	2200      	movs	r2, #0
 8001878:	2105      	movs	r1, #5
 800187a:	201d      	movs	r0, #29
 800187c:	f000 ff3e 	bl	80026fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001880:	201d      	movs	r0, #29
 8001882:	f000 ff57 	bl	8002734 <HAL_NVIC_EnableIRQ>
}
 8001886:	bf00      	nop
 8001888:	3730      	adds	r7, #48	; 0x30
 800188a:	46bd      	mov	sp, r7
 800188c:	bd80      	pop	{r7, pc}
 800188e:	bf00      	nop
 8001890:	40010000 	.word	0x40010000
 8001894:	40023800 	.word	0x40023800
 8001898:	40000400 	.word	0x40000400
 800189c:	40020800 	.word	0x40020800

080018a0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b088      	sub	sp, #32
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018a8:	f107 030c 	add.w	r3, r7, #12
 80018ac:	2200      	movs	r2, #0
 80018ae:	601a      	str	r2, [r3, #0]
 80018b0:	605a      	str	r2, [r3, #4]
 80018b2:	609a      	str	r2, [r3, #8]
 80018b4:	60da      	str	r2, [r3, #12]
 80018b6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	4a12      	ldr	r2, [pc, #72]	; (8001908 <HAL_TIM_MspPostInit+0x68>)
 80018be:	4293      	cmp	r3, r2
 80018c0:	d11e      	bne.n	8001900 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018c2:	2300      	movs	r3, #0
 80018c4:	60bb      	str	r3, [r7, #8]
 80018c6:	4b11      	ldr	r3, [pc, #68]	; (800190c <HAL_TIM_MspPostInit+0x6c>)
 80018c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ca:	4a10      	ldr	r2, [pc, #64]	; (800190c <HAL_TIM_MspPostInit+0x6c>)
 80018cc:	f043 0301 	orr.w	r3, r3, #1
 80018d0:	6313      	str	r3, [r2, #48]	; 0x30
 80018d2:	4b0e      	ldr	r3, [pc, #56]	; (800190c <HAL_TIM_MspPostInit+0x6c>)
 80018d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018d6:	f003 0301 	and.w	r3, r3, #1
 80018da:	60bb      	str	r3, [r7, #8]
 80018dc:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = TIM1_CH1_BLUE_Pin|TIM1_CH2_GREEN_Pin|TIM1_CH3_RED_Pin;
 80018de:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80018e2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018e4:	2302      	movs	r3, #2
 80018e6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e8:	2300      	movs	r3, #0
 80018ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ec:	2300      	movs	r3, #0
 80018ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80018f0:	2301      	movs	r3, #1
 80018f2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018f4:	f107 030c 	add.w	r3, r7, #12
 80018f8:	4619      	mov	r1, r3
 80018fa:	4805      	ldr	r0, [pc, #20]	; (8001910 <HAL_TIM_MspPostInit+0x70>)
 80018fc:	f000 ff28 	bl	8002750 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001900:	bf00      	nop
 8001902:	3720      	adds	r7, #32
 8001904:	46bd      	mov	sp, r7
 8001906:	bd80      	pop	{r7, pc}
 8001908:	40010000 	.word	0x40010000
 800190c:	40023800 	.word	0x40023800
 8001910:	40020000 	.word	0x40020000

08001914 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b08a      	sub	sp, #40	; 0x28
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800191c:	f107 0314 	add.w	r3, r7, #20
 8001920:	2200      	movs	r2, #0
 8001922:	601a      	str	r2, [r3, #0]
 8001924:	605a      	str	r2, [r3, #4]
 8001926:	609a      	str	r2, [r3, #8]
 8001928:	60da      	str	r2, [r3, #12]
 800192a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	4a19      	ldr	r2, [pc, #100]	; (8001998 <HAL_UART_MspInit+0x84>)
 8001932:	4293      	cmp	r3, r2
 8001934:	d12b      	bne.n	800198e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001936:	2300      	movs	r3, #0
 8001938:	613b      	str	r3, [r7, #16]
 800193a:	4b18      	ldr	r3, [pc, #96]	; (800199c <HAL_UART_MspInit+0x88>)
 800193c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800193e:	4a17      	ldr	r2, [pc, #92]	; (800199c <HAL_UART_MspInit+0x88>)
 8001940:	f043 0310 	orr.w	r3, r3, #16
 8001944:	6453      	str	r3, [r2, #68]	; 0x44
 8001946:	4b15      	ldr	r3, [pc, #84]	; (800199c <HAL_UART_MspInit+0x88>)
 8001948:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800194a:	f003 0310 	and.w	r3, r3, #16
 800194e:	613b      	str	r3, [r7, #16]
 8001950:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001952:	2300      	movs	r3, #0
 8001954:	60fb      	str	r3, [r7, #12]
 8001956:	4b11      	ldr	r3, [pc, #68]	; (800199c <HAL_UART_MspInit+0x88>)
 8001958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800195a:	4a10      	ldr	r2, [pc, #64]	; (800199c <HAL_UART_MspInit+0x88>)
 800195c:	f043 0302 	orr.w	r3, r3, #2
 8001960:	6313      	str	r3, [r2, #48]	; 0x30
 8001962:	4b0e      	ldr	r3, [pc, #56]	; (800199c <HAL_UART_MspInit+0x88>)
 8001964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001966:	f003 0302 	and.w	r3, r3, #2
 800196a:	60fb      	str	r3, [r7, #12]
 800196c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800196e:	23c0      	movs	r3, #192	; 0xc0
 8001970:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001972:	2302      	movs	r3, #2
 8001974:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001976:	2300      	movs	r3, #0
 8001978:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800197a:	2303      	movs	r3, #3
 800197c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800197e:	2307      	movs	r3, #7
 8001980:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001982:	f107 0314 	add.w	r3, r7, #20
 8001986:	4619      	mov	r1, r3
 8001988:	4805      	ldr	r0, [pc, #20]	; (80019a0 <HAL_UART_MspInit+0x8c>)
 800198a:	f000 fee1 	bl	8002750 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800198e:	bf00      	nop
 8001990:	3728      	adds	r7, #40	; 0x28
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}
 8001996:	bf00      	nop
 8001998:	40011000 	.word	0x40011000
 800199c:	40023800 	.word	0x40023800
 80019a0:	40020400 	.word	0x40020400

080019a4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b08c      	sub	sp, #48	; 0x30
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80019ac:	2300      	movs	r3, #0
 80019ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80019b0:	2300      	movs	r3, #0
 80019b2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM9 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, TickPriority ,0);
 80019b4:	2200      	movs	r2, #0
 80019b6:	6879      	ldr	r1, [r7, #4]
 80019b8:	2018      	movs	r0, #24
 80019ba:	f000 fe9f 	bl	80026fc <HAL_NVIC_SetPriority>

  /* Enable the TIM9 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 80019be:	2018      	movs	r0, #24
 80019c0:	f000 feb8 	bl	8002734 <HAL_NVIC_EnableIRQ>
  /* Enable TIM9 clock */
  __HAL_RCC_TIM9_CLK_ENABLE();
 80019c4:	2300      	movs	r3, #0
 80019c6:	60fb      	str	r3, [r7, #12]
 80019c8:	4b1f      	ldr	r3, [pc, #124]	; (8001a48 <HAL_InitTick+0xa4>)
 80019ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019cc:	4a1e      	ldr	r2, [pc, #120]	; (8001a48 <HAL_InitTick+0xa4>)
 80019ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019d2:	6453      	str	r3, [r2, #68]	; 0x44
 80019d4:	4b1c      	ldr	r3, [pc, #112]	; (8001a48 <HAL_InitTick+0xa4>)
 80019d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019dc:	60fb      	str	r3, [r7, #12]
 80019de:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80019e0:	f107 0210 	add.w	r2, r7, #16
 80019e4:	f107 0314 	add.w	r3, r7, #20
 80019e8:	4611      	mov	r1, r2
 80019ea:	4618      	mov	r0, r3
 80019ec:	f001 fcf2 	bl	80033d4 <HAL_RCC_GetClockConfig>

  /* Compute TIM9 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 80019f0:	f001 fcdc 	bl	80033ac <HAL_RCC_GetPCLK2Freq>
 80019f4:	4603      	mov	r3, r0
 80019f6:	005b      	lsls	r3, r3, #1
 80019f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM9 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80019fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019fc:	4a13      	ldr	r2, [pc, #76]	; (8001a4c <HAL_InitTick+0xa8>)
 80019fe:	fba2 2303 	umull	r2, r3, r2, r3
 8001a02:	0c9b      	lsrs	r3, r3, #18
 8001a04:	3b01      	subs	r3, #1
 8001a06:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM9 */
  htim9.Instance = TIM9;
 8001a08:	4b11      	ldr	r3, [pc, #68]	; (8001a50 <HAL_InitTick+0xac>)
 8001a0a:	4a12      	ldr	r2, [pc, #72]	; (8001a54 <HAL_InitTick+0xb0>)
 8001a0c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM9CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim9.Init.Period = (1000000U / 1000U) - 1U;
 8001a0e:	4b10      	ldr	r3, [pc, #64]	; (8001a50 <HAL_InitTick+0xac>)
 8001a10:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001a14:	60da      	str	r2, [r3, #12]
  htim9.Init.Prescaler = uwPrescalerValue;
 8001a16:	4a0e      	ldr	r2, [pc, #56]	; (8001a50 <HAL_InitTick+0xac>)
 8001a18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a1a:	6053      	str	r3, [r2, #4]
  htim9.Init.ClockDivision = 0;
 8001a1c:	4b0c      	ldr	r3, [pc, #48]	; (8001a50 <HAL_InitTick+0xac>)
 8001a1e:	2200      	movs	r2, #0
 8001a20:	611a      	str	r2, [r3, #16]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a22:	4b0b      	ldr	r3, [pc, #44]	; (8001a50 <HAL_InitTick+0xac>)
 8001a24:	2200      	movs	r2, #0
 8001a26:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim9) == HAL_OK)
 8001a28:	4809      	ldr	r0, [pc, #36]	; (8001a50 <HAL_InitTick+0xac>)
 8001a2a:	f002 faad 	bl	8003f88 <HAL_TIM_Base_Init>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d104      	bne.n	8001a3e <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim9);
 8001a34:	4806      	ldr	r0, [pc, #24]	; (8001a50 <HAL_InitTick+0xac>)
 8001a36:	f002 fb5f 	bl	80040f8 <HAL_TIM_Base_Start_IT>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	e000      	b.n	8001a40 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8001a3e:	2301      	movs	r3, #1
}
 8001a40:	4618      	mov	r0, r3
 8001a42:	3730      	adds	r7, #48	; 0x30
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bd80      	pop	{r7, pc}
 8001a48:	40023800 	.word	0x40023800
 8001a4c:	431bde83 	.word	0x431bde83
 8001a50:	20004b94 	.word	0x20004b94
 8001a54:	40014000 	.word	0x40014000

08001a58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a5c:	e7fe      	b.n	8001a5c <NMI_Handler+0x4>

08001a5e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a5e:	b480      	push	{r7}
 8001a60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a62:	e7fe      	b.n	8001a62 <HardFault_Handler+0x4>

08001a64 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a64:	b480      	push	{r7}
 8001a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a68:	e7fe      	b.n	8001a68 <MemManage_Handler+0x4>

08001a6a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a6a:	b480      	push	{r7}
 8001a6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a6e:	e7fe      	b.n	8001a6e <BusFault_Handler+0x4>

08001a70 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a70:	b480      	push	{r7}
 8001a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a74:	e7fe      	b.n	8001a74 <UsageFault_Handler+0x4>

08001a76 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a76:	b480      	push	{r7}
 8001a78:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a7a:	bf00      	nop
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a82:	4770      	bx	lr

08001a84 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001a88:	4803      	ldr	r0, [pc, #12]	; (8001a98 <TIM1_BRK_TIM9_IRQHandler+0x14>)
 8001a8a:	f002 fcb0 	bl	80043ee <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim9);
 8001a8e:	4803      	ldr	r0, [pc, #12]	; (8001a9c <TIM1_BRK_TIM9_IRQHandler+0x18>)
 8001a90:	f002 fcad 	bl	80043ee <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8001a94:	bf00      	nop
 8001a96:	bd80      	pop	{r7, pc}
 8001a98:	20004a84 	.word	0x20004a84
 8001a9c:	20004b94 	.word	0x20004b94

08001aa0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001aa4:	4802      	ldr	r0, [pc, #8]	; (8001ab0 <TIM3_IRQHandler+0x10>)
 8001aa6:	f002 fca2 	bl	80043ee <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001aaa:	bf00      	nop
 8001aac:	bd80      	pop	{r7, pc}
 8001aae:	bf00      	nop
 8001ab0:	200049b0 	.word	0x200049b0

08001ab4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b086      	sub	sp, #24
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	60f8      	str	r0, [r7, #12]
 8001abc:	60b9      	str	r1, [r7, #8]
 8001abe:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	617b      	str	r3, [r7, #20]
 8001ac4:	e00a      	b.n	8001adc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001ac6:	f3af 8000 	nop.w
 8001aca:	4601      	mov	r1, r0
 8001acc:	68bb      	ldr	r3, [r7, #8]
 8001ace:	1c5a      	adds	r2, r3, #1
 8001ad0:	60ba      	str	r2, [r7, #8]
 8001ad2:	b2ca      	uxtb	r2, r1
 8001ad4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ad6:	697b      	ldr	r3, [r7, #20]
 8001ad8:	3301      	adds	r3, #1
 8001ada:	617b      	str	r3, [r7, #20]
 8001adc:	697a      	ldr	r2, [r7, #20]
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	429a      	cmp	r2, r3
 8001ae2:	dbf0      	blt.n	8001ac6 <_read+0x12>
	}

return len;
 8001ae4:	687b      	ldr	r3, [r7, #4]
}
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	3718      	adds	r7, #24
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}

08001aee <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001aee:	b580      	push	{r7, lr}
 8001af0:	b086      	sub	sp, #24
 8001af2:	af00      	add	r7, sp, #0
 8001af4:	60f8      	str	r0, [r7, #12]
 8001af6:	60b9      	str	r1, [r7, #8]
 8001af8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001afa:	2300      	movs	r3, #0
 8001afc:	617b      	str	r3, [r7, #20]
 8001afe:	e009      	b.n	8001b14 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001b00:	68bb      	ldr	r3, [r7, #8]
 8001b02:	1c5a      	adds	r2, r3, #1
 8001b04:	60ba      	str	r2, [r7, #8]
 8001b06:	781b      	ldrb	r3, [r3, #0]
 8001b08:	4618      	mov	r0, r3
 8001b0a:	f7fe fd2d 	bl	8000568 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b0e:	697b      	ldr	r3, [r7, #20]
 8001b10:	3301      	adds	r3, #1
 8001b12:	617b      	str	r3, [r7, #20]
 8001b14:	697a      	ldr	r2, [r7, #20]
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	429a      	cmp	r2, r3
 8001b1a:	dbf1      	blt.n	8001b00 <_write+0x12>
	}
	return len;
 8001b1c:	687b      	ldr	r3, [r7, #4]
}
 8001b1e:	4618      	mov	r0, r3
 8001b20:	3718      	adds	r7, #24
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd80      	pop	{r7, pc}

08001b26 <_close>:

int _close(int file)
{
 8001b26:	b480      	push	{r7}
 8001b28:	b083      	sub	sp, #12
 8001b2a:	af00      	add	r7, sp, #0
 8001b2c:	6078      	str	r0, [r7, #4]
	return -1;
 8001b2e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b32:	4618      	mov	r0, r3
 8001b34:	370c      	adds	r7, #12
 8001b36:	46bd      	mov	sp, r7
 8001b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3c:	4770      	bx	lr

08001b3e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b3e:	b480      	push	{r7}
 8001b40:	b083      	sub	sp, #12
 8001b42:	af00      	add	r7, sp, #0
 8001b44:	6078      	str	r0, [r7, #4]
 8001b46:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001b4e:	605a      	str	r2, [r3, #4]
	return 0;
 8001b50:	2300      	movs	r3, #0
}
 8001b52:	4618      	mov	r0, r3
 8001b54:	370c      	adds	r7, #12
 8001b56:	46bd      	mov	sp, r7
 8001b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5c:	4770      	bx	lr

08001b5e <_isatty>:

int _isatty(int file)
{
 8001b5e:	b480      	push	{r7}
 8001b60:	b083      	sub	sp, #12
 8001b62:	af00      	add	r7, sp, #0
 8001b64:	6078      	str	r0, [r7, #4]
	return 1;
 8001b66:	2301      	movs	r3, #1
}
 8001b68:	4618      	mov	r0, r3
 8001b6a:	370c      	adds	r7, #12
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b72:	4770      	bx	lr

08001b74 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b74:	b480      	push	{r7}
 8001b76:	b085      	sub	sp, #20
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	60f8      	str	r0, [r7, #12]
 8001b7c:	60b9      	str	r1, [r7, #8]
 8001b7e:	607a      	str	r2, [r7, #4]
	return 0;
 8001b80:	2300      	movs	r3, #0
}
 8001b82:	4618      	mov	r0, r3
 8001b84:	3714      	adds	r7, #20
 8001b86:	46bd      	mov	sp, r7
 8001b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8c:	4770      	bx	lr
	...

08001b90 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b086      	sub	sp, #24
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b98:	4a14      	ldr	r2, [pc, #80]	; (8001bec <_sbrk+0x5c>)
 8001b9a:	4b15      	ldr	r3, [pc, #84]	; (8001bf0 <_sbrk+0x60>)
 8001b9c:	1ad3      	subs	r3, r2, r3
 8001b9e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ba0:	697b      	ldr	r3, [r7, #20]
 8001ba2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ba4:	4b13      	ldr	r3, [pc, #76]	; (8001bf4 <_sbrk+0x64>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d102      	bne.n	8001bb2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001bac:	4b11      	ldr	r3, [pc, #68]	; (8001bf4 <_sbrk+0x64>)
 8001bae:	4a12      	ldr	r2, [pc, #72]	; (8001bf8 <_sbrk+0x68>)
 8001bb0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001bb2:	4b10      	ldr	r3, [pc, #64]	; (8001bf4 <_sbrk+0x64>)
 8001bb4:	681a      	ldr	r2, [r3, #0]
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	4413      	add	r3, r2
 8001bba:	693a      	ldr	r2, [r7, #16]
 8001bbc:	429a      	cmp	r2, r3
 8001bbe:	d207      	bcs.n	8001bd0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001bc0:	f006 fd34 	bl	800862c <__errno>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	220c      	movs	r2, #12
 8001bc8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001bca:	f04f 33ff 	mov.w	r3, #4294967295
 8001bce:	e009      	b.n	8001be4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001bd0:	4b08      	ldr	r3, [pc, #32]	; (8001bf4 <_sbrk+0x64>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001bd6:	4b07      	ldr	r3, [pc, #28]	; (8001bf4 <_sbrk+0x64>)
 8001bd8:	681a      	ldr	r2, [r3, #0]
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	4413      	add	r3, r2
 8001bde:	4a05      	ldr	r2, [pc, #20]	; (8001bf4 <_sbrk+0x64>)
 8001be0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001be2:	68fb      	ldr	r3, [r7, #12]
}
 8001be4:	4618      	mov	r0, r3
 8001be6:	3718      	adds	r7, #24
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bd80      	pop	{r7, pc}
 8001bec:	20020000 	.word	0x20020000
 8001bf0:	00000400 	.word	0x00000400
 8001bf4:	20000090 	.word	0x20000090
 8001bf8:	20004c30 	.word	0x20004c30

08001bfc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c00:	4b06      	ldr	r3, [pc, #24]	; (8001c1c <SystemInit+0x20>)
 8001c02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c06:	4a05      	ldr	r2, [pc, #20]	; (8001c1c <SystemInit+0x20>)
 8001c08:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c0c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c10:	bf00      	nop
 8001c12:	46bd      	mov	sp, r7
 8001c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c18:	4770      	bx	lr
 8001c1a:	bf00      	nop
 8001c1c:	e000ed00 	.word	0xe000ed00

08001c20 <start_timers>:
#include <stdint.h>
#include "peripherals.h"
#include "timer_utils.h"

void start_timers() {
 8001c20:	b580      	push	{r7, lr}
 8001c22:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start(&htim2);
 8001c24:	4802      	ldr	r0, [pc, #8]	; (8001c30 <start_timers+0x10>)
 8001c26:	f002 f9ff 	bl	8004028 <HAL_TIM_Base_Start>
}
 8001c2a:	bf00      	nop
 8001c2c:	bd80      	pop	{r7, pc}
 8001c2e:	bf00      	nop
 8001c30:	20004b24 	.word	0x20004b24

08001c34 <delay_us>:

void delay_us(uint16_t us) {
 8001c34:	b480      	push	{r7}
 8001c36:	b083      	sub	sp, #12
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim2, 0);
 8001c3e:	4b09      	ldr	r3, [pc, #36]	; (8001c64 <delay_us+0x30>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	2200      	movs	r2, #0
 8001c44:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim2) < us) { asm("NOP"); }
 8001c46:	e000      	b.n	8001c4a <delay_us+0x16>
 8001c48:	bf00      	nop
 8001c4a:	4b06      	ldr	r3, [pc, #24]	; (8001c64 <delay_us+0x30>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001c50:	88fb      	ldrh	r3, [r7, #6]
 8001c52:	429a      	cmp	r2, r3
 8001c54:	d3f8      	bcc.n	8001c48 <delay_us+0x14>
}
 8001c56:	bf00      	nop
 8001c58:	bf00      	nop
 8001c5a:	370c      	adds	r7, #12
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c62:	4770      	bx	lr
 8001c64:	20004b24 	.word	0x20004b24

08001c68 <ext_led_blink_thread_fn>:
const osThreadAttr_t ext_led_blink_thread_attrs = {
	.name = "ext_led_blink_thread",
	.priority = (osPriority_t)osPriorityIdle
};

void ext_led_blink_thread_fn(void* arg) {
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b082      	sub	sp, #8
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
	while (1) {
		HAL_GPIO_TogglePin(GPIOB, CONTACTOR_Pin);
 8001c70:	2102      	movs	r1, #2
 8001c72:	4804      	ldr	r0, [pc, #16]	; (8001c84 <ext_led_blink_thread_fn+0x1c>)
 8001c74:	f000 ff21 	bl	8002aba <HAL_GPIO_TogglePin>
		osDelay(1000);
 8001c78:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001c7c:	f004 f85e 	bl	8005d3c <osDelay>
		HAL_GPIO_TogglePin(GPIOB, CONTACTOR_Pin);
 8001c80:	e7f6      	b.n	8001c70 <ext_led_blink_thread_fn+0x8>
 8001c82:	bf00      	nop
 8001c84:	40020400 	.word	0x40020400

08001c88 <measurements_thread_fn>:
	.name = "measurements_thread",
	.priority = (osPriority_t)osPriorityAboveNormal,
	.stack_size = 2048
};

void measurements_thread_fn(void* arg) {
 8001c88:	b5b0      	push	{r4, r5, r7, lr}
 8001c8a:	b0ca      	sub	sp, #296	; 0x128
 8001c8c:	af16      	add	r7, sp, #88	; 0x58
 8001c8e:	6078      	str	r0, [r7, #4]
	Ltc6813 slave_device = Ltc6813_init(hspi1, GPIOA, 4);
 8001c90:	f107 0508 	add.w	r5, r7, #8
 8001c94:	4c50      	ldr	r4, [pc, #320]	; (8001dd8 <measurements_thread_fn+0x150>)
 8001c96:	2304      	movs	r3, #4
 8001c98:	9314      	str	r3, [sp, #80]	; 0x50
 8001c9a:	4b50      	ldr	r3, [pc, #320]	; (8001ddc <measurements_thread_fn+0x154>)
 8001c9c:	9313      	str	r3, [sp, #76]	; 0x4c
 8001c9e:	4668      	mov	r0, sp
 8001ca0:	f104 030c 	add.w	r3, r4, #12
 8001ca4:	224c      	movs	r2, #76	; 0x4c
 8001ca6:	4619      	mov	r1, r3
 8001ca8:	f006 fcea 	bl	8008680 <memcpy>
 8001cac:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8001cb0:	4628      	mov	r0, r5
 8001cb2:	f7fe fdf4 	bl	800089e <Ltc6813_init>

	Ltc6813_wakeup_sleep(&slave_device);
 8001cb6:	f107 0308 	add.w	r3, r7, #8
 8001cba:	4618      	mov	r0, r3
 8001cbc:	f7fe fef0 	bl	8000aa0 <Ltc6813_wakeup_sleep>
	uint8_t success;
	osDelay(1000);
 8001cc0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001cc4:	f004 f83a 	bl	8005d3c <osDelay>

	while (1) {
		Ltc6813_wakeup_sleep(&slave_device);
 8001cc8:	f107 0308 	add.w	r3, r7, #8
 8001ccc:	4618      	mov	r0, r3
 8001cce:	f7fe fee7 	bl	8000aa0 <Ltc6813_wakeup_sleep>

		printf("CFG A\r\n");
 8001cd2:	4843      	ldr	r0, [pc, #268]	; (8001de0 <measurements_thread_fn+0x158>)
 8001cd4:	f006 fd70 	bl	80087b8 <puts>

		success = Ltc6813_read_cfga(&slave_device);
 8001cd8:	f107 0308 	add.w	r3, r7, #8
 8001cdc:	4618      	mov	r0, r3
 8001cde:	f7ff f817 	bl	8000d10 <Ltc6813_read_cfga>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf

		if (success) {
 8001ce8:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d003      	beq.n	8001cf8 <measurements_thread_fn+0x70>
			printf("PEC SUCCESS\r\n");
 8001cf0:	483c      	ldr	r0, [pc, #240]	; (8001de4 <measurements_thread_fn+0x15c>)
 8001cf2:	f006 fd61 	bl	80087b8 <puts>
 8001cf6:	e002      	b.n	8001cfe <measurements_thread_fn+0x76>
		} else {
			printf("PEC FAIL\r\n");
 8001cf8:	483b      	ldr	r0, [pc, #236]	; (8001de8 <measurements_thread_fn+0x160>)
 8001cfa:	f006 fd5d 	bl	80087b8 <puts>
		}

		Buffer_print(&(slave_device.cfga_bfr));
 8001cfe:	f107 0308 	add.w	r3, r7, #8
 8001d02:	3368      	adds	r3, #104	; 0x68
 8001d04:	4618      	mov	r0, r3
 8001d06:	f7fe fd75 	bl	80007f4 <Buffer_print>

		Ltc6813_wakeup_sleep(&slave_device);
 8001d0a:	f107 0308 	add.w	r3, r7, #8
 8001d0e:	4618      	mov	r0, r3
 8001d10:	f7fe fec6 	bl	8000aa0 <Ltc6813_wakeup_sleep>

		printf("WRITE REFON 1\r\n");
 8001d14:	4835      	ldr	r0, [pc, #212]	; (8001dec <measurements_thread_fn+0x164>)
 8001d16:	f006 fd4f 	bl	80087b8 <puts>

		uint8_t CFGAR0 = Buffer_index(&(slave_device.cfga_bfr), 0);
 8001d1a:	f107 0308 	add.w	r3, r7, #8
 8001d1e:	3368      	adds	r3, #104	; 0x68
 8001d20:	2100      	movs	r1, #0
 8001d22:	4618      	mov	r0, r3
 8001d24:	f7fe fc9e 	bl	8000664 <Buffer_index>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	f887 30ce 	strb.w	r3, [r7, #206]	; 0xce
		CFGAR0 |= 0b00000100u;
 8001d2e:	f897 30ce 	ldrb.w	r3, [r7, #206]	; 0xce
 8001d32:	f043 0304 	orr.w	r3, r3, #4
 8001d36:	f887 30ce 	strb.w	r3, [r7, #206]	; 0xce

		Buffer_set_index(&(slave_device.cfga_bfr), 0, CFGAR0);
 8001d3a:	f897 20ce 	ldrb.w	r2, [r7, #206]	; 0xce
 8001d3e:	f107 0308 	add.w	r3, r7, #8
 8001d42:	3368      	adds	r3, #104	; 0x68
 8001d44:	2100      	movs	r1, #0
 8001d46:	4618      	mov	r0, r3
 8001d48:	f7fe fca1 	bl	800068e <Buffer_set_index>

		Ltc6813_write_cfga(&slave_device);
 8001d4c:	f107 0308 	add.w	r3, r7, #8
 8001d50:	4618      	mov	r0, r3
 8001d52:	f7fe ffea 	bl	8000d2a <Ltc6813_write_cfga>

		printf("CFG A\r\n");
 8001d56:	4822      	ldr	r0, [pc, #136]	; (8001de0 <measurements_thread_fn+0x158>)
 8001d58:	f006 fd2e 	bl	80087b8 <puts>

		success = Ltc6813_read_cfga(&slave_device);
 8001d5c:	f107 0308 	add.w	r3, r7, #8
 8001d60:	4618      	mov	r0, r3
 8001d62:	f7fe ffd5 	bl	8000d10 <Ltc6813_read_cfga>
 8001d66:	4603      	mov	r3, r0
 8001d68:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf

		if (success) {
 8001d6c:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d003      	beq.n	8001d7c <measurements_thread_fn+0xf4>
			printf("PEC SUCCESS\r\n");
 8001d74:	481b      	ldr	r0, [pc, #108]	; (8001de4 <measurements_thread_fn+0x15c>)
 8001d76:	f006 fd1f 	bl	80087b8 <puts>
 8001d7a:	e002      	b.n	8001d82 <measurements_thread_fn+0xfa>
		} else {
			printf("PEC FAIL\r\n");
 8001d7c:	481a      	ldr	r0, [pc, #104]	; (8001de8 <measurements_thread_fn+0x160>)
 8001d7e:	f006 fd1b 	bl	80087b8 <puts>
		}

		Buffer_print(&(slave_device.cfga_bfr));
 8001d82:	f107 0308 	add.w	r3, r7, #8
 8001d86:	3368      	adds	r3, #104	; 0x68
 8001d88:	4618      	mov	r0, r3
 8001d8a:	f7fe fd33 	bl	80007f4 <Buffer_print>

		printf("START ADC CONV\r\n");
 8001d8e:	4818      	ldr	r0, [pc, #96]	; (8001df0 <measurements_thread_fn+0x168>)
 8001d90:	f006 fd12 	bl	80087b8 <puts>

		success = Ltc6813_read_adc(&slave_device, NORMAL_ADC);
 8001d94:	f107 0308 	add.w	r3, r7, #8
 8001d98:	f44f 7158 	mov.w	r1, #864	; 0x360
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	f7fe ffec 	bl	8000d7a <Ltc6813_read_adc>
 8001da2:	4603      	mov	r3, r0
 8001da4:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf

		printf("FINISH ADC CONV\r\n");
 8001da8:	4812      	ldr	r0, [pc, #72]	; (8001df4 <measurements_thread_fn+0x16c>)
 8001daa:	f006 fd05 	bl	80087b8 <puts>

		if (success) {
 8001dae:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d003      	beq.n	8001dbe <measurements_thread_fn+0x136>
			printf("PEC SUCCESS\r\n");
 8001db6:	480b      	ldr	r0, [pc, #44]	; (8001de4 <measurements_thread_fn+0x15c>)
 8001db8:	f006 fcfe 	bl	80087b8 <puts>
 8001dbc:	e002      	b.n	8001dc4 <measurements_thread_fn+0x13c>
		} else {
			printf("PEC FAIL\r\n");
 8001dbe:	480a      	ldr	r0, [pc, #40]	; (8001de8 <measurements_thread_fn+0x160>)
 8001dc0:	f006 fcfa 	bl	80087b8 <puts>
		}

		Ltc6813_print_voltages(&slave_device);
 8001dc4:	f107 0308 	add.w	r3, r7, #8
 8001dc8:	4618      	mov	r0, r3
 8001dca:	f7fe fe7f 	bl	8000acc <Ltc6813_print_voltages>


		osDelay(1000);
 8001dce:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001dd2:	f003 ffb3 	bl	8005d3c <osDelay>
	while (1) {
 8001dd6:	e777      	b.n	8001cc8 <measurements_thread_fn+0x40>
 8001dd8:	20004acc 	.word	0x20004acc
 8001ddc:	40020000 	.word	0x40020000
 8001de0:	08009af4 	.word	0x08009af4
 8001de4:	08009afc 	.word	0x08009afc
 8001de8:	08009b0c 	.word	0x08009b0c
 8001dec:	08009b18 	.word	0x08009b18
 8001df0:	08009b28 	.word	0x08009b28
 8001df4:	08009b38 	.word	0x08009b38

08001df8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001df8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001e30 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001dfc:	480d      	ldr	r0, [pc, #52]	; (8001e34 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001dfe:	490e      	ldr	r1, [pc, #56]	; (8001e38 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001e00:	4a0e      	ldr	r2, [pc, #56]	; (8001e3c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001e02:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e04:	e002      	b.n	8001e0c <LoopCopyDataInit>

08001e06 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e06:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e08:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e0a:	3304      	adds	r3, #4

08001e0c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e0c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e0e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e10:	d3f9      	bcc.n	8001e06 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e12:	4a0b      	ldr	r2, [pc, #44]	; (8001e40 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001e14:	4c0b      	ldr	r4, [pc, #44]	; (8001e44 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001e16:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e18:	e001      	b.n	8001e1e <LoopFillZerobss>

08001e1a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e1a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e1c:	3204      	adds	r2, #4

08001e1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e1e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e20:	d3fb      	bcc.n	8001e1a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001e22:	f7ff feeb 	bl	8001bfc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001e26:	f006 fc07 	bl	8008638 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e2a:	f7ff f80d 	bl	8000e48 <main>
  bx  lr    
 8001e2e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001e30:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001e34:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e38:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001e3c:	08009e6c 	.word	0x08009e6c
  ldr r2, =_sbss
 8001e40:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001e44:	20004c30 	.word	0x20004c30

08001e48 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e48:	e7fe      	b.n	8001e48 <ADC_IRQHandler>
	...

08001e4c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001e50:	4b0e      	ldr	r3, [pc, #56]	; (8001e8c <HAL_Init+0x40>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4a0d      	ldr	r2, [pc, #52]	; (8001e8c <HAL_Init+0x40>)
 8001e56:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e5a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001e5c:	4b0b      	ldr	r3, [pc, #44]	; (8001e8c <HAL_Init+0x40>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	4a0a      	ldr	r2, [pc, #40]	; (8001e8c <HAL_Init+0x40>)
 8001e62:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001e66:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e68:	4b08      	ldr	r3, [pc, #32]	; (8001e8c <HAL_Init+0x40>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4a07      	ldr	r2, [pc, #28]	; (8001e8c <HAL_Init+0x40>)
 8001e6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e72:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e74:	2003      	movs	r0, #3
 8001e76:	f000 fc36 	bl	80026e6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e7a:	2000      	movs	r0, #0
 8001e7c:	f7ff fd92 	bl	80019a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e80:	f7ff fb70 	bl	8001564 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e84:	2300      	movs	r3, #0
}
 8001e86:	4618      	mov	r0, r3
 8001e88:	bd80      	pop	{r7, pc}
 8001e8a:	bf00      	nop
 8001e8c:	40023c00 	.word	0x40023c00

08001e90 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e90:	b480      	push	{r7}
 8001e92:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e94:	4b06      	ldr	r3, [pc, #24]	; (8001eb0 <HAL_IncTick+0x20>)
 8001e96:	781b      	ldrb	r3, [r3, #0]
 8001e98:	461a      	mov	r2, r3
 8001e9a:	4b06      	ldr	r3, [pc, #24]	; (8001eb4 <HAL_IncTick+0x24>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	4413      	add	r3, r2
 8001ea0:	4a04      	ldr	r2, [pc, #16]	; (8001eb4 <HAL_IncTick+0x24>)
 8001ea2:	6013      	str	r3, [r2, #0]
}
 8001ea4:	bf00      	nop
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eac:	4770      	bx	lr
 8001eae:	bf00      	nop
 8001eb0:	20000008 	.word	0x20000008
 8001eb4:	20004bdc 	.word	0x20004bdc

08001eb8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	af00      	add	r7, sp, #0
  return uwTick;
 8001ebc:	4b03      	ldr	r3, [pc, #12]	; (8001ecc <HAL_GetTick+0x14>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
}
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec8:	4770      	bx	lr
 8001eca:	bf00      	nop
 8001ecc:	20004bdc 	.word	0x20004bdc

08001ed0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b084      	sub	sp, #16
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d101      	bne.n	8001ee6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	e033      	b.n	8001f4e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d109      	bne.n	8001f02 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001eee:	6878      	ldr	r0, [r7, #4]
 8001ef0:	f7ff fb64 	bl	80015bc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	2200      	movs	r2, #0
 8001efe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f06:	f003 0310 	and.w	r3, r3, #16
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d118      	bne.n	8001f40 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f12:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001f16:	f023 0302 	bic.w	r3, r3, #2
 8001f1a:	f043 0202 	orr.w	r2, r3, #2
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001f22:	6878      	ldr	r0, [r7, #4]
 8001f24:	f000 f93a 	bl	800219c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f32:	f023 0303 	bic.w	r3, r3, #3
 8001f36:	f043 0201 	orr.w	r2, r3, #1
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	641a      	str	r2, [r3, #64]	; 0x40
 8001f3e:	e001      	b.n	8001f44 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001f40:	2301      	movs	r3, #1
 8001f42:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2200      	movs	r2, #0
 8001f48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001f4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f4e:	4618      	mov	r0, r3
 8001f50:	3710      	adds	r7, #16
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bd80      	pop	{r7, pc}
	...

08001f58 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	b085      	sub	sp, #20
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
 8001f60:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001f62:	2300      	movs	r3, #0
 8001f64:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f6c:	2b01      	cmp	r3, #1
 8001f6e:	d101      	bne.n	8001f74 <HAL_ADC_ConfigChannel+0x1c>
 8001f70:	2302      	movs	r3, #2
 8001f72:	e105      	b.n	8002180 <HAL_ADC_ConfigChannel+0x228>
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2201      	movs	r2, #1
 8001f78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	2b09      	cmp	r3, #9
 8001f82:	d925      	bls.n	8001fd0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	68d9      	ldr	r1, [r3, #12]
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	b29b      	uxth	r3, r3
 8001f90:	461a      	mov	r2, r3
 8001f92:	4613      	mov	r3, r2
 8001f94:	005b      	lsls	r3, r3, #1
 8001f96:	4413      	add	r3, r2
 8001f98:	3b1e      	subs	r3, #30
 8001f9a:	2207      	movs	r2, #7
 8001f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa0:	43da      	mvns	r2, r3
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	400a      	ands	r2, r1
 8001fa8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	68d9      	ldr	r1, [r3, #12]
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	689a      	ldr	r2, [r3, #8]
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	b29b      	uxth	r3, r3
 8001fba:	4618      	mov	r0, r3
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	005b      	lsls	r3, r3, #1
 8001fc0:	4403      	add	r3, r0
 8001fc2:	3b1e      	subs	r3, #30
 8001fc4:	409a      	lsls	r2, r3
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	430a      	orrs	r2, r1
 8001fcc:	60da      	str	r2, [r3, #12]
 8001fce:	e022      	b.n	8002016 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	6919      	ldr	r1, [r3, #16]
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	b29b      	uxth	r3, r3
 8001fdc:	461a      	mov	r2, r3
 8001fde:	4613      	mov	r3, r2
 8001fe0:	005b      	lsls	r3, r3, #1
 8001fe2:	4413      	add	r3, r2
 8001fe4:	2207      	movs	r2, #7
 8001fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fea:	43da      	mvns	r2, r3
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	400a      	ands	r2, r1
 8001ff2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	6919      	ldr	r1, [r3, #16]
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	689a      	ldr	r2, [r3, #8]
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	b29b      	uxth	r3, r3
 8002004:	4618      	mov	r0, r3
 8002006:	4603      	mov	r3, r0
 8002008:	005b      	lsls	r3, r3, #1
 800200a:	4403      	add	r3, r0
 800200c:	409a      	lsls	r2, r3
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	430a      	orrs	r2, r1
 8002014:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	685b      	ldr	r3, [r3, #4]
 800201a:	2b06      	cmp	r3, #6
 800201c:	d824      	bhi.n	8002068 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	685a      	ldr	r2, [r3, #4]
 8002028:	4613      	mov	r3, r2
 800202a:	009b      	lsls	r3, r3, #2
 800202c:	4413      	add	r3, r2
 800202e:	3b05      	subs	r3, #5
 8002030:	221f      	movs	r2, #31
 8002032:	fa02 f303 	lsl.w	r3, r2, r3
 8002036:	43da      	mvns	r2, r3
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	400a      	ands	r2, r1
 800203e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	b29b      	uxth	r3, r3
 800204c:	4618      	mov	r0, r3
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	685a      	ldr	r2, [r3, #4]
 8002052:	4613      	mov	r3, r2
 8002054:	009b      	lsls	r3, r3, #2
 8002056:	4413      	add	r3, r2
 8002058:	3b05      	subs	r3, #5
 800205a:	fa00 f203 	lsl.w	r2, r0, r3
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	430a      	orrs	r2, r1
 8002064:	635a      	str	r2, [r3, #52]	; 0x34
 8002066:	e04c      	b.n	8002102 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	2b0c      	cmp	r3, #12
 800206e:	d824      	bhi.n	80020ba <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	685a      	ldr	r2, [r3, #4]
 800207a:	4613      	mov	r3, r2
 800207c:	009b      	lsls	r3, r3, #2
 800207e:	4413      	add	r3, r2
 8002080:	3b23      	subs	r3, #35	; 0x23
 8002082:	221f      	movs	r2, #31
 8002084:	fa02 f303 	lsl.w	r3, r2, r3
 8002088:	43da      	mvns	r2, r3
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	400a      	ands	r2, r1
 8002090:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	b29b      	uxth	r3, r3
 800209e:	4618      	mov	r0, r3
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	685a      	ldr	r2, [r3, #4]
 80020a4:	4613      	mov	r3, r2
 80020a6:	009b      	lsls	r3, r3, #2
 80020a8:	4413      	add	r3, r2
 80020aa:	3b23      	subs	r3, #35	; 0x23
 80020ac:	fa00 f203 	lsl.w	r2, r0, r3
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	430a      	orrs	r2, r1
 80020b6:	631a      	str	r2, [r3, #48]	; 0x30
 80020b8:	e023      	b.n	8002102 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	685a      	ldr	r2, [r3, #4]
 80020c4:	4613      	mov	r3, r2
 80020c6:	009b      	lsls	r3, r3, #2
 80020c8:	4413      	add	r3, r2
 80020ca:	3b41      	subs	r3, #65	; 0x41
 80020cc:	221f      	movs	r2, #31
 80020ce:	fa02 f303 	lsl.w	r3, r2, r3
 80020d2:	43da      	mvns	r2, r3
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	400a      	ands	r2, r1
 80020da:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	b29b      	uxth	r3, r3
 80020e8:	4618      	mov	r0, r3
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	685a      	ldr	r2, [r3, #4]
 80020ee:	4613      	mov	r3, r2
 80020f0:	009b      	lsls	r3, r3, #2
 80020f2:	4413      	add	r3, r2
 80020f4:	3b41      	subs	r3, #65	; 0x41
 80020f6:	fa00 f203 	lsl.w	r2, r0, r3
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	430a      	orrs	r2, r1
 8002100:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002102:	4b22      	ldr	r3, [pc, #136]	; (800218c <HAL_ADC_ConfigChannel+0x234>)
 8002104:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	4a21      	ldr	r2, [pc, #132]	; (8002190 <HAL_ADC_ConfigChannel+0x238>)
 800210c:	4293      	cmp	r3, r2
 800210e:	d109      	bne.n	8002124 <HAL_ADC_ConfigChannel+0x1cc>
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	2b12      	cmp	r3, #18
 8002116:	d105      	bne.n	8002124 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	4a19      	ldr	r2, [pc, #100]	; (8002190 <HAL_ADC_ConfigChannel+0x238>)
 800212a:	4293      	cmp	r3, r2
 800212c:	d123      	bne.n	8002176 <HAL_ADC_ConfigChannel+0x21e>
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	2b10      	cmp	r3, #16
 8002134:	d003      	beq.n	800213e <HAL_ADC_ConfigChannel+0x1e6>
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	2b11      	cmp	r3, #17
 800213c:	d11b      	bne.n	8002176 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	2b10      	cmp	r3, #16
 8002150:	d111      	bne.n	8002176 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002152:	4b10      	ldr	r3, [pc, #64]	; (8002194 <HAL_ADC_ConfigChannel+0x23c>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	4a10      	ldr	r2, [pc, #64]	; (8002198 <HAL_ADC_ConfigChannel+0x240>)
 8002158:	fba2 2303 	umull	r2, r3, r2, r3
 800215c:	0c9a      	lsrs	r2, r3, #18
 800215e:	4613      	mov	r3, r2
 8002160:	009b      	lsls	r3, r3, #2
 8002162:	4413      	add	r3, r2
 8002164:	005b      	lsls	r3, r3, #1
 8002166:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002168:	e002      	b.n	8002170 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800216a:	68bb      	ldr	r3, [r7, #8]
 800216c:	3b01      	subs	r3, #1
 800216e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002170:	68bb      	ldr	r3, [r7, #8]
 8002172:	2b00      	cmp	r3, #0
 8002174:	d1f9      	bne.n	800216a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	2200      	movs	r2, #0
 800217a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800217e:	2300      	movs	r3, #0
}
 8002180:	4618      	mov	r0, r3
 8002182:	3714      	adds	r7, #20
 8002184:	46bd      	mov	sp, r7
 8002186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218a:	4770      	bx	lr
 800218c:	40012300 	.word	0x40012300
 8002190:	40012000 	.word	0x40012000
 8002194:	20000000 	.word	0x20000000
 8002198:	431bde83 	.word	0x431bde83

0800219c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800219c:	b480      	push	{r7}
 800219e:	b085      	sub	sp, #20
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80021a4:	4b79      	ldr	r3, [pc, #484]	; (800238c <ADC_Init+0x1f0>)
 80021a6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	685a      	ldr	r2, [r3, #4]
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	431a      	orrs	r2, r3
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	685a      	ldr	r2, [r3, #4]
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80021d0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	6859      	ldr	r1, [r3, #4]
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	691b      	ldr	r3, [r3, #16]
 80021dc:	021a      	lsls	r2, r3, #8
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	430a      	orrs	r2, r1
 80021e4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	685a      	ldr	r2, [r3, #4]
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80021f4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	6859      	ldr	r1, [r3, #4]
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	689a      	ldr	r2, [r3, #8]
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	430a      	orrs	r2, r1
 8002206:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	689a      	ldr	r2, [r3, #8]
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002216:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	6899      	ldr	r1, [r3, #8]
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	68da      	ldr	r2, [r3, #12]
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	430a      	orrs	r2, r1
 8002228:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800222e:	4a58      	ldr	r2, [pc, #352]	; (8002390 <ADC_Init+0x1f4>)
 8002230:	4293      	cmp	r3, r2
 8002232:	d022      	beq.n	800227a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	689a      	ldr	r2, [r3, #8]
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002242:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	6899      	ldr	r1, [r3, #8]
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	430a      	orrs	r2, r1
 8002254:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	689a      	ldr	r2, [r3, #8]
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002264:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	6899      	ldr	r1, [r3, #8]
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	430a      	orrs	r2, r1
 8002276:	609a      	str	r2, [r3, #8]
 8002278:	e00f      	b.n	800229a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	689a      	ldr	r2, [r3, #8]
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002288:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	689a      	ldr	r2, [r3, #8]
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002298:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	689a      	ldr	r2, [r3, #8]
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f022 0202 	bic.w	r2, r2, #2
 80022a8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	6899      	ldr	r1, [r3, #8]
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	7e1b      	ldrb	r3, [r3, #24]
 80022b4:	005a      	lsls	r2, r3, #1
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	430a      	orrs	r2, r1
 80022bc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d01b      	beq.n	8002300 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	685a      	ldr	r2, [r3, #4]
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80022d6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	685a      	ldr	r2, [r3, #4]
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80022e6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	6859      	ldr	r1, [r3, #4]
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022f2:	3b01      	subs	r3, #1
 80022f4:	035a      	lsls	r2, r3, #13
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	430a      	orrs	r2, r1
 80022fc:	605a      	str	r2, [r3, #4]
 80022fe:	e007      	b.n	8002310 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	685a      	ldr	r2, [r3, #4]
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800230e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800231e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	69db      	ldr	r3, [r3, #28]
 800232a:	3b01      	subs	r3, #1
 800232c:	051a      	lsls	r2, r3, #20
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	430a      	orrs	r2, r1
 8002334:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	689a      	ldr	r2, [r3, #8]
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002344:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	6899      	ldr	r1, [r3, #8]
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002352:	025a      	lsls	r2, r3, #9
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	430a      	orrs	r2, r1
 800235a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	689a      	ldr	r2, [r3, #8]
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800236a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	6899      	ldr	r1, [r3, #8]
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	695b      	ldr	r3, [r3, #20]
 8002376:	029a      	lsls	r2, r3, #10
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	430a      	orrs	r2, r1
 800237e:	609a      	str	r2, [r3, #8]
}
 8002380:	bf00      	nop
 8002382:	3714      	adds	r7, #20
 8002384:	46bd      	mov	sp, r7
 8002386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238a:	4770      	bx	lr
 800238c:	40012300 	.word	0x40012300
 8002390:	0f000001 	.word	0x0f000001

08002394 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b084      	sub	sp, #16
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d101      	bne.n	80023a6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80023a2:	2301      	movs	r3, #1
 80023a4:	e0ed      	b.n	8002582 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80023ac:	b2db      	uxtb	r3, r3
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d102      	bne.n	80023b8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80023b2:	6878      	ldr	r0, [r7, #4]
 80023b4:	f7ff f962 	bl	800167c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	681a      	ldr	r2, [r3, #0]
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f022 0202 	bic.w	r2, r2, #2
 80023c6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80023c8:	f7ff fd76 	bl	8001eb8 <HAL_GetTick>
 80023cc:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80023ce:	e012      	b.n	80023f6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80023d0:	f7ff fd72 	bl	8001eb8 <HAL_GetTick>
 80023d4:	4602      	mov	r2, r0
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	1ad3      	subs	r3, r2, r3
 80023da:	2b0a      	cmp	r3, #10
 80023dc:	d90b      	bls.n	80023f6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023e2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	2205      	movs	r2, #5
 80023ee:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80023f2:	2301      	movs	r3, #1
 80023f4:	e0c5      	b.n	8002582 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	f003 0302 	and.w	r3, r3, #2
 8002400:	2b00      	cmp	r3, #0
 8002402:	d1e5      	bne.n	80023d0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	681a      	ldr	r2, [r3, #0]
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f042 0201 	orr.w	r2, r2, #1
 8002412:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002414:	f7ff fd50 	bl	8001eb8 <HAL_GetTick>
 8002418:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800241a:	e012      	b.n	8002442 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800241c:	f7ff fd4c 	bl	8001eb8 <HAL_GetTick>
 8002420:	4602      	mov	r2, r0
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	1ad3      	subs	r3, r2, r3
 8002426:	2b0a      	cmp	r3, #10
 8002428:	d90b      	bls.n	8002442 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800242e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	2205      	movs	r2, #5
 800243a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800243e:	2301      	movs	r3, #1
 8002440:	e09f      	b.n	8002582 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	f003 0301 	and.w	r3, r3, #1
 800244c:	2b00      	cmp	r3, #0
 800244e:	d0e5      	beq.n	800241c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	7e1b      	ldrb	r3, [r3, #24]
 8002454:	2b01      	cmp	r3, #1
 8002456:	d108      	bne.n	800246a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	681a      	ldr	r2, [r3, #0]
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002466:	601a      	str	r2, [r3, #0]
 8002468:	e007      	b.n	800247a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	681a      	ldr	r2, [r3, #0]
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002478:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	7e5b      	ldrb	r3, [r3, #25]
 800247e:	2b01      	cmp	r3, #1
 8002480:	d108      	bne.n	8002494 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	681a      	ldr	r2, [r3, #0]
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002490:	601a      	str	r2, [r3, #0]
 8002492:	e007      	b.n	80024a4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	681a      	ldr	r2, [r3, #0]
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80024a2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	7e9b      	ldrb	r3, [r3, #26]
 80024a8:	2b01      	cmp	r3, #1
 80024aa:	d108      	bne.n	80024be <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	681a      	ldr	r2, [r3, #0]
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f042 0220 	orr.w	r2, r2, #32
 80024ba:	601a      	str	r2, [r3, #0]
 80024bc:	e007      	b.n	80024ce <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	681a      	ldr	r2, [r3, #0]
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f022 0220 	bic.w	r2, r2, #32
 80024cc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	7edb      	ldrb	r3, [r3, #27]
 80024d2:	2b01      	cmp	r3, #1
 80024d4:	d108      	bne.n	80024e8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	681a      	ldr	r2, [r3, #0]
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f022 0210 	bic.w	r2, r2, #16
 80024e4:	601a      	str	r2, [r3, #0]
 80024e6:	e007      	b.n	80024f8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	681a      	ldr	r2, [r3, #0]
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f042 0210 	orr.w	r2, r2, #16
 80024f6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	7f1b      	ldrb	r3, [r3, #28]
 80024fc:	2b01      	cmp	r3, #1
 80024fe:	d108      	bne.n	8002512 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	681a      	ldr	r2, [r3, #0]
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f042 0208 	orr.w	r2, r2, #8
 800250e:	601a      	str	r2, [r3, #0]
 8002510:	e007      	b.n	8002522 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	681a      	ldr	r2, [r3, #0]
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f022 0208 	bic.w	r2, r2, #8
 8002520:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	7f5b      	ldrb	r3, [r3, #29]
 8002526:	2b01      	cmp	r3, #1
 8002528:	d108      	bne.n	800253c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	681a      	ldr	r2, [r3, #0]
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f042 0204 	orr.w	r2, r2, #4
 8002538:	601a      	str	r2, [r3, #0]
 800253a:	e007      	b.n	800254c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	681a      	ldr	r2, [r3, #0]
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f022 0204 	bic.w	r2, r2, #4
 800254a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	689a      	ldr	r2, [r3, #8]
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	68db      	ldr	r3, [r3, #12]
 8002554:	431a      	orrs	r2, r3
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	691b      	ldr	r3, [r3, #16]
 800255a:	431a      	orrs	r2, r3
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	695b      	ldr	r3, [r3, #20]
 8002560:	ea42 0103 	orr.w	r1, r2, r3
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	1e5a      	subs	r2, r3, #1
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	430a      	orrs	r2, r1
 8002570:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	2200      	movs	r2, #0
 8002576:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2201      	movs	r2, #1
 800257c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002580:	2300      	movs	r3, #0
}
 8002582:	4618      	mov	r0, r3
 8002584:	3710      	adds	r7, #16
 8002586:	46bd      	mov	sp, r7
 8002588:	bd80      	pop	{r7, pc}
	...

0800258c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800258c:	b480      	push	{r7}
 800258e:	b085      	sub	sp, #20
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	f003 0307 	and.w	r3, r3, #7
 800259a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800259c:	4b0c      	ldr	r3, [pc, #48]	; (80025d0 <__NVIC_SetPriorityGrouping+0x44>)
 800259e:	68db      	ldr	r3, [r3, #12]
 80025a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80025a2:	68ba      	ldr	r2, [r7, #8]
 80025a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80025a8:	4013      	ands	r3, r2
 80025aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80025b0:	68bb      	ldr	r3, [r7, #8]
 80025b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80025b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80025b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80025be:	4a04      	ldr	r2, [pc, #16]	; (80025d0 <__NVIC_SetPriorityGrouping+0x44>)
 80025c0:	68bb      	ldr	r3, [r7, #8]
 80025c2:	60d3      	str	r3, [r2, #12]
}
 80025c4:	bf00      	nop
 80025c6:	3714      	adds	r7, #20
 80025c8:	46bd      	mov	sp, r7
 80025ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ce:	4770      	bx	lr
 80025d0:	e000ed00 	.word	0xe000ed00

080025d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80025d4:	b480      	push	{r7}
 80025d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80025d8:	4b04      	ldr	r3, [pc, #16]	; (80025ec <__NVIC_GetPriorityGrouping+0x18>)
 80025da:	68db      	ldr	r3, [r3, #12]
 80025dc:	0a1b      	lsrs	r3, r3, #8
 80025de:	f003 0307 	and.w	r3, r3, #7
}
 80025e2:	4618      	mov	r0, r3
 80025e4:	46bd      	mov	sp, r7
 80025e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ea:	4770      	bx	lr
 80025ec:	e000ed00 	.word	0xe000ed00

080025f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025f0:	b480      	push	{r7}
 80025f2:	b083      	sub	sp, #12
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	4603      	mov	r3, r0
 80025f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	db0b      	blt.n	800261a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002602:	79fb      	ldrb	r3, [r7, #7]
 8002604:	f003 021f 	and.w	r2, r3, #31
 8002608:	4907      	ldr	r1, [pc, #28]	; (8002628 <__NVIC_EnableIRQ+0x38>)
 800260a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800260e:	095b      	lsrs	r3, r3, #5
 8002610:	2001      	movs	r0, #1
 8002612:	fa00 f202 	lsl.w	r2, r0, r2
 8002616:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800261a:	bf00      	nop
 800261c:	370c      	adds	r7, #12
 800261e:	46bd      	mov	sp, r7
 8002620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002624:	4770      	bx	lr
 8002626:	bf00      	nop
 8002628:	e000e100 	.word	0xe000e100

0800262c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800262c:	b480      	push	{r7}
 800262e:	b083      	sub	sp, #12
 8002630:	af00      	add	r7, sp, #0
 8002632:	4603      	mov	r3, r0
 8002634:	6039      	str	r1, [r7, #0]
 8002636:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002638:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800263c:	2b00      	cmp	r3, #0
 800263e:	db0a      	blt.n	8002656 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	b2da      	uxtb	r2, r3
 8002644:	490c      	ldr	r1, [pc, #48]	; (8002678 <__NVIC_SetPriority+0x4c>)
 8002646:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800264a:	0112      	lsls	r2, r2, #4
 800264c:	b2d2      	uxtb	r2, r2
 800264e:	440b      	add	r3, r1
 8002650:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002654:	e00a      	b.n	800266c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	b2da      	uxtb	r2, r3
 800265a:	4908      	ldr	r1, [pc, #32]	; (800267c <__NVIC_SetPriority+0x50>)
 800265c:	79fb      	ldrb	r3, [r7, #7]
 800265e:	f003 030f 	and.w	r3, r3, #15
 8002662:	3b04      	subs	r3, #4
 8002664:	0112      	lsls	r2, r2, #4
 8002666:	b2d2      	uxtb	r2, r2
 8002668:	440b      	add	r3, r1
 800266a:	761a      	strb	r2, [r3, #24]
}
 800266c:	bf00      	nop
 800266e:	370c      	adds	r7, #12
 8002670:	46bd      	mov	sp, r7
 8002672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002676:	4770      	bx	lr
 8002678:	e000e100 	.word	0xe000e100
 800267c:	e000ed00 	.word	0xe000ed00

08002680 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002680:	b480      	push	{r7}
 8002682:	b089      	sub	sp, #36	; 0x24
 8002684:	af00      	add	r7, sp, #0
 8002686:	60f8      	str	r0, [r7, #12]
 8002688:	60b9      	str	r1, [r7, #8]
 800268a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	f003 0307 	and.w	r3, r3, #7
 8002692:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002694:	69fb      	ldr	r3, [r7, #28]
 8002696:	f1c3 0307 	rsb	r3, r3, #7
 800269a:	2b04      	cmp	r3, #4
 800269c:	bf28      	it	cs
 800269e:	2304      	movcs	r3, #4
 80026a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80026a2:	69fb      	ldr	r3, [r7, #28]
 80026a4:	3304      	adds	r3, #4
 80026a6:	2b06      	cmp	r3, #6
 80026a8:	d902      	bls.n	80026b0 <NVIC_EncodePriority+0x30>
 80026aa:	69fb      	ldr	r3, [r7, #28]
 80026ac:	3b03      	subs	r3, #3
 80026ae:	e000      	b.n	80026b2 <NVIC_EncodePriority+0x32>
 80026b0:	2300      	movs	r3, #0
 80026b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026b4:	f04f 32ff 	mov.w	r2, #4294967295
 80026b8:	69bb      	ldr	r3, [r7, #24]
 80026ba:	fa02 f303 	lsl.w	r3, r2, r3
 80026be:	43da      	mvns	r2, r3
 80026c0:	68bb      	ldr	r3, [r7, #8]
 80026c2:	401a      	ands	r2, r3
 80026c4:	697b      	ldr	r3, [r7, #20]
 80026c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80026c8:	f04f 31ff 	mov.w	r1, #4294967295
 80026cc:	697b      	ldr	r3, [r7, #20]
 80026ce:	fa01 f303 	lsl.w	r3, r1, r3
 80026d2:	43d9      	mvns	r1, r3
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026d8:	4313      	orrs	r3, r2
         );
}
 80026da:	4618      	mov	r0, r3
 80026dc:	3724      	adds	r7, #36	; 0x24
 80026de:	46bd      	mov	sp, r7
 80026e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e4:	4770      	bx	lr

080026e6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026e6:	b580      	push	{r7, lr}
 80026e8:	b082      	sub	sp, #8
 80026ea:	af00      	add	r7, sp, #0
 80026ec:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80026ee:	6878      	ldr	r0, [r7, #4]
 80026f0:	f7ff ff4c 	bl	800258c <__NVIC_SetPriorityGrouping>
}
 80026f4:	bf00      	nop
 80026f6:	3708      	adds	r7, #8
 80026f8:	46bd      	mov	sp, r7
 80026fa:	bd80      	pop	{r7, pc}

080026fc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b086      	sub	sp, #24
 8002700:	af00      	add	r7, sp, #0
 8002702:	4603      	mov	r3, r0
 8002704:	60b9      	str	r1, [r7, #8]
 8002706:	607a      	str	r2, [r7, #4]
 8002708:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800270a:	2300      	movs	r3, #0
 800270c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800270e:	f7ff ff61 	bl	80025d4 <__NVIC_GetPriorityGrouping>
 8002712:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002714:	687a      	ldr	r2, [r7, #4]
 8002716:	68b9      	ldr	r1, [r7, #8]
 8002718:	6978      	ldr	r0, [r7, #20]
 800271a:	f7ff ffb1 	bl	8002680 <NVIC_EncodePriority>
 800271e:	4602      	mov	r2, r0
 8002720:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002724:	4611      	mov	r1, r2
 8002726:	4618      	mov	r0, r3
 8002728:	f7ff ff80 	bl	800262c <__NVIC_SetPriority>
}
 800272c:	bf00      	nop
 800272e:	3718      	adds	r7, #24
 8002730:	46bd      	mov	sp, r7
 8002732:	bd80      	pop	{r7, pc}

08002734 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b082      	sub	sp, #8
 8002738:	af00      	add	r7, sp, #0
 800273a:	4603      	mov	r3, r0
 800273c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800273e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002742:	4618      	mov	r0, r3
 8002744:	f7ff ff54 	bl	80025f0 <__NVIC_EnableIRQ>
}
 8002748:	bf00      	nop
 800274a:	3708      	adds	r7, #8
 800274c:	46bd      	mov	sp, r7
 800274e:	bd80      	pop	{r7, pc}

08002750 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002750:	b480      	push	{r7}
 8002752:	b089      	sub	sp, #36	; 0x24
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
 8002758:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800275a:	2300      	movs	r3, #0
 800275c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800275e:	2300      	movs	r3, #0
 8002760:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002762:	2300      	movs	r3, #0
 8002764:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002766:	2300      	movs	r3, #0
 8002768:	61fb      	str	r3, [r7, #28]
 800276a:	e16b      	b.n	8002a44 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800276c:	2201      	movs	r2, #1
 800276e:	69fb      	ldr	r3, [r7, #28]
 8002770:	fa02 f303 	lsl.w	r3, r2, r3
 8002774:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	697a      	ldr	r2, [r7, #20]
 800277c:	4013      	ands	r3, r2
 800277e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002780:	693a      	ldr	r2, [r7, #16]
 8002782:	697b      	ldr	r3, [r7, #20]
 8002784:	429a      	cmp	r2, r3
 8002786:	f040 815a 	bne.w	8002a3e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	685b      	ldr	r3, [r3, #4]
 800278e:	f003 0303 	and.w	r3, r3, #3
 8002792:	2b01      	cmp	r3, #1
 8002794:	d005      	beq.n	80027a2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800279e:	2b02      	cmp	r3, #2
 80027a0:	d130      	bne.n	8002804 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	689b      	ldr	r3, [r3, #8]
 80027a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80027a8:	69fb      	ldr	r3, [r7, #28]
 80027aa:	005b      	lsls	r3, r3, #1
 80027ac:	2203      	movs	r2, #3
 80027ae:	fa02 f303 	lsl.w	r3, r2, r3
 80027b2:	43db      	mvns	r3, r3
 80027b4:	69ba      	ldr	r2, [r7, #24]
 80027b6:	4013      	ands	r3, r2
 80027b8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	68da      	ldr	r2, [r3, #12]
 80027be:	69fb      	ldr	r3, [r7, #28]
 80027c0:	005b      	lsls	r3, r3, #1
 80027c2:	fa02 f303 	lsl.w	r3, r2, r3
 80027c6:	69ba      	ldr	r2, [r7, #24]
 80027c8:	4313      	orrs	r3, r2
 80027ca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	69ba      	ldr	r2, [r7, #24]
 80027d0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	685b      	ldr	r3, [r3, #4]
 80027d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80027d8:	2201      	movs	r2, #1
 80027da:	69fb      	ldr	r3, [r7, #28]
 80027dc:	fa02 f303 	lsl.w	r3, r2, r3
 80027e0:	43db      	mvns	r3, r3
 80027e2:	69ba      	ldr	r2, [r7, #24]
 80027e4:	4013      	ands	r3, r2
 80027e6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	685b      	ldr	r3, [r3, #4]
 80027ec:	091b      	lsrs	r3, r3, #4
 80027ee:	f003 0201 	and.w	r2, r3, #1
 80027f2:	69fb      	ldr	r3, [r7, #28]
 80027f4:	fa02 f303 	lsl.w	r3, r2, r3
 80027f8:	69ba      	ldr	r2, [r7, #24]
 80027fa:	4313      	orrs	r3, r2
 80027fc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	69ba      	ldr	r2, [r7, #24]
 8002802:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	f003 0303 	and.w	r3, r3, #3
 800280c:	2b03      	cmp	r3, #3
 800280e:	d017      	beq.n	8002840 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	68db      	ldr	r3, [r3, #12]
 8002814:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002816:	69fb      	ldr	r3, [r7, #28]
 8002818:	005b      	lsls	r3, r3, #1
 800281a:	2203      	movs	r2, #3
 800281c:	fa02 f303 	lsl.w	r3, r2, r3
 8002820:	43db      	mvns	r3, r3
 8002822:	69ba      	ldr	r2, [r7, #24]
 8002824:	4013      	ands	r3, r2
 8002826:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	689a      	ldr	r2, [r3, #8]
 800282c:	69fb      	ldr	r3, [r7, #28]
 800282e:	005b      	lsls	r3, r3, #1
 8002830:	fa02 f303 	lsl.w	r3, r2, r3
 8002834:	69ba      	ldr	r2, [r7, #24]
 8002836:	4313      	orrs	r3, r2
 8002838:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	69ba      	ldr	r2, [r7, #24]
 800283e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	f003 0303 	and.w	r3, r3, #3
 8002848:	2b02      	cmp	r3, #2
 800284a:	d123      	bne.n	8002894 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800284c:	69fb      	ldr	r3, [r7, #28]
 800284e:	08da      	lsrs	r2, r3, #3
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	3208      	adds	r2, #8
 8002854:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002858:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800285a:	69fb      	ldr	r3, [r7, #28]
 800285c:	f003 0307 	and.w	r3, r3, #7
 8002860:	009b      	lsls	r3, r3, #2
 8002862:	220f      	movs	r2, #15
 8002864:	fa02 f303 	lsl.w	r3, r2, r3
 8002868:	43db      	mvns	r3, r3
 800286a:	69ba      	ldr	r2, [r7, #24]
 800286c:	4013      	ands	r3, r2
 800286e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	691a      	ldr	r2, [r3, #16]
 8002874:	69fb      	ldr	r3, [r7, #28]
 8002876:	f003 0307 	and.w	r3, r3, #7
 800287a:	009b      	lsls	r3, r3, #2
 800287c:	fa02 f303 	lsl.w	r3, r2, r3
 8002880:	69ba      	ldr	r2, [r7, #24]
 8002882:	4313      	orrs	r3, r2
 8002884:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002886:	69fb      	ldr	r3, [r7, #28]
 8002888:	08da      	lsrs	r2, r3, #3
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	3208      	adds	r2, #8
 800288e:	69b9      	ldr	r1, [r7, #24]
 8002890:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800289a:	69fb      	ldr	r3, [r7, #28]
 800289c:	005b      	lsls	r3, r3, #1
 800289e:	2203      	movs	r2, #3
 80028a0:	fa02 f303 	lsl.w	r3, r2, r3
 80028a4:	43db      	mvns	r3, r3
 80028a6:	69ba      	ldr	r2, [r7, #24]
 80028a8:	4013      	ands	r3, r2
 80028aa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	685b      	ldr	r3, [r3, #4]
 80028b0:	f003 0203 	and.w	r2, r3, #3
 80028b4:	69fb      	ldr	r3, [r7, #28]
 80028b6:	005b      	lsls	r3, r3, #1
 80028b8:	fa02 f303 	lsl.w	r3, r2, r3
 80028bc:	69ba      	ldr	r2, [r7, #24]
 80028be:	4313      	orrs	r3, r2
 80028c0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	69ba      	ldr	r2, [r7, #24]
 80028c6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	f000 80b4 	beq.w	8002a3e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028d6:	2300      	movs	r3, #0
 80028d8:	60fb      	str	r3, [r7, #12]
 80028da:	4b60      	ldr	r3, [pc, #384]	; (8002a5c <HAL_GPIO_Init+0x30c>)
 80028dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028de:	4a5f      	ldr	r2, [pc, #380]	; (8002a5c <HAL_GPIO_Init+0x30c>)
 80028e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80028e4:	6453      	str	r3, [r2, #68]	; 0x44
 80028e6:	4b5d      	ldr	r3, [pc, #372]	; (8002a5c <HAL_GPIO_Init+0x30c>)
 80028e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028ee:	60fb      	str	r3, [r7, #12]
 80028f0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80028f2:	4a5b      	ldr	r2, [pc, #364]	; (8002a60 <HAL_GPIO_Init+0x310>)
 80028f4:	69fb      	ldr	r3, [r7, #28]
 80028f6:	089b      	lsrs	r3, r3, #2
 80028f8:	3302      	adds	r3, #2
 80028fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002900:	69fb      	ldr	r3, [r7, #28]
 8002902:	f003 0303 	and.w	r3, r3, #3
 8002906:	009b      	lsls	r3, r3, #2
 8002908:	220f      	movs	r2, #15
 800290a:	fa02 f303 	lsl.w	r3, r2, r3
 800290e:	43db      	mvns	r3, r3
 8002910:	69ba      	ldr	r2, [r7, #24]
 8002912:	4013      	ands	r3, r2
 8002914:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	4a52      	ldr	r2, [pc, #328]	; (8002a64 <HAL_GPIO_Init+0x314>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d02b      	beq.n	8002976 <HAL_GPIO_Init+0x226>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	4a51      	ldr	r2, [pc, #324]	; (8002a68 <HAL_GPIO_Init+0x318>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d025      	beq.n	8002972 <HAL_GPIO_Init+0x222>
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	4a50      	ldr	r2, [pc, #320]	; (8002a6c <HAL_GPIO_Init+0x31c>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d01f      	beq.n	800296e <HAL_GPIO_Init+0x21e>
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	4a4f      	ldr	r2, [pc, #316]	; (8002a70 <HAL_GPIO_Init+0x320>)
 8002932:	4293      	cmp	r3, r2
 8002934:	d019      	beq.n	800296a <HAL_GPIO_Init+0x21a>
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	4a4e      	ldr	r2, [pc, #312]	; (8002a74 <HAL_GPIO_Init+0x324>)
 800293a:	4293      	cmp	r3, r2
 800293c:	d013      	beq.n	8002966 <HAL_GPIO_Init+0x216>
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	4a4d      	ldr	r2, [pc, #308]	; (8002a78 <HAL_GPIO_Init+0x328>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d00d      	beq.n	8002962 <HAL_GPIO_Init+0x212>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	4a4c      	ldr	r2, [pc, #304]	; (8002a7c <HAL_GPIO_Init+0x32c>)
 800294a:	4293      	cmp	r3, r2
 800294c:	d007      	beq.n	800295e <HAL_GPIO_Init+0x20e>
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	4a4b      	ldr	r2, [pc, #300]	; (8002a80 <HAL_GPIO_Init+0x330>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d101      	bne.n	800295a <HAL_GPIO_Init+0x20a>
 8002956:	2307      	movs	r3, #7
 8002958:	e00e      	b.n	8002978 <HAL_GPIO_Init+0x228>
 800295a:	2308      	movs	r3, #8
 800295c:	e00c      	b.n	8002978 <HAL_GPIO_Init+0x228>
 800295e:	2306      	movs	r3, #6
 8002960:	e00a      	b.n	8002978 <HAL_GPIO_Init+0x228>
 8002962:	2305      	movs	r3, #5
 8002964:	e008      	b.n	8002978 <HAL_GPIO_Init+0x228>
 8002966:	2304      	movs	r3, #4
 8002968:	e006      	b.n	8002978 <HAL_GPIO_Init+0x228>
 800296a:	2303      	movs	r3, #3
 800296c:	e004      	b.n	8002978 <HAL_GPIO_Init+0x228>
 800296e:	2302      	movs	r3, #2
 8002970:	e002      	b.n	8002978 <HAL_GPIO_Init+0x228>
 8002972:	2301      	movs	r3, #1
 8002974:	e000      	b.n	8002978 <HAL_GPIO_Init+0x228>
 8002976:	2300      	movs	r3, #0
 8002978:	69fa      	ldr	r2, [r7, #28]
 800297a:	f002 0203 	and.w	r2, r2, #3
 800297e:	0092      	lsls	r2, r2, #2
 8002980:	4093      	lsls	r3, r2
 8002982:	69ba      	ldr	r2, [r7, #24]
 8002984:	4313      	orrs	r3, r2
 8002986:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002988:	4935      	ldr	r1, [pc, #212]	; (8002a60 <HAL_GPIO_Init+0x310>)
 800298a:	69fb      	ldr	r3, [r7, #28]
 800298c:	089b      	lsrs	r3, r3, #2
 800298e:	3302      	adds	r3, #2
 8002990:	69ba      	ldr	r2, [r7, #24]
 8002992:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002996:	4b3b      	ldr	r3, [pc, #236]	; (8002a84 <HAL_GPIO_Init+0x334>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800299c:	693b      	ldr	r3, [r7, #16]
 800299e:	43db      	mvns	r3, r3
 80029a0:	69ba      	ldr	r2, [r7, #24]
 80029a2:	4013      	ands	r3, r2
 80029a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	685b      	ldr	r3, [r3, #4]
 80029aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d003      	beq.n	80029ba <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80029b2:	69ba      	ldr	r2, [r7, #24]
 80029b4:	693b      	ldr	r3, [r7, #16]
 80029b6:	4313      	orrs	r3, r2
 80029b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80029ba:	4a32      	ldr	r2, [pc, #200]	; (8002a84 <HAL_GPIO_Init+0x334>)
 80029bc:	69bb      	ldr	r3, [r7, #24]
 80029be:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80029c0:	4b30      	ldr	r3, [pc, #192]	; (8002a84 <HAL_GPIO_Init+0x334>)
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029c6:	693b      	ldr	r3, [r7, #16]
 80029c8:	43db      	mvns	r3, r3
 80029ca:	69ba      	ldr	r2, [r7, #24]
 80029cc:	4013      	ands	r3, r2
 80029ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d003      	beq.n	80029e4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80029dc:	69ba      	ldr	r2, [r7, #24]
 80029de:	693b      	ldr	r3, [r7, #16]
 80029e0:	4313      	orrs	r3, r2
 80029e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80029e4:	4a27      	ldr	r2, [pc, #156]	; (8002a84 <HAL_GPIO_Init+0x334>)
 80029e6:	69bb      	ldr	r3, [r7, #24]
 80029e8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80029ea:	4b26      	ldr	r3, [pc, #152]	; (8002a84 <HAL_GPIO_Init+0x334>)
 80029ec:	689b      	ldr	r3, [r3, #8]
 80029ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029f0:	693b      	ldr	r3, [r7, #16]
 80029f2:	43db      	mvns	r3, r3
 80029f4:	69ba      	ldr	r2, [r7, #24]
 80029f6:	4013      	ands	r3, r2
 80029f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d003      	beq.n	8002a0e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002a06:	69ba      	ldr	r2, [r7, #24]
 8002a08:	693b      	ldr	r3, [r7, #16]
 8002a0a:	4313      	orrs	r3, r2
 8002a0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002a0e:	4a1d      	ldr	r2, [pc, #116]	; (8002a84 <HAL_GPIO_Init+0x334>)
 8002a10:	69bb      	ldr	r3, [r7, #24]
 8002a12:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002a14:	4b1b      	ldr	r3, [pc, #108]	; (8002a84 <HAL_GPIO_Init+0x334>)
 8002a16:	68db      	ldr	r3, [r3, #12]
 8002a18:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a1a:	693b      	ldr	r3, [r7, #16]
 8002a1c:	43db      	mvns	r3, r3
 8002a1e:	69ba      	ldr	r2, [r7, #24]
 8002a20:	4013      	ands	r3, r2
 8002a22:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	685b      	ldr	r3, [r3, #4]
 8002a28:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d003      	beq.n	8002a38 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002a30:	69ba      	ldr	r2, [r7, #24]
 8002a32:	693b      	ldr	r3, [r7, #16]
 8002a34:	4313      	orrs	r3, r2
 8002a36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002a38:	4a12      	ldr	r2, [pc, #72]	; (8002a84 <HAL_GPIO_Init+0x334>)
 8002a3a:	69bb      	ldr	r3, [r7, #24]
 8002a3c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a3e:	69fb      	ldr	r3, [r7, #28]
 8002a40:	3301      	adds	r3, #1
 8002a42:	61fb      	str	r3, [r7, #28]
 8002a44:	69fb      	ldr	r3, [r7, #28]
 8002a46:	2b0f      	cmp	r3, #15
 8002a48:	f67f ae90 	bls.w	800276c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002a4c:	bf00      	nop
 8002a4e:	bf00      	nop
 8002a50:	3724      	adds	r7, #36	; 0x24
 8002a52:	46bd      	mov	sp, r7
 8002a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a58:	4770      	bx	lr
 8002a5a:	bf00      	nop
 8002a5c:	40023800 	.word	0x40023800
 8002a60:	40013800 	.word	0x40013800
 8002a64:	40020000 	.word	0x40020000
 8002a68:	40020400 	.word	0x40020400
 8002a6c:	40020800 	.word	0x40020800
 8002a70:	40020c00 	.word	0x40020c00
 8002a74:	40021000 	.word	0x40021000
 8002a78:	40021400 	.word	0x40021400
 8002a7c:	40021800 	.word	0x40021800
 8002a80:	40021c00 	.word	0x40021c00
 8002a84:	40013c00 	.word	0x40013c00

08002a88 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	b083      	sub	sp, #12
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
 8002a90:	460b      	mov	r3, r1
 8002a92:	807b      	strh	r3, [r7, #2]
 8002a94:	4613      	mov	r3, r2
 8002a96:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002a98:	787b      	ldrb	r3, [r7, #1]
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d003      	beq.n	8002aa6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002a9e:	887a      	ldrh	r2, [r7, #2]
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002aa4:	e003      	b.n	8002aae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002aa6:	887b      	ldrh	r3, [r7, #2]
 8002aa8:	041a      	lsls	r2, r3, #16
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	619a      	str	r2, [r3, #24]
}
 8002aae:	bf00      	nop
 8002ab0:	370c      	adds	r7, #12
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab8:	4770      	bx	lr

08002aba <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002aba:	b480      	push	{r7}
 8002abc:	b085      	sub	sp, #20
 8002abe:	af00      	add	r7, sp, #0
 8002ac0:	6078      	str	r0, [r7, #4]
 8002ac2:	460b      	mov	r3, r1
 8002ac4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	695b      	ldr	r3, [r3, #20]
 8002aca:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002acc:	887a      	ldrh	r2, [r7, #2]
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	4013      	ands	r3, r2
 8002ad2:	041a      	lsls	r2, r3, #16
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	43d9      	mvns	r1, r3
 8002ad8:	887b      	ldrh	r3, [r7, #2]
 8002ada:	400b      	ands	r3, r1
 8002adc:	431a      	orrs	r2, r3
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	619a      	str	r2, [r3, #24]
}
 8002ae2:	bf00      	nop
 8002ae4:	3714      	adds	r7, #20
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aec:	4770      	bx	lr
	...

08002af0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b086      	sub	sp, #24
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d101      	bne.n	8002b02 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002afe:	2301      	movs	r3, #1
 8002b00:	e264      	b.n	8002fcc <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f003 0301 	and.w	r3, r3, #1
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d075      	beq.n	8002bfa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002b0e:	4ba3      	ldr	r3, [pc, #652]	; (8002d9c <HAL_RCC_OscConfig+0x2ac>)
 8002b10:	689b      	ldr	r3, [r3, #8]
 8002b12:	f003 030c 	and.w	r3, r3, #12
 8002b16:	2b04      	cmp	r3, #4
 8002b18:	d00c      	beq.n	8002b34 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b1a:	4ba0      	ldr	r3, [pc, #640]	; (8002d9c <HAL_RCC_OscConfig+0x2ac>)
 8002b1c:	689b      	ldr	r3, [r3, #8]
 8002b1e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002b22:	2b08      	cmp	r3, #8
 8002b24:	d112      	bne.n	8002b4c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b26:	4b9d      	ldr	r3, [pc, #628]	; (8002d9c <HAL_RCC_OscConfig+0x2ac>)
 8002b28:	685b      	ldr	r3, [r3, #4]
 8002b2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b2e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b32:	d10b      	bne.n	8002b4c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b34:	4b99      	ldr	r3, [pc, #612]	; (8002d9c <HAL_RCC_OscConfig+0x2ac>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d05b      	beq.n	8002bf8 <HAL_RCC_OscConfig+0x108>
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	685b      	ldr	r3, [r3, #4]
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d157      	bne.n	8002bf8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002b48:	2301      	movs	r3, #1
 8002b4a:	e23f      	b.n	8002fcc <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b54:	d106      	bne.n	8002b64 <HAL_RCC_OscConfig+0x74>
 8002b56:	4b91      	ldr	r3, [pc, #580]	; (8002d9c <HAL_RCC_OscConfig+0x2ac>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	4a90      	ldr	r2, [pc, #576]	; (8002d9c <HAL_RCC_OscConfig+0x2ac>)
 8002b5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b60:	6013      	str	r3, [r2, #0]
 8002b62:	e01d      	b.n	8002ba0 <HAL_RCC_OscConfig+0xb0>
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002b6c:	d10c      	bne.n	8002b88 <HAL_RCC_OscConfig+0x98>
 8002b6e:	4b8b      	ldr	r3, [pc, #556]	; (8002d9c <HAL_RCC_OscConfig+0x2ac>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	4a8a      	ldr	r2, [pc, #552]	; (8002d9c <HAL_RCC_OscConfig+0x2ac>)
 8002b74:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b78:	6013      	str	r3, [r2, #0]
 8002b7a:	4b88      	ldr	r3, [pc, #544]	; (8002d9c <HAL_RCC_OscConfig+0x2ac>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	4a87      	ldr	r2, [pc, #540]	; (8002d9c <HAL_RCC_OscConfig+0x2ac>)
 8002b80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b84:	6013      	str	r3, [r2, #0]
 8002b86:	e00b      	b.n	8002ba0 <HAL_RCC_OscConfig+0xb0>
 8002b88:	4b84      	ldr	r3, [pc, #528]	; (8002d9c <HAL_RCC_OscConfig+0x2ac>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4a83      	ldr	r2, [pc, #524]	; (8002d9c <HAL_RCC_OscConfig+0x2ac>)
 8002b8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b92:	6013      	str	r3, [r2, #0]
 8002b94:	4b81      	ldr	r3, [pc, #516]	; (8002d9c <HAL_RCC_OscConfig+0x2ac>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4a80      	ldr	r2, [pc, #512]	; (8002d9c <HAL_RCC_OscConfig+0x2ac>)
 8002b9a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b9e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	685b      	ldr	r3, [r3, #4]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d013      	beq.n	8002bd0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ba8:	f7ff f986 	bl	8001eb8 <HAL_GetTick>
 8002bac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bae:	e008      	b.n	8002bc2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002bb0:	f7ff f982 	bl	8001eb8 <HAL_GetTick>
 8002bb4:	4602      	mov	r2, r0
 8002bb6:	693b      	ldr	r3, [r7, #16]
 8002bb8:	1ad3      	subs	r3, r2, r3
 8002bba:	2b64      	cmp	r3, #100	; 0x64
 8002bbc:	d901      	bls.n	8002bc2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002bbe:	2303      	movs	r3, #3
 8002bc0:	e204      	b.n	8002fcc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bc2:	4b76      	ldr	r3, [pc, #472]	; (8002d9c <HAL_RCC_OscConfig+0x2ac>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d0f0      	beq.n	8002bb0 <HAL_RCC_OscConfig+0xc0>
 8002bce:	e014      	b.n	8002bfa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bd0:	f7ff f972 	bl	8001eb8 <HAL_GetTick>
 8002bd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002bd6:	e008      	b.n	8002bea <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002bd8:	f7ff f96e 	bl	8001eb8 <HAL_GetTick>
 8002bdc:	4602      	mov	r2, r0
 8002bde:	693b      	ldr	r3, [r7, #16]
 8002be0:	1ad3      	subs	r3, r2, r3
 8002be2:	2b64      	cmp	r3, #100	; 0x64
 8002be4:	d901      	bls.n	8002bea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002be6:	2303      	movs	r3, #3
 8002be8:	e1f0      	b.n	8002fcc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002bea:	4b6c      	ldr	r3, [pc, #432]	; (8002d9c <HAL_RCC_OscConfig+0x2ac>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d1f0      	bne.n	8002bd8 <HAL_RCC_OscConfig+0xe8>
 8002bf6:	e000      	b.n	8002bfa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bf8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f003 0302 	and.w	r3, r3, #2
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d063      	beq.n	8002cce <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002c06:	4b65      	ldr	r3, [pc, #404]	; (8002d9c <HAL_RCC_OscConfig+0x2ac>)
 8002c08:	689b      	ldr	r3, [r3, #8]
 8002c0a:	f003 030c 	and.w	r3, r3, #12
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d00b      	beq.n	8002c2a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c12:	4b62      	ldr	r3, [pc, #392]	; (8002d9c <HAL_RCC_OscConfig+0x2ac>)
 8002c14:	689b      	ldr	r3, [r3, #8]
 8002c16:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002c1a:	2b08      	cmp	r3, #8
 8002c1c:	d11c      	bne.n	8002c58 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c1e:	4b5f      	ldr	r3, [pc, #380]	; (8002d9c <HAL_RCC_OscConfig+0x2ac>)
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d116      	bne.n	8002c58 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c2a:	4b5c      	ldr	r3, [pc, #368]	; (8002d9c <HAL_RCC_OscConfig+0x2ac>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f003 0302 	and.w	r3, r3, #2
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d005      	beq.n	8002c42 <HAL_RCC_OscConfig+0x152>
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	68db      	ldr	r3, [r3, #12]
 8002c3a:	2b01      	cmp	r3, #1
 8002c3c:	d001      	beq.n	8002c42 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002c3e:	2301      	movs	r3, #1
 8002c40:	e1c4      	b.n	8002fcc <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c42:	4b56      	ldr	r3, [pc, #344]	; (8002d9c <HAL_RCC_OscConfig+0x2ac>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	691b      	ldr	r3, [r3, #16]
 8002c4e:	00db      	lsls	r3, r3, #3
 8002c50:	4952      	ldr	r1, [pc, #328]	; (8002d9c <HAL_RCC_OscConfig+0x2ac>)
 8002c52:	4313      	orrs	r3, r2
 8002c54:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c56:	e03a      	b.n	8002cce <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	68db      	ldr	r3, [r3, #12]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d020      	beq.n	8002ca2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c60:	4b4f      	ldr	r3, [pc, #316]	; (8002da0 <HAL_RCC_OscConfig+0x2b0>)
 8002c62:	2201      	movs	r2, #1
 8002c64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c66:	f7ff f927 	bl	8001eb8 <HAL_GetTick>
 8002c6a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c6c:	e008      	b.n	8002c80 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c6e:	f7ff f923 	bl	8001eb8 <HAL_GetTick>
 8002c72:	4602      	mov	r2, r0
 8002c74:	693b      	ldr	r3, [r7, #16]
 8002c76:	1ad3      	subs	r3, r2, r3
 8002c78:	2b02      	cmp	r3, #2
 8002c7a:	d901      	bls.n	8002c80 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002c7c:	2303      	movs	r3, #3
 8002c7e:	e1a5      	b.n	8002fcc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c80:	4b46      	ldr	r3, [pc, #280]	; (8002d9c <HAL_RCC_OscConfig+0x2ac>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f003 0302 	and.w	r3, r3, #2
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d0f0      	beq.n	8002c6e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c8c:	4b43      	ldr	r3, [pc, #268]	; (8002d9c <HAL_RCC_OscConfig+0x2ac>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	691b      	ldr	r3, [r3, #16]
 8002c98:	00db      	lsls	r3, r3, #3
 8002c9a:	4940      	ldr	r1, [pc, #256]	; (8002d9c <HAL_RCC_OscConfig+0x2ac>)
 8002c9c:	4313      	orrs	r3, r2
 8002c9e:	600b      	str	r3, [r1, #0]
 8002ca0:	e015      	b.n	8002cce <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ca2:	4b3f      	ldr	r3, [pc, #252]	; (8002da0 <HAL_RCC_OscConfig+0x2b0>)
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ca8:	f7ff f906 	bl	8001eb8 <HAL_GetTick>
 8002cac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002cae:	e008      	b.n	8002cc2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002cb0:	f7ff f902 	bl	8001eb8 <HAL_GetTick>
 8002cb4:	4602      	mov	r2, r0
 8002cb6:	693b      	ldr	r3, [r7, #16]
 8002cb8:	1ad3      	subs	r3, r2, r3
 8002cba:	2b02      	cmp	r3, #2
 8002cbc:	d901      	bls.n	8002cc2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002cbe:	2303      	movs	r3, #3
 8002cc0:	e184      	b.n	8002fcc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002cc2:	4b36      	ldr	r3, [pc, #216]	; (8002d9c <HAL_RCC_OscConfig+0x2ac>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f003 0302 	and.w	r3, r3, #2
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d1f0      	bne.n	8002cb0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f003 0308 	and.w	r3, r3, #8
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d030      	beq.n	8002d3c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	695b      	ldr	r3, [r3, #20]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d016      	beq.n	8002d10 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ce2:	4b30      	ldr	r3, [pc, #192]	; (8002da4 <HAL_RCC_OscConfig+0x2b4>)
 8002ce4:	2201      	movs	r2, #1
 8002ce6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ce8:	f7ff f8e6 	bl	8001eb8 <HAL_GetTick>
 8002cec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002cee:	e008      	b.n	8002d02 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002cf0:	f7ff f8e2 	bl	8001eb8 <HAL_GetTick>
 8002cf4:	4602      	mov	r2, r0
 8002cf6:	693b      	ldr	r3, [r7, #16]
 8002cf8:	1ad3      	subs	r3, r2, r3
 8002cfa:	2b02      	cmp	r3, #2
 8002cfc:	d901      	bls.n	8002d02 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002cfe:	2303      	movs	r3, #3
 8002d00:	e164      	b.n	8002fcc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d02:	4b26      	ldr	r3, [pc, #152]	; (8002d9c <HAL_RCC_OscConfig+0x2ac>)
 8002d04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d06:	f003 0302 	and.w	r3, r3, #2
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d0f0      	beq.n	8002cf0 <HAL_RCC_OscConfig+0x200>
 8002d0e:	e015      	b.n	8002d3c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d10:	4b24      	ldr	r3, [pc, #144]	; (8002da4 <HAL_RCC_OscConfig+0x2b4>)
 8002d12:	2200      	movs	r2, #0
 8002d14:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d16:	f7ff f8cf 	bl	8001eb8 <HAL_GetTick>
 8002d1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d1c:	e008      	b.n	8002d30 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d1e:	f7ff f8cb 	bl	8001eb8 <HAL_GetTick>
 8002d22:	4602      	mov	r2, r0
 8002d24:	693b      	ldr	r3, [r7, #16]
 8002d26:	1ad3      	subs	r3, r2, r3
 8002d28:	2b02      	cmp	r3, #2
 8002d2a:	d901      	bls.n	8002d30 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002d2c:	2303      	movs	r3, #3
 8002d2e:	e14d      	b.n	8002fcc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d30:	4b1a      	ldr	r3, [pc, #104]	; (8002d9c <HAL_RCC_OscConfig+0x2ac>)
 8002d32:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d34:	f003 0302 	and.w	r3, r3, #2
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d1f0      	bne.n	8002d1e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f003 0304 	and.w	r3, r3, #4
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	f000 80a0 	beq.w	8002e8a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d4e:	4b13      	ldr	r3, [pc, #76]	; (8002d9c <HAL_RCC_OscConfig+0x2ac>)
 8002d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d10f      	bne.n	8002d7a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	60bb      	str	r3, [r7, #8]
 8002d5e:	4b0f      	ldr	r3, [pc, #60]	; (8002d9c <HAL_RCC_OscConfig+0x2ac>)
 8002d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d62:	4a0e      	ldr	r2, [pc, #56]	; (8002d9c <HAL_RCC_OscConfig+0x2ac>)
 8002d64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d68:	6413      	str	r3, [r2, #64]	; 0x40
 8002d6a:	4b0c      	ldr	r3, [pc, #48]	; (8002d9c <HAL_RCC_OscConfig+0x2ac>)
 8002d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d72:	60bb      	str	r3, [r7, #8]
 8002d74:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d76:	2301      	movs	r3, #1
 8002d78:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d7a:	4b0b      	ldr	r3, [pc, #44]	; (8002da8 <HAL_RCC_OscConfig+0x2b8>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d121      	bne.n	8002dca <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d86:	4b08      	ldr	r3, [pc, #32]	; (8002da8 <HAL_RCC_OscConfig+0x2b8>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4a07      	ldr	r2, [pc, #28]	; (8002da8 <HAL_RCC_OscConfig+0x2b8>)
 8002d8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d90:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d92:	f7ff f891 	bl	8001eb8 <HAL_GetTick>
 8002d96:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d98:	e011      	b.n	8002dbe <HAL_RCC_OscConfig+0x2ce>
 8002d9a:	bf00      	nop
 8002d9c:	40023800 	.word	0x40023800
 8002da0:	42470000 	.word	0x42470000
 8002da4:	42470e80 	.word	0x42470e80
 8002da8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002dac:	f7ff f884 	bl	8001eb8 <HAL_GetTick>
 8002db0:	4602      	mov	r2, r0
 8002db2:	693b      	ldr	r3, [r7, #16]
 8002db4:	1ad3      	subs	r3, r2, r3
 8002db6:	2b02      	cmp	r3, #2
 8002db8:	d901      	bls.n	8002dbe <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002dba:	2303      	movs	r3, #3
 8002dbc:	e106      	b.n	8002fcc <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dbe:	4b85      	ldr	r3, [pc, #532]	; (8002fd4 <HAL_RCC_OscConfig+0x4e4>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d0f0      	beq.n	8002dac <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	689b      	ldr	r3, [r3, #8]
 8002dce:	2b01      	cmp	r3, #1
 8002dd0:	d106      	bne.n	8002de0 <HAL_RCC_OscConfig+0x2f0>
 8002dd2:	4b81      	ldr	r3, [pc, #516]	; (8002fd8 <HAL_RCC_OscConfig+0x4e8>)
 8002dd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dd6:	4a80      	ldr	r2, [pc, #512]	; (8002fd8 <HAL_RCC_OscConfig+0x4e8>)
 8002dd8:	f043 0301 	orr.w	r3, r3, #1
 8002ddc:	6713      	str	r3, [r2, #112]	; 0x70
 8002dde:	e01c      	b.n	8002e1a <HAL_RCC_OscConfig+0x32a>
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	689b      	ldr	r3, [r3, #8]
 8002de4:	2b05      	cmp	r3, #5
 8002de6:	d10c      	bne.n	8002e02 <HAL_RCC_OscConfig+0x312>
 8002de8:	4b7b      	ldr	r3, [pc, #492]	; (8002fd8 <HAL_RCC_OscConfig+0x4e8>)
 8002dea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dec:	4a7a      	ldr	r2, [pc, #488]	; (8002fd8 <HAL_RCC_OscConfig+0x4e8>)
 8002dee:	f043 0304 	orr.w	r3, r3, #4
 8002df2:	6713      	str	r3, [r2, #112]	; 0x70
 8002df4:	4b78      	ldr	r3, [pc, #480]	; (8002fd8 <HAL_RCC_OscConfig+0x4e8>)
 8002df6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002df8:	4a77      	ldr	r2, [pc, #476]	; (8002fd8 <HAL_RCC_OscConfig+0x4e8>)
 8002dfa:	f043 0301 	orr.w	r3, r3, #1
 8002dfe:	6713      	str	r3, [r2, #112]	; 0x70
 8002e00:	e00b      	b.n	8002e1a <HAL_RCC_OscConfig+0x32a>
 8002e02:	4b75      	ldr	r3, [pc, #468]	; (8002fd8 <HAL_RCC_OscConfig+0x4e8>)
 8002e04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e06:	4a74      	ldr	r2, [pc, #464]	; (8002fd8 <HAL_RCC_OscConfig+0x4e8>)
 8002e08:	f023 0301 	bic.w	r3, r3, #1
 8002e0c:	6713      	str	r3, [r2, #112]	; 0x70
 8002e0e:	4b72      	ldr	r3, [pc, #456]	; (8002fd8 <HAL_RCC_OscConfig+0x4e8>)
 8002e10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e12:	4a71      	ldr	r2, [pc, #452]	; (8002fd8 <HAL_RCC_OscConfig+0x4e8>)
 8002e14:	f023 0304 	bic.w	r3, r3, #4
 8002e18:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	689b      	ldr	r3, [r3, #8]
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d015      	beq.n	8002e4e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e22:	f7ff f849 	bl	8001eb8 <HAL_GetTick>
 8002e26:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e28:	e00a      	b.n	8002e40 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e2a:	f7ff f845 	bl	8001eb8 <HAL_GetTick>
 8002e2e:	4602      	mov	r2, r0
 8002e30:	693b      	ldr	r3, [r7, #16]
 8002e32:	1ad3      	subs	r3, r2, r3
 8002e34:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e38:	4293      	cmp	r3, r2
 8002e3a:	d901      	bls.n	8002e40 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002e3c:	2303      	movs	r3, #3
 8002e3e:	e0c5      	b.n	8002fcc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e40:	4b65      	ldr	r3, [pc, #404]	; (8002fd8 <HAL_RCC_OscConfig+0x4e8>)
 8002e42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e44:	f003 0302 	and.w	r3, r3, #2
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d0ee      	beq.n	8002e2a <HAL_RCC_OscConfig+0x33a>
 8002e4c:	e014      	b.n	8002e78 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e4e:	f7ff f833 	bl	8001eb8 <HAL_GetTick>
 8002e52:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e54:	e00a      	b.n	8002e6c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e56:	f7ff f82f 	bl	8001eb8 <HAL_GetTick>
 8002e5a:	4602      	mov	r2, r0
 8002e5c:	693b      	ldr	r3, [r7, #16]
 8002e5e:	1ad3      	subs	r3, r2, r3
 8002e60:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e64:	4293      	cmp	r3, r2
 8002e66:	d901      	bls.n	8002e6c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002e68:	2303      	movs	r3, #3
 8002e6a:	e0af      	b.n	8002fcc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e6c:	4b5a      	ldr	r3, [pc, #360]	; (8002fd8 <HAL_RCC_OscConfig+0x4e8>)
 8002e6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e70:	f003 0302 	and.w	r3, r3, #2
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d1ee      	bne.n	8002e56 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002e78:	7dfb      	ldrb	r3, [r7, #23]
 8002e7a:	2b01      	cmp	r3, #1
 8002e7c:	d105      	bne.n	8002e8a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e7e:	4b56      	ldr	r3, [pc, #344]	; (8002fd8 <HAL_RCC_OscConfig+0x4e8>)
 8002e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e82:	4a55      	ldr	r2, [pc, #340]	; (8002fd8 <HAL_RCC_OscConfig+0x4e8>)
 8002e84:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e88:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	699b      	ldr	r3, [r3, #24]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	f000 809b 	beq.w	8002fca <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002e94:	4b50      	ldr	r3, [pc, #320]	; (8002fd8 <HAL_RCC_OscConfig+0x4e8>)
 8002e96:	689b      	ldr	r3, [r3, #8]
 8002e98:	f003 030c 	and.w	r3, r3, #12
 8002e9c:	2b08      	cmp	r3, #8
 8002e9e:	d05c      	beq.n	8002f5a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	699b      	ldr	r3, [r3, #24]
 8002ea4:	2b02      	cmp	r3, #2
 8002ea6:	d141      	bne.n	8002f2c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ea8:	4b4c      	ldr	r3, [pc, #304]	; (8002fdc <HAL_RCC_OscConfig+0x4ec>)
 8002eaa:	2200      	movs	r2, #0
 8002eac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002eae:	f7ff f803 	bl	8001eb8 <HAL_GetTick>
 8002eb2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002eb4:	e008      	b.n	8002ec8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002eb6:	f7fe ffff 	bl	8001eb8 <HAL_GetTick>
 8002eba:	4602      	mov	r2, r0
 8002ebc:	693b      	ldr	r3, [r7, #16]
 8002ebe:	1ad3      	subs	r3, r2, r3
 8002ec0:	2b02      	cmp	r3, #2
 8002ec2:	d901      	bls.n	8002ec8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002ec4:	2303      	movs	r3, #3
 8002ec6:	e081      	b.n	8002fcc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ec8:	4b43      	ldr	r3, [pc, #268]	; (8002fd8 <HAL_RCC_OscConfig+0x4e8>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d1f0      	bne.n	8002eb6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	69da      	ldr	r2, [r3, #28]
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6a1b      	ldr	r3, [r3, #32]
 8002edc:	431a      	orrs	r2, r3
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ee2:	019b      	lsls	r3, r3, #6
 8002ee4:	431a      	orrs	r2, r3
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eea:	085b      	lsrs	r3, r3, #1
 8002eec:	3b01      	subs	r3, #1
 8002eee:	041b      	lsls	r3, r3, #16
 8002ef0:	431a      	orrs	r2, r3
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ef6:	061b      	lsls	r3, r3, #24
 8002ef8:	4937      	ldr	r1, [pc, #220]	; (8002fd8 <HAL_RCC_OscConfig+0x4e8>)
 8002efa:	4313      	orrs	r3, r2
 8002efc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002efe:	4b37      	ldr	r3, [pc, #220]	; (8002fdc <HAL_RCC_OscConfig+0x4ec>)
 8002f00:	2201      	movs	r2, #1
 8002f02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f04:	f7fe ffd8 	bl	8001eb8 <HAL_GetTick>
 8002f08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f0a:	e008      	b.n	8002f1e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f0c:	f7fe ffd4 	bl	8001eb8 <HAL_GetTick>
 8002f10:	4602      	mov	r2, r0
 8002f12:	693b      	ldr	r3, [r7, #16]
 8002f14:	1ad3      	subs	r3, r2, r3
 8002f16:	2b02      	cmp	r3, #2
 8002f18:	d901      	bls.n	8002f1e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002f1a:	2303      	movs	r3, #3
 8002f1c:	e056      	b.n	8002fcc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f1e:	4b2e      	ldr	r3, [pc, #184]	; (8002fd8 <HAL_RCC_OscConfig+0x4e8>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d0f0      	beq.n	8002f0c <HAL_RCC_OscConfig+0x41c>
 8002f2a:	e04e      	b.n	8002fca <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f2c:	4b2b      	ldr	r3, [pc, #172]	; (8002fdc <HAL_RCC_OscConfig+0x4ec>)
 8002f2e:	2200      	movs	r2, #0
 8002f30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f32:	f7fe ffc1 	bl	8001eb8 <HAL_GetTick>
 8002f36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f38:	e008      	b.n	8002f4c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f3a:	f7fe ffbd 	bl	8001eb8 <HAL_GetTick>
 8002f3e:	4602      	mov	r2, r0
 8002f40:	693b      	ldr	r3, [r7, #16]
 8002f42:	1ad3      	subs	r3, r2, r3
 8002f44:	2b02      	cmp	r3, #2
 8002f46:	d901      	bls.n	8002f4c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002f48:	2303      	movs	r3, #3
 8002f4a:	e03f      	b.n	8002fcc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f4c:	4b22      	ldr	r3, [pc, #136]	; (8002fd8 <HAL_RCC_OscConfig+0x4e8>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d1f0      	bne.n	8002f3a <HAL_RCC_OscConfig+0x44a>
 8002f58:	e037      	b.n	8002fca <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	699b      	ldr	r3, [r3, #24]
 8002f5e:	2b01      	cmp	r3, #1
 8002f60:	d101      	bne.n	8002f66 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002f62:	2301      	movs	r3, #1
 8002f64:	e032      	b.n	8002fcc <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002f66:	4b1c      	ldr	r3, [pc, #112]	; (8002fd8 <HAL_RCC_OscConfig+0x4e8>)
 8002f68:	685b      	ldr	r3, [r3, #4]
 8002f6a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	699b      	ldr	r3, [r3, #24]
 8002f70:	2b01      	cmp	r3, #1
 8002f72:	d028      	beq.n	8002fc6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f7e:	429a      	cmp	r2, r3
 8002f80:	d121      	bne.n	8002fc6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f8c:	429a      	cmp	r2, r3
 8002f8e:	d11a      	bne.n	8002fc6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002f90:	68fa      	ldr	r2, [r7, #12]
 8002f92:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002f96:	4013      	ands	r3, r2
 8002f98:	687a      	ldr	r2, [r7, #4]
 8002f9a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002f9c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d111      	bne.n	8002fc6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fac:	085b      	lsrs	r3, r3, #1
 8002fae:	3b01      	subs	r3, #1
 8002fb0:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002fb2:	429a      	cmp	r2, r3
 8002fb4:	d107      	bne.n	8002fc6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fc0:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002fc2:	429a      	cmp	r2, r3
 8002fc4:	d001      	beq.n	8002fca <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	e000      	b.n	8002fcc <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8002fca:	2300      	movs	r3, #0
}
 8002fcc:	4618      	mov	r0, r3
 8002fce:	3718      	adds	r7, #24
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	bd80      	pop	{r7, pc}
 8002fd4:	40007000 	.word	0x40007000
 8002fd8:	40023800 	.word	0x40023800
 8002fdc:	42470060 	.word	0x42470060

08002fe0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b084      	sub	sp, #16
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
 8002fe8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d101      	bne.n	8002ff4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ff0:	2301      	movs	r3, #1
 8002ff2:	e0cc      	b.n	800318e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002ff4:	4b68      	ldr	r3, [pc, #416]	; (8003198 <HAL_RCC_ClockConfig+0x1b8>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f003 0307 	and.w	r3, r3, #7
 8002ffc:	683a      	ldr	r2, [r7, #0]
 8002ffe:	429a      	cmp	r2, r3
 8003000:	d90c      	bls.n	800301c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003002:	4b65      	ldr	r3, [pc, #404]	; (8003198 <HAL_RCC_ClockConfig+0x1b8>)
 8003004:	683a      	ldr	r2, [r7, #0]
 8003006:	b2d2      	uxtb	r2, r2
 8003008:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800300a:	4b63      	ldr	r3, [pc, #396]	; (8003198 <HAL_RCC_ClockConfig+0x1b8>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f003 0307 	and.w	r3, r3, #7
 8003012:	683a      	ldr	r2, [r7, #0]
 8003014:	429a      	cmp	r2, r3
 8003016:	d001      	beq.n	800301c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003018:	2301      	movs	r3, #1
 800301a:	e0b8      	b.n	800318e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f003 0302 	and.w	r3, r3, #2
 8003024:	2b00      	cmp	r3, #0
 8003026:	d020      	beq.n	800306a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f003 0304 	and.w	r3, r3, #4
 8003030:	2b00      	cmp	r3, #0
 8003032:	d005      	beq.n	8003040 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003034:	4b59      	ldr	r3, [pc, #356]	; (800319c <HAL_RCC_ClockConfig+0x1bc>)
 8003036:	689b      	ldr	r3, [r3, #8]
 8003038:	4a58      	ldr	r2, [pc, #352]	; (800319c <HAL_RCC_ClockConfig+0x1bc>)
 800303a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800303e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f003 0308 	and.w	r3, r3, #8
 8003048:	2b00      	cmp	r3, #0
 800304a:	d005      	beq.n	8003058 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800304c:	4b53      	ldr	r3, [pc, #332]	; (800319c <HAL_RCC_ClockConfig+0x1bc>)
 800304e:	689b      	ldr	r3, [r3, #8]
 8003050:	4a52      	ldr	r2, [pc, #328]	; (800319c <HAL_RCC_ClockConfig+0x1bc>)
 8003052:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003056:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003058:	4b50      	ldr	r3, [pc, #320]	; (800319c <HAL_RCC_ClockConfig+0x1bc>)
 800305a:	689b      	ldr	r3, [r3, #8]
 800305c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	689b      	ldr	r3, [r3, #8]
 8003064:	494d      	ldr	r1, [pc, #308]	; (800319c <HAL_RCC_ClockConfig+0x1bc>)
 8003066:	4313      	orrs	r3, r2
 8003068:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f003 0301 	and.w	r3, r3, #1
 8003072:	2b00      	cmp	r3, #0
 8003074:	d044      	beq.n	8003100 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	685b      	ldr	r3, [r3, #4]
 800307a:	2b01      	cmp	r3, #1
 800307c:	d107      	bne.n	800308e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800307e:	4b47      	ldr	r3, [pc, #284]	; (800319c <HAL_RCC_ClockConfig+0x1bc>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003086:	2b00      	cmp	r3, #0
 8003088:	d119      	bne.n	80030be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800308a:	2301      	movs	r3, #1
 800308c:	e07f      	b.n	800318e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	685b      	ldr	r3, [r3, #4]
 8003092:	2b02      	cmp	r3, #2
 8003094:	d003      	beq.n	800309e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800309a:	2b03      	cmp	r3, #3
 800309c:	d107      	bne.n	80030ae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800309e:	4b3f      	ldr	r3, [pc, #252]	; (800319c <HAL_RCC_ClockConfig+0x1bc>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d109      	bne.n	80030be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030aa:	2301      	movs	r3, #1
 80030ac:	e06f      	b.n	800318e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030ae:	4b3b      	ldr	r3, [pc, #236]	; (800319c <HAL_RCC_ClockConfig+0x1bc>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f003 0302 	and.w	r3, r3, #2
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d101      	bne.n	80030be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030ba:	2301      	movs	r3, #1
 80030bc:	e067      	b.n	800318e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80030be:	4b37      	ldr	r3, [pc, #220]	; (800319c <HAL_RCC_ClockConfig+0x1bc>)
 80030c0:	689b      	ldr	r3, [r3, #8]
 80030c2:	f023 0203 	bic.w	r2, r3, #3
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	685b      	ldr	r3, [r3, #4]
 80030ca:	4934      	ldr	r1, [pc, #208]	; (800319c <HAL_RCC_ClockConfig+0x1bc>)
 80030cc:	4313      	orrs	r3, r2
 80030ce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80030d0:	f7fe fef2 	bl	8001eb8 <HAL_GetTick>
 80030d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030d6:	e00a      	b.n	80030ee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030d8:	f7fe feee 	bl	8001eb8 <HAL_GetTick>
 80030dc:	4602      	mov	r2, r0
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	1ad3      	subs	r3, r2, r3
 80030e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d901      	bls.n	80030ee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80030ea:	2303      	movs	r3, #3
 80030ec:	e04f      	b.n	800318e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030ee:	4b2b      	ldr	r3, [pc, #172]	; (800319c <HAL_RCC_ClockConfig+0x1bc>)
 80030f0:	689b      	ldr	r3, [r3, #8]
 80030f2:	f003 020c 	and.w	r2, r3, #12
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	685b      	ldr	r3, [r3, #4]
 80030fa:	009b      	lsls	r3, r3, #2
 80030fc:	429a      	cmp	r2, r3
 80030fe:	d1eb      	bne.n	80030d8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003100:	4b25      	ldr	r3, [pc, #148]	; (8003198 <HAL_RCC_ClockConfig+0x1b8>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f003 0307 	and.w	r3, r3, #7
 8003108:	683a      	ldr	r2, [r7, #0]
 800310a:	429a      	cmp	r2, r3
 800310c:	d20c      	bcs.n	8003128 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800310e:	4b22      	ldr	r3, [pc, #136]	; (8003198 <HAL_RCC_ClockConfig+0x1b8>)
 8003110:	683a      	ldr	r2, [r7, #0]
 8003112:	b2d2      	uxtb	r2, r2
 8003114:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003116:	4b20      	ldr	r3, [pc, #128]	; (8003198 <HAL_RCC_ClockConfig+0x1b8>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f003 0307 	and.w	r3, r3, #7
 800311e:	683a      	ldr	r2, [r7, #0]
 8003120:	429a      	cmp	r2, r3
 8003122:	d001      	beq.n	8003128 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003124:	2301      	movs	r3, #1
 8003126:	e032      	b.n	800318e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f003 0304 	and.w	r3, r3, #4
 8003130:	2b00      	cmp	r3, #0
 8003132:	d008      	beq.n	8003146 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003134:	4b19      	ldr	r3, [pc, #100]	; (800319c <HAL_RCC_ClockConfig+0x1bc>)
 8003136:	689b      	ldr	r3, [r3, #8]
 8003138:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	68db      	ldr	r3, [r3, #12]
 8003140:	4916      	ldr	r1, [pc, #88]	; (800319c <HAL_RCC_ClockConfig+0x1bc>)
 8003142:	4313      	orrs	r3, r2
 8003144:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f003 0308 	and.w	r3, r3, #8
 800314e:	2b00      	cmp	r3, #0
 8003150:	d009      	beq.n	8003166 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003152:	4b12      	ldr	r3, [pc, #72]	; (800319c <HAL_RCC_ClockConfig+0x1bc>)
 8003154:	689b      	ldr	r3, [r3, #8]
 8003156:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	691b      	ldr	r3, [r3, #16]
 800315e:	00db      	lsls	r3, r3, #3
 8003160:	490e      	ldr	r1, [pc, #56]	; (800319c <HAL_RCC_ClockConfig+0x1bc>)
 8003162:	4313      	orrs	r3, r2
 8003164:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003166:	f000 f821 	bl	80031ac <HAL_RCC_GetSysClockFreq>
 800316a:	4602      	mov	r2, r0
 800316c:	4b0b      	ldr	r3, [pc, #44]	; (800319c <HAL_RCC_ClockConfig+0x1bc>)
 800316e:	689b      	ldr	r3, [r3, #8]
 8003170:	091b      	lsrs	r3, r3, #4
 8003172:	f003 030f 	and.w	r3, r3, #15
 8003176:	490a      	ldr	r1, [pc, #40]	; (80031a0 <HAL_RCC_ClockConfig+0x1c0>)
 8003178:	5ccb      	ldrb	r3, [r1, r3]
 800317a:	fa22 f303 	lsr.w	r3, r2, r3
 800317e:	4a09      	ldr	r2, [pc, #36]	; (80031a4 <HAL_RCC_ClockConfig+0x1c4>)
 8003180:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003182:	4b09      	ldr	r3, [pc, #36]	; (80031a8 <HAL_RCC_ClockConfig+0x1c8>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	4618      	mov	r0, r3
 8003188:	f7fe fc0c 	bl	80019a4 <HAL_InitTick>

  return HAL_OK;
 800318c:	2300      	movs	r3, #0
}
 800318e:	4618      	mov	r0, r3
 8003190:	3710      	adds	r7, #16
 8003192:	46bd      	mov	sp, r7
 8003194:	bd80      	pop	{r7, pc}
 8003196:	bf00      	nop
 8003198:	40023c00 	.word	0x40023c00
 800319c:	40023800 	.word	0x40023800
 80031a0:	08009d64 	.word	0x08009d64
 80031a4:	20000000 	.word	0x20000000
 80031a8:	20000004 	.word	0x20000004

080031ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80031ac:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80031b0:	b084      	sub	sp, #16
 80031b2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80031b4:	2300      	movs	r3, #0
 80031b6:	607b      	str	r3, [r7, #4]
 80031b8:	2300      	movs	r3, #0
 80031ba:	60fb      	str	r3, [r7, #12]
 80031bc:	2300      	movs	r3, #0
 80031be:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80031c0:	2300      	movs	r3, #0
 80031c2:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80031c4:	4b67      	ldr	r3, [pc, #412]	; (8003364 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80031c6:	689b      	ldr	r3, [r3, #8]
 80031c8:	f003 030c 	and.w	r3, r3, #12
 80031cc:	2b08      	cmp	r3, #8
 80031ce:	d00d      	beq.n	80031ec <HAL_RCC_GetSysClockFreq+0x40>
 80031d0:	2b08      	cmp	r3, #8
 80031d2:	f200 80bd 	bhi.w	8003350 <HAL_RCC_GetSysClockFreq+0x1a4>
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d002      	beq.n	80031e0 <HAL_RCC_GetSysClockFreq+0x34>
 80031da:	2b04      	cmp	r3, #4
 80031dc:	d003      	beq.n	80031e6 <HAL_RCC_GetSysClockFreq+0x3a>
 80031de:	e0b7      	b.n	8003350 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80031e0:	4b61      	ldr	r3, [pc, #388]	; (8003368 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80031e2:	60bb      	str	r3, [r7, #8]
       break;
 80031e4:	e0b7      	b.n	8003356 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80031e6:	4b60      	ldr	r3, [pc, #384]	; (8003368 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80031e8:	60bb      	str	r3, [r7, #8]
      break;
 80031ea:	e0b4      	b.n	8003356 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80031ec:	4b5d      	ldr	r3, [pc, #372]	; (8003364 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80031ee:	685b      	ldr	r3, [r3, #4]
 80031f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80031f4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80031f6:	4b5b      	ldr	r3, [pc, #364]	; (8003364 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80031f8:	685b      	ldr	r3, [r3, #4]
 80031fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d04d      	beq.n	800329e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003202:	4b58      	ldr	r3, [pc, #352]	; (8003364 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003204:	685b      	ldr	r3, [r3, #4]
 8003206:	099b      	lsrs	r3, r3, #6
 8003208:	461a      	mov	r2, r3
 800320a:	f04f 0300 	mov.w	r3, #0
 800320e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003212:	f04f 0100 	mov.w	r1, #0
 8003216:	ea02 0800 	and.w	r8, r2, r0
 800321a:	ea03 0901 	and.w	r9, r3, r1
 800321e:	4640      	mov	r0, r8
 8003220:	4649      	mov	r1, r9
 8003222:	f04f 0200 	mov.w	r2, #0
 8003226:	f04f 0300 	mov.w	r3, #0
 800322a:	014b      	lsls	r3, r1, #5
 800322c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003230:	0142      	lsls	r2, r0, #5
 8003232:	4610      	mov	r0, r2
 8003234:	4619      	mov	r1, r3
 8003236:	ebb0 0008 	subs.w	r0, r0, r8
 800323a:	eb61 0109 	sbc.w	r1, r1, r9
 800323e:	f04f 0200 	mov.w	r2, #0
 8003242:	f04f 0300 	mov.w	r3, #0
 8003246:	018b      	lsls	r3, r1, #6
 8003248:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800324c:	0182      	lsls	r2, r0, #6
 800324e:	1a12      	subs	r2, r2, r0
 8003250:	eb63 0301 	sbc.w	r3, r3, r1
 8003254:	f04f 0000 	mov.w	r0, #0
 8003258:	f04f 0100 	mov.w	r1, #0
 800325c:	00d9      	lsls	r1, r3, #3
 800325e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003262:	00d0      	lsls	r0, r2, #3
 8003264:	4602      	mov	r2, r0
 8003266:	460b      	mov	r3, r1
 8003268:	eb12 0208 	adds.w	r2, r2, r8
 800326c:	eb43 0309 	adc.w	r3, r3, r9
 8003270:	f04f 0000 	mov.w	r0, #0
 8003274:	f04f 0100 	mov.w	r1, #0
 8003278:	0299      	lsls	r1, r3, #10
 800327a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800327e:	0290      	lsls	r0, r2, #10
 8003280:	4602      	mov	r2, r0
 8003282:	460b      	mov	r3, r1
 8003284:	4610      	mov	r0, r2
 8003286:	4619      	mov	r1, r3
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	461a      	mov	r2, r3
 800328c:	f04f 0300 	mov.w	r3, #0
 8003290:	f7fc ffee 	bl	8000270 <__aeabi_uldivmod>
 8003294:	4602      	mov	r2, r0
 8003296:	460b      	mov	r3, r1
 8003298:	4613      	mov	r3, r2
 800329a:	60fb      	str	r3, [r7, #12]
 800329c:	e04a      	b.n	8003334 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800329e:	4b31      	ldr	r3, [pc, #196]	; (8003364 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80032a0:	685b      	ldr	r3, [r3, #4]
 80032a2:	099b      	lsrs	r3, r3, #6
 80032a4:	461a      	mov	r2, r3
 80032a6:	f04f 0300 	mov.w	r3, #0
 80032aa:	f240 10ff 	movw	r0, #511	; 0x1ff
 80032ae:	f04f 0100 	mov.w	r1, #0
 80032b2:	ea02 0400 	and.w	r4, r2, r0
 80032b6:	ea03 0501 	and.w	r5, r3, r1
 80032ba:	4620      	mov	r0, r4
 80032bc:	4629      	mov	r1, r5
 80032be:	f04f 0200 	mov.w	r2, #0
 80032c2:	f04f 0300 	mov.w	r3, #0
 80032c6:	014b      	lsls	r3, r1, #5
 80032c8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80032cc:	0142      	lsls	r2, r0, #5
 80032ce:	4610      	mov	r0, r2
 80032d0:	4619      	mov	r1, r3
 80032d2:	1b00      	subs	r0, r0, r4
 80032d4:	eb61 0105 	sbc.w	r1, r1, r5
 80032d8:	f04f 0200 	mov.w	r2, #0
 80032dc:	f04f 0300 	mov.w	r3, #0
 80032e0:	018b      	lsls	r3, r1, #6
 80032e2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80032e6:	0182      	lsls	r2, r0, #6
 80032e8:	1a12      	subs	r2, r2, r0
 80032ea:	eb63 0301 	sbc.w	r3, r3, r1
 80032ee:	f04f 0000 	mov.w	r0, #0
 80032f2:	f04f 0100 	mov.w	r1, #0
 80032f6:	00d9      	lsls	r1, r3, #3
 80032f8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80032fc:	00d0      	lsls	r0, r2, #3
 80032fe:	4602      	mov	r2, r0
 8003300:	460b      	mov	r3, r1
 8003302:	1912      	adds	r2, r2, r4
 8003304:	eb45 0303 	adc.w	r3, r5, r3
 8003308:	f04f 0000 	mov.w	r0, #0
 800330c:	f04f 0100 	mov.w	r1, #0
 8003310:	0299      	lsls	r1, r3, #10
 8003312:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003316:	0290      	lsls	r0, r2, #10
 8003318:	4602      	mov	r2, r0
 800331a:	460b      	mov	r3, r1
 800331c:	4610      	mov	r0, r2
 800331e:	4619      	mov	r1, r3
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	461a      	mov	r2, r3
 8003324:	f04f 0300 	mov.w	r3, #0
 8003328:	f7fc ffa2 	bl	8000270 <__aeabi_uldivmod>
 800332c:	4602      	mov	r2, r0
 800332e:	460b      	mov	r3, r1
 8003330:	4613      	mov	r3, r2
 8003332:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003334:	4b0b      	ldr	r3, [pc, #44]	; (8003364 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003336:	685b      	ldr	r3, [r3, #4]
 8003338:	0c1b      	lsrs	r3, r3, #16
 800333a:	f003 0303 	and.w	r3, r3, #3
 800333e:	3301      	adds	r3, #1
 8003340:	005b      	lsls	r3, r3, #1
 8003342:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003344:	68fa      	ldr	r2, [r7, #12]
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	fbb2 f3f3 	udiv	r3, r2, r3
 800334c:	60bb      	str	r3, [r7, #8]
      break;
 800334e:	e002      	b.n	8003356 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003350:	4b05      	ldr	r3, [pc, #20]	; (8003368 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003352:	60bb      	str	r3, [r7, #8]
      break;
 8003354:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003356:	68bb      	ldr	r3, [r7, #8]
}
 8003358:	4618      	mov	r0, r3
 800335a:	3710      	adds	r7, #16
 800335c:	46bd      	mov	sp, r7
 800335e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003362:	bf00      	nop
 8003364:	40023800 	.word	0x40023800
 8003368:	00f42400 	.word	0x00f42400

0800336c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800336c:	b480      	push	{r7}
 800336e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003370:	4b03      	ldr	r3, [pc, #12]	; (8003380 <HAL_RCC_GetHCLKFreq+0x14>)
 8003372:	681b      	ldr	r3, [r3, #0]
}
 8003374:	4618      	mov	r0, r3
 8003376:	46bd      	mov	sp, r7
 8003378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337c:	4770      	bx	lr
 800337e:	bf00      	nop
 8003380:	20000000 	.word	0x20000000

08003384 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003388:	f7ff fff0 	bl	800336c <HAL_RCC_GetHCLKFreq>
 800338c:	4602      	mov	r2, r0
 800338e:	4b05      	ldr	r3, [pc, #20]	; (80033a4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003390:	689b      	ldr	r3, [r3, #8]
 8003392:	0a9b      	lsrs	r3, r3, #10
 8003394:	f003 0307 	and.w	r3, r3, #7
 8003398:	4903      	ldr	r1, [pc, #12]	; (80033a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800339a:	5ccb      	ldrb	r3, [r1, r3]
 800339c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80033a0:	4618      	mov	r0, r3
 80033a2:	bd80      	pop	{r7, pc}
 80033a4:	40023800 	.word	0x40023800
 80033a8:	08009d74 	.word	0x08009d74

080033ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80033b0:	f7ff ffdc 	bl	800336c <HAL_RCC_GetHCLKFreq>
 80033b4:	4602      	mov	r2, r0
 80033b6:	4b05      	ldr	r3, [pc, #20]	; (80033cc <HAL_RCC_GetPCLK2Freq+0x20>)
 80033b8:	689b      	ldr	r3, [r3, #8]
 80033ba:	0b5b      	lsrs	r3, r3, #13
 80033bc:	f003 0307 	and.w	r3, r3, #7
 80033c0:	4903      	ldr	r1, [pc, #12]	; (80033d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80033c2:	5ccb      	ldrb	r3, [r1, r3]
 80033c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80033c8:	4618      	mov	r0, r3
 80033ca:	bd80      	pop	{r7, pc}
 80033cc:	40023800 	.word	0x40023800
 80033d0:	08009d74 	.word	0x08009d74

080033d4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80033d4:	b480      	push	{r7}
 80033d6:	b083      	sub	sp, #12
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
 80033dc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	220f      	movs	r2, #15
 80033e2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80033e4:	4b12      	ldr	r3, [pc, #72]	; (8003430 <HAL_RCC_GetClockConfig+0x5c>)
 80033e6:	689b      	ldr	r3, [r3, #8]
 80033e8:	f003 0203 	and.w	r2, r3, #3
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80033f0:	4b0f      	ldr	r3, [pc, #60]	; (8003430 <HAL_RCC_GetClockConfig+0x5c>)
 80033f2:	689b      	ldr	r3, [r3, #8]
 80033f4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80033fc:	4b0c      	ldr	r3, [pc, #48]	; (8003430 <HAL_RCC_GetClockConfig+0x5c>)
 80033fe:	689b      	ldr	r3, [r3, #8]
 8003400:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003408:	4b09      	ldr	r3, [pc, #36]	; (8003430 <HAL_RCC_GetClockConfig+0x5c>)
 800340a:	689b      	ldr	r3, [r3, #8]
 800340c:	08db      	lsrs	r3, r3, #3
 800340e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003416:	4b07      	ldr	r3, [pc, #28]	; (8003434 <HAL_RCC_GetClockConfig+0x60>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f003 0207 	and.w	r2, r3, #7
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	601a      	str	r2, [r3, #0]
}
 8003422:	bf00      	nop
 8003424:	370c      	adds	r7, #12
 8003426:	46bd      	mov	sp, r7
 8003428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342c:	4770      	bx	lr
 800342e:	bf00      	nop
 8003430:	40023800 	.word	0x40023800
 8003434:	40023c00 	.word	0x40023c00

08003438 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b082      	sub	sp, #8
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2b00      	cmp	r3, #0
 8003444:	d101      	bne.n	800344a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003446:	2301      	movs	r3, #1
 8003448:	e07b      	b.n	8003542 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800344e:	2b00      	cmp	r3, #0
 8003450:	d108      	bne.n	8003464 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	685b      	ldr	r3, [r3, #4]
 8003456:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800345a:	d009      	beq.n	8003470 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2200      	movs	r2, #0
 8003460:	61da      	str	r2, [r3, #28]
 8003462:	e005      	b.n	8003470 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2200      	movs	r2, #0
 8003468:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	2200      	movs	r2, #0
 800346e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2200      	movs	r2, #0
 8003474:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800347c:	b2db      	uxtb	r3, r3
 800347e:	2b00      	cmp	r3, #0
 8003480:	d106      	bne.n	8003490 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2200      	movs	r2, #0
 8003486:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800348a:	6878      	ldr	r0, [r7, #4]
 800348c:	f7fe f93e 	bl	800170c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2202      	movs	r2, #2
 8003494:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	681a      	ldr	r2, [r3, #0]
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80034a6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	685b      	ldr	r3, [r3, #4]
 80034ac:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	689b      	ldr	r3, [r3, #8]
 80034b4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80034b8:	431a      	orrs	r2, r3
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	68db      	ldr	r3, [r3, #12]
 80034be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80034c2:	431a      	orrs	r2, r3
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	691b      	ldr	r3, [r3, #16]
 80034c8:	f003 0302 	and.w	r3, r3, #2
 80034cc:	431a      	orrs	r2, r3
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	695b      	ldr	r3, [r3, #20]
 80034d2:	f003 0301 	and.w	r3, r3, #1
 80034d6:	431a      	orrs	r2, r3
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	699b      	ldr	r3, [r3, #24]
 80034dc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80034e0:	431a      	orrs	r2, r3
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	69db      	ldr	r3, [r3, #28]
 80034e6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80034ea:	431a      	orrs	r2, r3
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6a1b      	ldr	r3, [r3, #32]
 80034f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034f4:	ea42 0103 	orr.w	r1, r2, r3
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034fc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	430a      	orrs	r2, r1
 8003506:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	699b      	ldr	r3, [r3, #24]
 800350c:	0c1b      	lsrs	r3, r3, #16
 800350e:	f003 0104 	and.w	r1, r3, #4
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003516:	f003 0210 	and.w	r2, r3, #16
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	430a      	orrs	r2, r1
 8003520:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	69da      	ldr	r2, [r3, #28]
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003530:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	2200      	movs	r2, #0
 8003536:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2201      	movs	r2, #1
 800353c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003540:	2300      	movs	r3, #0
}
 8003542:	4618      	mov	r0, r3
 8003544:	3708      	adds	r7, #8
 8003546:	46bd      	mov	sp, r7
 8003548:	bd80      	pop	{r7, pc}

0800354a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800354a:	b580      	push	{r7, lr}
 800354c:	b088      	sub	sp, #32
 800354e:	af00      	add	r7, sp, #0
 8003550:	60f8      	str	r0, [r7, #12]
 8003552:	60b9      	str	r1, [r7, #8]
 8003554:	603b      	str	r3, [r7, #0]
 8003556:	4613      	mov	r3, r2
 8003558:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800355a:	2300      	movs	r3, #0
 800355c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003564:	2b01      	cmp	r3, #1
 8003566:	d101      	bne.n	800356c <HAL_SPI_Transmit+0x22>
 8003568:	2302      	movs	r3, #2
 800356a:	e126      	b.n	80037ba <HAL_SPI_Transmit+0x270>
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	2201      	movs	r2, #1
 8003570:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003574:	f7fe fca0 	bl	8001eb8 <HAL_GetTick>
 8003578:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800357a:	88fb      	ldrh	r3, [r7, #6]
 800357c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003584:	b2db      	uxtb	r3, r3
 8003586:	2b01      	cmp	r3, #1
 8003588:	d002      	beq.n	8003590 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800358a:	2302      	movs	r3, #2
 800358c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800358e:	e10b      	b.n	80037a8 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003590:	68bb      	ldr	r3, [r7, #8]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d002      	beq.n	800359c <HAL_SPI_Transmit+0x52>
 8003596:	88fb      	ldrh	r3, [r7, #6]
 8003598:	2b00      	cmp	r3, #0
 800359a:	d102      	bne.n	80035a2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800359c:	2301      	movs	r3, #1
 800359e:	77fb      	strb	r3, [r7, #31]
    goto error;
 80035a0:	e102      	b.n	80037a8 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	2203      	movs	r2, #3
 80035a6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	2200      	movs	r2, #0
 80035ae:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	68ba      	ldr	r2, [r7, #8]
 80035b4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	88fa      	ldrh	r2, [r7, #6]
 80035ba:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	88fa      	ldrh	r2, [r7, #6]
 80035c0:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	2200      	movs	r2, #0
 80035c6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	2200      	movs	r2, #0
 80035cc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	2200      	movs	r2, #0
 80035d2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	2200      	movs	r2, #0
 80035d8:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	2200      	movs	r2, #0
 80035de:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	689b      	ldr	r3, [r3, #8]
 80035e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80035e8:	d10f      	bne.n	800360a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	681a      	ldr	r2, [r3, #0]
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80035f8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	681a      	ldr	r2, [r3, #0]
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003608:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003614:	2b40      	cmp	r3, #64	; 0x40
 8003616:	d007      	beq.n	8003628 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	681a      	ldr	r2, [r3, #0]
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003626:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	68db      	ldr	r3, [r3, #12]
 800362c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003630:	d14b      	bne.n	80036ca <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	685b      	ldr	r3, [r3, #4]
 8003636:	2b00      	cmp	r3, #0
 8003638:	d002      	beq.n	8003640 <HAL_SPI_Transmit+0xf6>
 800363a:	8afb      	ldrh	r3, [r7, #22]
 800363c:	2b01      	cmp	r3, #1
 800363e:	d13e      	bne.n	80036be <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003644:	881a      	ldrh	r2, [r3, #0]
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003650:	1c9a      	adds	r2, r3, #2
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800365a:	b29b      	uxth	r3, r3
 800365c:	3b01      	subs	r3, #1
 800365e:	b29a      	uxth	r2, r3
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003664:	e02b      	b.n	80036be <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	689b      	ldr	r3, [r3, #8]
 800366c:	f003 0302 	and.w	r3, r3, #2
 8003670:	2b02      	cmp	r3, #2
 8003672:	d112      	bne.n	800369a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003678:	881a      	ldrh	r2, [r3, #0]
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003684:	1c9a      	adds	r2, r3, #2
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800368e:	b29b      	uxth	r3, r3
 8003690:	3b01      	subs	r3, #1
 8003692:	b29a      	uxth	r2, r3
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	86da      	strh	r2, [r3, #54]	; 0x36
 8003698:	e011      	b.n	80036be <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800369a:	f7fe fc0d 	bl	8001eb8 <HAL_GetTick>
 800369e:	4602      	mov	r2, r0
 80036a0:	69bb      	ldr	r3, [r7, #24]
 80036a2:	1ad3      	subs	r3, r2, r3
 80036a4:	683a      	ldr	r2, [r7, #0]
 80036a6:	429a      	cmp	r2, r3
 80036a8:	d803      	bhi.n	80036b2 <HAL_SPI_Transmit+0x168>
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036b0:	d102      	bne.n	80036b8 <HAL_SPI_Transmit+0x16e>
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d102      	bne.n	80036be <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80036b8:	2303      	movs	r3, #3
 80036ba:	77fb      	strb	r3, [r7, #31]
          goto error;
 80036bc:	e074      	b.n	80037a8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80036c2:	b29b      	uxth	r3, r3
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d1ce      	bne.n	8003666 <HAL_SPI_Transmit+0x11c>
 80036c8:	e04c      	b.n	8003764 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	685b      	ldr	r3, [r3, #4]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d002      	beq.n	80036d8 <HAL_SPI_Transmit+0x18e>
 80036d2:	8afb      	ldrh	r3, [r7, #22]
 80036d4:	2b01      	cmp	r3, #1
 80036d6:	d140      	bne.n	800375a <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	330c      	adds	r3, #12
 80036e2:	7812      	ldrb	r2, [r2, #0]
 80036e4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036ea:	1c5a      	adds	r2, r3, #1
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80036f4:	b29b      	uxth	r3, r3
 80036f6:	3b01      	subs	r3, #1
 80036f8:	b29a      	uxth	r2, r3
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80036fe:	e02c      	b.n	800375a <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	689b      	ldr	r3, [r3, #8]
 8003706:	f003 0302 	and.w	r3, r3, #2
 800370a:	2b02      	cmp	r3, #2
 800370c:	d113      	bne.n	8003736 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	330c      	adds	r3, #12
 8003718:	7812      	ldrb	r2, [r2, #0]
 800371a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003720:	1c5a      	adds	r2, r3, #1
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800372a:	b29b      	uxth	r3, r3
 800372c:	3b01      	subs	r3, #1
 800372e:	b29a      	uxth	r2, r3
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	86da      	strh	r2, [r3, #54]	; 0x36
 8003734:	e011      	b.n	800375a <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003736:	f7fe fbbf 	bl	8001eb8 <HAL_GetTick>
 800373a:	4602      	mov	r2, r0
 800373c:	69bb      	ldr	r3, [r7, #24]
 800373e:	1ad3      	subs	r3, r2, r3
 8003740:	683a      	ldr	r2, [r7, #0]
 8003742:	429a      	cmp	r2, r3
 8003744:	d803      	bhi.n	800374e <HAL_SPI_Transmit+0x204>
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	f1b3 3fff 	cmp.w	r3, #4294967295
 800374c:	d102      	bne.n	8003754 <HAL_SPI_Transmit+0x20a>
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	2b00      	cmp	r3, #0
 8003752:	d102      	bne.n	800375a <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8003754:	2303      	movs	r3, #3
 8003756:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003758:	e026      	b.n	80037a8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800375e:	b29b      	uxth	r3, r3
 8003760:	2b00      	cmp	r3, #0
 8003762:	d1cd      	bne.n	8003700 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003764:	69ba      	ldr	r2, [r7, #24]
 8003766:	6839      	ldr	r1, [r7, #0]
 8003768:	68f8      	ldr	r0, [r7, #12]
 800376a:	f000 fbcb 	bl	8003f04 <SPI_EndRxTxTransaction>
 800376e:	4603      	mov	r3, r0
 8003770:	2b00      	cmp	r3, #0
 8003772:	d002      	beq.n	800377a <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	2220      	movs	r2, #32
 8003778:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	689b      	ldr	r3, [r3, #8]
 800377e:	2b00      	cmp	r3, #0
 8003780:	d10a      	bne.n	8003798 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003782:	2300      	movs	r3, #0
 8003784:	613b      	str	r3, [r7, #16]
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	68db      	ldr	r3, [r3, #12]
 800378c:	613b      	str	r3, [r7, #16]
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	689b      	ldr	r3, [r3, #8]
 8003794:	613b      	str	r3, [r7, #16]
 8003796:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800379c:	2b00      	cmp	r3, #0
 800379e:	d002      	beq.n	80037a6 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80037a0:	2301      	movs	r3, #1
 80037a2:	77fb      	strb	r3, [r7, #31]
 80037a4:	e000      	b.n	80037a8 <HAL_SPI_Transmit+0x25e>
  }

error:
 80037a6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	2201      	movs	r2, #1
 80037ac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	2200      	movs	r2, #0
 80037b4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80037b8:	7ffb      	ldrb	r3, [r7, #31]
}
 80037ba:	4618      	mov	r0, r3
 80037bc:	3720      	adds	r7, #32
 80037be:	46bd      	mov	sp, r7
 80037c0:	bd80      	pop	{r7, pc}

080037c2 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80037c2:	b580      	push	{r7, lr}
 80037c4:	b088      	sub	sp, #32
 80037c6:	af02      	add	r7, sp, #8
 80037c8:	60f8      	str	r0, [r7, #12]
 80037ca:	60b9      	str	r1, [r7, #8]
 80037cc:	603b      	str	r3, [r7, #0]
 80037ce:	4613      	mov	r3, r2
 80037d0:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80037d2:	2300      	movs	r3, #0
 80037d4:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	685b      	ldr	r3, [r3, #4]
 80037da:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80037de:	d112      	bne.n	8003806 <HAL_SPI_Receive+0x44>
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	689b      	ldr	r3, [r3, #8]
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d10e      	bne.n	8003806 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	2204      	movs	r2, #4
 80037ec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80037f0:	88fa      	ldrh	r2, [r7, #6]
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	9300      	str	r3, [sp, #0]
 80037f6:	4613      	mov	r3, r2
 80037f8:	68ba      	ldr	r2, [r7, #8]
 80037fa:	68b9      	ldr	r1, [r7, #8]
 80037fc:	68f8      	ldr	r0, [r7, #12]
 80037fe:	f000 f8f1 	bl	80039e4 <HAL_SPI_TransmitReceive>
 8003802:	4603      	mov	r3, r0
 8003804:	e0ea      	b.n	80039dc <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800380c:	2b01      	cmp	r3, #1
 800380e:	d101      	bne.n	8003814 <HAL_SPI_Receive+0x52>
 8003810:	2302      	movs	r3, #2
 8003812:	e0e3      	b.n	80039dc <HAL_SPI_Receive+0x21a>
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	2201      	movs	r2, #1
 8003818:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800381c:	f7fe fb4c 	bl	8001eb8 <HAL_GetTick>
 8003820:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003828:	b2db      	uxtb	r3, r3
 800382a:	2b01      	cmp	r3, #1
 800382c:	d002      	beq.n	8003834 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800382e:	2302      	movs	r3, #2
 8003830:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003832:	e0ca      	b.n	80039ca <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8003834:	68bb      	ldr	r3, [r7, #8]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d002      	beq.n	8003840 <HAL_SPI_Receive+0x7e>
 800383a:	88fb      	ldrh	r3, [r7, #6]
 800383c:	2b00      	cmp	r3, #0
 800383e:	d102      	bne.n	8003846 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003840:	2301      	movs	r3, #1
 8003842:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003844:	e0c1      	b.n	80039ca <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	2204      	movs	r2, #4
 800384a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	2200      	movs	r2, #0
 8003852:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	68ba      	ldr	r2, [r7, #8]
 8003858:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	88fa      	ldrh	r2, [r7, #6]
 800385e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	88fa      	ldrh	r2, [r7, #6]
 8003864:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	2200      	movs	r2, #0
 800386a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	2200      	movs	r2, #0
 8003870:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	2200      	movs	r2, #0
 8003876:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	2200      	movs	r2, #0
 800387c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	2200      	movs	r2, #0
 8003882:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	689b      	ldr	r3, [r3, #8]
 8003888:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800388c:	d10f      	bne.n	80038ae <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	681a      	ldr	r2, [r3, #0]
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800389c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	681a      	ldr	r2, [r3, #0]
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80038ac:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038b8:	2b40      	cmp	r3, #64	; 0x40
 80038ba:	d007      	beq.n	80038cc <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	681a      	ldr	r2, [r3, #0]
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80038ca:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	68db      	ldr	r3, [r3, #12]
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d162      	bne.n	800399a <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80038d4:	e02e      	b.n	8003934 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	689b      	ldr	r3, [r3, #8]
 80038dc:	f003 0301 	and.w	r3, r3, #1
 80038e0:	2b01      	cmp	r3, #1
 80038e2:	d115      	bne.n	8003910 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f103 020c 	add.w	r2, r3, #12
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038f0:	7812      	ldrb	r2, [r2, #0]
 80038f2:	b2d2      	uxtb	r2, r2
 80038f4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038fa:	1c5a      	adds	r2, r3, #1
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003904:	b29b      	uxth	r3, r3
 8003906:	3b01      	subs	r3, #1
 8003908:	b29a      	uxth	r2, r3
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800390e:	e011      	b.n	8003934 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003910:	f7fe fad2 	bl	8001eb8 <HAL_GetTick>
 8003914:	4602      	mov	r2, r0
 8003916:	693b      	ldr	r3, [r7, #16]
 8003918:	1ad3      	subs	r3, r2, r3
 800391a:	683a      	ldr	r2, [r7, #0]
 800391c:	429a      	cmp	r2, r3
 800391e:	d803      	bhi.n	8003928 <HAL_SPI_Receive+0x166>
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003926:	d102      	bne.n	800392e <HAL_SPI_Receive+0x16c>
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	2b00      	cmp	r3, #0
 800392c:	d102      	bne.n	8003934 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 800392e:	2303      	movs	r3, #3
 8003930:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003932:	e04a      	b.n	80039ca <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003938:	b29b      	uxth	r3, r3
 800393a:	2b00      	cmp	r3, #0
 800393c:	d1cb      	bne.n	80038d6 <HAL_SPI_Receive+0x114>
 800393e:	e031      	b.n	80039a4 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	689b      	ldr	r3, [r3, #8]
 8003946:	f003 0301 	and.w	r3, r3, #1
 800394a:	2b01      	cmp	r3, #1
 800394c:	d113      	bne.n	8003976 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	68da      	ldr	r2, [r3, #12]
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003958:	b292      	uxth	r2, r2
 800395a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003960:	1c9a      	adds	r2, r3, #2
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800396a:	b29b      	uxth	r3, r3
 800396c:	3b01      	subs	r3, #1
 800396e:	b29a      	uxth	r2, r3
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003974:	e011      	b.n	800399a <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003976:	f7fe fa9f 	bl	8001eb8 <HAL_GetTick>
 800397a:	4602      	mov	r2, r0
 800397c:	693b      	ldr	r3, [r7, #16]
 800397e:	1ad3      	subs	r3, r2, r3
 8003980:	683a      	ldr	r2, [r7, #0]
 8003982:	429a      	cmp	r2, r3
 8003984:	d803      	bhi.n	800398e <HAL_SPI_Receive+0x1cc>
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	f1b3 3fff 	cmp.w	r3, #4294967295
 800398c:	d102      	bne.n	8003994 <HAL_SPI_Receive+0x1d2>
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	2b00      	cmp	r3, #0
 8003992:	d102      	bne.n	800399a <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8003994:	2303      	movs	r3, #3
 8003996:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003998:	e017      	b.n	80039ca <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800399e:	b29b      	uxth	r3, r3
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d1cd      	bne.n	8003940 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80039a4:	693a      	ldr	r2, [r7, #16]
 80039a6:	6839      	ldr	r1, [r7, #0]
 80039a8:	68f8      	ldr	r0, [r7, #12]
 80039aa:	f000 fa45 	bl	8003e38 <SPI_EndRxTransaction>
 80039ae:	4603      	mov	r3, r0
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d002      	beq.n	80039ba <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	2220      	movs	r2, #32
 80039b8:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d002      	beq.n	80039c8 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 80039c2:	2301      	movs	r3, #1
 80039c4:	75fb      	strb	r3, [r7, #23]
 80039c6:	e000      	b.n	80039ca <HAL_SPI_Receive+0x208>
  }

error :
 80039c8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	2201      	movs	r2, #1
 80039ce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	2200      	movs	r2, #0
 80039d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80039da:	7dfb      	ldrb	r3, [r7, #23]
}
 80039dc:	4618      	mov	r0, r3
 80039de:	3718      	adds	r7, #24
 80039e0:	46bd      	mov	sp, r7
 80039e2:	bd80      	pop	{r7, pc}

080039e4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b08c      	sub	sp, #48	; 0x30
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	60f8      	str	r0, [r7, #12]
 80039ec:	60b9      	str	r1, [r7, #8]
 80039ee:	607a      	str	r2, [r7, #4]
 80039f0:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80039f2:	2301      	movs	r3, #1
 80039f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80039f6:	2300      	movs	r3, #0
 80039f8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003a02:	2b01      	cmp	r3, #1
 8003a04:	d101      	bne.n	8003a0a <HAL_SPI_TransmitReceive+0x26>
 8003a06:	2302      	movs	r3, #2
 8003a08:	e18a      	b.n	8003d20 <HAL_SPI_TransmitReceive+0x33c>
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	2201      	movs	r2, #1
 8003a0e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003a12:	f7fe fa51 	bl	8001eb8 <HAL_GetTick>
 8003a16:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003a1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	685b      	ldr	r3, [r3, #4]
 8003a26:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003a28:	887b      	ldrh	r3, [r7, #2]
 8003a2a:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003a2c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003a30:	2b01      	cmp	r3, #1
 8003a32:	d00f      	beq.n	8003a54 <HAL_SPI_TransmitReceive+0x70>
 8003a34:	69fb      	ldr	r3, [r7, #28]
 8003a36:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003a3a:	d107      	bne.n	8003a4c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	689b      	ldr	r3, [r3, #8]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d103      	bne.n	8003a4c <HAL_SPI_TransmitReceive+0x68>
 8003a44:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003a48:	2b04      	cmp	r3, #4
 8003a4a:	d003      	beq.n	8003a54 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003a4c:	2302      	movs	r3, #2
 8003a4e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003a52:	e15b      	b.n	8003d0c <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003a54:	68bb      	ldr	r3, [r7, #8]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d005      	beq.n	8003a66 <HAL_SPI_TransmitReceive+0x82>
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d002      	beq.n	8003a66 <HAL_SPI_TransmitReceive+0x82>
 8003a60:	887b      	ldrh	r3, [r7, #2]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d103      	bne.n	8003a6e <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003a66:	2301      	movs	r3, #1
 8003a68:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003a6c:	e14e      	b.n	8003d0c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003a74:	b2db      	uxtb	r3, r3
 8003a76:	2b04      	cmp	r3, #4
 8003a78:	d003      	beq.n	8003a82 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	2205      	movs	r2, #5
 8003a7e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	2200      	movs	r2, #0
 8003a86:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	687a      	ldr	r2, [r7, #4]
 8003a8c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	887a      	ldrh	r2, [r7, #2]
 8003a92:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	887a      	ldrh	r2, [r7, #2]
 8003a98:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	68ba      	ldr	r2, [r7, #8]
 8003a9e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	887a      	ldrh	r2, [r7, #2]
 8003aa4:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	887a      	ldrh	r2, [r7, #2]
 8003aaa:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	2200      	movs	r2, #0
 8003ab0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ac2:	2b40      	cmp	r3, #64	; 0x40
 8003ac4:	d007      	beq.n	8003ad6 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	681a      	ldr	r2, [r3, #0]
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003ad4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	68db      	ldr	r3, [r3, #12]
 8003ada:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ade:	d178      	bne.n	8003bd2 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	685b      	ldr	r3, [r3, #4]
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d002      	beq.n	8003aee <HAL_SPI_TransmitReceive+0x10a>
 8003ae8:	8b7b      	ldrh	r3, [r7, #26]
 8003aea:	2b01      	cmp	r3, #1
 8003aec:	d166      	bne.n	8003bbc <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003af2:	881a      	ldrh	r2, [r3, #0]
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003afe:	1c9a      	adds	r2, r3, #2
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b08:	b29b      	uxth	r3, r3
 8003b0a:	3b01      	subs	r3, #1
 8003b0c:	b29a      	uxth	r2, r3
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003b12:	e053      	b.n	8003bbc <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	689b      	ldr	r3, [r3, #8]
 8003b1a:	f003 0302 	and.w	r3, r3, #2
 8003b1e:	2b02      	cmp	r3, #2
 8003b20:	d11b      	bne.n	8003b5a <HAL_SPI_TransmitReceive+0x176>
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b26:	b29b      	uxth	r3, r3
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d016      	beq.n	8003b5a <HAL_SPI_TransmitReceive+0x176>
 8003b2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b2e:	2b01      	cmp	r3, #1
 8003b30:	d113      	bne.n	8003b5a <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b36:	881a      	ldrh	r2, [r3, #0]
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b42:	1c9a      	adds	r2, r3, #2
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b4c:	b29b      	uxth	r3, r3
 8003b4e:	3b01      	subs	r3, #1
 8003b50:	b29a      	uxth	r2, r3
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003b56:	2300      	movs	r3, #0
 8003b58:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	689b      	ldr	r3, [r3, #8]
 8003b60:	f003 0301 	and.w	r3, r3, #1
 8003b64:	2b01      	cmp	r3, #1
 8003b66:	d119      	bne.n	8003b9c <HAL_SPI_TransmitReceive+0x1b8>
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b6c:	b29b      	uxth	r3, r3
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d014      	beq.n	8003b9c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	68da      	ldr	r2, [r3, #12]
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b7c:	b292      	uxth	r2, r2
 8003b7e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b84:	1c9a      	adds	r2, r3, #2
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b8e:	b29b      	uxth	r3, r3
 8003b90:	3b01      	subs	r3, #1
 8003b92:	b29a      	uxth	r2, r3
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003b98:	2301      	movs	r3, #1
 8003b9a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003b9c:	f7fe f98c 	bl	8001eb8 <HAL_GetTick>
 8003ba0:	4602      	mov	r2, r0
 8003ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ba4:	1ad3      	subs	r3, r2, r3
 8003ba6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003ba8:	429a      	cmp	r2, r3
 8003baa:	d807      	bhi.n	8003bbc <HAL_SPI_TransmitReceive+0x1d8>
 8003bac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bb2:	d003      	beq.n	8003bbc <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8003bb4:	2303      	movs	r3, #3
 8003bb6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003bba:	e0a7      	b.n	8003d0c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003bc0:	b29b      	uxth	r3, r3
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d1a6      	bne.n	8003b14 <HAL_SPI_TransmitReceive+0x130>
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003bca:	b29b      	uxth	r3, r3
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d1a1      	bne.n	8003b14 <HAL_SPI_TransmitReceive+0x130>
 8003bd0:	e07c      	b.n	8003ccc <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	685b      	ldr	r3, [r3, #4]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d002      	beq.n	8003be0 <HAL_SPI_TransmitReceive+0x1fc>
 8003bda:	8b7b      	ldrh	r3, [r7, #26]
 8003bdc:	2b01      	cmp	r3, #1
 8003bde:	d16b      	bne.n	8003cb8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	330c      	adds	r3, #12
 8003bea:	7812      	ldrb	r2, [r2, #0]
 8003bec:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bf2:	1c5a      	adds	r2, r3, #1
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003bfc:	b29b      	uxth	r3, r3
 8003bfe:	3b01      	subs	r3, #1
 8003c00:	b29a      	uxth	r2, r3
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003c06:	e057      	b.n	8003cb8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	689b      	ldr	r3, [r3, #8]
 8003c0e:	f003 0302 	and.w	r3, r3, #2
 8003c12:	2b02      	cmp	r3, #2
 8003c14:	d11c      	bne.n	8003c50 <HAL_SPI_TransmitReceive+0x26c>
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c1a:	b29b      	uxth	r3, r3
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d017      	beq.n	8003c50 <HAL_SPI_TransmitReceive+0x26c>
 8003c20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c22:	2b01      	cmp	r3, #1
 8003c24:	d114      	bne.n	8003c50 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	330c      	adds	r3, #12
 8003c30:	7812      	ldrb	r2, [r2, #0]
 8003c32:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c38:	1c5a      	adds	r2, r3, #1
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c42:	b29b      	uxth	r3, r3
 8003c44:	3b01      	subs	r3, #1
 8003c46:	b29a      	uxth	r2, r3
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	689b      	ldr	r3, [r3, #8]
 8003c56:	f003 0301 	and.w	r3, r3, #1
 8003c5a:	2b01      	cmp	r3, #1
 8003c5c:	d119      	bne.n	8003c92 <HAL_SPI_TransmitReceive+0x2ae>
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c62:	b29b      	uxth	r3, r3
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d014      	beq.n	8003c92 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	68da      	ldr	r2, [r3, #12]
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c72:	b2d2      	uxtb	r2, r2
 8003c74:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c7a:	1c5a      	adds	r2, r3, #1
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c84:	b29b      	uxth	r3, r3
 8003c86:	3b01      	subs	r3, #1
 8003c88:	b29a      	uxth	r2, r3
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003c8e:	2301      	movs	r3, #1
 8003c90:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003c92:	f7fe f911 	bl	8001eb8 <HAL_GetTick>
 8003c96:	4602      	mov	r2, r0
 8003c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c9a:	1ad3      	subs	r3, r2, r3
 8003c9c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003c9e:	429a      	cmp	r2, r3
 8003ca0:	d803      	bhi.n	8003caa <HAL_SPI_TransmitReceive+0x2c6>
 8003ca2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ca4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ca8:	d102      	bne.n	8003cb0 <HAL_SPI_TransmitReceive+0x2cc>
 8003caa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d103      	bne.n	8003cb8 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8003cb0:	2303      	movs	r3, #3
 8003cb2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003cb6:	e029      	b.n	8003d0c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003cbc:	b29b      	uxth	r3, r3
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d1a2      	bne.n	8003c08 <HAL_SPI_TransmitReceive+0x224>
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003cc6:	b29b      	uxth	r3, r3
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d19d      	bne.n	8003c08 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003ccc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cce:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003cd0:	68f8      	ldr	r0, [r7, #12]
 8003cd2:	f000 f917 	bl	8003f04 <SPI_EndRxTxTransaction>
 8003cd6:	4603      	mov	r3, r0
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d006      	beq.n	8003cea <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8003cdc:	2301      	movs	r3, #1
 8003cde:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	2220      	movs	r2, #32
 8003ce6:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003ce8:	e010      	b.n	8003d0c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	689b      	ldr	r3, [r3, #8]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d10b      	bne.n	8003d0a <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	617b      	str	r3, [r7, #20]
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	68db      	ldr	r3, [r3, #12]
 8003cfc:	617b      	str	r3, [r7, #20]
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	689b      	ldr	r3, [r3, #8]
 8003d04:	617b      	str	r3, [r7, #20]
 8003d06:	697b      	ldr	r3, [r7, #20]
 8003d08:	e000      	b.n	8003d0c <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8003d0a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	2201      	movs	r2, #1
 8003d10:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	2200      	movs	r2, #0
 8003d18:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003d1c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003d20:	4618      	mov	r0, r3
 8003d22:	3730      	adds	r7, #48	; 0x30
 8003d24:	46bd      	mov	sp, r7
 8003d26:	bd80      	pop	{r7, pc}

08003d28 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b088      	sub	sp, #32
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	60f8      	str	r0, [r7, #12]
 8003d30:	60b9      	str	r1, [r7, #8]
 8003d32:	603b      	str	r3, [r7, #0]
 8003d34:	4613      	mov	r3, r2
 8003d36:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003d38:	f7fe f8be 	bl	8001eb8 <HAL_GetTick>
 8003d3c:	4602      	mov	r2, r0
 8003d3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d40:	1a9b      	subs	r3, r3, r2
 8003d42:	683a      	ldr	r2, [r7, #0]
 8003d44:	4413      	add	r3, r2
 8003d46:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003d48:	f7fe f8b6 	bl	8001eb8 <HAL_GetTick>
 8003d4c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003d4e:	4b39      	ldr	r3, [pc, #228]	; (8003e34 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	015b      	lsls	r3, r3, #5
 8003d54:	0d1b      	lsrs	r3, r3, #20
 8003d56:	69fa      	ldr	r2, [r7, #28]
 8003d58:	fb02 f303 	mul.w	r3, r2, r3
 8003d5c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003d5e:	e054      	b.n	8003e0a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d66:	d050      	beq.n	8003e0a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003d68:	f7fe f8a6 	bl	8001eb8 <HAL_GetTick>
 8003d6c:	4602      	mov	r2, r0
 8003d6e:	69bb      	ldr	r3, [r7, #24]
 8003d70:	1ad3      	subs	r3, r2, r3
 8003d72:	69fa      	ldr	r2, [r7, #28]
 8003d74:	429a      	cmp	r2, r3
 8003d76:	d902      	bls.n	8003d7e <SPI_WaitFlagStateUntilTimeout+0x56>
 8003d78:	69fb      	ldr	r3, [r7, #28]
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d13d      	bne.n	8003dfa <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	685a      	ldr	r2, [r3, #4]
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003d8c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	685b      	ldr	r3, [r3, #4]
 8003d92:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003d96:	d111      	bne.n	8003dbc <SPI_WaitFlagStateUntilTimeout+0x94>
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	689b      	ldr	r3, [r3, #8]
 8003d9c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003da0:	d004      	beq.n	8003dac <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	689b      	ldr	r3, [r3, #8]
 8003da6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003daa:	d107      	bne.n	8003dbc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	681a      	ldr	r2, [r3, #0]
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003dba:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dc0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003dc4:	d10f      	bne.n	8003de6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	681a      	ldr	r2, [r3, #0]
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003dd4:	601a      	str	r2, [r3, #0]
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	681a      	ldr	r2, [r3, #0]
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003de4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	2201      	movs	r2, #1
 8003dea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	2200      	movs	r2, #0
 8003df2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003df6:	2303      	movs	r3, #3
 8003df8:	e017      	b.n	8003e2a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003dfa:	697b      	ldr	r3, [r7, #20]
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d101      	bne.n	8003e04 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003e00:	2300      	movs	r3, #0
 8003e02:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003e04:	697b      	ldr	r3, [r7, #20]
 8003e06:	3b01      	subs	r3, #1
 8003e08:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	689a      	ldr	r2, [r3, #8]
 8003e10:	68bb      	ldr	r3, [r7, #8]
 8003e12:	4013      	ands	r3, r2
 8003e14:	68ba      	ldr	r2, [r7, #8]
 8003e16:	429a      	cmp	r2, r3
 8003e18:	bf0c      	ite	eq
 8003e1a:	2301      	moveq	r3, #1
 8003e1c:	2300      	movne	r3, #0
 8003e1e:	b2db      	uxtb	r3, r3
 8003e20:	461a      	mov	r2, r3
 8003e22:	79fb      	ldrb	r3, [r7, #7]
 8003e24:	429a      	cmp	r2, r3
 8003e26:	d19b      	bne.n	8003d60 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003e28:	2300      	movs	r3, #0
}
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	3720      	adds	r7, #32
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	bd80      	pop	{r7, pc}
 8003e32:	bf00      	nop
 8003e34:	20000000 	.word	0x20000000

08003e38 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b086      	sub	sp, #24
 8003e3c:	af02      	add	r7, sp, #8
 8003e3e:	60f8      	str	r0, [r7, #12]
 8003e40:	60b9      	str	r1, [r7, #8]
 8003e42:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	685b      	ldr	r3, [r3, #4]
 8003e48:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003e4c:	d111      	bne.n	8003e72 <SPI_EndRxTransaction+0x3a>
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	689b      	ldr	r3, [r3, #8]
 8003e52:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e56:	d004      	beq.n	8003e62 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	689b      	ldr	r3, [r3, #8]
 8003e5c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e60:	d107      	bne.n	8003e72 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	681a      	ldr	r2, [r3, #0]
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e70:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	685b      	ldr	r3, [r3, #4]
 8003e76:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003e7a:	d12a      	bne.n	8003ed2 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	689b      	ldr	r3, [r3, #8]
 8003e80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e84:	d012      	beq.n	8003eac <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	9300      	str	r3, [sp, #0]
 8003e8a:	68bb      	ldr	r3, [r7, #8]
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	2180      	movs	r1, #128	; 0x80
 8003e90:	68f8      	ldr	r0, [r7, #12]
 8003e92:	f7ff ff49 	bl	8003d28 <SPI_WaitFlagStateUntilTimeout>
 8003e96:	4603      	mov	r3, r0
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d02d      	beq.n	8003ef8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ea0:	f043 0220 	orr.w	r2, r3, #32
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8003ea8:	2303      	movs	r3, #3
 8003eaa:	e026      	b.n	8003efa <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	9300      	str	r3, [sp, #0]
 8003eb0:	68bb      	ldr	r3, [r7, #8]
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	2101      	movs	r1, #1
 8003eb6:	68f8      	ldr	r0, [r7, #12]
 8003eb8:	f7ff ff36 	bl	8003d28 <SPI_WaitFlagStateUntilTimeout>
 8003ebc:	4603      	mov	r3, r0
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d01a      	beq.n	8003ef8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ec6:	f043 0220 	orr.w	r2, r3, #32
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8003ece:	2303      	movs	r3, #3
 8003ed0:	e013      	b.n	8003efa <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	9300      	str	r3, [sp, #0]
 8003ed6:	68bb      	ldr	r3, [r7, #8]
 8003ed8:	2200      	movs	r2, #0
 8003eda:	2101      	movs	r1, #1
 8003edc:	68f8      	ldr	r0, [r7, #12]
 8003ede:	f7ff ff23 	bl	8003d28 <SPI_WaitFlagStateUntilTimeout>
 8003ee2:	4603      	mov	r3, r0
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d007      	beq.n	8003ef8 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003eec:	f043 0220 	orr.w	r2, r3, #32
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003ef4:	2303      	movs	r3, #3
 8003ef6:	e000      	b.n	8003efa <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8003ef8:	2300      	movs	r3, #0
}
 8003efa:	4618      	mov	r0, r3
 8003efc:	3710      	adds	r7, #16
 8003efe:	46bd      	mov	sp, r7
 8003f00:	bd80      	pop	{r7, pc}
	...

08003f04 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b088      	sub	sp, #32
 8003f08:	af02      	add	r7, sp, #8
 8003f0a:	60f8      	str	r0, [r7, #12]
 8003f0c:	60b9      	str	r1, [r7, #8]
 8003f0e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003f10:	4b1b      	ldr	r3, [pc, #108]	; (8003f80 <SPI_EndRxTxTransaction+0x7c>)
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	4a1b      	ldr	r2, [pc, #108]	; (8003f84 <SPI_EndRxTxTransaction+0x80>)
 8003f16:	fba2 2303 	umull	r2, r3, r2, r3
 8003f1a:	0d5b      	lsrs	r3, r3, #21
 8003f1c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003f20:	fb02 f303 	mul.w	r3, r2, r3
 8003f24:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	685b      	ldr	r3, [r3, #4]
 8003f2a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003f2e:	d112      	bne.n	8003f56 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	9300      	str	r3, [sp, #0]
 8003f34:	68bb      	ldr	r3, [r7, #8]
 8003f36:	2200      	movs	r2, #0
 8003f38:	2180      	movs	r1, #128	; 0x80
 8003f3a:	68f8      	ldr	r0, [r7, #12]
 8003f3c:	f7ff fef4 	bl	8003d28 <SPI_WaitFlagStateUntilTimeout>
 8003f40:	4603      	mov	r3, r0
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d016      	beq.n	8003f74 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f4a:	f043 0220 	orr.w	r2, r3, #32
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003f52:	2303      	movs	r3, #3
 8003f54:	e00f      	b.n	8003f76 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003f56:	697b      	ldr	r3, [r7, #20]
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d00a      	beq.n	8003f72 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003f5c:	697b      	ldr	r3, [r7, #20]
 8003f5e:	3b01      	subs	r3, #1
 8003f60:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	689b      	ldr	r3, [r3, #8]
 8003f68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f6c:	2b80      	cmp	r3, #128	; 0x80
 8003f6e:	d0f2      	beq.n	8003f56 <SPI_EndRxTxTransaction+0x52>
 8003f70:	e000      	b.n	8003f74 <SPI_EndRxTxTransaction+0x70>
        break;
 8003f72:	bf00      	nop
  }

  return HAL_OK;
 8003f74:	2300      	movs	r3, #0
}
 8003f76:	4618      	mov	r0, r3
 8003f78:	3718      	adds	r7, #24
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	bd80      	pop	{r7, pc}
 8003f7e:	bf00      	nop
 8003f80:	20000000 	.word	0x20000000
 8003f84:	165e9f81 	.word	0x165e9f81

08003f88 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b082      	sub	sp, #8
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d101      	bne.n	8003f9a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003f96:	2301      	movs	r3, #1
 8003f98:	e041      	b.n	800401e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fa0:	b2db      	uxtb	r3, r3
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d106      	bne.n	8003fb4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	2200      	movs	r2, #0
 8003faa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003fae:	6878      	ldr	r0, [r7, #4]
 8003fb0:	f7fd fbf4 	bl	800179c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2202      	movs	r2, #2
 8003fb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681a      	ldr	r2, [r3, #0]
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	3304      	adds	r3, #4
 8003fc4:	4619      	mov	r1, r3
 8003fc6:	4610      	mov	r0, r2
 8003fc8:	f000 fdb0 	bl	8004b2c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2201      	movs	r2, #1
 8003fd0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2201      	movs	r2, #1
 8003fd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2201      	movs	r2, #1
 8003fe0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2201      	movs	r2, #1
 8003fe8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2201      	movs	r2, #1
 8003ff0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2201      	movs	r2, #1
 8003ff8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2201      	movs	r2, #1
 8004000:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2201      	movs	r2, #1
 8004008:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2201      	movs	r2, #1
 8004010:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2201      	movs	r2, #1
 8004018:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800401c:	2300      	movs	r3, #0
}
 800401e:	4618      	mov	r0, r3
 8004020:	3708      	adds	r7, #8
 8004022:	46bd      	mov	sp, r7
 8004024:	bd80      	pop	{r7, pc}
	...

08004028 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004028:	b480      	push	{r7}
 800402a:	b085      	sub	sp, #20
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004036:	b2db      	uxtb	r3, r3
 8004038:	2b01      	cmp	r3, #1
 800403a:	d001      	beq.n	8004040 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800403c:	2301      	movs	r3, #1
 800403e:	e046      	b.n	80040ce <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2202      	movs	r2, #2
 8004044:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	4a23      	ldr	r2, [pc, #140]	; (80040dc <HAL_TIM_Base_Start+0xb4>)
 800404e:	4293      	cmp	r3, r2
 8004050:	d022      	beq.n	8004098 <HAL_TIM_Base_Start+0x70>
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800405a:	d01d      	beq.n	8004098 <HAL_TIM_Base_Start+0x70>
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	4a1f      	ldr	r2, [pc, #124]	; (80040e0 <HAL_TIM_Base_Start+0xb8>)
 8004062:	4293      	cmp	r3, r2
 8004064:	d018      	beq.n	8004098 <HAL_TIM_Base_Start+0x70>
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	4a1e      	ldr	r2, [pc, #120]	; (80040e4 <HAL_TIM_Base_Start+0xbc>)
 800406c:	4293      	cmp	r3, r2
 800406e:	d013      	beq.n	8004098 <HAL_TIM_Base_Start+0x70>
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	4a1c      	ldr	r2, [pc, #112]	; (80040e8 <HAL_TIM_Base_Start+0xc0>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d00e      	beq.n	8004098 <HAL_TIM_Base_Start+0x70>
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	4a1b      	ldr	r2, [pc, #108]	; (80040ec <HAL_TIM_Base_Start+0xc4>)
 8004080:	4293      	cmp	r3, r2
 8004082:	d009      	beq.n	8004098 <HAL_TIM_Base_Start+0x70>
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	4a19      	ldr	r2, [pc, #100]	; (80040f0 <HAL_TIM_Base_Start+0xc8>)
 800408a:	4293      	cmp	r3, r2
 800408c:	d004      	beq.n	8004098 <HAL_TIM_Base_Start+0x70>
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	4a18      	ldr	r2, [pc, #96]	; (80040f4 <HAL_TIM_Base_Start+0xcc>)
 8004094:	4293      	cmp	r3, r2
 8004096:	d111      	bne.n	80040bc <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	689b      	ldr	r3, [r3, #8]
 800409e:	f003 0307 	and.w	r3, r3, #7
 80040a2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	2b06      	cmp	r3, #6
 80040a8:	d010      	beq.n	80040cc <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	681a      	ldr	r2, [r3, #0]
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f042 0201 	orr.w	r2, r2, #1
 80040b8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040ba:	e007      	b.n	80040cc <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	681a      	ldr	r2, [r3, #0]
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f042 0201 	orr.w	r2, r2, #1
 80040ca:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80040cc:	2300      	movs	r3, #0
}
 80040ce:	4618      	mov	r0, r3
 80040d0:	3714      	adds	r7, #20
 80040d2:	46bd      	mov	sp, r7
 80040d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d8:	4770      	bx	lr
 80040da:	bf00      	nop
 80040dc:	40010000 	.word	0x40010000
 80040e0:	40000400 	.word	0x40000400
 80040e4:	40000800 	.word	0x40000800
 80040e8:	40000c00 	.word	0x40000c00
 80040ec:	40010400 	.word	0x40010400
 80040f0:	40014000 	.word	0x40014000
 80040f4:	40001800 	.word	0x40001800

080040f8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80040f8:	b480      	push	{r7}
 80040fa:	b085      	sub	sp, #20
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004106:	b2db      	uxtb	r3, r3
 8004108:	2b01      	cmp	r3, #1
 800410a:	d001      	beq.n	8004110 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800410c:	2301      	movs	r3, #1
 800410e:	e04e      	b.n	80041ae <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2202      	movs	r2, #2
 8004114:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	68da      	ldr	r2, [r3, #12]
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f042 0201 	orr.w	r2, r2, #1
 8004126:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	4a23      	ldr	r2, [pc, #140]	; (80041bc <HAL_TIM_Base_Start_IT+0xc4>)
 800412e:	4293      	cmp	r3, r2
 8004130:	d022      	beq.n	8004178 <HAL_TIM_Base_Start_IT+0x80>
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800413a:	d01d      	beq.n	8004178 <HAL_TIM_Base_Start_IT+0x80>
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	4a1f      	ldr	r2, [pc, #124]	; (80041c0 <HAL_TIM_Base_Start_IT+0xc8>)
 8004142:	4293      	cmp	r3, r2
 8004144:	d018      	beq.n	8004178 <HAL_TIM_Base_Start_IT+0x80>
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	4a1e      	ldr	r2, [pc, #120]	; (80041c4 <HAL_TIM_Base_Start_IT+0xcc>)
 800414c:	4293      	cmp	r3, r2
 800414e:	d013      	beq.n	8004178 <HAL_TIM_Base_Start_IT+0x80>
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	4a1c      	ldr	r2, [pc, #112]	; (80041c8 <HAL_TIM_Base_Start_IT+0xd0>)
 8004156:	4293      	cmp	r3, r2
 8004158:	d00e      	beq.n	8004178 <HAL_TIM_Base_Start_IT+0x80>
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	4a1b      	ldr	r2, [pc, #108]	; (80041cc <HAL_TIM_Base_Start_IT+0xd4>)
 8004160:	4293      	cmp	r3, r2
 8004162:	d009      	beq.n	8004178 <HAL_TIM_Base_Start_IT+0x80>
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	4a19      	ldr	r2, [pc, #100]	; (80041d0 <HAL_TIM_Base_Start_IT+0xd8>)
 800416a:	4293      	cmp	r3, r2
 800416c:	d004      	beq.n	8004178 <HAL_TIM_Base_Start_IT+0x80>
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	4a18      	ldr	r2, [pc, #96]	; (80041d4 <HAL_TIM_Base_Start_IT+0xdc>)
 8004174:	4293      	cmp	r3, r2
 8004176:	d111      	bne.n	800419c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	689b      	ldr	r3, [r3, #8]
 800417e:	f003 0307 	and.w	r3, r3, #7
 8004182:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	2b06      	cmp	r3, #6
 8004188:	d010      	beq.n	80041ac <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	681a      	ldr	r2, [r3, #0]
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f042 0201 	orr.w	r2, r2, #1
 8004198:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800419a:	e007      	b.n	80041ac <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	681a      	ldr	r2, [r3, #0]
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f042 0201 	orr.w	r2, r2, #1
 80041aa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80041ac:	2300      	movs	r3, #0
}
 80041ae:	4618      	mov	r0, r3
 80041b0:	3714      	adds	r7, #20
 80041b2:	46bd      	mov	sp, r7
 80041b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b8:	4770      	bx	lr
 80041ba:	bf00      	nop
 80041bc:	40010000 	.word	0x40010000
 80041c0:	40000400 	.word	0x40000400
 80041c4:	40000800 	.word	0x40000800
 80041c8:	40000c00 	.word	0x40000c00
 80041cc:	40010400 	.word	0x40010400
 80041d0:	40014000 	.word	0x40014000
 80041d4:	40001800 	.word	0x40001800

080041d8 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	b082      	sub	sp, #8
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d101      	bne.n	80041ea <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80041e6:	2301      	movs	r3, #1
 80041e8:	e041      	b.n	800426e <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041f0:	b2db      	uxtb	r3, r3
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d106      	bne.n	8004204 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2200      	movs	r2, #0
 80041fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80041fe:	6878      	ldr	r0, [r7, #4]
 8004200:	f000 f839 	bl	8004276 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2202      	movs	r2, #2
 8004208:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681a      	ldr	r2, [r3, #0]
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	3304      	adds	r3, #4
 8004214:	4619      	mov	r1, r3
 8004216:	4610      	mov	r0, r2
 8004218:	f000 fc88 	bl	8004b2c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2201      	movs	r2, #1
 8004220:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2201      	movs	r2, #1
 8004228:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2201      	movs	r2, #1
 8004230:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2201      	movs	r2, #1
 8004238:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2201      	movs	r2, #1
 8004240:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2201      	movs	r2, #1
 8004248:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2201      	movs	r2, #1
 8004250:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2201      	movs	r2, #1
 8004258:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2201      	movs	r2, #1
 8004260:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2201      	movs	r2, #1
 8004268:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800426c:	2300      	movs	r3, #0
}
 800426e:	4618      	mov	r0, r3
 8004270:	3708      	adds	r7, #8
 8004272:	46bd      	mov	sp, r7
 8004274:	bd80      	pop	{r7, pc}

08004276 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8004276:	b480      	push	{r7}
 8004278:	b083      	sub	sp, #12
 800427a:	af00      	add	r7, sp, #0
 800427c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 800427e:	bf00      	nop
 8004280:	370c      	adds	r7, #12
 8004282:	46bd      	mov	sp, r7
 8004284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004288:	4770      	bx	lr

0800428a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800428a:	b580      	push	{r7, lr}
 800428c:	b082      	sub	sp, #8
 800428e:	af00      	add	r7, sp, #0
 8004290:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	2b00      	cmp	r3, #0
 8004296:	d101      	bne.n	800429c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004298:	2301      	movs	r3, #1
 800429a:	e041      	b.n	8004320 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042a2:	b2db      	uxtb	r3, r3
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d106      	bne.n	80042b6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2200      	movs	r2, #0
 80042ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80042b0:	6878      	ldr	r0, [r7, #4]
 80042b2:	f000 f839 	bl	8004328 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	2202      	movs	r2, #2
 80042ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681a      	ldr	r2, [r3, #0]
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	3304      	adds	r3, #4
 80042c6:	4619      	mov	r1, r3
 80042c8:	4610      	mov	r0, r2
 80042ca:	f000 fc2f 	bl	8004b2c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	2201      	movs	r2, #1
 80042d2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	2201      	movs	r2, #1
 80042da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	2201      	movs	r2, #1
 80042e2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	2201      	movs	r2, #1
 80042ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	2201      	movs	r2, #1
 80042f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	2201      	movs	r2, #1
 80042fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	2201      	movs	r2, #1
 8004302:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	2201      	movs	r2, #1
 800430a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	2201      	movs	r2, #1
 8004312:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	2201      	movs	r2, #1
 800431a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800431e:	2300      	movs	r3, #0
}
 8004320:	4618      	mov	r0, r3
 8004322:	3708      	adds	r7, #8
 8004324:	46bd      	mov	sp, r7
 8004326:	bd80      	pop	{r7, pc}

08004328 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004328:	b480      	push	{r7}
 800432a:	b083      	sub	sp, #12
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004330:	bf00      	nop
 8004332:	370c      	adds	r7, #12
 8004334:	46bd      	mov	sp, r7
 8004336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433a:	4770      	bx	lr

0800433c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800433c:	b580      	push	{r7, lr}
 800433e:	b082      	sub	sp, #8
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2b00      	cmp	r3, #0
 8004348:	d101      	bne.n	800434e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800434a:	2301      	movs	r3, #1
 800434c:	e041      	b.n	80043d2 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004354:	b2db      	uxtb	r3, r3
 8004356:	2b00      	cmp	r3, #0
 8004358:	d106      	bne.n	8004368 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	2200      	movs	r2, #0
 800435e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8004362:	6878      	ldr	r0, [r7, #4]
 8004364:	f000 f839 	bl	80043da <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2202      	movs	r2, #2
 800436c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681a      	ldr	r2, [r3, #0]
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	3304      	adds	r3, #4
 8004378:	4619      	mov	r1, r3
 800437a:	4610      	mov	r0, r2
 800437c:	f000 fbd6 	bl	8004b2c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2201      	movs	r2, #1
 8004384:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2201      	movs	r2, #1
 800438c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2201      	movs	r2, #1
 8004394:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2201      	movs	r2, #1
 800439c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2201      	movs	r2, #1
 80043a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2201      	movs	r2, #1
 80043ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2201      	movs	r2, #1
 80043b4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2201      	movs	r2, #1
 80043bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2201      	movs	r2, #1
 80043c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2201      	movs	r2, #1
 80043cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80043d0:	2300      	movs	r3, #0
}
 80043d2:	4618      	mov	r0, r3
 80043d4:	3708      	adds	r7, #8
 80043d6:	46bd      	mov	sp, r7
 80043d8:	bd80      	pop	{r7, pc}

080043da <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80043da:	b480      	push	{r7}
 80043dc:	b083      	sub	sp, #12
 80043de:	af00      	add	r7, sp, #0
 80043e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80043e2:	bf00      	nop
 80043e4:	370c      	adds	r7, #12
 80043e6:	46bd      	mov	sp, r7
 80043e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ec:	4770      	bx	lr

080043ee <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80043ee:	b580      	push	{r7, lr}
 80043f0:	b082      	sub	sp, #8
 80043f2:	af00      	add	r7, sp, #0
 80043f4:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	691b      	ldr	r3, [r3, #16]
 80043fc:	f003 0302 	and.w	r3, r3, #2
 8004400:	2b02      	cmp	r3, #2
 8004402:	d122      	bne.n	800444a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	68db      	ldr	r3, [r3, #12]
 800440a:	f003 0302 	and.w	r3, r3, #2
 800440e:	2b02      	cmp	r3, #2
 8004410:	d11b      	bne.n	800444a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f06f 0202 	mvn.w	r2, #2
 800441a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2201      	movs	r2, #1
 8004420:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	699b      	ldr	r3, [r3, #24]
 8004428:	f003 0303 	and.w	r3, r3, #3
 800442c:	2b00      	cmp	r3, #0
 800442e:	d003      	beq.n	8004438 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004430:	6878      	ldr	r0, [r7, #4]
 8004432:	f000 fb5d 	bl	8004af0 <HAL_TIM_IC_CaptureCallback>
 8004436:	e005      	b.n	8004444 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004438:	6878      	ldr	r0, [r7, #4]
 800443a:	f000 fb4f 	bl	8004adc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800443e:	6878      	ldr	r0, [r7, #4]
 8004440:	f000 fb60 	bl	8004b04 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2200      	movs	r2, #0
 8004448:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	691b      	ldr	r3, [r3, #16]
 8004450:	f003 0304 	and.w	r3, r3, #4
 8004454:	2b04      	cmp	r3, #4
 8004456:	d122      	bne.n	800449e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	68db      	ldr	r3, [r3, #12]
 800445e:	f003 0304 	and.w	r3, r3, #4
 8004462:	2b04      	cmp	r3, #4
 8004464:	d11b      	bne.n	800449e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f06f 0204 	mvn.w	r2, #4
 800446e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2202      	movs	r2, #2
 8004474:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	699b      	ldr	r3, [r3, #24]
 800447c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004480:	2b00      	cmp	r3, #0
 8004482:	d003      	beq.n	800448c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004484:	6878      	ldr	r0, [r7, #4]
 8004486:	f000 fb33 	bl	8004af0 <HAL_TIM_IC_CaptureCallback>
 800448a:	e005      	b.n	8004498 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800448c:	6878      	ldr	r0, [r7, #4]
 800448e:	f000 fb25 	bl	8004adc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004492:	6878      	ldr	r0, [r7, #4]
 8004494:	f000 fb36 	bl	8004b04 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2200      	movs	r2, #0
 800449c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	691b      	ldr	r3, [r3, #16]
 80044a4:	f003 0308 	and.w	r3, r3, #8
 80044a8:	2b08      	cmp	r3, #8
 80044aa:	d122      	bne.n	80044f2 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	68db      	ldr	r3, [r3, #12]
 80044b2:	f003 0308 	and.w	r3, r3, #8
 80044b6:	2b08      	cmp	r3, #8
 80044b8:	d11b      	bne.n	80044f2 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f06f 0208 	mvn.w	r2, #8
 80044c2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2204      	movs	r2, #4
 80044c8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	69db      	ldr	r3, [r3, #28]
 80044d0:	f003 0303 	and.w	r3, r3, #3
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d003      	beq.n	80044e0 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80044d8:	6878      	ldr	r0, [r7, #4]
 80044da:	f000 fb09 	bl	8004af0 <HAL_TIM_IC_CaptureCallback>
 80044de:	e005      	b.n	80044ec <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80044e0:	6878      	ldr	r0, [r7, #4]
 80044e2:	f000 fafb 	bl	8004adc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044e6:	6878      	ldr	r0, [r7, #4]
 80044e8:	f000 fb0c 	bl	8004b04 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2200      	movs	r2, #0
 80044f0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	691b      	ldr	r3, [r3, #16]
 80044f8:	f003 0310 	and.w	r3, r3, #16
 80044fc:	2b10      	cmp	r3, #16
 80044fe:	d122      	bne.n	8004546 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	68db      	ldr	r3, [r3, #12]
 8004506:	f003 0310 	and.w	r3, r3, #16
 800450a:	2b10      	cmp	r3, #16
 800450c:	d11b      	bne.n	8004546 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f06f 0210 	mvn.w	r2, #16
 8004516:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2208      	movs	r2, #8
 800451c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	69db      	ldr	r3, [r3, #28]
 8004524:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004528:	2b00      	cmp	r3, #0
 800452a:	d003      	beq.n	8004534 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800452c:	6878      	ldr	r0, [r7, #4]
 800452e:	f000 fadf 	bl	8004af0 <HAL_TIM_IC_CaptureCallback>
 8004532:	e005      	b.n	8004540 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004534:	6878      	ldr	r0, [r7, #4]
 8004536:	f000 fad1 	bl	8004adc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800453a:	6878      	ldr	r0, [r7, #4]
 800453c:	f000 fae2 	bl	8004b04 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2200      	movs	r2, #0
 8004544:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	691b      	ldr	r3, [r3, #16]
 800454c:	f003 0301 	and.w	r3, r3, #1
 8004550:	2b01      	cmp	r3, #1
 8004552:	d10e      	bne.n	8004572 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	68db      	ldr	r3, [r3, #12]
 800455a:	f003 0301 	and.w	r3, r3, #1
 800455e:	2b01      	cmp	r3, #1
 8004560:	d107      	bne.n	8004572 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f06f 0201 	mvn.w	r2, #1
 800456a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800456c:	6878      	ldr	r0, [r7, #4]
 800456e:	f7fc ffe1 	bl	8001534 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	691b      	ldr	r3, [r3, #16]
 8004578:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800457c:	2b80      	cmp	r3, #128	; 0x80
 800457e:	d10e      	bne.n	800459e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	68db      	ldr	r3, [r3, #12]
 8004586:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800458a:	2b80      	cmp	r3, #128	; 0x80
 800458c:	d107      	bne.n	800459e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004596:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004598:	6878      	ldr	r0, [r7, #4]
 800459a:	f000 ffb3 	bl	8005504 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	691b      	ldr	r3, [r3, #16]
 80045a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045a8:	2b40      	cmp	r3, #64	; 0x40
 80045aa:	d10e      	bne.n	80045ca <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	68db      	ldr	r3, [r3, #12]
 80045b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045b6:	2b40      	cmp	r3, #64	; 0x40
 80045b8:	d107      	bne.n	80045ca <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80045c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80045c4:	6878      	ldr	r0, [r7, #4]
 80045c6:	f000 faa7 	bl	8004b18 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	691b      	ldr	r3, [r3, #16]
 80045d0:	f003 0320 	and.w	r3, r3, #32
 80045d4:	2b20      	cmp	r3, #32
 80045d6:	d10e      	bne.n	80045f6 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	68db      	ldr	r3, [r3, #12]
 80045de:	f003 0320 	and.w	r3, r3, #32
 80045e2:	2b20      	cmp	r3, #32
 80045e4:	d107      	bne.n	80045f6 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f06f 0220 	mvn.w	r2, #32
 80045ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80045f0:	6878      	ldr	r0, [r7, #4]
 80045f2:	f000 ff7d 	bl	80054f0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80045f6:	bf00      	nop
 80045f8:	3708      	adds	r7, #8
 80045fa:	46bd      	mov	sp, r7
 80045fc:	bd80      	pop	{r7, pc}
	...

08004600 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8004600:	b580      	push	{r7, lr}
 8004602:	b084      	sub	sp, #16
 8004604:	af00      	add	r7, sp, #0
 8004606:	60f8      	str	r0, [r7, #12]
 8004608:	60b9      	str	r1, [r7, #8]
 800460a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004612:	2b01      	cmp	r3, #1
 8004614:	d101      	bne.n	800461a <HAL_TIM_OC_ConfigChannel+0x1a>
 8004616:	2302      	movs	r3, #2
 8004618:	e046      	b.n	80046a8 <HAL_TIM_OC_ConfigChannel+0xa8>
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	2201      	movs	r2, #1
 800461e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	2b0c      	cmp	r3, #12
 8004626:	d839      	bhi.n	800469c <HAL_TIM_OC_ConfigChannel+0x9c>
 8004628:	a201      	add	r2, pc, #4	; (adr r2, 8004630 <HAL_TIM_OC_ConfigChannel+0x30>)
 800462a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800462e:	bf00      	nop
 8004630:	08004665 	.word	0x08004665
 8004634:	0800469d 	.word	0x0800469d
 8004638:	0800469d 	.word	0x0800469d
 800463c:	0800469d 	.word	0x0800469d
 8004640:	08004673 	.word	0x08004673
 8004644:	0800469d 	.word	0x0800469d
 8004648:	0800469d 	.word	0x0800469d
 800464c:	0800469d 	.word	0x0800469d
 8004650:	08004681 	.word	0x08004681
 8004654:	0800469d 	.word	0x0800469d
 8004658:	0800469d 	.word	0x0800469d
 800465c:	0800469d 	.word	0x0800469d
 8004660:	0800468f 	.word	0x0800468f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	68b9      	ldr	r1, [r7, #8]
 800466a:	4618      	mov	r0, r3
 800466c:	f000 fafe 	bl	8004c6c <TIM_OC1_SetConfig>
      break;
 8004670:	e015      	b.n	800469e <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	68b9      	ldr	r1, [r7, #8]
 8004678:	4618      	mov	r0, r3
 800467a:	f000 fb67 	bl	8004d4c <TIM_OC2_SetConfig>
      break;
 800467e:	e00e      	b.n	800469e <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	68b9      	ldr	r1, [r7, #8]
 8004686:	4618      	mov	r0, r3
 8004688:	f000 fbd6 	bl	8004e38 <TIM_OC3_SetConfig>
      break;
 800468c:	e007      	b.n	800469e <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	68b9      	ldr	r1, [r7, #8]
 8004694:	4618      	mov	r0, r3
 8004696:	f000 fc43 	bl	8004f20 <TIM_OC4_SetConfig>
      break;
 800469a:	e000      	b.n	800469e <HAL_TIM_OC_ConfigChannel+0x9e>
    }

    default:
      break;
 800469c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	2200      	movs	r2, #0
 80046a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80046a6:	2300      	movs	r3, #0
}
 80046a8:	4618      	mov	r0, r3
 80046aa:	3710      	adds	r7, #16
 80046ac:	46bd      	mov	sp, r7
 80046ae:	bd80      	pop	{r7, pc}

080046b0 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80046b0:	b580      	push	{r7, lr}
 80046b2:	b084      	sub	sp, #16
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	60f8      	str	r0, [r7, #12]
 80046b8:	60b9      	str	r1, [r7, #8]
 80046ba:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80046c2:	2b01      	cmp	r3, #1
 80046c4:	d101      	bne.n	80046ca <HAL_TIM_IC_ConfigChannel+0x1a>
 80046c6:	2302      	movs	r3, #2
 80046c8:	e082      	b.n	80047d0 <HAL_TIM_IC_ConfigChannel+0x120>
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	2201      	movs	r2, #1
 80046ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d11b      	bne.n	8004710 <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	6818      	ldr	r0, [r3, #0]
 80046dc:	68bb      	ldr	r3, [r7, #8]
 80046de:	6819      	ldr	r1, [r3, #0]
 80046e0:	68bb      	ldr	r3, [r7, #8]
 80046e2:	685a      	ldr	r2, [r3, #4]
 80046e4:	68bb      	ldr	r3, [r7, #8]
 80046e6:	68db      	ldr	r3, [r3, #12]
 80046e8:	f000 fc70 	bl	8004fcc <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	699a      	ldr	r2, [r3, #24]
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f022 020c 	bic.w	r2, r2, #12
 80046fa:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	6999      	ldr	r1, [r3, #24]
 8004702:	68bb      	ldr	r3, [r7, #8]
 8004704:	689a      	ldr	r2, [r3, #8]
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	430a      	orrs	r2, r1
 800470c:	619a      	str	r2, [r3, #24]
 800470e:	e05a      	b.n	80047c6 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2b04      	cmp	r3, #4
 8004714:	d11c      	bne.n	8004750 <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	6818      	ldr	r0, [r3, #0]
 800471a:	68bb      	ldr	r3, [r7, #8]
 800471c:	6819      	ldr	r1, [r3, #0]
 800471e:	68bb      	ldr	r3, [r7, #8]
 8004720:	685a      	ldr	r2, [r3, #4]
 8004722:	68bb      	ldr	r3, [r7, #8]
 8004724:	68db      	ldr	r3, [r3, #12]
 8004726:	f000 fcf4 	bl	8005112 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	699a      	ldr	r2, [r3, #24]
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004738:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	6999      	ldr	r1, [r3, #24]
 8004740:	68bb      	ldr	r3, [r7, #8]
 8004742:	689b      	ldr	r3, [r3, #8]
 8004744:	021a      	lsls	r2, r3, #8
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	430a      	orrs	r2, r1
 800474c:	619a      	str	r2, [r3, #24]
 800474e:	e03a      	b.n	80047c6 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2b08      	cmp	r3, #8
 8004754:	d11b      	bne.n	800478e <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	6818      	ldr	r0, [r3, #0]
 800475a:	68bb      	ldr	r3, [r7, #8]
 800475c:	6819      	ldr	r1, [r3, #0]
 800475e:	68bb      	ldr	r3, [r7, #8]
 8004760:	685a      	ldr	r2, [r3, #4]
 8004762:	68bb      	ldr	r3, [r7, #8]
 8004764:	68db      	ldr	r3, [r3, #12]
 8004766:	f000 fd41 	bl	80051ec <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	69da      	ldr	r2, [r3, #28]
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f022 020c 	bic.w	r2, r2, #12
 8004778:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	69d9      	ldr	r1, [r3, #28]
 8004780:	68bb      	ldr	r3, [r7, #8]
 8004782:	689a      	ldr	r2, [r3, #8]
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	430a      	orrs	r2, r1
 800478a:	61da      	str	r2, [r3, #28]
 800478c:	e01b      	b.n	80047c6 <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	6818      	ldr	r0, [r3, #0]
 8004792:	68bb      	ldr	r3, [r7, #8]
 8004794:	6819      	ldr	r1, [r3, #0]
 8004796:	68bb      	ldr	r3, [r7, #8]
 8004798:	685a      	ldr	r2, [r3, #4]
 800479a:	68bb      	ldr	r3, [r7, #8]
 800479c:	68db      	ldr	r3, [r3, #12]
 800479e:	f000 fd61 	bl	8005264 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	69da      	ldr	r2, [r3, #28]
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80047b0:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	69d9      	ldr	r1, [r3, #28]
 80047b8:	68bb      	ldr	r3, [r7, #8]
 80047ba:	689b      	ldr	r3, [r3, #8]
 80047bc:	021a      	lsls	r2, r3, #8
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	430a      	orrs	r2, r1
 80047c4:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	2200      	movs	r2, #0
 80047ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80047ce:	2300      	movs	r3, #0
}
 80047d0:	4618      	mov	r0, r3
 80047d2:	3710      	adds	r7, #16
 80047d4:	46bd      	mov	sp, r7
 80047d6:	bd80      	pop	{r7, pc}

080047d8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80047d8:	b580      	push	{r7, lr}
 80047da:	b084      	sub	sp, #16
 80047dc:	af00      	add	r7, sp, #0
 80047de:	60f8      	str	r0, [r7, #12]
 80047e0:	60b9      	str	r1, [r7, #8]
 80047e2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047ea:	2b01      	cmp	r3, #1
 80047ec:	d101      	bne.n	80047f2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80047ee:	2302      	movs	r3, #2
 80047f0:	e0ac      	b.n	800494c <HAL_TIM_PWM_ConfigChannel+0x174>
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	2201      	movs	r2, #1
 80047f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	2b0c      	cmp	r3, #12
 80047fe:	f200 809f 	bhi.w	8004940 <HAL_TIM_PWM_ConfigChannel+0x168>
 8004802:	a201      	add	r2, pc, #4	; (adr r2, 8004808 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8004804:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004808:	0800483d 	.word	0x0800483d
 800480c:	08004941 	.word	0x08004941
 8004810:	08004941 	.word	0x08004941
 8004814:	08004941 	.word	0x08004941
 8004818:	0800487d 	.word	0x0800487d
 800481c:	08004941 	.word	0x08004941
 8004820:	08004941 	.word	0x08004941
 8004824:	08004941 	.word	0x08004941
 8004828:	080048bf 	.word	0x080048bf
 800482c:	08004941 	.word	0x08004941
 8004830:	08004941 	.word	0x08004941
 8004834:	08004941 	.word	0x08004941
 8004838:	080048ff 	.word	0x080048ff
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	68b9      	ldr	r1, [r7, #8]
 8004842:	4618      	mov	r0, r3
 8004844:	f000 fa12 	bl	8004c6c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	699a      	ldr	r2, [r3, #24]
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f042 0208 	orr.w	r2, r2, #8
 8004856:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	699a      	ldr	r2, [r3, #24]
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f022 0204 	bic.w	r2, r2, #4
 8004866:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	6999      	ldr	r1, [r3, #24]
 800486e:	68bb      	ldr	r3, [r7, #8]
 8004870:	691a      	ldr	r2, [r3, #16]
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	430a      	orrs	r2, r1
 8004878:	619a      	str	r2, [r3, #24]
      break;
 800487a:	e062      	b.n	8004942 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	68b9      	ldr	r1, [r7, #8]
 8004882:	4618      	mov	r0, r3
 8004884:	f000 fa62 	bl	8004d4c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	699a      	ldr	r2, [r3, #24]
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004896:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	699a      	ldr	r2, [r3, #24]
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80048a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	6999      	ldr	r1, [r3, #24]
 80048ae:	68bb      	ldr	r3, [r7, #8]
 80048b0:	691b      	ldr	r3, [r3, #16]
 80048b2:	021a      	lsls	r2, r3, #8
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	430a      	orrs	r2, r1
 80048ba:	619a      	str	r2, [r3, #24]
      break;
 80048bc:	e041      	b.n	8004942 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	68b9      	ldr	r1, [r7, #8]
 80048c4:	4618      	mov	r0, r3
 80048c6:	f000 fab7 	bl	8004e38 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	69da      	ldr	r2, [r3, #28]
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f042 0208 	orr.w	r2, r2, #8
 80048d8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	69da      	ldr	r2, [r3, #28]
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f022 0204 	bic.w	r2, r2, #4
 80048e8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	69d9      	ldr	r1, [r3, #28]
 80048f0:	68bb      	ldr	r3, [r7, #8]
 80048f2:	691a      	ldr	r2, [r3, #16]
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	430a      	orrs	r2, r1
 80048fa:	61da      	str	r2, [r3, #28]
      break;
 80048fc:	e021      	b.n	8004942 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	68b9      	ldr	r1, [r7, #8]
 8004904:	4618      	mov	r0, r3
 8004906:	f000 fb0b 	bl	8004f20 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	69da      	ldr	r2, [r3, #28]
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004918:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	69da      	ldr	r2, [r3, #28]
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004928:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	69d9      	ldr	r1, [r3, #28]
 8004930:	68bb      	ldr	r3, [r7, #8]
 8004932:	691b      	ldr	r3, [r3, #16]
 8004934:	021a      	lsls	r2, r3, #8
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	430a      	orrs	r2, r1
 800493c:	61da      	str	r2, [r3, #28]
      break;
 800493e:	e000      	b.n	8004942 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8004940:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	2200      	movs	r2, #0
 8004946:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800494a:	2300      	movs	r3, #0
}
 800494c:	4618      	mov	r0, r3
 800494e:	3710      	adds	r7, #16
 8004950:	46bd      	mov	sp, r7
 8004952:	bd80      	pop	{r7, pc}

08004954 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004954:	b580      	push	{r7, lr}
 8004956:	b084      	sub	sp, #16
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
 800495c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004964:	2b01      	cmp	r3, #1
 8004966:	d101      	bne.n	800496c <HAL_TIM_ConfigClockSource+0x18>
 8004968:	2302      	movs	r3, #2
 800496a:	e0b3      	b.n	8004ad4 <HAL_TIM_ConfigClockSource+0x180>
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2201      	movs	r2, #1
 8004970:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2202      	movs	r2, #2
 8004978:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	689b      	ldr	r3, [r3, #8]
 8004982:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800498a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004992:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	68fa      	ldr	r2, [r7, #12]
 800499a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80049a4:	d03e      	beq.n	8004a24 <HAL_TIM_ConfigClockSource+0xd0>
 80049a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80049aa:	f200 8087 	bhi.w	8004abc <HAL_TIM_ConfigClockSource+0x168>
 80049ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049b2:	f000 8085 	beq.w	8004ac0 <HAL_TIM_ConfigClockSource+0x16c>
 80049b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049ba:	d87f      	bhi.n	8004abc <HAL_TIM_ConfigClockSource+0x168>
 80049bc:	2b70      	cmp	r3, #112	; 0x70
 80049be:	d01a      	beq.n	80049f6 <HAL_TIM_ConfigClockSource+0xa2>
 80049c0:	2b70      	cmp	r3, #112	; 0x70
 80049c2:	d87b      	bhi.n	8004abc <HAL_TIM_ConfigClockSource+0x168>
 80049c4:	2b60      	cmp	r3, #96	; 0x60
 80049c6:	d050      	beq.n	8004a6a <HAL_TIM_ConfigClockSource+0x116>
 80049c8:	2b60      	cmp	r3, #96	; 0x60
 80049ca:	d877      	bhi.n	8004abc <HAL_TIM_ConfigClockSource+0x168>
 80049cc:	2b50      	cmp	r3, #80	; 0x50
 80049ce:	d03c      	beq.n	8004a4a <HAL_TIM_ConfigClockSource+0xf6>
 80049d0:	2b50      	cmp	r3, #80	; 0x50
 80049d2:	d873      	bhi.n	8004abc <HAL_TIM_ConfigClockSource+0x168>
 80049d4:	2b40      	cmp	r3, #64	; 0x40
 80049d6:	d058      	beq.n	8004a8a <HAL_TIM_ConfigClockSource+0x136>
 80049d8:	2b40      	cmp	r3, #64	; 0x40
 80049da:	d86f      	bhi.n	8004abc <HAL_TIM_ConfigClockSource+0x168>
 80049dc:	2b30      	cmp	r3, #48	; 0x30
 80049de:	d064      	beq.n	8004aaa <HAL_TIM_ConfigClockSource+0x156>
 80049e0:	2b30      	cmp	r3, #48	; 0x30
 80049e2:	d86b      	bhi.n	8004abc <HAL_TIM_ConfigClockSource+0x168>
 80049e4:	2b20      	cmp	r3, #32
 80049e6:	d060      	beq.n	8004aaa <HAL_TIM_ConfigClockSource+0x156>
 80049e8:	2b20      	cmp	r3, #32
 80049ea:	d867      	bhi.n	8004abc <HAL_TIM_ConfigClockSource+0x168>
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d05c      	beq.n	8004aaa <HAL_TIM_ConfigClockSource+0x156>
 80049f0:	2b10      	cmp	r3, #16
 80049f2:	d05a      	beq.n	8004aaa <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80049f4:	e062      	b.n	8004abc <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6818      	ldr	r0, [r3, #0]
 80049fa:	683b      	ldr	r3, [r7, #0]
 80049fc:	6899      	ldr	r1, [r3, #8]
 80049fe:	683b      	ldr	r3, [r7, #0]
 8004a00:	685a      	ldr	r2, [r3, #4]
 8004a02:	683b      	ldr	r3, [r7, #0]
 8004a04:	68db      	ldr	r3, [r3, #12]
 8004a06:	f000 fc85 	bl	8005314 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	689b      	ldr	r3, [r3, #8]
 8004a10:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004a18:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	68fa      	ldr	r2, [r7, #12]
 8004a20:	609a      	str	r2, [r3, #8]
      break;
 8004a22:	e04e      	b.n	8004ac2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6818      	ldr	r0, [r3, #0]
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	6899      	ldr	r1, [r3, #8]
 8004a2c:	683b      	ldr	r3, [r7, #0]
 8004a2e:	685a      	ldr	r2, [r3, #4]
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	68db      	ldr	r3, [r3, #12]
 8004a34:	f000 fc6e 	bl	8005314 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	689a      	ldr	r2, [r3, #8]
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004a46:	609a      	str	r2, [r3, #8]
      break;
 8004a48:	e03b      	b.n	8004ac2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6818      	ldr	r0, [r3, #0]
 8004a4e:	683b      	ldr	r3, [r7, #0]
 8004a50:	6859      	ldr	r1, [r3, #4]
 8004a52:	683b      	ldr	r3, [r7, #0]
 8004a54:	68db      	ldr	r3, [r3, #12]
 8004a56:	461a      	mov	r2, r3
 8004a58:	f000 fb2c 	bl	80050b4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	2150      	movs	r1, #80	; 0x50
 8004a62:	4618      	mov	r0, r3
 8004a64:	f000 fc3b 	bl	80052de <TIM_ITRx_SetConfig>
      break;
 8004a68:	e02b      	b.n	8004ac2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6818      	ldr	r0, [r3, #0]
 8004a6e:	683b      	ldr	r3, [r7, #0]
 8004a70:	6859      	ldr	r1, [r3, #4]
 8004a72:	683b      	ldr	r3, [r7, #0]
 8004a74:	68db      	ldr	r3, [r3, #12]
 8004a76:	461a      	mov	r2, r3
 8004a78:	f000 fb88 	bl	800518c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	2160      	movs	r1, #96	; 0x60
 8004a82:	4618      	mov	r0, r3
 8004a84:	f000 fc2b 	bl	80052de <TIM_ITRx_SetConfig>
      break;
 8004a88:	e01b      	b.n	8004ac2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6818      	ldr	r0, [r3, #0]
 8004a8e:	683b      	ldr	r3, [r7, #0]
 8004a90:	6859      	ldr	r1, [r3, #4]
 8004a92:	683b      	ldr	r3, [r7, #0]
 8004a94:	68db      	ldr	r3, [r3, #12]
 8004a96:	461a      	mov	r2, r3
 8004a98:	f000 fb0c 	bl	80050b4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	2140      	movs	r1, #64	; 0x40
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	f000 fc1b 	bl	80052de <TIM_ITRx_SetConfig>
      break;
 8004aa8:	e00b      	b.n	8004ac2 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681a      	ldr	r2, [r3, #0]
 8004aae:	683b      	ldr	r3, [r7, #0]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	4619      	mov	r1, r3
 8004ab4:	4610      	mov	r0, r2
 8004ab6:	f000 fc12 	bl	80052de <TIM_ITRx_SetConfig>
        break;
 8004aba:	e002      	b.n	8004ac2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004abc:	bf00      	nop
 8004abe:	e000      	b.n	8004ac2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004ac0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	2201      	movs	r2, #1
 8004ac6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	2200      	movs	r2, #0
 8004ace:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004ad2:	2300      	movs	r3, #0
}
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	3710      	adds	r7, #16
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	bd80      	pop	{r7, pc}

08004adc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004adc:	b480      	push	{r7}
 8004ade:	b083      	sub	sp, #12
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004ae4:	bf00      	nop
 8004ae6:	370c      	adds	r7, #12
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aee:	4770      	bx	lr

08004af0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004af0:	b480      	push	{r7}
 8004af2:	b083      	sub	sp, #12
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004af8:	bf00      	nop
 8004afa:	370c      	adds	r7, #12
 8004afc:	46bd      	mov	sp, r7
 8004afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b02:	4770      	bx	lr

08004b04 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004b04:	b480      	push	{r7}
 8004b06:	b083      	sub	sp, #12
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004b0c:	bf00      	nop
 8004b0e:	370c      	adds	r7, #12
 8004b10:	46bd      	mov	sp, r7
 8004b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b16:	4770      	bx	lr

08004b18 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004b18:	b480      	push	{r7}
 8004b1a:	b083      	sub	sp, #12
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004b20:	bf00      	nop
 8004b22:	370c      	adds	r7, #12
 8004b24:	46bd      	mov	sp, r7
 8004b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2a:	4770      	bx	lr

08004b2c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004b2c:	b480      	push	{r7}
 8004b2e:	b085      	sub	sp, #20
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
 8004b34:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	4a40      	ldr	r2, [pc, #256]	; (8004c40 <TIM_Base_SetConfig+0x114>)
 8004b40:	4293      	cmp	r3, r2
 8004b42:	d013      	beq.n	8004b6c <TIM_Base_SetConfig+0x40>
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b4a:	d00f      	beq.n	8004b6c <TIM_Base_SetConfig+0x40>
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	4a3d      	ldr	r2, [pc, #244]	; (8004c44 <TIM_Base_SetConfig+0x118>)
 8004b50:	4293      	cmp	r3, r2
 8004b52:	d00b      	beq.n	8004b6c <TIM_Base_SetConfig+0x40>
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	4a3c      	ldr	r2, [pc, #240]	; (8004c48 <TIM_Base_SetConfig+0x11c>)
 8004b58:	4293      	cmp	r3, r2
 8004b5a:	d007      	beq.n	8004b6c <TIM_Base_SetConfig+0x40>
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	4a3b      	ldr	r2, [pc, #236]	; (8004c4c <TIM_Base_SetConfig+0x120>)
 8004b60:	4293      	cmp	r3, r2
 8004b62:	d003      	beq.n	8004b6c <TIM_Base_SetConfig+0x40>
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	4a3a      	ldr	r2, [pc, #232]	; (8004c50 <TIM_Base_SetConfig+0x124>)
 8004b68:	4293      	cmp	r3, r2
 8004b6a:	d108      	bne.n	8004b7e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b72:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004b74:	683b      	ldr	r3, [r7, #0]
 8004b76:	685b      	ldr	r3, [r3, #4]
 8004b78:	68fa      	ldr	r2, [r7, #12]
 8004b7a:	4313      	orrs	r3, r2
 8004b7c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	4a2f      	ldr	r2, [pc, #188]	; (8004c40 <TIM_Base_SetConfig+0x114>)
 8004b82:	4293      	cmp	r3, r2
 8004b84:	d02b      	beq.n	8004bde <TIM_Base_SetConfig+0xb2>
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b8c:	d027      	beq.n	8004bde <TIM_Base_SetConfig+0xb2>
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	4a2c      	ldr	r2, [pc, #176]	; (8004c44 <TIM_Base_SetConfig+0x118>)
 8004b92:	4293      	cmp	r3, r2
 8004b94:	d023      	beq.n	8004bde <TIM_Base_SetConfig+0xb2>
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	4a2b      	ldr	r2, [pc, #172]	; (8004c48 <TIM_Base_SetConfig+0x11c>)
 8004b9a:	4293      	cmp	r3, r2
 8004b9c:	d01f      	beq.n	8004bde <TIM_Base_SetConfig+0xb2>
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	4a2a      	ldr	r2, [pc, #168]	; (8004c4c <TIM_Base_SetConfig+0x120>)
 8004ba2:	4293      	cmp	r3, r2
 8004ba4:	d01b      	beq.n	8004bde <TIM_Base_SetConfig+0xb2>
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	4a29      	ldr	r2, [pc, #164]	; (8004c50 <TIM_Base_SetConfig+0x124>)
 8004baa:	4293      	cmp	r3, r2
 8004bac:	d017      	beq.n	8004bde <TIM_Base_SetConfig+0xb2>
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	4a28      	ldr	r2, [pc, #160]	; (8004c54 <TIM_Base_SetConfig+0x128>)
 8004bb2:	4293      	cmp	r3, r2
 8004bb4:	d013      	beq.n	8004bde <TIM_Base_SetConfig+0xb2>
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	4a27      	ldr	r2, [pc, #156]	; (8004c58 <TIM_Base_SetConfig+0x12c>)
 8004bba:	4293      	cmp	r3, r2
 8004bbc:	d00f      	beq.n	8004bde <TIM_Base_SetConfig+0xb2>
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	4a26      	ldr	r2, [pc, #152]	; (8004c5c <TIM_Base_SetConfig+0x130>)
 8004bc2:	4293      	cmp	r3, r2
 8004bc4:	d00b      	beq.n	8004bde <TIM_Base_SetConfig+0xb2>
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	4a25      	ldr	r2, [pc, #148]	; (8004c60 <TIM_Base_SetConfig+0x134>)
 8004bca:	4293      	cmp	r3, r2
 8004bcc:	d007      	beq.n	8004bde <TIM_Base_SetConfig+0xb2>
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	4a24      	ldr	r2, [pc, #144]	; (8004c64 <TIM_Base_SetConfig+0x138>)
 8004bd2:	4293      	cmp	r3, r2
 8004bd4:	d003      	beq.n	8004bde <TIM_Base_SetConfig+0xb2>
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	4a23      	ldr	r2, [pc, #140]	; (8004c68 <TIM_Base_SetConfig+0x13c>)
 8004bda:	4293      	cmp	r3, r2
 8004bdc:	d108      	bne.n	8004bf0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004be4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004be6:	683b      	ldr	r3, [r7, #0]
 8004be8:	68db      	ldr	r3, [r3, #12]
 8004bea:	68fa      	ldr	r2, [r7, #12]
 8004bec:	4313      	orrs	r3, r2
 8004bee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004bf6:	683b      	ldr	r3, [r7, #0]
 8004bf8:	695b      	ldr	r3, [r3, #20]
 8004bfa:	4313      	orrs	r3, r2
 8004bfc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	68fa      	ldr	r2, [r7, #12]
 8004c02:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	689a      	ldr	r2, [r3, #8]
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	681a      	ldr	r2, [r3, #0]
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	4a0a      	ldr	r2, [pc, #40]	; (8004c40 <TIM_Base_SetConfig+0x114>)
 8004c18:	4293      	cmp	r3, r2
 8004c1a:	d003      	beq.n	8004c24 <TIM_Base_SetConfig+0xf8>
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	4a0c      	ldr	r2, [pc, #48]	; (8004c50 <TIM_Base_SetConfig+0x124>)
 8004c20:	4293      	cmp	r3, r2
 8004c22:	d103      	bne.n	8004c2c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004c24:	683b      	ldr	r3, [r7, #0]
 8004c26:	691a      	ldr	r2, [r3, #16]
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2201      	movs	r2, #1
 8004c30:	615a      	str	r2, [r3, #20]
}
 8004c32:	bf00      	nop
 8004c34:	3714      	adds	r7, #20
 8004c36:	46bd      	mov	sp, r7
 8004c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3c:	4770      	bx	lr
 8004c3e:	bf00      	nop
 8004c40:	40010000 	.word	0x40010000
 8004c44:	40000400 	.word	0x40000400
 8004c48:	40000800 	.word	0x40000800
 8004c4c:	40000c00 	.word	0x40000c00
 8004c50:	40010400 	.word	0x40010400
 8004c54:	40014000 	.word	0x40014000
 8004c58:	40014400 	.word	0x40014400
 8004c5c:	40014800 	.word	0x40014800
 8004c60:	40001800 	.word	0x40001800
 8004c64:	40001c00 	.word	0x40001c00
 8004c68:	40002000 	.word	0x40002000

08004c6c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004c6c:	b480      	push	{r7}
 8004c6e:	b087      	sub	sp, #28
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
 8004c74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6a1b      	ldr	r3, [r3, #32]
 8004c7a:	f023 0201 	bic.w	r2, r3, #1
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6a1b      	ldr	r3, [r3, #32]
 8004c86:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	685b      	ldr	r3, [r3, #4]
 8004c8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	699b      	ldr	r3, [r3, #24]
 8004c92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	f023 0303 	bic.w	r3, r3, #3
 8004ca2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004ca4:	683b      	ldr	r3, [r7, #0]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	68fa      	ldr	r2, [r7, #12]
 8004caa:	4313      	orrs	r3, r2
 8004cac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004cae:	697b      	ldr	r3, [r7, #20]
 8004cb0:	f023 0302 	bic.w	r3, r3, #2
 8004cb4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004cb6:	683b      	ldr	r3, [r7, #0]
 8004cb8:	689b      	ldr	r3, [r3, #8]
 8004cba:	697a      	ldr	r2, [r7, #20]
 8004cbc:	4313      	orrs	r3, r2
 8004cbe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	4a20      	ldr	r2, [pc, #128]	; (8004d44 <TIM_OC1_SetConfig+0xd8>)
 8004cc4:	4293      	cmp	r3, r2
 8004cc6:	d003      	beq.n	8004cd0 <TIM_OC1_SetConfig+0x64>
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	4a1f      	ldr	r2, [pc, #124]	; (8004d48 <TIM_OC1_SetConfig+0xdc>)
 8004ccc:	4293      	cmp	r3, r2
 8004cce:	d10c      	bne.n	8004cea <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004cd0:	697b      	ldr	r3, [r7, #20]
 8004cd2:	f023 0308 	bic.w	r3, r3, #8
 8004cd6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	68db      	ldr	r3, [r3, #12]
 8004cdc:	697a      	ldr	r2, [r7, #20]
 8004cde:	4313      	orrs	r3, r2
 8004ce0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004ce2:	697b      	ldr	r3, [r7, #20]
 8004ce4:	f023 0304 	bic.w	r3, r3, #4
 8004ce8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	4a15      	ldr	r2, [pc, #84]	; (8004d44 <TIM_OC1_SetConfig+0xd8>)
 8004cee:	4293      	cmp	r3, r2
 8004cf0:	d003      	beq.n	8004cfa <TIM_OC1_SetConfig+0x8e>
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	4a14      	ldr	r2, [pc, #80]	; (8004d48 <TIM_OC1_SetConfig+0xdc>)
 8004cf6:	4293      	cmp	r3, r2
 8004cf8:	d111      	bne.n	8004d1e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004cfa:	693b      	ldr	r3, [r7, #16]
 8004cfc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004d00:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004d02:	693b      	ldr	r3, [r7, #16]
 8004d04:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004d08:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004d0a:	683b      	ldr	r3, [r7, #0]
 8004d0c:	695b      	ldr	r3, [r3, #20]
 8004d0e:	693a      	ldr	r2, [r7, #16]
 8004d10:	4313      	orrs	r3, r2
 8004d12:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004d14:	683b      	ldr	r3, [r7, #0]
 8004d16:	699b      	ldr	r3, [r3, #24]
 8004d18:	693a      	ldr	r2, [r7, #16]
 8004d1a:	4313      	orrs	r3, r2
 8004d1c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	693a      	ldr	r2, [r7, #16]
 8004d22:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	68fa      	ldr	r2, [r7, #12]
 8004d28:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004d2a:	683b      	ldr	r3, [r7, #0]
 8004d2c:	685a      	ldr	r2, [r3, #4]
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	697a      	ldr	r2, [r7, #20]
 8004d36:	621a      	str	r2, [r3, #32]
}
 8004d38:	bf00      	nop
 8004d3a:	371c      	adds	r7, #28
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d42:	4770      	bx	lr
 8004d44:	40010000 	.word	0x40010000
 8004d48:	40010400 	.word	0x40010400

08004d4c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004d4c:	b480      	push	{r7}
 8004d4e:	b087      	sub	sp, #28
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	6078      	str	r0, [r7, #4]
 8004d54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	6a1b      	ldr	r3, [r3, #32]
 8004d5a:	f023 0210 	bic.w	r2, r3, #16
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6a1b      	ldr	r3, [r3, #32]
 8004d66:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	685b      	ldr	r3, [r3, #4]
 8004d6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	699b      	ldr	r3, [r3, #24]
 8004d72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d82:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004d84:	683b      	ldr	r3, [r7, #0]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	021b      	lsls	r3, r3, #8
 8004d8a:	68fa      	ldr	r2, [r7, #12]
 8004d8c:	4313      	orrs	r3, r2
 8004d8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004d90:	697b      	ldr	r3, [r7, #20]
 8004d92:	f023 0320 	bic.w	r3, r3, #32
 8004d96:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004d98:	683b      	ldr	r3, [r7, #0]
 8004d9a:	689b      	ldr	r3, [r3, #8]
 8004d9c:	011b      	lsls	r3, r3, #4
 8004d9e:	697a      	ldr	r2, [r7, #20]
 8004da0:	4313      	orrs	r3, r2
 8004da2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	4a22      	ldr	r2, [pc, #136]	; (8004e30 <TIM_OC2_SetConfig+0xe4>)
 8004da8:	4293      	cmp	r3, r2
 8004daa:	d003      	beq.n	8004db4 <TIM_OC2_SetConfig+0x68>
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	4a21      	ldr	r2, [pc, #132]	; (8004e34 <TIM_OC2_SetConfig+0xe8>)
 8004db0:	4293      	cmp	r3, r2
 8004db2:	d10d      	bne.n	8004dd0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004db4:	697b      	ldr	r3, [r7, #20]
 8004db6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004dba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004dbc:	683b      	ldr	r3, [r7, #0]
 8004dbe:	68db      	ldr	r3, [r3, #12]
 8004dc0:	011b      	lsls	r3, r3, #4
 8004dc2:	697a      	ldr	r2, [r7, #20]
 8004dc4:	4313      	orrs	r3, r2
 8004dc6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004dc8:	697b      	ldr	r3, [r7, #20]
 8004dca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004dce:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	4a17      	ldr	r2, [pc, #92]	; (8004e30 <TIM_OC2_SetConfig+0xe4>)
 8004dd4:	4293      	cmp	r3, r2
 8004dd6:	d003      	beq.n	8004de0 <TIM_OC2_SetConfig+0x94>
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	4a16      	ldr	r2, [pc, #88]	; (8004e34 <TIM_OC2_SetConfig+0xe8>)
 8004ddc:	4293      	cmp	r3, r2
 8004dde:	d113      	bne.n	8004e08 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004de0:	693b      	ldr	r3, [r7, #16]
 8004de2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004de6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004de8:	693b      	ldr	r3, [r7, #16]
 8004dea:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004dee:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	695b      	ldr	r3, [r3, #20]
 8004df4:	009b      	lsls	r3, r3, #2
 8004df6:	693a      	ldr	r2, [r7, #16]
 8004df8:	4313      	orrs	r3, r2
 8004dfa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004dfc:	683b      	ldr	r3, [r7, #0]
 8004dfe:	699b      	ldr	r3, [r3, #24]
 8004e00:	009b      	lsls	r3, r3, #2
 8004e02:	693a      	ldr	r2, [r7, #16]
 8004e04:	4313      	orrs	r3, r2
 8004e06:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	693a      	ldr	r2, [r7, #16]
 8004e0c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	68fa      	ldr	r2, [r7, #12]
 8004e12:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004e14:	683b      	ldr	r3, [r7, #0]
 8004e16:	685a      	ldr	r2, [r3, #4]
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	697a      	ldr	r2, [r7, #20]
 8004e20:	621a      	str	r2, [r3, #32]
}
 8004e22:	bf00      	nop
 8004e24:	371c      	adds	r7, #28
 8004e26:	46bd      	mov	sp, r7
 8004e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2c:	4770      	bx	lr
 8004e2e:	bf00      	nop
 8004e30:	40010000 	.word	0x40010000
 8004e34:	40010400 	.word	0x40010400

08004e38 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004e38:	b480      	push	{r7}
 8004e3a:	b087      	sub	sp, #28
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	6078      	str	r0, [r7, #4]
 8004e40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6a1b      	ldr	r3, [r3, #32]
 8004e46:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	6a1b      	ldr	r3, [r3, #32]
 8004e52:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	685b      	ldr	r3, [r3, #4]
 8004e58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	69db      	ldr	r3, [r3, #28]
 8004e5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	f023 0303 	bic.w	r3, r3, #3
 8004e6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004e70:	683b      	ldr	r3, [r7, #0]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	68fa      	ldr	r2, [r7, #12]
 8004e76:	4313      	orrs	r3, r2
 8004e78:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004e7a:	697b      	ldr	r3, [r7, #20]
 8004e7c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004e80:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004e82:	683b      	ldr	r3, [r7, #0]
 8004e84:	689b      	ldr	r3, [r3, #8]
 8004e86:	021b      	lsls	r3, r3, #8
 8004e88:	697a      	ldr	r2, [r7, #20]
 8004e8a:	4313      	orrs	r3, r2
 8004e8c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	4a21      	ldr	r2, [pc, #132]	; (8004f18 <TIM_OC3_SetConfig+0xe0>)
 8004e92:	4293      	cmp	r3, r2
 8004e94:	d003      	beq.n	8004e9e <TIM_OC3_SetConfig+0x66>
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	4a20      	ldr	r2, [pc, #128]	; (8004f1c <TIM_OC3_SetConfig+0xe4>)
 8004e9a:	4293      	cmp	r3, r2
 8004e9c:	d10d      	bne.n	8004eba <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004e9e:	697b      	ldr	r3, [r7, #20]
 8004ea0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004ea4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004ea6:	683b      	ldr	r3, [r7, #0]
 8004ea8:	68db      	ldr	r3, [r3, #12]
 8004eaa:	021b      	lsls	r3, r3, #8
 8004eac:	697a      	ldr	r2, [r7, #20]
 8004eae:	4313      	orrs	r3, r2
 8004eb0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004eb2:	697b      	ldr	r3, [r7, #20]
 8004eb4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004eb8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	4a16      	ldr	r2, [pc, #88]	; (8004f18 <TIM_OC3_SetConfig+0xe0>)
 8004ebe:	4293      	cmp	r3, r2
 8004ec0:	d003      	beq.n	8004eca <TIM_OC3_SetConfig+0x92>
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	4a15      	ldr	r2, [pc, #84]	; (8004f1c <TIM_OC3_SetConfig+0xe4>)
 8004ec6:	4293      	cmp	r3, r2
 8004ec8:	d113      	bne.n	8004ef2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004eca:	693b      	ldr	r3, [r7, #16]
 8004ecc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004ed0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004ed2:	693b      	ldr	r3, [r7, #16]
 8004ed4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004ed8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004eda:	683b      	ldr	r3, [r7, #0]
 8004edc:	695b      	ldr	r3, [r3, #20]
 8004ede:	011b      	lsls	r3, r3, #4
 8004ee0:	693a      	ldr	r2, [r7, #16]
 8004ee2:	4313      	orrs	r3, r2
 8004ee4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004ee6:	683b      	ldr	r3, [r7, #0]
 8004ee8:	699b      	ldr	r3, [r3, #24]
 8004eea:	011b      	lsls	r3, r3, #4
 8004eec:	693a      	ldr	r2, [r7, #16]
 8004eee:	4313      	orrs	r3, r2
 8004ef0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	693a      	ldr	r2, [r7, #16]
 8004ef6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	68fa      	ldr	r2, [r7, #12]
 8004efc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004efe:	683b      	ldr	r3, [r7, #0]
 8004f00:	685a      	ldr	r2, [r3, #4]
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	697a      	ldr	r2, [r7, #20]
 8004f0a:	621a      	str	r2, [r3, #32]
}
 8004f0c:	bf00      	nop
 8004f0e:	371c      	adds	r7, #28
 8004f10:	46bd      	mov	sp, r7
 8004f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f16:	4770      	bx	lr
 8004f18:	40010000 	.word	0x40010000
 8004f1c:	40010400 	.word	0x40010400

08004f20 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004f20:	b480      	push	{r7}
 8004f22:	b087      	sub	sp, #28
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	6078      	str	r0, [r7, #4]
 8004f28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6a1b      	ldr	r3, [r3, #32]
 8004f2e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	6a1b      	ldr	r3, [r3, #32]
 8004f3a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	685b      	ldr	r3, [r3, #4]
 8004f40:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	69db      	ldr	r3, [r3, #28]
 8004f46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f56:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004f58:	683b      	ldr	r3, [r7, #0]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	021b      	lsls	r3, r3, #8
 8004f5e:	68fa      	ldr	r2, [r7, #12]
 8004f60:	4313      	orrs	r3, r2
 8004f62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004f64:	693b      	ldr	r3, [r7, #16]
 8004f66:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004f6a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004f6c:	683b      	ldr	r3, [r7, #0]
 8004f6e:	689b      	ldr	r3, [r3, #8]
 8004f70:	031b      	lsls	r3, r3, #12
 8004f72:	693a      	ldr	r2, [r7, #16]
 8004f74:	4313      	orrs	r3, r2
 8004f76:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	4a12      	ldr	r2, [pc, #72]	; (8004fc4 <TIM_OC4_SetConfig+0xa4>)
 8004f7c:	4293      	cmp	r3, r2
 8004f7e:	d003      	beq.n	8004f88 <TIM_OC4_SetConfig+0x68>
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	4a11      	ldr	r2, [pc, #68]	; (8004fc8 <TIM_OC4_SetConfig+0xa8>)
 8004f84:	4293      	cmp	r3, r2
 8004f86:	d109      	bne.n	8004f9c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004f88:	697b      	ldr	r3, [r7, #20]
 8004f8a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004f8e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	695b      	ldr	r3, [r3, #20]
 8004f94:	019b      	lsls	r3, r3, #6
 8004f96:	697a      	ldr	r2, [r7, #20]
 8004f98:	4313      	orrs	r3, r2
 8004f9a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	697a      	ldr	r2, [r7, #20]
 8004fa0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	68fa      	ldr	r2, [r7, #12]
 8004fa6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	685a      	ldr	r2, [r3, #4]
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	693a      	ldr	r2, [r7, #16]
 8004fb4:	621a      	str	r2, [r3, #32]
}
 8004fb6:	bf00      	nop
 8004fb8:	371c      	adds	r7, #28
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc0:	4770      	bx	lr
 8004fc2:	bf00      	nop
 8004fc4:	40010000 	.word	0x40010000
 8004fc8:	40010400 	.word	0x40010400

08004fcc <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004fcc:	b480      	push	{r7}
 8004fce:	b087      	sub	sp, #28
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	60f8      	str	r0, [r7, #12]
 8004fd4:	60b9      	str	r1, [r7, #8]
 8004fd6:	607a      	str	r2, [r7, #4]
 8004fd8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	6a1b      	ldr	r3, [r3, #32]
 8004fde:	f023 0201 	bic.w	r2, r3, #1
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	699b      	ldr	r3, [r3, #24]
 8004fea:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	6a1b      	ldr	r3, [r3, #32]
 8004ff0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	4a28      	ldr	r2, [pc, #160]	; (8005098 <TIM_TI1_SetConfig+0xcc>)
 8004ff6:	4293      	cmp	r3, r2
 8004ff8:	d01b      	beq.n	8005032 <TIM_TI1_SetConfig+0x66>
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005000:	d017      	beq.n	8005032 <TIM_TI1_SetConfig+0x66>
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	4a25      	ldr	r2, [pc, #148]	; (800509c <TIM_TI1_SetConfig+0xd0>)
 8005006:	4293      	cmp	r3, r2
 8005008:	d013      	beq.n	8005032 <TIM_TI1_SetConfig+0x66>
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	4a24      	ldr	r2, [pc, #144]	; (80050a0 <TIM_TI1_SetConfig+0xd4>)
 800500e:	4293      	cmp	r3, r2
 8005010:	d00f      	beq.n	8005032 <TIM_TI1_SetConfig+0x66>
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	4a23      	ldr	r2, [pc, #140]	; (80050a4 <TIM_TI1_SetConfig+0xd8>)
 8005016:	4293      	cmp	r3, r2
 8005018:	d00b      	beq.n	8005032 <TIM_TI1_SetConfig+0x66>
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	4a22      	ldr	r2, [pc, #136]	; (80050a8 <TIM_TI1_SetConfig+0xdc>)
 800501e:	4293      	cmp	r3, r2
 8005020:	d007      	beq.n	8005032 <TIM_TI1_SetConfig+0x66>
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	4a21      	ldr	r2, [pc, #132]	; (80050ac <TIM_TI1_SetConfig+0xe0>)
 8005026:	4293      	cmp	r3, r2
 8005028:	d003      	beq.n	8005032 <TIM_TI1_SetConfig+0x66>
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	4a20      	ldr	r2, [pc, #128]	; (80050b0 <TIM_TI1_SetConfig+0xe4>)
 800502e:	4293      	cmp	r3, r2
 8005030:	d101      	bne.n	8005036 <TIM_TI1_SetConfig+0x6a>
 8005032:	2301      	movs	r3, #1
 8005034:	e000      	b.n	8005038 <TIM_TI1_SetConfig+0x6c>
 8005036:	2300      	movs	r3, #0
 8005038:	2b00      	cmp	r3, #0
 800503a:	d008      	beq.n	800504e <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800503c:	697b      	ldr	r3, [r7, #20]
 800503e:	f023 0303 	bic.w	r3, r3, #3
 8005042:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005044:	697a      	ldr	r2, [r7, #20]
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	4313      	orrs	r3, r2
 800504a:	617b      	str	r3, [r7, #20]
 800504c:	e003      	b.n	8005056 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800504e:	697b      	ldr	r3, [r7, #20]
 8005050:	f043 0301 	orr.w	r3, r3, #1
 8005054:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005056:	697b      	ldr	r3, [r7, #20]
 8005058:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800505c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800505e:	683b      	ldr	r3, [r7, #0]
 8005060:	011b      	lsls	r3, r3, #4
 8005062:	b2db      	uxtb	r3, r3
 8005064:	697a      	ldr	r2, [r7, #20]
 8005066:	4313      	orrs	r3, r2
 8005068:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800506a:	693b      	ldr	r3, [r7, #16]
 800506c:	f023 030a 	bic.w	r3, r3, #10
 8005070:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8005072:	68bb      	ldr	r3, [r7, #8]
 8005074:	f003 030a 	and.w	r3, r3, #10
 8005078:	693a      	ldr	r2, [r7, #16]
 800507a:	4313      	orrs	r3, r2
 800507c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	697a      	ldr	r2, [r7, #20]
 8005082:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	693a      	ldr	r2, [r7, #16]
 8005088:	621a      	str	r2, [r3, #32]
}
 800508a:	bf00      	nop
 800508c:	371c      	adds	r7, #28
 800508e:	46bd      	mov	sp, r7
 8005090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005094:	4770      	bx	lr
 8005096:	bf00      	nop
 8005098:	40010000 	.word	0x40010000
 800509c:	40000400 	.word	0x40000400
 80050a0:	40000800 	.word	0x40000800
 80050a4:	40000c00 	.word	0x40000c00
 80050a8:	40010400 	.word	0x40010400
 80050ac:	40014000 	.word	0x40014000
 80050b0:	40001800 	.word	0x40001800

080050b4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80050b4:	b480      	push	{r7}
 80050b6:	b087      	sub	sp, #28
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	60f8      	str	r0, [r7, #12]
 80050bc:	60b9      	str	r1, [r7, #8]
 80050be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	6a1b      	ldr	r3, [r3, #32]
 80050c4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	6a1b      	ldr	r3, [r3, #32]
 80050ca:	f023 0201 	bic.w	r2, r3, #1
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	699b      	ldr	r3, [r3, #24]
 80050d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80050d8:	693b      	ldr	r3, [r7, #16]
 80050da:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80050de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	011b      	lsls	r3, r3, #4
 80050e4:	693a      	ldr	r2, [r7, #16]
 80050e6:	4313      	orrs	r3, r2
 80050e8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80050ea:	697b      	ldr	r3, [r7, #20]
 80050ec:	f023 030a 	bic.w	r3, r3, #10
 80050f0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80050f2:	697a      	ldr	r2, [r7, #20]
 80050f4:	68bb      	ldr	r3, [r7, #8]
 80050f6:	4313      	orrs	r3, r2
 80050f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	693a      	ldr	r2, [r7, #16]
 80050fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	697a      	ldr	r2, [r7, #20]
 8005104:	621a      	str	r2, [r3, #32]
}
 8005106:	bf00      	nop
 8005108:	371c      	adds	r7, #28
 800510a:	46bd      	mov	sp, r7
 800510c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005110:	4770      	bx	lr

08005112 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005112:	b480      	push	{r7}
 8005114:	b087      	sub	sp, #28
 8005116:	af00      	add	r7, sp, #0
 8005118:	60f8      	str	r0, [r7, #12]
 800511a:	60b9      	str	r1, [r7, #8]
 800511c:	607a      	str	r2, [r7, #4]
 800511e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	6a1b      	ldr	r3, [r3, #32]
 8005124:	f023 0210 	bic.w	r2, r3, #16
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	699b      	ldr	r3, [r3, #24]
 8005130:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	6a1b      	ldr	r3, [r3, #32]
 8005136:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8005138:	697b      	ldr	r3, [r7, #20]
 800513a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800513e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	021b      	lsls	r3, r3, #8
 8005144:	697a      	ldr	r2, [r7, #20]
 8005146:	4313      	orrs	r3, r2
 8005148:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800514a:	697b      	ldr	r3, [r7, #20]
 800514c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005150:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8005152:	683b      	ldr	r3, [r7, #0]
 8005154:	031b      	lsls	r3, r3, #12
 8005156:	b29b      	uxth	r3, r3
 8005158:	697a      	ldr	r2, [r7, #20]
 800515a:	4313      	orrs	r3, r2
 800515c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800515e:	693b      	ldr	r3, [r7, #16]
 8005160:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005164:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8005166:	68bb      	ldr	r3, [r7, #8]
 8005168:	011b      	lsls	r3, r3, #4
 800516a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800516e:	693a      	ldr	r2, [r7, #16]
 8005170:	4313      	orrs	r3, r2
 8005172:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	697a      	ldr	r2, [r7, #20]
 8005178:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	693a      	ldr	r2, [r7, #16]
 800517e:	621a      	str	r2, [r3, #32]
}
 8005180:	bf00      	nop
 8005182:	371c      	adds	r7, #28
 8005184:	46bd      	mov	sp, r7
 8005186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518a:	4770      	bx	lr

0800518c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800518c:	b480      	push	{r7}
 800518e:	b087      	sub	sp, #28
 8005190:	af00      	add	r7, sp, #0
 8005192:	60f8      	str	r0, [r7, #12]
 8005194:	60b9      	str	r1, [r7, #8]
 8005196:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	6a1b      	ldr	r3, [r3, #32]
 800519c:	f023 0210 	bic.w	r2, r3, #16
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	699b      	ldr	r3, [r3, #24]
 80051a8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	6a1b      	ldr	r3, [r3, #32]
 80051ae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80051b0:	697b      	ldr	r3, [r7, #20]
 80051b2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80051b6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	031b      	lsls	r3, r3, #12
 80051bc:	697a      	ldr	r2, [r7, #20]
 80051be:	4313      	orrs	r3, r2
 80051c0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80051c2:	693b      	ldr	r3, [r7, #16]
 80051c4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80051c8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80051ca:	68bb      	ldr	r3, [r7, #8]
 80051cc:	011b      	lsls	r3, r3, #4
 80051ce:	693a      	ldr	r2, [r7, #16]
 80051d0:	4313      	orrs	r3, r2
 80051d2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	697a      	ldr	r2, [r7, #20]
 80051d8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	693a      	ldr	r2, [r7, #16]
 80051de:	621a      	str	r2, [r3, #32]
}
 80051e0:	bf00      	nop
 80051e2:	371c      	adds	r7, #28
 80051e4:	46bd      	mov	sp, r7
 80051e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ea:	4770      	bx	lr

080051ec <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80051ec:	b480      	push	{r7}
 80051ee:	b087      	sub	sp, #28
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	60f8      	str	r0, [r7, #12]
 80051f4:	60b9      	str	r1, [r7, #8]
 80051f6:	607a      	str	r2, [r7, #4]
 80051f8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	6a1b      	ldr	r3, [r3, #32]
 80051fe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	69db      	ldr	r3, [r3, #28]
 800520a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	6a1b      	ldr	r3, [r3, #32]
 8005210:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8005212:	697b      	ldr	r3, [r7, #20]
 8005214:	f023 0303 	bic.w	r3, r3, #3
 8005218:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800521a:	697a      	ldr	r2, [r7, #20]
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	4313      	orrs	r3, r2
 8005220:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8005222:	697b      	ldr	r3, [r7, #20]
 8005224:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005228:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800522a:	683b      	ldr	r3, [r7, #0]
 800522c:	011b      	lsls	r3, r3, #4
 800522e:	b2db      	uxtb	r3, r3
 8005230:	697a      	ldr	r2, [r7, #20]
 8005232:	4313      	orrs	r3, r2
 8005234:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8005236:	693b      	ldr	r3, [r7, #16]
 8005238:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800523c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800523e:	68bb      	ldr	r3, [r7, #8]
 8005240:	021b      	lsls	r3, r3, #8
 8005242:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8005246:	693a      	ldr	r2, [r7, #16]
 8005248:	4313      	orrs	r3, r2
 800524a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	697a      	ldr	r2, [r7, #20]
 8005250:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	693a      	ldr	r2, [r7, #16]
 8005256:	621a      	str	r2, [r3, #32]
}
 8005258:	bf00      	nop
 800525a:	371c      	adds	r7, #28
 800525c:	46bd      	mov	sp, r7
 800525e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005262:	4770      	bx	lr

08005264 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005264:	b480      	push	{r7}
 8005266:	b087      	sub	sp, #28
 8005268:	af00      	add	r7, sp, #0
 800526a:	60f8      	str	r0, [r7, #12]
 800526c:	60b9      	str	r1, [r7, #8]
 800526e:	607a      	str	r2, [r7, #4]
 8005270:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	6a1b      	ldr	r3, [r3, #32]
 8005276:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	69db      	ldr	r3, [r3, #28]
 8005282:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	6a1b      	ldr	r3, [r3, #32]
 8005288:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800528a:	697b      	ldr	r3, [r7, #20]
 800528c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005290:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	021b      	lsls	r3, r3, #8
 8005296:	697a      	ldr	r2, [r7, #20]
 8005298:	4313      	orrs	r3, r2
 800529a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800529c:	697b      	ldr	r3, [r7, #20]
 800529e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80052a2:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	031b      	lsls	r3, r3, #12
 80052a8:	b29b      	uxth	r3, r3
 80052aa:	697a      	ldr	r2, [r7, #20]
 80052ac:	4313      	orrs	r3, r2
 80052ae:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80052b0:	693b      	ldr	r3, [r7, #16]
 80052b2:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80052b6:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80052b8:	68bb      	ldr	r3, [r7, #8]
 80052ba:	031b      	lsls	r3, r3, #12
 80052bc:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80052c0:	693a      	ldr	r2, [r7, #16]
 80052c2:	4313      	orrs	r3, r2
 80052c4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	697a      	ldr	r2, [r7, #20]
 80052ca:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	693a      	ldr	r2, [r7, #16]
 80052d0:	621a      	str	r2, [r3, #32]
}
 80052d2:	bf00      	nop
 80052d4:	371c      	adds	r7, #28
 80052d6:	46bd      	mov	sp, r7
 80052d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052dc:	4770      	bx	lr

080052de <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80052de:	b480      	push	{r7}
 80052e0:	b085      	sub	sp, #20
 80052e2:	af00      	add	r7, sp, #0
 80052e4:	6078      	str	r0, [r7, #4]
 80052e6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	689b      	ldr	r3, [r3, #8]
 80052ec:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052f4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80052f6:	683a      	ldr	r2, [r7, #0]
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	4313      	orrs	r3, r2
 80052fc:	f043 0307 	orr.w	r3, r3, #7
 8005300:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	68fa      	ldr	r2, [r7, #12]
 8005306:	609a      	str	r2, [r3, #8]
}
 8005308:	bf00      	nop
 800530a:	3714      	adds	r7, #20
 800530c:	46bd      	mov	sp, r7
 800530e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005312:	4770      	bx	lr

08005314 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005314:	b480      	push	{r7}
 8005316:	b087      	sub	sp, #28
 8005318:	af00      	add	r7, sp, #0
 800531a:	60f8      	str	r0, [r7, #12]
 800531c:	60b9      	str	r1, [r7, #8]
 800531e:	607a      	str	r2, [r7, #4]
 8005320:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	689b      	ldr	r3, [r3, #8]
 8005326:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005328:	697b      	ldr	r3, [r7, #20]
 800532a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800532e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005330:	683b      	ldr	r3, [r7, #0]
 8005332:	021a      	lsls	r2, r3, #8
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	431a      	orrs	r2, r3
 8005338:	68bb      	ldr	r3, [r7, #8]
 800533a:	4313      	orrs	r3, r2
 800533c:	697a      	ldr	r2, [r7, #20]
 800533e:	4313      	orrs	r3, r2
 8005340:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	697a      	ldr	r2, [r7, #20]
 8005346:	609a      	str	r2, [r3, #8]
}
 8005348:	bf00      	nop
 800534a:	371c      	adds	r7, #28
 800534c:	46bd      	mov	sp, r7
 800534e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005352:	4770      	bx	lr

08005354 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005354:	b480      	push	{r7}
 8005356:	b085      	sub	sp, #20
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
 800535c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005364:	2b01      	cmp	r3, #1
 8005366:	d101      	bne.n	800536c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005368:	2302      	movs	r3, #2
 800536a:	e05a      	b.n	8005422 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2201      	movs	r2, #1
 8005370:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	2202      	movs	r2, #2
 8005378:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	685b      	ldr	r3, [r3, #4]
 8005382:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	689b      	ldr	r3, [r3, #8]
 800538a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005392:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005394:	683b      	ldr	r3, [r7, #0]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	68fa      	ldr	r2, [r7, #12]
 800539a:	4313      	orrs	r3, r2
 800539c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	68fa      	ldr	r2, [r7, #12]
 80053a4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	4a21      	ldr	r2, [pc, #132]	; (8005430 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80053ac:	4293      	cmp	r3, r2
 80053ae:	d022      	beq.n	80053f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053b8:	d01d      	beq.n	80053f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	4a1d      	ldr	r2, [pc, #116]	; (8005434 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80053c0:	4293      	cmp	r3, r2
 80053c2:	d018      	beq.n	80053f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	4a1b      	ldr	r2, [pc, #108]	; (8005438 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80053ca:	4293      	cmp	r3, r2
 80053cc:	d013      	beq.n	80053f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	4a1a      	ldr	r2, [pc, #104]	; (800543c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80053d4:	4293      	cmp	r3, r2
 80053d6:	d00e      	beq.n	80053f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	4a18      	ldr	r2, [pc, #96]	; (8005440 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80053de:	4293      	cmp	r3, r2
 80053e0:	d009      	beq.n	80053f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	4a17      	ldr	r2, [pc, #92]	; (8005444 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80053e8:	4293      	cmp	r3, r2
 80053ea:	d004      	beq.n	80053f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	4a15      	ldr	r2, [pc, #84]	; (8005448 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80053f2:	4293      	cmp	r3, r2
 80053f4:	d10c      	bne.n	8005410 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80053f6:	68bb      	ldr	r3, [r7, #8]
 80053f8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80053fc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	685b      	ldr	r3, [r3, #4]
 8005402:	68ba      	ldr	r2, [r7, #8]
 8005404:	4313      	orrs	r3, r2
 8005406:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	68ba      	ldr	r2, [r7, #8]
 800540e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	2201      	movs	r2, #1
 8005414:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	2200      	movs	r2, #0
 800541c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005420:	2300      	movs	r3, #0
}
 8005422:	4618      	mov	r0, r3
 8005424:	3714      	adds	r7, #20
 8005426:	46bd      	mov	sp, r7
 8005428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542c:	4770      	bx	lr
 800542e:	bf00      	nop
 8005430:	40010000 	.word	0x40010000
 8005434:	40000400 	.word	0x40000400
 8005438:	40000800 	.word	0x40000800
 800543c:	40000c00 	.word	0x40000c00
 8005440:	40010400 	.word	0x40010400
 8005444:	40014000 	.word	0x40014000
 8005448:	40001800 	.word	0x40001800

0800544c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800544c:	b480      	push	{r7}
 800544e:	b085      	sub	sp, #20
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]
 8005454:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005456:	2300      	movs	r3, #0
 8005458:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005460:	2b01      	cmp	r3, #1
 8005462:	d101      	bne.n	8005468 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005464:	2302      	movs	r3, #2
 8005466:	e03d      	b.n	80054e4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2201      	movs	r2, #1
 800546c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005476:	683b      	ldr	r3, [r7, #0]
 8005478:	68db      	ldr	r3, [r3, #12]
 800547a:	4313      	orrs	r3, r2
 800547c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005484:	683b      	ldr	r3, [r7, #0]
 8005486:	689b      	ldr	r3, [r3, #8]
 8005488:	4313      	orrs	r3, r2
 800548a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005492:	683b      	ldr	r3, [r7, #0]
 8005494:	685b      	ldr	r3, [r3, #4]
 8005496:	4313      	orrs	r3, r2
 8005498:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80054a0:	683b      	ldr	r3, [r7, #0]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	4313      	orrs	r3, r2
 80054a6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80054ae:	683b      	ldr	r3, [r7, #0]
 80054b0:	691b      	ldr	r3, [r3, #16]
 80054b2:	4313      	orrs	r3, r2
 80054b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80054bc:	683b      	ldr	r3, [r7, #0]
 80054be:	695b      	ldr	r3, [r3, #20]
 80054c0:	4313      	orrs	r3, r2
 80054c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80054ca:	683b      	ldr	r3, [r7, #0]
 80054cc:	69db      	ldr	r3, [r3, #28]
 80054ce:	4313      	orrs	r3, r2
 80054d0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	68fa      	ldr	r2, [r7, #12]
 80054d8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	2200      	movs	r2, #0
 80054de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80054e2:	2300      	movs	r3, #0
}
 80054e4:	4618      	mov	r0, r3
 80054e6:	3714      	adds	r7, #20
 80054e8:	46bd      	mov	sp, r7
 80054ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ee:	4770      	bx	lr

080054f0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80054f0:	b480      	push	{r7}
 80054f2:	b083      	sub	sp, #12
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80054f8:	bf00      	nop
 80054fa:	370c      	adds	r7, #12
 80054fc:	46bd      	mov	sp, r7
 80054fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005502:	4770      	bx	lr

08005504 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005504:	b480      	push	{r7}
 8005506:	b083      	sub	sp, #12
 8005508:	af00      	add	r7, sp, #0
 800550a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800550c:	bf00      	nop
 800550e:	370c      	adds	r7, #12
 8005510:	46bd      	mov	sp, r7
 8005512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005516:	4770      	bx	lr

08005518 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005518:	b580      	push	{r7, lr}
 800551a:	b082      	sub	sp, #8
 800551c:	af00      	add	r7, sp, #0
 800551e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2b00      	cmp	r3, #0
 8005524:	d101      	bne.n	800552a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005526:	2301      	movs	r3, #1
 8005528:	e03f      	b.n	80055aa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005530:	b2db      	uxtb	r3, r3
 8005532:	2b00      	cmp	r3, #0
 8005534:	d106      	bne.n	8005544 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	2200      	movs	r2, #0
 800553a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800553e:	6878      	ldr	r0, [r7, #4]
 8005540:	f7fc f9e8 	bl	8001914 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2224      	movs	r2, #36	; 0x24
 8005548:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	68da      	ldr	r2, [r3, #12]
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800555a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800555c:	6878      	ldr	r0, [r7, #4]
 800555e:	f000 f905 	bl	800576c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	691a      	ldr	r2, [r3, #16]
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005570:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	695a      	ldr	r2, [r3, #20]
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005580:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	68da      	ldr	r2, [r3, #12]
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005590:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	2200      	movs	r2, #0
 8005596:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2220      	movs	r2, #32
 800559c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	2220      	movs	r2, #32
 80055a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80055a8:	2300      	movs	r3, #0
}
 80055aa:	4618      	mov	r0, r3
 80055ac:	3708      	adds	r7, #8
 80055ae:	46bd      	mov	sp, r7
 80055b0:	bd80      	pop	{r7, pc}

080055b2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80055b2:	b580      	push	{r7, lr}
 80055b4:	b08a      	sub	sp, #40	; 0x28
 80055b6:	af02      	add	r7, sp, #8
 80055b8:	60f8      	str	r0, [r7, #12]
 80055ba:	60b9      	str	r1, [r7, #8]
 80055bc:	603b      	str	r3, [r7, #0]
 80055be:	4613      	mov	r3, r2
 80055c0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80055c2:	2300      	movs	r3, #0
 80055c4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055cc:	b2db      	uxtb	r3, r3
 80055ce:	2b20      	cmp	r3, #32
 80055d0:	d17c      	bne.n	80056cc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80055d2:	68bb      	ldr	r3, [r7, #8]
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d002      	beq.n	80055de <HAL_UART_Transmit+0x2c>
 80055d8:	88fb      	ldrh	r3, [r7, #6]
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d101      	bne.n	80055e2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80055de:	2301      	movs	r3, #1
 80055e0:	e075      	b.n	80056ce <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80055e8:	2b01      	cmp	r3, #1
 80055ea:	d101      	bne.n	80055f0 <HAL_UART_Transmit+0x3e>
 80055ec:	2302      	movs	r3, #2
 80055ee:	e06e      	b.n	80056ce <HAL_UART_Transmit+0x11c>
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	2201      	movs	r2, #1
 80055f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	2200      	movs	r2, #0
 80055fc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	2221      	movs	r2, #33	; 0x21
 8005602:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005606:	f7fc fc57 	bl	8001eb8 <HAL_GetTick>
 800560a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	88fa      	ldrh	r2, [r7, #6]
 8005610:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	88fa      	ldrh	r2, [r7, #6]
 8005616:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	689b      	ldr	r3, [r3, #8]
 800561c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005620:	d108      	bne.n	8005634 <HAL_UART_Transmit+0x82>
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	691b      	ldr	r3, [r3, #16]
 8005626:	2b00      	cmp	r3, #0
 8005628:	d104      	bne.n	8005634 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800562a:	2300      	movs	r3, #0
 800562c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800562e:	68bb      	ldr	r3, [r7, #8]
 8005630:	61bb      	str	r3, [r7, #24]
 8005632:	e003      	b.n	800563c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005634:	68bb      	ldr	r3, [r7, #8]
 8005636:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005638:	2300      	movs	r3, #0
 800563a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	2200      	movs	r2, #0
 8005640:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005644:	e02a      	b.n	800569c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005646:	683b      	ldr	r3, [r7, #0]
 8005648:	9300      	str	r3, [sp, #0]
 800564a:	697b      	ldr	r3, [r7, #20]
 800564c:	2200      	movs	r2, #0
 800564e:	2180      	movs	r1, #128	; 0x80
 8005650:	68f8      	ldr	r0, [r7, #12]
 8005652:	f000 f840 	bl	80056d6 <UART_WaitOnFlagUntilTimeout>
 8005656:	4603      	mov	r3, r0
 8005658:	2b00      	cmp	r3, #0
 800565a:	d001      	beq.n	8005660 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800565c:	2303      	movs	r3, #3
 800565e:	e036      	b.n	80056ce <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005660:	69fb      	ldr	r3, [r7, #28]
 8005662:	2b00      	cmp	r3, #0
 8005664:	d10b      	bne.n	800567e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005666:	69bb      	ldr	r3, [r7, #24]
 8005668:	881b      	ldrh	r3, [r3, #0]
 800566a:	461a      	mov	r2, r3
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005674:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005676:	69bb      	ldr	r3, [r7, #24]
 8005678:	3302      	adds	r3, #2
 800567a:	61bb      	str	r3, [r7, #24]
 800567c:	e007      	b.n	800568e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800567e:	69fb      	ldr	r3, [r7, #28]
 8005680:	781a      	ldrb	r2, [r3, #0]
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005688:	69fb      	ldr	r3, [r7, #28]
 800568a:	3301      	adds	r3, #1
 800568c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005692:	b29b      	uxth	r3, r3
 8005694:	3b01      	subs	r3, #1
 8005696:	b29a      	uxth	r2, r3
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80056a0:	b29b      	uxth	r3, r3
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d1cf      	bne.n	8005646 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80056a6:	683b      	ldr	r3, [r7, #0]
 80056a8:	9300      	str	r3, [sp, #0]
 80056aa:	697b      	ldr	r3, [r7, #20]
 80056ac:	2200      	movs	r2, #0
 80056ae:	2140      	movs	r1, #64	; 0x40
 80056b0:	68f8      	ldr	r0, [r7, #12]
 80056b2:	f000 f810 	bl	80056d6 <UART_WaitOnFlagUntilTimeout>
 80056b6:	4603      	mov	r3, r0
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d001      	beq.n	80056c0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80056bc:	2303      	movs	r3, #3
 80056be:	e006      	b.n	80056ce <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	2220      	movs	r2, #32
 80056c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80056c8:	2300      	movs	r3, #0
 80056ca:	e000      	b.n	80056ce <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80056cc:	2302      	movs	r3, #2
  }
}
 80056ce:	4618      	mov	r0, r3
 80056d0:	3720      	adds	r7, #32
 80056d2:	46bd      	mov	sp, r7
 80056d4:	bd80      	pop	{r7, pc}

080056d6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80056d6:	b580      	push	{r7, lr}
 80056d8:	b084      	sub	sp, #16
 80056da:	af00      	add	r7, sp, #0
 80056dc:	60f8      	str	r0, [r7, #12]
 80056de:	60b9      	str	r1, [r7, #8]
 80056e0:	603b      	str	r3, [r7, #0]
 80056e2:	4613      	mov	r3, r2
 80056e4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80056e6:	e02c      	b.n	8005742 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80056e8:	69bb      	ldr	r3, [r7, #24]
 80056ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056ee:	d028      	beq.n	8005742 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80056f0:	69bb      	ldr	r3, [r7, #24]
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d007      	beq.n	8005706 <UART_WaitOnFlagUntilTimeout+0x30>
 80056f6:	f7fc fbdf 	bl	8001eb8 <HAL_GetTick>
 80056fa:	4602      	mov	r2, r0
 80056fc:	683b      	ldr	r3, [r7, #0]
 80056fe:	1ad3      	subs	r3, r2, r3
 8005700:	69ba      	ldr	r2, [r7, #24]
 8005702:	429a      	cmp	r2, r3
 8005704:	d21d      	bcs.n	8005742 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	68da      	ldr	r2, [r3, #12]
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005714:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	695a      	ldr	r2, [r3, #20]
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	f022 0201 	bic.w	r2, r2, #1
 8005724:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	2220      	movs	r2, #32
 800572a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	2220      	movs	r2, #32
 8005732:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	2200      	movs	r2, #0
 800573a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800573e:	2303      	movs	r3, #3
 8005740:	e00f      	b.n	8005762 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	681a      	ldr	r2, [r3, #0]
 8005748:	68bb      	ldr	r3, [r7, #8]
 800574a:	4013      	ands	r3, r2
 800574c:	68ba      	ldr	r2, [r7, #8]
 800574e:	429a      	cmp	r2, r3
 8005750:	bf0c      	ite	eq
 8005752:	2301      	moveq	r3, #1
 8005754:	2300      	movne	r3, #0
 8005756:	b2db      	uxtb	r3, r3
 8005758:	461a      	mov	r2, r3
 800575a:	79fb      	ldrb	r3, [r7, #7]
 800575c:	429a      	cmp	r2, r3
 800575e:	d0c3      	beq.n	80056e8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005760:	2300      	movs	r3, #0
}
 8005762:	4618      	mov	r0, r3
 8005764:	3710      	adds	r7, #16
 8005766:	46bd      	mov	sp, r7
 8005768:	bd80      	pop	{r7, pc}
	...

0800576c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800576c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005770:	b09f      	sub	sp, #124	; 0x7c
 8005772:	af00      	add	r7, sp, #0
 8005774:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005776:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	691b      	ldr	r3, [r3, #16]
 800577c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005780:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005782:	68d9      	ldr	r1, [r3, #12]
 8005784:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005786:	681a      	ldr	r2, [r3, #0]
 8005788:	ea40 0301 	orr.w	r3, r0, r1
 800578c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800578e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005790:	689a      	ldr	r2, [r3, #8]
 8005792:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005794:	691b      	ldr	r3, [r3, #16]
 8005796:	431a      	orrs	r2, r3
 8005798:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800579a:	695b      	ldr	r3, [r3, #20]
 800579c:	431a      	orrs	r2, r3
 800579e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80057a0:	69db      	ldr	r3, [r3, #28]
 80057a2:	4313      	orrs	r3, r2
 80057a4:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80057a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	68db      	ldr	r3, [r3, #12]
 80057ac:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80057b0:	f021 010c 	bic.w	r1, r1, #12
 80057b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80057b6:	681a      	ldr	r2, [r3, #0]
 80057b8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80057ba:	430b      	orrs	r3, r1
 80057bc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80057be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	695b      	ldr	r3, [r3, #20]
 80057c4:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80057c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80057ca:	6999      	ldr	r1, [r3, #24]
 80057cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80057ce:	681a      	ldr	r2, [r3, #0]
 80057d0:	ea40 0301 	orr.w	r3, r0, r1
 80057d4:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80057d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80057d8:	681a      	ldr	r2, [r3, #0]
 80057da:	4bc5      	ldr	r3, [pc, #788]	; (8005af0 <UART_SetConfig+0x384>)
 80057dc:	429a      	cmp	r2, r3
 80057de:	d004      	beq.n	80057ea <UART_SetConfig+0x7e>
 80057e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80057e2:	681a      	ldr	r2, [r3, #0]
 80057e4:	4bc3      	ldr	r3, [pc, #780]	; (8005af4 <UART_SetConfig+0x388>)
 80057e6:	429a      	cmp	r2, r3
 80057e8:	d103      	bne.n	80057f2 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80057ea:	f7fd fddf 	bl	80033ac <HAL_RCC_GetPCLK2Freq>
 80057ee:	6778      	str	r0, [r7, #116]	; 0x74
 80057f0:	e002      	b.n	80057f8 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80057f2:	f7fd fdc7 	bl	8003384 <HAL_RCC_GetPCLK1Freq>
 80057f6:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80057f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80057fa:	69db      	ldr	r3, [r3, #28]
 80057fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005800:	f040 80b6 	bne.w	8005970 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005804:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005806:	461c      	mov	r4, r3
 8005808:	f04f 0500 	mov.w	r5, #0
 800580c:	4622      	mov	r2, r4
 800580e:	462b      	mov	r3, r5
 8005810:	1891      	adds	r1, r2, r2
 8005812:	6439      	str	r1, [r7, #64]	; 0x40
 8005814:	415b      	adcs	r3, r3
 8005816:	647b      	str	r3, [r7, #68]	; 0x44
 8005818:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800581c:	1912      	adds	r2, r2, r4
 800581e:	eb45 0303 	adc.w	r3, r5, r3
 8005822:	f04f 0000 	mov.w	r0, #0
 8005826:	f04f 0100 	mov.w	r1, #0
 800582a:	00d9      	lsls	r1, r3, #3
 800582c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005830:	00d0      	lsls	r0, r2, #3
 8005832:	4602      	mov	r2, r0
 8005834:	460b      	mov	r3, r1
 8005836:	1911      	adds	r1, r2, r4
 8005838:	6639      	str	r1, [r7, #96]	; 0x60
 800583a:	416b      	adcs	r3, r5
 800583c:	667b      	str	r3, [r7, #100]	; 0x64
 800583e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005840:	685b      	ldr	r3, [r3, #4]
 8005842:	461a      	mov	r2, r3
 8005844:	f04f 0300 	mov.w	r3, #0
 8005848:	1891      	adds	r1, r2, r2
 800584a:	63b9      	str	r1, [r7, #56]	; 0x38
 800584c:	415b      	adcs	r3, r3
 800584e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005850:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005854:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8005858:	f7fa fd0a 	bl	8000270 <__aeabi_uldivmod>
 800585c:	4602      	mov	r2, r0
 800585e:	460b      	mov	r3, r1
 8005860:	4ba5      	ldr	r3, [pc, #660]	; (8005af8 <UART_SetConfig+0x38c>)
 8005862:	fba3 2302 	umull	r2, r3, r3, r2
 8005866:	095b      	lsrs	r3, r3, #5
 8005868:	011e      	lsls	r6, r3, #4
 800586a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800586c:	461c      	mov	r4, r3
 800586e:	f04f 0500 	mov.w	r5, #0
 8005872:	4622      	mov	r2, r4
 8005874:	462b      	mov	r3, r5
 8005876:	1891      	adds	r1, r2, r2
 8005878:	6339      	str	r1, [r7, #48]	; 0x30
 800587a:	415b      	adcs	r3, r3
 800587c:	637b      	str	r3, [r7, #52]	; 0x34
 800587e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8005882:	1912      	adds	r2, r2, r4
 8005884:	eb45 0303 	adc.w	r3, r5, r3
 8005888:	f04f 0000 	mov.w	r0, #0
 800588c:	f04f 0100 	mov.w	r1, #0
 8005890:	00d9      	lsls	r1, r3, #3
 8005892:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005896:	00d0      	lsls	r0, r2, #3
 8005898:	4602      	mov	r2, r0
 800589a:	460b      	mov	r3, r1
 800589c:	1911      	adds	r1, r2, r4
 800589e:	65b9      	str	r1, [r7, #88]	; 0x58
 80058a0:	416b      	adcs	r3, r5
 80058a2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80058a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058a6:	685b      	ldr	r3, [r3, #4]
 80058a8:	461a      	mov	r2, r3
 80058aa:	f04f 0300 	mov.w	r3, #0
 80058ae:	1891      	adds	r1, r2, r2
 80058b0:	62b9      	str	r1, [r7, #40]	; 0x28
 80058b2:	415b      	adcs	r3, r3
 80058b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80058b6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80058ba:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80058be:	f7fa fcd7 	bl	8000270 <__aeabi_uldivmod>
 80058c2:	4602      	mov	r2, r0
 80058c4:	460b      	mov	r3, r1
 80058c6:	4b8c      	ldr	r3, [pc, #560]	; (8005af8 <UART_SetConfig+0x38c>)
 80058c8:	fba3 1302 	umull	r1, r3, r3, r2
 80058cc:	095b      	lsrs	r3, r3, #5
 80058ce:	2164      	movs	r1, #100	; 0x64
 80058d0:	fb01 f303 	mul.w	r3, r1, r3
 80058d4:	1ad3      	subs	r3, r2, r3
 80058d6:	00db      	lsls	r3, r3, #3
 80058d8:	3332      	adds	r3, #50	; 0x32
 80058da:	4a87      	ldr	r2, [pc, #540]	; (8005af8 <UART_SetConfig+0x38c>)
 80058dc:	fba2 2303 	umull	r2, r3, r2, r3
 80058e0:	095b      	lsrs	r3, r3, #5
 80058e2:	005b      	lsls	r3, r3, #1
 80058e4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80058e8:	441e      	add	r6, r3
 80058ea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80058ec:	4618      	mov	r0, r3
 80058ee:	f04f 0100 	mov.w	r1, #0
 80058f2:	4602      	mov	r2, r0
 80058f4:	460b      	mov	r3, r1
 80058f6:	1894      	adds	r4, r2, r2
 80058f8:	623c      	str	r4, [r7, #32]
 80058fa:	415b      	adcs	r3, r3
 80058fc:	627b      	str	r3, [r7, #36]	; 0x24
 80058fe:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005902:	1812      	adds	r2, r2, r0
 8005904:	eb41 0303 	adc.w	r3, r1, r3
 8005908:	f04f 0400 	mov.w	r4, #0
 800590c:	f04f 0500 	mov.w	r5, #0
 8005910:	00dd      	lsls	r5, r3, #3
 8005912:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005916:	00d4      	lsls	r4, r2, #3
 8005918:	4622      	mov	r2, r4
 800591a:	462b      	mov	r3, r5
 800591c:	1814      	adds	r4, r2, r0
 800591e:	653c      	str	r4, [r7, #80]	; 0x50
 8005920:	414b      	adcs	r3, r1
 8005922:	657b      	str	r3, [r7, #84]	; 0x54
 8005924:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005926:	685b      	ldr	r3, [r3, #4]
 8005928:	461a      	mov	r2, r3
 800592a:	f04f 0300 	mov.w	r3, #0
 800592e:	1891      	adds	r1, r2, r2
 8005930:	61b9      	str	r1, [r7, #24]
 8005932:	415b      	adcs	r3, r3
 8005934:	61fb      	str	r3, [r7, #28]
 8005936:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800593a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800593e:	f7fa fc97 	bl	8000270 <__aeabi_uldivmod>
 8005942:	4602      	mov	r2, r0
 8005944:	460b      	mov	r3, r1
 8005946:	4b6c      	ldr	r3, [pc, #432]	; (8005af8 <UART_SetConfig+0x38c>)
 8005948:	fba3 1302 	umull	r1, r3, r3, r2
 800594c:	095b      	lsrs	r3, r3, #5
 800594e:	2164      	movs	r1, #100	; 0x64
 8005950:	fb01 f303 	mul.w	r3, r1, r3
 8005954:	1ad3      	subs	r3, r2, r3
 8005956:	00db      	lsls	r3, r3, #3
 8005958:	3332      	adds	r3, #50	; 0x32
 800595a:	4a67      	ldr	r2, [pc, #412]	; (8005af8 <UART_SetConfig+0x38c>)
 800595c:	fba2 2303 	umull	r2, r3, r2, r3
 8005960:	095b      	lsrs	r3, r3, #5
 8005962:	f003 0207 	and.w	r2, r3, #7
 8005966:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	4432      	add	r2, r6
 800596c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800596e:	e0b9      	b.n	8005ae4 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005970:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005972:	461c      	mov	r4, r3
 8005974:	f04f 0500 	mov.w	r5, #0
 8005978:	4622      	mov	r2, r4
 800597a:	462b      	mov	r3, r5
 800597c:	1891      	adds	r1, r2, r2
 800597e:	6139      	str	r1, [r7, #16]
 8005980:	415b      	adcs	r3, r3
 8005982:	617b      	str	r3, [r7, #20]
 8005984:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005988:	1912      	adds	r2, r2, r4
 800598a:	eb45 0303 	adc.w	r3, r5, r3
 800598e:	f04f 0000 	mov.w	r0, #0
 8005992:	f04f 0100 	mov.w	r1, #0
 8005996:	00d9      	lsls	r1, r3, #3
 8005998:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800599c:	00d0      	lsls	r0, r2, #3
 800599e:	4602      	mov	r2, r0
 80059a0:	460b      	mov	r3, r1
 80059a2:	eb12 0804 	adds.w	r8, r2, r4
 80059a6:	eb43 0905 	adc.w	r9, r3, r5
 80059aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80059ac:	685b      	ldr	r3, [r3, #4]
 80059ae:	4618      	mov	r0, r3
 80059b0:	f04f 0100 	mov.w	r1, #0
 80059b4:	f04f 0200 	mov.w	r2, #0
 80059b8:	f04f 0300 	mov.w	r3, #0
 80059bc:	008b      	lsls	r3, r1, #2
 80059be:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80059c2:	0082      	lsls	r2, r0, #2
 80059c4:	4640      	mov	r0, r8
 80059c6:	4649      	mov	r1, r9
 80059c8:	f7fa fc52 	bl	8000270 <__aeabi_uldivmod>
 80059cc:	4602      	mov	r2, r0
 80059ce:	460b      	mov	r3, r1
 80059d0:	4b49      	ldr	r3, [pc, #292]	; (8005af8 <UART_SetConfig+0x38c>)
 80059d2:	fba3 2302 	umull	r2, r3, r3, r2
 80059d6:	095b      	lsrs	r3, r3, #5
 80059d8:	011e      	lsls	r6, r3, #4
 80059da:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80059dc:	4618      	mov	r0, r3
 80059de:	f04f 0100 	mov.w	r1, #0
 80059e2:	4602      	mov	r2, r0
 80059e4:	460b      	mov	r3, r1
 80059e6:	1894      	adds	r4, r2, r2
 80059e8:	60bc      	str	r4, [r7, #8]
 80059ea:	415b      	adcs	r3, r3
 80059ec:	60fb      	str	r3, [r7, #12]
 80059ee:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80059f2:	1812      	adds	r2, r2, r0
 80059f4:	eb41 0303 	adc.w	r3, r1, r3
 80059f8:	f04f 0400 	mov.w	r4, #0
 80059fc:	f04f 0500 	mov.w	r5, #0
 8005a00:	00dd      	lsls	r5, r3, #3
 8005a02:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005a06:	00d4      	lsls	r4, r2, #3
 8005a08:	4622      	mov	r2, r4
 8005a0a:	462b      	mov	r3, r5
 8005a0c:	1814      	adds	r4, r2, r0
 8005a0e:	64bc      	str	r4, [r7, #72]	; 0x48
 8005a10:	414b      	adcs	r3, r1
 8005a12:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005a14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a16:	685b      	ldr	r3, [r3, #4]
 8005a18:	4618      	mov	r0, r3
 8005a1a:	f04f 0100 	mov.w	r1, #0
 8005a1e:	f04f 0200 	mov.w	r2, #0
 8005a22:	f04f 0300 	mov.w	r3, #0
 8005a26:	008b      	lsls	r3, r1, #2
 8005a28:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005a2c:	0082      	lsls	r2, r0, #2
 8005a2e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8005a32:	f7fa fc1d 	bl	8000270 <__aeabi_uldivmod>
 8005a36:	4602      	mov	r2, r0
 8005a38:	460b      	mov	r3, r1
 8005a3a:	4b2f      	ldr	r3, [pc, #188]	; (8005af8 <UART_SetConfig+0x38c>)
 8005a3c:	fba3 1302 	umull	r1, r3, r3, r2
 8005a40:	095b      	lsrs	r3, r3, #5
 8005a42:	2164      	movs	r1, #100	; 0x64
 8005a44:	fb01 f303 	mul.w	r3, r1, r3
 8005a48:	1ad3      	subs	r3, r2, r3
 8005a4a:	011b      	lsls	r3, r3, #4
 8005a4c:	3332      	adds	r3, #50	; 0x32
 8005a4e:	4a2a      	ldr	r2, [pc, #168]	; (8005af8 <UART_SetConfig+0x38c>)
 8005a50:	fba2 2303 	umull	r2, r3, r2, r3
 8005a54:	095b      	lsrs	r3, r3, #5
 8005a56:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005a5a:	441e      	add	r6, r3
 8005a5c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005a5e:	4618      	mov	r0, r3
 8005a60:	f04f 0100 	mov.w	r1, #0
 8005a64:	4602      	mov	r2, r0
 8005a66:	460b      	mov	r3, r1
 8005a68:	1894      	adds	r4, r2, r2
 8005a6a:	603c      	str	r4, [r7, #0]
 8005a6c:	415b      	adcs	r3, r3
 8005a6e:	607b      	str	r3, [r7, #4]
 8005a70:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005a74:	1812      	adds	r2, r2, r0
 8005a76:	eb41 0303 	adc.w	r3, r1, r3
 8005a7a:	f04f 0400 	mov.w	r4, #0
 8005a7e:	f04f 0500 	mov.w	r5, #0
 8005a82:	00dd      	lsls	r5, r3, #3
 8005a84:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005a88:	00d4      	lsls	r4, r2, #3
 8005a8a:	4622      	mov	r2, r4
 8005a8c:	462b      	mov	r3, r5
 8005a8e:	eb12 0a00 	adds.w	sl, r2, r0
 8005a92:	eb43 0b01 	adc.w	fp, r3, r1
 8005a96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a98:	685b      	ldr	r3, [r3, #4]
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	f04f 0100 	mov.w	r1, #0
 8005aa0:	f04f 0200 	mov.w	r2, #0
 8005aa4:	f04f 0300 	mov.w	r3, #0
 8005aa8:	008b      	lsls	r3, r1, #2
 8005aaa:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005aae:	0082      	lsls	r2, r0, #2
 8005ab0:	4650      	mov	r0, sl
 8005ab2:	4659      	mov	r1, fp
 8005ab4:	f7fa fbdc 	bl	8000270 <__aeabi_uldivmod>
 8005ab8:	4602      	mov	r2, r0
 8005aba:	460b      	mov	r3, r1
 8005abc:	4b0e      	ldr	r3, [pc, #56]	; (8005af8 <UART_SetConfig+0x38c>)
 8005abe:	fba3 1302 	umull	r1, r3, r3, r2
 8005ac2:	095b      	lsrs	r3, r3, #5
 8005ac4:	2164      	movs	r1, #100	; 0x64
 8005ac6:	fb01 f303 	mul.w	r3, r1, r3
 8005aca:	1ad3      	subs	r3, r2, r3
 8005acc:	011b      	lsls	r3, r3, #4
 8005ace:	3332      	adds	r3, #50	; 0x32
 8005ad0:	4a09      	ldr	r2, [pc, #36]	; (8005af8 <UART_SetConfig+0x38c>)
 8005ad2:	fba2 2303 	umull	r2, r3, r2, r3
 8005ad6:	095b      	lsrs	r3, r3, #5
 8005ad8:	f003 020f 	and.w	r2, r3, #15
 8005adc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	4432      	add	r2, r6
 8005ae2:	609a      	str	r2, [r3, #8]
}
 8005ae4:	bf00      	nop
 8005ae6:	377c      	adds	r7, #124	; 0x7c
 8005ae8:	46bd      	mov	sp, r7
 8005aea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005aee:	bf00      	nop
 8005af0:	40011000 	.word	0x40011000
 8005af4:	40011400 	.word	0x40011400
 8005af8:	51eb851f 	.word	0x51eb851f

08005afc <__NVIC_SetPriority>:
{
 8005afc:	b480      	push	{r7}
 8005afe:	b083      	sub	sp, #12
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	4603      	mov	r3, r0
 8005b04:	6039      	str	r1, [r7, #0]
 8005b06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005b08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	db0a      	blt.n	8005b26 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005b10:	683b      	ldr	r3, [r7, #0]
 8005b12:	b2da      	uxtb	r2, r3
 8005b14:	490c      	ldr	r1, [pc, #48]	; (8005b48 <__NVIC_SetPriority+0x4c>)
 8005b16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b1a:	0112      	lsls	r2, r2, #4
 8005b1c:	b2d2      	uxtb	r2, r2
 8005b1e:	440b      	add	r3, r1
 8005b20:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8005b24:	e00a      	b.n	8005b3c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005b26:	683b      	ldr	r3, [r7, #0]
 8005b28:	b2da      	uxtb	r2, r3
 8005b2a:	4908      	ldr	r1, [pc, #32]	; (8005b4c <__NVIC_SetPriority+0x50>)
 8005b2c:	79fb      	ldrb	r3, [r7, #7]
 8005b2e:	f003 030f 	and.w	r3, r3, #15
 8005b32:	3b04      	subs	r3, #4
 8005b34:	0112      	lsls	r2, r2, #4
 8005b36:	b2d2      	uxtb	r2, r2
 8005b38:	440b      	add	r3, r1
 8005b3a:	761a      	strb	r2, [r3, #24]
}
 8005b3c:	bf00      	nop
 8005b3e:	370c      	adds	r7, #12
 8005b40:	46bd      	mov	sp, r7
 8005b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b46:	4770      	bx	lr
 8005b48:	e000e100 	.word	0xe000e100
 8005b4c:	e000ed00 	.word	0xe000ed00

08005b50 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8005b50:	b580      	push	{r7, lr}
 8005b52:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8005b54:	4b05      	ldr	r3, [pc, #20]	; (8005b6c <SysTick_Handler+0x1c>)
 8005b56:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8005b58:	f001 fcfe 	bl	8007558 <xTaskGetSchedulerState>
 8005b5c:	4603      	mov	r3, r0
 8005b5e:	2b01      	cmp	r3, #1
 8005b60:	d001      	beq.n	8005b66 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8005b62:	f002 fae9 	bl	8008138 <xPortSysTickHandler>
  }
}
 8005b66:	bf00      	nop
 8005b68:	bd80      	pop	{r7, pc}
 8005b6a:	bf00      	nop
 8005b6c:	e000e010 	.word	0xe000e010

08005b70 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005b70:	b580      	push	{r7, lr}
 8005b72:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8005b74:	2100      	movs	r1, #0
 8005b76:	f06f 0004 	mvn.w	r0, #4
 8005b7a:	f7ff ffbf 	bl	8005afc <__NVIC_SetPriority>
#endif
}
 8005b7e:	bf00      	nop
 8005b80:	bd80      	pop	{r7, pc}
	...

08005b84 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005b84:	b480      	push	{r7}
 8005b86:	b083      	sub	sp, #12
 8005b88:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005b8a:	f3ef 8305 	mrs	r3, IPSR
 8005b8e:	603b      	str	r3, [r7, #0]
  return(result);
 8005b90:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d003      	beq.n	8005b9e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8005b96:	f06f 0305 	mvn.w	r3, #5
 8005b9a:	607b      	str	r3, [r7, #4]
 8005b9c:	e00c      	b.n	8005bb8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005b9e:	4b0a      	ldr	r3, [pc, #40]	; (8005bc8 <osKernelInitialize+0x44>)
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d105      	bne.n	8005bb2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8005ba6:	4b08      	ldr	r3, [pc, #32]	; (8005bc8 <osKernelInitialize+0x44>)
 8005ba8:	2201      	movs	r2, #1
 8005baa:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005bac:	2300      	movs	r3, #0
 8005bae:	607b      	str	r3, [r7, #4]
 8005bb0:	e002      	b.n	8005bb8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8005bb2:	f04f 33ff 	mov.w	r3, #4294967295
 8005bb6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005bb8:	687b      	ldr	r3, [r7, #4]
}
 8005bba:	4618      	mov	r0, r3
 8005bbc:	370c      	adds	r7, #12
 8005bbe:	46bd      	mov	sp, r7
 8005bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc4:	4770      	bx	lr
 8005bc6:	bf00      	nop
 8005bc8:	20000094 	.word	0x20000094

08005bcc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005bcc:	b580      	push	{r7, lr}
 8005bce:	b082      	sub	sp, #8
 8005bd0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005bd2:	f3ef 8305 	mrs	r3, IPSR
 8005bd6:	603b      	str	r3, [r7, #0]
  return(result);
 8005bd8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d003      	beq.n	8005be6 <osKernelStart+0x1a>
    stat = osErrorISR;
 8005bde:	f06f 0305 	mvn.w	r3, #5
 8005be2:	607b      	str	r3, [r7, #4]
 8005be4:	e010      	b.n	8005c08 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8005be6:	4b0b      	ldr	r3, [pc, #44]	; (8005c14 <osKernelStart+0x48>)
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	2b01      	cmp	r3, #1
 8005bec:	d109      	bne.n	8005c02 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8005bee:	f7ff ffbf 	bl	8005b70 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8005bf2:	4b08      	ldr	r3, [pc, #32]	; (8005c14 <osKernelStart+0x48>)
 8005bf4:	2202      	movs	r2, #2
 8005bf6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005bf8:	f001 f866 	bl	8006cc8 <vTaskStartScheduler>
      stat = osOK;
 8005bfc:	2300      	movs	r3, #0
 8005bfe:	607b      	str	r3, [r7, #4]
 8005c00:	e002      	b.n	8005c08 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8005c02:	f04f 33ff 	mov.w	r3, #4294967295
 8005c06:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005c08:	687b      	ldr	r3, [r7, #4]
}
 8005c0a:	4618      	mov	r0, r3
 8005c0c:	3708      	adds	r7, #8
 8005c0e:	46bd      	mov	sp, r7
 8005c10:	bd80      	pop	{r7, pc}
 8005c12:	bf00      	nop
 8005c14:	20000094 	.word	0x20000094

08005c18 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005c18:	b580      	push	{r7, lr}
 8005c1a:	b08e      	sub	sp, #56	; 0x38
 8005c1c:	af04      	add	r7, sp, #16
 8005c1e:	60f8      	str	r0, [r7, #12]
 8005c20:	60b9      	str	r1, [r7, #8]
 8005c22:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005c24:	2300      	movs	r3, #0
 8005c26:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005c28:	f3ef 8305 	mrs	r3, IPSR
 8005c2c:	617b      	str	r3, [r7, #20]
  return(result);
 8005c2e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d17e      	bne.n	8005d32 <osThreadNew+0x11a>
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d07b      	beq.n	8005d32 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8005c3a:	2380      	movs	r3, #128	; 0x80
 8005c3c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8005c3e:	2318      	movs	r3, #24
 8005c40:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8005c42:	2300      	movs	r3, #0
 8005c44:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8005c46:	f04f 33ff 	mov.w	r3, #4294967295
 8005c4a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d045      	beq.n	8005cde <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d002      	beq.n	8005c60 <osThreadNew+0x48>
        name = attr->name;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	699b      	ldr	r3, [r3, #24]
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d002      	beq.n	8005c6e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	699b      	ldr	r3, [r3, #24]
 8005c6c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005c6e:	69fb      	ldr	r3, [r7, #28]
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d008      	beq.n	8005c86 <osThreadNew+0x6e>
 8005c74:	69fb      	ldr	r3, [r7, #28]
 8005c76:	2b38      	cmp	r3, #56	; 0x38
 8005c78:	d805      	bhi.n	8005c86 <osThreadNew+0x6e>
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	685b      	ldr	r3, [r3, #4]
 8005c7e:	f003 0301 	and.w	r3, r3, #1
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d001      	beq.n	8005c8a <osThreadNew+0x72>
        return (NULL);
 8005c86:	2300      	movs	r3, #0
 8005c88:	e054      	b.n	8005d34 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	695b      	ldr	r3, [r3, #20]
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d003      	beq.n	8005c9a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	695b      	ldr	r3, [r3, #20]
 8005c96:	089b      	lsrs	r3, r3, #2
 8005c98:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	689b      	ldr	r3, [r3, #8]
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d00e      	beq.n	8005cc0 <osThreadNew+0xa8>
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	68db      	ldr	r3, [r3, #12]
 8005ca6:	2b5b      	cmp	r3, #91	; 0x5b
 8005ca8:	d90a      	bls.n	8005cc0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d006      	beq.n	8005cc0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	695b      	ldr	r3, [r3, #20]
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d002      	beq.n	8005cc0 <osThreadNew+0xa8>
        mem = 1;
 8005cba:	2301      	movs	r3, #1
 8005cbc:	61bb      	str	r3, [r7, #24]
 8005cbe:	e010      	b.n	8005ce2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	689b      	ldr	r3, [r3, #8]
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d10c      	bne.n	8005ce2 <osThreadNew+0xca>
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	68db      	ldr	r3, [r3, #12]
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d108      	bne.n	8005ce2 <osThreadNew+0xca>
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	691b      	ldr	r3, [r3, #16]
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d104      	bne.n	8005ce2 <osThreadNew+0xca>
          mem = 0;
 8005cd8:	2300      	movs	r3, #0
 8005cda:	61bb      	str	r3, [r7, #24]
 8005cdc:	e001      	b.n	8005ce2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8005cde:	2300      	movs	r3, #0
 8005ce0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005ce2:	69bb      	ldr	r3, [r7, #24]
 8005ce4:	2b01      	cmp	r3, #1
 8005ce6:	d110      	bne.n	8005d0a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8005cec:	687a      	ldr	r2, [r7, #4]
 8005cee:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005cf0:	9202      	str	r2, [sp, #8]
 8005cf2:	9301      	str	r3, [sp, #4]
 8005cf4:	69fb      	ldr	r3, [r7, #28]
 8005cf6:	9300      	str	r3, [sp, #0]
 8005cf8:	68bb      	ldr	r3, [r7, #8]
 8005cfa:	6a3a      	ldr	r2, [r7, #32]
 8005cfc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005cfe:	68f8      	ldr	r0, [r7, #12]
 8005d00:	f000 fe0c 	bl	800691c <xTaskCreateStatic>
 8005d04:	4603      	mov	r3, r0
 8005d06:	613b      	str	r3, [r7, #16]
 8005d08:	e013      	b.n	8005d32 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8005d0a:	69bb      	ldr	r3, [r7, #24]
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d110      	bne.n	8005d32 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005d10:	6a3b      	ldr	r3, [r7, #32]
 8005d12:	b29a      	uxth	r2, r3
 8005d14:	f107 0310 	add.w	r3, r7, #16
 8005d18:	9301      	str	r3, [sp, #4]
 8005d1a:	69fb      	ldr	r3, [r7, #28]
 8005d1c:	9300      	str	r3, [sp, #0]
 8005d1e:	68bb      	ldr	r3, [r7, #8]
 8005d20:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005d22:	68f8      	ldr	r0, [r7, #12]
 8005d24:	f000 fe57 	bl	80069d6 <xTaskCreate>
 8005d28:	4603      	mov	r3, r0
 8005d2a:	2b01      	cmp	r3, #1
 8005d2c:	d001      	beq.n	8005d32 <osThreadNew+0x11a>
            hTask = NULL;
 8005d2e:	2300      	movs	r3, #0
 8005d30:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005d32:	693b      	ldr	r3, [r7, #16]
}
 8005d34:	4618      	mov	r0, r3
 8005d36:	3728      	adds	r7, #40	; 0x28
 8005d38:	46bd      	mov	sp, r7
 8005d3a:	bd80      	pop	{r7, pc}

08005d3c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8005d3c:	b580      	push	{r7, lr}
 8005d3e:	b084      	sub	sp, #16
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005d44:	f3ef 8305 	mrs	r3, IPSR
 8005d48:	60bb      	str	r3, [r7, #8]
  return(result);
 8005d4a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d003      	beq.n	8005d58 <osDelay+0x1c>
    stat = osErrorISR;
 8005d50:	f06f 0305 	mvn.w	r3, #5
 8005d54:	60fb      	str	r3, [r7, #12]
 8005d56:	e007      	b.n	8005d68 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8005d58:	2300      	movs	r3, #0
 8005d5a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d002      	beq.n	8005d68 <osDelay+0x2c>
      vTaskDelay(ticks);
 8005d62:	6878      	ldr	r0, [r7, #4]
 8005d64:	f000 ff7c 	bl	8006c60 <vTaskDelay>
    }
  }

  return (stat);
 8005d68:	68fb      	ldr	r3, [r7, #12]
}
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	3710      	adds	r7, #16
 8005d6e:	46bd      	mov	sp, r7
 8005d70:	bd80      	pop	{r7, pc}
	...

08005d74 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005d74:	b480      	push	{r7}
 8005d76:	b085      	sub	sp, #20
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	60f8      	str	r0, [r7, #12]
 8005d7c:	60b9      	str	r1, [r7, #8]
 8005d7e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	4a07      	ldr	r2, [pc, #28]	; (8005da0 <vApplicationGetIdleTaskMemory+0x2c>)
 8005d84:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005d86:	68bb      	ldr	r3, [r7, #8]
 8005d88:	4a06      	ldr	r2, [pc, #24]	; (8005da4 <vApplicationGetIdleTaskMemory+0x30>)
 8005d8a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	2280      	movs	r2, #128	; 0x80
 8005d90:	601a      	str	r2, [r3, #0]
}
 8005d92:	bf00      	nop
 8005d94:	3714      	adds	r7, #20
 8005d96:	46bd      	mov	sp, r7
 8005d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9c:	4770      	bx	lr
 8005d9e:	bf00      	nop
 8005da0:	20000098 	.word	0x20000098
 8005da4:	200000f4 	.word	0x200000f4

08005da8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005da8:	b480      	push	{r7}
 8005daa:	b085      	sub	sp, #20
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	60f8      	str	r0, [r7, #12]
 8005db0:	60b9      	str	r1, [r7, #8]
 8005db2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	4a07      	ldr	r2, [pc, #28]	; (8005dd4 <vApplicationGetTimerTaskMemory+0x2c>)
 8005db8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005dba:	68bb      	ldr	r3, [r7, #8]
 8005dbc:	4a06      	ldr	r2, [pc, #24]	; (8005dd8 <vApplicationGetTimerTaskMemory+0x30>)
 8005dbe:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005dc6:	601a      	str	r2, [r3, #0]
}
 8005dc8:	bf00      	nop
 8005dca:	3714      	adds	r7, #20
 8005dcc:	46bd      	mov	sp, r7
 8005dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd2:	4770      	bx	lr
 8005dd4:	200002f4 	.word	0x200002f4
 8005dd8:	20000350 	.word	0x20000350

08005ddc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005ddc:	b480      	push	{r7}
 8005dde:	b083      	sub	sp, #12
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	f103 0208 	add.w	r2, r3, #8
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	f04f 32ff 	mov.w	r2, #4294967295
 8005df4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	f103 0208 	add.w	r2, r3, #8
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	f103 0208 	add.w	r2, r3, #8
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	2200      	movs	r2, #0
 8005e0e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005e10:	bf00      	nop
 8005e12:	370c      	adds	r7, #12
 8005e14:	46bd      	mov	sp, r7
 8005e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1a:	4770      	bx	lr

08005e1c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005e1c:	b480      	push	{r7}
 8005e1e:	b083      	sub	sp, #12
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	2200      	movs	r2, #0
 8005e28:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005e2a:	bf00      	nop
 8005e2c:	370c      	adds	r7, #12
 8005e2e:	46bd      	mov	sp, r7
 8005e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e34:	4770      	bx	lr

08005e36 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005e36:	b480      	push	{r7}
 8005e38:	b085      	sub	sp, #20
 8005e3a:	af00      	add	r7, sp, #0
 8005e3c:	6078      	str	r0, [r7, #4]
 8005e3e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	685b      	ldr	r3, [r3, #4]
 8005e44:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005e46:	683b      	ldr	r3, [r7, #0]
 8005e48:	68fa      	ldr	r2, [r7, #12]
 8005e4a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	689a      	ldr	r2, [r3, #8]
 8005e50:	683b      	ldr	r3, [r7, #0]
 8005e52:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	689b      	ldr	r3, [r3, #8]
 8005e58:	683a      	ldr	r2, [r7, #0]
 8005e5a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	683a      	ldr	r2, [r7, #0]
 8005e60:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005e62:	683b      	ldr	r3, [r7, #0]
 8005e64:	687a      	ldr	r2, [r7, #4]
 8005e66:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	1c5a      	adds	r2, r3, #1
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	601a      	str	r2, [r3, #0]
}
 8005e72:	bf00      	nop
 8005e74:	3714      	adds	r7, #20
 8005e76:	46bd      	mov	sp, r7
 8005e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7c:	4770      	bx	lr

08005e7e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005e7e:	b480      	push	{r7}
 8005e80:	b085      	sub	sp, #20
 8005e82:	af00      	add	r7, sp, #0
 8005e84:	6078      	str	r0, [r7, #4]
 8005e86:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005e88:	683b      	ldr	r3, [r7, #0]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005e8e:	68bb      	ldr	r3, [r7, #8]
 8005e90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e94:	d103      	bne.n	8005e9e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	691b      	ldr	r3, [r3, #16]
 8005e9a:	60fb      	str	r3, [r7, #12]
 8005e9c:	e00c      	b.n	8005eb8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	3308      	adds	r3, #8
 8005ea2:	60fb      	str	r3, [r7, #12]
 8005ea4:	e002      	b.n	8005eac <vListInsert+0x2e>
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	685b      	ldr	r3, [r3, #4]
 8005eaa:	60fb      	str	r3, [r7, #12]
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	685b      	ldr	r3, [r3, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	68ba      	ldr	r2, [r7, #8]
 8005eb4:	429a      	cmp	r2, r3
 8005eb6:	d2f6      	bcs.n	8005ea6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	685a      	ldr	r2, [r3, #4]
 8005ebc:	683b      	ldr	r3, [r7, #0]
 8005ebe:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005ec0:	683b      	ldr	r3, [r7, #0]
 8005ec2:	685b      	ldr	r3, [r3, #4]
 8005ec4:	683a      	ldr	r2, [r7, #0]
 8005ec6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005ec8:	683b      	ldr	r3, [r7, #0]
 8005eca:	68fa      	ldr	r2, [r7, #12]
 8005ecc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	683a      	ldr	r2, [r7, #0]
 8005ed2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005ed4:	683b      	ldr	r3, [r7, #0]
 8005ed6:	687a      	ldr	r2, [r7, #4]
 8005ed8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	1c5a      	adds	r2, r3, #1
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	601a      	str	r2, [r3, #0]
}
 8005ee4:	bf00      	nop
 8005ee6:	3714      	adds	r7, #20
 8005ee8:	46bd      	mov	sp, r7
 8005eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eee:	4770      	bx	lr

08005ef0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005ef0:	b480      	push	{r7}
 8005ef2:	b085      	sub	sp, #20
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	691b      	ldr	r3, [r3, #16]
 8005efc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	685b      	ldr	r3, [r3, #4]
 8005f02:	687a      	ldr	r2, [r7, #4]
 8005f04:	6892      	ldr	r2, [r2, #8]
 8005f06:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	689b      	ldr	r3, [r3, #8]
 8005f0c:	687a      	ldr	r2, [r7, #4]
 8005f0e:	6852      	ldr	r2, [r2, #4]
 8005f10:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	685b      	ldr	r3, [r3, #4]
 8005f16:	687a      	ldr	r2, [r7, #4]
 8005f18:	429a      	cmp	r2, r3
 8005f1a:	d103      	bne.n	8005f24 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	689a      	ldr	r2, [r3, #8]
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	2200      	movs	r2, #0
 8005f28:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	1e5a      	subs	r2, r3, #1
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	681b      	ldr	r3, [r3, #0]
}
 8005f38:	4618      	mov	r0, r3
 8005f3a:	3714      	adds	r7, #20
 8005f3c:	46bd      	mov	sp, r7
 8005f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f42:	4770      	bx	lr

08005f44 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005f44:	b580      	push	{r7, lr}
 8005f46:	b084      	sub	sp, #16
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	6078      	str	r0, [r7, #4]
 8005f4c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d10a      	bne.n	8005f6e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005f58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f5c:	f383 8811 	msr	BASEPRI, r3
 8005f60:	f3bf 8f6f 	isb	sy
 8005f64:	f3bf 8f4f 	dsb	sy
 8005f68:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005f6a:	bf00      	nop
 8005f6c:	e7fe      	b.n	8005f6c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005f6e:	f002 f851 	bl	8008014 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	681a      	ldr	r2, [r3, #0]
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f7a:	68f9      	ldr	r1, [r7, #12]
 8005f7c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005f7e:	fb01 f303 	mul.w	r3, r1, r3
 8005f82:	441a      	add	r2, r3
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	2200      	movs	r2, #0
 8005f8c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	681a      	ldr	r2, [r3, #0]
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	681a      	ldr	r2, [r3, #0]
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f9e:	3b01      	subs	r3, #1
 8005fa0:	68f9      	ldr	r1, [r7, #12]
 8005fa2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005fa4:	fb01 f303 	mul.w	r3, r1, r3
 8005fa8:	441a      	add	r2, r3
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	22ff      	movs	r2, #255	; 0xff
 8005fb2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	22ff      	movs	r2, #255	; 0xff
 8005fba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005fbe:	683b      	ldr	r3, [r7, #0]
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d114      	bne.n	8005fee <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	691b      	ldr	r3, [r3, #16]
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d01a      	beq.n	8006002 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	3310      	adds	r3, #16
 8005fd0:	4618      	mov	r0, r3
 8005fd2:	f001 f903 	bl	80071dc <xTaskRemoveFromEventList>
 8005fd6:	4603      	mov	r3, r0
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d012      	beq.n	8006002 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005fdc:	4b0c      	ldr	r3, [pc, #48]	; (8006010 <xQueueGenericReset+0xcc>)
 8005fde:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005fe2:	601a      	str	r2, [r3, #0]
 8005fe4:	f3bf 8f4f 	dsb	sy
 8005fe8:	f3bf 8f6f 	isb	sy
 8005fec:	e009      	b.n	8006002 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	3310      	adds	r3, #16
 8005ff2:	4618      	mov	r0, r3
 8005ff4:	f7ff fef2 	bl	8005ddc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	3324      	adds	r3, #36	; 0x24
 8005ffc:	4618      	mov	r0, r3
 8005ffe:	f7ff feed 	bl	8005ddc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006002:	f002 f837 	bl	8008074 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006006:	2301      	movs	r3, #1
}
 8006008:	4618      	mov	r0, r3
 800600a:	3710      	adds	r7, #16
 800600c:	46bd      	mov	sp, r7
 800600e:	bd80      	pop	{r7, pc}
 8006010:	e000ed04 	.word	0xe000ed04

08006014 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006014:	b580      	push	{r7, lr}
 8006016:	b08e      	sub	sp, #56	; 0x38
 8006018:	af02      	add	r7, sp, #8
 800601a:	60f8      	str	r0, [r7, #12]
 800601c:	60b9      	str	r1, [r7, #8]
 800601e:	607a      	str	r2, [r7, #4]
 8006020:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	2b00      	cmp	r3, #0
 8006026:	d10a      	bne.n	800603e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8006028:	f04f 0350 	mov.w	r3, #80	; 0x50
 800602c:	f383 8811 	msr	BASEPRI, r3
 8006030:	f3bf 8f6f 	isb	sy
 8006034:	f3bf 8f4f 	dsb	sy
 8006038:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800603a:	bf00      	nop
 800603c:	e7fe      	b.n	800603c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800603e:	683b      	ldr	r3, [r7, #0]
 8006040:	2b00      	cmp	r3, #0
 8006042:	d10a      	bne.n	800605a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8006044:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006048:	f383 8811 	msr	BASEPRI, r3
 800604c:	f3bf 8f6f 	isb	sy
 8006050:	f3bf 8f4f 	dsb	sy
 8006054:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006056:	bf00      	nop
 8006058:	e7fe      	b.n	8006058 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	2b00      	cmp	r3, #0
 800605e:	d002      	beq.n	8006066 <xQueueGenericCreateStatic+0x52>
 8006060:	68bb      	ldr	r3, [r7, #8]
 8006062:	2b00      	cmp	r3, #0
 8006064:	d001      	beq.n	800606a <xQueueGenericCreateStatic+0x56>
 8006066:	2301      	movs	r3, #1
 8006068:	e000      	b.n	800606c <xQueueGenericCreateStatic+0x58>
 800606a:	2300      	movs	r3, #0
 800606c:	2b00      	cmp	r3, #0
 800606e:	d10a      	bne.n	8006086 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8006070:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006074:	f383 8811 	msr	BASEPRI, r3
 8006078:	f3bf 8f6f 	isb	sy
 800607c:	f3bf 8f4f 	dsb	sy
 8006080:	623b      	str	r3, [r7, #32]
}
 8006082:	bf00      	nop
 8006084:	e7fe      	b.n	8006084 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	2b00      	cmp	r3, #0
 800608a:	d102      	bne.n	8006092 <xQueueGenericCreateStatic+0x7e>
 800608c:	68bb      	ldr	r3, [r7, #8]
 800608e:	2b00      	cmp	r3, #0
 8006090:	d101      	bne.n	8006096 <xQueueGenericCreateStatic+0x82>
 8006092:	2301      	movs	r3, #1
 8006094:	e000      	b.n	8006098 <xQueueGenericCreateStatic+0x84>
 8006096:	2300      	movs	r3, #0
 8006098:	2b00      	cmp	r3, #0
 800609a:	d10a      	bne.n	80060b2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800609c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060a0:	f383 8811 	msr	BASEPRI, r3
 80060a4:	f3bf 8f6f 	isb	sy
 80060a8:	f3bf 8f4f 	dsb	sy
 80060ac:	61fb      	str	r3, [r7, #28]
}
 80060ae:	bf00      	nop
 80060b0:	e7fe      	b.n	80060b0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80060b2:	2350      	movs	r3, #80	; 0x50
 80060b4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80060b6:	697b      	ldr	r3, [r7, #20]
 80060b8:	2b50      	cmp	r3, #80	; 0x50
 80060ba:	d00a      	beq.n	80060d2 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80060bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060c0:	f383 8811 	msr	BASEPRI, r3
 80060c4:	f3bf 8f6f 	isb	sy
 80060c8:	f3bf 8f4f 	dsb	sy
 80060cc:	61bb      	str	r3, [r7, #24]
}
 80060ce:	bf00      	nop
 80060d0:	e7fe      	b.n	80060d0 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80060d2:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80060d4:	683b      	ldr	r3, [r7, #0]
 80060d6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80060d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d00d      	beq.n	80060fa <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80060de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060e0:	2201      	movs	r2, #1
 80060e2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80060e6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80060ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060ec:	9300      	str	r3, [sp, #0]
 80060ee:	4613      	mov	r3, r2
 80060f0:	687a      	ldr	r2, [r7, #4]
 80060f2:	68b9      	ldr	r1, [r7, #8]
 80060f4:	68f8      	ldr	r0, [r7, #12]
 80060f6:	f000 f805 	bl	8006104 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80060fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80060fc:	4618      	mov	r0, r3
 80060fe:	3730      	adds	r7, #48	; 0x30
 8006100:	46bd      	mov	sp, r7
 8006102:	bd80      	pop	{r7, pc}

08006104 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006104:	b580      	push	{r7, lr}
 8006106:	b084      	sub	sp, #16
 8006108:	af00      	add	r7, sp, #0
 800610a:	60f8      	str	r0, [r7, #12]
 800610c:	60b9      	str	r1, [r7, #8]
 800610e:	607a      	str	r2, [r7, #4]
 8006110:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006112:	68bb      	ldr	r3, [r7, #8]
 8006114:	2b00      	cmp	r3, #0
 8006116:	d103      	bne.n	8006120 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006118:	69bb      	ldr	r3, [r7, #24]
 800611a:	69ba      	ldr	r2, [r7, #24]
 800611c:	601a      	str	r2, [r3, #0]
 800611e:	e002      	b.n	8006126 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006120:	69bb      	ldr	r3, [r7, #24]
 8006122:	687a      	ldr	r2, [r7, #4]
 8006124:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006126:	69bb      	ldr	r3, [r7, #24]
 8006128:	68fa      	ldr	r2, [r7, #12]
 800612a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800612c:	69bb      	ldr	r3, [r7, #24]
 800612e:	68ba      	ldr	r2, [r7, #8]
 8006130:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006132:	2101      	movs	r1, #1
 8006134:	69b8      	ldr	r0, [r7, #24]
 8006136:	f7ff ff05 	bl	8005f44 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800613a:	69bb      	ldr	r3, [r7, #24]
 800613c:	78fa      	ldrb	r2, [r7, #3]
 800613e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006142:	bf00      	nop
 8006144:	3710      	adds	r7, #16
 8006146:	46bd      	mov	sp, r7
 8006148:	bd80      	pop	{r7, pc}
	...

0800614c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800614c:	b580      	push	{r7, lr}
 800614e:	b08e      	sub	sp, #56	; 0x38
 8006150:	af00      	add	r7, sp, #0
 8006152:	60f8      	str	r0, [r7, #12]
 8006154:	60b9      	str	r1, [r7, #8]
 8006156:	607a      	str	r2, [r7, #4]
 8006158:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800615a:	2300      	movs	r3, #0
 800615c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006162:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006164:	2b00      	cmp	r3, #0
 8006166:	d10a      	bne.n	800617e <xQueueGenericSend+0x32>
	__asm volatile
 8006168:	f04f 0350 	mov.w	r3, #80	; 0x50
 800616c:	f383 8811 	msr	BASEPRI, r3
 8006170:	f3bf 8f6f 	isb	sy
 8006174:	f3bf 8f4f 	dsb	sy
 8006178:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800617a:	bf00      	nop
 800617c:	e7fe      	b.n	800617c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800617e:	68bb      	ldr	r3, [r7, #8]
 8006180:	2b00      	cmp	r3, #0
 8006182:	d103      	bne.n	800618c <xQueueGenericSend+0x40>
 8006184:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006186:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006188:	2b00      	cmp	r3, #0
 800618a:	d101      	bne.n	8006190 <xQueueGenericSend+0x44>
 800618c:	2301      	movs	r3, #1
 800618e:	e000      	b.n	8006192 <xQueueGenericSend+0x46>
 8006190:	2300      	movs	r3, #0
 8006192:	2b00      	cmp	r3, #0
 8006194:	d10a      	bne.n	80061ac <xQueueGenericSend+0x60>
	__asm volatile
 8006196:	f04f 0350 	mov.w	r3, #80	; 0x50
 800619a:	f383 8811 	msr	BASEPRI, r3
 800619e:	f3bf 8f6f 	isb	sy
 80061a2:	f3bf 8f4f 	dsb	sy
 80061a6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80061a8:	bf00      	nop
 80061aa:	e7fe      	b.n	80061aa <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80061ac:	683b      	ldr	r3, [r7, #0]
 80061ae:	2b02      	cmp	r3, #2
 80061b0:	d103      	bne.n	80061ba <xQueueGenericSend+0x6e>
 80061b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061b6:	2b01      	cmp	r3, #1
 80061b8:	d101      	bne.n	80061be <xQueueGenericSend+0x72>
 80061ba:	2301      	movs	r3, #1
 80061bc:	e000      	b.n	80061c0 <xQueueGenericSend+0x74>
 80061be:	2300      	movs	r3, #0
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d10a      	bne.n	80061da <xQueueGenericSend+0x8e>
	__asm volatile
 80061c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061c8:	f383 8811 	msr	BASEPRI, r3
 80061cc:	f3bf 8f6f 	isb	sy
 80061d0:	f3bf 8f4f 	dsb	sy
 80061d4:	623b      	str	r3, [r7, #32]
}
 80061d6:	bf00      	nop
 80061d8:	e7fe      	b.n	80061d8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80061da:	f001 f9bd 	bl	8007558 <xTaskGetSchedulerState>
 80061de:	4603      	mov	r3, r0
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d102      	bne.n	80061ea <xQueueGenericSend+0x9e>
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d101      	bne.n	80061ee <xQueueGenericSend+0xa2>
 80061ea:	2301      	movs	r3, #1
 80061ec:	e000      	b.n	80061f0 <xQueueGenericSend+0xa4>
 80061ee:	2300      	movs	r3, #0
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d10a      	bne.n	800620a <xQueueGenericSend+0xbe>
	__asm volatile
 80061f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061f8:	f383 8811 	msr	BASEPRI, r3
 80061fc:	f3bf 8f6f 	isb	sy
 8006200:	f3bf 8f4f 	dsb	sy
 8006204:	61fb      	str	r3, [r7, #28]
}
 8006206:	bf00      	nop
 8006208:	e7fe      	b.n	8006208 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800620a:	f001 ff03 	bl	8008014 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800620e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006210:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006212:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006214:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006216:	429a      	cmp	r2, r3
 8006218:	d302      	bcc.n	8006220 <xQueueGenericSend+0xd4>
 800621a:	683b      	ldr	r3, [r7, #0]
 800621c:	2b02      	cmp	r3, #2
 800621e:	d129      	bne.n	8006274 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006220:	683a      	ldr	r2, [r7, #0]
 8006222:	68b9      	ldr	r1, [r7, #8]
 8006224:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006226:	f000 fa0b 	bl	8006640 <prvCopyDataToQueue>
 800622a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800622c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800622e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006230:	2b00      	cmp	r3, #0
 8006232:	d010      	beq.n	8006256 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006234:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006236:	3324      	adds	r3, #36	; 0x24
 8006238:	4618      	mov	r0, r3
 800623a:	f000 ffcf 	bl	80071dc <xTaskRemoveFromEventList>
 800623e:	4603      	mov	r3, r0
 8006240:	2b00      	cmp	r3, #0
 8006242:	d013      	beq.n	800626c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006244:	4b3f      	ldr	r3, [pc, #252]	; (8006344 <xQueueGenericSend+0x1f8>)
 8006246:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800624a:	601a      	str	r2, [r3, #0]
 800624c:	f3bf 8f4f 	dsb	sy
 8006250:	f3bf 8f6f 	isb	sy
 8006254:	e00a      	b.n	800626c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006256:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006258:	2b00      	cmp	r3, #0
 800625a:	d007      	beq.n	800626c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800625c:	4b39      	ldr	r3, [pc, #228]	; (8006344 <xQueueGenericSend+0x1f8>)
 800625e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006262:	601a      	str	r2, [r3, #0]
 8006264:	f3bf 8f4f 	dsb	sy
 8006268:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800626c:	f001 ff02 	bl	8008074 <vPortExitCritical>
				return pdPASS;
 8006270:	2301      	movs	r3, #1
 8006272:	e063      	b.n	800633c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2b00      	cmp	r3, #0
 8006278:	d103      	bne.n	8006282 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800627a:	f001 fefb 	bl	8008074 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800627e:	2300      	movs	r3, #0
 8006280:	e05c      	b.n	800633c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006282:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006284:	2b00      	cmp	r3, #0
 8006286:	d106      	bne.n	8006296 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006288:	f107 0314 	add.w	r3, r7, #20
 800628c:	4618      	mov	r0, r3
 800628e:	f001 f809 	bl	80072a4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006292:	2301      	movs	r3, #1
 8006294:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006296:	f001 feed 	bl	8008074 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800629a:	f000 fd7b 	bl	8006d94 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800629e:	f001 feb9 	bl	8008014 <vPortEnterCritical>
 80062a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062a4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80062a8:	b25b      	sxtb	r3, r3
 80062aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062ae:	d103      	bne.n	80062b8 <xQueueGenericSend+0x16c>
 80062b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062b2:	2200      	movs	r2, #0
 80062b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80062b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062ba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80062be:	b25b      	sxtb	r3, r3
 80062c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062c4:	d103      	bne.n	80062ce <xQueueGenericSend+0x182>
 80062c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062c8:	2200      	movs	r2, #0
 80062ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80062ce:	f001 fed1 	bl	8008074 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80062d2:	1d3a      	adds	r2, r7, #4
 80062d4:	f107 0314 	add.w	r3, r7, #20
 80062d8:	4611      	mov	r1, r2
 80062da:	4618      	mov	r0, r3
 80062dc:	f000 fff8 	bl	80072d0 <xTaskCheckForTimeOut>
 80062e0:	4603      	mov	r3, r0
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d124      	bne.n	8006330 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80062e6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80062e8:	f000 faa2 	bl	8006830 <prvIsQueueFull>
 80062ec:	4603      	mov	r3, r0
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d018      	beq.n	8006324 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80062f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062f4:	3310      	adds	r3, #16
 80062f6:	687a      	ldr	r2, [r7, #4]
 80062f8:	4611      	mov	r1, r2
 80062fa:	4618      	mov	r0, r3
 80062fc:	f000 ff1e 	bl	800713c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006300:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006302:	f000 fa2d 	bl	8006760 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006306:	f000 fd53 	bl	8006db0 <xTaskResumeAll>
 800630a:	4603      	mov	r3, r0
 800630c:	2b00      	cmp	r3, #0
 800630e:	f47f af7c 	bne.w	800620a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8006312:	4b0c      	ldr	r3, [pc, #48]	; (8006344 <xQueueGenericSend+0x1f8>)
 8006314:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006318:	601a      	str	r2, [r3, #0]
 800631a:	f3bf 8f4f 	dsb	sy
 800631e:	f3bf 8f6f 	isb	sy
 8006322:	e772      	b.n	800620a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006324:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006326:	f000 fa1b 	bl	8006760 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800632a:	f000 fd41 	bl	8006db0 <xTaskResumeAll>
 800632e:	e76c      	b.n	800620a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006330:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006332:	f000 fa15 	bl	8006760 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006336:	f000 fd3b 	bl	8006db0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800633a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800633c:	4618      	mov	r0, r3
 800633e:	3738      	adds	r7, #56	; 0x38
 8006340:	46bd      	mov	sp, r7
 8006342:	bd80      	pop	{r7, pc}
 8006344:	e000ed04 	.word	0xe000ed04

08006348 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006348:	b580      	push	{r7, lr}
 800634a:	b090      	sub	sp, #64	; 0x40
 800634c:	af00      	add	r7, sp, #0
 800634e:	60f8      	str	r0, [r7, #12]
 8006350:	60b9      	str	r1, [r7, #8]
 8006352:	607a      	str	r2, [r7, #4]
 8006354:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800635a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800635c:	2b00      	cmp	r3, #0
 800635e:	d10a      	bne.n	8006376 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8006360:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006364:	f383 8811 	msr	BASEPRI, r3
 8006368:	f3bf 8f6f 	isb	sy
 800636c:	f3bf 8f4f 	dsb	sy
 8006370:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006372:	bf00      	nop
 8006374:	e7fe      	b.n	8006374 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006376:	68bb      	ldr	r3, [r7, #8]
 8006378:	2b00      	cmp	r3, #0
 800637a:	d103      	bne.n	8006384 <xQueueGenericSendFromISR+0x3c>
 800637c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800637e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006380:	2b00      	cmp	r3, #0
 8006382:	d101      	bne.n	8006388 <xQueueGenericSendFromISR+0x40>
 8006384:	2301      	movs	r3, #1
 8006386:	e000      	b.n	800638a <xQueueGenericSendFromISR+0x42>
 8006388:	2300      	movs	r3, #0
 800638a:	2b00      	cmp	r3, #0
 800638c:	d10a      	bne.n	80063a4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800638e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006392:	f383 8811 	msr	BASEPRI, r3
 8006396:	f3bf 8f6f 	isb	sy
 800639a:	f3bf 8f4f 	dsb	sy
 800639e:	627b      	str	r3, [r7, #36]	; 0x24
}
 80063a0:	bf00      	nop
 80063a2:	e7fe      	b.n	80063a2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80063a4:	683b      	ldr	r3, [r7, #0]
 80063a6:	2b02      	cmp	r3, #2
 80063a8:	d103      	bne.n	80063b2 <xQueueGenericSendFromISR+0x6a>
 80063aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063ae:	2b01      	cmp	r3, #1
 80063b0:	d101      	bne.n	80063b6 <xQueueGenericSendFromISR+0x6e>
 80063b2:	2301      	movs	r3, #1
 80063b4:	e000      	b.n	80063b8 <xQueueGenericSendFromISR+0x70>
 80063b6:	2300      	movs	r3, #0
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d10a      	bne.n	80063d2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80063bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063c0:	f383 8811 	msr	BASEPRI, r3
 80063c4:	f3bf 8f6f 	isb	sy
 80063c8:	f3bf 8f4f 	dsb	sy
 80063cc:	623b      	str	r3, [r7, #32]
}
 80063ce:	bf00      	nop
 80063d0:	e7fe      	b.n	80063d0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80063d2:	f001 ff01 	bl	80081d8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80063d6:	f3ef 8211 	mrs	r2, BASEPRI
 80063da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063de:	f383 8811 	msr	BASEPRI, r3
 80063e2:	f3bf 8f6f 	isb	sy
 80063e6:	f3bf 8f4f 	dsb	sy
 80063ea:	61fa      	str	r2, [r7, #28]
 80063ec:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80063ee:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80063f0:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80063f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80063f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063fa:	429a      	cmp	r2, r3
 80063fc:	d302      	bcc.n	8006404 <xQueueGenericSendFromISR+0xbc>
 80063fe:	683b      	ldr	r3, [r7, #0]
 8006400:	2b02      	cmp	r3, #2
 8006402:	d12f      	bne.n	8006464 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006404:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006406:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800640a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800640e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006410:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006412:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006414:	683a      	ldr	r2, [r7, #0]
 8006416:	68b9      	ldr	r1, [r7, #8]
 8006418:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800641a:	f000 f911 	bl	8006640 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800641e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8006422:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006426:	d112      	bne.n	800644e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006428:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800642a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800642c:	2b00      	cmp	r3, #0
 800642e:	d016      	beq.n	800645e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006430:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006432:	3324      	adds	r3, #36	; 0x24
 8006434:	4618      	mov	r0, r3
 8006436:	f000 fed1 	bl	80071dc <xTaskRemoveFromEventList>
 800643a:	4603      	mov	r3, r0
 800643c:	2b00      	cmp	r3, #0
 800643e:	d00e      	beq.n	800645e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	2b00      	cmp	r3, #0
 8006444:	d00b      	beq.n	800645e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	2201      	movs	r2, #1
 800644a:	601a      	str	r2, [r3, #0]
 800644c:	e007      	b.n	800645e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800644e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006452:	3301      	adds	r3, #1
 8006454:	b2db      	uxtb	r3, r3
 8006456:	b25a      	sxtb	r2, r3
 8006458:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800645a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800645e:	2301      	movs	r3, #1
 8006460:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8006462:	e001      	b.n	8006468 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006464:	2300      	movs	r3, #0
 8006466:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006468:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800646a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800646c:	697b      	ldr	r3, [r7, #20]
 800646e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006472:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006474:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8006476:	4618      	mov	r0, r3
 8006478:	3740      	adds	r7, #64	; 0x40
 800647a:	46bd      	mov	sp, r7
 800647c:	bd80      	pop	{r7, pc}
	...

08006480 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006480:	b580      	push	{r7, lr}
 8006482:	b08c      	sub	sp, #48	; 0x30
 8006484:	af00      	add	r7, sp, #0
 8006486:	60f8      	str	r0, [r7, #12]
 8006488:	60b9      	str	r1, [r7, #8]
 800648a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800648c:	2300      	movs	r3, #0
 800648e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006494:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006496:	2b00      	cmp	r3, #0
 8006498:	d10a      	bne.n	80064b0 <xQueueReceive+0x30>
	__asm volatile
 800649a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800649e:	f383 8811 	msr	BASEPRI, r3
 80064a2:	f3bf 8f6f 	isb	sy
 80064a6:	f3bf 8f4f 	dsb	sy
 80064aa:	623b      	str	r3, [r7, #32]
}
 80064ac:	bf00      	nop
 80064ae:	e7fe      	b.n	80064ae <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80064b0:	68bb      	ldr	r3, [r7, #8]
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d103      	bne.n	80064be <xQueueReceive+0x3e>
 80064b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d101      	bne.n	80064c2 <xQueueReceive+0x42>
 80064be:	2301      	movs	r3, #1
 80064c0:	e000      	b.n	80064c4 <xQueueReceive+0x44>
 80064c2:	2300      	movs	r3, #0
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d10a      	bne.n	80064de <xQueueReceive+0x5e>
	__asm volatile
 80064c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064cc:	f383 8811 	msr	BASEPRI, r3
 80064d0:	f3bf 8f6f 	isb	sy
 80064d4:	f3bf 8f4f 	dsb	sy
 80064d8:	61fb      	str	r3, [r7, #28]
}
 80064da:	bf00      	nop
 80064dc:	e7fe      	b.n	80064dc <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80064de:	f001 f83b 	bl	8007558 <xTaskGetSchedulerState>
 80064e2:	4603      	mov	r3, r0
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d102      	bne.n	80064ee <xQueueReceive+0x6e>
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d101      	bne.n	80064f2 <xQueueReceive+0x72>
 80064ee:	2301      	movs	r3, #1
 80064f0:	e000      	b.n	80064f4 <xQueueReceive+0x74>
 80064f2:	2300      	movs	r3, #0
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d10a      	bne.n	800650e <xQueueReceive+0x8e>
	__asm volatile
 80064f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064fc:	f383 8811 	msr	BASEPRI, r3
 8006500:	f3bf 8f6f 	isb	sy
 8006504:	f3bf 8f4f 	dsb	sy
 8006508:	61bb      	str	r3, [r7, #24]
}
 800650a:	bf00      	nop
 800650c:	e7fe      	b.n	800650c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800650e:	f001 fd81 	bl	8008014 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006512:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006514:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006516:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800651a:	2b00      	cmp	r3, #0
 800651c:	d01f      	beq.n	800655e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800651e:	68b9      	ldr	r1, [r7, #8]
 8006520:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006522:	f000 f8f7 	bl	8006714 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006528:	1e5a      	subs	r2, r3, #1
 800652a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800652c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800652e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006530:	691b      	ldr	r3, [r3, #16]
 8006532:	2b00      	cmp	r3, #0
 8006534:	d00f      	beq.n	8006556 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006536:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006538:	3310      	adds	r3, #16
 800653a:	4618      	mov	r0, r3
 800653c:	f000 fe4e 	bl	80071dc <xTaskRemoveFromEventList>
 8006540:	4603      	mov	r3, r0
 8006542:	2b00      	cmp	r3, #0
 8006544:	d007      	beq.n	8006556 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006546:	4b3d      	ldr	r3, [pc, #244]	; (800663c <xQueueReceive+0x1bc>)
 8006548:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800654c:	601a      	str	r2, [r3, #0]
 800654e:	f3bf 8f4f 	dsb	sy
 8006552:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006556:	f001 fd8d 	bl	8008074 <vPortExitCritical>
				return pdPASS;
 800655a:	2301      	movs	r3, #1
 800655c:	e069      	b.n	8006632 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	2b00      	cmp	r3, #0
 8006562:	d103      	bne.n	800656c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006564:	f001 fd86 	bl	8008074 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006568:	2300      	movs	r3, #0
 800656a:	e062      	b.n	8006632 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800656c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800656e:	2b00      	cmp	r3, #0
 8006570:	d106      	bne.n	8006580 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006572:	f107 0310 	add.w	r3, r7, #16
 8006576:	4618      	mov	r0, r3
 8006578:	f000 fe94 	bl	80072a4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800657c:	2301      	movs	r3, #1
 800657e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006580:	f001 fd78 	bl	8008074 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006584:	f000 fc06 	bl	8006d94 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006588:	f001 fd44 	bl	8008014 <vPortEnterCritical>
 800658c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800658e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006592:	b25b      	sxtb	r3, r3
 8006594:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006598:	d103      	bne.n	80065a2 <xQueueReceive+0x122>
 800659a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800659c:	2200      	movs	r2, #0
 800659e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80065a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065a4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80065a8:	b25b      	sxtb	r3, r3
 80065aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065ae:	d103      	bne.n	80065b8 <xQueueReceive+0x138>
 80065b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065b2:	2200      	movs	r2, #0
 80065b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80065b8:	f001 fd5c 	bl	8008074 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80065bc:	1d3a      	adds	r2, r7, #4
 80065be:	f107 0310 	add.w	r3, r7, #16
 80065c2:	4611      	mov	r1, r2
 80065c4:	4618      	mov	r0, r3
 80065c6:	f000 fe83 	bl	80072d0 <xTaskCheckForTimeOut>
 80065ca:	4603      	mov	r3, r0
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d123      	bne.n	8006618 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80065d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80065d2:	f000 f917 	bl	8006804 <prvIsQueueEmpty>
 80065d6:	4603      	mov	r3, r0
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d017      	beq.n	800660c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80065dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065de:	3324      	adds	r3, #36	; 0x24
 80065e0:	687a      	ldr	r2, [r7, #4]
 80065e2:	4611      	mov	r1, r2
 80065e4:	4618      	mov	r0, r3
 80065e6:	f000 fda9 	bl	800713c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80065ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80065ec:	f000 f8b8 	bl	8006760 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80065f0:	f000 fbde 	bl	8006db0 <xTaskResumeAll>
 80065f4:	4603      	mov	r3, r0
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d189      	bne.n	800650e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80065fa:	4b10      	ldr	r3, [pc, #64]	; (800663c <xQueueReceive+0x1bc>)
 80065fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006600:	601a      	str	r2, [r3, #0]
 8006602:	f3bf 8f4f 	dsb	sy
 8006606:	f3bf 8f6f 	isb	sy
 800660a:	e780      	b.n	800650e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800660c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800660e:	f000 f8a7 	bl	8006760 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006612:	f000 fbcd 	bl	8006db0 <xTaskResumeAll>
 8006616:	e77a      	b.n	800650e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006618:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800661a:	f000 f8a1 	bl	8006760 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800661e:	f000 fbc7 	bl	8006db0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006622:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006624:	f000 f8ee 	bl	8006804 <prvIsQueueEmpty>
 8006628:	4603      	mov	r3, r0
 800662a:	2b00      	cmp	r3, #0
 800662c:	f43f af6f 	beq.w	800650e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006630:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006632:	4618      	mov	r0, r3
 8006634:	3730      	adds	r7, #48	; 0x30
 8006636:	46bd      	mov	sp, r7
 8006638:	bd80      	pop	{r7, pc}
 800663a:	bf00      	nop
 800663c:	e000ed04 	.word	0xe000ed04

08006640 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006640:	b580      	push	{r7, lr}
 8006642:	b086      	sub	sp, #24
 8006644:	af00      	add	r7, sp, #0
 8006646:	60f8      	str	r0, [r7, #12]
 8006648:	60b9      	str	r1, [r7, #8]
 800664a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800664c:	2300      	movs	r3, #0
 800664e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006654:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800665a:	2b00      	cmp	r3, #0
 800665c:	d10d      	bne.n	800667a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	2b00      	cmp	r3, #0
 8006664:	d14d      	bne.n	8006702 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	689b      	ldr	r3, [r3, #8]
 800666a:	4618      	mov	r0, r3
 800666c:	f000 ff92 	bl	8007594 <xTaskPriorityDisinherit>
 8006670:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	2200      	movs	r2, #0
 8006676:	609a      	str	r2, [r3, #8]
 8006678:	e043      	b.n	8006702 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	2b00      	cmp	r3, #0
 800667e:	d119      	bne.n	80066b4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	6858      	ldr	r0, [r3, #4]
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006688:	461a      	mov	r2, r3
 800668a:	68b9      	ldr	r1, [r7, #8]
 800668c:	f001 fff8 	bl	8008680 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	685a      	ldr	r2, [r3, #4]
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006698:	441a      	add	r2, r3
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	685a      	ldr	r2, [r3, #4]
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	689b      	ldr	r3, [r3, #8]
 80066a6:	429a      	cmp	r2, r3
 80066a8:	d32b      	bcc.n	8006702 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	681a      	ldr	r2, [r3, #0]
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	605a      	str	r2, [r3, #4]
 80066b2:	e026      	b.n	8006702 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	68d8      	ldr	r0, [r3, #12]
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066bc:	461a      	mov	r2, r3
 80066be:	68b9      	ldr	r1, [r7, #8]
 80066c0:	f001 ffde 	bl	8008680 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	68da      	ldr	r2, [r3, #12]
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066cc:	425b      	negs	r3, r3
 80066ce:	441a      	add	r2, r3
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	68da      	ldr	r2, [r3, #12]
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	429a      	cmp	r2, r3
 80066de:	d207      	bcs.n	80066f0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	689a      	ldr	r2, [r3, #8]
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066e8:	425b      	negs	r3, r3
 80066ea:	441a      	add	r2, r3
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	2b02      	cmp	r3, #2
 80066f4:	d105      	bne.n	8006702 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80066f6:	693b      	ldr	r3, [r7, #16]
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d002      	beq.n	8006702 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80066fc:	693b      	ldr	r3, [r7, #16]
 80066fe:	3b01      	subs	r3, #1
 8006700:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006702:	693b      	ldr	r3, [r7, #16]
 8006704:	1c5a      	adds	r2, r3, #1
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800670a:	697b      	ldr	r3, [r7, #20]
}
 800670c:	4618      	mov	r0, r3
 800670e:	3718      	adds	r7, #24
 8006710:	46bd      	mov	sp, r7
 8006712:	bd80      	pop	{r7, pc}

08006714 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006714:	b580      	push	{r7, lr}
 8006716:	b082      	sub	sp, #8
 8006718:	af00      	add	r7, sp, #0
 800671a:	6078      	str	r0, [r7, #4]
 800671c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006722:	2b00      	cmp	r3, #0
 8006724:	d018      	beq.n	8006758 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	68da      	ldr	r2, [r3, #12]
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800672e:	441a      	add	r2, r3
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	68da      	ldr	r2, [r3, #12]
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	689b      	ldr	r3, [r3, #8]
 800673c:	429a      	cmp	r2, r3
 800673e:	d303      	bcc.n	8006748 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681a      	ldr	r2, [r3, #0]
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	68d9      	ldr	r1, [r3, #12]
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006750:	461a      	mov	r2, r3
 8006752:	6838      	ldr	r0, [r7, #0]
 8006754:	f001 ff94 	bl	8008680 <memcpy>
	}
}
 8006758:	bf00      	nop
 800675a:	3708      	adds	r7, #8
 800675c:	46bd      	mov	sp, r7
 800675e:	bd80      	pop	{r7, pc}

08006760 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006760:	b580      	push	{r7, lr}
 8006762:	b084      	sub	sp, #16
 8006764:	af00      	add	r7, sp, #0
 8006766:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006768:	f001 fc54 	bl	8008014 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006772:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006774:	e011      	b.n	800679a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800677a:	2b00      	cmp	r3, #0
 800677c:	d012      	beq.n	80067a4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	3324      	adds	r3, #36	; 0x24
 8006782:	4618      	mov	r0, r3
 8006784:	f000 fd2a 	bl	80071dc <xTaskRemoveFromEventList>
 8006788:	4603      	mov	r3, r0
 800678a:	2b00      	cmp	r3, #0
 800678c:	d001      	beq.n	8006792 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800678e:	f000 fe01 	bl	8007394 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006792:	7bfb      	ldrb	r3, [r7, #15]
 8006794:	3b01      	subs	r3, #1
 8006796:	b2db      	uxtb	r3, r3
 8006798:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800679a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800679e:	2b00      	cmp	r3, #0
 80067a0:	dce9      	bgt.n	8006776 <prvUnlockQueue+0x16>
 80067a2:	e000      	b.n	80067a6 <prvUnlockQueue+0x46>
					break;
 80067a4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	22ff      	movs	r2, #255	; 0xff
 80067aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80067ae:	f001 fc61 	bl	8008074 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80067b2:	f001 fc2f 	bl	8008014 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80067bc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80067be:	e011      	b.n	80067e4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	691b      	ldr	r3, [r3, #16]
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d012      	beq.n	80067ee <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	3310      	adds	r3, #16
 80067cc:	4618      	mov	r0, r3
 80067ce:	f000 fd05 	bl	80071dc <xTaskRemoveFromEventList>
 80067d2:	4603      	mov	r3, r0
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d001      	beq.n	80067dc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80067d8:	f000 fddc 	bl	8007394 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80067dc:	7bbb      	ldrb	r3, [r7, #14]
 80067de:	3b01      	subs	r3, #1
 80067e0:	b2db      	uxtb	r3, r3
 80067e2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80067e4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	dce9      	bgt.n	80067c0 <prvUnlockQueue+0x60>
 80067ec:	e000      	b.n	80067f0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80067ee:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	22ff      	movs	r2, #255	; 0xff
 80067f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80067f8:	f001 fc3c 	bl	8008074 <vPortExitCritical>
}
 80067fc:	bf00      	nop
 80067fe:	3710      	adds	r7, #16
 8006800:	46bd      	mov	sp, r7
 8006802:	bd80      	pop	{r7, pc}

08006804 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006804:	b580      	push	{r7, lr}
 8006806:	b084      	sub	sp, #16
 8006808:	af00      	add	r7, sp, #0
 800680a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800680c:	f001 fc02 	bl	8008014 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006814:	2b00      	cmp	r3, #0
 8006816:	d102      	bne.n	800681e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006818:	2301      	movs	r3, #1
 800681a:	60fb      	str	r3, [r7, #12]
 800681c:	e001      	b.n	8006822 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800681e:	2300      	movs	r3, #0
 8006820:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006822:	f001 fc27 	bl	8008074 <vPortExitCritical>

	return xReturn;
 8006826:	68fb      	ldr	r3, [r7, #12]
}
 8006828:	4618      	mov	r0, r3
 800682a:	3710      	adds	r7, #16
 800682c:	46bd      	mov	sp, r7
 800682e:	bd80      	pop	{r7, pc}

08006830 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006830:	b580      	push	{r7, lr}
 8006832:	b084      	sub	sp, #16
 8006834:	af00      	add	r7, sp, #0
 8006836:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006838:	f001 fbec 	bl	8008014 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006844:	429a      	cmp	r2, r3
 8006846:	d102      	bne.n	800684e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006848:	2301      	movs	r3, #1
 800684a:	60fb      	str	r3, [r7, #12]
 800684c:	e001      	b.n	8006852 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800684e:	2300      	movs	r3, #0
 8006850:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006852:	f001 fc0f 	bl	8008074 <vPortExitCritical>

	return xReturn;
 8006856:	68fb      	ldr	r3, [r7, #12]
}
 8006858:	4618      	mov	r0, r3
 800685a:	3710      	adds	r7, #16
 800685c:	46bd      	mov	sp, r7
 800685e:	bd80      	pop	{r7, pc}

08006860 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006860:	b480      	push	{r7}
 8006862:	b085      	sub	sp, #20
 8006864:	af00      	add	r7, sp, #0
 8006866:	6078      	str	r0, [r7, #4]
 8006868:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800686a:	2300      	movs	r3, #0
 800686c:	60fb      	str	r3, [r7, #12]
 800686e:	e014      	b.n	800689a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006870:	4a0f      	ldr	r2, [pc, #60]	; (80068b0 <vQueueAddToRegistry+0x50>)
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006878:	2b00      	cmp	r3, #0
 800687a:	d10b      	bne.n	8006894 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800687c:	490c      	ldr	r1, [pc, #48]	; (80068b0 <vQueueAddToRegistry+0x50>)
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	683a      	ldr	r2, [r7, #0]
 8006882:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006886:	4a0a      	ldr	r2, [pc, #40]	; (80068b0 <vQueueAddToRegistry+0x50>)
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	00db      	lsls	r3, r3, #3
 800688c:	4413      	add	r3, r2
 800688e:	687a      	ldr	r2, [r7, #4]
 8006890:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006892:	e006      	b.n	80068a2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	3301      	adds	r3, #1
 8006898:	60fb      	str	r3, [r7, #12]
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	2b07      	cmp	r3, #7
 800689e:	d9e7      	bls.n	8006870 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80068a0:	bf00      	nop
 80068a2:	bf00      	nop
 80068a4:	3714      	adds	r7, #20
 80068a6:	46bd      	mov	sp, r7
 80068a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ac:	4770      	bx	lr
 80068ae:	bf00      	nop
 80068b0:	20004be0 	.word	0x20004be0

080068b4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80068b4:	b580      	push	{r7, lr}
 80068b6:	b086      	sub	sp, #24
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	60f8      	str	r0, [r7, #12]
 80068bc:	60b9      	str	r1, [r7, #8]
 80068be:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80068c4:	f001 fba6 	bl	8008014 <vPortEnterCritical>
 80068c8:	697b      	ldr	r3, [r7, #20]
 80068ca:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80068ce:	b25b      	sxtb	r3, r3
 80068d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068d4:	d103      	bne.n	80068de <vQueueWaitForMessageRestricted+0x2a>
 80068d6:	697b      	ldr	r3, [r7, #20]
 80068d8:	2200      	movs	r2, #0
 80068da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80068de:	697b      	ldr	r3, [r7, #20]
 80068e0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80068e4:	b25b      	sxtb	r3, r3
 80068e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068ea:	d103      	bne.n	80068f4 <vQueueWaitForMessageRestricted+0x40>
 80068ec:	697b      	ldr	r3, [r7, #20]
 80068ee:	2200      	movs	r2, #0
 80068f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80068f4:	f001 fbbe 	bl	8008074 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80068f8:	697b      	ldr	r3, [r7, #20]
 80068fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d106      	bne.n	800690e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006900:	697b      	ldr	r3, [r7, #20]
 8006902:	3324      	adds	r3, #36	; 0x24
 8006904:	687a      	ldr	r2, [r7, #4]
 8006906:	68b9      	ldr	r1, [r7, #8]
 8006908:	4618      	mov	r0, r3
 800690a:	f000 fc3b 	bl	8007184 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800690e:	6978      	ldr	r0, [r7, #20]
 8006910:	f7ff ff26 	bl	8006760 <prvUnlockQueue>
	}
 8006914:	bf00      	nop
 8006916:	3718      	adds	r7, #24
 8006918:	46bd      	mov	sp, r7
 800691a:	bd80      	pop	{r7, pc}

0800691c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800691c:	b580      	push	{r7, lr}
 800691e:	b08e      	sub	sp, #56	; 0x38
 8006920:	af04      	add	r7, sp, #16
 8006922:	60f8      	str	r0, [r7, #12]
 8006924:	60b9      	str	r1, [r7, #8]
 8006926:	607a      	str	r2, [r7, #4]
 8006928:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800692a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800692c:	2b00      	cmp	r3, #0
 800692e:	d10a      	bne.n	8006946 <xTaskCreateStatic+0x2a>
	__asm volatile
 8006930:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006934:	f383 8811 	msr	BASEPRI, r3
 8006938:	f3bf 8f6f 	isb	sy
 800693c:	f3bf 8f4f 	dsb	sy
 8006940:	623b      	str	r3, [r7, #32]
}
 8006942:	bf00      	nop
 8006944:	e7fe      	b.n	8006944 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006946:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006948:	2b00      	cmp	r3, #0
 800694a:	d10a      	bne.n	8006962 <xTaskCreateStatic+0x46>
	__asm volatile
 800694c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006950:	f383 8811 	msr	BASEPRI, r3
 8006954:	f3bf 8f6f 	isb	sy
 8006958:	f3bf 8f4f 	dsb	sy
 800695c:	61fb      	str	r3, [r7, #28]
}
 800695e:	bf00      	nop
 8006960:	e7fe      	b.n	8006960 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006962:	235c      	movs	r3, #92	; 0x5c
 8006964:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006966:	693b      	ldr	r3, [r7, #16]
 8006968:	2b5c      	cmp	r3, #92	; 0x5c
 800696a:	d00a      	beq.n	8006982 <xTaskCreateStatic+0x66>
	__asm volatile
 800696c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006970:	f383 8811 	msr	BASEPRI, r3
 8006974:	f3bf 8f6f 	isb	sy
 8006978:	f3bf 8f4f 	dsb	sy
 800697c:	61bb      	str	r3, [r7, #24]
}
 800697e:	bf00      	nop
 8006980:	e7fe      	b.n	8006980 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006982:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006984:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006986:	2b00      	cmp	r3, #0
 8006988:	d01e      	beq.n	80069c8 <xTaskCreateStatic+0xac>
 800698a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800698c:	2b00      	cmp	r3, #0
 800698e:	d01b      	beq.n	80069c8 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006990:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006992:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006996:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006998:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800699a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800699c:	2202      	movs	r2, #2
 800699e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80069a2:	2300      	movs	r3, #0
 80069a4:	9303      	str	r3, [sp, #12]
 80069a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069a8:	9302      	str	r3, [sp, #8]
 80069aa:	f107 0314 	add.w	r3, r7, #20
 80069ae:	9301      	str	r3, [sp, #4]
 80069b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069b2:	9300      	str	r3, [sp, #0]
 80069b4:	683b      	ldr	r3, [r7, #0]
 80069b6:	687a      	ldr	r2, [r7, #4]
 80069b8:	68b9      	ldr	r1, [r7, #8]
 80069ba:	68f8      	ldr	r0, [r7, #12]
 80069bc:	f000 f850 	bl	8006a60 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80069c0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80069c2:	f000 f8dd 	bl	8006b80 <prvAddNewTaskToReadyList>
 80069c6:	e001      	b.n	80069cc <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80069c8:	2300      	movs	r3, #0
 80069ca:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80069cc:	697b      	ldr	r3, [r7, #20]
	}
 80069ce:	4618      	mov	r0, r3
 80069d0:	3728      	adds	r7, #40	; 0x28
 80069d2:	46bd      	mov	sp, r7
 80069d4:	bd80      	pop	{r7, pc}

080069d6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80069d6:	b580      	push	{r7, lr}
 80069d8:	b08c      	sub	sp, #48	; 0x30
 80069da:	af04      	add	r7, sp, #16
 80069dc:	60f8      	str	r0, [r7, #12]
 80069de:	60b9      	str	r1, [r7, #8]
 80069e0:	603b      	str	r3, [r7, #0]
 80069e2:	4613      	mov	r3, r2
 80069e4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80069e6:	88fb      	ldrh	r3, [r7, #6]
 80069e8:	009b      	lsls	r3, r3, #2
 80069ea:	4618      	mov	r0, r3
 80069ec:	f001 fc34 	bl	8008258 <pvPortMalloc>
 80069f0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80069f2:	697b      	ldr	r3, [r7, #20]
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d00e      	beq.n	8006a16 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80069f8:	205c      	movs	r0, #92	; 0x5c
 80069fa:	f001 fc2d 	bl	8008258 <pvPortMalloc>
 80069fe:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006a00:	69fb      	ldr	r3, [r7, #28]
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d003      	beq.n	8006a0e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006a06:	69fb      	ldr	r3, [r7, #28]
 8006a08:	697a      	ldr	r2, [r7, #20]
 8006a0a:	631a      	str	r2, [r3, #48]	; 0x30
 8006a0c:	e005      	b.n	8006a1a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006a0e:	6978      	ldr	r0, [r7, #20]
 8006a10:	f001 fcee 	bl	80083f0 <vPortFree>
 8006a14:	e001      	b.n	8006a1a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006a16:	2300      	movs	r3, #0
 8006a18:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006a1a:	69fb      	ldr	r3, [r7, #28]
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d017      	beq.n	8006a50 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006a20:	69fb      	ldr	r3, [r7, #28]
 8006a22:	2200      	movs	r2, #0
 8006a24:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006a28:	88fa      	ldrh	r2, [r7, #6]
 8006a2a:	2300      	movs	r3, #0
 8006a2c:	9303      	str	r3, [sp, #12]
 8006a2e:	69fb      	ldr	r3, [r7, #28]
 8006a30:	9302      	str	r3, [sp, #8]
 8006a32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a34:	9301      	str	r3, [sp, #4]
 8006a36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a38:	9300      	str	r3, [sp, #0]
 8006a3a:	683b      	ldr	r3, [r7, #0]
 8006a3c:	68b9      	ldr	r1, [r7, #8]
 8006a3e:	68f8      	ldr	r0, [r7, #12]
 8006a40:	f000 f80e 	bl	8006a60 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006a44:	69f8      	ldr	r0, [r7, #28]
 8006a46:	f000 f89b 	bl	8006b80 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006a4a:	2301      	movs	r3, #1
 8006a4c:	61bb      	str	r3, [r7, #24]
 8006a4e:	e002      	b.n	8006a56 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006a50:	f04f 33ff 	mov.w	r3, #4294967295
 8006a54:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006a56:	69bb      	ldr	r3, [r7, #24]
	}
 8006a58:	4618      	mov	r0, r3
 8006a5a:	3720      	adds	r7, #32
 8006a5c:	46bd      	mov	sp, r7
 8006a5e:	bd80      	pop	{r7, pc}

08006a60 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006a60:	b580      	push	{r7, lr}
 8006a62:	b088      	sub	sp, #32
 8006a64:	af00      	add	r7, sp, #0
 8006a66:	60f8      	str	r0, [r7, #12]
 8006a68:	60b9      	str	r1, [r7, #8]
 8006a6a:	607a      	str	r2, [r7, #4]
 8006a6c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006a6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a70:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	009b      	lsls	r3, r3, #2
 8006a76:	461a      	mov	r2, r3
 8006a78:	21a5      	movs	r1, #165	; 0xa5
 8006a7a:	f001 fe0f 	bl	800869c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006a7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a80:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006a88:	3b01      	subs	r3, #1
 8006a8a:	009b      	lsls	r3, r3, #2
 8006a8c:	4413      	add	r3, r2
 8006a8e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006a90:	69bb      	ldr	r3, [r7, #24]
 8006a92:	f023 0307 	bic.w	r3, r3, #7
 8006a96:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006a98:	69bb      	ldr	r3, [r7, #24]
 8006a9a:	f003 0307 	and.w	r3, r3, #7
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d00a      	beq.n	8006ab8 <prvInitialiseNewTask+0x58>
	__asm volatile
 8006aa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006aa6:	f383 8811 	msr	BASEPRI, r3
 8006aaa:	f3bf 8f6f 	isb	sy
 8006aae:	f3bf 8f4f 	dsb	sy
 8006ab2:	617b      	str	r3, [r7, #20]
}
 8006ab4:	bf00      	nop
 8006ab6:	e7fe      	b.n	8006ab6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006ab8:	68bb      	ldr	r3, [r7, #8]
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d01f      	beq.n	8006afe <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006abe:	2300      	movs	r3, #0
 8006ac0:	61fb      	str	r3, [r7, #28]
 8006ac2:	e012      	b.n	8006aea <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006ac4:	68ba      	ldr	r2, [r7, #8]
 8006ac6:	69fb      	ldr	r3, [r7, #28]
 8006ac8:	4413      	add	r3, r2
 8006aca:	7819      	ldrb	r1, [r3, #0]
 8006acc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006ace:	69fb      	ldr	r3, [r7, #28]
 8006ad0:	4413      	add	r3, r2
 8006ad2:	3334      	adds	r3, #52	; 0x34
 8006ad4:	460a      	mov	r2, r1
 8006ad6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006ad8:	68ba      	ldr	r2, [r7, #8]
 8006ada:	69fb      	ldr	r3, [r7, #28]
 8006adc:	4413      	add	r3, r2
 8006ade:	781b      	ldrb	r3, [r3, #0]
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d006      	beq.n	8006af2 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006ae4:	69fb      	ldr	r3, [r7, #28]
 8006ae6:	3301      	adds	r3, #1
 8006ae8:	61fb      	str	r3, [r7, #28]
 8006aea:	69fb      	ldr	r3, [r7, #28]
 8006aec:	2b0f      	cmp	r3, #15
 8006aee:	d9e9      	bls.n	8006ac4 <prvInitialiseNewTask+0x64>
 8006af0:	e000      	b.n	8006af4 <prvInitialiseNewTask+0x94>
			{
				break;
 8006af2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006af4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006af6:	2200      	movs	r2, #0
 8006af8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006afc:	e003      	b.n	8006b06 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006afe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b00:	2200      	movs	r2, #0
 8006b02:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006b06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b08:	2b37      	cmp	r3, #55	; 0x37
 8006b0a:	d901      	bls.n	8006b10 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006b0c:	2337      	movs	r3, #55	; 0x37
 8006b0e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006b10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b12:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006b14:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006b16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b18:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006b1a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006b1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b1e:	2200      	movs	r2, #0
 8006b20:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006b22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b24:	3304      	adds	r3, #4
 8006b26:	4618      	mov	r0, r3
 8006b28:	f7ff f978 	bl	8005e1c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006b2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b2e:	3318      	adds	r3, #24
 8006b30:	4618      	mov	r0, r3
 8006b32:	f7ff f973 	bl	8005e1c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006b36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b3a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006b3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b3e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006b42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b44:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006b46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b4a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006b4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b4e:	2200      	movs	r2, #0
 8006b50:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006b52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b54:	2200      	movs	r2, #0
 8006b56:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006b5a:	683a      	ldr	r2, [r7, #0]
 8006b5c:	68f9      	ldr	r1, [r7, #12]
 8006b5e:	69b8      	ldr	r0, [r7, #24]
 8006b60:	f001 f928 	bl	8007db4 <pxPortInitialiseStack>
 8006b64:	4602      	mov	r2, r0
 8006b66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b68:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006b6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d002      	beq.n	8006b76 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006b70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b72:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b74:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006b76:	bf00      	nop
 8006b78:	3720      	adds	r7, #32
 8006b7a:	46bd      	mov	sp, r7
 8006b7c:	bd80      	pop	{r7, pc}
	...

08006b80 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006b80:	b580      	push	{r7, lr}
 8006b82:	b082      	sub	sp, #8
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006b88:	f001 fa44 	bl	8008014 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006b8c:	4b2d      	ldr	r3, [pc, #180]	; (8006c44 <prvAddNewTaskToReadyList+0xc4>)
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	3301      	adds	r3, #1
 8006b92:	4a2c      	ldr	r2, [pc, #176]	; (8006c44 <prvAddNewTaskToReadyList+0xc4>)
 8006b94:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006b96:	4b2c      	ldr	r3, [pc, #176]	; (8006c48 <prvAddNewTaskToReadyList+0xc8>)
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d109      	bne.n	8006bb2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006b9e:	4a2a      	ldr	r2, [pc, #168]	; (8006c48 <prvAddNewTaskToReadyList+0xc8>)
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006ba4:	4b27      	ldr	r3, [pc, #156]	; (8006c44 <prvAddNewTaskToReadyList+0xc4>)
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	2b01      	cmp	r3, #1
 8006baa:	d110      	bne.n	8006bce <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006bac:	f000 fc16 	bl	80073dc <prvInitialiseTaskLists>
 8006bb0:	e00d      	b.n	8006bce <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006bb2:	4b26      	ldr	r3, [pc, #152]	; (8006c4c <prvAddNewTaskToReadyList+0xcc>)
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d109      	bne.n	8006bce <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006bba:	4b23      	ldr	r3, [pc, #140]	; (8006c48 <prvAddNewTaskToReadyList+0xc8>)
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bc4:	429a      	cmp	r2, r3
 8006bc6:	d802      	bhi.n	8006bce <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006bc8:	4a1f      	ldr	r2, [pc, #124]	; (8006c48 <prvAddNewTaskToReadyList+0xc8>)
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006bce:	4b20      	ldr	r3, [pc, #128]	; (8006c50 <prvAddNewTaskToReadyList+0xd0>)
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	3301      	adds	r3, #1
 8006bd4:	4a1e      	ldr	r2, [pc, #120]	; (8006c50 <prvAddNewTaskToReadyList+0xd0>)
 8006bd6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006bd8:	4b1d      	ldr	r3, [pc, #116]	; (8006c50 <prvAddNewTaskToReadyList+0xd0>)
 8006bda:	681a      	ldr	r2, [r3, #0]
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006be4:	4b1b      	ldr	r3, [pc, #108]	; (8006c54 <prvAddNewTaskToReadyList+0xd4>)
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	429a      	cmp	r2, r3
 8006bea:	d903      	bls.n	8006bf4 <prvAddNewTaskToReadyList+0x74>
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bf0:	4a18      	ldr	r2, [pc, #96]	; (8006c54 <prvAddNewTaskToReadyList+0xd4>)
 8006bf2:	6013      	str	r3, [r2, #0]
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bf8:	4613      	mov	r3, r2
 8006bfa:	009b      	lsls	r3, r3, #2
 8006bfc:	4413      	add	r3, r2
 8006bfe:	009b      	lsls	r3, r3, #2
 8006c00:	4a15      	ldr	r2, [pc, #84]	; (8006c58 <prvAddNewTaskToReadyList+0xd8>)
 8006c02:	441a      	add	r2, r3
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	3304      	adds	r3, #4
 8006c08:	4619      	mov	r1, r3
 8006c0a:	4610      	mov	r0, r2
 8006c0c:	f7ff f913 	bl	8005e36 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006c10:	f001 fa30 	bl	8008074 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006c14:	4b0d      	ldr	r3, [pc, #52]	; (8006c4c <prvAddNewTaskToReadyList+0xcc>)
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d00e      	beq.n	8006c3a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006c1c:	4b0a      	ldr	r3, [pc, #40]	; (8006c48 <prvAddNewTaskToReadyList+0xc8>)
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c26:	429a      	cmp	r2, r3
 8006c28:	d207      	bcs.n	8006c3a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006c2a:	4b0c      	ldr	r3, [pc, #48]	; (8006c5c <prvAddNewTaskToReadyList+0xdc>)
 8006c2c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c30:	601a      	str	r2, [r3, #0]
 8006c32:	f3bf 8f4f 	dsb	sy
 8006c36:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006c3a:	bf00      	nop
 8006c3c:	3708      	adds	r7, #8
 8006c3e:	46bd      	mov	sp, r7
 8006c40:	bd80      	pop	{r7, pc}
 8006c42:	bf00      	nop
 8006c44:	20000c24 	.word	0x20000c24
 8006c48:	20000750 	.word	0x20000750
 8006c4c:	20000c30 	.word	0x20000c30
 8006c50:	20000c40 	.word	0x20000c40
 8006c54:	20000c2c 	.word	0x20000c2c
 8006c58:	20000754 	.word	0x20000754
 8006c5c:	e000ed04 	.word	0xe000ed04

08006c60 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006c60:	b580      	push	{r7, lr}
 8006c62:	b084      	sub	sp, #16
 8006c64:	af00      	add	r7, sp, #0
 8006c66:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006c68:	2300      	movs	r3, #0
 8006c6a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d017      	beq.n	8006ca2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006c72:	4b13      	ldr	r3, [pc, #76]	; (8006cc0 <vTaskDelay+0x60>)
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d00a      	beq.n	8006c90 <vTaskDelay+0x30>
	__asm volatile
 8006c7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c7e:	f383 8811 	msr	BASEPRI, r3
 8006c82:	f3bf 8f6f 	isb	sy
 8006c86:	f3bf 8f4f 	dsb	sy
 8006c8a:	60bb      	str	r3, [r7, #8]
}
 8006c8c:	bf00      	nop
 8006c8e:	e7fe      	b.n	8006c8e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006c90:	f000 f880 	bl	8006d94 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006c94:	2100      	movs	r1, #0
 8006c96:	6878      	ldr	r0, [r7, #4]
 8006c98:	f000 fcea 	bl	8007670 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006c9c:	f000 f888 	bl	8006db0 <xTaskResumeAll>
 8006ca0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d107      	bne.n	8006cb8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8006ca8:	4b06      	ldr	r3, [pc, #24]	; (8006cc4 <vTaskDelay+0x64>)
 8006caa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006cae:	601a      	str	r2, [r3, #0]
 8006cb0:	f3bf 8f4f 	dsb	sy
 8006cb4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006cb8:	bf00      	nop
 8006cba:	3710      	adds	r7, #16
 8006cbc:	46bd      	mov	sp, r7
 8006cbe:	bd80      	pop	{r7, pc}
 8006cc0:	20000c4c 	.word	0x20000c4c
 8006cc4:	e000ed04 	.word	0xe000ed04

08006cc8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006cc8:	b580      	push	{r7, lr}
 8006cca:	b08a      	sub	sp, #40	; 0x28
 8006ccc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006cce:	2300      	movs	r3, #0
 8006cd0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006cd2:	2300      	movs	r3, #0
 8006cd4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006cd6:	463a      	mov	r2, r7
 8006cd8:	1d39      	adds	r1, r7, #4
 8006cda:	f107 0308 	add.w	r3, r7, #8
 8006cde:	4618      	mov	r0, r3
 8006ce0:	f7ff f848 	bl	8005d74 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006ce4:	6839      	ldr	r1, [r7, #0]
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	68ba      	ldr	r2, [r7, #8]
 8006cea:	9202      	str	r2, [sp, #8]
 8006cec:	9301      	str	r3, [sp, #4]
 8006cee:	2300      	movs	r3, #0
 8006cf0:	9300      	str	r3, [sp, #0]
 8006cf2:	2300      	movs	r3, #0
 8006cf4:	460a      	mov	r2, r1
 8006cf6:	4921      	ldr	r1, [pc, #132]	; (8006d7c <vTaskStartScheduler+0xb4>)
 8006cf8:	4821      	ldr	r0, [pc, #132]	; (8006d80 <vTaskStartScheduler+0xb8>)
 8006cfa:	f7ff fe0f 	bl	800691c <xTaskCreateStatic>
 8006cfe:	4603      	mov	r3, r0
 8006d00:	4a20      	ldr	r2, [pc, #128]	; (8006d84 <vTaskStartScheduler+0xbc>)
 8006d02:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006d04:	4b1f      	ldr	r3, [pc, #124]	; (8006d84 <vTaskStartScheduler+0xbc>)
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d002      	beq.n	8006d12 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006d0c:	2301      	movs	r3, #1
 8006d0e:	617b      	str	r3, [r7, #20]
 8006d10:	e001      	b.n	8006d16 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006d12:	2300      	movs	r3, #0
 8006d14:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006d16:	697b      	ldr	r3, [r7, #20]
 8006d18:	2b01      	cmp	r3, #1
 8006d1a:	d102      	bne.n	8006d22 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006d1c:	f000 fcfc 	bl	8007718 <xTimerCreateTimerTask>
 8006d20:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006d22:	697b      	ldr	r3, [r7, #20]
 8006d24:	2b01      	cmp	r3, #1
 8006d26:	d116      	bne.n	8006d56 <vTaskStartScheduler+0x8e>
	__asm volatile
 8006d28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d2c:	f383 8811 	msr	BASEPRI, r3
 8006d30:	f3bf 8f6f 	isb	sy
 8006d34:	f3bf 8f4f 	dsb	sy
 8006d38:	613b      	str	r3, [r7, #16]
}
 8006d3a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006d3c:	4b12      	ldr	r3, [pc, #72]	; (8006d88 <vTaskStartScheduler+0xc0>)
 8006d3e:	f04f 32ff 	mov.w	r2, #4294967295
 8006d42:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006d44:	4b11      	ldr	r3, [pc, #68]	; (8006d8c <vTaskStartScheduler+0xc4>)
 8006d46:	2201      	movs	r2, #1
 8006d48:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006d4a:	4b11      	ldr	r3, [pc, #68]	; (8006d90 <vTaskStartScheduler+0xc8>)
 8006d4c:	2200      	movs	r2, #0
 8006d4e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006d50:	f001 f8be 	bl	8007ed0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006d54:	e00e      	b.n	8006d74 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006d56:	697b      	ldr	r3, [r7, #20]
 8006d58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d5c:	d10a      	bne.n	8006d74 <vTaskStartScheduler+0xac>
	__asm volatile
 8006d5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d62:	f383 8811 	msr	BASEPRI, r3
 8006d66:	f3bf 8f6f 	isb	sy
 8006d6a:	f3bf 8f4f 	dsb	sy
 8006d6e:	60fb      	str	r3, [r7, #12]
}
 8006d70:	bf00      	nop
 8006d72:	e7fe      	b.n	8006d72 <vTaskStartScheduler+0xaa>
}
 8006d74:	bf00      	nop
 8006d76:	3718      	adds	r7, #24
 8006d78:	46bd      	mov	sp, r7
 8006d7a:	bd80      	pop	{r7, pc}
 8006d7c:	08009b4c 	.word	0x08009b4c
 8006d80:	080073ad 	.word	0x080073ad
 8006d84:	20000c48 	.word	0x20000c48
 8006d88:	20000c44 	.word	0x20000c44
 8006d8c:	20000c30 	.word	0x20000c30
 8006d90:	20000c28 	.word	0x20000c28

08006d94 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006d94:	b480      	push	{r7}
 8006d96:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006d98:	4b04      	ldr	r3, [pc, #16]	; (8006dac <vTaskSuspendAll+0x18>)
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	3301      	adds	r3, #1
 8006d9e:	4a03      	ldr	r2, [pc, #12]	; (8006dac <vTaskSuspendAll+0x18>)
 8006da0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006da2:	bf00      	nop
 8006da4:	46bd      	mov	sp, r7
 8006da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006daa:	4770      	bx	lr
 8006dac:	20000c4c 	.word	0x20000c4c

08006db0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006db0:	b580      	push	{r7, lr}
 8006db2:	b084      	sub	sp, #16
 8006db4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006db6:	2300      	movs	r3, #0
 8006db8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006dba:	2300      	movs	r3, #0
 8006dbc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006dbe:	4b42      	ldr	r3, [pc, #264]	; (8006ec8 <xTaskResumeAll+0x118>)
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d10a      	bne.n	8006ddc <xTaskResumeAll+0x2c>
	__asm volatile
 8006dc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dca:	f383 8811 	msr	BASEPRI, r3
 8006dce:	f3bf 8f6f 	isb	sy
 8006dd2:	f3bf 8f4f 	dsb	sy
 8006dd6:	603b      	str	r3, [r7, #0]
}
 8006dd8:	bf00      	nop
 8006dda:	e7fe      	b.n	8006dda <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006ddc:	f001 f91a 	bl	8008014 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006de0:	4b39      	ldr	r3, [pc, #228]	; (8006ec8 <xTaskResumeAll+0x118>)
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	3b01      	subs	r3, #1
 8006de6:	4a38      	ldr	r2, [pc, #224]	; (8006ec8 <xTaskResumeAll+0x118>)
 8006de8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006dea:	4b37      	ldr	r3, [pc, #220]	; (8006ec8 <xTaskResumeAll+0x118>)
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d162      	bne.n	8006eb8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006df2:	4b36      	ldr	r3, [pc, #216]	; (8006ecc <xTaskResumeAll+0x11c>)
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d05e      	beq.n	8006eb8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006dfa:	e02f      	b.n	8006e5c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006dfc:	4b34      	ldr	r3, [pc, #208]	; (8006ed0 <xTaskResumeAll+0x120>)
 8006dfe:	68db      	ldr	r3, [r3, #12]
 8006e00:	68db      	ldr	r3, [r3, #12]
 8006e02:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	3318      	adds	r3, #24
 8006e08:	4618      	mov	r0, r3
 8006e0a:	f7ff f871 	bl	8005ef0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	3304      	adds	r3, #4
 8006e12:	4618      	mov	r0, r3
 8006e14:	f7ff f86c 	bl	8005ef0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e1c:	4b2d      	ldr	r3, [pc, #180]	; (8006ed4 <xTaskResumeAll+0x124>)
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	429a      	cmp	r2, r3
 8006e22:	d903      	bls.n	8006e2c <xTaskResumeAll+0x7c>
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e28:	4a2a      	ldr	r2, [pc, #168]	; (8006ed4 <xTaskResumeAll+0x124>)
 8006e2a:	6013      	str	r3, [r2, #0]
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e30:	4613      	mov	r3, r2
 8006e32:	009b      	lsls	r3, r3, #2
 8006e34:	4413      	add	r3, r2
 8006e36:	009b      	lsls	r3, r3, #2
 8006e38:	4a27      	ldr	r2, [pc, #156]	; (8006ed8 <xTaskResumeAll+0x128>)
 8006e3a:	441a      	add	r2, r3
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	3304      	adds	r3, #4
 8006e40:	4619      	mov	r1, r3
 8006e42:	4610      	mov	r0, r2
 8006e44:	f7fe fff7 	bl	8005e36 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e4c:	4b23      	ldr	r3, [pc, #140]	; (8006edc <xTaskResumeAll+0x12c>)
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e52:	429a      	cmp	r2, r3
 8006e54:	d302      	bcc.n	8006e5c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8006e56:	4b22      	ldr	r3, [pc, #136]	; (8006ee0 <xTaskResumeAll+0x130>)
 8006e58:	2201      	movs	r2, #1
 8006e5a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006e5c:	4b1c      	ldr	r3, [pc, #112]	; (8006ed0 <xTaskResumeAll+0x120>)
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d1cb      	bne.n	8006dfc <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d001      	beq.n	8006e6e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006e6a:	f000 fb55 	bl	8007518 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006e6e:	4b1d      	ldr	r3, [pc, #116]	; (8006ee4 <xTaskResumeAll+0x134>)
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d010      	beq.n	8006e9c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006e7a:	f000 f847 	bl	8006f0c <xTaskIncrementTick>
 8006e7e:	4603      	mov	r3, r0
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d002      	beq.n	8006e8a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8006e84:	4b16      	ldr	r3, [pc, #88]	; (8006ee0 <xTaskResumeAll+0x130>)
 8006e86:	2201      	movs	r2, #1
 8006e88:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	3b01      	subs	r3, #1
 8006e8e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d1f1      	bne.n	8006e7a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8006e96:	4b13      	ldr	r3, [pc, #76]	; (8006ee4 <xTaskResumeAll+0x134>)
 8006e98:	2200      	movs	r2, #0
 8006e9a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006e9c:	4b10      	ldr	r3, [pc, #64]	; (8006ee0 <xTaskResumeAll+0x130>)
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d009      	beq.n	8006eb8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006ea4:	2301      	movs	r3, #1
 8006ea6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006ea8:	4b0f      	ldr	r3, [pc, #60]	; (8006ee8 <xTaskResumeAll+0x138>)
 8006eaa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006eae:	601a      	str	r2, [r3, #0]
 8006eb0:	f3bf 8f4f 	dsb	sy
 8006eb4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006eb8:	f001 f8dc 	bl	8008074 <vPortExitCritical>

	return xAlreadyYielded;
 8006ebc:	68bb      	ldr	r3, [r7, #8]
}
 8006ebe:	4618      	mov	r0, r3
 8006ec0:	3710      	adds	r7, #16
 8006ec2:	46bd      	mov	sp, r7
 8006ec4:	bd80      	pop	{r7, pc}
 8006ec6:	bf00      	nop
 8006ec8:	20000c4c 	.word	0x20000c4c
 8006ecc:	20000c24 	.word	0x20000c24
 8006ed0:	20000be4 	.word	0x20000be4
 8006ed4:	20000c2c 	.word	0x20000c2c
 8006ed8:	20000754 	.word	0x20000754
 8006edc:	20000750 	.word	0x20000750
 8006ee0:	20000c38 	.word	0x20000c38
 8006ee4:	20000c34 	.word	0x20000c34
 8006ee8:	e000ed04 	.word	0xe000ed04

08006eec <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006eec:	b480      	push	{r7}
 8006eee:	b083      	sub	sp, #12
 8006ef0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006ef2:	4b05      	ldr	r3, [pc, #20]	; (8006f08 <xTaskGetTickCount+0x1c>)
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006ef8:	687b      	ldr	r3, [r7, #4]
}
 8006efa:	4618      	mov	r0, r3
 8006efc:	370c      	adds	r7, #12
 8006efe:	46bd      	mov	sp, r7
 8006f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f04:	4770      	bx	lr
 8006f06:	bf00      	nop
 8006f08:	20000c28 	.word	0x20000c28

08006f0c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006f0c:	b580      	push	{r7, lr}
 8006f0e:	b086      	sub	sp, #24
 8006f10:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006f12:	2300      	movs	r3, #0
 8006f14:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006f16:	4b4f      	ldr	r3, [pc, #316]	; (8007054 <xTaskIncrementTick+0x148>)
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	f040 808f 	bne.w	800703e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006f20:	4b4d      	ldr	r3, [pc, #308]	; (8007058 <xTaskIncrementTick+0x14c>)
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	3301      	adds	r3, #1
 8006f26:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006f28:	4a4b      	ldr	r2, [pc, #300]	; (8007058 <xTaskIncrementTick+0x14c>)
 8006f2a:	693b      	ldr	r3, [r7, #16]
 8006f2c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006f2e:	693b      	ldr	r3, [r7, #16]
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d120      	bne.n	8006f76 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006f34:	4b49      	ldr	r3, [pc, #292]	; (800705c <xTaskIncrementTick+0x150>)
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d00a      	beq.n	8006f54 <xTaskIncrementTick+0x48>
	__asm volatile
 8006f3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f42:	f383 8811 	msr	BASEPRI, r3
 8006f46:	f3bf 8f6f 	isb	sy
 8006f4a:	f3bf 8f4f 	dsb	sy
 8006f4e:	603b      	str	r3, [r7, #0]
}
 8006f50:	bf00      	nop
 8006f52:	e7fe      	b.n	8006f52 <xTaskIncrementTick+0x46>
 8006f54:	4b41      	ldr	r3, [pc, #260]	; (800705c <xTaskIncrementTick+0x150>)
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	60fb      	str	r3, [r7, #12]
 8006f5a:	4b41      	ldr	r3, [pc, #260]	; (8007060 <xTaskIncrementTick+0x154>)
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	4a3f      	ldr	r2, [pc, #252]	; (800705c <xTaskIncrementTick+0x150>)
 8006f60:	6013      	str	r3, [r2, #0]
 8006f62:	4a3f      	ldr	r2, [pc, #252]	; (8007060 <xTaskIncrementTick+0x154>)
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	6013      	str	r3, [r2, #0]
 8006f68:	4b3e      	ldr	r3, [pc, #248]	; (8007064 <xTaskIncrementTick+0x158>)
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	3301      	adds	r3, #1
 8006f6e:	4a3d      	ldr	r2, [pc, #244]	; (8007064 <xTaskIncrementTick+0x158>)
 8006f70:	6013      	str	r3, [r2, #0]
 8006f72:	f000 fad1 	bl	8007518 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006f76:	4b3c      	ldr	r3, [pc, #240]	; (8007068 <xTaskIncrementTick+0x15c>)
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	693a      	ldr	r2, [r7, #16]
 8006f7c:	429a      	cmp	r2, r3
 8006f7e:	d349      	bcc.n	8007014 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006f80:	4b36      	ldr	r3, [pc, #216]	; (800705c <xTaskIncrementTick+0x150>)
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d104      	bne.n	8006f94 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006f8a:	4b37      	ldr	r3, [pc, #220]	; (8007068 <xTaskIncrementTick+0x15c>)
 8006f8c:	f04f 32ff 	mov.w	r2, #4294967295
 8006f90:	601a      	str	r2, [r3, #0]
					break;
 8006f92:	e03f      	b.n	8007014 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006f94:	4b31      	ldr	r3, [pc, #196]	; (800705c <xTaskIncrementTick+0x150>)
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	68db      	ldr	r3, [r3, #12]
 8006f9a:	68db      	ldr	r3, [r3, #12]
 8006f9c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006f9e:	68bb      	ldr	r3, [r7, #8]
 8006fa0:	685b      	ldr	r3, [r3, #4]
 8006fa2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006fa4:	693a      	ldr	r2, [r7, #16]
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	429a      	cmp	r2, r3
 8006faa:	d203      	bcs.n	8006fb4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006fac:	4a2e      	ldr	r2, [pc, #184]	; (8007068 <xTaskIncrementTick+0x15c>)
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006fb2:	e02f      	b.n	8007014 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006fb4:	68bb      	ldr	r3, [r7, #8]
 8006fb6:	3304      	adds	r3, #4
 8006fb8:	4618      	mov	r0, r3
 8006fba:	f7fe ff99 	bl	8005ef0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006fbe:	68bb      	ldr	r3, [r7, #8]
 8006fc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d004      	beq.n	8006fd0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006fc6:	68bb      	ldr	r3, [r7, #8]
 8006fc8:	3318      	adds	r3, #24
 8006fca:	4618      	mov	r0, r3
 8006fcc:	f7fe ff90 	bl	8005ef0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006fd0:	68bb      	ldr	r3, [r7, #8]
 8006fd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fd4:	4b25      	ldr	r3, [pc, #148]	; (800706c <xTaskIncrementTick+0x160>)
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	429a      	cmp	r2, r3
 8006fda:	d903      	bls.n	8006fe4 <xTaskIncrementTick+0xd8>
 8006fdc:	68bb      	ldr	r3, [r7, #8]
 8006fde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fe0:	4a22      	ldr	r2, [pc, #136]	; (800706c <xTaskIncrementTick+0x160>)
 8006fe2:	6013      	str	r3, [r2, #0]
 8006fe4:	68bb      	ldr	r3, [r7, #8]
 8006fe6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fe8:	4613      	mov	r3, r2
 8006fea:	009b      	lsls	r3, r3, #2
 8006fec:	4413      	add	r3, r2
 8006fee:	009b      	lsls	r3, r3, #2
 8006ff0:	4a1f      	ldr	r2, [pc, #124]	; (8007070 <xTaskIncrementTick+0x164>)
 8006ff2:	441a      	add	r2, r3
 8006ff4:	68bb      	ldr	r3, [r7, #8]
 8006ff6:	3304      	adds	r3, #4
 8006ff8:	4619      	mov	r1, r3
 8006ffa:	4610      	mov	r0, r2
 8006ffc:	f7fe ff1b 	bl	8005e36 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007000:	68bb      	ldr	r3, [r7, #8]
 8007002:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007004:	4b1b      	ldr	r3, [pc, #108]	; (8007074 <xTaskIncrementTick+0x168>)
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800700a:	429a      	cmp	r2, r3
 800700c:	d3b8      	bcc.n	8006f80 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800700e:	2301      	movs	r3, #1
 8007010:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007012:	e7b5      	b.n	8006f80 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007014:	4b17      	ldr	r3, [pc, #92]	; (8007074 <xTaskIncrementTick+0x168>)
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800701a:	4915      	ldr	r1, [pc, #84]	; (8007070 <xTaskIncrementTick+0x164>)
 800701c:	4613      	mov	r3, r2
 800701e:	009b      	lsls	r3, r3, #2
 8007020:	4413      	add	r3, r2
 8007022:	009b      	lsls	r3, r3, #2
 8007024:	440b      	add	r3, r1
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	2b01      	cmp	r3, #1
 800702a:	d901      	bls.n	8007030 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800702c:	2301      	movs	r3, #1
 800702e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007030:	4b11      	ldr	r3, [pc, #68]	; (8007078 <xTaskIncrementTick+0x16c>)
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	2b00      	cmp	r3, #0
 8007036:	d007      	beq.n	8007048 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8007038:	2301      	movs	r3, #1
 800703a:	617b      	str	r3, [r7, #20]
 800703c:	e004      	b.n	8007048 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800703e:	4b0f      	ldr	r3, [pc, #60]	; (800707c <xTaskIncrementTick+0x170>)
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	3301      	adds	r3, #1
 8007044:	4a0d      	ldr	r2, [pc, #52]	; (800707c <xTaskIncrementTick+0x170>)
 8007046:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007048:	697b      	ldr	r3, [r7, #20]
}
 800704a:	4618      	mov	r0, r3
 800704c:	3718      	adds	r7, #24
 800704e:	46bd      	mov	sp, r7
 8007050:	bd80      	pop	{r7, pc}
 8007052:	bf00      	nop
 8007054:	20000c4c 	.word	0x20000c4c
 8007058:	20000c28 	.word	0x20000c28
 800705c:	20000bdc 	.word	0x20000bdc
 8007060:	20000be0 	.word	0x20000be0
 8007064:	20000c3c 	.word	0x20000c3c
 8007068:	20000c44 	.word	0x20000c44
 800706c:	20000c2c 	.word	0x20000c2c
 8007070:	20000754 	.word	0x20000754
 8007074:	20000750 	.word	0x20000750
 8007078:	20000c38 	.word	0x20000c38
 800707c:	20000c34 	.word	0x20000c34

08007080 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007080:	b480      	push	{r7}
 8007082:	b085      	sub	sp, #20
 8007084:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007086:	4b28      	ldr	r3, [pc, #160]	; (8007128 <vTaskSwitchContext+0xa8>)
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	2b00      	cmp	r3, #0
 800708c:	d003      	beq.n	8007096 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800708e:	4b27      	ldr	r3, [pc, #156]	; (800712c <vTaskSwitchContext+0xac>)
 8007090:	2201      	movs	r2, #1
 8007092:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007094:	e041      	b.n	800711a <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8007096:	4b25      	ldr	r3, [pc, #148]	; (800712c <vTaskSwitchContext+0xac>)
 8007098:	2200      	movs	r2, #0
 800709a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800709c:	4b24      	ldr	r3, [pc, #144]	; (8007130 <vTaskSwitchContext+0xb0>)
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	60fb      	str	r3, [r7, #12]
 80070a2:	e010      	b.n	80070c6 <vTaskSwitchContext+0x46>
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d10a      	bne.n	80070c0 <vTaskSwitchContext+0x40>
	__asm volatile
 80070aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070ae:	f383 8811 	msr	BASEPRI, r3
 80070b2:	f3bf 8f6f 	isb	sy
 80070b6:	f3bf 8f4f 	dsb	sy
 80070ba:	607b      	str	r3, [r7, #4]
}
 80070bc:	bf00      	nop
 80070be:	e7fe      	b.n	80070be <vTaskSwitchContext+0x3e>
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	3b01      	subs	r3, #1
 80070c4:	60fb      	str	r3, [r7, #12]
 80070c6:	491b      	ldr	r1, [pc, #108]	; (8007134 <vTaskSwitchContext+0xb4>)
 80070c8:	68fa      	ldr	r2, [r7, #12]
 80070ca:	4613      	mov	r3, r2
 80070cc:	009b      	lsls	r3, r3, #2
 80070ce:	4413      	add	r3, r2
 80070d0:	009b      	lsls	r3, r3, #2
 80070d2:	440b      	add	r3, r1
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d0e4      	beq.n	80070a4 <vTaskSwitchContext+0x24>
 80070da:	68fa      	ldr	r2, [r7, #12]
 80070dc:	4613      	mov	r3, r2
 80070de:	009b      	lsls	r3, r3, #2
 80070e0:	4413      	add	r3, r2
 80070e2:	009b      	lsls	r3, r3, #2
 80070e4:	4a13      	ldr	r2, [pc, #76]	; (8007134 <vTaskSwitchContext+0xb4>)
 80070e6:	4413      	add	r3, r2
 80070e8:	60bb      	str	r3, [r7, #8]
 80070ea:	68bb      	ldr	r3, [r7, #8]
 80070ec:	685b      	ldr	r3, [r3, #4]
 80070ee:	685a      	ldr	r2, [r3, #4]
 80070f0:	68bb      	ldr	r3, [r7, #8]
 80070f2:	605a      	str	r2, [r3, #4]
 80070f4:	68bb      	ldr	r3, [r7, #8]
 80070f6:	685a      	ldr	r2, [r3, #4]
 80070f8:	68bb      	ldr	r3, [r7, #8]
 80070fa:	3308      	adds	r3, #8
 80070fc:	429a      	cmp	r2, r3
 80070fe:	d104      	bne.n	800710a <vTaskSwitchContext+0x8a>
 8007100:	68bb      	ldr	r3, [r7, #8]
 8007102:	685b      	ldr	r3, [r3, #4]
 8007104:	685a      	ldr	r2, [r3, #4]
 8007106:	68bb      	ldr	r3, [r7, #8]
 8007108:	605a      	str	r2, [r3, #4]
 800710a:	68bb      	ldr	r3, [r7, #8]
 800710c:	685b      	ldr	r3, [r3, #4]
 800710e:	68db      	ldr	r3, [r3, #12]
 8007110:	4a09      	ldr	r2, [pc, #36]	; (8007138 <vTaskSwitchContext+0xb8>)
 8007112:	6013      	str	r3, [r2, #0]
 8007114:	4a06      	ldr	r2, [pc, #24]	; (8007130 <vTaskSwitchContext+0xb0>)
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	6013      	str	r3, [r2, #0]
}
 800711a:	bf00      	nop
 800711c:	3714      	adds	r7, #20
 800711e:	46bd      	mov	sp, r7
 8007120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007124:	4770      	bx	lr
 8007126:	bf00      	nop
 8007128:	20000c4c 	.word	0x20000c4c
 800712c:	20000c38 	.word	0x20000c38
 8007130:	20000c2c 	.word	0x20000c2c
 8007134:	20000754 	.word	0x20000754
 8007138:	20000750 	.word	0x20000750

0800713c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800713c:	b580      	push	{r7, lr}
 800713e:	b084      	sub	sp, #16
 8007140:	af00      	add	r7, sp, #0
 8007142:	6078      	str	r0, [r7, #4]
 8007144:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	2b00      	cmp	r3, #0
 800714a:	d10a      	bne.n	8007162 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800714c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007150:	f383 8811 	msr	BASEPRI, r3
 8007154:	f3bf 8f6f 	isb	sy
 8007158:	f3bf 8f4f 	dsb	sy
 800715c:	60fb      	str	r3, [r7, #12]
}
 800715e:	bf00      	nop
 8007160:	e7fe      	b.n	8007160 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007162:	4b07      	ldr	r3, [pc, #28]	; (8007180 <vTaskPlaceOnEventList+0x44>)
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	3318      	adds	r3, #24
 8007168:	4619      	mov	r1, r3
 800716a:	6878      	ldr	r0, [r7, #4]
 800716c:	f7fe fe87 	bl	8005e7e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007170:	2101      	movs	r1, #1
 8007172:	6838      	ldr	r0, [r7, #0]
 8007174:	f000 fa7c 	bl	8007670 <prvAddCurrentTaskToDelayedList>
}
 8007178:	bf00      	nop
 800717a:	3710      	adds	r7, #16
 800717c:	46bd      	mov	sp, r7
 800717e:	bd80      	pop	{r7, pc}
 8007180:	20000750 	.word	0x20000750

08007184 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007184:	b580      	push	{r7, lr}
 8007186:	b086      	sub	sp, #24
 8007188:	af00      	add	r7, sp, #0
 800718a:	60f8      	str	r0, [r7, #12]
 800718c:	60b9      	str	r1, [r7, #8]
 800718e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	2b00      	cmp	r3, #0
 8007194:	d10a      	bne.n	80071ac <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8007196:	f04f 0350 	mov.w	r3, #80	; 0x50
 800719a:	f383 8811 	msr	BASEPRI, r3
 800719e:	f3bf 8f6f 	isb	sy
 80071a2:	f3bf 8f4f 	dsb	sy
 80071a6:	617b      	str	r3, [r7, #20]
}
 80071a8:	bf00      	nop
 80071aa:	e7fe      	b.n	80071aa <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80071ac:	4b0a      	ldr	r3, [pc, #40]	; (80071d8 <vTaskPlaceOnEventListRestricted+0x54>)
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	3318      	adds	r3, #24
 80071b2:	4619      	mov	r1, r3
 80071b4:	68f8      	ldr	r0, [r7, #12]
 80071b6:	f7fe fe3e 	bl	8005e36 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d002      	beq.n	80071c6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80071c0:	f04f 33ff 	mov.w	r3, #4294967295
 80071c4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80071c6:	6879      	ldr	r1, [r7, #4]
 80071c8:	68b8      	ldr	r0, [r7, #8]
 80071ca:	f000 fa51 	bl	8007670 <prvAddCurrentTaskToDelayedList>
	}
 80071ce:	bf00      	nop
 80071d0:	3718      	adds	r7, #24
 80071d2:	46bd      	mov	sp, r7
 80071d4:	bd80      	pop	{r7, pc}
 80071d6:	bf00      	nop
 80071d8:	20000750 	.word	0x20000750

080071dc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80071dc:	b580      	push	{r7, lr}
 80071de:	b086      	sub	sp, #24
 80071e0:	af00      	add	r7, sp, #0
 80071e2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	68db      	ldr	r3, [r3, #12]
 80071e8:	68db      	ldr	r3, [r3, #12]
 80071ea:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80071ec:	693b      	ldr	r3, [r7, #16]
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d10a      	bne.n	8007208 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80071f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071f6:	f383 8811 	msr	BASEPRI, r3
 80071fa:	f3bf 8f6f 	isb	sy
 80071fe:	f3bf 8f4f 	dsb	sy
 8007202:	60fb      	str	r3, [r7, #12]
}
 8007204:	bf00      	nop
 8007206:	e7fe      	b.n	8007206 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007208:	693b      	ldr	r3, [r7, #16]
 800720a:	3318      	adds	r3, #24
 800720c:	4618      	mov	r0, r3
 800720e:	f7fe fe6f 	bl	8005ef0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007212:	4b1e      	ldr	r3, [pc, #120]	; (800728c <xTaskRemoveFromEventList+0xb0>)
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	2b00      	cmp	r3, #0
 8007218:	d11d      	bne.n	8007256 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800721a:	693b      	ldr	r3, [r7, #16]
 800721c:	3304      	adds	r3, #4
 800721e:	4618      	mov	r0, r3
 8007220:	f7fe fe66 	bl	8005ef0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007224:	693b      	ldr	r3, [r7, #16]
 8007226:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007228:	4b19      	ldr	r3, [pc, #100]	; (8007290 <xTaskRemoveFromEventList+0xb4>)
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	429a      	cmp	r2, r3
 800722e:	d903      	bls.n	8007238 <xTaskRemoveFromEventList+0x5c>
 8007230:	693b      	ldr	r3, [r7, #16]
 8007232:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007234:	4a16      	ldr	r2, [pc, #88]	; (8007290 <xTaskRemoveFromEventList+0xb4>)
 8007236:	6013      	str	r3, [r2, #0]
 8007238:	693b      	ldr	r3, [r7, #16]
 800723a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800723c:	4613      	mov	r3, r2
 800723e:	009b      	lsls	r3, r3, #2
 8007240:	4413      	add	r3, r2
 8007242:	009b      	lsls	r3, r3, #2
 8007244:	4a13      	ldr	r2, [pc, #76]	; (8007294 <xTaskRemoveFromEventList+0xb8>)
 8007246:	441a      	add	r2, r3
 8007248:	693b      	ldr	r3, [r7, #16]
 800724a:	3304      	adds	r3, #4
 800724c:	4619      	mov	r1, r3
 800724e:	4610      	mov	r0, r2
 8007250:	f7fe fdf1 	bl	8005e36 <vListInsertEnd>
 8007254:	e005      	b.n	8007262 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007256:	693b      	ldr	r3, [r7, #16]
 8007258:	3318      	adds	r3, #24
 800725a:	4619      	mov	r1, r3
 800725c:	480e      	ldr	r0, [pc, #56]	; (8007298 <xTaskRemoveFromEventList+0xbc>)
 800725e:	f7fe fdea 	bl	8005e36 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007262:	693b      	ldr	r3, [r7, #16]
 8007264:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007266:	4b0d      	ldr	r3, [pc, #52]	; (800729c <xTaskRemoveFromEventList+0xc0>)
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800726c:	429a      	cmp	r2, r3
 800726e:	d905      	bls.n	800727c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007270:	2301      	movs	r3, #1
 8007272:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007274:	4b0a      	ldr	r3, [pc, #40]	; (80072a0 <xTaskRemoveFromEventList+0xc4>)
 8007276:	2201      	movs	r2, #1
 8007278:	601a      	str	r2, [r3, #0]
 800727a:	e001      	b.n	8007280 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800727c:	2300      	movs	r3, #0
 800727e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007280:	697b      	ldr	r3, [r7, #20]
}
 8007282:	4618      	mov	r0, r3
 8007284:	3718      	adds	r7, #24
 8007286:	46bd      	mov	sp, r7
 8007288:	bd80      	pop	{r7, pc}
 800728a:	bf00      	nop
 800728c:	20000c4c 	.word	0x20000c4c
 8007290:	20000c2c 	.word	0x20000c2c
 8007294:	20000754 	.word	0x20000754
 8007298:	20000be4 	.word	0x20000be4
 800729c:	20000750 	.word	0x20000750
 80072a0:	20000c38 	.word	0x20000c38

080072a4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80072a4:	b480      	push	{r7}
 80072a6:	b083      	sub	sp, #12
 80072a8:	af00      	add	r7, sp, #0
 80072aa:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80072ac:	4b06      	ldr	r3, [pc, #24]	; (80072c8 <vTaskInternalSetTimeOutState+0x24>)
 80072ae:	681a      	ldr	r2, [r3, #0]
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80072b4:	4b05      	ldr	r3, [pc, #20]	; (80072cc <vTaskInternalSetTimeOutState+0x28>)
 80072b6:	681a      	ldr	r2, [r3, #0]
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	605a      	str	r2, [r3, #4]
}
 80072bc:	bf00      	nop
 80072be:	370c      	adds	r7, #12
 80072c0:	46bd      	mov	sp, r7
 80072c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c6:	4770      	bx	lr
 80072c8:	20000c3c 	.word	0x20000c3c
 80072cc:	20000c28 	.word	0x20000c28

080072d0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80072d0:	b580      	push	{r7, lr}
 80072d2:	b088      	sub	sp, #32
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	6078      	str	r0, [r7, #4]
 80072d8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d10a      	bne.n	80072f6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80072e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072e4:	f383 8811 	msr	BASEPRI, r3
 80072e8:	f3bf 8f6f 	isb	sy
 80072ec:	f3bf 8f4f 	dsb	sy
 80072f0:	613b      	str	r3, [r7, #16]
}
 80072f2:	bf00      	nop
 80072f4:	e7fe      	b.n	80072f4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80072f6:	683b      	ldr	r3, [r7, #0]
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d10a      	bne.n	8007312 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80072fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007300:	f383 8811 	msr	BASEPRI, r3
 8007304:	f3bf 8f6f 	isb	sy
 8007308:	f3bf 8f4f 	dsb	sy
 800730c:	60fb      	str	r3, [r7, #12]
}
 800730e:	bf00      	nop
 8007310:	e7fe      	b.n	8007310 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8007312:	f000 fe7f 	bl	8008014 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007316:	4b1d      	ldr	r3, [pc, #116]	; (800738c <xTaskCheckForTimeOut+0xbc>)
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	685b      	ldr	r3, [r3, #4]
 8007320:	69ba      	ldr	r2, [r7, #24]
 8007322:	1ad3      	subs	r3, r2, r3
 8007324:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007326:	683b      	ldr	r3, [r7, #0]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800732e:	d102      	bne.n	8007336 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007330:	2300      	movs	r3, #0
 8007332:	61fb      	str	r3, [r7, #28]
 8007334:	e023      	b.n	800737e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681a      	ldr	r2, [r3, #0]
 800733a:	4b15      	ldr	r3, [pc, #84]	; (8007390 <xTaskCheckForTimeOut+0xc0>)
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	429a      	cmp	r2, r3
 8007340:	d007      	beq.n	8007352 <xTaskCheckForTimeOut+0x82>
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	685b      	ldr	r3, [r3, #4]
 8007346:	69ba      	ldr	r2, [r7, #24]
 8007348:	429a      	cmp	r2, r3
 800734a:	d302      	bcc.n	8007352 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800734c:	2301      	movs	r3, #1
 800734e:	61fb      	str	r3, [r7, #28]
 8007350:	e015      	b.n	800737e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007352:	683b      	ldr	r3, [r7, #0]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	697a      	ldr	r2, [r7, #20]
 8007358:	429a      	cmp	r2, r3
 800735a:	d20b      	bcs.n	8007374 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800735c:	683b      	ldr	r3, [r7, #0]
 800735e:	681a      	ldr	r2, [r3, #0]
 8007360:	697b      	ldr	r3, [r7, #20]
 8007362:	1ad2      	subs	r2, r2, r3
 8007364:	683b      	ldr	r3, [r7, #0]
 8007366:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007368:	6878      	ldr	r0, [r7, #4]
 800736a:	f7ff ff9b 	bl	80072a4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800736e:	2300      	movs	r3, #0
 8007370:	61fb      	str	r3, [r7, #28]
 8007372:	e004      	b.n	800737e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8007374:	683b      	ldr	r3, [r7, #0]
 8007376:	2200      	movs	r2, #0
 8007378:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800737a:	2301      	movs	r3, #1
 800737c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800737e:	f000 fe79 	bl	8008074 <vPortExitCritical>

	return xReturn;
 8007382:	69fb      	ldr	r3, [r7, #28]
}
 8007384:	4618      	mov	r0, r3
 8007386:	3720      	adds	r7, #32
 8007388:	46bd      	mov	sp, r7
 800738a:	bd80      	pop	{r7, pc}
 800738c:	20000c28 	.word	0x20000c28
 8007390:	20000c3c 	.word	0x20000c3c

08007394 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007394:	b480      	push	{r7}
 8007396:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007398:	4b03      	ldr	r3, [pc, #12]	; (80073a8 <vTaskMissedYield+0x14>)
 800739a:	2201      	movs	r2, #1
 800739c:	601a      	str	r2, [r3, #0]
}
 800739e:	bf00      	nop
 80073a0:	46bd      	mov	sp, r7
 80073a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a6:	4770      	bx	lr
 80073a8:	20000c38 	.word	0x20000c38

080073ac <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80073ac:	b580      	push	{r7, lr}
 80073ae:	b082      	sub	sp, #8
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80073b4:	f000 f852 	bl	800745c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80073b8:	4b06      	ldr	r3, [pc, #24]	; (80073d4 <prvIdleTask+0x28>)
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	2b01      	cmp	r3, #1
 80073be:	d9f9      	bls.n	80073b4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80073c0:	4b05      	ldr	r3, [pc, #20]	; (80073d8 <prvIdleTask+0x2c>)
 80073c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80073c6:	601a      	str	r2, [r3, #0]
 80073c8:	f3bf 8f4f 	dsb	sy
 80073cc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80073d0:	e7f0      	b.n	80073b4 <prvIdleTask+0x8>
 80073d2:	bf00      	nop
 80073d4:	20000754 	.word	0x20000754
 80073d8:	e000ed04 	.word	0xe000ed04

080073dc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80073dc:	b580      	push	{r7, lr}
 80073de:	b082      	sub	sp, #8
 80073e0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80073e2:	2300      	movs	r3, #0
 80073e4:	607b      	str	r3, [r7, #4]
 80073e6:	e00c      	b.n	8007402 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80073e8:	687a      	ldr	r2, [r7, #4]
 80073ea:	4613      	mov	r3, r2
 80073ec:	009b      	lsls	r3, r3, #2
 80073ee:	4413      	add	r3, r2
 80073f0:	009b      	lsls	r3, r3, #2
 80073f2:	4a12      	ldr	r2, [pc, #72]	; (800743c <prvInitialiseTaskLists+0x60>)
 80073f4:	4413      	add	r3, r2
 80073f6:	4618      	mov	r0, r3
 80073f8:	f7fe fcf0 	bl	8005ddc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	3301      	adds	r3, #1
 8007400:	607b      	str	r3, [r7, #4]
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	2b37      	cmp	r3, #55	; 0x37
 8007406:	d9ef      	bls.n	80073e8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007408:	480d      	ldr	r0, [pc, #52]	; (8007440 <prvInitialiseTaskLists+0x64>)
 800740a:	f7fe fce7 	bl	8005ddc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800740e:	480d      	ldr	r0, [pc, #52]	; (8007444 <prvInitialiseTaskLists+0x68>)
 8007410:	f7fe fce4 	bl	8005ddc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007414:	480c      	ldr	r0, [pc, #48]	; (8007448 <prvInitialiseTaskLists+0x6c>)
 8007416:	f7fe fce1 	bl	8005ddc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800741a:	480c      	ldr	r0, [pc, #48]	; (800744c <prvInitialiseTaskLists+0x70>)
 800741c:	f7fe fcde 	bl	8005ddc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007420:	480b      	ldr	r0, [pc, #44]	; (8007450 <prvInitialiseTaskLists+0x74>)
 8007422:	f7fe fcdb 	bl	8005ddc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007426:	4b0b      	ldr	r3, [pc, #44]	; (8007454 <prvInitialiseTaskLists+0x78>)
 8007428:	4a05      	ldr	r2, [pc, #20]	; (8007440 <prvInitialiseTaskLists+0x64>)
 800742a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800742c:	4b0a      	ldr	r3, [pc, #40]	; (8007458 <prvInitialiseTaskLists+0x7c>)
 800742e:	4a05      	ldr	r2, [pc, #20]	; (8007444 <prvInitialiseTaskLists+0x68>)
 8007430:	601a      	str	r2, [r3, #0]
}
 8007432:	bf00      	nop
 8007434:	3708      	adds	r7, #8
 8007436:	46bd      	mov	sp, r7
 8007438:	bd80      	pop	{r7, pc}
 800743a:	bf00      	nop
 800743c:	20000754 	.word	0x20000754
 8007440:	20000bb4 	.word	0x20000bb4
 8007444:	20000bc8 	.word	0x20000bc8
 8007448:	20000be4 	.word	0x20000be4
 800744c:	20000bf8 	.word	0x20000bf8
 8007450:	20000c10 	.word	0x20000c10
 8007454:	20000bdc 	.word	0x20000bdc
 8007458:	20000be0 	.word	0x20000be0

0800745c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800745c:	b580      	push	{r7, lr}
 800745e:	b082      	sub	sp, #8
 8007460:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007462:	e019      	b.n	8007498 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007464:	f000 fdd6 	bl	8008014 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007468:	4b10      	ldr	r3, [pc, #64]	; (80074ac <prvCheckTasksWaitingTermination+0x50>)
 800746a:	68db      	ldr	r3, [r3, #12]
 800746c:	68db      	ldr	r3, [r3, #12]
 800746e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	3304      	adds	r3, #4
 8007474:	4618      	mov	r0, r3
 8007476:	f7fe fd3b 	bl	8005ef0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800747a:	4b0d      	ldr	r3, [pc, #52]	; (80074b0 <prvCheckTasksWaitingTermination+0x54>)
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	3b01      	subs	r3, #1
 8007480:	4a0b      	ldr	r2, [pc, #44]	; (80074b0 <prvCheckTasksWaitingTermination+0x54>)
 8007482:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007484:	4b0b      	ldr	r3, [pc, #44]	; (80074b4 <prvCheckTasksWaitingTermination+0x58>)
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	3b01      	subs	r3, #1
 800748a:	4a0a      	ldr	r2, [pc, #40]	; (80074b4 <prvCheckTasksWaitingTermination+0x58>)
 800748c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800748e:	f000 fdf1 	bl	8008074 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007492:	6878      	ldr	r0, [r7, #4]
 8007494:	f000 f810 	bl	80074b8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007498:	4b06      	ldr	r3, [pc, #24]	; (80074b4 <prvCheckTasksWaitingTermination+0x58>)
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	2b00      	cmp	r3, #0
 800749e:	d1e1      	bne.n	8007464 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80074a0:	bf00      	nop
 80074a2:	bf00      	nop
 80074a4:	3708      	adds	r7, #8
 80074a6:	46bd      	mov	sp, r7
 80074a8:	bd80      	pop	{r7, pc}
 80074aa:	bf00      	nop
 80074ac:	20000bf8 	.word	0x20000bf8
 80074b0:	20000c24 	.word	0x20000c24
 80074b4:	20000c0c 	.word	0x20000c0c

080074b8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80074b8:	b580      	push	{r7, lr}
 80074ba:	b084      	sub	sp, #16
 80074bc:	af00      	add	r7, sp, #0
 80074be:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d108      	bne.n	80074dc <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074ce:	4618      	mov	r0, r3
 80074d0:	f000 ff8e 	bl	80083f0 <vPortFree>
				vPortFree( pxTCB );
 80074d4:	6878      	ldr	r0, [r7, #4]
 80074d6:	f000 ff8b 	bl	80083f0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80074da:	e018      	b.n	800750e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80074e2:	2b01      	cmp	r3, #1
 80074e4:	d103      	bne.n	80074ee <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80074e6:	6878      	ldr	r0, [r7, #4]
 80074e8:	f000 ff82 	bl	80083f0 <vPortFree>
	}
 80074ec:	e00f      	b.n	800750e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80074f4:	2b02      	cmp	r3, #2
 80074f6:	d00a      	beq.n	800750e <prvDeleteTCB+0x56>
	__asm volatile
 80074f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074fc:	f383 8811 	msr	BASEPRI, r3
 8007500:	f3bf 8f6f 	isb	sy
 8007504:	f3bf 8f4f 	dsb	sy
 8007508:	60fb      	str	r3, [r7, #12]
}
 800750a:	bf00      	nop
 800750c:	e7fe      	b.n	800750c <prvDeleteTCB+0x54>
	}
 800750e:	bf00      	nop
 8007510:	3710      	adds	r7, #16
 8007512:	46bd      	mov	sp, r7
 8007514:	bd80      	pop	{r7, pc}
	...

08007518 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007518:	b480      	push	{r7}
 800751a:	b083      	sub	sp, #12
 800751c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800751e:	4b0c      	ldr	r3, [pc, #48]	; (8007550 <prvResetNextTaskUnblockTime+0x38>)
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	2b00      	cmp	r3, #0
 8007526:	d104      	bne.n	8007532 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007528:	4b0a      	ldr	r3, [pc, #40]	; (8007554 <prvResetNextTaskUnblockTime+0x3c>)
 800752a:	f04f 32ff 	mov.w	r2, #4294967295
 800752e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007530:	e008      	b.n	8007544 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007532:	4b07      	ldr	r3, [pc, #28]	; (8007550 <prvResetNextTaskUnblockTime+0x38>)
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	68db      	ldr	r3, [r3, #12]
 8007538:	68db      	ldr	r3, [r3, #12]
 800753a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	685b      	ldr	r3, [r3, #4]
 8007540:	4a04      	ldr	r2, [pc, #16]	; (8007554 <prvResetNextTaskUnblockTime+0x3c>)
 8007542:	6013      	str	r3, [r2, #0]
}
 8007544:	bf00      	nop
 8007546:	370c      	adds	r7, #12
 8007548:	46bd      	mov	sp, r7
 800754a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800754e:	4770      	bx	lr
 8007550:	20000bdc 	.word	0x20000bdc
 8007554:	20000c44 	.word	0x20000c44

08007558 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007558:	b480      	push	{r7}
 800755a:	b083      	sub	sp, #12
 800755c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800755e:	4b0b      	ldr	r3, [pc, #44]	; (800758c <xTaskGetSchedulerState+0x34>)
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	2b00      	cmp	r3, #0
 8007564:	d102      	bne.n	800756c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007566:	2301      	movs	r3, #1
 8007568:	607b      	str	r3, [r7, #4]
 800756a:	e008      	b.n	800757e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800756c:	4b08      	ldr	r3, [pc, #32]	; (8007590 <xTaskGetSchedulerState+0x38>)
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	2b00      	cmp	r3, #0
 8007572:	d102      	bne.n	800757a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007574:	2302      	movs	r3, #2
 8007576:	607b      	str	r3, [r7, #4]
 8007578:	e001      	b.n	800757e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800757a:	2300      	movs	r3, #0
 800757c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800757e:	687b      	ldr	r3, [r7, #4]
	}
 8007580:	4618      	mov	r0, r3
 8007582:	370c      	adds	r7, #12
 8007584:	46bd      	mov	sp, r7
 8007586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800758a:	4770      	bx	lr
 800758c:	20000c30 	.word	0x20000c30
 8007590:	20000c4c 	.word	0x20000c4c

08007594 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007594:	b580      	push	{r7, lr}
 8007596:	b086      	sub	sp, #24
 8007598:	af00      	add	r7, sp, #0
 800759a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80075a0:	2300      	movs	r3, #0
 80075a2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d056      	beq.n	8007658 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80075aa:	4b2e      	ldr	r3, [pc, #184]	; (8007664 <xTaskPriorityDisinherit+0xd0>)
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	693a      	ldr	r2, [r7, #16]
 80075b0:	429a      	cmp	r2, r3
 80075b2:	d00a      	beq.n	80075ca <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80075b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075b8:	f383 8811 	msr	BASEPRI, r3
 80075bc:	f3bf 8f6f 	isb	sy
 80075c0:	f3bf 8f4f 	dsb	sy
 80075c4:	60fb      	str	r3, [r7, #12]
}
 80075c6:	bf00      	nop
 80075c8:	e7fe      	b.n	80075c8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80075ca:	693b      	ldr	r3, [r7, #16]
 80075cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d10a      	bne.n	80075e8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80075d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075d6:	f383 8811 	msr	BASEPRI, r3
 80075da:	f3bf 8f6f 	isb	sy
 80075de:	f3bf 8f4f 	dsb	sy
 80075e2:	60bb      	str	r3, [r7, #8]
}
 80075e4:	bf00      	nop
 80075e6:	e7fe      	b.n	80075e6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80075e8:	693b      	ldr	r3, [r7, #16]
 80075ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80075ec:	1e5a      	subs	r2, r3, #1
 80075ee:	693b      	ldr	r3, [r7, #16]
 80075f0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80075f2:	693b      	ldr	r3, [r7, #16]
 80075f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075f6:	693b      	ldr	r3, [r7, #16]
 80075f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80075fa:	429a      	cmp	r2, r3
 80075fc:	d02c      	beq.n	8007658 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80075fe:	693b      	ldr	r3, [r7, #16]
 8007600:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007602:	2b00      	cmp	r3, #0
 8007604:	d128      	bne.n	8007658 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007606:	693b      	ldr	r3, [r7, #16]
 8007608:	3304      	adds	r3, #4
 800760a:	4618      	mov	r0, r3
 800760c:	f7fe fc70 	bl	8005ef0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007610:	693b      	ldr	r3, [r7, #16]
 8007612:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007614:	693b      	ldr	r3, [r7, #16]
 8007616:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007618:	693b      	ldr	r3, [r7, #16]
 800761a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800761c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007620:	693b      	ldr	r3, [r7, #16]
 8007622:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007624:	693b      	ldr	r3, [r7, #16]
 8007626:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007628:	4b0f      	ldr	r3, [pc, #60]	; (8007668 <xTaskPriorityDisinherit+0xd4>)
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	429a      	cmp	r2, r3
 800762e:	d903      	bls.n	8007638 <xTaskPriorityDisinherit+0xa4>
 8007630:	693b      	ldr	r3, [r7, #16]
 8007632:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007634:	4a0c      	ldr	r2, [pc, #48]	; (8007668 <xTaskPriorityDisinherit+0xd4>)
 8007636:	6013      	str	r3, [r2, #0]
 8007638:	693b      	ldr	r3, [r7, #16]
 800763a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800763c:	4613      	mov	r3, r2
 800763e:	009b      	lsls	r3, r3, #2
 8007640:	4413      	add	r3, r2
 8007642:	009b      	lsls	r3, r3, #2
 8007644:	4a09      	ldr	r2, [pc, #36]	; (800766c <xTaskPriorityDisinherit+0xd8>)
 8007646:	441a      	add	r2, r3
 8007648:	693b      	ldr	r3, [r7, #16]
 800764a:	3304      	adds	r3, #4
 800764c:	4619      	mov	r1, r3
 800764e:	4610      	mov	r0, r2
 8007650:	f7fe fbf1 	bl	8005e36 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007654:	2301      	movs	r3, #1
 8007656:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007658:	697b      	ldr	r3, [r7, #20]
	}
 800765a:	4618      	mov	r0, r3
 800765c:	3718      	adds	r7, #24
 800765e:	46bd      	mov	sp, r7
 8007660:	bd80      	pop	{r7, pc}
 8007662:	bf00      	nop
 8007664:	20000750 	.word	0x20000750
 8007668:	20000c2c 	.word	0x20000c2c
 800766c:	20000754 	.word	0x20000754

08007670 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007670:	b580      	push	{r7, lr}
 8007672:	b084      	sub	sp, #16
 8007674:	af00      	add	r7, sp, #0
 8007676:	6078      	str	r0, [r7, #4]
 8007678:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800767a:	4b21      	ldr	r3, [pc, #132]	; (8007700 <prvAddCurrentTaskToDelayedList+0x90>)
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007680:	4b20      	ldr	r3, [pc, #128]	; (8007704 <prvAddCurrentTaskToDelayedList+0x94>)
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	3304      	adds	r3, #4
 8007686:	4618      	mov	r0, r3
 8007688:	f7fe fc32 	bl	8005ef0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007692:	d10a      	bne.n	80076aa <prvAddCurrentTaskToDelayedList+0x3a>
 8007694:	683b      	ldr	r3, [r7, #0]
 8007696:	2b00      	cmp	r3, #0
 8007698:	d007      	beq.n	80076aa <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800769a:	4b1a      	ldr	r3, [pc, #104]	; (8007704 <prvAddCurrentTaskToDelayedList+0x94>)
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	3304      	adds	r3, #4
 80076a0:	4619      	mov	r1, r3
 80076a2:	4819      	ldr	r0, [pc, #100]	; (8007708 <prvAddCurrentTaskToDelayedList+0x98>)
 80076a4:	f7fe fbc7 	bl	8005e36 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80076a8:	e026      	b.n	80076f8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80076aa:	68fa      	ldr	r2, [r7, #12]
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	4413      	add	r3, r2
 80076b0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80076b2:	4b14      	ldr	r3, [pc, #80]	; (8007704 <prvAddCurrentTaskToDelayedList+0x94>)
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	68ba      	ldr	r2, [r7, #8]
 80076b8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80076ba:	68ba      	ldr	r2, [r7, #8]
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	429a      	cmp	r2, r3
 80076c0:	d209      	bcs.n	80076d6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80076c2:	4b12      	ldr	r3, [pc, #72]	; (800770c <prvAddCurrentTaskToDelayedList+0x9c>)
 80076c4:	681a      	ldr	r2, [r3, #0]
 80076c6:	4b0f      	ldr	r3, [pc, #60]	; (8007704 <prvAddCurrentTaskToDelayedList+0x94>)
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	3304      	adds	r3, #4
 80076cc:	4619      	mov	r1, r3
 80076ce:	4610      	mov	r0, r2
 80076d0:	f7fe fbd5 	bl	8005e7e <vListInsert>
}
 80076d4:	e010      	b.n	80076f8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80076d6:	4b0e      	ldr	r3, [pc, #56]	; (8007710 <prvAddCurrentTaskToDelayedList+0xa0>)
 80076d8:	681a      	ldr	r2, [r3, #0]
 80076da:	4b0a      	ldr	r3, [pc, #40]	; (8007704 <prvAddCurrentTaskToDelayedList+0x94>)
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	3304      	adds	r3, #4
 80076e0:	4619      	mov	r1, r3
 80076e2:	4610      	mov	r0, r2
 80076e4:	f7fe fbcb 	bl	8005e7e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80076e8:	4b0a      	ldr	r3, [pc, #40]	; (8007714 <prvAddCurrentTaskToDelayedList+0xa4>)
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	68ba      	ldr	r2, [r7, #8]
 80076ee:	429a      	cmp	r2, r3
 80076f0:	d202      	bcs.n	80076f8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80076f2:	4a08      	ldr	r2, [pc, #32]	; (8007714 <prvAddCurrentTaskToDelayedList+0xa4>)
 80076f4:	68bb      	ldr	r3, [r7, #8]
 80076f6:	6013      	str	r3, [r2, #0]
}
 80076f8:	bf00      	nop
 80076fa:	3710      	adds	r7, #16
 80076fc:	46bd      	mov	sp, r7
 80076fe:	bd80      	pop	{r7, pc}
 8007700:	20000c28 	.word	0x20000c28
 8007704:	20000750 	.word	0x20000750
 8007708:	20000c10 	.word	0x20000c10
 800770c:	20000be0 	.word	0x20000be0
 8007710:	20000bdc 	.word	0x20000bdc
 8007714:	20000c44 	.word	0x20000c44

08007718 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007718:	b580      	push	{r7, lr}
 800771a:	b08a      	sub	sp, #40	; 0x28
 800771c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800771e:	2300      	movs	r3, #0
 8007720:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007722:	f000 fb07 	bl	8007d34 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007726:	4b1c      	ldr	r3, [pc, #112]	; (8007798 <xTimerCreateTimerTask+0x80>)
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	2b00      	cmp	r3, #0
 800772c:	d021      	beq.n	8007772 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800772e:	2300      	movs	r3, #0
 8007730:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007732:	2300      	movs	r3, #0
 8007734:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007736:	1d3a      	adds	r2, r7, #4
 8007738:	f107 0108 	add.w	r1, r7, #8
 800773c:	f107 030c 	add.w	r3, r7, #12
 8007740:	4618      	mov	r0, r3
 8007742:	f7fe fb31 	bl	8005da8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007746:	6879      	ldr	r1, [r7, #4]
 8007748:	68bb      	ldr	r3, [r7, #8]
 800774a:	68fa      	ldr	r2, [r7, #12]
 800774c:	9202      	str	r2, [sp, #8]
 800774e:	9301      	str	r3, [sp, #4]
 8007750:	2302      	movs	r3, #2
 8007752:	9300      	str	r3, [sp, #0]
 8007754:	2300      	movs	r3, #0
 8007756:	460a      	mov	r2, r1
 8007758:	4910      	ldr	r1, [pc, #64]	; (800779c <xTimerCreateTimerTask+0x84>)
 800775a:	4811      	ldr	r0, [pc, #68]	; (80077a0 <xTimerCreateTimerTask+0x88>)
 800775c:	f7ff f8de 	bl	800691c <xTaskCreateStatic>
 8007760:	4603      	mov	r3, r0
 8007762:	4a10      	ldr	r2, [pc, #64]	; (80077a4 <xTimerCreateTimerTask+0x8c>)
 8007764:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007766:	4b0f      	ldr	r3, [pc, #60]	; (80077a4 <xTimerCreateTimerTask+0x8c>)
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	2b00      	cmp	r3, #0
 800776c:	d001      	beq.n	8007772 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800776e:	2301      	movs	r3, #1
 8007770:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007772:	697b      	ldr	r3, [r7, #20]
 8007774:	2b00      	cmp	r3, #0
 8007776:	d10a      	bne.n	800778e <xTimerCreateTimerTask+0x76>
	__asm volatile
 8007778:	f04f 0350 	mov.w	r3, #80	; 0x50
 800777c:	f383 8811 	msr	BASEPRI, r3
 8007780:	f3bf 8f6f 	isb	sy
 8007784:	f3bf 8f4f 	dsb	sy
 8007788:	613b      	str	r3, [r7, #16]
}
 800778a:	bf00      	nop
 800778c:	e7fe      	b.n	800778c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800778e:	697b      	ldr	r3, [r7, #20]
}
 8007790:	4618      	mov	r0, r3
 8007792:	3718      	adds	r7, #24
 8007794:	46bd      	mov	sp, r7
 8007796:	bd80      	pop	{r7, pc}
 8007798:	20000c80 	.word	0x20000c80
 800779c:	08009b54 	.word	0x08009b54
 80077a0:	080078dd 	.word	0x080078dd
 80077a4:	20000c84 	.word	0x20000c84

080077a8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80077a8:	b580      	push	{r7, lr}
 80077aa:	b08a      	sub	sp, #40	; 0x28
 80077ac:	af00      	add	r7, sp, #0
 80077ae:	60f8      	str	r0, [r7, #12]
 80077b0:	60b9      	str	r1, [r7, #8]
 80077b2:	607a      	str	r2, [r7, #4]
 80077b4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80077b6:	2300      	movs	r3, #0
 80077b8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d10a      	bne.n	80077d6 <xTimerGenericCommand+0x2e>
	__asm volatile
 80077c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077c4:	f383 8811 	msr	BASEPRI, r3
 80077c8:	f3bf 8f6f 	isb	sy
 80077cc:	f3bf 8f4f 	dsb	sy
 80077d0:	623b      	str	r3, [r7, #32]
}
 80077d2:	bf00      	nop
 80077d4:	e7fe      	b.n	80077d4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80077d6:	4b1a      	ldr	r3, [pc, #104]	; (8007840 <xTimerGenericCommand+0x98>)
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d02a      	beq.n	8007834 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80077de:	68bb      	ldr	r3, [r7, #8]
 80077e0:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80077ea:	68bb      	ldr	r3, [r7, #8]
 80077ec:	2b05      	cmp	r3, #5
 80077ee:	dc18      	bgt.n	8007822 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80077f0:	f7ff feb2 	bl	8007558 <xTaskGetSchedulerState>
 80077f4:	4603      	mov	r3, r0
 80077f6:	2b02      	cmp	r3, #2
 80077f8:	d109      	bne.n	800780e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80077fa:	4b11      	ldr	r3, [pc, #68]	; (8007840 <xTimerGenericCommand+0x98>)
 80077fc:	6818      	ldr	r0, [r3, #0]
 80077fe:	f107 0110 	add.w	r1, r7, #16
 8007802:	2300      	movs	r3, #0
 8007804:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007806:	f7fe fca1 	bl	800614c <xQueueGenericSend>
 800780a:	6278      	str	r0, [r7, #36]	; 0x24
 800780c:	e012      	b.n	8007834 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800780e:	4b0c      	ldr	r3, [pc, #48]	; (8007840 <xTimerGenericCommand+0x98>)
 8007810:	6818      	ldr	r0, [r3, #0]
 8007812:	f107 0110 	add.w	r1, r7, #16
 8007816:	2300      	movs	r3, #0
 8007818:	2200      	movs	r2, #0
 800781a:	f7fe fc97 	bl	800614c <xQueueGenericSend>
 800781e:	6278      	str	r0, [r7, #36]	; 0x24
 8007820:	e008      	b.n	8007834 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007822:	4b07      	ldr	r3, [pc, #28]	; (8007840 <xTimerGenericCommand+0x98>)
 8007824:	6818      	ldr	r0, [r3, #0]
 8007826:	f107 0110 	add.w	r1, r7, #16
 800782a:	2300      	movs	r3, #0
 800782c:	683a      	ldr	r2, [r7, #0]
 800782e:	f7fe fd8b 	bl	8006348 <xQueueGenericSendFromISR>
 8007832:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007836:	4618      	mov	r0, r3
 8007838:	3728      	adds	r7, #40	; 0x28
 800783a:	46bd      	mov	sp, r7
 800783c:	bd80      	pop	{r7, pc}
 800783e:	bf00      	nop
 8007840:	20000c80 	.word	0x20000c80

08007844 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007844:	b580      	push	{r7, lr}
 8007846:	b088      	sub	sp, #32
 8007848:	af02      	add	r7, sp, #8
 800784a:	6078      	str	r0, [r7, #4]
 800784c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800784e:	4b22      	ldr	r3, [pc, #136]	; (80078d8 <prvProcessExpiredTimer+0x94>)
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	68db      	ldr	r3, [r3, #12]
 8007854:	68db      	ldr	r3, [r3, #12]
 8007856:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007858:	697b      	ldr	r3, [r7, #20]
 800785a:	3304      	adds	r3, #4
 800785c:	4618      	mov	r0, r3
 800785e:	f7fe fb47 	bl	8005ef0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007862:	697b      	ldr	r3, [r7, #20]
 8007864:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007868:	f003 0304 	and.w	r3, r3, #4
 800786c:	2b00      	cmp	r3, #0
 800786e:	d022      	beq.n	80078b6 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007870:	697b      	ldr	r3, [r7, #20]
 8007872:	699a      	ldr	r2, [r3, #24]
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	18d1      	adds	r1, r2, r3
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	683a      	ldr	r2, [r7, #0]
 800787c:	6978      	ldr	r0, [r7, #20]
 800787e:	f000 f8d1 	bl	8007a24 <prvInsertTimerInActiveList>
 8007882:	4603      	mov	r3, r0
 8007884:	2b00      	cmp	r3, #0
 8007886:	d01f      	beq.n	80078c8 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007888:	2300      	movs	r3, #0
 800788a:	9300      	str	r3, [sp, #0]
 800788c:	2300      	movs	r3, #0
 800788e:	687a      	ldr	r2, [r7, #4]
 8007890:	2100      	movs	r1, #0
 8007892:	6978      	ldr	r0, [r7, #20]
 8007894:	f7ff ff88 	bl	80077a8 <xTimerGenericCommand>
 8007898:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800789a:	693b      	ldr	r3, [r7, #16]
 800789c:	2b00      	cmp	r3, #0
 800789e:	d113      	bne.n	80078c8 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80078a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078a4:	f383 8811 	msr	BASEPRI, r3
 80078a8:	f3bf 8f6f 	isb	sy
 80078ac:	f3bf 8f4f 	dsb	sy
 80078b0:	60fb      	str	r3, [r7, #12]
}
 80078b2:	bf00      	nop
 80078b4:	e7fe      	b.n	80078b4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80078b6:	697b      	ldr	r3, [r7, #20]
 80078b8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80078bc:	f023 0301 	bic.w	r3, r3, #1
 80078c0:	b2da      	uxtb	r2, r3
 80078c2:	697b      	ldr	r3, [r7, #20]
 80078c4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80078c8:	697b      	ldr	r3, [r7, #20]
 80078ca:	6a1b      	ldr	r3, [r3, #32]
 80078cc:	6978      	ldr	r0, [r7, #20]
 80078ce:	4798      	blx	r3
}
 80078d0:	bf00      	nop
 80078d2:	3718      	adds	r7, #24
 80078d4:	46bd      	mov	sp, r7
 80078d6:	bd80      	pop	{r7, pc}
 80078d8:	20000c78 	.word	0x20000c78

080078dc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80078dc:	b580      	push	{r7, lr}
 80078de:	b084      	sub	sp, #16
 80078e0:	af00      	add	r7, sp, #0
 80078e2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80078e4:	f107 0308 	add.w	r3, r7, #8
 80078e8:	4618      	mov	r0, r3
 80078ea:	f000 f857 	bl	800799c <prvGetNextExpireTime>
 80078ee:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80078f0:	68bb      	ldr	r3, [r7, #8]
 80078f2:	4619      	mov	r1, r3
 80078f4:	68f8      	ldr	r0, [r7, #12]
 80078f6:	f000 f803 	bl	8007900 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80078fa:	f000 f8d5 	bl	8007aa8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80078fe:	e7f1      	b.n	80078e4 <prvTimerTask+0x8>

08007900 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007900:	b580      	push	{r7, lr}
 8007902:	b084      	sub	sp, #16
 8007904:	af00      	add	r7, sp, #0
 8007906:	6078      	str	r0, [r7, #4]
 8007908:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800790a:	f7ff fa43 	bl	8006d94 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800790e:	f107 0308 	add.w	r3, r7, #8
 8007912:	4618      	mov	r0, r3
 8007914:	f000 f866 	bl	80079e4 <prvSampleTimeNow>
 8007918:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800791a:	68bb      	ldr	r3, [r7, #8]
 800791c:	2b00      	cmp	r3, #0
 800791e:	d130      	bne.n	8007982 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007920:	683b      	ldr	r3, [r7, #0]
 8007922:	2b00      	cmp	r3, #0
 8007924:	d10a      	bne.n	800793c <prvProcessTimerOrBlockTask+0x3c>
 8007926:	687a      	ldr	r2, [r7, #4]
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	429a      	cmp	r2, r3
 800792c:	d806      	bhi.n	800793c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800792e:	f7ff fa3f 	bl	8006db0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007932:	68f9      	ldr	r1, [r7, #12]
 8007934:	6878      	ldr	r0, [r7, #4]
 8007936:	f7ff ff85 	bl	8007844 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800793a:	e024      	b.n	8007986 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800793c:	683b      	ldr	r3, [r7, #0]
 800793e:	2b00      	cmp	r3, #0
 8007940:	d008      	beq.n	8007954 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007942:	4b13      	ldr	r3, [pc, #76]	; (8007990 <prvProcessTimerOrBlockTask+0x90>)
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	2b00      	cmp	r3, #0
 800794a:	d101      	bne.n	8007950 <prvProcessTimerOrBlockTask+0x50>
 800794c:	2301      	movs	r3, #1
 800794e:	e000      	b.n	8007952 <prvProcessTimerOrBlockTask+0x52>
 8007950:	2300      	movs	r3, #0
 8007952:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007954:	4b0f      	ldr	r3, [pc, #60]	; (8007994 <prvProcessTimerOrBlockTask+0x94>)
 8007956:	6818      	ldr	r0, [r3, #0]
 8007958:	687a      	ldr	r2, [r7, #4]
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	1ad3      	subs	r3, r2, r3
 800795e:	683a      	ldr	r2, [r7, #0]
 8007960:	4619      	mov	r1, r3
 8007962:	f7fe ffa7 	bl	80068b4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007966:	f7ff fa23 	bl	8006db0 <xTaskResumeAll>
 800796a:	4603      	mov	r3, r0
 800796c:	2b00      	cmp	r3, #0
 800796e:	d10a      	bne.n	8007986 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007970:	4b09      	ldr	r3, [pc, #36]	; (8007998 <prvProcessTimerOrBlockTask+0x98>)
 8007972:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007976:	601a      	str	r2, [r3, #0]
 8007978:	f3bf 8f4f 	dsb	sy
 800797c:	f3bf 8f6f 	isb	sy
}
 8007980:	e001      	b.n	8007986 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007982:	f7ff fa15 	bl	8006db0 <xTaskResumeAll>
}
 8007986:	bf00      	nop
 8007988:	3710      	adds	r7, #16
 800798a:	46bd      	mov	sp, r7
 800798c:	bd80      	pop	{r7, pc}
 800798e:	bf00      	nop
 8007990:	20000c7c 	.word	0x20000c7c
 8007994:	20000c80 	.word	0x20000c80
 8007998:	e000ed04 	.word	0xe000ed04

0800799c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800799c:	b480      	push	{r7}
 800799e:	b085      	sub	sp, #20
 80079a0:	af00      	add	r7, sp, #0
 80079a2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80079a4:	4b0e      	ldr	r3, [pc, #56]	; (80079e0 <prvGetNextExpireTime+0x44>)
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d101      	bne.n	80079b2 <prvGetNextExpireTime+0x16>
 80079ae:	2201      	movs	r2, #1
 80079b0:	e000      	b.n	80079b4 <prvGetNextExpireTime+0x18>
 80079b2:	2200      	movs	r2, #0
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d105      	bne.n	80079cc <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80079c0:	4b07      	ldr	r3, [pc, #28]	; (80079e0 <prvGetNextExpireTime+0x44>)
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	68db      	ldr	r3, [r3, #12]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	60fb      	str	r3, [r7, #12]
 80079ca:	e001      	b.n	80079d0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80079cc:	2300      	movs	r3, #0
 80079ce:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80079d0:	68fb      	ldr	r3, [r7, #12]
}
 80079d2:	4618      	mov	r0, r3
 80079d4:	3714      	adds	r7, #20
 80079d6:	46bd      	mov	sp, r7
 80079d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079dc:	4770      	bx	lr
 80079de:	bf00      	nop
 80079e0:	20000c78 	.word	0x20000c78

080079e4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80079e4:	b580      	push	{r7, lr}
 80079e6:	b084      	sub	sp, #16
 80079e8:	af00      	add	r7, sp, #0
 80079ea:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80079ec:	f7ff fa7e 	bl	8006eec <xTaskGetTickCount>
 80079f0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80079f2:	4b0b      	ldr	r3, [pc, #44]	; (8007a20 <prvSampleTimeNow+0x3c>)
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	68fa      	ldr	r2, [r7, #12]
 80079f8:	429a      	cmp	r2, r3
 80079fa:	d205      	bcs.n	8007a08 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80079fc:	f000 f936 	bl	8007c6c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	2201      	movs	r2, #1
 8007a04:	601a      	str	r2, [r3, #0]
 8007a06:	e002      	b.n	8007a0e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	2200      	movs	r2, #0
 8007a0c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007a0e:	4a04      	ldr	r2, [pc, #16]	; (8007a20 <prvSampleTimeNow+0x3c>)
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007a14:	68fb      	ldr	r3, [r7, #12]
}
 8007a16:	4618      	mov	r0, r3
 8007a18:	3710      	adds	r7, #16
 8007a1a:	46bd      	mov	sp, r7
 8007a1c:	bd80      	pop	{r7, pc}
 8007a1e:	bf00      	nop
 8007a20:	20000c88 	.word	0x20000c88

08007a24 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007a24:	b580      	push	{r7, lr}
 8007a26:	b086      	sub	sp, #24
 8007a28:	af00      	add	r7, sp, #0
 8007a2a:	60f8      	str	r0, [r7, #12]
 8007a2c:	60b9      	str	r1, [r7, #8]
 8007a2e:	607a      	str	r2, [r7, #4]
 8007a30:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007a32:	2300      	movs	r3, #0
 8007a34:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	68ba      	ldr	r2, [r7, #8]
 8007a3a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	68fa      	ldr	r2, [r7, #12]
 8007a40:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007a42:	68ba      	ldr	r2, [r7, #8]
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	429a      	cmp	r2, r3
 8007a48:	d812      	bhi.n	8007a70 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007a4a:	687a      	ldr	r2, [r7, #4]
 8007a4c:	683b      	ldr	r3, [r7, #0]
 8007a4e:	1ad2      	subs	r2, r2, r3
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	699b      	ldr	r3, [r3, #24]
 8007a54:	429a      	cmp	r2, r3
 8007a56:	d302      	bcc.n	8007a5e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007a58:	2301      	movs	r3, #1
 8007a5a:	617b      	str	r3, [r7, #20]
 8007a5c:	e01b      	b.n	8007a96 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007a5e:	4b10      	ldr	r3, [pc, #64]	; (8007aa0 <prvInsertTimerInActiveList+0x7c>)
 8007a60:	681a      	ldr	r2, [r3, #0]
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	3304      	adds	r3, #4
 8007a66:	4619      	mov	r1, r3
 8007a68:	4610      	mov	r0, r2
 8007a6a:	f7fe fa08 	bl	8005e7e <vListInsert>
 8007a6e:	e012      	b.n	8007a96 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007a70:	687a      	ldr	r2, [r7, #4]
 8007a72:	683b      	ldr	r3, [r7, #0]
 8007a74:	429a      	cmp	r2, r3
 8007a76:	d206      	bcs.n	8007a86 <prvInsertTimerInActiveList+0x62>
 8007a78:	68ba      	ldr	r2, [r7, #8]
 8007a7a:	683b      	ldr	r3, [r7, #0]
 8007a7c:	429a      	cmp	r2, r3
 8007a7e:	d302      	bcc.n	8007a86 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007a80:	2301      	movs	r3, #1
 8007a82:	617b      	str	r3, [r7, #20]
 8007a84:	e007      	b.n	8007a96 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007a86:	4b07      	ldr	r3, [pc, #28]	; (8007aa4 <prvInsertTimerInActiveList+0x80>)
 8007a88:	681a      	ldr	r2, [r3, #0]
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	3304      	adds	r3, #4
 8007a8e:	4619      	mov	r1, r3
 8007a90:	4610      	mov	r0, r2
 8007a92:	f7fe f9f4 	bl	8005e7e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007a96:	697b      	ldr	r3, [r7, #20]
}
 8007a98:	4618      	mov	r0, r3
 8007a9a:	3718      	adds	r7, #24
 8007a9c:	46bd      	mov	sp, r7
 8007a9e:	bd80      	pop	{r7, pc}
 8007aa0:	20000c7c 	.word	0x20000c7c
 8007aa4:	20000c78 	.word	0x20000c78

08007aa8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007aa8:	b580      	push	{r7, lr}
 8007aaa:	b08e      	sub	sp, #56	; 0x38
 8007aac:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007aae:	e0ca      	b.n	8007c46 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	da18      	bge.n	8007ae8 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007ab6:	1d3b      	adds	r3, r7, #4
 8007ab8:	3304      	adds	r3, #4
 8007aba:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007abc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d10a      	bne.n	8007ad8 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8007ac2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ac6:	f383 8811 	msr	BASEPRI, r3
 8007aca:	f3bf 8f6f 	isb	sy
 8007ace:	f3bf 8f4f 	dsb	sy
 8007ad2:	61fb      	str	r3, [r7, #28]
}
 8007ad4:	bf00      	nop
 8007ad6:	e7fe      	b.n	8007ad6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007ad8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007ade:	6850      	ldr	r0, [r2, #4]
 8007ae0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007ae2:	6892      	ldr	r2, [r2, #8]
 8007ae4:	4611      	mov	r1, r2
 8007ae6:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	f2c0 80aa 	blt.w	8007c44 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007af4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007af6:	695b      	ldr	r3, [r3, #20]
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d004      	beq.n	8007b06 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007afc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007afe:	3304      	adds	r3, #4
 8007b00:	4618      	mov	r0, r3
 8007b02:	f7fe f9f5 	bl	8005ef0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007b06:	463b      	mov	r3, r7
 8007b08:	4618      	mov	r0, r3
 8007b0a:	f7ff ff6b 	bl	80079e4 <prvSampleTimeNow>
 8007b0e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	2b09      	cmp	r3, #9
 8007b14:	f200 8097 	bhi.w	8007c46 <prvProcessReceivedCommands+0x19e>
 8007b18:	a201      	add	r2, pc, #4	; (adr r2, 8007b20 <prvProcessReceivedCommands+0x78>)
 8007b1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b1e:	bf00      	nop
 8007b20:	08007b49 	.word	0x08007b49
 8007b24:	08007b49 	.word	0x08007b49
 8007b28:	08007b49 	.word	0x08007b49
 8007b2c:	08007bbd 	.word	0x08007bbd
 8007b30:	08007bd1 	.word	0x08007bd1
 8007b34:	08007c1b 	.word	0x08007c1b
 8007b38:	08007b49 	.word	0x08007b49
 8007b3c:	08007b49 	.word	0x08007b49
 8007b40:	08007bbd 	.word	0x08007bbd
 8007b44:	08007bd1 	.word	0x08007bd1
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007b48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b4a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007b4e:	f043 0301 	orr.w	r3, r3, #1
 8007b52:	b2da      	uxtb	r2, r3
 8007b54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b56:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007b5a:	68ba      	ldr	r2, [r7, #8]
 8007b5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b5e:	699b      	ldr	r3, [r3, #24]
 8007b60:	18d1      	adds	r1, r2, r3
 8007b62:	68bb      	ldr	r3, [r7, #8]
 8007b64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b66:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007b68:	f7ff ff5c 	bl	8007a24 <prvInsertTimerInActiveList>
 8007b6c:	4603      	mov	r3, r0
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d069      	beq.n	8007c46 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007b72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b74:	6a1b      	ldr	r3, [r3, #32]
 8007b76:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007b78:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007b7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b7c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007b80:	f003 0304 	and.w	r3, r3, #4
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d05e      	beq.n	8007c46 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007b88:	68ba      	ldr	r2, [r7, #8]
 8007b8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b8c:	699b      	ldr	r3, [r3, #24]
 8007b8e:	441a      	add	r2, r3
 8007b90:	2300      	movs	r3, #0
 8007b92:	9300      	str	r3, [sp, #0]
 8007b94:	2300      	movs	r3, #0
 8007b96:	2100      	movs	r1, #0
 8007b98:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007b9a:	f7ff fe05 	bl	80077a8 <xTimerGenericCommand>
 8007b9e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007ba0:	6a3b      	ldr	r3, [r7, #32]
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d14f      	bne.n	8007c46 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8007ba6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007baa:	f383 8811 	msr	BASEPRI, r3
 8007bae:	f3bf 8f6f 	isb	sy
 8007bb2:	f3bf 8f4f 	dsb	sy
 8007bb6:	61bb      	str	r3, [r7, #24]
}
 8007bb8:	bf00      	nop
 8007bba:	e7fe      	b.n	8007bba <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007bbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bbe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007bc2:	f023 0301 	bic.w	r3, r3, #1
 8007bc6:	b2da      	uxtb	r2, r3
 8007bc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8007bce:	e03a      	b.n	8007c46 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007bd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bd2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007bd6:	f043 0301 	orr.w	r3, r3, #1
 8007bda:	b2da      	uxtb	r2, r3
 8007bdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bde:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007be2:	68ba      	ldr	r2, [r7, #8]
 8007be4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007be6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007be8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bea:	699b      	ldr	r3, [r3, #24]
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d10a      	bne.n	8007c06 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8007bf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bf4:	f383 8811 	msr	BASEPRI, r3
 8007bf8:	f3bf 8f6f 	isb	sy
 8007bfc:	f3bf 8f4f 	dsb	sy
 8007c00:	617b      	str	r3, [r7, #20]
}
 8007c02:	bf00      	nop
 8007c04:	e7fe      	b.n	8007c04 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007c06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c08:	699a      	ldr	r2, [r3, #24]
 8007c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c0c:	18d1      	adds	r1, r2, r3
 8007c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c12:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007c14:	f7ff ff06 	bl	8007a24 <prvInsertTimerInActiveList>
					break;
 8007c18:	e015      	b.n	8007c46 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007c1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c1c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007c20:	f003 0302 	and.w	r3, r3, #2
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d103      	bne.n	8007c30 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8007c28:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007c2a:	f000 fbe1 	bl	80083f0 <vPortFree>
 8007c2e:	e00a      	b.n	8007c46 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007c30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c32:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007c36:	f023 0301 	bic.w	r3, r3, #1
 8007c3a:	b2da      	uxtb	r2, r3
 8007c3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c3e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007c42:	e000      	b.n	8007c46 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8007c44:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007c46:	4b08      	ldr	r3, [pc, #32]	; (8007c68 <prvProcessReceivedCommands+0x1c0>)
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	1d39      	adds	r1, r7, #4
 8007c4c:	2200      	movs	r2, #0
 8007c4e:	4618      	mov	r0, r3
 8007c50:	f7fe fc16 	bl	8006480 <xQueueReceive>
 8007c54:	4603      	mov	r3, r0
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	f47f af2a 	bne.w	8007ab0 <prvProcessReceivedCommands+0x8>
	}
}
 8007c5c:	bf00      	nop
 8007c5e:	bf00      	nop
 8007c60:	3730      	adds	r7, #48	; 0x30
 8007c62:	46bd      	mov	sp, r7
 8007c64:	bd80      	pop	{r7, pc}
 8007c66:	bf00      	nop
 8007c68:	20000c80 	.word	0x20000c80

08007c6c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007c6c:	b580      	push	{r7, lr}
 8007c6e:	b088      	sub	sp, #32
 8007c70:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007c72:	e048      	b.n	8007d06 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007c74:	4b2d      	ldr	r3, [pc, #180]	; (8007d2c <prvSwitchTimerLists+0xc0>)
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	68db      	ldr	r3, [r3, #12]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007c7e:	4b2b      	ldr	r3, [pc, #172]	; (8007d2c <prvSwitchTimerLists+0xc0>)
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	68db      	ldr	r3, [r3, #12]
 8007c84:	68db      	ldr	r3, [r3, #12]
 8007c86:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	3304      	adds	r3, #4
 8007c8c:	4618      	mov	r0, r3
 8007c8e:	f7fe f92f 	bl	8005ef0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	6a1b      	ldr	r3, [r3, #32]
 8007c96:	68f8      	ldr	r0, [r7, #12]
 8007c98:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007ca0:	f003 0304 	and.w	r3, r3, #4
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d02e      	beq.n	8007d06 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	699b      	ldr	r3, [r3, #24]
 8007cac:	693a      	ldr	r2, [r7, #16]
 8007cae:	4413      	add	r3, r2
 8007cb0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007cb2:	68ba      	ldr	r2, [r7, #8]
 8007cb4:	693b      	ldr	r3, [r7, #16]
 8007cb6:	429a      	cmp	r2, r3
 8007cb8:	d90e      	bls.n	8007cd8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	68ba      	ldr	r2, [r7, #8]
 8007cbe:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	68fa      	ldr	r2, [r7, #12]
 8007cc4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007cc6:	4b19      	ldr	r3, [pc, #100]	; (8007d2c <prvSwitchTimerLists+0xc0>)
 8007cc8:	681a      	ldr	r2, [r3, #0]
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	3304      	adds	r3, #4
 8007cce:	4619      	mov	r1, r3
 8007cd0:	4610      	mov	r0, r2
 8007cd2:	f7fe f8d4 	bl	8005e7e <vListInsert>
 8007cd6:	e016      	b.n	8007d06 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007cd8:	2300      	movs	r3, #0
 8007cda:	9300      	str	r3, [sp, #0]
 8007cdc:	2300      	movs	r3, #0
 8007cde:	693a      	ldr	r2, [r7, #16]
 8007ce0:	2100      	movs	r1, #0
 8007ce2:	68f8      	ldr	r0, [r7, #12]
 8007ce4:	f7ff fd60 	bl	80077a8 <xTimerGenericCommand>
 8007ce8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d10a      	bne.n	8007d06 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8007cf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cf4:	f383 8811 	msr	BASEPRI, r3
 8007cf8:	f3bf 8f6f 	isb	sy
 8007cfc:	f3bf 8f4f 	dsb	sy
 8007d00:	603b      	str	r3, [r7, #0]
}
 8007d02:	bf00      	nop
 8007d04:	e7fe      	b.n	8007d04 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007d06:	4b09      	ldr	r3, [pc, #36]	; (8007d2c <prvSwitchTimerLists+0xc0>)
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d1b1      	bne.n	8007c74 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007d10:	4b06      	ldr	r3, [pc, #24]	; (8007d2c <prvSwitchTimerLists+0xc0>)
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007d16:	4b06      	ldr	r3, [pc, #24]	; (8007d30 <prvSwitchTimerLists+0xc4>)
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	4a04      	ldr	r2, [pc, #16]	; (8007d2c <prvSwitchTimerLists+0xc0>)
 8007d1c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007d1e:	4a04      	ldr	r2, [pc, #16]	; (8007d30 <prvSwitchTimerLists+0xc4>)
 8007d20:	697b      	ldr	r3, [r7, #20]
 8007d22:	6013      	str	r3, [r2, #0]
}
 8007d24:	bf00      	nop
 8007d26:	3718      	adds	r7, #24
 8007d28:	46bd      	mov	sp, r7
 8007d2a:	bd80      	pop	{r7, pc}
 8007d2c:	20000c78 	.word	0x20000c78
 8007d30:	20000c7c 	.word	0x20000c7c

08007d34 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007d34:	b580      	push	{r7, lr}
 8007d36:	b082      	sub	sp, #8
 8007d38:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007d3a:	f000 f96b 	bl	8008014 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007d3e:	4b15      	ldr	r3, [pc, #84]	; (8007d94 <prvCheckForValidListAndQueue+0x60>)
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d120      	bne.n	8007d88 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007d46:	4814      	ldr	r0, [pc, #80]	; (8007d98 <prvCheckForValidListAndQueue+0x64>)
 8007d48:	f7fe f848 	bl	8005ddc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007d4c:	4813      	ldr	r0, [pc, #76]	; (8007d9c <prvCheckForValidListAndQueue+0x68>)
 8007d4e:	f7fe f845 	bl	8005ddc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007d52:	4b13      	ldr	r3, [pc, #76]	; (8007da0 <prvCheckForValidListAndQueue+0x6c>)
 8007d54:	4a10      	ldr	r2, [pc, #64]	; (8007d98 <prvCheckForValidListAndQueue+0x64>)
 8007d56:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007d58:	4b12      	ldr	r3, [pc, #72]	; (8007da4 <prvCheckForValidListAndQueue+0x70>)
 8007d5a:	4a10      	ldr	r2, [pc, #64]	; (8007d9c <prvCheckForValidListAndQueue+0x68>)
 8007d5c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007d5e:	2300      	movs	r3, #0
 8007d60:	9300      	str	r3, [sp, #0]
 8007d62:	4b11      	ldr	r3, [pc, #68]	; (8007da8 <prvCheckForValidListAndQueue+0x74>)
 8007d64:	4a11      	ldr	r2, [pc, #68]	; (8007dac <prvCheckForValidListAndQueue+0x78>)
 8007d66:	2110      	movs	r1, #16
 8007d68:	200a      	movs	r0, #10
 8007d6a:	f7fe f953 	bl	8006014 <xQueueGenericCreateStatic>
 8007d6e:	4603      	mov	r3, r0
 8007d70:	4a08      	ldr	r2, [pc, #32]	; (8007d94 <prvCheckForValidListAndQueue+0x60>)
 8007d72:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007d74:	4b07      	ldr	r3, [pc, #28]	; (8007d94 <prvCheckForValidListAndQueue+0x60>)
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d005      	beq.n	8007d88 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007d7c:	4b05      	ldr	r3, [pc, #20]	; (8007d94 <prvCheckForValidListAndQueue+0x60>)
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	490b      	ldr	r1, [pc, #44]	; (8007db0 <prvCheckForValidListAndQueue+0x7c>)
 8007d82:	4618      	mov	r0, r3
 8007d84:	f7fe fd6c 	bl	8006860 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007d88:	f000 f974 	bl	8008074 <vPortExitCritical>
}
 8007d8c:	bf00      	nop
 8007d8e:	46bd      	mov	sp, r7
 8007d90:	bd80      	pop	{r7, pc}
 8007d92:	bf00      	nop
 8007d94:	20000c80 	.word	0x20000c80
 8007d98:	20000c50 	.word	0x20000c50
 8007d9c:	20000c64 	.word	0x20000c64
 8007da0:	20000c78 	.word	0x20000c78
 8007da4:	20000c7c 	.word	0x20000c7c
 8007da8:	20000d2c 	.word	0x20000d2c
 8007dac:	20000c8c 	.word	0x20000c8c
 8007db0:	08009b5c 	.word	0x08009b5c

08007db4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007db4:	b480      	push	{r7}
 8007db6:	b085      	sub	sp, #20
 8007db8:	af00      	add	r7, sp, #0
 8007dba:	60f8      	str	r0, [r7, #12]
 8007dbc:	60b9      	str	r1, [r7, #8]
 8007dbe:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	3b04      	subs	r3, #4
 8007dc4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007dcc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	3b04      	subs	r3, #4
 8007dd2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007dd4:	68bb      	ldr	r3, [r7, #8]
 8007dd6:	f023 0201 	bic.w	r2, r3, #1
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	3b04      	subs	r3, #4
 8007de2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007de4:	4a0c      	ldr	r2, [pc, #48]	; (8007e18 <pxPortInitialiseStack+0x64>)
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	3b14      	subs	r3, #20
 8007dee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007df0:	687a      	ldr	r2, [r7, #4]
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	3b04      	subs	r3, #4
 8007dfa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	f06f 0202 	mvn.w	r2, #2
 8007e02:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	3b20      	subs	r3, #32
 8007e08:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007e0a:	68fb      	ldr	r3, [r7, #12]
}
 8007e0c:	4618      	mov	r0, r3
 8007e0e:	3714      	adds	r7, #20
 8007e10:	46bd      	mov	sp, r7
 8007e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e16:	4770      	bx	lr
 8007e18:	08007e1d 	.word	0x08007e1d

08007e1c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007e1c:	b480      	push	{r7}
 8007e1e:	b085      	sub	sp, #20
 8007e20:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007e22:	2300      	movs	r3, #0
 8007e24:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007e26:	4b12      	ldr	r3, [pc, #72]	; (8007e70 <prvTaskExitError+0x54>)
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e2e:	d00a      	beq.n	8007e46 <prvTaskExitError+0x2a>
	__asm volatile
 8007e30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e34:	f383 8811 	msr	BASEPRI, r3
 8007e38:	f3bf 8f6f 	isb	sy
 8007e3c:	f3bf 8f4f 	dsb	sy
 8007e40:	60fb      	str	r3, [r7, #12]
}
 8007e42:	bf00      	nop
 8007e44:	e7fe      	b.n	8007e44 <prvTaskExitError+0x28>
	__asm volatile
 8007e46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e4a:	f383 8811 	msr	BASEPRI, r3
 8007e4e:	f3bf 8f6f 	isb	sy
 8007e52:	f3bf 8f4f 	dsb	sy
 8007e56:	60bb      	str	r3, [r7, #8]
}
 8007e58:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007e5a:	bf00      	nop
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d0fc      	beq.n	8007e5c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007e62:	bf00      	nop
 8007e64:	bf00      	nop
 8007e66:	3714      	adds	r7, #20
 8007e68:	46bd      	mov	sp, r7
 8007e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e6e:	4770      	bx	lr
 8007e70:	2000000c 	.word	0x2000000c
	...

08007e80 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007e80:	4b07      	ldr	r3, [pc, #28]	; (8007ea0 <pxCurrentTCBConst2>)
 8007e82:	6819      	ldr	r1, [r3, #0]
 8007e84:	6808      	ldr	r0, [r1, #0]
 8007e86:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e8a:	f380 8809 	msr	PSP, r0
 8007e8e:	f3bf 8f6f 	isb	sy
 8007e92:	f04f 0000 	mov.w	r0, #0
 8007e96:	f380 8811 	msr	BASEPRI, r0
 8007e9a:	4770      	bx	lr
 8007e9c:	f3af 8000 	nop.w

08007ea0 <pxCurrentTCBConst2>:
 8007ea0:	20000750 	.word	0x20000750
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007ea4:	bf00      	nop
 8007ea6:	bf00      	nop

08007ea8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007ea8:	4808      	ldr	r0, [pc, #32]	; (8007ecc <prvPortStartFirstTask+0x24>)
 8007eaa:	6800      	ldr	r0, [r0, #0]
 8007eac:	6800      	ldr	r0, [r0, #0]
 8007eae:	f380 8808 	msr	MSP, r0
 8007eb2:	f04f 0000 	mov.w	r0, #0
 8007eb6:	f380 8814 	msr	CONTROL, r0
 8007eba:	b662      	cpsie	i
 8007ebc:	b661      	cpsie	f
 8007ebe:	f3bf 8f4f 	dsb	sy
 8007ec2:	f3bf 8f6f 	isb	sy
 8007ec6:	df00      	svc	0
 8007ec8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007eca:	bf00      	nop
 8007ecc:	e000ed08 	.word	0xe000ed08

08007ed0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007ed0:	b580      	push	{r7, lr}
 8007ed2:	b086      	sub	sp, #24
 8007ed4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007ed6:	4b46      	ldr	r3, [pc, #280]	; (8007ff0 <xPortStartScheduler+0x120>)
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	4a46      	ldr	r2, [pc, #280]	; (8007ff4 <xPortStartScheduler+0x124>)
 8007edc:	4293      	cmp	r3, r2
 8007ede:	d10a      	bne.n	8007ef6 <xPortStartScheduler+0x26>
	__asm volatile
 8007ee0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ee4:	f383 8811 	msr	BASEPRI, r3
 8007ee8:	f3bf 8f6f 	isb	sy
 8007eec:	f3bf 8f4f 	dsb	sy
 8007ef0:	613b      	str	r3, [r7, #16]
}
 8007ef2:	bf00      	nop
 8007ef4:	e7fe      	b.n	8007ef4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007ef6:	4b3e      	ldr	r3, [pc, #248]	; (8007ff0 <xPortStartScheduler+0x120>)
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	4a3f      	ldr	r2, [pc, #252]	; (8007ff8 <xPortStartScheduler+0x128>)
 8007efc:	4293      	cmp	r3, r2
 8007efe:	d10a      	bne.n	8007f16 <xPortStartScheduler+0x46>
	__asm volatile
 8007f00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f04:	f383 8811 	msr	BASEPRI, r3
 8007f08:	f3bf 8f6f 	isb	sy
 8007f0c:	f3bf 8f4f 	dsb	sy
 8007f10:	60fb      	str	r3, [r7, #12]
}
 8007f12:	bf00      	nop
 8007f14:	e7fe      	b.n	8007f14 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007f16:	4b39      	ldr	r3, [pc, #228]	; (8007ffc <xPortStartScheduler+0x12c>)
 8007f18:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007f1a:	697b      	ldr	r3, [r7, #20]
 8007f1c:	781b      	ldrb	r3, [r3, #0]
 8007f1e:	b2db      	uxtb	r3, r3
 8007f20:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007f22:	697b      	ldr	r3, [r7, #20]
 8007f24:	22ff      	movs	r2, #255	; 0xff
 8007f26:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007f28:	697b      	ldr	r3, [r7, #20]
 8007f2a:	781b      	ldrb	r3, [r3, #0]
 8007f2c:	b2db      	uxtb	r3, r3
 8007f2e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007f30:	78fb      	ldrb	r3, [r7, #3]
 8007f32:	b2db      	uxtb	r3, r3
 8007f34:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007f38:	b2da      	uxtb	r2, r3
 8007f3a:	4b31      	ldr	r3, [pc, #196]	; (8008000 <xPortStartScheduler+0x130>)
 8007f3c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007f3e:	4b31      	ldr	r3, [pc, #196]	; (8008004 <xPortStartScheduler+0x134>)
 8007f40:	2207      	movs	r2, #7
 8007f42:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007f44:	e009      	b.n	8007f5a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007f46:	4b2f      	ldr	r3, [pc, #188]	; (8008004 <xPortStartScheduler+0x134>)
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	3b01      	subs	r3, #1
 8007f4c:	4a2d      	ldr	r2, [pc, #180]	; (8008004 <xPortStartScheduler+0x134>)
 8007f4e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007f50:	78fb      	ldrb	r3, [r7, #3]
 8007f52:	b2db      	uxtb	r3, r3
 8007f54:	005b      	lsls	r3, r3, #1
 8007f56:	b2db      	uxtb	r3, r3
 8007f58:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007f5a:	78fb      	ldrb	r3, [r7, #3]
 8007f5c:	b2db      	uxtb	r3, r3
 8007f5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f62:	2b80      	cmp	r3, #128	; 0x80
 8007f64:	d0ef      	beq.n	8007f46 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007f66:	4b27      	ldr	r3, [pc, #156]	; (8008004 <xPortStartScheduler+0x134>)
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	f1c3 0307 	rsb	r3, r3, #7
 8007f6e:	2b04      	cmp	r3, #4
 8007f70:	d00a      	beq.n	8007f88 <xPortStartScheduler+0xb8>
	__asm volatile
 8007f72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f76:	f383 8811 	msr	BASEPRI, r3
 8007f7a:	f3bf 8f6f 	isb	sy
 8007f7e:	f3bf 8f4f 	dsb	sy
 8007f82:	60bb      	str	r3, [r7, #8]
}
 8007f84:	bf00      	nop
 8007f86:	e7fe      	b.n	8007f86 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007f88:	4b1e      	ldr	r3, [pc, #120]	; (8008004 <xPortStartScheduler+0x134>)
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	021b      	lsls	r3, r3, #8
 8007f8e:	4a1d      	ldr	r2, [pc, #116]	; (8008004 <xPortStartScheduler+0x134>)
 8007f90:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007f92:	4b1c      	ldr	r3, [pc, #112]	; (8008004 <xPortStartScheduler+0x134>)
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007f9a:	4a1a      	ldr	r2, [pc, #104]	; (8008004 <xPortStartScheduler+0x134>)
 8007f9c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	b2da      	uxtb	r2, r3
 8007fa2:	697b      	ldr	r3, [r7, #20]
 8007fa4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007fa6:	4b18      	ldr	r3, [pc, #96]	; (8008008 <xPortStartScheduler+0x138>)
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	4a17      	ldr	r2, [pc, #92]	; (8008008 <xPortStartScheduler+0x138>)
 8007fac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007fb0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007fb2:	4b15      	ldr	r3, [pc, #84]	; (8008008 <xPortStartScheduler+0x138>)
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	4a14      	ldr	r2, [pc, #80]	; (8008008 <xPortStartScheduler+0x138>)
 8007fb8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007fbc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007fbe:	f000 f8dd 	bl	800817c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007fc2:	4b12      	ldr	r3, [pc, #72]	; (800800c <xPortStartScheduler+0x13c>)
 8007fc4:	2200      	movs	r2, #0
 8007fc6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007fc8:	f000 f8fc 	bl	80081c4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007fcc:	4b10      	ldr	r3, [pc, #64]	; (8008010 <xPortStartScheduler+0x140>)
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	4a0f      	ldr	r2, [pc, #60]	; (8008010 <xPortStartScheduler+0x140>)
 8007fd2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007fd6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007fd8:	f7ff ff66 	bl	8007ea8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007fdc:	f7ff f850 	bl	8007080 <vTaskSwitchContext>
	prvTaskExitError();
 8007fe0:	f7ff ff1c 	bl	8007e1c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007fe4:	2300      	movs	r3, #0
}
 8007fe6:	4618      	mov	r0, r3
 8007fe8:	3718      	adds	r7, #24
 8007fea:	46bd      	mov	sp, r7
 8007fec:	bd80      	pop	{r7, pc}
 8007fee:	bf00      	nop
 8007ff0:	e000ed00 	.word	0xe000ed00
 8007ff4:	410fc271 	.word	0x410fc271
 8007ff8:	410fc270 	.word	0x410fc270
 8007ffc:	e000e400 	.word	0xe000e400
 8008000:	20000d7c 	.word	0x20000d7c
 8008004:	20000d80 	.word	0x20000d80
 8008008:	e000ed20 	.word	0xe000ed20
 800800c:	2000000c 	.word	0x2000000c
 8008010:	e000ef34 	.word	0xe000ef34

08008014 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008014:	b480      	push	{r7}
 8008016:	b083      	sub	sp, #12
 8008018:	af00      	add	r7, sp, #0
	__asm volatile
 800801a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800801e:	f383 8811 	msr	BASEPRI, r3
 8008022:	f3bf 8f6f 	isb	sy
 8008026:	f3bf 8f4f 	dsb	sy
 800802a:	607b      	str	r3, [r7, #4]
}
 800802c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800802e:	4b0f      	ldr	r3, [pc, #60]	; (800806c <vPortEnterCritical+0x58>)
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	3301      	adds	r3, #1
 8008034:	4a0d      	ldr	r2, [pc, #52]	; (800806c <vPortEnterCritical+0x58>)
 8008036:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008038:	4b0c      	ldr	r3, [pc, #48]	; (800806c <vPortEnterCritical+0x58>)
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	2b01      	cmp	r3, #1
 800803e:	d10f      	bne.n	8008060 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008040:	4b0b      	ldr	r3, [pc, #44]	; (8008070 <vPortEnterCritical+0x5c>)
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	b2db      	uxtb	r3, r3
 8008046:	2b00      	cmp	r3, #0
 8008048:	d00a      	beq.n	8008060 <vPortEnterCritical+0x4c>
	__asm volatile
 800804a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800804e:	f383 8811 	msr	BASEPRI, r3
 8008052:	f3bf 8f6f 	isb	sy
 8008056:	f3bf 8f4f 	dsb	sy
 800805a:	603b      	str	r3, [r7, #0]
}
 800805c:	bf00      	nop
 800805e:	e7fe      	b.n	800805e <vPortEnterCritical+0x4a>
	}
}
 8008060:	bf00      	nop
 8008062:	370c      	adds	r7, #12
 8008064:	46bd      	mov	sp, r7
 8008066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800806a:	4770      	bx	lr
 800806c:	2000000c 	.word	0x2000000c
 8008070:	e000ed04 	.word	0xe000ed04

08008074 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008074:	b480      	push	{r7}
 8008076:	b083      	sub	sp, #12
 8008078:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800807a:	4b12      	ldr	r3, [pc, #72]	; (80080c4 <vPortExitCritical+0x50>)
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	2b00      	cmp	r3, #0
 8008080:	d10a      	bne.n	8008098 <vPortExitCritical+0x24>
	__asm volatile
 8008082:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008086:	f383 8811 	msr	BASEPRI, r3
 800808a:	f3bf 8f6f 	isb	sy
 800808e:	f3bf 8f4f 	dsb	sy
 8008092:	607b      	str	r3, [r7, #4]
}
 8008094:	bf00      	nop
 8008096:	e7fe      	b.n	8008096 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008098:	4b0a      	ldr	r3, [pc, #40]	; (80080c4 <vPortExitCritical+0x50>)
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	3b01      	subs	r3, #1
 800809e:	4a09      	ldr	r2, [pc, #36]	; (80080c4 <vPortExitCritical+0x50>)
 80080a0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80080a2:	4b08      	ldr	r3, [pc, #32]	; (80080c4 <vPortExitCritical+0x50>)
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d105      	bne.n	80080b6 <vPortExitCritical+0x42>
 80080aa:	2300      	movs	r3, #0
 80080ac:	603b      	str	r3, [r7, #0]
	__asm volatile
 80080ae:	683b      	ldr	r3, [r7, #0]
 80080b0:	f383 8811 	msr	BASEPRI, r3
}
 80080b4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80080b6:	bf00      	nop
 80080b8:	370c      	adds	r7, #12
 80080ba:	46bd      	mov	sp, r7
 80080bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c0:	4770      	bx	lr
 80080c2:	bf00      	nop
 80080c4:	2000000c 	.word	0x2000000c
	...

080080d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80080d0:	f3ef 8009 	mrs	r0, PSP
 80080d4:	f3bf 8f6f 	isb	sy
 80080d8:	4b15      	ldr	r3, [pc, #84]	; (8008130 <pxCurrentTCBConst>)
 80080da:	681a      	ldr	r2, [r3, #0]
 80080dc:	f01e 0f10 	tst.w	lr, #16
 80080e0:	bf08      	it	eq
 80080e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80080e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080ea:	6010      	str	r0, [r2, #0]
 80080ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 80080f0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80080f4:	f380 8811 	msr	BASEPRI, r0
 80080f8:	f3bf 8f4f 	dsb	sy
 80080fc:	f3bf 8f6f 	isb	sy
 8008100:	f7fe ffbe 	bl	8007080 <vTaskSwitchContext>
 8008104:	f04f 0000 	mov.w	r0, #0
 8008108:	f380 8811 	msr	BASEPRI, r0
 800810c:	bc09      	pop	{r0, r3}
 800810e:	6819      	ldr	r1, [r3, #0]
 8008110:	6808      	ldr	r0, [r1, #0]
 8008112:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008116:	f01e 0f10 	tst.w	lr, #16
 800811a:	bf08      	it	eq
 800811c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008120:	f380 8809 	msr	PSP, r0
 8008124:	f3bf 8f6f 	isb	sy
 8008128:	4770      	bx	lr
 800812a:	bf00      	nop
 800812c:	f3af 8000 	nop.w

08008130 <pxCurrentTCBConst>:
 8008130:	20000750 	.word	0x20000750
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008134:	bf00      	nop
 8008136:	bf00      	nop

08008138 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008138:	b580      	push	{r7, lr}
 800813a:	b082      	sub	sp, #8
 800813c:	af00      	add	r7, sp, #0
	__asm volatile
 800813e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008142:	f383 8811 	msr	BASEPRI, r3
 8008146:	f3bf 8f6f 	isb	sy
 800814a:	f3bf 8f4f 	dsb	sy
 800814e:	607b      	str	r3, [r7, #4]
}
 8008150:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008152:	f7fe fedb 	bl	8006f0c <xTaskIncrementTick>
 8008156:	4603      	mov	r3, r0
 8008158:	2b00      	cmp	r3, #0
 800815a:	d003      	beq.n	8008164 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800815c:	4b06      	ldr	r3, [pc, #24]	; (8008178 <xPortSysTickHandler+0x40>)
 800815e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008162:	601a      	str	r2, [r3, #0]
 8008164:	2300      	movs	r3, #0
 8008166:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008168:	683b      	ldr	r3, [r7, #0]
 800816a:	f383 8811 	msr	BASEPRI, r3
}
 800816e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008170:	bf00      	nop
 8008172:	3708      	adds	r7, #8
 8008174:	46bd      	mov	sp, r7
 8008176:	bd80      	pop	{r7, pc}
 8008178:	e000ed04 	.word	0xe000ed04

0800817c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800817c:	b480      	push	{r7}
 800817e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008180:	4b0b      	ldr	r3, [pc, #44]	; (80081b0 <vPortSetupTimerInterrupt+0x34>)
 8008182:	2200      	movs	r2, #0
 8008184:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008186:	4b0b      	ldr	r3, [pc, #44]	; (80081b4 <vPortSetupTimerInterrupt+0x38>)
 8008188:	2200      	movs	r2, #0
 800818a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800818c:	4b0a      	ldr	r3, [pc, #40]	; (80081b8 <vPortSetupTimerInterrupt+0x3c>)
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	4a0a      	ldr	r2, [pc, #40]	; (80081bc <vPortSetupTimerInterrupt+0x40>)
 8008192:	fba2 2303 	umull	r2, r3, r2, r3
 8008196:	099b      	lsrs	r3, r3, #6
 8008198:	4a09      	ldr	r2, [pc, #36]	; (80081c0 <vPortSetupTimerInterrupt+0x44>)
 800819a:	3b01      	subs	r3, #1
 800819c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800819e:	4b04      	ldr	r3, [pc, #16]	; (80081b0 <vPortSetupTimerInterrupt+0x34>)
 80081a0:	2207      	movs	r2, #7
 80081a2:	601a      	str	r2, [r3, #0]
}
 80081a4:	bf00      	nop
 80081a6:	46bd      	mov	sp, r7
 80081a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ac:	4770      	bx	lr
 80081ae:	bf00      	nop
 80081b0:	e000e010 	.word	0xe000e010
 80081b4:	e000e018 	.word	0xe000e018
 80081b8:	20000000 	.word	0x20000000
 80081bc:	10624dd3 	.word	0x10624dd3
 80081c0:	e000e014 	.word	0xe000e014

080081c4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80081c4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80081d4 <vPortEnableVFP+0x10>
 80081c8:	6801      	ldr	r1, [r0, #0]
 80081ca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80081ce:	6001      	str	r1, [r0, #0]
 80081d0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80081d2:	bf00      	nop
 80081d4:	e000ed88 	.word	0xe000ed88

080081d8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80081d8:	b480      	push	{r7}
 80081da:	b085      	sub	sp, #20
 80081dc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80081de:	f3ef 8305 	mrs	r3, IPSR
 80081e2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	2b0f      	cmp	r3, #15
 80081e8:	d914      	bls.n	8008214 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80081ea:	4a17      	ldr	r2, [pc, #92]	; (8008248 <vPortValidateInterruptPriority+0x70>)
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	4413      	add	r3, r2
 80081f0:	781b      	ldrb	r3, [r3, #0]
 80081f2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80081f4:	4b15      	ldr	r3, [pc, #84]	; (800824c <vPortValidateInterruptPriority+0x74>)
 80081f6:	781b      	ldrb	r3, [r3, #0]
 80081f8:	7afa      	ldrb	r2, [r7, #11]
 80081fa:	429a      	cmp	r2, r3
 80081fc:	d20a      	bcs.n	8008214 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80081fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008202:	f383 8811 	msr	BASEPRI, r3
 8008206:	f3bf 8f6f 	isb	sy
 800820a:	f3bf 8f4f 	dsb	sy
 800820e:	607b      	str	r3, [r7, #4]
}
 8008210:	bf00      	nop
 8008212:	e7fe      	b.n	8008212 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008214:	4b0e      	ldr	r3, [pc, #56]	; (8008250 <vPortValidateInterruptPriority+0x78>)
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800821c:	4b0d      	ldr	r3, [pc, #52]	; (8008254 <vPortValidateInterruptPriority+0x7c>)
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	429a      	cmp	r2, r3
 8008222:	d90a      	bls.n	800823a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8008224:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008228:	f383 8811 	msr	BASEPRI, r3
 800822c:	f3bf 8f6f 	isb	sy
 8008230:	f3bf 8f4f 	dsb	sy
 8008234:	603b      	str	r3, [r7, #0]
}
 8008236:	bf00      	nop
 8008238:	e7fe      	b.n	8008238 <vPortValidateInterruptPriority+0x60>
	}
 800823a:	bf00      	nop
 800823c:	3714      	adds	r7, #20
 800823e:	46bd      	mov	sp, r7
 8008240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008244:	4770      	bx	lr
 8008246:	bf00      	nop
 8008248:	e000e3f0 	.word	0xe000e3f0
 800824c:	20000d7c 	.word	0x20000d7c
 8008250:	e000ed0c 	.word	0xe000ed0c
 8008254:	20000d80 	.word	0x20000d80

08008258 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008258:	b580      	push	{r7, lr}
 800825a:	b08a      	sub	sp, #40	; 0x28
 800825c:	af00      	add	r7, sp, #0
 800825e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008260:	2300      	movs	r3, #0
 8008262:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008264:	f7fe fd96 	bl	8006d94 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008268:	4b5b      	ldr	r3, [pc, #364]	; (80083d8 <pvPortMalloc+0x180>)
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	2b00      	cmp	r3, #0
 800826e:	d101      	bne.n	8008274 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008270:	f000 f920 	bl	80084b4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008274:	4b59      	ldr	r3, [pc, #356]	; (80083dc <pvPortMalloc+0x184>)
 8008276:	681a      	ldr	r2, [r3, #0]
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	4013      	ands	r3, r2
 800827c:	2b00      	cmp	r3, #0
 800827e:	f040 8093 	bne.w	80083a8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	2b00      	cmp	r3, #0
 8008286:	d01d      	beq.n	80082c4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8008288:	2208      	movs	r2, #8
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	4413      	add	r3, r2
 800828e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	f003 0307 	and.w	r3, r3, #7
 8008296:	2b00      	cmp	r3, #0
 8008298:	d014      	beq.n	80082c4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	f023 0307 	bic.w	r3, r3, #7
 80082a0:	3308      	adds	r3, #8
 80082a2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	f003 0307 	and.w	r3, r3, #7
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d00a      	beq.n	80082c4 <pvPortMalloc+0x6c>
	__asm volatile
 80082ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082b2:	f383 8811 	msr	BASEPRI, r3
 80082b6:	f3bf 8f6f 	isb	sy
 80082ba:	f3bf 8f4f 	dsb	sy
 80082be:	617b      	str	r3, [r7, #20]
}
 80082c0:	bf00      	nop
 80082c2:	e7fe      	b.n	80082c2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d06e      	beq.n	80083a8 <pvPortMalloc+0x150>
 80082ca:	4b45      	ldr	r3, [pc, #276]	; (80083e0 <pvPortMalloc+0x188>)
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	687a      	ldr	r2, [r7, #4]
 80082d0:	429a      	cmp	r2, r3
 80082d2:	d869      	bhi.n	80083a8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80082d4:	4b43      	ldr	r3, [pc, #268]	; (80083e4 <pvPortMalloc+0x18c>)
 80082d6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80082d8:	4b42      	ldr	r3, [pc, #264]	; (80083e4 <pvPortMalloc+0x18c>)
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80082de:	e004      	b.n	80082ea <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80082e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082e2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80082e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80082ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082ec:	685b      	ldr	r3, [r3, #4]
 80082ee:	687a      	ldr	r2, [r7, #4]
 80082f0:	429a      	cmp	r2, r3
 80082f2:	d903      	bls.n	80082fc <pvPortMalloc+0xa4>
 80082f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d1f1      	bne.n	80082e0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80082fc:	4b36      	ldr	r3, [pc, #216]	; (80083d8 <pvPortMalloc+0x180>)
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008302:	429a      	cmp	r2, r3
 8008304:	d050      	beq.n	80083a8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008306:	6a3b      	ldr	r3, [r7, #32]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	2208      	movs	r2, #8
 800830c:	4413      	add	r3, r2
 800830e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008312:	681a      	ldr	r2, [r3, #0]
 8008314:	6a3b      	ldr	r3, [r7, #32]
 8008316:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800831a:	685a      	ldr	r2, [r3, #4]
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	1ad2      	subs	r2, r2, r3
 8008320:	2308      	movs	r3, #8
 8008322:	005b      	lsls	r3, r3, #1
 8008324:	429a      	cmp	r2, r3
 8008326:	d91f      	bls.n	8008368 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008328:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	4413      	add	r3, r2
 800832e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008330:	69bb      	ldr	r3, [r7, #24]
 8008332:	f003 0307 	and.w	r3, r3, #7
 8008336:	2b00      	cmp	r3, #0
 8008338:	d00a      	beq.n	8008350 <pvPortMalloc+0xf8>
	__asm volatile
 800833a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800833e:	f383 8811 	msr	BASEPRI, r3
 8008342:	f3bf 8f6f 	isb	sy
 8008346:	f3bf 8f4f 	dsb	sy
 800834a:	613b      	str	r3, [r7, #16]
}
 800834c:	bf00      	nop
 800834e:	e7fe      	b.n	800834e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008352:	685a      	ldr	r2, [r3, #4]
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	1ad2      	subs	r2, r2, r3
 8008358:	69bb      	ldr	r3, [r7, #24]
 800835a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800835c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800835e:	687a      	ldr	r2, [r7, #4]
 8008360:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008362:	69b8      	ldr	r0, [r7, #24]
 8008364:	f000 f908 	bl	8008578 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008368:	4b1d      	ldr	r3, [pc, #116]	; (80083e0 <pvPortMalloc+0x188>)
 800836a:	681a      	ldr	r2, [r3, #0]
 800836c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800836e:	685b      	ldr	r3, [r3, #4]
 8008370:	1ad3      	subs	r3, r2, r3
 8008372:	4a1b      	ldr	r2, [pc, #108]	; (80083e0 <pvPortMalloc+0x188>)
 8008374:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008376:	4b1a      	ldr	r3, [pc, #104]	; (80083e0 <pvPortMalloc+0x188>)
 8008378:	681a      	ldr	r2, [r3, #0]
 800837a:	4b1b      	ldr	r3, [pc, #108]	; (80083e8 <pvPortMalloc+0x190>)
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	429a      	cmp	r2, r3
 8008380:	d203      	bcs.n	800838a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008382:	4b17      	ldr	r3, [pc, #92]	; (80083e0 <pvPortMalloc+0x188>)
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	4a18      	ldr	r2, [pc, #96]	; (80083e8 <pvPortMalloc+0x190>)
 8008388:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800838a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800838c:	685a      	ldr	r2, [r3, #4]
 800838e:	4b13      	ldr	r3, [pc, #76]	; (80083dc <pvPortMalloc+0x184>)
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	431a      	orrs	r2, r3
 8008394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008396:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800839a:	2200      	movs	r2, #0
 800839c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800839e:	4b13      	ldr	r3, [pc, #76]	; (80083ec <pvPortMalloc+0x194>)
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	3301      	adds	r3, #1
 80083a4:	4a11      	ldr	r2, [pc, #68]	; (80083ec <pvPortMalloc+0x194>)
 80083a6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80083a8:	f7fe fd02 	bl	8006db0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80083ac:	69fb      	ldr	r3, [r7, #28]
 80083ae:	f003 0307 	and.w	r3, r3, #7
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d00a      	beq.n	80083cc <pvPortMalloc+0x174>
	__asm volatile
 80083b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083ba:	f383 8811 	msr	BASEPRI, r3
 80083be:	f3bf 8f6f 	isb	sy
 80083c2:	f3bf 8f4f 	dsb	sy
 80083c6:	60fb      	str	r3, [r7, #12]
}
 80083c8:	bf00      	nop
 80083ca:	e7fe      	b.n	80083ca <pvPortMalloc+0x172>
	return pvReturn;
 80083cc:	69fb      	ldr	r3, [r7, #28]
}
 80083ce:	4618      	mov	r0, r3
 80083d0:	3728      	adds	r7, #40	; 0x28
 80083d2:	46bd      	mov	sp, r7
 80083d4:	bd80      	pop	{r7, pc}
 80083d6:	bf00      	nop
 80083d8:	2000498c 	.word	0x2000498c
 80083dc:	200049a0 	.word	0x200049a0
 80083e0:	20004990 	.word	0x20004990
 80083e4:	20004984 	.word	0x20004984
 80083e8:	20004994 	.word	0x20004994
 80083ec:	20004998 	.word	0x20004998

080083f0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80083f0:	b580      	push	{r7, lr}
 80083f2:	b086      	sub	sp, #24
 80083f4:	af00      	add	r7, sp, #0
 80083f6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d04d      	beq.n	800849e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008402:	2308      	movs	r3, #8
 8008404:	425b      	negs	r3, r3
 8008406:	697a      	ldr	r2, [r7, #20]
 8008408:	4413      	add	r3, r2
 800840a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800840c:	697b      	ldr	r3, [r7, #20]
 800840e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008410:	693b      	ldr	r3, [r7, #16]
 8008412:	685a      	ldr	r2, [r3, #4]
 8008414:	4b24      	ldr	r3, [pc, #144]	; (80084a8 <vPortFree+0xb8>)
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	4013      	ands	r3, r2
 800841a:	2b00      	cmp	r3, #0
 800841c:	d10a      	bne.n	8008434 <vPortFree+0x44>
	__asm volatile
 800841e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008422:	f383 8811 	msr	BASEPRI, r3
 8008426:	f3bf 8f6f 	isb	sy
 800842a:	f3bf 8f4f 	dsb	sy
 800842e:	60fb      	str	r3, [r7, #12]
}
 8008430:	bf00      	nop
 8008432:	e7fe      	b.n	8008432 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008434:	693b      	ldr	r3, [r7, #16]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	2b00      	cmp	r3, #0
 800843a:	d00a      	beq.n	8008452 <vPortFree+0x62>
	__asm volatile
 800843c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008440:	f383 8811 	msr	BASEPRI, r3
 8008444:	f3bf 8f6f 	isb	sy
 8008448:	f3bf 8f4f 	dsb	sy
 800844c:	60bb      	str	r3, [r7, #8]
}
 800844e:	bf00      	nop
 8008450:	e7fe      	b.n	8008450 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008452:	693b      	ldr	r3, [r7, #16]
 8008454:	685a      	ldr	r2, [r3, #4]
 8008456:	4b14      	ldr	r3, [pc, #80]	; (80084a8 <vPortFree+0xb8>)
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	4013      	ands	r3, r2
 800845c:	2b00      	cmp	r3, #0
 800845e:	d01e      	beq.n	800849e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008460:	693b      	ldr	r3, [r7, #16]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	2b00      	cmp	r3, #0
 8008466:	d11a      	bne.n	800849e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008468:	693b      	ldr	r3, [r7, #16]
 800846a:	685a      	ldr	r2, [r3, #4]
 800846c:	4b0e      	ldr	r3, [pc, #56]	; (80084a8 <vPortFree+0xb8>)
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	43db      	mvns	r3, r3
 8008472:	401a      	ands	r2, r3
 8008474:	693b      	ldr	r3, [r7, #16]
 8008476:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008478:	f7fe fc8c 	bl	8006d94 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800847c:	693b      	ldr	r3, [r7, #16]
 800847e:	685a      	ldr	r2, [r3, #4]
 8008480:	4b0a      	ldr	r3, [pc, #40]	; (80084ac <vPortFree+0xbc>)
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	4413      	add	r3, r2
 8008486:	4a09      	ldr	r2, [pc, #36]	; (80084ac <vPortFree+0xbc>)
 8008488:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800848a:	6938      	ldr	r0, [r7, #16]
 800848c:	f000 f874 	bl	8008578 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008490:	4b07      	ldr	r3, [pc, #28]	; (80084b0 <vPortFree+0xc0>)
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	3301      	adds	r3, #1
 8008496:	4a06      	ldr	r2, [pc, #24]	; (80084b0 <vPortFree+0xc0>)
 8008498:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800849a:	f7fe fc89 	bl	8006db0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800849e:	bf00      	nop
 80084a0:	3718      	adds	r7, #24
 80084a2:	46bd      	mov	sp, r7
 80084a4:	bd80      	pop	{r7, pc}
 80084a6:	bf00      	nop
 80084a8:	200049a0 	.word	0x200049a0
 80084ac:	20004990 	.word	0x20004990
 80084b0:	2000499c 	.word	0x2000499c

080084b4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80084b4:	b480      	push	{r7}
 80084b6:	b085      	sub	sp, #20
 80084b8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80084ba:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80084be:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80084c0:	4b27      	ldr	r3, [pc, #156]	; (8008560 <prvHeapInit+0xac>)
 80084c2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	f003 0307 	and.w	r3, r3, #7
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d00c      	beq.n	80084e8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	3307      	adds	r3, #7
 80084d2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	f023 0307 	bic.w	r3, r3, #7
 80084da:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80084dc:	68ba      	ldr	r2, [r7, #8]
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	1ad3      	subs	r3, r2, r3
 80084e2:	4a1f      	ldr	r2, [pc, #124]	; (8008560 <prvHeapInit+0xac>)
 80084e4:	4413      	add	r3, r2
 80084e6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80084ec:	4a1d      	ldr	r2, [pc, #116]	; (8008564 <prvHeapInit+0xb0>)
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80084f2:	4b1c      	ldr	r3, [pc, #112]	; (8008564 <prvHeapInit+0xb0>)
 80084f4:	2200      	movs	r2, #0
 80084f6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	68ba      	ldr	r2, [r7, #8]
 80084fc:	4413      	add	r3, r2
 80084fe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008500:	2208      	movs	r2, #8
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	1a9b      	subs	r3, r3, r2
 8008506:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	f023 0307 	bic.w	r3, r3, #7
 800850e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	4a15      	ldr	r2, [pc, #84]	; (8008568 <prvHeapInit+0xb4>)
 8008514:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008516:	4b14      	ldr	r3, [pc, #80]	; (8008568 <prvHeapInit+0xb4>)
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	2200      	movs	r2, #0
 800851c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800851e:	4b12      	ldr	r3, [pc, #72]	; (8008568 <prvHeapInit+0xb4>)
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	2200      	movs	r2, #0
 8008524:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800852a:	683b      	ldr	r3, [r7, #0]
 800852c:	68fa      	ldr	r2, [r7, #12]
 800852e:	1ad2      	subs	r2, r2, r3
 8008530:	683b      	ldr	r3, [r7, #0]
 8008532:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008534:	4b0c      	ldr	r3, [pc, #48]	; (8008568 <prvHeapInit+0xb4>)
 8008536:	681a      	ldr	r2, [r3, #0]
 8008538:	683b      	ldr	r3, [r7, #0]
 800853a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800853c:	683b      	ldr	r3, [r7, #0]
 800853e:	685b      	ldr	r3, [r3, #4]
 8008540:	4a0a      	ldr	r2, [pc, #40]	; (800856c <prvHeapInit+0xb8>)
 8008542:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008544:	683b      	ldr	r3, [r7, #0]
 8008546:	685b      	ldr	r3, [r3, #4]
 8008548:	4a09      	ldr	r2, [pc, #36]	; (8008570 <prvHeapInit+0xbc>)
 800854a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800854c:	4b09      	ldr	r3, [pc, #36]	; (8008574 <prvHeapInit+0xc0>)
 800854e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008552:	601a      	str	r2, [r3, #0]
}
 8008554:	bf00      	nop
 8008556:	3714      	adds	r7, #20
 8008558:	46bd      	mov	sp, r7
 800855a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800855e:	4770      	bx	lr
 8008560:	20000d84 	.word	0x20000d84
 8008564:	20004984 	.word	0x20004984
 8008568:	2000498c 	.word	0x2000498c
 800856c:	20004994 	.word	0x20004994
 8008570:	20004990 	.word	0x20004990
 8008574:	200049a0 	.word	0x200049a0

08008578 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008578:	b480      	push	{r7}
 800857a:	b085      	sub	sp, #20
 800857c:	af00      	add	r7, sp, #0
 800857e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008580:	4b28      	ldr	r3, [pc, #160]	; (8008624 <prvInsertBlockIntoFreeList+0xac>)
 8008582:	60fb      	str	r3, [r7, #12]
 8008584:	e002      	b.n	800858c <prvInsertBlockIntoFreeList+0x14>
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	60fb      	str	r3, [r7, #12]
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	687a      	ldr	r2, [r7, #4]
 8008592:	429a      	cmp	r2, r3
 8008594:	d8f7      	bhi.n	8008586 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	685b      	ldr	r3, [r3, #4]
 800859e:	68ba      	ldr	r2, [r7, #8]
 80085a0:	4413      	add	r3, r2
 80085a2:	687a      	ldr	r2, [r7, #4]
 80085a4:	429a      	cmp	r2, r3
 80085a6:	d108      	bne.n	80085ba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	685a      	ldr	r2, [r3, #4]
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	685b      	ldr	r3, [r3, #4]
 80085b0:	441a      	add	r2, r3
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	685b      	ldr	r3, [r3, #4]
 80085c2:	68ba      	ldr	r2, [r7, #8]
 80085c4:	441a      	add	r2, r3
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	429a      	cmp	r2, r3
 80085cc:	d118      	bne.n	8008600 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	681a      	ldr	r2, [r3, #0]
 80085d2:	4b15      	ldr	r3, [pc, #84]	; (8008628 <prvInsertBlockIntoFreeList+0xb0>)
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	429a      	cmp	r2, r3
 80085d8:	d00d      	beq.n	80085f6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	685a      	ldr	r2, [r3, #4]
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	685b      	ldr	r3, [r3, #4]
 80085e4:	441a      	add	r2, r3
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	681a      	ldr	r2, [r3, #0]
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	601a      	str	r2, [r3, #0]
 80085f4:	e008      	b.n	8008608 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80085f6:	4b0c      	ldr	r3, [pc, #48]	; (8008628 <prvInsertBlockIntoFreeList+0xb0>)
 80085f8:	681a      	ldr	r2, [r3, #0]
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	601a      	str	r2, [r3, #0]
 80085fe:	e003      	b.n	8008608 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	681a      	ldr	r2, [r3, #0]
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008608:	68fa      	ldr	r2, [r7, #12]
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	429a      	cmp	r2, r3
 800860e:	d002      	beq.n	8008616 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	687a      	ldr	r2, [r7, #4]
 8008614:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008616:	bf00      	nop
 8008618:	3714      	adds	r7, #20
 800861a:	46bd      	mov	sp, r7
 800861c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008620:	4770      	bx	lr
 8008622:	bf00      	nop
 8008624:	20004984 	.word	0x20004984
 8008628:	2000498c 	.word	0x2000498c

0800862c <__errno>:
 800862c:	4b01      	ldr	r3, [pc, #4]	; (8008634 <__errno+0x8>)
 800862e:	6818      	ldr	r0, [r3, #0]
 8008630:	4770      	bx	lr
 8008632:	bf00      	nop
 8008634:	20000010 	.word	0x20000010

08008638 <__libc_init_array>:
 8008638:	b570      	push	{r4, r5, r6, lr}
 800863a:	4d0d      	ldr	r5, [pc, #52]	; (8008670 <__libc_init_array+0x38>)
 800863c:	4c0d      	ldr	r4, [pc, #52]	; (8008674 <__libc_init_array+0x3c>)
 800863e:	1b64      	subs	r4, r4, r5
 8008640:	10a4      	asrs	r4, r4, #2
 8008642:	2600      	movs	r6, #0
 8008644:	42a6      	cmp	r6, r4
 8008646:	d109      	bne.n	800865c <__libc_init_array+0x24>
 8008648:	4d0b      	ldr	r5, [pc, #44]	; (8008678 <__libc_init_array+0x40>)
 800864a:	4c0c      	ldr	r4, [pc, #48]	; (800867c <__libc_init_array+0x44>)
 800864c:	f001 f9be 	bl	80099cc <_init>
 8008650:	1b64      	subs	r4, r4, r5
 8008652:	10a4      	asrs	r4, r4, #2
 8008654:	2600      	movs	r6, #0
 8008656:	42a6      	cmp	r6, r4
 8008658:	d105      	bne.n	8008666 <__libc_init_array+0x2e>
 800865a:	bd70      	pop	{r4, r5, r6, pc}
 800865c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008660:	4798      	blx	r3
 8008662:	3601      	adds	r6, #1
 8008664:	e7ee      	b.n	8008644 <__libc_init_array+0xc>
 8008666:	f855 3b04 	ldr.w	r3, [r5], #4
 800866a:	4798      	blx	r3
 800866c:	3601      	adds	r6, #1
 800866e:	e7f2      	b.n	8008656 <__libc_init_array+0x1e>
 8008670:	08009e64 	.word	0x08009e64
 8008674:	08009e64 	.word	0x08009e64
 8008678:	08009e64 	.word	0x08009e64
 800867c:	08009e68 	.word	0x08009e68

08008680 <memcpy>:
 8008680:	440a      	add	r2, r1
 8008682:	4291      	cmp	r1, r2
 8008684:	f100 33ff 	add.w	r3, r0, #4294967295
 8008688:	d100      	bne.n	800868c <memcpy+0xc>
 800868a:	4770      	bx	lr
 800868c:	b510      	push	{r4, lr}
 800868e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008692:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008696:	4291      	cmp	r1, r2
 8008698:	d1f9      	bne.n	800868e <memcpy+0xe>
 800869a:	bd10      	pop	{r4, pc}

0800869c <memset>:
 800869c:	4402      	add	r2, r0
 800869e:	4603      	mov	r3, r0
 80086a0:	4293      	cmp	r3, r2
 80086a2:	d100      	bne.n	80086a6 <memset+0xa>
 80086a4:	4770      	bx	lr
 80086a6:	f803 1b01 	strb.w	r1, [r3], #1
 80086aa:	e7f9      	b.n	80086a0 <memset+0x4>

080086ac <iprintf>:
 80086ac:	b40f      	push	{r0, r1, r2, r3}
 80086ae:	4b0a      	ldr	r3, [pc, #40]	; (80086d8 <iprintf+0x2c>)
 80086b0:	b513      	push	{r0, r1, r4, lr}
 80086b2:	681c      	ldr	r4, [r3, #0]
 80086b4:	b124      	cbz	r4, 80086c0 <iprintf+0x14>
 80086b6:	69a3      	ldr	r3, [r4, #24]
 80086b8:	b913      	cbnz	r3, 80086c0 <iprintf+0x14>
 80086ba:	4620      	mov	r0, r4
 80086bc:	f000 fa7e 	bl	8008bbc <__sinit>
 80086c0:	ab05      	add	r3, sp, #20
 80086c2:	9a04      	ldr	r2, [sp, #16]
 80086c4:	68a1      	ldr	r1, [r4, #8]
 80086c6:	9301      	str	r3, [sp, #4]
 80086c8:	4620      	mov	r0, r4
 80086ca:	f000 fdab 	bl	8009224 <_vfiprintf_r>
 80086ce:	b002      	add	sp, #8
 80086d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80086d4:	b004      	add	sp, #16
 80086d6:	4770      	bx	lr
 80086d8:	20000010 	.word	0x20000010

080086dc <_puts_r>:
 80086dc:	b570      	push	{r4, r5, r6, lr}
 80086de:	460e      	mov	r6, r1
 80086e0:	4605      	mov	r5, r0
 80086e2:	b118      	cbz	r0, 80086ec <_puts_r+0x10>
 80086e4:	6983      	ldr	r3, [r0, #24]
 80086e6:	b90b      	cbnz	r3, 80086ec <_puts_r+0x10>
 80086e8:	f000 fa68 	bl	8008bbc <__sinit>
 80086ec:	69ab      	ldr	r3, [r5, #24]
 80086ee:	68ac      	ldr	r4, [r5, #8]
 80086f0:	b913      	cbnz	r3, 80086f8 <_puts_r+0x1c>
 80086f2:	4628      	mov	r0, r5
 80086f4:	f000 fa62 	bl	8008bbc <__sinit>
 80086f8:	4b2c      	ldr	r3, [pc, #176]	; (80087ac <_puts_r+0xd0>)
 80086fa:	429c      	cmp	r4, r3
 80086fc:	d120      	bne.n	8008740 <_puts_r+0x64>
 80086fe:	686c      	ldr	r4, [r5, #4]
 8008700:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008702:	07db      	lsls	r3, r3, #31
 8008704:	d405      	bmi.n	8008712 <_puts_r+0x36>
 8008706:	89a3      	ldrh	r3, [r4, #12]
 8008708:	0598      	lsls	r0, r3, #22
 800870a:	d402      	bmi.n	8008712 <_puts_r+0x36>
 800870c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800870e:	f000 faf3 	bl	8008cf8 <__retarget_lock_acquire_recursive>
 8008712:	89a3      	ldrh	r3, [r4, #12]
 8008714:	0719      	lsls	r1, r3, #28
 8008716:	d51d      	bpl.n	8008754 <_puts_r+0x78>
 8008718:	6923      	ldr	r3, [r4, #16]
 800871a:	b1db      	cbz	r3, 8008754 <_puts_r+0x78>
 800871c:	3e01      	subs	r6, #1
 800871e:	68a3      	ldr	r3, [r4, #8]
 8008720:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008724:	3b01      	subs	r3, #1
 8008726:	60a3      	str	r3, [r4, #8]
 8008728:	bb39      	cbnz	r1, 800877a <_puts_r+0x9e>
 800872a:	2b00      	cmp	r3, #0
 800872c:	da38      	bge.n	80087a0 <_puts_r+0xc4>
 800872e:	4622      	mov	r2, r4
 8008730:	210a      	movs	r1, #10
 8008732:	4628      	mov	r0, r5
 8008734:	f000 f868 	bl	8008808 <__swbuf_r>
 8008738:	3001      	adds	r0, #1
 800873a:	d011      	beq.n	8008760 <_puts_r+0x84>
 800873c:	250a      	movs	r5, #10
 800873e:	e011      	b.n	8008764 <_puts_r+0x88>
 8008740:	4b1b      	ldr	r3, [pc, #108]	; (80087b0 <_puts_r+0xd4>)
 8008742:	429c      	cmp	r4, r3
 8008744:	d101      	bne.n	800874a <_puts_r+0x6e>
 8008746:	68ac      	ldr	r4, [r5, #8]
 8008748:	e7da      	b.n	8008700 <_puts_r+0x24>
 800874a:	4b1a      	ldr	r3, [pc, #104]	; (80087b4 <_puts_r+0xd8>)
 800874c:	429c      	cmp	r4, r3
 800874e:	bf08      	it	eq
 8008750:	68ec      	ldreq	r4, [r5, #12]
 8008752:	e7d5      	b.n	8008700 <_puts_r+0x24>
 8008754:	4621      	mov	r1, r4
 8008756:	4628      	mov	r0, r5
 8008758:	f000 f8a8 	bl	80088ac <__swsetup_r>
 800875c:	2800      	cmp	r0, #0
 800875e:	d0dd      	beq.n	800871c <_puts_r+0x40>
 8008760:	f04f 35ff 	mov.w	r5, #4294967295
 8008764:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008766:	07da      	lsls	r2, r3, #31
 8008768:	d405      	bmi.n	8008776 <_puts_r+0x9a>
 800876a:	89a3      	ldrh	r3, [r4, #12]
 800876c:	059b      	lsls	r3, r3, #22
 800876e:	d402      	bmi.n	8008776 <_puts_r+0x9a>
 8008770:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008772:	f000 fac2 	bl	8008cfa <__retarget_lock_release_recursive>
 8008776:	4628      	mov	r0, r5
 8008778:	bd70      	pop	{r4, r5, r6, pc}
 800877a:	2b00      	cmp	r3, #0
 800877c:	da04      	bge.n	8008788 <_puts_r+0xac>
 800877e:	69a2      	ldr	r2, [r4, #24]
 8008780:	429a      	cmp	r2, r3
 8008782:	dc06      	bgt.n	8008792 <_puts_r+0xb6>
 8008784:	290a      	cmp	r1, #10
 8008786:	d004      	beq.n	8008792 <_puts_r+0xb6>
 8008788:	6823      	ldr	r3, [r4, #0]
 800878a:	1c5a      	adds	r2, r3, #1
 800878c:	6022      	str	r2, [r4, #0]
 800878e:	7019      	strb	r1, [r3, #0]
 8008790:	e7c5      	b.n	800871e <_puts_r+0x42>
 8008792:	4622      	mov	r2, r4
 8008794:	4628      	mov	r0, r5
 8008796:	f000 f837 	bl	8008808 <__swbuf_r>
 800879a:	3001      	adds	r0, #1
 800879c:	d1bf      	bne.n	800871e <_puts_r+0x42>
 800879e:	e7df      	b.n	8008760 <_puts_r+0x84>
 80087a0:	6823      	ldr	r3, [r4, #0]
 80087a2:	250a      	movs	r5, #10
 80087a4:	1c5a      	adds	r2, r3, #1
 80087a6:	6022      	str	r2, [r4, #0]
 80087a8:	701d      	strb	r5, [r3, #0]
 80087aa:	e7db      	b.n	8008764 <_puts_r+0x88>
 80087ac:	08009de8 	.word	0x08009de8
 80087b0:	08009e08 	.word	0x08009e08
 80087b4:	08009dc8 	.word	0x08009dc8

080087b8 <puts>:
 80087b8:	4b02      	ldr	r3, [pc, #8]	; (80087c4 <puts+0xc>)
 80087ba:	4601      	mov	r1, r0
 80087bc:	6818      	ldr	r0, [r3, #0]
 80087be:	f7ff bf8d 	b.w	80086dc <_puts_r>
 80087c2:	bf00      	nop
 80087c4:	20000010 	.word	0x20000010

080087c8 <siprintf>:
 80087c8:	b40e      	push	{r1, r2, r3}
 80087ca:	b500      	push	{lr}
 80087cc:	b09c      	sub	sp, #112	; 0x70
 80087ce:	ab1d      	add	r3, sp, #116	; 0x74
 80087d0:	9002      	str	r0, [sp, #8]
 80087d2:	9006      	str	r0, [sp, #24]
 80087d4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80087d8:	4809      	ldr	r0, [pc, #36]	; (8008800 <siprintf+0x38>)
 80087da:	9107      	str	r1, [sp, #28]
 80087dc:	9104      	str	r1, [sp, #16]
 80087de:	4909      	ldr	r1, [pc, #36]	; (8008804 <siprintf+0x3c>)
 80087e0:	f853 2b04 	ldr.w	r2, [r3], #4
 80087e4:	9105      	str	r1, [sp, #20]
 80087e6:	6800      	ldr	r0, [r0, #0]
 80087e8:	9301      	str	r3, [sp, #4]
 80087ea:	a902      	add	r1, sp, #8
 80087ec:	f000 fbf0 	bl	8008fd0 <_svfiprintf_r>
 80087f0:	9b02      	ldr	r3, [sp, #8]
 80087f2:	2200      	movs	r2, #0
 80087f4:	701a      	strb	r2, [r3, #0]
 80087f6:	b01c      	add	sp, #112	; 0x70
 80087f8:	f85d eb04 	ldr.w	lr, [sp], #4
 80087fc:	b003      	add	sp, #12
 80087fe:	4770      	bx	lr
 8008800:	20000010 	.word	0x20000010
 8008804:	ffff0208 	.word	0xffff0208

08008808 <__swbuf_r>:
 8008808:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800880a:	460e      	mov	r6, r1
 800880c:	4614      	mov	r4, r2
 800880e:	4605      	mov	r5, r0
 8008810:	b118      	cbz	r0, 800881a <__swbuf_r+0x12>
 8008812:	6983      	ldr	r3, [r0, #24]
 8008814:	b90b      	cbnz	r3, 800881a <__swbuf_r+0x12>
 8008816:	f000 f9d1 	bl	8008bbc <__sinit>
 800881a:	4b21      	ldr	r3, [pc, #132]	; (80088a0 <__swbuf_r+0x98>)
 800881c:	429c      	cmp	r4, r3
 800881e:	d12b      	bne.n	8008878 <__swbuf_r+0x70>
 8008820:	686c      	ldr	r4, [r5, #4]
 8008822:	69a3      	ldr	r3, [r4, #24]
 8008824:	60a3      	str	r3, [r4, #8]
 8008826:	89a3      	ldrh	r3, [r4, #12]
 8008828:	071a      	lsls	r2, r3, #28
 800882a:	d52f      	bpl.n	800888c <__swbuf_r+0x84>
 800882c:	6923      	ldr	r3, [r4, #16]
 800882e:	b36b      	cbz	r3, 800888c <__swbuf_r+0x84>
 8008830:	6923      	ldr	r3, [r4, #16]
 8008832:	6820      	ldr	r0, [r4, #0]
 8008834:	1ac0      	subs	r0, r0, r3
 8008836:	6963      	ldr	r3, [r4, #20]
 8008838:	b2f6      	uxtb	r6, r6
 800883a:	4283      	cmp	r3, r0
 800883c:	4637      	mov	r7, r6
 800883e:	dc04      	bgt.n	800884a <__swbuf_r+0x42>
 8008840:	4621      	mov	r1, r4
 8008842:	4628      	mov	r0, r5
 8008844:	f000 f926 	bl	8008a94 <_fflush_r>
 8008848:	bb30      	cbnz	r0, 8008898 <__swbuf_r+0x90>
 800884a:	68a3      	ldr	r3, [r4, #8]
 800884c:	3b01      	subs	r3, #1
 800884e:	60a3      	str	r3, [r4, #8]
 8008850:	6823      	ldr	r3, [r4, #0]
 8008852:	1c5a      	adds	r2, r3, #1
 8008854:	6022      	str	r2, [r4, #0]
 8008856:	701e      	strb	r6, [r3, #0]
 8008858:	6963      	ldr	r3, [r4, #20]
 800885a:	3001      	adds	r0, #1
 800885c:	4283      	cmp	r3, r0
 800885e:	d004      	beq.n	800886a <__swbuf_r+0x62>
 8008860:	89a3      	ldrh	r3, [r4, #12]
 8008862:	07db      	lsls	r3, r3, #31
 8008864:	d506      	bpl.n	8008874 <__swbuf_r+0x6c>
 8008866:	2e0a      	cmp	r6, #10
 8008868:	d104      	bne.n	8008874 <__swbuf_r+0x6c>
 800886a:	4621      	mov	r1, r4
 800886c:	4628      	mov	r0, r5
 800886e:	f000 f911 	bl	8008a94 <_fflush_r>
 8008872:	b988      	cbnz	r0, 8008898 <__swbuf_r+0x90>
 8008874:	4638      	mov	r0, r7
 8008876:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008878:	4b0a      	ldr	r3, [pc, #40]	; (80088a4 <__swbuf_r+0x9c>)
 800887a:	429c      	cmp	r4, r3
 800887c:	d101      	bne.n	8008882 <__swbuf_r+0x7a>
 800887e:	68ac      	ldr	r4, [r5, #8]
 8008880:	e7cf      	b.n	8008822 <__swbuf_r+0x1a>
 8008882:	4b09      	ldr	r3, [pc, #36]	; (80088a8 <__swbuf_r+0xa0>)
 8008884:	429c      	cmp	r4, r3
 8008886:	bf08      	it	eq
 8008888:	68ec      	ldreq	r4, [r5, #12]
 800888a:	e7ca      	b.n	8008822 <__swbuf_r+0x1a>
 800888c:	4621      	mov	r1, r4
 800888e:	4628      	mov	r0, r5
 8008890:	f000 f80c 	bl	80088ac <__swsetup_r>
 8008894:	2800      	cmp	r0, #0
 8008896:	d0cb      	beq.n	8008830 <__swbuf_r+0x28>
 8008898:	f04f 37ff 	mov.w	r7, #4294967295
 800889c:	e7ea      	b.n	8008874 <__swbuf_r+0x6c>
 800889e:	bf00      	nop
 80088a0:	08009de8 	.word	0x08009de8
 80088a4:	08009e08 	.word	0x08009e08
 80088a8:	08009dc8 	.word	0x08009dc8

080088ac <__swsetup_r>:
 80088ac:	4b32      	ldr	r3, [pc, #200]	; (8008978 <__swsetup_r+0xcc>)
 80088ae:	b570      	push	{r4, r5, r6, lr}
 80088b0:	681d      	ldr	r5, [r3, #0]
 80088b2:	4606      	mov	r6, r0
 80088b4:	460c      	mov	r4, r1
 80088b6:	b125      	cbz	r5, 80088c2 <__swsetup_r+0x16>
 80088b8:	69ab      	ldr	r3, [r5, #24]
 80088ba:	b913      	cbnz	r3, 80088c2 <__swsetup_r+0x16>
 80088bc:	4628      	mov	r0, r5
 80088be:	f000 f97d 	bl	8008bbc <__sinit>
 80088c2:	4b2e      	ldr	r3, [pc, #184]	; (800897c <__swsetup_r+0xd0>)
 80088c4:	429c      	cmp	r4, r3
 80088c6:	d10f      	bne.n	80088e8 <__swsetup_r+0x3c>
 80088c8:	686c      	ldr	r4, [r5, #4]
 80088ca:	89a3      	ldrh	r3, [r4, #12]
 80088cc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80088d0:	0719      	lsls	r1, r3, #28
 80088d2:	d42c      	bmi.n	800892e <__swsetup_r+0x82>
 80088d4:	06dd      	lsls	r5, r3, #27
 80088d6:	d411      	bmi.n	80088fc <__swsetup_r+0x50>
 80088d8:	2309      	movs	r3, #9
 80088da:	6033      	str	r3, [r6, #0]
 80088dc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80088e0:	81a3      	strh	r3, [r4, #12]
 80088e2:	f04f 30ff 	mov.w	r0, #4294967295
 80088e6:	e03e      	b.n	8008966 <__swsetup_r+0xba>
 80088e8:	4b25      	ldr	r3, [pc, #148]	; (8008980 <__swsetup_r+0xd4>)
 80088ea:	429c      	cmp	r4, r3
 80088ec:	d101      	bne.n	80088f2 <__swsetup_r+0x46>
 80088ee:	68ac      	ldr	r4, [r5, #8]
 80088f0:	e7eb      	b.n	80088ca <__swsetup_r+0x1e>
 80088f2:	4b24      	ldr	r3, [pc, #144]	; (8008984 <__swsetup_r+0xd8>)
 80088f4:	429c      	cmp	r4, r3
 80088f6:	bf08      	it	eq
 80088f8:	68ec      	ldreq	r4, [r5, #12]
 80088fa:	e7e6      	b.n	80088ca <__swsetup_r+0x1e>
 80088fc:	0758      	lsls	r0, r3, #29
 80088fe:	d512      	bpl.n	8008926 <__swsetup_r+0x7a>
 8008900:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008902:	b141      	cbz	r1, 8008916 <__swsetup_r+0x6a>
 8008904:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008908:	4299      	cmp	r1, r3
 800890a:	d002      	beq.n	8008912 <__swsetup_r+0x66>
 800890c:	4630      	mov	r0, r6
 800890e:	f000 fa59 	bl	8008dc4 <_free_r>
 8008912:	2300      	movs	r3, #0
 8008914:	6363      	str	r3, [r4, #52]	; 0x34
 8008916:	89a3      	ldrh	r3, [r4, #12]
 8008918:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800891c:	81a3      	strh	r3, [r4, #12]
 800891e:	2300      	movs	r3, #0
 8008920:	6063      	str	r3, [r4, #4]
 8008922:	6923      	ldr	r3, [r4, #16]
 8008924:	6023      	str	r3, [r4, #0]
 8008926:	89a3      	ldrh	r3, [r4, #12]
 8008928:	f043 0308 	orr.w	r3, r3, #8
 800892c:	81a3      	strh	r3, [r4, #12]
 800892e:	6923      	ldr	r3, [r4, #16]
 8008930:	b94b      	cbnz	r3, 8008946 <__swsetup_r+0x9a>
 8008932:	89a3      	ldrh	r3, [r4, #12]
 8008934:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008938:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800893c:	d003      	beq.n	8008946 <__swsetup_r+0x9a>
 800893e:	4621      	mov	r1, r4
 8008940:	4630      	mov	r0, r6
 8008942:	f000 f9ff 	bl	8008d44 <__smakebuf_r>
 8008946:	89a0      	ldrh	r0, [r4, #12]
 8008948:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800894c:	f010 0301 	ands.w	r3, r0, #1
 8008950:	d00a      	beq.n	8008968 <__swsetup_r+0xbc>
 8008952:	2300      	movs	r3, #0
 8008954:	60a3      	str	r3, [r4, #8]
 8008956:	6963      	ldr	r3, [r4, #20]
 8008958:	425b      	negs	r3, r3
 800895a:	61a3      	str	r3, [r4, #24]
 800895c:	6923      	ldr	r3, [r4, #16]
 800895e:	b943      	cbnz	r3, 8008972 <__swsetup_r+0xc6>
 8008960:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008964:	d1ba      	bne.n	80088dc <__swsetup_r+0x30>
 8008966:	bd70      	pop	{r4, r5, r6, pc}
 8008968:	0781      	lsls	r1, r0, #30
 800896a:	bf58      	it	pl
 800896c:	6963      	ldrpl	r3, [r4, #20]
 800896e:	60a3      	str	r3, [r4, #8]
 8008970:	e7f4      	b.n	800895c <__swsetup_r+0xb0>
 8008972:	2000      	movs	r0, #0
 8008974:	e7f7      	b.n	8008966 <__swsetup_r+0xba>
 8008976:	bf00      	nop
 8008978:	20000010 	.word	0x20000010
 800897c:	08009de8 	.word	0x08009de8
 8008980:	08009e08 	.word	0x08009e08
 8008984:	08009dc8 	.word	0x08009dc8

08008988 <__sflush_r>:
 8008988:	898a      	ldrh	r2, [r1, #12]
 800898a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800898e:	4605      	mov	r5, r0
 8008990:	0710      	lsls	r0, r2, #28
 8008992:	460c      	mov	r4, r1
 8008994:	d458      	bmi.n	8008a48 <__sflush_r+0xc0>
 8008996:	684b      	ldr	r3, [r1, #4]
 8008998:	2b00      	cmp	r3, #0
 800899a:	dc05      	bgt.n	80089a8 <__sflush_r+0x20>
 800899c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800899e:	2b00      	cmp	r3, #0
 80089a0:	dc02      	bgt.n	80089a8 <__sflush_r+0x20>
 80089a2:	2000      	movs	r0, #0
 80089a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80089a8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80089aa:	2e00      	cmp	r6, #0
 80089ac:	d0f9      	beq.n	80089a2 <__sflush_r+0x1a>
 80089ae:	2300      	movs	r3, #0
 80089b0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80089b4:	682f      	ldr	r7, [r5, #0]
 80089b6:	602b      	str	r3, [r5, #0]
 80089b8:	d032      	beq.n	8008a20 <__sflush_r+0x98>
 80089ba:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80089bc:	89a3      	ldrh	r3, [r4, #12]
 80089be:	075a      	lsls	r2, r3, #29
 80089c0:	d505      	bpl.n	80089ce <__sflush_r+0x46>
 80089c2:	6863      	ldr	r3, [r4, #4]
 80089c4:	1ac0      	subs	r0, r0, r3
 80089c6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80089c8:	b10b      	cbz	r3, 80089ce <__sflush_r+0x46>
 80089ca:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80089cc:	1ac0      	subs	r0, r0, r3
 80089ce:	2300      	movs	r3, #0
 80089d0:	4602      	mov	r2, r0
 80089d2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80089d4:	6a21      	ldr	r1, [r4, #32]
 80089d6:	4628      	mov	r0, r5
 80089d8:	47b0      	blx	r6
 80089da:	1c43      	adds	r3, r0, #1
 80089dc:	89a3      	ldrh	r3, [r4, #12]
 80089de:	d106      	bne.n	80089ee <__sflush_r+0x66>
 80089e0:	6829      	ldr	r1, [r5, #0]
 80089e2:	291d      	cmp	r1, #29
 80089e4:	d82c      	bhi.n	8008a40 <__sflush_r+0xb8>
 80089e6:	4a2a      	ldr	r2, [pc, #168]	; (8008a90 <__sflush_r+0x108>)
 80089e8:	40ca      	lsrs	r2, r1
 80089ea:	07d6      	lsls	r6, r2, #31
 80089ec:	d528      	bpl.n	8008a40 <__sflush_r+0xb8>
 80089ee:	2200      	movs	r2, #0
 80089f0:	6062      	str	r2, [r4, #4]
 80089f2:	04d9      	lsls	r1, r3, #19
 80089f4:	6922      	ldr	r2, [r4, #16]
 80089f6:	6022      	str	r2, [r4, #0]
 80089f8:	d504      	bpl.n	8008a04 <__sflush_r+0x7c>
 80089fa:	1c42      	adds	r2, r0, #1
 80089fc:	d101      	bne.n	8008a02 <__sflush_r+0x7a>
 80089fe:	682b      	ldr	r3, [r5, #0]
 8008a00:	b903      	cbnz	r3, 8008a04 <__sflush_r+0x7c>
 8008a02:	6560      	str	r0, [r4, #84]	; 0x54
 8008a04:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008a06:	602f      	str	r7, [r5, #0]
 8008a08:	2900      	cmp	r1, #0
 8008a0a:	d0ca      	beq.n	80089a2 <__sflush_r+0x1a>
 8008a0c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008a10:	4299      	cmp	r1, r3
 8008a12:	d002      	beq.n	8008a1a <__sflush_r+0x92>
 8008a14:	4628      	mov	r0, r5
 8008a16:	f000 f9d5 	bl	8008dc4 <_free_r>
 8008a1a:	2000      	movs	r0, #0
 8008a1c:	6360      	str	r0, [r4, #52]	; 0x34
 8008a1e:	e7c1      	b.n	80089a4 <__sflush_r+0x1c>
 8008a20:	6a21      	ldr	r1, [r4, #32]
 8008a22:	2301      	movs	r3, #1
 8008a24:	4628      	mov	r0, r5
 8008a26:	47b0      	blx	r6
 8008a28:	1c41      	adds	r1, r0, #1
 8008a2a:	d1c7      	bne.n	80089bc <__sflush_r+0x34>
 8008a2c:	682b      	ldr	r3, [r5, #0]
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d0c4      	beq.n	80089bc <__sflush_r+0x34>
 8008a32:	2b1d      	cmp	r3, #29
 8008a34:	d001      	beq.n	8008a3a <__sflush_r+0xb2>
 8008a36:	2b16      	cmp	r3, #22
 8008a38:	d101      	bne.n	8008a3e <__sflush_r+0xb6>
 8008a3a:	602f      	str	r7, [r5, #0]
 8008a3c:	e7b1      	b.n	80089a2 <__sflush_r+0x1a>
 8008a3e:	89a3      	ldrh	r3, [r4, #12]
 8008a40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008a44:	81a3      	strh	r3, [r4, #12]
 8008a46:	e7ad      	b.n	80089a4 <__sflush_r+0x1c>
 8008a48:	690f      	ldr	r7, [r1, #16]
 8008a4a:	2f00      	cmp	r7, #0
 8008a4c:	d0a9      	beq.n	80089a2 <__sflush_r+0x1a>
 8008a4e:	0793      	lsls	r3, r2, #30
 8008a50:	680e      	ldr	r6, [r1, #0]
 8008a52:	bf08      	it	eq
 8008a54:	694b      	ldreq	r3, [r1, #20]
 8008a56:	600f      	str	r7, [r1, #0]
 8008a58:	bf18      	it	ne
 8008a5a:	2300      	movne	r3, #0
 8008a5c:	eba6 0807 	sub.w	r8, r6, r7
 8008a60:	608b      	str	r3, [r1, #8]
 8008a62:	f1b8 0f00 	cmp.w	r8, #0
 8008a66:	dd9c      	ble.n	80089a2 <__sflush_r+0x1a>
 8008a68:	6a21      	ldr	r1, [r4, #32]
 8008a6a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008a6c:	4643      	mov	r3, r8
 8008a6e:	463a      	mov	r2, r7
 8008a70:	4628      	mov	r0, r5
 8008a72:	47b0      	blx	r6
 8008a74:	2800      	cmp	r0, #0
 8008a76:	dc06      	bgt.n	8008a86 <__sflush_r+0xfe>
 8008a78:	89a3      	ldrh	r3, [r4, #12]
 8008a7a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008a7e:	81a3      	strh	r3, [r4, #12]
 8008a80:	f04f 30ff 	mov.w	r0, #4294967295
 8008a84:	e78e      	b.n	80089a4 <__sflush_r+0x1c>
 8008a86:	4407      	add	r7, r0
 8008a88:	eba8 0800 	sub.w	r8, r8, r0
 8008a8c:	e7e9      	b.n	8008a62 <__sflush_r+0xda>
 8008a8e:	bf00      	nop
 8008a90:	20400001 	.word	0x20400001

08008a94 <_fflush_r>:
 8008a94:	b538      	push	{r3, r4, r5, lr}
 8008a96:	690b      	ldr	r3, [r1, #16]
 8008a98:	4605      	mov	r5, r0
 8008a9a:	460c      	mov	r4, r1
 8008a9c:	b913      	cbnz	r3, 8008aa4 <_fflush_r+0x10>
 8008a9e:	2500      	movs	r5, #0
 8008aa0:	4628      	mov	r0, r5
 8008aa2:	bd38      	pop	{r3, r4, r5, pc}
 8008aa4:	b118      	cbz	r0, 8008aae <_fflush_r+0x1a>
 8008aa6:	6983      	ldr	r3, [r0, #24]
 8008aa8:	b90b      	cbnz	r3, 8008aae <_fflush_r+0x1a>
 8008aaa:	f000 f887 	bl	8008bbc <__sinit>
 8008aae:	4b14      	ldr	r3, [pc, #80]	; (8008b00 <_fflush_r+0x6c>)
 8008ab0:	429c      	cmp	r4, r3
 8008ab2:	d11b      	bne.n	8008aec <_fflush_r+0x58>
 8008ab4:	686c      	ldr	r4, [r5, #4]
 8008ab6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d0ef      	beq.n	8008a9e <_fflush_r+0xa>
 8008abe:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008ac0:	07d0      	lsls	r0, r2, #31
 8008ac2:	d404      	bmi.n	8008ace <_fflush_r+0x3a>
 8008ac4:	0599      	lsls	r1, r3, #22
 8008ac6:	d402      	bmi.n	8008ace <_fflush_r+0x3a>
 8008ac8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008aca:	f000 f915 	bl	8008cf8 <__retarget_lock_acquire_recursive>
 8008ace:	4628      	mov	r0, r5
 8008ad0:	4621      	mov	r1, r4
 8008ad2:	f7ff ff59 	bl	8008988 <__sflush_r>
 8008ad6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008ad8:	07da      	lsls	r2, r3, #31
 8008ada:	4605      	mov	r5, r0
 8008adc:	d4e0      	bmi.n	8008aa0 <_fflush_r+0xc>
 8008ade:	89a3      	ldrh	r3, [r4, #12]
 8008ae0:	059b      	lsls	r3, r3, #22
 8008ae2:	d4dd      	bmi.n	8008aa0 <_fflush_r+0xc>
 8008ae4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008ae6:	f000 f908 	bl	8008cfa <__retarget_lock_release_recursive>
 8008aea:	e7d9      	b.n	8008aa0 <_fflush_r+0xc>
 8008aec:	4b05      	ldr	r3, [pc, #20]	; (8008b04 <_fflush_r+0x70>)
 8008aee:	429c      	cmp	r4, r3
 8008af0:	d101      	bne.n	8008af6 <_fflush_r+0x62>
 8008af2:	68ac      	ldr	r4, [r5, #8]
 8008af4:	e7df      	b.n	8008ab6 <_fflush_r+0x22>
 8008af6:	4b04      	ldr	r3, [pc, #16]	; (8008b08 <_fflush_r+0x74>)
 8008af8:	429c      	cmp	r4, r3
 8008afa:	bf08      	it	eq
 8008afc:	68ec      	ldreq	r4, [r5, #12]
 8008afe:	e7da      	b.n	8008ab6 <_fflush_r+0x22>
 8008b00:	08009de8 	.word	0x08009de8
 8008b04:	08009e08 	.word	0x08009e08
 8008b08:	08009dc8 	.word	0x08009dc8

08008b0c <std>:
 8008b0c:	2300      	movs	r3, #0
 8008b0e:	b510      	push	{r4, lr}
 8008b10:	4604      	mov	r4, r0
 8008b12:	e9c0 3300 	strd	r3, r3, [r0]
 8008b16:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008b1a:	6083      	str	r3, [r0, #8]
 8008b1c:	8181      	strh	r1, [r0, #12]
 8008b1e:	6643      	str	r3, [r0, #100]	; 0x64
 8008b20:	81c2      	strh	r2, [r0, #14]
 8008b22:	6183      	str	r3, [r0, #24]
 8008b24:	4619      	mov	r1, r3
 8008b26:	2208      	movs	r2, #8
 8008b28:	305c      	adds	r0, #92	; 0x5c
 8008b2a:	f7ff fdb7 	bl	800869c <memset>
 8008b2e:	4b05      	ldr	r3, [pc, #20]	; (8008b44 <std+0x38>)
 8008b30:	6263      	str	r3, [r4, #36]	; 0x24
 8008b32:	4b05      	ldr	r3, [pc, #20]	; (8008b48 <std+0x3c>)
 8008b34:	62a3      	str	r3, [r4, #40]	; 0x28
 8008b36:	4b05      	ldr	r3, [pc, #20]	; (8008b4c <std+0x40>)
 8008b38:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008b3a:	4b05      	ldr	r3, [pc, #20]	; (8008b50 <std+0x44>)
 8008b3c:	6224      	str	r4, [r4, #32]
 8008b3e:	6323      	str	r3, [r4, #48]	; 0x30
 8008b40:	bd10      	pop	{r4, pc}
 8008b42:	bf00      	nop
 8008b44:	080097cd 	.word	0x080097cd
 8008b48:	080097ef 	.word	0x080097ef
 8008b4c:	08009827 	.word	0x08009827
 8008b50:	0800984b 	.word	0x0800984b

08008b54 <_cleanup_r>:
 8008b54:	4901      	ldr	r1, [pc, #4]	; (8008b5c <_cleanup_r+0x8>)
 8008b56:	f000 b8af 	b.w	8008cb8 <_fwalk_reent>
 8008b5a:	bf00      	nop
 8008b5c:	08008a95 	.word	0x08008a95

08008b60 <__sfmoreglue>:
 8008b60:	b570      	push	{r4, r5, r6, lr}
 8008b62:	1e4a      	subs	r2, r1, #1
 8008b64:	2568      	movs	r5, #104	; 0x68
 8008b66:	4355      	muls	r5, r2
 8008b68:	460e      	mov	r6, r1
 8008b6a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008b6e:	f000 f979 	bl	8008e64 <_malloc_r>
 8008b72:	4604      	mov	r4, r0
 8008b74:	b140      	cbz	r0, 8008b88 <__sfmoreglue+0x28>
 8008b76:	2100      	movs	r1, #0
 8008b78:	e9c0 1600 	strd	r1, r6, [r0]
 8008b7c:	300c      	adds	r0, #12
 8008b7e:	60a0      	str	r0, [r4, #8]
 8008b80:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008b84:	f7ff fd8a 	bl	800869c <memset>
 8008b88:	4620      	mov	r0, r4
 8008b8a:	bd70      	pop	{r4, r5, r6, pc}

08008b8c <__sfp_lock_acquire>:
 8008b8c:	4801      	ldr	r0, [pc, #4]	; (8008b94 <__sfp_lock_acquire+0x8>)
 8008b8e:	f000 b8b3 	b.w	8008cf8 <__retarget_lock_acquire_recursive>
 8008b92:	bf00      	nop
 8008b94:	20004c28 	.word	0x20004c28

08008b98 <__sfp_lock_release>:
 8008b98:	4801      	ldr	r0, [pc, #4]	; (8008ba0 <__sfp_lock_release+0x8>)
 8008b9a:	f000 b8ae 	b.w	8008cfa <__retarget_lock_release_recursive>
 8008b9e:	bf00      	nop
 8008ba0:	20004c28 	.word	0x20004c28

08008ba4 <__sinit_lock_acquire>:
 8008ba4:	4801      	ldr	r0, [pc, #4]	; (8008bac <__sinit_lock_acquire+0x8>)
 8008ba6:	f000 b8a7 	b.w	8008cf8 <__retarget_lock_acquire_recursive>
 8008baa:	bf00      	nop
 8008bac:	20004c23 	.word	0x20004c23

08008bb0 <__sinit_lock_release>:
 8008bb0:	4801      	ldr	r0, [pc, #4]	; (8008bb8 <__sinit_lock_release+0x8>)
 8008bb2:	f000 b8a2 	b.w	8008cfa <__retarget_lock_release_recursive>
 8008bb6:	bf00      	nop
 8008bb8:	20004c23 	.word	0x20004c23

08008bbc <__sinit>:
 8008bbc:	b510      	push	{r4, lr}
 8008bbe:	4604      	mov	r4, r0
 8008bc0:	f7ff fff0 	bl	8008ba4 <__sinit_lock_acquire>
 8008bc4:	69a3      	ldr	r3, [r4, #24]
 8008bc6:	b11b      	cbz	r3, 8008bd0 <__sinit+0x14>
 8008bc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008bcc:	f7ff bff0 	b.w	8008bb0 <__sinit_lock_release>
 8008bd0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008bd4:	6523      	str	r3, [r4, #80]	; 0x50
 8008bd6:	4b13      	ldr	r3, [pc, #76]	; (8008c24 <__sinit+0x68>)
 8008bd8:	4a13      	ldr	r2, [pc, #76]	; (8008c28 <__sinit+0x6c>)
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	62a2      	str	r2, [r4, #40]	; 0x28
 8008bde:	42a3      	cmp	r3, r4
 8008be0:	bf04      	itt	eq
 8008be2:	2301      	moveq	r3, #1
 8008be4:	61a3      	streq	r3, [r4, #24]
 8008be6:	4620      	mov	r0, r4
 8008be8:	f000 f820 	bl	8008c2c <__sfp>
 8008bec:	6060      	str	r0, [r4, #4]
 8008bee:	4620      	mov	r0, r4
 8008bf0:	f000 f81c 	bl	8008c2c <__sfp>
 8008bf4:	60a0      	str	r0, [r4, #8]
 8008bf6:	4620      	mov	r0, r4
 8008bf8:	f000 f818 	bl	8008c2c <__sfp>
 8008bfc:	2200      	movs	r2, #0
 8008bfe:	60e0      	str	r0, [r4, #12]
 8008c00:	2104      	movs	r1, #4
 8008c02:	6860      	ldr	r0, [r4, #4]
 8008c04:	f7ff ff82 	bl	8008b0c <std>
 8008c08:	68a0      	ldr	r0, [r4, #8]
 8008c0a:	2201      	movs	r2, #1
 8008c0c:	2109      	movs	r1, #9
 8008c0e:	f7ff ff7d 	bl	8008b0c <std>
 8008c12:	68e0      	ldr	r0, [r4, #12]
 8008c14:	2202      	movs	r2, #2
 8008c16:	2112      	movs	r1, #18
 8008c18:	f7ff ff78 	bl	8008b0c <std>
 8008c1c:	2301      	movs	r3, #1
 8008c1e:	61a3      	str	r3, [r4, #24]
 8008c20:	e7d2      	b.n	8008bc8 <__sinit+0xc>
 8008c22:	bf00      	nop
 8008c24:	08009dc4 	.word	0x08009dc4
 8008c28:	08008b55 	.word	0x08008b55

08008c2c <__sfp>:
 8008c2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c2e:	4607      	mov	r7, r0
 8008c30:	f7ff ffac 	bl	8008b8c <__sfp_lock_acquire>
 8008c34:	4b1e      	ldr	r3, [pc, #120]	; (8008cb0 <__sfp+0x84>)
 8008c36:	681e      	ldr	r6, [r3, #0]
 8008c38:	69b3      	ldr	r3, [r6, #24]
 8008c3a:	b913      	cbnz	r3, 8008c42 <__sfp+0x16>
 8008c3c:	4630      	mov	r0, r6
 8008c3e:	f7ff ffbd 	bl	8008bbc <__sinit>
 8008c42:	3648      	adds	r6, #72	; 0x48
 8008c44:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008c48:	3b01      	subs	r3, #1
 8008c4a:	d503      	bpl.n	8008c54 <__sfp+0x28>
 8008c4c:	6833      	ldr	r3, [r6, #0]
 8008c4e:	b30b      	cbz	r3, 8008c94 <__sfp+0x68>
 8008c50:	6836      	ldr	r6, [r6, #0]
 8008c52:	e7f7      	b.n	8008c44 <__sfp+0x18>
 8008c54:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008c58:	b9d5      	cbnz	r5, 8008c90 <__sfp+0x64>
 8008c5a:	4b16      	ldr	r3, [pc, #88]	; (8008cb4 <__sfp+0x88>)
 8008c5c:	60e3      	str	r3, [r4, #12]
 8008c5e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008c62:	6665      	str	r5, [r4, #100]	; 0x64
 8008c64:	f000 f847 	bl	8008cf6 <__retarget_lock_init_recursive>
 8008c68:	f7ff ff96 	bl	8008b98 <__sfp_lock_release>
 8008c6c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008c70:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008c74:	6025      	str	r5, [r4, #0]
 8008c76:	61a5      	str	r5, [r4, #24]
 8008c78:	2208      	movs	r2, #8
 8008c7a:	4629      	mov	r1, r5
 8008c7c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008c80:	f7ff fd0c 	bl	800869c <memset>
 8008c84:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008c88:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008c8c:	4620      	mov	r0, r4
 8008c8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008c90:	3468      	adds	r4, #104	; 0x68
 8008c92:	e7d9      	b.n	8008c48 <__sfp+0x1c>
 8008c94:	2104      	movs	r1, #4
 8008c96:	4638      	mov	r0, r7
 8008c98:	f7ff ff62 	bl	8008b60 <__sfmoreglue>
 8008c9c:	4604      	mov	r4, r0
 8008c9e:	6030      	str	r0, [r6, #0]
 8008ca0:	2800      	cmp	r0, #0
 8008ca2:	d1d5      	bne.n	8008c50 <__sfp+0x24>
 8008ca4:	f7ff ff78 	bl	8008b98 <__sfp_lock_release>
 8008ca8:	230c      	movs	r3, #12
 8008caa:	603b      	str	r3, [r7, #0]
 8008cac:	e7ee      	b.n	8008c8c <__sfp+0x60>
 8008cae:	bf00      	nop
 8008cb0:	08009dc4 	.word	0x08009dc4
 8008cb4:	ffff0001 	.word	0xffff0001

08008cb8 <_fwalk_reent>:
 8008cb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008cbc:	4606      	mov	r6, r0
 8008cbe:	4688      	mov	r8, r1
 8008cc0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008cc4:	2700      	movs	r7, #0
 8008cc6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008cca:	f1b9 0901 	subs.w	r9, r9, #1
 8008cce:	d505      	bpl.n	8008cdc <_fwalk_reent+0x24>
 8008cd0:	6824      	ldr	r4, [r4, #0]
 8008cd2:	2c00      	cmp	r4, #0
 8008cd4:	d1f7      	bne.n	8008cc6 <_fwalk_reent+0xe>
 8008cd6:	4638      	mov	r0, r7
 8008cd8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008cdc:	89ab      	ldrh	r3, [r5, #12]
 8008cde:	2b01      	cmp	r3, #1
 8008ce0:	d907      	bls.n	8008cf2 <_fwalk_reent+0x3a>
 8008ce2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008ce6:	3301      	adds	r3, #1
 8008ce8:	d003      	beq.n	8008cf2 <_fwalk_reent+0x3a>
 8008cea:	4629      	mov	r1, r5
 8008cec:	4630      	mov	r0, r6
 8008cee:	47c0      	blx	r8
 8008cf0:	4307      	orrs	r7, r0
 8008cf2:	3568      	adds	r5, #104	; 0x68
 8008cf4:	e7e9      	b.n	8008cca <_fwalk_reent+0x12>

08008cf6 <__retarget_lock_init_recursive>:
 8008cf6:	4770      	bx	lr

08008cf8 <__retarget_lock_acquire_recursive>:
 8008cf8:	4770      	bx	lr

08008cfa <__retarget_lock_release_recursive>:
 8008cfa:	4770      	bx	lr

08008cfc <__swhatbuf_r>:
 8008cfc:	b570      	push	{r4, r5, r6, lr}
 8008cfe:	460e      	mov	r6, r1
 8008d00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d04:	2900      	cmp	r1, #0
 8008d06:	b096      	sub	sp, #88	; 0x58
 8008d08:	4614      	mov	r4, r2
 8008d0a:	461d      	mov	r5, r3
 8008d0c:	da07      	bge.n	8008d1e <__swhatbuf_r+0x22>
 8008d0e:	2300      	movs	r3, #0
 8008d10:	602b      	str	r3, [r5, #0]
 8008d12:	89b3      	ldrh	r3, [r6, #12]
 8008d14:	061a      	lsls	r2, r3, #24
 8008d16:	d410      	bmi.n	8008d3a <__swhatbuf_r+0x3e>
 8008d18:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008d1c:	e00e      	b.n	8008d3c <__swhatbuf_r+0x40>
 8008d1e:	466a      	mov	r2, sp
 8008d20:	f000 fdba 	bl	8009898 <_fstat_r>
 8008d24:	2800      	cmp	r0, #0
 8008d26:	dbf2      	blt.n	8008d0e <__swhatbuf_r+0x12>
 8008d28:	9a01      	ldr	r2, [sp, #4]
 8008d2a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008d2e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008d32:	425a      	negs	r2, r3
 8008d34:	415a      	adcs	r2, r3
 8008d36:	602a      	str	r2, [r5, #0]
 8008d38:	e7ee      	b.n	8008d18 <__swhatbuf_r+0x1c>
 8008d3a:	2340      	movs	r3, #64	; 0x40
 8008d3c:	2000      	movs	r0, #0
 8008d3e:	6023      	str	r3, [r4, #0]
 8008d40:	b016      	add	sp, #88	; 0x58
 8008d42:	bd70      	pop	{r4, r5, r6, pc}

08008d44 <__smakebuf_r>:
 8008d44:	898b      	ldrh	r3, [r1, #12]
 8008d46:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008d48:	079d      	lsls	r5, r3, #30
 8008d4a:	4606      	mov	r6, r0
 8008d4c:	460c      	mov	r4, r1
 8008d4e:	d507      	bpl.n	8008d60 <__smakebuf_r+0x1c>
 8008d50:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008d54:	6023      	str	r3, [r4, #0]
 8008d56:	6123      	str	r3, [r4, #16]
 8008d58:	2301      	movs	r3, #1
 8008d5a:	6163      	str	r3, [r4, #20]
 8008d5c:	b002      	add	sp, #8
 8008d5e:	bd70      	pop	{r4, r5, r6, pc}
 8008d60:	ab01      	add	r3, sp, #4
 8008d62:	466a      	mov	r2, sp
 8008d64:	f7ff ffca 	bl	8008cfc <__swhatbuf_r>
 8008d68:	9900      	ldr	r1, [sp, #0]
 8008d6a:	4605      	mov	r5, r0
 8008d6c:	4630      	mov	r0, r6
 8008d6e:	f000 f879 	bl	8008e64 <_malloc_r>
 8008d72:	b948      	cbnz	r0, 8008d88 <__smakebuf_r+0x44>
 8008d74:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008d78:	059a      	lsls	r2, r3, #22
 8008d7a:	d4ef      	bmi.n	8008d5c <__smakebuf_r+0x18>
 8008d7c:	f023 0303 	bic.w	r3, r3, #3
 8008d80:	f043 0302 	orr.w	r3, r3, #2
 8008d84:	81a3      	strh	r3, [r4, #12]
 8008d86:	e7e3      	b.n	8008d50 <__smakebuf_r+0xc>
 8008d88:	4b0d      	ldr	r3, [pc, #52]	; (8008dc0 <__smakebuf_r+0x7c>)
 8008d8a:	62b3      	str	r3, [r6, #40]	; 0x28
 8008d8c:	89a3      	ldrh	r3, [r4, #12]
 8008d8e:	6020      	str	r0, [r4, #0]
 8008d90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008d94:	81a3      	strh	r3, [r4, #12]
 8008d96:	9b00      	ldr	r3, [sp, #0]
 8008d98:	6163      	str	r3, [r4, #20]
 8008d9a:	9b01      	ldr	r3, [sp, #4]
 8008d9c:	6120      	str	r0, [r4, #16]
 8008d9e:	b15b      	cbz	r3, 8008db8 <__smakebuf_r+0x74>
 8008da0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008da4:	4630      	mov	r0, r6
 8008da6:	f000 fd89 	bl	80098bc <_isatty_r>
 8008daa:	b128      	cbz	r0, 8008db8 <__smakebuf_r+0x74>
 8008dac:	89a3      	ldrh	r3, [r4, #12]
 8008dae:	f023 0303 	bic.w	r3, r3, #3
 8008db2:	f043 0301 	orr.w	r3, r3, #1
 8008db6:	81a3      	strh	r3, [r4, #12]
 8008db8:	89a0      	ldrh	r0, [r4, #12]
 8008dba:	4305      	orrs	r5, r0
 8008dbc:	81a5      	strh	r5, [r4, #12]
 8008dbe:	e7cd      	b.n	8008d5c <__smakebuf_r+0x18>
 8008dc0:	08008b55 	.word	0x08008b55

08008dc4 <_free_r>:
 8008dc4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008dc6:	2900      	cmp	r1, #0
 8008dc8:	d048      	beq.n	8008e5c <_free_r+0x98>
 8008dca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008dce:	9001      	str	r0, [sp, #4]
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	f1a1 0404 	sub.w	r4, r1, #4
 8008dd6:	bfb8      	it	lt
 8008dd8:	18e4      	addlt	r4, r4, r3
 8008dda:	f000 fdab 	bl	8009934 <__malloc_lock>
 8008dde:	4a20      	ldr	r2, [pc, #128]	; (8008e60 <_free_r+0x9c>)
 8008de0:	9801      	ldr	r0, [sp, #4]
 8008de2:	6813      	ldr	r3, [r2, #0]
 8008de4:	4615      	mov	r5, r2
 8008de6:	b933      	cbnz	r3, 8008df6 <_free_r+0x32>
 8008de8:	6063      	str	r3, [r4, #4]
 8008dea:	6014      	str	r4, [r2, #0]
 8008dec:	b003      	add	sp, #12
 8008dee:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008df2:	f000 bda5 	b.w	8009940 <__malloc_unlock>
 8008df6:	42a3      	cmp	r3, r4
 8008df8:	d90b      	bls.n	8008e12 <_free_r+0x4e>
 8008dfa:	6821      	ldr	r1, [r4, #0]
 8008dfc:	1862      	adds	r2, r4, r1
 8008dfe:	4293      	cmp	r3, r2
 8008e00:	bf04      	itt	eq
 8008e02:	681a      	ldreq	r2, [r3, #0]
 8008e04:	685b      	ldreq	r3, [r3, #4]
 8008e06:	6063      	str	r3, [r4, #4]
 8008e08:	bf04      	itt	eq
 8008e0a:	1852      	addeq	r2, r2, r1
 8008e0c:	6022      	streq	r2, [r4, #0]
 8008e0e:	602c      	str	r4, [r5, #0]
 8008e10:	e7ec      	b.n	8008dec <_free_r+0x28>
 8008e12:	461a      	mov	r2, r3
 8008e14:	685b      	ldr	r3, [r3, #4]
 8008e16:	b10b      	cbz	r3, 8008e1c <_free_r+0x58>
 8008e18:	42a3      	cmp	r3, r4
 8008e1a:	d9fa      	bls.n	8008e12 <_free_r+0x4e>
 8008e1c:	6811      	ldr	r1, [r2, #0]
 8008e1e:	1855      	adds	r5, r2, r1
 8008e20:	42a5      	cmp	r5, r4
 8008e22:	d10b      	bne.n	8008e3c <_free_r+0x78>
 8008e24:	6824      	ldr	r4, [r4, #0]
 8008e26:	4421      	add	r1, r4
 8008e28:	1854      	adds	r4, r2, r1
 8008e2a:	42a3      	cmp	r3, r4
 8008e2c:	6011      	str	r1, [r2, #0]
 8008e2e:	d1dd      	bne.n	8008dec <_free_r+0x28>
 8008e30:	681c      	ldr	r4, [r3, #0]
 8008e32:	685b      	ldr	r3, [r3, #4]
 8008e34:	6053      	str	r3, [r2, #4]
 8008e36:	4421      	add	r1, r4
 8008e38:	6011      	str	r1, [r2, #0]
 8008e3a:	e7d7      	b.n	8008dec <_free_r+0x28>
 8008e3c:	d902      	bls.n	8008e44 <_free_r+0x80>
 8008e3e:	230c      	movs	r3, #12
 8008e40:	6003      	str	r3, [r0, #0]
 8008e42:	e7d3      	b.n	8008dec <_free_r+0x28>
 8008e44:	6825      	ldr	r5, [r4, #0]
 8008e46:	1961      	adds	r1, r4, r5
 8008e48:	428b      	cmp	r3, r1
 8008e4a:	bf04      	itt	eq
 8008e4c:	6819      	ldreq	r1, [r3, #0]
 8008e4e:	685b      	ldreq	r3, [r3, #4]
 8008e50:	6063      	str	r3, [r4, #4]
 8008e52:	bf04      	itt	eq
 8008e54:	1949      	addeq	r1, r1, r5
 8008e56:	6021      	streq	r1, [r4, #0]
 8008e58:	6054      	str	r4, [r2, #4]
 8008e5a:	e7c7      	b.n	8008dec <_free_r+0x28>
 8008e5c:	b003      	add	sp, #12
 8008e5e:	bd30      	pop	{r4, r5, pc}
 8008e60:	200049a4 	.word	0x200049a4

08008e64 <_malloc_r>:
 8008e64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e66:	1ccd      	adds	r5, r1, #3
 8008e68:	f025 0503 	bic.w	r5, r5, #3
 8008e6c:	3508      	adds	r5, #8
 8008e6e:	2d0c      	cmp	r5, #12
 8008e70:	bf38      	it	cc
 8008e72:	250c      	movcc	r5, #12
 8008e74:	2d00      	cmp	r5, #0
 8008e76:	4606      	mov	r6, r0
 8008e78:	db01      	blt.n	8008e7e <_malloc_r+0x1a>
 8008e7a:	42a9      	cmp	r1, r5
 8008e7c:	d903      	bls.n	8008e86 <_malloc_r+0x22>
 8008e7e:	230c      	movs	r3, #12
 8008e80:	6033      	str	r3, [r6, #0]
 8008e82:	2000      	movs	r0, #0
 8008e84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008e86:	f000 fd55 	bl	8009934 <__malloc_lock>
 8008e8a:	4921      	ldr	r1, [pc, #132]	; (8008f10 <_malloc_r+0xac>)
 8008e8c:	680a      	ldr	r2, [r1, #0]
 8008e8e:	4614      	mov	r4, r2
 8008e90:	b99c      	cbnz	r4, 8008eba <_malloc_r+0x56>
 8008e92:	4f20      	ldr	r7, [pc, #128]	; (8008f14 <_malloc_r+0xb0>)
 8008e94:	683b      	ldr	r3, [r7, #0]
 8008e96:	b923      	cbnz	r3, 8008ea2 <_malloc_r+0x3e>
 8008e98:	4621      	mov	r1, r4
 8008e9a:	4630      	mov	r0, r6
 8008e9c:	f000 fc86 	bl	80097ac <_sbrk_r>
 8008ea0:	6038      	str	r0, [r7, #0]
 8008ea2:	4629      	mov	r1, r5
 8008ea4:	4630      	mov	r0, r6
 8008ea6:	f000 fc81 	bl	80097ac <_sbrk_r>
 8008eaa:	1c43      	adds	r3, r0, #1
 8008eac:	d123      	bne.n	8008ef6 <_malloc_r+0x92>
 8008eae:	230c      	movs	r3, #12
 8008eb0:	6033      	str	r3, [r6, #0]
 8008eb2:	4630      	mov	r0, r6
 8008eb4:	f000 fd44 	bl	8009940 <__malloc_unlock>
 8008eb8:	e7e3      	b.n	8008e82 <_malloc_r+0x1e>
 8008eba:	6823      	ldr	r3, [r4, #0]
 8008ebc:	1b5b      	subs	r3, r3, r5
 8008ebe:	d417      	bmi.n	8008ef0 <_malloc_r+0x8c>
 8008ec0:	2b0b      	cmp	r3, #11
 8008ec2:	d903      	bls.n	8008ecc <_malloc_r+0x68>
 8008ec4:	6023      	str	r3, [r4, #0]
 8008ec6:	441c      	add	r4, r3
 8008ec8:	6025      	str	r5, [r4, #0]
 8008eca:	e004      	b.n	8008ed6 <_malloc_r+0x72>
 8008ecc:	6863      	ldr	r3, [r4, #4]
 8008ece:	42a2      	cmp	r2, r4
 8008ed0:	bf0c      	ite	eq
 8008ed2:	600b      	streq	r3, [r1, #0]
 8008ed4:	6053      	strne	r3, [r2, #4]
 8008ed6:	4630      	mov	r0, r6
 8008ed8:	f000 fd32 	bl	8009940 <__malloc_unlock>
 8008edc:	f104 000b 	add.w	r0, r4, #11
 8008ee0:	1d23      	adds	r3, r4, #4
 8008ee2:	f020 0007 	bic.w	r0, r0, #7
 8008ee6:	1ac2      	subs	r2, r0, r3
 8008ee8:	d0cc      	beq.n	8008e84 <_malloc_r+0x20>
 8008eea:	1a1b      	subs	r3, r3, r0
 8008eec:	50a3      	str	r3, [r4, r2]
 8008eee:	e7c9      	b.n	8008e84 <_malloc_r+0x20>
 8008ef0:	4622      	mov	r2, r4
 8008ef2:	6864      	ldr	r4, [r4, #4]
 8008ef4:	e7cc      	b.n	8008e90 <_malloc_r+0x2c>
 8008ef6:	1cc4      	adds	r4, r0, #3
 8008ef8:	f024 0403 	bic.w	r4, r4, #3
 8008efc:	42a0      	cmp	r0, r4
 8008efe:	d0e3      	beq.n	8008ec8 <_malloc_r+0x64>
 8008f00:	1a21      	subs	r1, r4, r0
 8008f02:	4630      	mov	r0, r6
 8008f04:	f000 fc52 	bl	80097ac <_sbrk_r>
 8008f08:	3001      	adds	r0, #1
 8008f0a:	d1dd      	bne.n	8008ec8 <_malloc_r+0x64>
 8008f0c:	e7cf      	b.n	8008eae <_malloc_r+0x4a>
 8008f0e:	bf00      	nop
 8008f10:	200049a4 	.word	0x200049a4
 8008f14:	200049a8 	.word	0x200049a8

08008f18 <__ssputs_r>:
 8008f18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008f1c:	688e      	ldr	r6, [r1, #8]
 8008f1e:	429e      	cmp	r6, r3
 8008f20:	4682      	mov	sl, r0
 8008f22:	460c      	mov	r4, r1
 8008f24:	4690      	mov	r8, r2
 8008f26:	461f      	mov	r7, r3
 8008f28:	d838      	bhi.n	8008f9c <__ssputs_r+0x84>
 8008f2a:	898a      	ldrh	r2, [r1, #12]
 8008f2c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008f30:	d032      	beq.n	8008f98 <__ssputs_r+0x80>
 8008f32:	6825      	ldr	r5, [r4, #0]
 8008f34:	6909      	ldr	r1, [r1, #16]
 8008f36:	eba5 0901 	sub.w	r9, r5, r1
 8008f3a:	6965      	ldr	r5, [r4, #20]
 8008f3c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008f40:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008f44:	3301      	adds	r3, #1
 8008f46:	444b      	add	r3, r9
 8008f48:	106d      	asrs	r5, r5, #1
 8008f4a:	429d      	cmp	r5, r3
 8008f4c:	bf38      	it	cc
 8008f4e:	461d      	movcc	r5, r3
 8008f50:	0553      	lsls	r3, r2, #21
 8008f52:	d531      	bpl.n	8008fb8 <__ssputs_r+0xa0>
 8008f54:	4629      	mov	r1, r5
 8008f56:	f7ff ff85 	bl	8008e64 <_malloc_r>
 8008f5a:	4606      	mov	r6, r0
 8008f5c:	b950      	cbnz	r0, 8008f74 <__ssputs_r+0x5c>
 8008f5e:	230c      	movs	r3, #12
 8008f60:	f8ca 3000 	str.w	r3, [sl]
 8008f64:	89a3      	ldrh	r3, [r4, #12]
 8008f66:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008f6a:	81a3      	strh	r3, [r4, #12]
 8008f6c:	f04f 30ff 	mov.w	r0, #4294967295
 8008f70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f74:	6921      	ldr	r1, [r4, #16]
 8008f76:	464a      	mov	r2, r9
 8008f78:	f7ff fb82 	bl	8008680 <memcpy>
 8008f7c:	89a3      	ldrh	r3, [r4, #12]
 8008f7e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008f82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008f86:	81a3      	strh	r3, [r4, #12]
 8008f88:	6126      	str	r6, [r4, #16]
 8008f8a:	6165      	str	r5, [r4, #20]
 8008f8c:	444e      	add	r6, r9
 8008f8e:	eba5 0509 	sub.w	r5, r5, r9
 8008f92:	6026      	str	r6, [r4, #0]
 8008f94:	60a5      	str	r5, [r4, #8]
 8008f96:	463e      	mov	r6, r7
 8008f98:	42be      	cmp	r6, r7
 8008f9a:	d900      	bls.n	8008f9e <__ssputs_r+0x86>
 8008f9c:	463e      	mov	r6, r7
 8008f9e:	4632      	mov	r2, r6
 8008fa0:	6820      	ldr	r0, [r4, #0]
 8008fa2:	4641      	mov	r1, r8
 8008fa4:	f000 fcac 	bl	8009900 <memmove>
 8008fa8:	68a3      	ldr	r3, [r4, #8]
 8008faa:	6822      	ldr	r2, [r4, #0]
 8008fac:	1b9b      	subs	r3, r3, r6
 8008fae:	4432      	add	r2, r6
 8008fb0:	60a3      	str	r3, [r4, #8]
 8008fb2:	6022      	str	r2, [r4, #0]
 8008fb4:	2000      	movs	r0, #0
 8008fb6:	e7db      	b.n	8008f70 <__ssputs_r+0x58>
 8008fb8:	462a      	mov	r2, r5
 8008fba:	f000 fcc7 	bl	800994c <_realloc_r>
 8008fbe:	4606      	mov	r6, r0
 8008fc0:	2800      	cmp	r0, #0
 8008fc2:	d1e1      	bne.n	8008f88 <__ssputs_r+0x70>
 8008fc4:	6921      	ldr	r1, [r4, #16]
 8008fc6:	4650      	mov	r0, sl
 8008fc8:	f7ff fefc 	bl	8008dc4 <_free_r>
 8008fcc:	e7c7      	b.n	8008f5e <__ssputs_r+0x46>
	...

08008fd0 <_svfiprintf_r>:
 8008fd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fd4:	4698      	mov	r8, r3
 8008fd6:	898b      	ldrh	r3, [r1, #12]
 8008fd8:	061b      	lsls	r3, r3, #24
 8008fda:	b09d      	sub	sp, #116	; 0x74
 8008fdc:	4607      	mov	r7, r0
 8008fde:	460d      	mov	r5, r1
 8008fe0:	4614      	mov	r4, r2
 8008fe2:	d50e      	bpl.n	8009002 <_svfiprintf_r+0x32>
 8008fe4:	690b      	ldr	r3, [r1, #16]
 8008fe6:	b963      	cbnz	r3, 8009002 <_svfiprintf_r+0x32>
 8008fe8:	2140      	movs	r1, #64	; 0x40
 8008fea:	f7ff ff3b 	bl	8008e64 <_malloc_r>
 8008fee:	6028      	str	r0, [r5, #0]
 8008ff0:	6128      	str	r0, [r5, #16]
 8008ff2:	b920      	cbnz	r0, 8008ffe <_svfiprintf_r+0x2e>
 8008ff4:	230c      	movs	r3, #12
 8008ff6:	603b      	str	r3, [r7, #0]
 8008ff8:	f04f 30ff 	mov.w	r0, #4294967295
 8008ffc:	e0d1      	b.n	80091a2 <_svfiprintf_r+0x1d2>
 8008ffe:	2340      	movs	r3, #64	; 0x40
 8009000:	616b      	str	r3, [r5, #20]
 8009002:	2300      	movs	r3, #0
 8009004:	9309      	str	r3, [sp, #36]	; 0x24
 8009006:	2320      	movs	r3, #32
 8009008:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800900c:	f8cd 800c 	str.w	r8, [sp, #12]
 8009010:	2330      	movs	r3, #48	; 0x30
 8009012:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80091bc <_svfiprintf_r+0x1ec>
 8009016:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800901a:	f04f 0901 	mov.w	r9, #1
 800901e:	4623      	mov	r3, r4
 8009020:	469a      	mov	sl, r3
 8009022:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009026:	b10a      	cbz	r2, 800902c <_svfiprintf_r+0x5c>
 8009028:	2a25      	cmp	r2, #37	; 0x25
 800902a:	d1f9      	bne.n	8009020 <_svfiprintf_r+0x50>
 800902c:	ebba 0b04 	subs.w	fp, sl, r4
 8009030:	d00b      	beq.n	800904a <_svfiprintf_r+0x7a>
 8009032:	465b      	mov	r3, fp
 8009034:	4622      	mov	r2, r4
 8009036:	4629      	mov	r1, r5
 8009038:	4638      	mov	r0, r7
 800903a:	f7ff ff6d 	bl	8008f18 <__ssputs_r>
 800903e:	3001      	adds	r0, #1
 8009040:	f000 80aa 	beq.w	8009198 <_svfiprintf_r+0x1c8>
 8009044:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009046:	445a      	add	r2, fp
 8009048:	9209      	str	r2, [sp, #36]	; 0x24
 800904a:	f89a 3000 	ldrb.w	r3, [sl]
 800904e:	2b00      	cmp	r3, #0
 8009050:	f000 80a2 	beq.w	8009198 <_svfiprintf_r+0x1c8>
 8009054:	2300      	movs	r3, #0
 8009056:	f04f 32ff 	mov.w	r2, #4294967295
 800905a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800905e:	f10a 0a01 	add.w	sl, sl, #1
 8009062:	9304      	str	r3, [sp, #16]
 8009064:	9307      	str	r3, [sp, #28]
 8009066:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800906a:	931a      	str	r3, [sp, #104]	; 0x68
 800906c:	4654      	mov	r4, sl
 800906e:	2205      	movs	r2, #5
 8009070:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009074:	4851      	ldr	r0, [pc, #324]	; (80091bc <_svfiprintf_r+0x1ec>)
 8009076:	f7f7 f8ab 	bl	80001d0 <memchr>
 800907a:	9a04      	ldr	r2, [sp, #16]
 800907c:	b9d8      	cbnz	r0, 80090b6 <_svfiprintf_r+0xe6>
 800907e:	06d0      	lsls	r0, r2, #27
 8009080:	bf44      	itt	mi
 8009082:	2320      	movmi	r3, #32
 8009084:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009088:	0711      	lsls	r1, r2, #28
 800908a:	bf44      	itt	mi
 800908c:	232b      	movmi	r3, #43	; 0x2b
 800908e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009092:	f89a 3000 	ldrb.w	r3, [sl]
 8009096:	2b2a      	cmp	r3, #42	; 0x2a
 8009098:	d015      	beq.n	80090c6 <_svfiprintf_r+0xf6>
 800909a:	9a07      	ldr	r2, [sp, #28]
 800909c:	4654      	mov	r4, sl
 800909e:	2000      	movs	r0, #0
 80090a0:	f04f 0c0a 	mov.w	ip, #10
 80090a4:	4621      	mov	r1, r4
 80090a6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80090aa:	3b30      	subs	r3, #48	; 0x30
 80090ac:	2b09      	cmp	r3, #9
 80090ae:	d94e      	bls.n	800914e <_svfiprintf_r+0x17e>
 80090b0:	b1b0      	cbz	r0, 80090e0 <_svfiprintf_r+0x110>
 80090b2:	9207      	str	r2, [sp, #28]
 80090b4:	e014      	b.n	80090e0 <_svfiprintf_r+0x110>
 80090b6:	eba0 0308 	sub.w	r3, r0, r8
 80090ba:	fa09 f303 	lsl.w	r3, r9, r3
 80090be:	4313      	orrs	r3, r2
 80090c0:	9304      	str	r3, [sp, #16]
 80090c2:	46a2      	mov	sl, r4
 80090c4:	e7d2      	b.n	800906c <_svfiprintf_r+0x9c>
 80090c6:	9b03      	ldr	r3, [sp, #12]
 80090c8:	1d19      	adds	r1, r3, #4
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	9103      	str	r1, [sp, #12]
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	bfbb      	ittet	lt
 80090d2:	425b      	neglt	r3, r3
 80090d4:	f042 0202 	orrlt.w	r2, r2, #2
 80090d8:	9307      	strge	r3, [sp, #28]
 80090da:	9307      	strlt	r3, [sp, #28]
 80090dc:	bfb8      	it	lt
 80090de:	9204      	strlt	r2, [sp, #16]
 80090e0:	7823      	ldrb	r3, [r4, #0]
 80090e2:	2b2e      	cmp	r3, #46	; 0x2e
 80090e4:	d10c      	bne.n	8009100 <_svfiprintf_r+0x130>
 80090e6:	7863      	ldrb	r3, [r4, #1]
 80090e8:	2b2a      	cmp	r3, #42	; 0x2a
 80090ea:	d135      	bne.n	8009158 <_svfiprintf_r+0x188>
 80090ec:	9b03      	ldr	r3, [sp, #12]
 80090ee:	1d1a      	adds	r2, r3, #4
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	9203      	str	r2, [sp, #12]
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	bfb8      	it	lt
 80090f8:	f04f 33ff 	movlt.w	r3, #4294967295
 80090fc:	3402      	adds	r4, #2
 80090fe:	9305      	str	r3, [sp, #20]
 8009100:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80091cc <_svfiprintf_r+0x1fc>
 8009104:	7821      	ldrb	r1, [r4, #0]
 8009106:	2203      	movs	r2, #3
 8009108:	4650      	mov	r0, sl
 800910a:	f7f7 f861 	bl	80001d0 <memchr>
 800910e:	b140      	cbz	r0, 8009122 <_svfiprintf_r+0x152>
 8009110:	2340      	movs	r3, #64	; 0x40
 8009112:	eba0 000a 	sub.w	r0, r0, sl
 8009116:	fa03 f000 	lsl.w	r0, r3, r0
 800911a:	9b04      	ldr	r3, [sp, #16]
 800911c:	4303      	orrs	r3, r0
 800911e:	3401      	adds	r4, #1
 8009120:	9304      	str	r3, [sp, #16]
 8009122:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009126:	4826      	ldr	r0, [pc, #152]	; (80091c0 <_svfiprintf_r+0x1f0>)
 8009128:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800912c:	2206      	movs	r2, #6
 800912e:	f7f7 f84f 	bl	80001d0 <memchr>
 8009132:	2800      	cmp	r0, #0
 8009134:	d038      	beq.n	80091a8 <_svfiprintf_r+0x1d8>
 8009136:	4b23      	ldr	r3, [pc, #140]	; (80091c4 <_svfiprintf_r+0x1f4>)
 8009138:	bb1b      	cbnz	r3, 8009182 <_svfiprintf_r+0x1b2>
 800913a:	9b03      	ldr	r3, [sp, #12]
 800913c:	3307      	adds	r3, #7
 800913e:	f023 0307 	bic.w	r3, r3, #7
 8009142:	3308      	adds	r3, #8
 8009144:	9303      	str	r3, [sp, #12]
 8009146:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009148:	4433      	add	r3, r6
 800914a:	9309      	str	r3, [sp, #36]	; 0x24
 800914c:	e767      	b.n	800901e <_svfiprintf_r+0x4e>
 800914e:	fb0c 3202 	mla	r2, ip, r2, r3
 8009152:	460c      	mov	r4, r1
 8009154:	2001      	movs	r0, #1
 8009156:	e7a5      	b.n	80090a4 <_svfiprintf_r+0xd4>
 8009158:	2300      	movs	r3, #0
 800915a:	3401      	adds	r4, #1
 800915c:	9305      	str	r3, [sp, #20]
 800915e:	4619      	mov	r1, r3
 8009160:	f04f 0c0a 	mov.w	ip, #10
 8009164:	4620      	mov	r0, r4
 8009166:	f810 2b01 	ldrb.w	r2, [r0], #1
 800916a:	3a30      	subs	r2, #48	; 0x30
 800916c:	2a09      	cmp	r2, #9
 800916e:	d903      	bls.n	8009178 <_svfiprintf_r+0x1a8>
 8009170:	2b00      	cmp	r3, #0
 8009172:	d0c5      	beq.n	8009100 <_svfiprintf_r+0x130>
 8009174:	9105      	str	r1, [sp, #20]
 8009176:	e7c3      	b.n	8009100 <_svfiprintf_r+0x130>
 8009178:	fb0c 2101 	mla	r1, ip, r1, r2
 800917c:	4604      	mov	r4, r0
 800917e:	2301      	movs	r3, #1
 8009180:	e7f0      	b.n	8009164 <_svfiprintf_r+0x194>
 8009182:	ab03      	add	r3, sp, #12
 8009184:	9300      	str	r3, [sp, #0]
 8009186:	462a      	mov	r2, r5
 8009188:	4b0f      	ldr	r3, [pc, #60]	; (80091c8 <_svfiprintf_r+0x1f8>)
 800918a:	a904      	add	r1, sp, #16
 800918c:	4638      	mov	r0, r7
 800918e:	f3af 8000 	nop.w
 8009192:	1c42      	adds	r2, r0, #1
 8009194:	4606      	mov	r6, r0
 8009196:	d1d6      	bne.n	8009146 <_svfiprintf_r+0x176>
 8009198:	89ab      	ldrh	r3, [r5, #12]
 800919a:	065b      	lsls	r3, r3, #25
 800919c:	f53f af2c 	bmi.w	8008ff8 <_svfiprintf_r+0x28>
 80091a0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80091a2:	b01d      	add	sp, #116	; 0x74
 80091a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091a8:	ab03      	add	r3, sp, #12
 80091aa:	9300      	str	r3, [sp, #0]
 80091ac:	462a      	mov	r2, r5
 80091ae:	4b06      	ldr	r3, [pc, #24]	; (80091c8 <_svfiprintf_r+0x1f8>)
 80091b0:	a904      	add	r1, sp, #16
 80091b2:	4638      	mov	r0, r7
 80091b4:	f000 f9d4 	bl	8009560 <_printf_i>
 80091b8:	e7eb      	b.n	8009192 <_svfiprintf_r+0x1c2>
 80091ba:	bf00      	nop
 80091bc:	08009e28 	.word	0x08009e28
 80091c0:	08009e32 	.word	0x08009e32
 80091c4:	00000000 	.word	0x00000000
 80091c8:	08008f19 	.word	0x08008f19
 80091cc:	08009e2e 	.word	0x08009e2e

080091d0 <__sfputc_r>:
 80091d0:	6893      	ldr	r3, [r2, #8]
 80091d2:	3b01      	subs	r3, #1
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	b410      	push	{r4}
 80091d8:	6093      	str	r3, [r2, #8]
 80091da:	da08      	bge.n	80091ee <__sfputc_r+0x1e>
 80091dc:	6994      	ldr	r4, [r2, #24]
 80091de:	42a3      	cmp	r3, r4
 80091e0:	db01      	blt.n	80091e6 <__sfputc_r+0x16>
 80091e2:	290a      	cmp	r1, #10
 80091e4:	d103      	bne.n	80091ee <__sfputc_r+0x1e>
 80091e6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80091ea:	f7ff bb0d 	b.w	8008808 <__swbuf_r>
 80091ee:	6813      	ldr	r3, [r2, #0]
 80091f0:	1c58      	adds	r0, r3, #1
 80091f2:	6010      	str	r0, [r2, #0]
 80091f4:	7019      	strb	r1, [r3, #0]
 80091f6:	4608      	mov	r0, r1
 80091f8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80091fc:	4770      	bx	lr

080091fe <__sfputs_r>:
 80091fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009200:	4606      	mov	r6, r0
 8009202:	460f      	mov	r7, r1
 8009204:	4614      	mov	r4, r2
 8009206:	18d5      	adds	r5, r2, r3
 8009208:	42ac      	cmp	r4, r5
 800920a:	d101      	bne.n	8009210 <__sfputs_r+0x12>
 800920c:	2000      	movs	r0, #0
 800920e:	e007      	b.n	8009220 <__sfputs_r+0x22>
 8009210:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009214:	463a      	mov	r2, r7
 8009216:	4630      	mov	r0, r6
 8009218:	f7ff ffda 	bl	80091d0 <__sfputc_r>
 800921c:	1c43      	adds	r3, r0, #1
 800921e:	d1f3      	bne.n	8009208 <__sfputs_r+0xa>
 8009220:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009224 <_vfiprintf_r>:
 8009224:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009228:	460d      	mov	r5, r1
 800922a:	b09d      	sub	sp, #116	; 0x74
 800922c:	4614      	mov	r4, r2
 800922e:	4698      	mov	r8, r3
 8009230:	4606      	mov	r6, r0
 8009232:	b118      	cbz	r0, 800923c <_vfiprintf_r+0x18>
 8009234:	6983      	ldr	r3, [r0, #24]
 8009236:	b90b      	cbnz	r3, 800923c <_vfiprintf_r+0x18>
 8009238:	f7ff fcc0 	bl	8008bbc <__sinit>
 800923c:	4b89      	ldr	r3, [pc, #548]	; (8009464 <_vfiprintf_r+0x240>)
 800923e:	429d      	cmp	r5, r3
 8009240:	d11b      	bne.n	800927a <_vfiprintf_r+0x56>
 8009242:	6875      	ldr	r5, [r6, #4]
 8009244:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009246:	07d9      	lsls	r1, r3, #31
 8009248:	d405      	bmi.n	8009256 <_vfiprintf_r+0x32>
 800924a:	89ab      	ldrh	r3, [r5, #12]
 800924c:	059a      	lsls	r2, r3, #22
 800924e:	d402      	bmi.n	8009256 <_vfiprintf_r+0x32>
 8009250:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009252:	f7ff fd51 	bl	8008cf8 <__retarget_lock_acquire_recursive>
 8009256:	89ab      	ldrh	r3, [r5, #12]
 8009258:	071b      	lsls	r3, r3, #28
 800925a:	d501      	bpl.n	8009260 <_vfiprintf_r+0x3c>
 800925c:	692b      	ldr	r3, [r5, #16]
 800925e:	b9eb      	cbnz	r3, 800929c <_vfiprintf_r+0x78>
 8009260:	4629      	mov	r1, r5
 8009262:	4630      	mov	r0, r6
 8009264:	f7ff fb22 	bl	80088ac <__swsetup_r>
 8009268:	b1c0      	cbz	r0, 800929c <_vfiprintf_r+0x78>
 800926a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800926c:	07dc      	lsls	r4, r3, #31
 800926e:	d50e      	bpl.n	800928e <_vfiprintf_r+0x6a>
 8009270:	f04f 30ff 	mov.w	r0, #4294967295
 8009274:	b01d      	add	sp, #116	; 0x74
 8009276:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800927a:	4b7b      	ldr	r3, [pc, #492]	; (8009468 <_vfiprintf_r+0x244>)
 800927c:	429d      	cmp	r5, r3
 800927e:	d101      	bne.n	8009284 <_vfiprintf_r+0x60>
 8009280:	68b5      	ldr	r5, [r6, #8]
 8009282:	e7df      	b.n	8009244 <_vfiprintf_r+0x20>
 8009284:	4b79      	ldr	r3, [pc, #484]	; (800946c <_vfiprintf_r+0x248>)
 8009286:	429d      	cmp	r5, r3
 8009288:	bf08      	it	eq
 800928a:	68f5      	ldreq	r5, [r6, #12]
 800928c:	e7da      	b.n	8009244 <_vfiprintf_r+0x20>
 800928e:	89ab      	ldrh	r3, [r5, #12]
 8009290:	0598      	lsls	r0, r3, #22
 8009292:	d4ed      	bmi.n	8009270 <_vfiprintf_r+0x4c>
 8009294:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009296:	f7ff fd30 	bl	8008cfa <__retarget_lock_release_recursive>
 800929a:	e7e9      	b.n	8009270 <_vfiprintf_r+0x4c>
 800929c:	2300      	movs	r3, #0
 800929e:	9309      	str	r3, [sp, #36]	; 0x24
 80092a0:	2320      	movs	r3, #32
 80092a2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80092a6:	f8cd 800c 	str.w	r8, [sp, #12]
 80092aa:	2330      	movs	r3, #48	; 0x30
 80092ac:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009470 <_vfiprintf_r+0x24c>
 80092b0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80092b4:	f04f 0901 	mov.w	r9, #1
 80092b8:	4623      	mov	r3, r4
 80092ba:	469a      	mov	sl, r3
 80092bc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80092c0:	b10a      	cbz	r2, 80092c6 <_vfiprintf_r+0xa2>
 80092c2:	2a25      	cmp	r2, #37	; 0x25
 80092c4:	d1f9      	bne.n	80092ba <_vfiprintf_r+0x96>
 80092c6:	ebba 0b04 	subs.w	fp, sl, r4
 80092ca:	d00b      	beq.n	80092e4 <_vfiprintf_r+0xc0>
 80092cc:	465b      	mov	r3, fp
 80092ce:	4622      	mov	r2, r4
 80092d0:	4629      	mov	r1, r5
 80092d2:	4630      	mov	r0, r6
 80092d4:	f7ff ff93 	bl	80091fe <__sfputs_r>
 80092d8:	3001      	adds	r0, #1
 80092da:	f000 80aa 	beq.w	8009432 <_vfiprintf_r+0x20e>
 80092de:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80092e0:	445a      	add	r2, fp
 80092e2:	9209      	str	r2, [sp, #36]	; 0x24
 80092e4:	f89a 3000 	ldrb.w	r3, [sl]
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	f000 80a2 	beq.w	8009432 <_vfiprintf_r+0x20e>
 80092ee:	2300      	movs	r3, #0
 80092f0:	f04f 32ff 	mov.w	r2, #4294967295
 80092f4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80092f8:	f10a 0a01 	add.w	sl, sl, #1
 80092fc:	9304      	str	r3, [sp, #16]
 80092fe:	9307      	str	r3, [sp, #28]
 8009300:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009304:	931a      	str	r3, [sp, #104]	; 0x68
 8009306:	4654      	mov	r4, sl
 8009308:	2205      	movs	r2, #5
 800930a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800930e:	4858      	ldr	r0, [pc, #352]	; (8009470 <_vfiprintf_r+0x24c>)
 8009310:	f7f6 ff5e 	bl	80001d0 <memchr>
 8009314:	9a04      	ldr	r2, [sp, #16]
 8009316:	b9d8      	cbnz	r0, 8009350 <_vfiprintf_r+0x12c>
 8009318:	06d1      	lsls	r1, r2, #27
 800931a:	bf44      	itt	mi
 800931c:	2320      	movmi	r3, #32
 800931e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009322:	0713      	lsls	r3, r2, #28
 8009324:	bf44      	itt	mi
 8009326:	232b      	movmi	r3, #43	; 0x2b
 8009328:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800932c:	f89a 3000 	ldrb.w	r3, [sl]
 8009330:	2b2a      	cmp	r3, #42	; 0x2a
 8009332:	d015      	beq.n	8009360 <_vfiprintf_r+0x13c>
 8009334:	9a07      	ldr	r2, [sp, #28]
 8009336:	4654      	mov	r4, sl
 8009338:	2000      	movs	r0, #0
 800933a:	f04f 0c0a 	mov.w	ip, #10
 800933e:	4621      	mov	r1, r4
 8009340:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009344:	3b30      	subs	r3, #48	; 0x30
 8009346:	2b09      	cmp	r3, #9
 8009348:	d94e      	bls.n	80093e8 <_vfiprintf_r+0x1c4>
 800934a:	b1b0      	cbz	r0, 800937a <_vfiprintf_r+0x156>
 800934c:	9207      	str	r2, [sp, #28]
 800934e:	e014      	b.n	800937a <_vfiprintf_r+0x156>
 8009350:	eba0 0308 	sub.w	r3, r0, r8
 8009354:	fa09 f303 	lsl.w	r3, r9, r3
 8009358:	4313      	orrs	r3, r2
 800935a:	9304      	str	r3, [sp, #16]
 800935c:	46a2      	mov	sl, r4
 800935e:	e7d2      	b.n	8009306 <_vfiprintf_r+0xe2>
 8009360:	9b03      	ldr	r3, [sp, #12]
 8009362:	1d19      	adds	r1, r3, #4
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	9103      	str	r1, [sp, #12]
 8009368:	2b00      	cmp	r3, #0
 800936a:	bfbb      	ittet	lt
 800936c:	425b      	neglt	r3, r3
 800936e:	f042 0202 	orrlt.w	r2, r2, #2
 8009372:	9307      	strge	r3, [sp, #28]
 8009374:	9307      	strlt	r3, [sp, #28]
 8009376:	bfb8      	it	lt
 8009378:	9204      	strlt	r2, [sp, #16]
 800937a:	7823      	ldrb	r3, [r4, #0]
 800937c:	2b2e      	cmp	r3, #46	; 0x2e
 800937e:	d10c      	bne.n	800939a <_vfiprintf_r+0x176>
 8009380:	7863      	ldrb	r3, [r4, #1]
 8009382:	2b2a      	cmp	r3, #42	; 0x2a
 8009384:	d135      	bne.n	80093f2 <_vfiprintf_r+0x1ce>
 8009386:	9b03      	ldr	r3, [sp, #12]
 8009388:	1d1a      	adds	r2, r3, #4
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	9203      	str	r2, [sp, #12]
 800938e:	2b00      	cmp	r3, #0
 8009390:	bfb8      	it	lt
 8009392:	f04f 33ff 	movlt.w	r3, #4294967295
 8009396:	3402      	adds	r4, #2
 8009398:	9305      	str	r3, [sp, #20]
 800939a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009480 <_vfiprintf_r+0x25c>
 800939e:	7821      	ldrb	r1, [r4, #0]
 80093a0:	2203      	movs	r2, #3
 80093a2:	4650      	mov	r0, sl
 80093a4:	f7f6 ff14 	bl	80001d0 <memchr>
 80093a8:	b140      	cbz	r0, 80093bc <_vfiprintf_r+0x198>
 80093aa:	2340      	movs	r3, #64	; 0x40
 80093ac:	eba0 000a 	sub.w	r0, r0, sl
 80093b0:	fa03 f000 	lsl.w	r0, r3, r0
 80093b4:	9b04      	ldr	r3, [sp, #16]
 80093b6:	4303      	orrs	r3, r0
 80093b8:	3401      	adds	r4, #1
 80093ba:	9304      	str	r3, [sp, #16]
 80093bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80093c0:	482c      	ldr	r0, [pc, #176]	; (8009474 <_vfiprintf_r+0x250>)
 80093c2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80093c6:	2206      	movs	r2, #6
 80093c8:	f7f6 ff02 	bl	80001d0 <memchr>
 80093cc:	2800      	cmp	r0, #0
 80093ce:	d03f      	beq.n	8009450 <_vfiprintf_r+0x22c>
 80093d0:	4b29      	ldr	r3, [pc, #164]	; (8009478 <_vfiprintf_r+0x254>)
 80093d2:	bb1b      	cbnz	r3, 800941c <_vfiprintf_r+0x1f8>
 80093d4:	9b03      	ldr	r3, [sp, #12]
 80093d6:	3307      	adds	r3, #7
 80093d8:	f023 0307 	bic.w	r3, r3, #7
 80093dc:	3308      	adds	r3, #8
 80093de:	9303      	str	r3, [sp, #12]
 80093e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80093e2:	443b      	add	r3, r7
 80093e4:	9309      	str	r3, [sp, #36]	; 0x24
 80093e6:	e767      	b.n	80092b8 <_vfiprintf_r+0x94>
 80093e8:	fb0c 3202 	mla	r2, ip, r2, r3
 80093ec:	460c      	mov	r4, r1
 80093ee:	2001      	movs	r0, #1
 80093f0:	e7a5      	b.n	800933e <_vfiprintf_r+0x11a>
 80093f2:	2300      	movs	r3, #0
 80093f4:	3401      	adds	r4, #1
 80093f6:	9305      	str	r3, [sp, #20]
 80093f8:	4619      	mov	r1, r3
 80093fa:	f04f 0c0a 	mov.w	ip, #10
 80093fe:	4620      	mov	r0, r4
 8009400:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009404:	3a30      	subs	r2, #48	; 0x30
 8009406:	2a09      	cmp	r2, #9
 8009408:	d903      	bls.n	8009412 <_vfiprintf_r+0x1ee>
 800940a:	2b00      	cmp	r3, #0
 800940c:	d0c5      	beq.n	800939a <_vfiprintf_r+0x176>
 800940e:	9105      	str	r1, [sp, #20]
 8009410:	e7c3      	b.n	800939a <_vfiprintf_r+0x176>
 8009412:	fb0c 2101 	mla	r1, ip, r1, r2
 8009416:	4604      	mov	r4, r0
 8009418:	2301      	movs	r3, #1
 800941a:	e7f0      	b.n	80093fe <_vfiprintf_r+0x1da>
 800941c:	ab03      	add	r3, sp, #12
 800941e:	9300      	str	r3, [sp, #0]
 8009420:	462a      	mov	r2, r5
 8009422:	4b16      	ldr	r3, [pc, #88]	; (800947c <_vfiprintf_r+0x258>)
 8009424:	a904      	add	r1, sp, #16
 8009426:	4630      	mov	r0, r6
 8009428:	f3af 8000 	nop.w
 800942c:	4607      	mov	r7, r0
 800942e:	1c78      	adds	r0, r7, #1
 8009430:	d1d6      	bne.n	80093e0 <_vfiprintf_r+0x1bc>
 8009432:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009434:	07d9      	lsls	r1, r3, #31
 8009436:	d405      	bmi.n	8009444 <_vfiprintf_r+0x220>
 8009438:	89ab      	ldrh	r3, [r5, #12]
 800943a:	059a      	lsls	r2, r3, #22
 800943c:	d402      	bmi.n	8009444 <_vfiprintf_r+0x220>
 800943e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009440:	f7ff fc5b 	bl	8008cfa <__retarget_lock_release_recursive>
 8009444:	89ab      	ldrh	r3, [r5, #12]
 8009446:	065b      	lsls	r3, r3, #25
 8009448:	f53f af12 	bmi.w	8009270 <_vfiprintf_r+0x4c>
 800944c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800944e:	e711      	b.n	8009274 <_vfiprintf_r+0x50>
 8009450:	ab03      	add	r3, sp, #12
 8009452:	9300      	str	r3, [sp, #0]
 8009454:	462a      	mov	r2, r5
 8009456:	4b09      	ldr	r3, [pc, #36]	; (800947c <_vfiprintf_r+0x258>)
 8009458:	a904      	add	r1, sp, #16
 800945a:	4630      	mov	r0, r6
 800945c:	f000 f880 	bl	8009560 <_printf_i>
 8009460:	e7e4      	b.n	800942c <_vfiprintf_r+0x208>
 8009462:	bf00      	nop
 8009464:	08009de8 	.word	0x08009de8
 8009468:	08009e08 	.word	0x08009e08
 800946c:	08009dc8 	.word	0x08009dc8
 8009470:	08009e28 	.word	0x08009e28
 8009474:	08009e32 	.word	0x08009e32
 8009478:	00000000 	.word	0x00000000
 800947c:	080091ff 	.word	0x080091ff
 8009480:	08009e2e 	.word	0x08009e2e

08009484 <_printf_common>:
 8009484:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009488:	4616      	mov	r6, r2
 800948a:	4699      	mov	r9, r3
 800948c:	688a      	ldr	r2, [r1, #8]
 800948e:	690b      	ldr	r3, [r1, #16]
 8009490:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009494:	4293      	cmp	r3, r2
 8009496:	bfb8      	it	lt
 8009498:	4613      	movlt	r3, r2
 800949a:	6033      	str	r3, [r6, #0]
 800949c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80094a0:	4607      	mov	r7, r0
 80094a2:	460c      	mov	r4, r1
 80094a4:	b10a      	cbz	r2, 80094aa <_printf_common+0x26>
 80094a6:	3301      	adds	r3, #1
 80094a8:	6033      	str	r3, [r6, #0]
 80094aa:	6823      	ldr	r3, [r4, #0]
 80094ac:	0699      	lsls	r1, r3, #26
 80094ae:	bf42      	ittt	mi
 80094b0:	6833      	ldrmi	r3, [r6, #0]
 80094b2:	3302      	addmi	r3, #2
 80094b4:	6033      	strmi	r3, [r6, #0]
 80094b6:	6825      	ldr	r5, [r4, #0]
 80094b8:	f015 0506 	ands.w	r5, r5, #6
 80094bc:	d106      	bne.n	80094cc <_printf_common+0x48>
 80094be:	f104 0a19 	add.w	sl, r4, #25
 80094c2:	68e3      	ldr	r3, [r4, #12]
 80094c4:	6832      	ldr	r2, [r6, #0]
 80094c6:	1a9b      	subs	r3, r3, r2
 80094c8:	42ab      	cmp	r3, r5
 80094ca:	dc26      	bgt.n	800951a <_printf_common+0x96>
 80094cc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80094d0:	1e13      	subs	r3, r2, #0
 80094d2:	6822      	ldr	r2, [r4, #0]
 80094d4:	bf18      	it	ne
 80094d6:	2301      	movne	r3, #1
 80094d8:	0692      	lsls	r2, r2, #26
 80094da:	d42b      	bmi.n	8009534 <_printf_common+0xb0>
 80094dc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80094e0:	4649      	mov	r1, r9
 80094e2:	4638      	mov	r0, r7
 80094e4:	47c0      	blx	r8
 80094e6:	3001      	adds	r0, #1
 80094e8:	d01e      	beq.n	8009528 <_printf_common+0xa4>
 80094ea:	6823      	ldr	r3, [r4, #0]
 80094ec:	68e5      	ldr	r5, [r4, #12]
 80094ee:	6832      	ldr	r2, [r6, #0]
 80094f0:	f003 0306 	and.w	r3, r3, #6
 80094f4:	2b04      	cmp	r3, #4
 80094f6:	bf08      	it	eq
 80094f8:	1aad      	subeq	r5, r5, r2
 80094fa:	68a3      	ldr	r3, [r4, #8]
 80094fc:	6922      	ldr	r2, [r4, #16]
 80094fe:	bf0c      	ite	eq
 8009500:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009504:	2500      	movne	r5, #0
 8009506:	4293      	cmp	r3, r2
 8009508:	bfc4      	itt	gt
 800950a:	1a9b      	subgt	r3, r3, r2
 800950c:	18ed      	addgt	r5, r5, r3
 800950e:	2600      	movs	r6, #0
 8009510:	341a      	adds	r4, #26
 8009512:	42b5      	cmp	r5, r6
 8009514:	d11a      	bne.n	800954c <_printf_common+0xc8>
 8009516:	2000      	movs	r0, #0
 8009518:	e008      	b.n	800952c <_printf_common+0xa8>
 800951a:	2301      	movs	r3, #1
 800951c:	4652      	mov	r2, sl
 800951e:	4649      	mov	r1, r9
 8009520:	4638      	mov	r0, r7
 8009522:	47c0      	blx	r8
 8009524:	3001      	adds	r0, #1
 8009526:	d103      	bne.n	8009530 <_printf_common+0xac>
 8009528:	f04f 30ff 	mov.w	r0, #4294967295
 800952c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009530:	3501      	adds	r5, #1
 8009532:	e7c6      	b.n	80094c2 <_printf_common+0x3e>
 8009534:	18e1      	adds	r1, r4, r3
 8009536:	1c5a      	adds	r2, r3, #1
 8009538:	2030      	movs	r0, #48	; 0x30
 800953a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800953e:	4422      	add	r2, r4
 8009540:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009544:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009548:	3302      	adds	r3, #2
 800954a:	e7c7      	b.n	80094dc <_printf_common+0x58>
 800954c:	2301      	movs	r3, #1
 800954e:	4622      	mov	r2, r4
 8009550:	4649      	mov	r1, r9
 8009552:	4638      	mov	r0, r7
 8009554:	47c0      	blx	r8
 8009556:	3001      	adds	r0, #1
 8009558:	d0e6      	beq.n	8009528 <_printf_common+0xa4>
 800955a:	3601      	adds	r6, #1
 800955c:	e7d9      	b.n	8009512 <_printf_common+0x8e>
	...

08009560 <_printf_i>:
 8009560:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009564:	460c      	mov	r4, r1
 8009566:	4691      	mov	r9, r2
 8009568:	7e27      	ldrb	r7, [r4, #24]
 800956a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800956c:	2f78      	cmp	r7, #120	; 0x78
 800956e:	4680      	mov	r8, r0
 8009570:	469a      	mov	sl, r3
 8009572:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009576:	d807      	bhi.n	8009588 <_printf_i+0x28>
 8009578:	2f62      	cmp	r7, #98	; 0x62
 800957a:	d80a      	bhi.n	8009592 <_printf_i+0x32>
 800957c:	2f00      	cmp	r7, #0
 800957e:	f000 80d8 	beq.w	8009732 <_printf_i+0x1d2>
 8009582:	2f58      	cmp	r7, #88	; 0x58
 8009584:	f000 80a3 	beq.w	80096ce <_printf_i+0x16e>
 8009588:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800958c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009590:	e03a      	b.n	8009608 <_printf_i+0xa8>
 8009592:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009596:	2b15      	cmp	r3, #21
 8009598:	d8f6      	bhi.n	8009588 <_printf_i+0x28>
 800959a:	a001      	add	r0, pc, #4	; (adr r0, 80095a0 <_printf_i+0x40>)
 800959c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80095a0:	080095f9 	.word	0x080095f9
 80095a4:	0800960d 	.word	0x0800960d
 80095a8:	08009589 	.word	0x08009589
 80095ac:	08009589 	.word	0x08009589
 80095b0:	08009589 	.word	0x08009589
 80095b4:	08009589 	.word	0x08009589
 80095b8:	0800960d 	.word	0x0800960d
 80095bc:	08009589 	.word	0x08009589
 80095c0:	08009589 	.word	0x08009589
 80095c4:	08009589 	.word	0x08009589
 80095c8:	08009589 	.word	0x08009589
 80095cc:	08009719 	.word	0x08009719
 80095d0:	0800963d 	.word	0x0800963d
 80095d4:	080096fb 	.word	0x080096fb
 80095d8:	08009589 	.word	0x08009589
 80095dc:	08009589 	.word	0x08009589
 80095e0:	0800973b 	.word	0x0800973b
 80095e4:	08009589 	.word	0x08009589
 80095e8:	0800963d 	.word	0x0800963d
 80095ec:	08009589 	.word	0x08009589
 80095f0:	08009589 	.word	0x08009589
 80095f4:	08009703 	.word	0x08009703
 80095f8:	680b      	ldr	r3, [r1, #0]
 80095fa:	1d1a      	adds	r2, r3, #4
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	600a      	str	r2, [r1, #0]
 8009600:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009604:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009608:	2301      	movs	r3, #1
 800960a:	e0a3      	b.n	8009754 <_printf_i+0x1f4>
 800960c:	6825      	ldr	r5, [r4, #0]
 800960e:	6808      	ldr	r0, [r1, #0]
 8009610:	062e      	lsls	r6, r5, #24
 8009612:	f100 0304 	add.w	r3, r0, #4
 8009616:	d50a      	bpl.n	800962e <_printf_i+0xce>
 8009618:	6805      	ldr	r5, [r0, #0]
 800961a:	600b      	str	r3, [r1, #0]
 800961c:	2d00      	cmp	r5, #0
 800961e:	da03      	bge.n	8009628 <_printf_i+0xc8>
 8009620:	232d      	movs	r3, #45	; 0x2d
 8009622:	426d      	negs	r5, r5
 8009624:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009628:	485e      	ldr	r0, [pc, #376]	; (80097a4 <_printf_i+0x244>)
 800962a:	230a      	movs	r3, #10
 800962c:	e019      	b.n	8009662 <_printf_i+0x102>
 800962e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8009632:	6805      	ldr	r5, [r0, #0]
 8009634:	600b      	str	r3, [r1, #0]
 8009636:	bf18      	it	ne
 8009638:	b22d      	sxthne	r5, r5
 800963a:	e7ef      	b.n	800961c <_printf_i+0xbc>
 800963c:	680b      	ldr	r3, [r1, #0]
 800963e:	6825      	ldr	r5, [r4, #0]
 8009640:	1d18      	adds	r0, r3, #4
 8009642:	6008      	str	r0, [r1, #0]
 8009644:	0628      	lsls	r0, r5, #24
 8009646:	d501      	bpl.n	800964c <_printf_i+0xec>
 8009648:	681d      	ldr	r5, [r3, #0]
 800964a:	e002      	b.n	8009652 <_printf_i+0xf2>
 800964c:	0669      	lsls	r1, r5, #25
 800964e:	d5fb      	bpl.n	8009648 <_printf_i+0xe8>
 8009650:	881d      	ldrh	r5, [r3, #0]
 8009652:	4854      	ldr	r0, [pc, #336]	; (80097a4 <_printf_i+0x244>)
 8009654:	2f6f      	cmp	r7, #111	; 0x6f
 8009656:	bf0c      	ite	eq
 8009658:	2308      	moveq	r3, #8
 800965a:	230a      	movne	r3, #10
 800965c:	2100      	movs	r1, #0
 800965e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009662:	6866      	ldr	r6, [r4, #4]
 8009664:	60a6      	str	r6, [r4, #8]
 8009666:	2e00      	cmp	r6, #0
 8009668:	bfa2      	ittt	ge
 800966a:	6821      	ldrge	r1, [r4, #0]
 800966c:	f021 0104 	bicge.w	r1, r1, #4
 8009670:	6021      	strge	r1, [r4, #0]
 8009672:	b90d      	cbnz	r5, 8009678 <_printf_i+0x118>
 8009674:	2e00      	cmp	r6, #0
 8009676:	d04d      	beq.n	8009714 <_printf_i+0x1b4>
 8009678:	4616      	mov	r6, r2
 800967a:	fbb5 f1f3 	udiv	r1, r5, r3
 800967e:	fb03 5711 	mls	r7, r3, r1, r5
 8009682:	5dc7      	ldrb	r7, [r0, r7]
 8009684:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009688:	462f      	mov	r7, r5
 800968a:	42bb      	cmp	r3, r7
 800968c:	460d      	mov	r5, r1
 800968e:	d9f4      	bls.n	800967a <_printf_i+0x11a>
 8009690:	2b08      	cmp	r3, #8
 8009692:	d10b      	bne.n	80096ac <_printf_i+0x14c>
 8009694:	6823      	ldr	r3, [r4, #0]
 8009696:	07df      	lsls	r7, r3, #31
 8009698:	d508      	bpl.n	80096ac <_printf_i+0x14c>
 800969a:	6923      	ldr	r3, [r4, #16]
 800969c:	6861      	ldr	r1, [r4, #4]
 800969e:	4299      	cmp	r1, r3
 80096a0:	bfde      	ittt	le
 80096a2:	2330      	movle	r3, #48	; 0x30
 80096a4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80096a8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80096ac:	1b92      	subs	r2, r2, r6
 80096ae:	6122      	str	r2, [r4, #16]
 80096b0:	f8cd a000 	str.w	sl, [sp]
 80096b4:	464b      	mov	r3, r9
 80096b6:	aa03      	add	r2, sp, #12
 80096b8:	4621      	mov	r1, r4
 80096ba:	4640      	mov	r0, r8
 80096bc:	f7ff fee2 	bl	8009484 <_printf_common>
 80096c0:	3001      	adds	r0, #1
 80096c2:	d14c      	bne.n	800975e <_printf_i+0x1fe>
 80096c4:	f04f 30ff 	mov.w	r0, #4294967295
 80096c8:	b004      	add	sp, #16
 80096ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80096ce:	4835      	ldr	r0, [pc, #212]	; (80097a4 <_printf_i+0x244>)
 80096d0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80096d4:	6823      	ldr	r3, [r4, #0]
 80096d6:	680e      	ldr	r6, [r1, #0]
 80096d8:	061f      	lsls	r7, r3, #24
 80096da:	f856 5b04 	ldr.w	r5, [r6], #4
 80096de:	600e      	str	r6, [r1, #0]
 80096e0:	d514      	bpl.n	800970c <_printf_i+0x1ac>
 80096e2:	07d9      	lsls	r1, r3, #31
 80096e4:	bf44      	itt	mi
 80096e6:	f043 0320 	orrmi.w	r3, r3, #32
 80096ea:	6023      	strmi	r3, [r4, #0]
 80096ec:	b91d      	cbnz	r5, 80096f6 <_printf_i+0x196>
 80096ee:	6823      	ldr	r3, [r4, #0]
 80096f0:	f023 0320 	bic.w	r3, r3, #32
 80096f4:	6023      	str	r3, [r4, #0]
 80096f6:	2310      	movs	r3, #16
 80096f8:	e7b0      	b.n	800965c <_printf_i+0xfc>
 80096fa:	6823      	ldr	r3, [r4, #0]
 80096fc:	f043 0320 	orr.w	r3, r3, #32
 8009700:	6023      	str	r3, [r4, #0]
 8009702:	2378      	movs	r3, #120	; 0x78
 8009704:	4828      	ldr	r0, [pc, #160]	; (80097a8 <_printf_i+0x248>)
 8009706:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800970a:	e7e3      	b.n	80096d4 <_printf_i+0x174>
 800970c:	065e      	lsls	r6, r3, #25
 800970e:	bf48      	it	mi
 8009710:	b2ad      	uxthmi	r5, r5
 8009712:	e7e6      	b.n	80096e2 <_printf_i+0x182>
 8009714:	4616      	mov	r6, r2
 8009716:	e7bb      	b.n	8009690 <_printf_i+0x130>
 8009718:	680b      	ldr	r3, [r1, #0]
 800971a:	6826      	ldr	r6, [r4, #0]
 800971c:	6960      	ldr	r0, [r4, #20]
 800971e:	1d1d      	adds	r5, r3, #4
 8009720:	600d      	str	r5, [r1, #0]
 8009722:	0635      	lsls	r5, r6, #24
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	d501      	bpl.n	800972c <_printf_i+0x1cc>
 8009728:	6018      	str	r0, [r3, #0]
 800972a:	e002      	b.n	8009732 <_printf_i+0x1d2>
 800972c:	0671      	lsls	r1, r6, #25
 800972e:	d5fb      	bpl.n	8009728 <_printf_i+0x1c8>
 8009730:	8018      	strh	r0, [r3, #0]
 8009732:	2300      	movs	r3, #0
 8009734:	6123      	str	r3, [r4, #16]
 8009736:	4616      	mov	r6, r2
 8009738:	e7ba      	b.n	80096b0 <_printf_i+0x150>
 800973a:	680b      	ldr	r3, [r1, #0]
 800973c:	1d1a      	adds	r2, r3, #4
 800973e:	600a      	str	r2, [r1, #0]
 8009740:	681e      	ldr	r6, [r3, #0]
 8009742:	6862      	ldr	r2, [r4, #4]
 8009744:	2100      	movs	r1, #0
 8009746:	4630      	mov	r0, r6
 8009748:	f7f6 fd42 	bl	80001d0 <memchr>
 800974c:	b108      	cbz	r0, 8009752 <_printf_i+0x1f2>
 800974e:	1b80      	subs	r0, r0, r6
 8009750:	6060      	str	r0, [r4, #4]
 8009752:	6863      	ldr	r3, [r4, #4]
 8009754:	6123      	str	r3, [r4, #16]
 8009756:	2300      	movs	r3, #0
 8009758:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800975c:	e7a8      	b.n	80096b0 <_printf_i+0x150>
 800975e:	6923      	ldr	r3, [r4, #16]
 8009760:	4632      	mov	r2, r6
 8009762:	4649      	mov	r1, r9
 8009764:	4640      	mov	r0, r8
 8009766:	47d0      	blx	sl
 8009768:	3001      	adds	r0, #1
 800976a:	d0ab      	beq.n	80096c4 <_printf_i+0x164>
 800976c:	6823      	ldr	r3, [r4, #0]
 800976e:	079b      	lsls	r3, r3, #30
 8009770:	d413      	bmi.n	800979a <_printf_i+0x23a>
 8009772:	68e0      	ldr	r0, [r4, #12]
 8009774:	9b03      	ldr	r3, [sp, #12]
 8009776:	4298      	cmp	r0, r3
 8009778:	bfb8      	it	lt
 800977a:	4618      	movlt	r0, r3
 800977c:	e7a4      	b.n	80096c8 <_printf_i+0x168>
 800977e:	2301      	movs	r3, #1
 8009780:	4632      	mov	r2, r6
 8009782:	4649      	mov	r1, r9
 8009784:	4640      	mov	r0, r8
 8009786:	47d0      	blx	sl
 8009788:	3001      	adds	r0, #1
 800978a:	d09b      	beq.n	80096c4 <_printf_i+0x164>
 800978c:	3501      	adds	r5, #1
 800978e:	68e3      	ldr	r3, [r4, #12]
 8009790:	9903      	ldr	r1, [sp, #12]
 8009792:	1a5b      	subs	r3, r3, r1
 8009794:	42ab      	cmp	r3, r5
 8009796:	dcf2      	bgt.n	800977e <_printf_i+0x21e>
 8009798:	e7eb      	b.n	8009772 <_printf_i+0x212>
 800979a:	2500      	movs	r5, #0
 800979c:	f104 0619 	add.w	r6, r4, #25
 80097a0:	e7f5      	b.n	800978e <_printf_i+0x22e>
 80097a2:	bf00      	nop
 80097a4:	08009e39 	.word	0x08009e39
 80097a8:	08009e4a 	.word	0x08009e4a

080097ac <_sbrk_r>:
 80097ac:	b538      	push	{r3, r4, r5, lr}
 80097ae:	4d06      	ldr	r5, [pc, #24]	; (80097c8 <_sbrk_r+0x1c>)
 80097b0:	2300      	movs	r3, #0
 80097b2:	4604      	mov	r4, r0
 80097b4:	4608      	mov	r0, r1
 80097b6:	602b      	str	r3, [r5, #0]
 80097b8:	f7f8 f9ea 	bl	8001b90 <_sbrk>
 80097bc:	1c43      	adds	r3, r0, #1
 80097be:	d102      	bne.n	80097c6 <_sbrk_r+0x1a>
 80097c0:	682b      	ldr	r3, [r5, #0]
 80097c2:	b103      	cbz	r3, 80097c6 <_sbrk_r+0x1a>
 80097c4:	6023      	str	r3, [r4, #0]
 80097c6:	bd38      	pop	{r3, r4, r5, pc}
 80097c8:	20004c2c 	.word	0x20004c2c

080097cc <__sread>:
 80097cc:	b510      	push	{r4, lr}
 80097ce:	460c      	mov	r4, r1
 80097d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80097d4:	f000 f8e0 	bl	8009998 <_read_r>
 80097d8:	2800      	cmp	r0, #0
 80097da:	bfab      	itete	ge
 80097dc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80097de:	89a3      	ldrhlt	r3, [r4, #12]
 80097e0:	181b      	addge	r3, r3, r0
 80097e2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80097e6:	bfac      	ite	ge
 80097e8:	6563      	strge	r3, [r4, #84]	; 0x54
 80097ea:	81a3      	strhlt	r3, [r4, #12]
 80097ec:	bd10      	pop	{r4, pc}

080097ee <__swrite>:
 80097ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80097f2:	461f      	mov	r7, r3
 80097f4:	898b      	ldrh	r3, [r1, #12]
 80097f6:	05db      	lsls	r3, r3, #23
 80097f8:	4605      	mov	r5, r0
 80097fa:	460c      	mov	r4, r1
 80097fc:	4616      	mov	r6, r2
 80097fe:	d505      	bpl.n	800980c <__swrite+0x1e>
 8009800:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009804:	2302      	movs	r3, #2
 8009806:	2200      	movs	r2, #0
 8009808:	f000 f868 	bl	80098dc <_lseek_r>
 800980c:	89a3      	ldrh	r3, [r4, #12]
 800980e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009812:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009816:	81a3      	strh	r3, [r4, #12]
 8009818:	4632      	mov	r2, r6
 800981a:	463b      	mov	r3, r7
 800981c:	4628      	mov	r0, r5
 800981e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009822:	f000 b817 	b.w	8009854 <_write_r>

08009826 <__sseek>:
 8009826:	b510      	push	{r4, lr}
 8009828:	460c      	mov	r4, r1
 800982a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800982e:	f000 f855 	bl	80098dc <_lseek_r>
 8009832:	1c43      	adds	r3, r0, #1
 8009834:	89a3      	ldrh	r3, [r4, #12]
 8009836:	bf15      	itete	ne
 8009838:	6560      	strne	r0, [r4, #84]	; 0x54
 800983a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800983e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009842:	81a3      	strheq	r3, [r4, #12]
 8009844:	bf18      	it	ne
 8009846:	81a3      	strhne	r3, [r4, #12]
 8009848:	bd10      	pop	{r4, pc}

0800984a <__sclose>:
 800984a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800984e:	f000 b813 	b.w	8009878 <_close_r>
	...

08009854 <_write_r>:
 8009854:	b538      	push	{r3, r4, r5, lr}
 8009856:	4d07      	ldr	r5, [pc, #28]	; (8009874 <_write_r+0x20>)
 8009858:	4604      	mov	r4, r0
 800985a:	4608      	mov	r0, r1
 800985c:	4611      	mov	r1, r2
 800985e:	2200      	movs	r2, #0
 8009860:	602a      	str	r2, [r5, #0]
 8009862:	461a      	mov	r2, r3
 8009864:	f7f8 f943 	bl	8001aee <_write>
 8009868:	1c43      	adds	r3, r0, #1
 800986a:	d102      	bne.n	8009872 <_write_r+0x1e>
 800986c:	682b      	ldr	r3, [r5, #0]
 800986e:	b103      	cbz	r3, 8009872 <_write_r+0x1e>
 8009870:	6023      	str	r3, [r4, #0]
 8009872:	bd38      	pop	{r3, r4, r5, pc}
 8009874:	20004c2c 	.word	0x20004c2c

08009878 <_close_r>:
 8009878:	b538      	push	{r3, r4, r5, lr}
 800987a:	4d06      	ldr	r5, [pc, #24]	; (8009894 <_close_r+0x1c>)
 800987c:	2300      	movs	r3, #0
 800987e:	4604      	mov	r4, r0
 8009880:	4608      	mov	r0, r1
 8009882:	602b      	str	r3, [r5, #0]
 8009884:	f7f8 f94f 	bl	8001b26 <_close>
 8009888:	1c43      	adds	r3, r0, #1
 800988a:	d102      	bne.n	8009892 <_close_r+0x1a>
 800988c:	682b      	ldr	r3, [r5, #0]
 800988e:	b103      	cbz	r3, 8009892 <_close_r+0x1a>
 8009890:	6023      	str	r3, [r4, #0]
 8009892:	bd38      	pop	{r3, r4, r5, pc}
 8009894:	20004c2c 	.word	0x20004c2c

08009898 <_fstat_r>:
 8009898:	b538      	push	{r3, r4, r5, lr}
 800989a:	4d07      	ldr	r5, [pc, #28]	; (80098b8 <_fstat_r+0x20>)
 800989c:	2300      	movs	r3, #0
 800989e:	4604      	mov	r4, r0
 80098a0:	4608      	mov	r0, r1
 80098a2:	4611      	mov	r1, r2
 80098a4:	602b      	str	r3, [r5, #0]
 80098a6:	f7f8 f94a 	bl	8001b3e <_fstat>
 80098aa:	1c43      	adds	r3, r0, #1
 80098ac:	d102      	bne.n	80098b4 <_fstat_r+0x1c>
 80098ae:	682b      	ldr	r3, [r5, #0]
 80098b0:	b103      	cbz	r3, 80098b4 <_fstat_r+0x1c>
 80098b2:	6023      	str	r3, [r4, #0]
 80098b4:	bd38      	pop	{r3, r4, r5, pc}
 80098b6:	bf00      	nop
 80098b8:	20004c2c 	.word	0x20004c2c

080098bc <_isatty_r>:
 80098bc:	b538      	push	{r3, r4, r5, lr}
 80098be:	4d06      	ldr	r5, [pc, #24]	; (80098d8 <_isatty_r+0x1c>)
 80098c0:	2300      	movs	r3, #0
 80098c2:	4604      	mov	r4, r0
 80098c4:	4608      	mov	r0, r1
 80098c6:	602b      	str	r3, [r5, #0]
 80098c8:	f7f8 f949 	bl	8001b5e <_isatty>
 80098cc:	1c43      	adds	r3, r0, #1
 80098ce:	d102      	bne.n	80098d6 <_isatty_r+0x1a>
 80098d0:	682b      	ldr	r3, [r5, #0]
 80098d2:	b103      	cbz	r3, 80098d6 <_isatty_r+0x1a>
 80098d4:	6023      	str	r3, [r4, #0]
 80098d6:	bd38      	pop	{r3, r4, r5, pc}
 80098d8:	20004c2c 	.word	0x20004c2c

080098dc <_lseek_r>:
 80098dc:	b538      	push	{r3, r4, r5, lr}
 80098de:	4d07      	ldr	r5, [pc, #28]	; (80098fc <_lseek_r+0x20>)
 80098e0:	4604      	mov	r4, r0
 80098e2:	4608      	mov	r0, r1
 80098e4:	4611      	mov	r1, r2
 80098e6:	2200      	movs	r2, #0
 80098e8:	602a      	str	r2, [r5, #0]
 80098ea:	461a      	mov	r2, r3
 80098ec:	f7f8 f942 	bl	8001b74 <_lseek>
 80098f0:	1c43      	adds	r3, r0, #1
 80098f2:	d102      	bne.n	80098fa <_lseek_r+0x1e>
 80098f4:	682b      	ldr	r3, [r5, #0]
 80098f6:	b103      	cbz	r3, 80098fa <_lseek_r+0x1e>
 80098f8:	6023      	str	r3, [r4, #0]
 80098fa:	bd38      	pop	{r3, r4, r5, pc}
 80098fc:	20004c2c 	.word	0x20004c2c

08009900 <memmove>:
 8009900:	4288      	cmp	r0, r1
 8009902:	b510      	push	{r4, lr}
 8009904:	eb01 0402 	add.w	r4, r1, r2
 8009908:	d902      	bls.n	8009910 <memmove+0x10>
 800990a:	4284      	cmp	r4, r0
 800990c:	4623      	mov	r3, r4
 800990e:	d807      	bhi.n	8009920 <memmove+0x20>
 8009910:	1e43      	subs	r3, r0, #1
 8009912:	42a1      	cmp	r1, r4
 8009914:	d008      	beq.n	8009928 <memmove+0x28>
 8009916:	f811 2b01 	ldrb.w	r2, [r1], #1
 800991a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800991e:	e7f8      	b.n	8009912 <memmove+0x12>
 8009920:	4402      	add	r2, r0
 8009922:	4601      	mov	r1, r0
 8009924:	428a      	cmp	r2, r1
 8009926:	d100      	bne.n	800992a <memmove+0x2a>
 8009928:	bd10      	pop	{r4, pc}
 800992a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800992e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009932:	e7f7      	b.n	8009924 <memmove+0x24>

08009934 <__malloc_lock>:
 8009934:	4801      	ldr	r0, [pc, #4]	; (800993c <__malloc_lock+0x8>)
 8009936:	f7ff b9df 	b.w	8008cf8 <__retarget_lock_acquire_recursive>
 800993a:	bf00      	nop
 800993c:	20004c24 	.word	0x20004c24

08009940 <__malloc_unlock>:
 8009940:	4801      	ldr	r0, [pc, #4]	; (8009948 <__malloc_unlock+0x8>)
 8009942:	f7ff b9da 	b.w	8008cfa <__retarget_lock_release_recursive>
 8009946:	bf00      	nop
 8009948:	20004c24 	.word	0x20004c24

0800994c <_realloc_r>:
 800994c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800994e:	4607      	mov	r7, r0
 8009950:	4614      	mov	r4, r2
 8009952:	460e      	mov	r6, r1
 8009954:	b921      	cbnz	r1, 8009960 <_realloc_r+0x14>
 8009956:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800995a:	4611      	mov	r1, r2
 800995c:	f7ff ba82 	b.w	8008e64 <_malloc_r>
 8009960:	b922      	cbnz	r2, 800996c <_realloc_r+0x20>
 8009962:	f7ff fa2f 	bl	8008dc4 <_free_r>
 8009966:	4625      	mov	r5, r4
 8009968:	4628      	mov	r0, r5
 800996a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800996c:	f000 f826 	bl	80099bc <_malloc_usable_size_r>
 8009970:	42a0      	cmp	r0, r4
 8009972:	d20f      	bcs.n	8009994 <_realloc_r+0x48>
 8009974:	4621      	mov	r1, r4
 8009976:	4638      	mov	r0, r7
 8009978:	f7ff fa74 	bl	8008e64 <_malloc_r>
 800997c:	4605      	mov	r5, r0
 800997e:	2800      	cmp	r0, #0
 8009980:	d0f2      	beq.n	8009968 <_realloc_r+0x1c>
 8009982:	4631      	mov	r1, r6
 8009984:	4622      	mov	r2, r4
 8009986:	f7fe fe7b 	bl	8008680 <memcpy>
 800998a:	4631      	mov	r1, r6
 800998c:	4638      	mov	r0, r7
 800998e:	f7ff fa19 	bl	8008dc4 <_free_r>
 8009992:	e7e9      	b.n	8009968 <_realloc_r+0x1c>
 8009994:	4635      	mov	r5, r6
 8009996:	e7e7      	b.n	8009968 <_realloc_r+0x1c>

08009998 <_read_r>:
 8009998:	b538      	push	{r3, r4, r5, lr}
 800999a:	4d07      	ldr	r5, [pc, #28]	; (80099b8 <_read_r+0x20>)
 800999c:	4604      	mov	r4, r0
 800999e:	4608      	mov	r0, r1
 80099a0:	4611      	mov	r1, r2
 80099a2:	2200      	movs	r2, #0
 80099a4:	602a      	str	r2, [r5, #0]
 80099a6:	461a      	mov	r2, r3
 80099a8:	f7f8 f884 	bl	8001ab4 <_read>
 80099ac:	1c43      	adds	r3, r0, #1
 80099ae:	d102      	bne.n	80099b6 <_read_r+0x1e>
 80099b0:	682b      	ldr	r3, [r5, #0]
 80099b2:	b103      	cbz	r3, 80099b6 <_read_r+0x1e>
 80099b4:	6023      	str	r3, [r4, #0]
 80099b6:	bd38      	pop	{r3, r4, r5, pc}
 80099b8:	20004c2c 	.word	0x20004c2c

080099bc <_malloc_usable_size_r>:
 80099bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80099c0:	1f18      	subs	r0, r3, #4
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	bfbc      	itt	lt
 80099c6:	580b      	ldrlt	r3, [r1, r0]
 80099c8:	18c0      	addlt	r0, r0, r3
 80099ca:	4770      	bx	lr

080099cc <_init>:
 80099cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099ce:	bf00      	nop
 80099d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80099d2:	bc08      	pop	{r3}
 80099d4:	469e      	mov	lr, r3
 80099d6:	4770      	bx	lr

080099d8 <_fini>:
 80099d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099da:	bf00      	nop
 80099dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80099de:	bc08      	pop	{r3}
 80099e0:	469e      	mov	lr, r3
 80099e2:	4770      	bx	lr
